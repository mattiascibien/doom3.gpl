diff -NEaurb neo/MayaImport.vcxproj neo/MayaImport.vcxproj
--- neo/MayaImport.vcxproj	2011-12-26 04:15:38 +0000
+++ neo/MayaImport.vcxproj	2013-08-13 10:25:06 +0000
@@ -47,36 +47,43 @@
     <ConfigurationType>DynamicLibrary</ConfigurationType>
     <UseOfMfc>false</UseOfMfc>
     <CharacterSet>MultiByte</CharacterSet>
+    <PlatformToolset>v110</PlatformToolset>
   </PropertyGroup>
   <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Dedicated Debug with inlines|Win32'" Label="Configuration">
     <ConfigurationType>DynamicLibrary</ConfigurationType>
     <UseOfMfc>false</UseOfMfc>
     <CharacterSet>MultiByte</CharacterSet>
+    <PlatformToolset>v110</PlatformToolset>
   </PropertyGroup>
   <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Dedicated Debug|Win32'" Label="Configuration">
     <ConfigurationType>DynamicLibrary</ConfigurationType>
     <UseOfMfc>false</UseOfMfc>
     <CharacterSet>MultiByte</CharacterSet>
+    <PlatformToolset>v110</PlatformToolset>
   </PropertyGroup>
   <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug with inlines and memory log|Win32'" Label="Configuration">
     <ConfigurationType>DynamicLibrary</ConfigurationType>
     <UseOfMfc>false</UseOfMfc>
     <CharacterSet>MultiByte</CharacterSet>
+    <PlatformToolset>v110</PlatformToolset>
   </PropertyGroup>
   <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug with inlines|Win32'" Label="Configuration">
     <ConfigurationType>DynamicLibrary</ConfigurationType>
     <UseOfMfc>false</UseOfMfc>
     <CharacterSet>MultiByte</CharacterSet>
+    <PlatformToolset>v110</PlatformToolset>
   </PropertyGroup>
   <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|Win32'" Label="Configuration">
     <ConfigurationType>DynamicLibrary</ConfigurationType>
     <UseOfMfc>false</UseOfMfc>
     <CharacterSet>MultiByte</CharacterSet>
+    <PlatformToolset>v110</PlatformToolset>
   </PropertyGroup>
   <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'" Label="Configuration">
     <ConfigurationType>DynamicLibrary</ConfigurationType>
     <UseOfMfc>false</UseOfMfc>
     <CharacterSet>MultiByte</CharacterSet>
+    <PlatformToolset>v110</PlatformToolset>
   </PropertyGroup>
   <Import Project="$(VCTargetsPath)\Microsoft.Cpp.props" />
   <ImportGroup Label="ExtensionSettings">
@@ -155,7 +162,15 @@
     <CodeAnalysisRules Condition="'$(Configuration)|$(Platform)'=='Release|Win32'" />
     <CodeAnalysisRuleAssemblies Condition="'$(Configuration)|$(Platform)'=='Release|Win32'" />
   </PropertyGroup>
-  <ItemDefinitionGroup>
+  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Dedicated Release|Win32'">
+    <ClCompile>
+      <PrecompiledHeader />
+    </ClCompile>
+  </ItemDefinitionGroup>
+  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">
+    <ClCompile>
+      <PreprocessorDefinitions>_ALLOW_KEYWORD_MACROS;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+    </ClCompile>
   </ItemDefinitionGroup>
   <ItemGroup>
     <ClInclude Include="MayaImport\Maya4.5\maya.h" />
diff -NEaurb neo/_Common.props neo/_Common.props
--- neo/_Common.props	2011-12-26 04:15:38 +0000
+++ neo/_Common.props	2013-08-14 03:01:54 +0000
@@ -8,8 +8,11 @@
   </PropertyGroup>
   <ItemDefinitionGroup>
     <ClCompile>
-      <PreprocessorDefinitions>WIN32;_WINDOWS;_CRT_SECURE_NO_DEPRECATE;_CRT_NONSTDC_NO_DEPRECATE;_USE_32BIT_TIME_T;%(PreprocessorDefinitions)</PreprocessorDefinitions>
-      <WarningLevel>Level4</WarningLevel>
+      <PreprocessorDefinitions>WIN32;_WINDOWS;_CRT_SECURE_NO_DEPRECATE;_CRT_NONSTDC_NO_DEPRECATE;_USE_32BIT_TIME_T;_ALLOW_KEYWORD_MACROS;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <MultiProcessorCompilation>true</MultiProcessorCompilation>
+      <EnableParallelCodeGeneration>true</EnableParallelCodeGeneration>
+      <OpenMPSupport>true</OpenMPSupport>
+	  <WarningLevel>Level3</WarningLevel>
       <PrecompiledHeaderFile>
       </PrecompiledHeaderFile>
     </ClCompile>
diff -NEaurb neo/_Curl.props neo/_Curl.props
--- neo/_Curl.props	2011-12-26 04:15:38 +0000
+++ neo/_Curl.props	2013-08-13 09:59:09 +0000
@@ -8,6 +8,8 @@
     <ClCompile>
       <WarningLevel>Level3</WarningLevel>
       <PreprocessorDefinitions>USRDLL;CURLLIB_EXPORTS;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+	  <PrecompiledHeader>
+      </PrecompiledHeader>
     </ClCompile>
   </ItemDefinitionGroup>
 </Project>
\ No newline at end of file
diff -NEaurb neo/_Debug.props neo/_Debug.props
--- neo/_Debug.props	2011-12-26 04:15:38 +0000
+++ neo/_Debug.props	2013-08-13 09:59:09 +0000
@@ -13,6 +13,8 @@
       <RuntimeLibrary>MultiThreadedDebug</RuntimeLibrary>
       <RuntimeTypeInfo>true</RuntimeTypeInfo>
       <DebugInformationFormat>ProgramDatabase</DebugInformationFormat>
+      <PrecompiledHeader>
+      </PrecompiledHeader>
     </ClCompile>
     <Link>
       <AdditionalDependencies>nafxcwd.lib;libcmtd.lib;%(AdditionalDependencies)</AdditionalDependencies>
diff -NEaurb neo/_Dedicated.props neo/_Dedicated.props
--- neo/_Dedicated.props	2011-12-26 04:15:38 +0000
+++ neo/_Dedicated.props	2013-08-14 03:01:54 +0000
@@ -7,6 +7,12 @@
   <ItemDefinitionGroup>
     <ClCompile>
       <PreprocessorDefinitions>ID_DEDICATED;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <MultiProcessorCompilation>true</MultiProcessorCompilation>
+      <EnableParallelCodeGeneration>true</EnableParallelCodeGeneration>
+      <OpenMPSupport>true</OpenMPSupport>
+	  <WarningLevel>Level3</WarningLevel>
+	  <PrecompiledHeader>
+      </PrecompiledHeader>
     </ClCompile>
   </ItemDefinitionGroup>
 </Project>
\ No newline at end of file
diff -NEaurb neo/_DoomDLL.props neo/_DoomDLL.props
--- neo/_DoomDLL.props	2011-12-26 04:15:38 +0000
+++ neo/_DoomDLL.props	2013-08-14 03:01:54 +0000
@@ -8,14 +8,18 @@
     <ClCompile>
       <AdditionalIncludeDirectories>sound/vorbis/include;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
       <PreprocessorDefinitions>__DOOM__;__DOOM_DLL__;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <MultiProcessorCompilation>true</MultiProcessorCompilation>
+      <EnableParallelCodeGeneration>true</EnableParallelCodeGeneration>
+      <OpenMPSupport>true</OpenMPSupport>
+	  <WarningLevel>Level3</WarningLevel>
       <PrecompiledHeader>
       </PrecompiledHeader>
       <WarningLevel>Level3</WarningLevel>
     </ClCompile>
     <Link>
-      <AdditionalDependencies>dbghelp.lib;dinput8.lib;dsound.lib;dxguid.lib;DxErr.lib;eaxguid.lib;glu32.lib;iphlpapi.lib;odbc32.lib;odbccp32.lib;opengl32.lib;winmm.lib;wsock32.lib;%(AdditionalDependencies)</AdditionalDependencies>
-      <AdditionalLibraryDirectories>C:\Program Files (x86)\Microsoft DirectX SDK (June 2010)\Lib\x86;openal\lib;sys\win32\dongle;%(AdditionalLibraryDirectories)</AdditionalLibraryDirectories>
-      <OutputFile>$(OutDir)DOOM3.exe</OutputFile>
+      <AdditionalDependencies>dbghelp.lib;dinput8.lib;dsound.lib;dxguid.lib;dxerr.lib;eaxguid.lib;glu32.lib;iphlpapi.lib;odbc32.lib;odbccp32.lib;opengl32.lib;winmm.lib;wsock32.lib;%(AdditionalDependencies)</AdditionalDependencies>
+      <AdditionalLibraryDirectories>openal\lib;sys\win32\dongle;%(AdditionalLibraryDirectories)</AdditionalLibraryDirectories>
+      <OutputFile>$(OutDir)Doom3.exe</OutputFile>
       <AdditionalManifestDependencies>%(AdditionalManifestDependencies)</AdditionalManifestDependencies>
       <SubSystem>Windows</SubSystem>
       <StackReserveSize>16777216</StackReserveSize>
diff -NEaurb neo/_Game-d3xp.props neo/_Game-d3xp.props
--- neo/_Game-d3xp.props	2011-12-26 04:15:38 +0000
+++ neo/_Game-d3xp.props	2013-08-14 03:01:54 +0000
@@ -8,6 +8,12 @@
     <ClCompile>
       <PreprocessorDefinitions>__DOOM__;GAME_DLL;_D3XP;CTF;%(PreprocessorDefinitions)</PreprocessorDefinitions>
       <AdditionalIncludeDirectories>%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
+      <MultiProcessorCompilation>true</MultiProcessorCompilation>
+      <EnableParallelCodeGeneration>true</EnableParallelCodeGeneration>
+      <OpenMPSupport>true</OpenMPSupport>
+	  <WarningLevel>Level3</WarningLevel>
+      <PrecompiledHeader>
+      </PrecompiledHeader>
     </ClCompile>
     <Link>
       <OutputFile>$(OutDir)gamex86.dll</OutputFile>
diff -NEaurb neo/_Game.props neo/_Game.props
--- neo/_Game.props	2011-12-26 04:15:38 +0000
+++ neo/_Game.props	2013-08-14 03:01:54 +0000
@@ -8,6 +8,10 @@
     <ClCompile>
       <PreprocessorDefinitions>__DOOM__;GAME_DLL;%(PreprocessorDefinitions)</PreprocessorDefinitions>
       <AdditionalIncludeDirectories>%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
+      <MultiProcessorCompilation>true</MultiProcessorCompilation>
+      <EnableParallelCodeGeneration>true</EnableParallelCodeGeneration>
+      <OpenMPSupport>true</OpenMPSupport>
+	  <WarningLevel>Level3</WarningLevel>
       <PrecompiledHeader>
       </PrecompiledHeader>
     </ClCompile>
diff -NEaurb neo/_Release.props neo/_Release.props
--- neo/_Release.props	2011-12-26 04:15:38 +0000
+++ neo/_Release.props	2013-08-13 09:59:09 +0000
@@ -17,6 +17,8 @@
       <FunctionLevelLinking>true</FunctionLevelLinking>
       <RuntimeTypeInfo>true</RuntimeTypeInfo>
       <DebugInformationFormat>ProgramDatabase</DebugInformationFormat>
+      <PrecompiledHeader>
+      </PrecompiledHeader>
     </ClCompile>
     <Link>
       <AdditionalDependencies>nafxcw.lib;libcmt.lib;%(AdditionalDependencies)</AdditionalDependencies>
diff -NEaurb neo/_TypeInfo.props neo/_TypeInfo.props
--- neo/_TypeInfo.props	2011-12-26 04:15:38 +0000
+++ neo/_TypeInfo.props	2013-08-13 09:59:09 +0000
@@ -7,7 +7,8 @@
   <ItemDefinitionGroup>
     <ClCompile>
       <PreprocessorDefinitions>ID_ENABLE_CURL=0;ID_TYPEINFO;__DOOM_DLL__;%(PreprocessorDefinitions)</PreprocessorDefinitions>
-      <PrecompiledHeader>Use</PrecompiledHeader>
+      <PrecompiledHeader>
+	  </PrecompiledHeader>
     </ClCompile>
     <Link>
       <SubSystem>Console</SubSystem>
diff -NEaurb neo/_WithInlines.props neo/_WithInlines.props
--- neo/_WithInlines.props	2011-12-26 04:15:38 +0000
+++ neo/_WithInlines.props	2013-08-13 09:59:09 +0000
@@ -8,6 +8,8 @@
     <ClCompile>
       <InlineFunctionExpansion>OnlyExplicitInline</InlineFunctionExpansion>
       <PreprocessorDefinitions>_INLINEDEBUG;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <PrecompiledHeader>
+      </PrecompiledHeader>
     </ClCompile>
   </ItemDefinitionGroup>
 </Project>
\ No newline at end of file
diff -NEaurb neo/_WithMemoryLog.props neo/_WithMemoryLog.props
--- neo/_WithMemoryLog.props	2011-12-26 04:15:38 +0000
+++ neo/_WithMemoryLog.props	2013-08-13 09:59:09 +0000
@@ -7,6 +7,8 @@
   <ItemDefinitionGroup>
     <ClCompile>
       <PreprocessorDefinitions>ID_REDIRECT_NEWDELETE;ID_DEBUG_MEMORY;ID_DEBUG_UNINITIALIZED_MEMORY;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <PrecompiledHeader>
+      </PrecompiledHeader>
     </ClCompile>
   </ItemDefinitionGroup>
 </Project>
\ No newline at end of file
diff -NEaurb neo/_idlib.props neo/_idlib.props
--- neo/_idlib.props	2011-12-26 04:15:38 +0000
+++ neo/_idlib.props	2013-08-14 03:01:54 +0000
@@ -7,7 +7,12 @@
   <ItemDefinitionGroup>
     <ClCompile>
       <PreprocessorDefinitions>__IDLIB__;%(PreprocessorDefinitions)</PreprocessorDefinitions>
-      <PrecompiledHeader>Use</PrecompiledHeader>
+      <MultiProcessorCompilation>true</MultiProcessorCompilation>
+      <EnableParallelCodeGeneration>true</EnableParallelCodeGeneration>
+      <OpenMPSupport>true</OpenMPSupport>
+	  <WarningLevel>Level3</WarningLevel>
+      <PrecompiledHeader>
+	  </PrecompiledHeader>
     </ClCompile>
   </ItemDefinitionGroup>
 </Project>
\ No newline at end of file
diff -NEaurb neo/cm/CollisionModel_contents.cpp neo/cm/CollisionModel_contents.cpp
--- neo/cm/CollisionModel_contents.cpp	2013-08-14 01:47:45 +0000
+++ neo/cm/CollisionModel_contents.cpp	2013-08-13 15:43:53 +0000
@@ -305,33 +305,11 @@
         {
             edgeNum = p->edges[j];
             edge = tw->model->edges + abs(edgeNum);
-#if 1
             CM_SetTrmEdgeSidedness(edge, tw->edges[i].pl, tw->polygonEdgePlueckerCache[j], i);
             if (INTSIGNBITSET(edgeNum) ^ ((edge->side >> i) & 1) ^ flip)
             {
                 break;
             }
-#else
-            d = tw->edges[i].pl.PermutedInnerProduct(tw->polygonEdgePlueckerCache[j]);
-            if (flip)
-            {
-                d = -d;
-            }
-            if (edgeNum > 0)
-            {
-                if (d <= 0.0f)
-                {
-                    break;
-                }
-            }
-            else
-            {
-                if (d >= 0.0f)
-                {
-                    break;
-                }
-            }
-#endif
         }
         if (j >= p->numEdges)
         {
@@ -361,7 +339,6 @@
 
         for (j = 0; j < tw->numPolys; j++)
         {
-#if 1
             v1 = tw->model->vertices + edge->vertexNum[0];
             CM_SetTrmPolygonSidedness(v1, tw->polys[j].plane, j);
             v2 = tw->model->vertices + edge->vertexNum[1];
@@ -372,57 +349,18 @@
                 continue;
             }
             flip = (v1->side >> j) & 1;
-#else
-            float d1, d2;
 
-            v1 = tw->model->vertices + edge->vertexNum[0];
-            d1 = tw->polys[j].plane.Distance(v1->p);
-            v2 = tw->model->vertices + edge->vertexNum[1];
-            d2 = tw->polys[j].plane.Distance(v2->p);
-            // if the polygon edge does not cross the trm polygon plane
-            if ((d1 >= 0.0f && d2 >= 0.0f) || (d1 <= 0.0f && d2 <= 0.0f))
-            {
-                continue;
-            }
-            flip = false;
-            if (d1 < 0.0f)
-            {
-                flip = true;
-            }
-#endif
             // test if polygon edge goes through the trm polygon between the trm polygon edges
             for (k = 0; k < tw->polys[j].numEdges; k++)
             {
                 trmEdgeNum = tw->polys[j].edges[k];
                 trmEdge = tw->edges + abs(trmEdgeNum);
-#if 1
                 bitNum = abs(trmEdgeNum);
                 CM_SetTrmEdgeSidedness(edge, trmEdge->pl, tw->polygonEdgePlueckerCache[i], bitNum);
                 if (INTSIGNBITSET(trmEdgeNum) ^ ((edge->side >> bitNum) & 1) ^ flip)
                 {
                     break;
                 }
-#else
-                d = trmEdge->pl.PermutedInnerProduct(tw->polygonEdgePlueckerCache[i]);
-                if (flip)
-                {
-                    d = -d;
-                }
-                if (trmEdgeNum > 0)
-                {
-                    if (d <= 0.0f)
-                    {
-                        break;
-                    }
-                }
-                else
-                {
-                    if (d >= 0.0f)
-                    {
-                        break;
-                    }
-                }
-#endif
             }
             if (k >= tw->polys[j].numEdges)
             {
diff -NEaurb neo/curl/lib/connect.c neo/curl/lib/connect.c
--- neo/curl/lib/connect.c	2011-12-26 04:15:38 +0000
+++ neo/curl/lib/connect.c	2013-08-13 00:38:09 +0000
@@ -76,12 +76,22 @@
 
 #ifdef WIN32
 #include <windows.h>
+#ifndef EINPROGRESS
 #define EINPROGRESS WSAEINPROGRESS
+#endif
+#ifndef EWOULDBLOCK
 #define EWOULDBLOCK WSAEWOULDBLOCK
+#endif
+#ifndef EISCONN
 #define EISCONN     WSAEISCONN
+#endif
+#ifndef ENOTSOCK
 #define ENOTSOCK    WSAENOTSOCK
+#endif
+#ifndef ECONNREFUSED
 #define ECONNREFUSED WSAECONNREFUSED
 #endif
+#endif
 
 #include "urldata.h"
 #include "sendf.h"
diff -NEaurb neo/curl/lib/formdata.c neo/curl/lib/formdata.c
--- neo/curl/lib/formdata.c	2011-12-26 04:15:38 +0000
+++ neo/curl/lib/formdata.c	2013-08-13 00:05:26 +0000
@@ -194,7 +194,7 @@
 
   /* Preallocate contents to the length of input to make sure we don't
      overwrite anything. */
-  contents = malloc(strlen(input));
+  contents = malloc(strlen(input) + 1);
   contents[0] = '\000';
  
   if(1 <= sscanf(input, "%255[^=]=%[^\n]", name, contents)) {
diff -NEaurb neo/curl/lib/inet_pton.c neo/curl/lib/inet_pton.c
--- neo/curl/lib/inet_pton.c	2011-12-26 04:15:38 +0000
+++ neo/curl/lib/inet_pton.c	2013-08-13 00:38:09 +0000
@@ -45,8 +45,10 @@
 #define	INT16SZ		 2
 
 #ifdef WIN32
+#ifndef EAFNOSUPPORT
 #define EAFNOSUPPORT    WSAEAFNOSUPPORT
 #endif
+#endif
 
 /*
  * WARNING: Don't even consider trying to compile this on a system where
diff -NEaurb neo/curl/lib/mprintf.c neo/curl/lib/mprintf.c
--- neo/curl/lib/mprintf.c	2011-12-26 04:15:38 +0000
+++ neo/curl/lib/mprintf.c	2013-08-13 15:43:53 +0000
@@ -1182,7 +1182,6 @@
 
   free(ptr);
 
-#if 1
   curl_mprintf(buffer, "%s %s %d", "daniel", "stenberg", 19988);
   puts(buffer);
 
@@ -1195,8 +1194,6 @@
     puts(buffer);
     printf("%.2g %G %f %e %E\n", tryout, tryout, tryout, tryout, tryout);
   }
-#endif
-
   return 0;
 }
 
diff -NEaurb neo/curl/tests/libtest/lib509.c neo/curl/tests/libtest/lib509.c
--- neo/curl/tests/libtest/lib509.c	2011-12-26 04:15:38 +0000
+++ neo/curl/tests/libtest/lib509.c	2013-08-13 15:43:53 +0000
@@ -92,15 +92,12 @@
   err=X509_STORE_CTX_get_error(ctx);
 
 /* The following seems to be a problem in 0.9.7/8 openssl versions */
-
-#if 1
   if (err == X509_V_ERR_DEPTH_ZERO_SELF_SIGNED_CERT ||
       err == X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT_LOCALLY) {
     fprintf(stderr,"X509_verify_cert: repairing self signed\n") ; 
     X509_STORE_CTX_set_error(ctx,X509_V_OK);
     ok = 1;
   }
-#endif
 
   if (ok && ctx->cert) {
     unsigned char * accessinfoURL ;
diff -NEaurb neo/curllib.vcxproj neo/curllib.vcxproj
--- neo/curllib.vcxproj	2011-12-26 04:15:38 +0000
+++ neo/curllib.vcxproj	2013-08-11 19:26:06 +0000
@@ -25,10 +25,12 @@
   <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|Win32'" Label="Configuration">
     <ConfigurationType>StaticLibrary</ConfigurationType>
     <CharacterSet>MultiByte</CharacterSet>
+    <PlatformToolset>v110</PlatformToolset>
   </PropertyGroup>
   <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'" Label="Configuration">
     <ConfigurationType>StaticLibrary</ConfigurationType>
     <CharacterSet>MultiByte</CharacterSet>
+    <PlatformToolset>v110</PlatformToolset>
   </PropertyGroup>
   <Import Project="$(VCTargetsPath)\Microsoft.Cpp.props" />
   <ImportGroup Label="ExtensionSettings">
diff -NEaurb neo/doom.sln neo/doom.sln
--- neo/doom.sln	2011-12-26 04:15:38 +0000
+++ neo/doom.sln	2013-08-13 09:50:21 +0000
@@ -1,5 +1,5 @@
-Microsoft Visual Studio Solution File, Format Version 11.00
-# Visual Studio 2010
+Microsoft Visual Studio Solution File, Format Version 12.00
+# Visual Studio 2012
 Project("{2150E333-8FDC-42A3-9474-1A3956D46DE8}") = "libs", "libs", "{347D107C-D787-4408-A60D-86FA45997F9B}"
 EndProject
 Project("{2150E333-8FDC-42A3-9474-1A3956D46DE8}") = "exes", "exes", "{003B01AB-152D-45C8-BF45-E5A035042D7F}"
@@ -105,16 +105,26 @@
 		{49BEC5C6-B964-417A-851E-808886B574F1}.Debug with inlines|Win32.ActiveCfg = Debug with inlines|Win32
 		{49BEC5C6-B964-417A-851E-808886B574F1}.Debug|Win32.ActiveCfg = Debug|Win32
 		{49BEC5C6-B964-417A-851E-808886B574F1}.Dedicated Debug with inlines|Win32.ActiveCfg = Dedicated Debug with inlines|Win32
+		{49BEC5C6-B964-417A-851E-808886B574F1}.Dedicated Debug with inlines|Win32.Build.0 = Dedicated Debug with inlines|Win32
 		{49BEC5C6-B964-417A-851E-808886B574F1}.Dedicated Debug|Win32.ActiveCfg = Dedicated Debug|Win32
+		{49BEC5C6-B964-417A-851E-808886B574F1}.Dedicated Debug|Win32.Build.0 = Dedicated Debug|Win32
 		{49BEC5C6-B964-417A-851E-808886B574F1}.Dedicated Release|Win32.ActiveCfg = Dedicated Release|Win32
+		{49BEC5C6-B964-417A-851E-808886B574F1}.Dedicated Release|Win32.Build.0 = Dedicated Release|Win32
 		{49BEC5C6-B964-417A-851E-808886B574F1}.Release|Win32.ActiveCfg = Release|Win32
 		{0BC6FCC9-C65E-4B1F-9A58-0B9399987C9F}.Debug with inlines and memory log|Win32.ActiveCfg = Debug with inlines and memory log|Win32
+		{0BC6FCC9-C65E-4B1F-9A58-0B9399987C9F}.Debug with inlines and memory log|Win32.Build.0 = Debug with inlines and memory log|Win32
 		{0BC6FCC9-C65E-4B1F-9A58-0B9399987C9F}.Debug with inlines|Win32.ActiveCfg = Debug with inlines|Win32
+		{0BC6FCC9-C65E-4B1F-9A58-0B9399987C9F}.Debug with inlines|Win32.Build.0 = Debug with inlines|Win32
 		{0BC6FCC9-C65E-4B1F-9A58-0B9399987C9F}.Debug|Win32.ActiveCfg = Debug|Win32
+		{0BC6FCC9-C65E-4B1F-9A58-0B9399987C9F}.Debug|Win32.Build.0 = Debug|Win32
 		{0BC6FCC9-C65E-4B1F-9A58-0B9399987C9F}.Dedicated Debug with inlines|Win32.ActiveCfg = Dedicated Debug with inlines|Win32
+		{0BC6FCC9-C65E-4B1F-9A58-0B9399987C9F}.Dedicated Debug with inlines|Win32.Build.0 = Dedicated Debug with inlines|Win32
 		{0BC6FCC9-C65E-4B1F-9A58-0B9399987C9F}.Dedicated Debug|Win32.ActiveCfg = Dedicated Debug|Win32
+		{0BC6FCC9-C65E-4B1F-9A58-0B9399987C9F}.Dedicated Debug|Win32.Build.0 = Dedicated Debug|Win32
 		{0BC6FCC9-C65E-4B1F-9A58-0B9399987C9F}.Dedicated Release|Win32.ActiveCfg = Dedicated Release|Win32
+		{0BC6FCC9-C65E-4B1F-9A58-0B9399987C9F}.Dedicated Release|Win32.Build.0 = Dedicated Release|Win32
 		{0BC6FCC9-C65E-4B1F-9A58-0B9399987C9F}.Release|Win32.ActiveCfg = Release|Win32
+		{0BC6FCC9-C65E-4B1F-9A58-0B9399987C9F}.Release|Win32.Build.0 = Release|Win32
 	EndGlobalSection
 	GlobalSection(SolutionProperties) = preSolution
 		HideSolutionNode = FALSE
diff -NEaurb neo/doomdll.vcxproj neo/doomdll.vcxproj
--- neo/doomdll.vcxproj	2011-12-26 04:15:38 +0000
+++ neo/doomdll.vcxproj	2013-08-14 02:57:10 +0000
@@ -48,37 +48,44 @@
     <UseOfMfc>false</UseOfMfc>
     <CharacterSet>MultiByte</CharacterSet>
     <WholeProgramOptimization>false</WholeProgramOptimization>
+    <PlatformToolset>v110</PlatformToolset>
   </PropertyGroup>
   <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Dedicated Debug with inlines|Win32'" Label="Configuration">
     <ConfigurationType>Application</ConfigurationType>
     <UseOfMfc>false</UseOfMfc>
     <CharacterSet>MultiByte</CharacterSet>
+    <PlatformToolset>v110</PlatformToolset>
   </PropertyGroup>
   <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Dedicated Debug|Win32'" Label="Configuration">
     <ConfigurationType>Application</ConfigurationType>
     <UseOfMfc>false</UseOfMfc>
     <CharacterSet>MultiByte</CharacterSet>
+    <PlatformToolset>v110</PlatformToolset>
   </PropertyGroup>
   <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug with inlines and memory log|Win32'" Label="Configuration">
     <ConfigurationType>Application</ConfigurationType>
     <UseOfMfc>false</UseOfMfc>
     <CharacterSet>MultiByte</CharacterSet>
+    <PlatformToolset>v110</PlatformToolset>
   </PropertyGroup>
   <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug with inlines|Win32'" Label="Configuration">
     <ConfigurationType>Application</ConfigurationType>
     <UseOfMfc>false</UseOfMfc>
     <CharacterSet>MultiByte</CharacterSet>
+    <PlatformToolset>v110</PlatformToolset>
   </PropertyGroup>
   <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|Win32'" Label="Configuration">
     <ConfigurationType>Application</ConfigurationType>
     <UseOfMfc>false</UseOfMfc>
     <CharacterSet>MultiByte</CharacterSet>
     <WholeProgramOptimization>false</WholeProgramOptimization>
+    <PlatformToolset>v110</PlatformToolset>
   </PropertyGroup>
   <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'" Label="Configuration">
     <ConfigurationType>Application</ConfigurationType>
     <UseOfMfc>false</UseOfMfc>
     <CharacterSet>MultiByte</CharacterSet>
+    <PlatformToolset>v110</PlatformToolset>
   </PropertyGroup>
   <Import Project="$(VCTargetsPath)\Microsoft.Cpp.props" />
   <ImportGroup Label="ExtensionSettings">
@@ -157,40 +164,78 @@
     <CodeAnalysisRules Condition="'$(Configuration)|$(Platform)'=='Release|Win32'" />
     <CodeAnalysisRuleAssemblies Condition="'$(Configuration)|$(Platform)'=='Release|Win32'" />
   </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|Win32'">
+    <IncludePath>$(VCInstallDir)include;$(VCInstallDir)atlmfc\include;$(WindowsSDK_IncludePath);</IncludePath>
+    <LibraryPath>$(VCInstallDir)lib;$(VCInstallDir)atlmfc\lib;$(WindowsSDK_LibraryPath_x86);</LibraryPath>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Dedicated Release|Win32'">
+    <IncludePath>$(VCInstallDir)include;$(VCInstallDir)atlmfc\include;$(WindowsSDK_IncludePath);</IncludePath>
+    <LibraryPath>$(VCInstallDir)lib;$(VCInstallDir)atlmfc\lib;$(WindowsSDK_LibraryPath_x86);</LibraryPath>
+  </PropertyGroup>
   <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Debug with inlines and memory log|Win32'">
     <Link>
       <AdditionalLibraryDirectories>openal\lib;sys\win32\dongle;%(AdditionalLibraryDirectories)</AdditionalLibraryDirectories>
+      <OutputFile>$(OutDir)Doom3.exe</OutputFile>
     </Link>
   </ItemDefinitionGroup>
   <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Debug with inlines|Win32'">
     <Link>
       <AdditionalLibraryDirectories>openal\lib;sys\win32\dongle;%(AdditionalLibraryDirectories)</AdditionalLibraryDirectories>
+      <OutputFile>$(OutDir)Doom3.exe</OutputFile>
     </Link>
   </ItemDefinitionGroup>
   <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">
     <Link>
       <AdditionalLibraryDirectories>openal\lib;sys\win32\dongle;%(AdditionalLibraryDirectories)</AdditionalLibraryDirectories>
+      <OutputFile>$(OutDir)Doom3.exe</OutputFile>
     </Link>
+    <ClCompile>
+      <PreprocessorDefinitions>_ALLOW_KEYWORD_MACROS;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <MultiProcessorCompilation>true</MultiProcessorCompilation>
+      <EnableParallelCodeGeneration>true</EnableParallelCodeGeneration>
+      <OpenMPSupport>true</OpenMPSupport>
+    </ClCompile>
   </ItemDefinitionGroup>
   <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Dedicated Debug with inlines|Win32'">
     <Link>
       <AdditionalLibraryDirectories>openal\lib;sys\win32\dongle;%(AdditionalLibraryDirectories)</AdditionalLibraryDirectories>
+      <OutputFile>$(OutDir)Doom3DED.exe</OutputFile>
     </Link>
   </ItemDefinitionGroup>
   <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Dedicated Debug|Win32'">
     <Link>
       <AdditionalLibraryDirectories>openal\lib;sys\win32\dongle;%(AdditionalLibraryDirectories)</AdditionalLibraryDirectories>
+      <OutputFile>$(OutDir)Doom3DED.exe</OutputFile>
     </Link>
   </ItemDefinitionGroup>
   <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Dedicated Release|Win32'">
     <Link>
       <AdditionalLibraryDirectories>openal\lib;sys\win32\dongle;%(AdditionalLibraryDirectories)</AdditionalLibraryDirectories>
+      <OutputFile>$(OutDir)Doom3DED.exe</OutputFile>
     </Link>
+    <ClCompile>
+      <MultiProcessorCompilation>true</MultiProcessorCompilation>
+      <EnableParallelCodeGeneration>true</EnableParallelCodeGeneration>
+    </ClCompile>
   </ItemDefinitionGroup>
   <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release|Win32'">
     <Link>
       <AdditionalLibraryDirectories>openal\lib;sys\win32\dongle;%(AdditionalLibraryDirectories)</AdditionalLibraryDirectories>
+      <OutputFile>$(OutDir)Doom3.exe</OutputFile>
     </Link>
+    <ClCompile>
+      <PrecompiledHeader>
+      </PrecompiledHeader>
+      <MultiProcessorCompilation>true</MultiProcessorCompilation>
+      <EnableParallelCodeGeneration>true</EnableParallelCodeGeneration>
+      <OpenMPSupport>true</OpenMPSupport>
+      <InterproceduralOptimization>SingleFile</InterproceduralOptimization>
+      <OptimizeForWindowsApplication>true</OptimizeForWindowsApplication>
+      <FlushDenormalResultsToZero>true</FlushDenormalResultsToZero>
+      <EnableMatrixMultiplyLibraryCall>Yes</EnableMatrixMultiplyLibraryCall>
+      <Parallelization>true</Parallelization>
+      <UseIntelOptimizedHeaders>true</UseIntelOptimizedHeaders>
+    </ClCompile>
   </ItemDefinitionGroup>
   <ItemGroup>
     <ClInclude Include="cm\CollisionModel.h" />
@@ -233,6 +278,15 @@
     <ClInclude Include="renderer\GuiModel.h" />
     <ClInclude Include="renderer\Image.h" />
     <ClInclude Include="renderer\Interaction.h" />
+    <ClInclude Include="renderer\jpeg-8c\jconfig.h" />
+    <ClInclude Include="renderer\jpeg-8c\jdct.h" />
+    <ClInclude Include="renderer\jpeg-8c\jerror.h" />
+    <ClInclude Include="renderer\jpeg-8c\jinclude.h" />
+    <ClInclude Include="renderer\jpeg-8c\jmemsys.h" />
+    <ClInclude Include="renderer\jpeg-8c\jmorecfg.h" />
+    <ClInclude Include="renderer\jpeg-8c\jpegint.h" />
+    <ClInclude Include="renderer\jpeg-8c\jpeglib.h" />
+    <ClInclude Include="renderer\jpeg-8c\jversion.h" />
     <ClInclude Include="renderer\Material.h" />
     <ClInclude Include="renderer\MegaTexture.h" />
     <ClInclude Include="renderer\Model.h" />
@@ -253,17 +307,6 @@
     <ClInclude Include="renderer\tr_local.h" />
     <ClInclude Include="renderer\VertexCache.h" />
     <ClInclude Include="renderer\wglext.h" />
-    <ClInclude Include="renderer\jpeg-6\jchuff.h" />
-    <ClInclude Include="renderer\jpeg-6\jconfig.h" />
-    <ClInclude Include="renderer\jpeg-6\jdct.h" />
-    <ClInclude Include="renderer\jpeg-6\jdhuff.h" />
-    <ClInclude Include="renderer\jpeg-6\jerror.h" />
-    <ClInclude Include="renderer\jpeg-6\jinclude.h" />
-    <ClInclude Include="renderer\jpeg-6\jmemsys.h" />
-    <ClInclude Include="renderer\jpeg-6\jmorecfg.h" />
-    <ClInclude Include="renderer\jpeg-6\jpegint.h" />
-    <ClInclude Include="renderer\jpeg-6\jpeglib.h" />
-    <ClInclude Include="renderer\jpeg-6\jversion.h" />
     <ClInclude Include="sound\snd_local.h" />
     <ClInclude Include="sound\sound.h" />
     <ClInclude Include="sound\OggVorbis\vorbissrc\backends.h" />
@@ -1253,6 +1296,52 @@
     <ClCompile Include="renderer\Image_process.cpp" />
     <ClCompile Include="renderer\Image_program.cpp" />
     <ClCompile Include="renderer\Interaction.cpp" />
+    <ClCompile Include="renderer\jpeg-8c\jaricom.c" />
+    <ClCompile Include="renderer\jpeg-8c\jcapimin.c" />
+    <ClCompile Include="renderer\jpeg-8c\jcapistd.c" />
+    <ClCompile Include="renderer\jpeg-8c\jcarith.c" />
+    <ClCompile Include="renderer\jpeg-8c\jccoefct.c" />
+    <ClCompile Include="renderer\jpeg-8c\jccolor.c" />
+    <ClCompile Include="renderer\jpeg-8c\jcdctmgr.c" />
+    <ClCompile Include="renderer\jpeg-8c\jchuff.c" />
+    <ClCompile Include="renderer\jpeg-8c\jcinit.c" />
+    <ClCompile Include="renderer\jpeg-8c\jcmainct.c" />
+    <ClCompile Include="renderer\jpeg-8c\jcmarker.c" />
+    <ClCompile Include="renderer\jpeg-8c\jcmaster.c" />
+    <ClCompile Include="renderer\jpeg-8c\jcomapi.c" />
+    <ClCompile Include="renderer\jpeg-8c\jcparam.c" />
+    <ClCompile Include="renderer\jpeg-8c\jcprepct.c" />
+    <ClCompile Include="renderer\jpeg-8c\jcsample.c" />
+    <ClCompile Include="renderer\jpeg-8c\jctrans.c" />
+    <ClCompile Include="renderer\jpeg-8c\jdapimin.c" />
+    <ClCompile Include="renderer\jpeg-8c\jdapistd.c" />
+    <ClCompile Include="renderer\jpeg-8c\jdarith.c" />
+    <ClCompile Include="renderer\jpeg-8c\jdatadst.c" />
+    <ClCompile Include="renderer\jpeg-8c\jdatasrc.c" />
+    <ClCompile Include="renderer\jpeg-8c\jdcoefct.c" />
+    <ClCompile Include="renderer\jpeg-8c\jdcolor.c" />
+    <ClCompile Include="renderer\jpeg-8c\jddctmgr.c" />
+    <ClCompile Include="renderer\jpeg-8c\jdhuff.c" />
+    <ClCompile Include="renderer\jpeg-8c\jdinput.c" />
+    <ClCompile Include="renderer\jpeg-8c\jdmainct.c" />
+    <ClCompile Include="renderer\jpeg-8c\jdmarker.c" />
+    <ClCompile Include="renderer\jpeg-8c\jdmaster.c" />
+    <ClCompile Include="renderer\jpeg-8c\jdmerge.c" />
+    <ClCompile Include="renderer\jpeg-8c\jdpostct.c" />
+    <ClCompile Include="renderer\jpeg-8c\jdsample.c" />
+    <ClCompile Include="renderer\jpeg-8c\jdtrans.c" />
+    <ClCompile Include="renderer\jpeg-8c\jerror.c" />
+    <ClCompile Include="renderer\jpeg-8c\jfdctflt.c" />
+    <ClCompile Include="renderer\jpeg-8c\jfdctfst.c" />
+    <ClCompile Include="renderer\jpeg-8c\jfdctint.c" />
+    <ClCompile Include="renderer\jpeg-8c\jidctflt.c" />
+    <ClCompile Include="renderer\jpeg-8c\jidctfst.c" />
+    <ClCompile Include="renderer\jpeg-8c\jidctint.c" />
+    <ClCompile Include="renderer\jpeg-8c\jmemmgr.c" />
+    <ClCompile Include="renderer\jpeg-8c\jmemnobs.c" />
+    <ClCompile Include="renderer\jpeg-8c\jquant1.c" />
+    <ClCompile Include="renderer\jpeg-8c\jquant2.c" />
+    <ClCompile Include="renderer\jpeg-8c\jutils.c" />
     <ClCompile Include="renderer\Material.cpp" />
     <ClCompile Include="renderer\MegaTexture.cpp" />
     <ClCompile Include="renderer\Model.cpp" />
@@ -1293,50 +1382,6 @@
     <ClCompile Include="renderer\tr_trisurf.cpp" />
     <ClCompile Include="renderer\tr_turboshadow.cpp" />
     <ClCompile Include="renderer\VertexCache.cpp" />
-    <ClCompile Include="renderer\jpeg-6\jcapimin.c" />
-    <ClCompile Include="renderer\jpeg-6\jccoefct.c" />
-    <ClCompile Include="renderer\jpeg-6\jccolor.c" />
-    <ClCompile Include="renderer\jpeg-6\jcdctmgr.c" />
-    <ClCompile Include="renderer\jpeg-6\jchuff.c" />
-    <ClCompile Include="renderer\jpeg-6\jcinit.c" />
-    <ClCompile Include="renderer\jpeg-6\jcmainct.c" />
-    <ClCompile Include="renderer\jpeg-6\jcmarker.c" />
-    <ClCompile Include="renderer\jpeg-6\jcmaster.c" />
-    <ClCompile Include="renderer\jpeg-6\jcomapi.c" />
-    <ClCompile Include="renderer\jpeg-6\jcparam.c" />
-    <ClCompile Include="renderer\jpeg-6\jcphuff.c" />
-    <ClCompile Include="renderer\jpeg-6\jcprepct.c" />
-    <ClCompile Include="renderer\jpeg-6\jcsample.c" />
-    <ClCompile Include="renderer\jpeg-6\jdapimin.c" />
-    <ClCompile Include="renderer\jpeg-6\jdapistd.c" />
-    <ClCompile Include="renderer\jpeg-6\jdatadst.c" />
-    <ClCompile Include="renderer\jpeg-6\jdatasrc.c" />
-    <ClCompile Include="renderer\jpeg-6\jdcoefct.c" />
-    <ClCompile Include="renderer\jpeg-6\jdcolor.c" />
-    <ClCompile Include="renderer\jpeg-6\jddctmgr.c" />
-    <ClCompile Include="renderer\jpeg-6\jdhuff.c" />
-    <ClCompile Include="renderer\jpeg-6\jdinput.c" />
-    <ClCompile Include="renderer\jpeg-6\jdmainct.c" />
-    <ClCompile Include="renderer\jpeg-6\jdmarker.c" />
-    <ClCompile Include="renderer\jpeg-6\jdmaster.c" />
-    <ClCompile Include="renderer\jpeg-6\jdmerge.c" />
-    <ClCompile Include="renderer\jpeg-6\jdphuff.c" />
-    <ClCompile Include="renderer\jpeg-6\jdpostct.c" />
-    <ClCompile Include="renderer\jpeg-6\jdsample.c" />
-    <ClCompile Include="renderer\jpeg-6\jdtrans.c" />
-    <ClCompile Include="renderer\jpeg-6\jerror.c" />
-    <ClCompile Include="renderer\jpeg-6\jfdctflt.c" />
-    <ClCompile Include="renderer\jpeg-6\jfdctfst.c" />
-    <ClCompile Include="renderer\jpeg-6\jfdctint.c" />
-    <ClCompile Include="renderer\jpeg-6\jidctflt.c" />
-    <ClCompile Include="renderer\jpeg-6\jidctfst.c" />
-    <ClCompile Include="renderer\jpeg-6\jidctint.c" />
-    <ClCompile Include="renderer\jpeg-6\jidctred.c" />
-    <ClCompile Include="renderer\jpeg-6\jmemmgr.c" />
-    <ClCompile Include="renderer\jpeg-6\jmemnobs.c" />
-    <ClCompile Include="renderer\jpeg-6\jquant1.c" />
-    <ClCompile Include="renderer\jpeg-6\jquant2.c" />
-    <ClCompile Include="renderer\jpeg-6\jutils.c" />
     <ClCompile Include="sound\snd_cache.cpp" />
     <ClCompile Include="sound\snd_decoder.cpp" />
     <ClCompile Include="sound\snd_efxfile.cpp" />
diff -NEaurb neo/doomdll.vcxproj.filters neo/doomdll.vcxproj.filters
--- neo/doomdll.vcxproj.filters	2011-12-26 04:15:38 +0000
+++ neo/doomdll.vcxproj.filters	2013-08-13 04:30:44 +0000
@@ -13,9 +13,6 @@
     <Filter Include="Renderer">
       <UniqueIdentifier>{19b363f5-76a7-4256-b7f0-7a6ec012d09d}</UniqueIdentifier>
     </Filter>
-    <Filter Include="Renderer\JPeg-6">
-      <UniqueIdentifier>{7fdc46b4-13a1-46c2-9be6-af8a85990431}</UniqueIdentifier>
-    </Filter>
     <Filter Include="Sound">
       <UniqueIdentifier>{2b6b512d-2388-41b9-8880-402e156ec20b}</UniqueIdentifier>
     </Filter>
@@ -106,6 +103,9 @@
     <Filter Include="Ui">
       <UniqueIdentifier>{b3166d25-0562-49da-bc8d-961006fe1785}</UniqueIdentifier>
     </Filter>
+    <Filter Include="Renderer\jpeg-8c">
+      <UniqueIdentifier>{7fdc46b4-13a1-46c2-9be6-af8a85990431}</UniqueIdentifier>
+    </Filter>
   </ItemGroup>
   <ItemGroup>
     <ClInclude Include="cm\CollisionModel.h">
@@ -288,39 +288,6 @@
     <ClInclude Include="renderer\wglext.h">
       <Filter>Renderer</Filter>
     </ClInclude>
-    <ClInclude Include="renderer\jpeg-6\jchuff.h">
-      <Filter>Renderer\JPeg-6</Filter>
-    </ClInclude>
-    <ClInclude Include="renderer\jpeg-6\jconfig.h">
-      <Filter>Renderer\JPeg-6</Filter>
-    </ClInclude>
-    <ClInclude Include="renderer\jpeg-6\jdct.h">
-      <Filter>Renderer\JPeg-6</Filter>
-    </ClInclude>
-    <ClInclude Include="renderer\jpeg-6\jdhuff.h">
-      <Filter>Renderer\JPeg-6</Filter>
-    </ClInclude>
-    <ClInclude Include="renderer\jpeg-6\jerror.h">
-      <Filter>Renderer\JPeg-6</Filter>
-    </ClInclude>
-    <ClInclude Include="renderer\jpeg-6\jinclude.h">
-      <Filter>Renderer\JPeg-6</Filter>
-    </ClInclude>
-    <ClInclude Include="renderer\jpeg-6\jmemsys.h">
-      <Filter>Renderer\JPeg-6</Filter>
-    </ClInclude>
-    <ClInclude Include="renderer\jpeg-6\jmorecfg.h">
-      <Filter>Renderer\JPeg-6</Filter>
-    </ClInclude>
-    <ClInclude Include="renderer\jpeg-6\jpegint.h">
-      <Filter>Renderer\JPeg-6</Filter>
-    </ClInclude>
-    <ClInclude Include="renderer\jpeg-6\jpeglib.h">
-      <Filter>Renderer\JPeg-6</Filter>
-    </ClInclude>
-    <ClInclude Include="renderer\jpeg-6\jversion.h">
-      <Filter>Renderer\JPeg-6</Filter>
-    </ClInclude>
     <ClInclude Include="sound\snd_local.h">
       <Filter>Sound</Filter>
     </ClInclude>
@@ -621,6 +588,33 @@
     <ClInclude Include="ui\Winvar.h">
       <Filter>Ui</Filter>
     </ClInclude>
+    <ClInclude Include="renderer\jpeg-8c\jconfig.h">
+      <Filter>Renderer\jpeg-8c</Filter>
+    </ClInclude>
+    <ClInclude Include="renderer\jpeg-8c\jdct.h">
+      <Filter>Renderer\jpeg-8c</Filter>
+    </ClInclude>
+    <ClInclude Include="renderer\jpeg-8c\jerror.h">
+      <Filter>Renderer\jpeg-8c</Filter>
+    </ClInclude>
+    <ClInclude Include="renderer\jpeg-8c\jinclude.h">
+      <Filter>Renderer\jpeg-8c</Filter>
+    </ClInclude>
+    <ClInclude Include="renderer\jpeg-8c\jmemsys.h">
+      <Filter>Renderer\jpeg-8c</Filter>
+    </ClInclude>
+    <ClInclude Include="renderer\jpeg-8c\jmorecfg.h">
+      <Filter>Renderer\jpeg-8c</Filter>
+    </ClInclude>
+    <ClInclude Include="renderer\jpeg-8c\jpegint.h">
+      <Filter>Renderer\jpeg-8c</Filter>
+    </ClInclude>
+    <ClInclude Include="renderer\jpeg-8c\jpeglib.h">
+      <Filter>Renderer\jpeg-8c</Filter>
+    </ClInclude>
+    <ClInclude Include="renderer\jpeg-8c\jversion.h">
+      <Filter>Renderer\jpeg-8c</Filter>
+    </ClInclude>
   </ItemGroup>
   <ItemGroup>
     <ClCompile Include="cm\CollisionModel_contacts.cpp">
@@ -896,138 +890,6 @@
     <ClCompile Include="renderer\VertexCache.cpp">
       <Filter>Renderer</Filter>
     </ClCompile>
-    <ClCompile Include="renderer\jpeg-6\jcapimin.c">
-      <Filter>Renderer\JPeg-6</Filter>
-    </ClCompile>
-    <ClCompile Include="renderer\jpeg-6\jccoefct.c">
-      <Filter>Renderer\JPeg-6</Filter>
-    </ClCompile>
-    <ClCompile Include="renderer\jpeg-6\jccolor.c">
-      <Filter>Renderer\JPeg-6</Filter>
-    </ClCompile>
-    <ClCompile Include="renderer\jpeg-6\jcdctmgr.c">
-      <Filter>Renderer\JPeg-6</Filter>
-    </ClCompile>
-    <ClCompile Include="renderer\jpeg-6\jchuff.c">
-      <Filter>Renderer\JPeg-6</Filter>
-    </ClCompile>
-    <ClCompile Include="renderer\jpeg-6\jcinit.c">
-      <Filter>Renderer\JPeg-6</Filter>
-    </ClCompile>
-    <ClCompile Include="renderer\jpeg-6\jcmainct.c">
-      <Filter>Renderer\JPeg-6</Filter>
-    </ClCompile>
-    <ClCompile Include="renderer\jpeg-6\jcmarker.c">
-      <Filter>Renderer\JPeg-6</Filter>
-    </ClCompile>
-    <ClCompile Include="renderer\jpeg-6\jcmaster.c">
-      <Filter>Renderer\JPeg-6</Filter>
-    </ClCompile>
-    <ClCompile Include="renderer\jpeg-6\jcomapi.c">
-      <Filter>Renderer\JPeg-6</Filter>
-    </ClCompile>
-    <ClCompile Include="renderer\jpeg-6\jcparam.c">
-      <Filter>Renderer\JPeg-6</Filter>
-    </ClCompile>
-    <ClCompile Include="renderer\jpeg-6\jcphuff.c">
-      <Filter>Renderer\JPeg-6</Filter>
-    </ClCompile>
-    <ClCompile Include="renderer\jpeg-6\jcprepct.c">
-      <Filter>Renderer\JPeg-6</Filter>
-    </ClCompile>
-    <ClCompile Include="renderer\jpeg-6\jcsample.c">
-      <Filter>Renderer\JPeg-6</Filter>
-    </ClCompile>
-    <ClCompile Include="renderer\jpeg-6\jdapimin.c">
-      <Filter>Renderer\JPeg-6</Filter>
-    </ClCompile>
-    <ClCompile Include="renderer\jpeg-6\jdapistd.c">
-      <Filter>Renderer\JPeg-6</Filter>
-    </ClCompile>
-    <ClCompile Include="renderer\jpeg-6\jdatadst.c">
-      <Filter>Renderer\JPeg-6</Filter>
-    </ClCompile>
-    <ClCompile Include="renderer\jpeg-6\jdatasrc.c">
-      <Filter>Renderer\JPeg-6</Filter>
-    </ClCompile>
-    <ClCompile Include="renderer\jpeg-6\jdcoefct.c">
-      <Filter>Renderer\JPeg-6</Filter>
-    </ClCompile>
-    <ClCompile Include="renderer\jpeg-6\jdcolor.c">
-      <Filter>Renderer\JPeg-6</Filter>
-    </ClCompile>
-    <ClCompile Include="renderer\jpeg-6\jddctmgr.c">
-      <Filter>Renderer\JPeg-6</Filter>
-    </ClCompile>
-    <ClCompile Include="renderer\jpeg-6\jdhuff.c">
-      <Filter>Renderer\JPeg-6</Filter>
-    </ClCompile>
-    <ClCompile Include="renderer\jpeg-6\jdinput.c">
-      <Filter>Renderer\JPeg-6</Filter>
-    </ClCompile>
-    <ClCompile Include="renderer\jpeg-6\jdmainct.c">
-      <Filter>Renderer\JPeg-6</Filter>
-    </ClCompile>
-    <ClCompile Include="renderer\jpeg-6\jdmarker.c">
-      <Filter>Renderer\JPeg-6</Filter>
-    </ClCompile>
-    <ClCompile Include="renderer\jpeg-6\jdmaster.c">
-      <Filter>Renderer\JPeg-6</Filter>
-    </ClCompile>
-    <ClCompile Include="renderer\jpeg-6\jdmerge.c">
-      <Filter>Renderer\JPeg-6</Filter>
-    </ClCompile>
-    <ClCompile Include="renderer\jpeg-6\jdphuff.c">
-      <Filter>Renderer\JPeg-6</Filter>
-    </ClCompile>
-    <ClCompile Include="renderer\jpeg-6\jdpostct.c">
-      <Filter>Renderer\JPeg-6</Filter>
-    </ClCompile>
-    <ClCompile Include="renderer\jpeg-6\jdsample.c">
-      <Filter>Renderer\JPeg-6</Filter>
-    </ClCompile>
-    <ClCompile Include="renderer\jpeg-6\jdtrans.c">
-      <Filter>Renderer\JPeg-6</Filter>
-    </ClCompile>
-    <ClCompile Include="renderer\jpeg-6\jerror.c">
-      <Filter>Renderer\JPeg-6</Filter>
-    </ClCompile>
-    <ClCompile Include="renderer\jpeg-6\jfdctflt.c">
-      <Filter>Renderer\JPeg-6</Filter>
-    </ClCompile>
-    <ClCompile Include="renderer\jpeg-6\jfdctfst.c">
-      <Filter>Renderer\JPeg-6</Filter>
-    </ClCompile>
-    <ClCompile Include="renderer\jpeg-6\jfdctint.c">
-      <Filter>Renderer\JPeg-6</Filter>
-    </ClCompile>
-    <ClCompile Include="renderer\jpeg-6\jidctflt.c">
-      <Filter>Renderer\JPeg-6</Filter>
-    </ClCompile>
-    <ClCompile Include="renderer\jpeg-6\jidctfst.c">
-      <Filter>Renderer\JPeg-6</Filter>
-    </ClCompile>
-    <ClCompile Include="renderer\jpeg-6\jidctint.c">
-      <Filter>Renderer\JPeg-6</Filter>
-    </ClCompile>
-    <ClCompile Include="renderer\jpeg-6\jidctred.c">
-      <Filter>Renderer\JPeg-6</Filter>
-    </ClCompile>
-    <ClCompile Include="renderer\jpeg-6\jmemmgr.c">
-      <Filter>Renderer\JPeg-6</Filter>
-    </ClCompile>
-    <ClCompile Include="renderer\jpeg-6\jmemnobs.c">
-      <Filter>Renderer\JPeg-6</Filter>
-    </ClCompile>
-    <ClCompile Include="renderer\jpeg-6\jquant1.c">
-      <Filter>Renderer\JPeg-6</Filter>
-    </ClCompile>
-    <ClCompile Include="renderer\jpeg-6\jquant2.c">
-      <Filter>Renderer\JPeg-6</Filter>
-    </ClCompile>
-    <ClCompile Include="renderer\jpeg-6\jutils.c">
-      <Filter>Renderer\JPeg-6</Filter>
-    </ClCompile>
     <ClCompile Include="sound\snd_cache.cpp">
       <Filter>Sound</Filter>
     </ClCompile>
@@ -1823,6 +1685,144 @@
     <ClCompile Include="ui\Winvar.cpp">
       <Filter>Ui</Filter>
     </ClCompile>
+    <ClCompile Include="renderer\jpeg-8c\jaricom.c">
+      <Filter>Renderer\jpeg-8c</Filter>
+    </ClCompile>
+    <ClCompile Include="renderer\jpeg-8c\jcapimin.c">
+      <Filter>Renderer\jpeg-8c</Filter>
+    </ClCompile>
+    <ClCompile Include="renderer\jpeg-8c\jcapistd.c">
+      <Filter>Renderer\jpeg-8c</Filter>
+    </ClCompile>
+    <ClCompile Include="renderer\jpeg-8c\jcarith.c">
+      <Filter>Renderer\jpeg-8c</Filter>
+    </ClCompile>
+    <ClCompile Include="renderer\jpeg-8c\jccoefct.c">
+      <Filter>Renderer\jpeg-8c</Filter>
+    </ClCompile>
+    <ClCompile Include="renderer\jpeg-8c\jccolor.c">
+      <Filter>Renderer\jpeg-8c</Filter>
+    </ClCompile>
+    <ClCompile Include="renderer\jpeg-8c\jcdctmgr.c">
+      <Filter>Renderer\jpeg-8c</Filter>
+    </ClCompile>
+    <ClCompile Include="renderer\jpeg-8c\jchuff.c">
+      <Filter>Renderer\jpeg-8c</Filter>
+    </ClCompile>
+    <ClCompile Include="renderer\jpeg-8c\jcinit.c">
+      <Filter>Renderer\jpeg-8c</Filter>
+    </ClCompile>
+    <ClCompile Include="renderer\jpeg-8c\jcmainct.c">
+      <Filter>Renderer\jpeg-8c</Filter>
+    </ClCompile>
+    <ClCompile Include="renderer\jpeg-8c\jcmarker.c">
+      <Filter>Renderer\jpeg-8c</Filter>
+    </ClCompile>
+    <ClCompile Include="renderer\jpeg-8c\jcmaster.c">
+      <Filter>Renderer\jpeg-8c</Filter>
+    </ClCompile>
+    <ClCompile Include="renderer\jpeg-8c\jcomapi.c">
+      <Filter>Renderer\jpeg-8c</Filter>
+    </ClCompile>
+    <ClCompile Include="renderer\jpeg-8c\jcparam.c">
+      <Filter>Renderer\jpeg-8c</Filter>
+    </ClCompile>
+    <ClCompile Include="renderer\jpeg-8c\jcprepct.c">
+      <Filter>Renderer\jpeg-8c</Filter>
+    </ClCompile>
+    <ClCompile Include="renderer\jpeg-8c\jcsample.c">
+      <Filter>Renderer\jpeg-8c</Filter>
+    </ClCompile>
+    <ClCompile Include="renderer\jpeg-8c\jctrans.c">
+      <Filter>Renderer\jpeg-8c</Filter>
+    </ClCompile>
+    <ClCompile Include="renderer\jpeg-8c\jdapimin.c">
+      <Filter>Renderer\jpeg-8c</Filter>
+    </ClCompile>
+    <ClCompile Include="renderer\jpeg-8c\jdapistd.c">
+      <Filter>Renderer\jpeg-8c</Filter>
+    </ClCompile>
+    <ClCompile Include="renderer\jpeg-8c\jdarith.c">
+      <Filter>Renderer\jpeg-8c</Filter>
+    </ClCompile>
+    <ClCompile Include="renderer\jpeg-8c\jdatadst.c">
+      <Filter>Renderer\jpeg-8c</Filter>
+    </ClCompile>
+    <ClCompile Include="renderer\jpeg-8c\jdatasrc.c">
+      <Filter>Renderer\jpeg-8c</Filter>
+    </ClCompile>
+    <ClCompile Include="renderer\jpeg-8c\jdcoefct.c">
+      <Filter>Renderer\jpeg-8c</Filter>
+    </ClCompile>
+    <ClCompile Include="renderer\jpeg-8c\jdcolor.c">
+      <Filter>Renderer\jpeg-8c</Filter>
+    </ClCompile>
+    <ClCompile Include="renderer\jpeg-8c\jddctmgr.c">
+      <Filter>Renderer\jpeg-8c</Filter>
+    </ClCompile>
+    <ClCompile Include="renderer\jpeg-8c\jdhuff.c">
+      <Filter>Renderer\jpeg-8c</Filter>
+    </ClCompile>
+    <ClCompile Include="renderer\jpeg-8c\jdinput.c">
+      <Filter>Renderer\jpeg-8c</Filter>
+    </ClCompile>
+    <ClCompile Include="renderer\jpeg-8c\jdmainct.c">
+      <Filter>Renderer\jpeg-8c</Filter>
+    </ClCompile>
+    <ClCompile Include="renderer\jpeg-8c\jdmarker.c">
+      <Filter>Renderer\jpeg-8c</Filter>
+    </ClCompile>
+    <ClCompile Include="renderer\jpeg-8c\jdmaster.c">
+      <Filter>Renderer\jpeg-8c</Filter>
+    </ClCompile>
+    <ClCompile Include="renderer\jpeg-8c\jdmerge.c">
+      <Filter>Renderer\jpeg-8c</Filter>
+    </ClCompile>
+    <ClCompile Include="renderer\jpeg-8c\jdpostct.c">
+      <Filter>Renderer\jpeg-8c</Filter>
+    </ClCompile>
+    <ClCompile Include="renderer\jpeg-8c\jdsample.c">
+      <Filter>Renderer\jpeg-8c</Filter>
+    </ClCompile>
+    <ClCompile Include="renderer\jpeg-8c\jdtrans.c">
+      <Filter>Renderer\jpeg-8c</Filter>
+    </ClCompile>
+    <ClCompile Include="renderer\jpeg-8c\jerror.c">
+      <Filter>Renderer\jpeg-8c</Filter>
+    </ClCompile>
+    <ClCompile Include="renderer\jpeg-8c\jfdctflt.c">
+      <Filter>Renderer\jpeg-8c</Filter>
+    </ClCompile>
+    <ClCompile Include="renderer\jpeg-8c\jfdctfst.c">
+      <Filter>Renderer\jpeg-8c</Filter>
+    </ClCompile>
+    <ClCompile Include="renderer\jpeg-8c\jfdctint.c">
+      <Filter>Renderer\jpeg-8c</Filter>
+    </ClCompile>
+    <ClCompile Include="renderer\jpeg-8c\jidctflt.c">
+      <Filter>Renderer\jpeg-8c</Filter>
+    </ClCompile>
+    <ClCompile Include="renderer\jpeg-8c\jidctfst.c">
+      <Filter>Renderer\jpeg-8c</Filter>
+    </ClCompile>
+    <ClCompile Include="renderer\jpeg-8c\jidctint.c">
+      <Filter>Renderer\jpeg-8c</Filter>
+    </ClCompile>
+    <ClCompile Include="renderer\jpeg-8c\jmemmgr.c">
+      <Filter>Renderer\jpeg-8c</Filter>
+    </ClCompile>
+    <ClCompile Include="renderer\jpeg-8c\jmemnobs.c">
+      <Filter>Renderer\jpeg-8c</Filter>
+    </ClCompile>
+    <ClCompile Include="renderer\jpeg-8c\jquant1.c">
+      <Filter>Renderer\jpeg-8c</Filter>
+    </ClCompile>
+    <ClCompile Include="renderer\jpeg-8c\jquant2.c">
+      <Filter>Renderer\jpeg-8c</Filter>
+    </ClCompile>
+    <ClCompile Include="renderer\jpeg-8c\jutils.c">
+      <Filter>Renderer\jpeg-8c</Filter>
+    </ClCompile>
   </ItemGroup>
   <ItemGroup>
     <None Include="openal\idal.py">
diff -NEaurb neo/framework/BuildDefines.h neo/framework/BuildDefines.h
--- neo/framework/BuildDefines.h	2013-08-14 01:47:48 +0000
+++ neo/framework/BuildDefines.h	2013-08-13 00:31:32 +0000
@@ -26,6 +26,10 @@
 ===========================================================================
 */
 
+#define ID_ENFORCE_KEY 0
+#define ID_CONSOLE_LOCK 0
+#define ID_ALLOW_CHEATS 1
+
 /*
 ===============================================================================
 
diff -NEaurb neo/framework/CmdSystem.h neo/framework/CmdSystem.h
--- neo/framework/CmdSystem.h	2013-08-14 01:47:48 +0000
+++ neo/framework/CmdSystem.h	2013-08-13 04:07:47 +0000
@@ -137,7 +137,7 @@
     callback(va("%s 1", args.Argv(0)));
 }
 
-template<int min,int max> ID_STATIC_TEMPLATE ID_INLINE void idCmdSystem::ArgCompletion_Integer(const idCmdArgs &args, void(*callback)(const char *s))
+template<int min,int max> ID_INLINE void idCmdSystem::ArgCompletion_Integer(const idCmdArgs &args, void(*callback)(const char *s))
 {
     for (int i = min; i <= max; i++)
     {
@@ -145,7 +145,7 @@
     }
 }
 
-template<const char **strings> ID_STATIC_TEMPLATE ID_INLINE void idCmdSystem::ArgCompletion_String(const idCmdArgs &args, void(*callback)(const char *s))
+template<const char **strings> ID_INLINE void idCmdSystem::ArgCompletion_String(const idCmdArgs &args, void(*callback)(const char *s))
 {
     for (int i = 0; strings[i]; i++)
     {
@@ -153,7 +153,7 @@
     }
 }
 
-template<int type> ID_STATIC_TEMPLATE ID_INLINE void idCmdSystem::ArgCompletion_Decl(const idCmdArgs &args, void(*callback)(const char *s))
+template<int type> ID_INLINE void idCmdSystem::ArgCompletion_Decl(const idCmdArgs &args, void(*callback)(const char *s))
 {
     cmdSystem->ArgCompletion_DeclName(args, callback, type);
 }
diff -NEaurb neo/framework/Common.cpp neo/framework/Common.cpp
--- neo/framework/Common.cpp	2013-08-14 01:47:48 +0000
+++ neo/framework/Common.cpp	2013-08-14 02:01:50 +0000
@@ -52,7 +52,7 @@
 {
     version_s(void)
     {
-        sprintf(string, "%s.%d%s %s %s %s", ENGINE_VERSION, BUILD_NUMBER, BUILD_DEBUG, BUILD_STRING, __DATE__, __TIME__);
+        sprintf(string, "%s.%d %s %s %s %s.%d %s.%d", ENGINE_VERSION, BUILD_NUMBER, BUILD_DEBUG, BUILD_STRING, __DATE__, __TIME__);
     }
     char	string[256];
 } version;
@@ -164,6 +164,8 @@
 
     void						SetMachineSpec(void);
 
+    semaphore_t					alloc_mutex;
+
 private:
     void						InitCommands(void);
     void						InitRenderSystem(void);
@@ -429,7 +431,6 @@
                 logFileFailed = true;
                 FatalError("failed to open log file '%s'\n", fileName);
             }
-
             recursing = false;
 
             if (com_logFile.GetInteger() > 1)
@@ -464,7 +465,6 @@
     }
 
 #ifdef _WIN32
-
     if (com_outputMsg)
     {
         if (com_msgID == -1)
@@ -485,7 +485,6 @@
             ::PostMessage(com_hwndMsg, com_msgID, 0, static_cast<LPARAM>(atom));
         }
     }
-
 #endif
 }
 
@@ -648,11 +647,10 @@
     {
         return;
     }
-
     warningFile = fileSystem->OpenFileWrite("warnings.txt", "fs_savepath");
+
     if (warningFile)
     {
-
         warningFile->Printf("------------- Warnings ---------------\n\n");
         warningFile->Printf("during %s...\n", warningCaption.c_str());
         warningList.Sort();
@@ -669,17 +667,15 @@
         {
             warningFile->Printf("\n%d warnings.\n", warningList.Num());
         }
-
         warningFile->Printf("\n\n-------------- Errors ---------------\n\n");
         errorList.Sort();
+
         for (i = 0; i < errorList.Num(); i++)
         {
             errorList[i].RemoveColors();
             warningFile->Printf("ERROR: %s", errorList[i].c_str());
         }
-
         warningFile->ForceFlush();
-
         fileSystem->CloseFile(warningFile);
 
 #if defined(_WIN32) && !defined(_DEBUG)
@@ -859,7 +855,6 @@
 */
 void idCommonLocal::Quit(void)
 {
-
 #ifdef ID_ALLOW_TOOLS
     if (com_editors & EDITOR_RADIANT)
     {
@@ -873,7 +868,6 @@
     {
         Shutdown();
     }
-
     Sys_Quit();
 }
 
@@ -1086,6 +1080,7 @@
         {
             added = true;
         }
+
         // directly as tokenized so nothing gets screwed
         cmdSystem->BufferCommandArgs(CMD_EXEC_APPEND, com_consoleLines[i]);
     }
@@ -1487,7 +1482,6 @@
         commonLocal.Printf("freeze may only be used in developer mode\n");
         return;
     }
-
     s = atof(args.Argv(1));
 
     start = eventLoop->Milliseconds();
@@ -1516,7 +1510,6 @@
         commonLocal.Printf("crash may only be used in developer mode\n");
         return;
     }
-
     * (int *) 0 = 0x12345678;
 }
 
@@ -1690,10 +1683,11 @@
         cvarSystem->SetCVarBool("com_purgeAll", false, CVAR_ARCHIVE);
         cvarSystem->SetCVarBool("r_forceLoadImages", false, CVAR_ARCHIVE);
     }
-
     bool oldCard = false;
     bool nv10or20 = false;
+
     renderSystem->GetCardCaps(oldCard, nv10or20);
+
     if (oldCard)
     {
         cvarSystem->SetCVarBool("g_decals", false, CVAR_ARCHIVE);
@@ -1789,7 +1783,6 @@
 */
 void idCommonLocal::FilterLangList(idStrList* list, idStr lang)
 {
-
     idStr temp;
     for (int i = 0; i < list->Num(); i++)
     {
@@ -2395,7 +2388,6 @@
         common->Printf("Usage: localizeGuis <all | gui>\n");
         return;
     }
-
     idLangDict strTable;
 
     idStr filename = va("strings/english%.3i.lang", com_product_lang_ext.GetInteger());
@@ -2437,7 +2429,6 @@
             commonLocal.LocalizeGui(files->GetFile(i), strTable);
         }
         fileSystem->FreeFileList(files);
-
     }
     else
     {
@@ -2448,7 +2439,6 @@
 
 void Com_LocalizeGuiParmsTest_f(const idCmdArgs &args)
 {
-
     common->SetRefreshOnPrint(true);
 
     idFile *localizeFile = fileSystem->OpenFileWrite("gui_parm_localize.csv");
@@ -2494,21 +2484,17 @@
             }
         }
     }
-
     fileSystem->CloseFile(localizeFile);
     fileSystem->CloseFile(noLocalizeFile);
 
     common->SetRefreshOnPrint(false);
 }
 
-
 void Com_LocalizeMapsTest_f(const idCmdArgs &args)
 {
-
     ListHash listHash;
     LoadMapLocalizeData(listHash);
 
-
     common->SetRefreshOnPrint(true);
 
     idFile *localizeFile = fileSystem->OpenFileWrite("map_localize.csv");
@@ -2778,7 +2764,6 @@
 {
     try
     {
-
         // pump all the events
         Sys_GenerateEvents();
 
@@ -3017,7 +3002,7 @@
     if (!GetGameAPI)
     {
         Sys_DLL_Unload(gameDLL);
-        gameDLL = NULL;
+        gameDLL = 0;
         common->FatalError("couldn't find game DLL API");
         return;
     }
@@ -3042,7 +3027,7 @@
     if (gameExport.version != GAME_API_VERSION)
     {
         Sys_DLL_Unload(gameDLL);
-        gameDLL = NULL;
+        gameDLL = 0;
         common->FatalError("wrong game DLL API version");
         return;
     }
@@ -3078,7 +3063,7 @@
     if (gameDLL)
     {
         Sys_DLL_Unload(gameDLL);
-        gameDLL = NULL;
+        gameDLL = 0;
     }
     game = NULL;
     gameEdit = NULL;
@@ -3146,7 +3131,6 @@
 {
     try
     {
-
         // set interface pointers used by idLib
         idLib::sys			= sys;
         idLib::common		= common;
@@ -3243,6 +3227,9 @@
 
         ClearCommandLine();
 
+        // load the persistent console history
+        console->LoadHistory();
+
         com_fullyInitialized = true;
     }
 
@@ -3260,12 +3247,14 @@
 */
 void idCommonLocal::Shutdown(void)
 {
-
     com_shuttingDown = true;
 
     idAsyncNetwork::server.Kill();
     idAsyncNetwork::client.Shutdown();
 
+    // save persistent console history
+    console->SaveHistory();
+
     // game specific shut down
     ShutdownGame(false);
 
diff -NEaurb neo/framework/Common.h neo/framework/Common.h
--- neo/framework/Common.h	2013-08-14 01:47:48 +0000
+++ neo/framework/Common.h	2013-08-14 02:01:50 +0000
@@ -211,6 +211,9 @@
 
     // Directly sample a keystate.
     virtual int					KeyState(int key) = 0;
+
+    // Multicore support struct
+    semaphore_t					alloc_mutex;
 };
 
 extern idCommon *		common;
diff -NEaurb neo/framework/Compressor.cpp neo/framework/Compressor.cpp
--- neo/framework/Compressor.cpp	2013-08-14 01:47:48 +0000
+++ neo/framework/Compressor.cpp	2013-08-13 15:43:53 +0000
@@ -1036,7 +1036,6 @@
         tree->weight = 0;
         lhead->next = lhead->prev = NULL;
         tree->parent = tree->left = tree->right = NULL;
-        loc[NYT] = tree;
     }
     else
     {
@@ -1737,8 +1736,6 @@
 */
 int idCompressor_Arithmetic::ProbabilityForCount(unsigned int count)
 {
-#if 1
-
     int len, mid, offset, res;
 
     len = (1<<AC_WORD_LENGTH);
@@ -1765,24 +1762,6 @@
         }
     }
     return offset+res;
-
-#else
-
-    int j;
-
-    for (j = 0; j < (1<<AC_WORD_LENGTH); j++)
-    {
-        if (count >= probabilities[ j ].low && count < probabilities[ j ].high)
-        {
-            return j;
-        }
-    }
-
-    assert(false);
-
-    return 0;
-
-#endif
 }
 
 /*
diff -NEaurb neo/framework/Console.cpp neo/framework/Console.cpp
--- neo/framework/Console.cpp	2013-08-14 01:47:48 +0000
+++ neo/framework/Console.cpp	2013-08-14 02:01:50 +0000
@@ -60,6 +60,9 @@
     void				Dump(const char *toFile);
     void				Clear();
 
+	virtual void		SaveHistory();
+	virtual void		LoadHistory();
+
     //============================
 
     const idMaterial *	charSetShader;
@@ -135,7 +138,7 @@
 /*
 =============================================================================
 
-	Misc stats
+Misc stats
 
 =============================================================================
 */
@@ -172,54 +175,37 @@
     y += SMALLCHAR_HEIGHT + 4;
 }
 
-
-
-
 /*
 ==================
 SCR_DrawFPS
 ==================
 */
-#define	FPS_FRAMES	4
 float SCR_DrawFPS(float y)
 {
-    char		*s;
-    int			w;
-    static int	previousTimes[FPS_FRAMES];
-    static int	index;
-    int		i, total;
-    int		fps;
-    static	int	previous;
-    int		t, frameTime;
-
-    // don't use serverTime, because that will be drifting to
-    // correct for internet lag changes, timescales, timedemos, etc
-    t = Sys_Milliseconds();
-    frameTime = t - previous;
-    previous = t;
-
-    previousTimes[index % FPS_FRAMES] = frameTime;
-    index++;
-    if (index > FPS_FRAMES)
-    {
-        // average multiple frames together to smooth changes out a bit
-        total = 0;
-        for (i = 0 ; i < FPS_FRAMES ; i++)
-        {
-            total += previousTimes[i];
-        }
-        if (!total)
-        {
-            total = 1;
-        }
-        fps = 10000 * FPS_FRAMES / total;
-        fps = (fps + 5)/10;
+	static int frames = 0;
+	static int starttime = 0;
+	static bool first = true;
+	static float fps = 0.0f;
+	int t = Sys_Milliseconds();
 
-        s = va("%ifps", fps);
-        w = strlen(s) * BIGCHAR_WIDTH;
+	if (first)
+	{
+		starttime = t;
+		first = false;
+		return y + BIGCHAR_HEIGHT + 4;
+	}
+	frames++;
 
-        renderSystem->DrawBigStringExt(635 - w, idMath::FtoiFast(y) + 2, s, colorWhite, true, localConsole.charSetShader);
+	if (t - starttime > 100 && frames > 10)
+	{
+		fps = (float)(frames * 1000) / (float)(t - starttime);
+		starttime = t;
+		frames = 0;
     }
+	char	*s = va("%ifps", (int)(fps + 0.5f));
+	int		w = strlen(s) * BIGCHAR_WIDTH;
+
+	renderSystem->DrawBigStringExt(635 - w, idMath::Ftoi(y) + 2, s, colorWhite, true, localConsole.charSetShader);
 
     return y + BIGCHAR_HEIGHT + 4;
 }
@@ -552,6 +538,58 @@
 
 /*
 ================
+idConsoleLocal::SaveHistory
+
+Save the console contents
+================
+*/
+void idConsoleLocal::SaveHistory(void)
+{
+	idFile *f = fileSystem->OpenFileWrite("consolehistory.dat");
+	for (int i=0; i < COMMAND_HISTORY; ++i)
+	{
+		// make sure the history is in the right order
+		int line = (nextHistoryLine + i) % COMMAND_HISTORY;
+		const char *s = historyEditLines[line].GetBuffer();
+		if (s && s[0])
+		{
+			f->WriteString(s);
+		}
+	}
+	fileSystem->CloseFile(f);
+}
+
+/*
+================
+idConsoleLocal::LoadHistory
+
+Load the console contents
+================
+*/
+void idConsoleLocal::LoadHistory(void)
+{
+	idFile *f = fileSystem->OpenFileRead("consolehistory.dat");
+	if (f == NULL)   // file doesn't exist
+		return;
+
+	historyLine = 0;
+	idStr tmp;
+	for (int i=0; i < COMMAND_HISTORY; ++i)
+	{
+		if (f->Tell() >= f->Length())
+		{
+			break; // EOF is reached
+		}
+		f->ReadString(tmp);
+		historyEditLines[i].SetBuffer(tmp.c_str());
+		++historyLine;
+	}
+	nextHistoryLine = historyLine;
+	fileSystem->CloseFile(f);
+}
+
+/*
+================
 idConsoleLocal::PageUp
 ================
 */
@@ -616,7 +654,6 @@
 */
 void idConsoleLocal::KeyDownEvent(int key)
 {
-
     // Execute F key bindings
     if (key >= K_F1 && key <= K_F12)
     {
@@ -634,22 +671,26 @@
     // enter finishes the line
     if (key == K_ENTER || key == K_KP_ENTER)
     {
+		int buflen = strlen(consoleField.GetBuffer());
 
         common->Printf("]%s\n", consoleField.GetBuffer());
 
         cmdSystem->BufferCommandText(CMD_EXEC_APPEND, consoleField.GetBuffer());	// valid command
         cmdSystem->BufferCommandText(CMD_EXEC_APPEND, "\n");
 
+		// don't add empty lines to history
+
+		if (buflen > 0)
+		{
         // copy line to history buffer
+
         historyEditLines[nextHistoryLine % COMMAND_HISTORY] = consoleField;
         nextHistoryLine++;
         historyLine = nextHistoryLine;
-
+		}
         consoleField.Clear();
         consoleField.SetWidthInChars(LINE_WIDTH);
-
-        session->UpdateScreen();// force an update, because the command
-        // may take some time
+		session->UpdateScreen(); // force an update, because the command may take some time
         return;
     }
 
@@ -1166,7 +1207,7 @@
     int				lines;
     int				currentColor;
 
-    lines = idMath::FtoiFast(SCREEN_HEIGHT * frac);
+	lines = idMath::Ftoi(SCREEN_HEIGHT * frac);
     if (lines <= 0)
     {
         return;
@@ -1220,7 +1261,7 @@
         renderSystem->SetColor(idStr::ColorForIndex(C_COLOR_CYAN));
         for (x = 0; x < LINE_WIDTH; x += 4)
         {
-            renderSystem->DrawSmallChar((x+1)*SMALLCHAR_WIDTH, idMath::FtoiFast(y), '^', localConsole.charSetShader);
+			renderSystem->DrawSmallChar((x+1)*SMALLCHAR_WIDTH, idMath::Ftoi(y), '^', localConsole.charSetShader);
         }
         y -= SMALLCHAR_HEIGHT;
         rows--;
@@ -1262,7 +1303,7 @@
                 currentColor = idStr::ColorIndex(text_p[x]>>8);
                 renderSystem->SetColor(idStr::ColorForIndex(currentColor));
             }
-            renderSystem->DrawSmallChar((x+1)*SMALLCHAR_WIDTH, idMath::FtoiFast(y), text_p[x] & 0xff, localConsole.charSetShader);
+			renderSystem->DrawSmallChar((x+1)*SMALLCHAR_WIDTH, idMath::Ftoi(y), text_p[x] & 0xff, localConsole.charSetShader);
         }
     }
 
diff -NEaurb neo/framework/Console.h neo/framework/Console.h
--- neo/framework/Console.h	2013-08-14 01:47:48 +0000
+++ neo/framework/Console.h	2013-08-13 11:16:45 +0000
@@ -66,6 +66,9 @@
 
     virtual void	Draw(bool forceFullScreen) = 0;
     virtual void	Print(const char *text) = 0;
+
+    virtual void	SaveHistory() = 0;
+    virtual void	LoadHistory() = 0;
 };
 
 extern idConsole *	console;	// statically initialized to an idConsoleLocal
diff -NEaurb neo/framework/DeclParticle.cpp neo/framework/DeclParticle.cpp
--- neo/framework/DeclParticle.cpp	2013-08-14 01:47:48 +0000
+++ neo/framework/DeclParticle.cpp	2013-08-13 15:32:11 +0000
@@ -1450,7 +1450,7 @@
     for (int i = 0 ; i < 4 ; i++)
     {
         float	fcolor = ((entityColor) ? g->renderEnt->shaderParms[i] : color[i]) * fadeFraction + fadeColor[i] * (1.0f - fadeFraction);
-        int		icolor = idMath::FtoiFast(fcolor * 255.0f);
+        int		icolor = idMath::Ftoi(fcolor * 255.0f);
         if (icolor < 0)
         {
             icolor = 0;
diff -NEaurb neo/framework/DeclParticle.h neo/framework/DeclParticle.h
--- neo/framework/DeclParticle.h	2013-08-14 01:47:48 +0000
+++ neo/framework/DeclParticle.h	2013-08-14 02:10:56 +0000
@@ -115,7 +115,10 @@
 {
 public:
     idParticleStage(void);
-    virtual					~idParticleStage(void) {}
+    virtual					~idParticleStage(void)
+    {
+        material = NULL;
+    }
 
     void					Default();
     virtual int				NumQuadsPerParticle() const;	// includes trails and cross faded animations
diff -NEaurb neo/framework/DeclTable.cpp neo/framework/DeclTable.cpp
--- neo/framework/DeclTable.cpp	2013-08-14 01:47:48 +0000
+++ neo/framework/DeclTable.cpp	2013-08-13 15:32:11 +0000
@@ -70,7 +70,7 @@
             index += domain * idMath::Ceil(-index / domain);
         }
 
-        iIndex = idMath::FtoiFast(idMath::Floor(index));
+        iIndex = idMath::Ftoi(idMath::Floor(index));
         iFrac = index - iIndex;
         iIndex = iIndex % domain;
     }
diff -NEaurb neo/framework/EventLoop.cpp neo/framework/EventLoop.cpp
--- neo/framework/EventLoop.cpp	2013-08-14 01:47:48 +0000
+++ neo/framework/EventLoop.cpp	2013-08-13 15:43:53 +0000
@@ -286,25 +286,8 @@
 */
 int idEventLoop::Milliseconds(void)
 {
-#if 1	// FIXME!
+	// FIXME!
     return Sys_Milliseconds() - initialTimeOffset;
-#else
-    sysEvent_t	ev;
-
-    // get events and push them until we get a null event with the current time
-    do
-    {
-
-        ev = Com_GetRealEvent();
-        if (ev.evType != SE_NONE)
-        {
-            Com_PushEvent(&ev);
-        }
-    }
-    while (ev.evType != SE_NONE);
-
-    return ev.evTime;
-#endif
 }
 
 /*
diff -NEaurb neo/framework/FileSystem.cpp neo/framework/FileSystem.cpp
--- neo/framework/FileSystem.cpp	2013-08-14 01:47:48 +0000
+++ neo/framework/FileSystem.cpp	2013-08-13 00:05:26 +0000
@@ -2117,12 +2117,11 @@
 
     // push a new entry
     dir_cache[dir_cache_index].Init(directory, extension, list);
-    dir_cache_index = (++dir_cache_index) % MAX_CACHED_DIRS;
+    dir_cache_index = (dir_cache_index + 1) % MAX_CACHED_DIRS;
     if (dir_cache_count < MAX_CACHED_DIRS)
     {
         dir_cache_count++;
     }
-
     return ret;
 }
 
diff -NEaurb neo/framework/FileSystem.h neo/framework/FileSystem.h
--- neo/framework/FileSystem.h	2013-08-14 01:47:48 +0000
+++ neo/framework/FileSystem.h	2013-08-13 04:56:51 +0000
@@ -59,9 +59,9 @@
 // modes for OpenFileByMode. used as bit mask internally
 typedef enum
 {
-    FS_READ		= 0,
-    FS_WRITE	= 1,
-    FS_APPEND	= 2
+    FS_READ		= 1,
+    FS_WRITE	= 2,
+    FS_APPEND	= 3
 } fsMode_t;
 
 typedef enum
diff -NEaurb neo/framework/Session.cpp neo/framework/Session.cpp
--- neo/framework/Session.cpp	2013-08-14 01:47:48 +0000
+++ neo/framework/Session.cpp	2013-08-13 15:43:53 +0000
@@ -450,6 +450,11 @@
         EndAVICapture();
     }
 
+    if (timeDemo == TD_YES)
+    {
+        // else the game freezes when showing the timedemo results
+        timeDemo = TD_YES_THEN_QUIT;
+    }
     Stop();
 
     if (rw)
@@ -561,7 +566,6 @@
     console->Close();
 
     // introduced in D3XP code. don't think it actually fixes anything, but doesn't hurt either
-#if 1
     // Try and prevent the while loop from being skipped over (long hitch on the main thread?)
     int stop = Sys_Milliseconds() + 1000;
     int force = 10;
@@ -571,15 +575,6 @@
         session->Frame();
         session->UpdateScreen(false);
     }
-#else
-    int stop = com_ticNumber + 1000.0f / USERCMD_MSEC * 1.0f;
-    while (com_ticNumber < stop)
-    {
-        com_frameTime = com_ticNumber * USERCMD_MSEC;
-        session->Frame();
-        session->UpdateScreen(false);
-    }
-#endif
 }
 
 
@@ -3296,7 +3291,7 @@
     cmdSystem->AddCommand("testGUI", Session_TestGUI_f, CMD_FL_SYSTEM, "tests a gui");
 
 #ifndef	ID_DEDICATED
-    cmdSystem->AddCommand("saveGame", SaveGame_f, CMD_FL_SYSTEM|CMD_FL_CHEAT, "saves a game");
+    cmdSystem->AddCommand("saveGame", SaveGame_f, CMD_FL_SYSTEM | CMD_FL_CHEAT, "saves a game", idCmdSystem::ArgCompletion_SaveGame);
     cmdSystem->AddCommand("loadGame", LoadGame_f, CMD_FL_SYSTEM|CMD_FL_CHEAT, "loads a game", idCmdSystem::ArgCompletion_SaveGame);
 #endif
 
diff -NEaurb neo/framework/UsercmdGen.cpp neo/framework/UsercmdGen.cpp
--- neo/framework/UsercmdGen.cpp	2013-08-14 01:47:48 +0000
+++ neo/framework/UsercmdGen.cpp	2013-08-13 11:16:44 +0000
@@ -841,7 +841,7 @@
     {
         // update toggled key states
         toggled_crouch.SetKeyState(ButtonState(UB_DOWN), in_toggleCrouch.GetBool());
-        toggled_run.SetKeyState(ButtonState(UB_SPEED), in_toggleRun.GetBool() && idAsyncNetwork::IsActive());
+        toggled_run.SetKeyState(ButtonState(UB_SPEED), in_toggleRun.GetBool());
         toggled_zoom.SetKeyState(ButtonState(UB_ZOOM), in_toggleZoom.GetBool());
 
         // keyboard angle adjustment
diff -NEaurb neo/game-d3xp.vcxproj neo/game-d3xp.vcxproj
--- neo/game-d3xp.vcxproj	2011-12-26 04:15:38 +0000
+++ neo/game-d3xp.vcxproj	2013-08-14 02:01:50 +0000
@@ -46,30 +46,37 @@
   <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Dedicated Release|Win32'" Label="Configuration">
     <ConfigurationType>DynamicLibrary</ConfigurationType>
     <CharacterSet>MultiByte</CharacterSet>
+    <PlatformToolset>v110</PlatformToolset>
   </PropertyGroup>
   <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Dedicated Debug with inlines|Win32'" Label="Configuration">
     <ConfigurationType>DynamicLibrary</ConfigurationType>
     <CharacterSet>MultiByte</CharacterSet>
+    <PlatformToolset>v110</PlatformToolset>
   </PropertyGroup>
   <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Dedicated Debug|Win32'" Label="Configuration">
     <ConfigurationType>DynamicLibrary</ConfigurationType>
     <CharacterSet>MultiByte</CharacterSet>
+    <PlatformToolset>v110</PlatformToolset>
   </PropertyGroup>
   <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug with inlines and memory log|Win32'" Label="Configuration">
     <ConfigurationType>DynamicLibrary</ConfigurationType>
     <CharacterSet>MultiByte</CharacterSet>
+    <PlatformToolset>v110</PlatformToolset>
   </PropertyGroup>
   <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug with inlines|Win32'" Label="Configuration">
     <ConfigurationType>DynamicLibrary</ConfigurationType>
     <CharacterSet>MultiByte</CharacterSet>
+    <PlatformToolset>v110</PlatformToolset>
   </PropertyGroup>
   <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|Win32'" Label="Configuration">
     <ConfigurationType>DynamicLibrary</ConfigurationType>
     <CharacterSet>MultiByte</CharacterSet>
+    <PlatformToolset>v110</PlatformToolset>
   </PropertyGroup>
   <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'" Label="Configuration">
     <ConfigurationType>DynamicLibrary</ConfigurationType>
     <CharacterSet>MultiByte</CharacterSet>
+    <PlatformToolset>v110</PlatformToolset>
   </PropertyGroup>
   <Import Project="$(VCTargetsPath)\Microsoft.Cpp.props" />
   <ImportGroup Label="ExtensionSettings">
diff -NEaurb neo/game.vcxproj neo/game.vcxproj
--- neo/game.vcxproj	2011-12-26 04:15:38 +0000
+++ neo/game.vcxproj	2013-08-14 02:01:50 +0000
@@ -46,30 +46,37 @@
   <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Dedicated Release|Win32'" Label="Configuration">
     <ConfigurationType>DynamicLibrary</ConfigurationType>
     <CharacterSet>MultiByte</CharacterSet>
+    <PlatformToolset>v110</PlatformToolset>
   </PropertyGroup>
   <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Dedicated Debug with inlines|Win32'" Label="Configuration">
     <ConfigurationType>DynamicLibrary</ConfigurationType>
     <CharacterSet>MultiByte</CharacterSet>
+    <PlatformToolset>v110</PlatformToolset>
   </PropertyGroup>
   <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Dedicated Debug|Win32'" Label="Configuration">
     <ConfigurationType>DynamicLibrary</ConfigurationType>
     <CharacterSet>MultiByte</CharacterSet>
+    <PlatformToolset>v110</PlatformToolset>
   </PropertyGroup>
   <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug with inlines and memory log|Win32'" Label="Configuration">
     <ConfigurationType>DynamicLibrary</ConfigurationType>
     <CharacterSet>MultiByte</CharacterSet>
+    <PlatformToolset>v110</PlatformToolset>
   </PropertyGroup>
   <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug with inlines|Win32'" Label="Configuration">
     <ConfigurationType>DynamicLibrary</ConfigurationType>
     <CharacterSet>MultiByte</CharacterSet>
+    <PlatformToolset>v110</PlatformToolset>
   </PropertyGroup>
   <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|Win32'" Label="Configuration">
     <ConfigurationType>DynamicLibrary</ConfigurationType>
     <CharacterSet>MultiByte</CharacterSet>
+    <PlatformToolset>v110</PlatformToolset>
   </PropertyGroup>
   <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'" Label="Configuration">
     <ConfigurationType>DynamicLibrary</ConfigurationType>
     <CharacterSet>MultiByte</CharacterSet>
+    <PlatformToolset>v110</PlatformToolset>
   </PropertyGroup>
   <Import Project="$(VCTargetsPath)\Microsoft.Cpp.props" />
   <ImportGroup Label="ExtensionSettings">
diff -NEaurb neo/idlib/Base64.h neo/idlib/Base64.h
--- neo/idlib/Base64.h	2013-08-14 01:47:55 +0000
+++ neo/idlib/Base64.h	2013-08-14 02:10:56 +0000
@@ -32,7 +32,7 @@
 /*
 ===============================================================================
 
-	base64
+base64
 
 ===============================================================================
 */
diff -NEaurb neo/idlib/BitMsg.h neo/idlib/BitMsg.h
--- neo/idlib/BitMsg.h	2013-08-14 01:47:55 +0000
+++ neo/idlib/BitMsg.h	2013-08-14 02:10:55 +0000
@@ -44,9 +44,8 @@
 class idBitMsg
 {
 public:
-    idBitMsg();
-    ~idBitMsg() {}
-
+    idBitMsg(void);
+    ~idBitMsg(void)	{}
     void			Init(byte *data, int length);
     void			Init(const byte *data, int length);
     byte *			GetData(void);						// get data for writing
diff -NEaurb neo/idlib/Dict.cpp neo/idlib/Dict.cpp
--- neo/idlib/Dict.cpp	2013-08-14 01:47:53 +0000
+++ neo/idlib/Dict.cpp	2013-08-13 12:17:25 +0000
@@ -532,14 +532,13 @@
 */
 int idDict::FindKeyIndex(const char *key) const
 {
-
     if (key == NULL || key[0] == '\0')
     {
         idLib::common->DWarning("idDict::FindKeyIndex: empty key");
-        return NULL;
+        return -1;
     }
-
     int hash = argHash.GenerateKey(key, false);
+
     for (int i = argHash.First(hash); i != -1; i = argHash.Next(i))
     {
         if (args[i].GetKey().Icmp(key) == 0)
@@ -547,7 +546,6 @@
             return i;
         }
     }
-
     return -1;
 }
 
diff -NEaurb neo/idlib/Heap.cpp neo/idlib/Heap.cpp
--- neo/idlib/Heap.cpp	2013-08-14 01:47:53 +0000
+++ neo/idlib/Heap.cpp	2013-08-13 15:10:50 +0000
@@ -197,7 +197,6 @@
 */
 idHeap::~idHeap(void)
 {
-
     idHeap::page_s	*p;
 
     if (smallCurPage)
@@ -235,14 +234,12 @@
         FreePage(p);
         p = next;
     }
-
     ReleaseSwappedPages();
 
     if (defragBlock)
     {
         free(defragBlock);
     }
-
     assert(pagesAllocated == 0);
 }
 
@@ -397,7 +394,6 @@
 */
 dword idHeap::Msize(void *p)
 {
-
     if (!p)
     {
         return 0;
@@ -469,7 +465,6 @@
     {
         idLib::common->Printf("%p  bytes %-8d  (fully used by large heap)\n", pg->data, pg->dataSize);
     }
-
     idLib::common->Printf("pages allocated : %d\n", pagesAllocated);
 }
 
@@ -545,14 +540,12 @@
                 common->FatalError("malloc failure for %i", bytes);
             }
         }
-
         p->data		= (void *) ALIGN_SIZE((int)((byte *)(p)) + sizeof(idHeap::page_s));
         p->dataSize	= size - sizeof(idHeap::page_s);
         p->firstFree = NULL;
         p->largestFree = 0;
         OSAllocs++;
     }
-
     p->prev = NULL;
     p->next = NULL;
 
@@ -691,7 +684,6 @@
 */
 void *idHeap::MediumAllocateFromPage(idHeap::page_s *p, dword sizeNeeded)
 {
-
     mediumHeapEntry_s	*best,*nw = NULL;
     byte				*ret;
 
@@ -735,7 +727,6 @@
         {
             best->nextFree->prevFree = best->prevFree;
         }
-
         best->prevFree  = NULL;
         best->nextFree  = NULL;
         best->freeBlock = 0;			// used block
@@ -1104,6 +1095,7 @@
 static memoryStats_t	mem_total_allocs = { 0, 0x0fffffff, -1, 0 };
 static memoryStats_t	mem_frame_allocs;
 static memoryStats_t	mem_frame_frees;
+static semaphore_t		alloc_mutex;
 
 /*
 ==================
@@ -1195,6 +1187,7 @@
     {
         return NULL;
     }
+    SEM_WAIT(&alloc_mutex);
     if (!mem_heap)
     {
 #ifdef CRASH_ON_STATIC_ALLOCATION
@@ -1204,6 +1197,7 @@
     }
     void *mem = mem_heap->Allocate(size);
     Mem_UpdateAllocStats(mem_heap->Msize(mem));
+    SEM_POST(&alloc_mutex);
     return mem;
 }
 
@@ -1218,6 +1212,7 @@
     {
         return;
     }
+    SEM_WAIT(&alloc_mutex);
     if (!mem_heap)
     {
 #ifdef CRASH_ON_STATIC_ALLOCATION
@@ -1228,6 +1223,7 @@
     }
     Mem_UpdateFreeStats(mem_heap->Msize(ptr));
     mem_heap->Free(ptr);
+    SEM_POST(&alloc_mutex);
 }
 
 /*
@@ -1241,6 +1237,7 @@
     {
         return NULL;
     }
+    SEM_WAIT(&alloc_mutex);
     if (!mem_heap)
     {
 #ifdef CRASH_ON_STATIC_ALLOCATION
@@ -1251,6 +1248,7 @@
     void *mem = mem_heap->Allocate16(size);
     // make sure the memory is 16 byte aligned
     assert((((int)mem) & 15) == 0);
+    SEM_POST(&alloc_mutex);
     return mem;
 }
 
@@ -1265,6 +1263,7 @@
     {
         return;
     }
+    SEM_WAIT(&alloc_mutex);
     if (!mem_heap)
     {
 #ifdef CRASH_ON_STATIC_ALLOCATION
@@ -1276,6 +1275,7 @@
     // make sure the memory is 16 byte aligned
     assert((((int)ptr) & 15) == 0);
     mem_heap->Free16(ptr);
+    SEM_POST(&alloc_mutex);
 }
 
 /*
@@ -1297,7 +1297,9 @@
 */
 void Mem_AllocDefragBlock(void)
 {
+    SEM_WAIT(&alloc_mutex);
     mem_heap->AllocDefragBlock();
+    SEM_POST(&alloc_mutex);
 }
 
 /*
@@ -1339,6 +1341,7 @@
 */
 void Mem_Init(void)
 {
+    SEM_INIT(&alloc_mutex);
     mem_heap = new idHeap;
     Mem_ClearFrameStats();
 }
@@ -1350,6 +1353,7 @@
 */
 void Mem_Shutdown(void)
 {
+    SEM_INIT(&alloc_mutex);
     idHeap *m = mem_heap;
     mem_heap = NULL;
     delete m;
@@ -1445,16 +1449,18 @@
     FILE *f;
 
     f = fopen(fileName, "wb");
+
     if (!f)
     {
         return;
     }
-
     totalSize = 0;
+
     for (numBlocks = 0, b = mem_debugMemory; b; b = b->next, numBlocks++)
     {
         ptr = ((char *) b) + sizeof(debugMemory_t);
         totalSize += b->size;
+
         for (i = 0; i < (sizeof(dump)-1) && i < b->size; i++)
         {
             if (ptr[i] >= 32 && ptr[i] < 127)
@@ -1467,6 +1473,7 @@
             }
         }
         dump[i] = '\0';
+
         if ((b->size >> 10) != 0)
         {
             fprintf(f, "size: %6d KB: %s, line: %d [%s], call stack: %s\r\n", (b->size >> 10), Mem_CleanupFileName(b->fileName), b->lineNumber, dump, idLib::sys->GetCallStackStr(b->callStack, MAX_CALLSTACK_DEPTH));
@@ -1546,7 +1553,6 @@
         {
             continue;
         }
-
         numBlocks++;
         totalSize += b->size;
 
@@ -1667,8 +1673,8 @@
             a->next = nextSorted;
         }
     }
-
     f = fopen(fileName, "wb");
+
     if (!f)
     {
         return;
@@ -1783,6 +1789,7 @@
     {
         return NULL;
     }
+	SEM_WAIT (&alloc_mutex);
 
     if (!mem_heap)
     {
@@ -1817,7 +1824,7 @@
     }
     mem_debugMemory = m;
     idLib::sys->GetCallStack(m->callStack, MAX_CALLSTACK_DEPTH);
-
+	SEM_POST (&alloc_mutex);
     return (((byte *) p) + sizeof(debugMemory_t));
 }
 
@@ -1834,7 +1841,7 @@
     {
         return;
     }
-
+	SEM_WAIT (&alloc_mutex);
     if (!mem_heap)
     {
 #ifdef CRASH_ON_STATIC_ALLOCATION
@@ -1844,14 +1851,12 @@
         free(p);
         return;
     }
-
     m = (debugMemory_t *)(((byte *) p) - sizeof(debugMemory_t));
 
     if (m->size < 0)
     {
         idLib::common->FatalError("memory freed twice, first from %s, now from %s", idLib::sys->GetCallStackStr(m->callStack, MAX_CALLSTACK_DEPTH), idLib::sys->GetCallStackCurStr(MAX_CALLSTACK_DEPTH));
     }
-
     Mem_UpdateFreeStats(m->size);
 
     if (m->next)
@@ -1866,7 +1871,6 @@
     {
         mem_debugMemory = m->next;
     }
-
     m->fileName = fileName;
     m->lineNumber = lineNumber;
     m->frameNumber = idLib::frameNumber;
@@ -1881,6 +1885,7 @@
     {
         mem_heap->Free(m);
     }
+	SEM_POST (&alloc_mutex);
 }
 
 /*
@@ -1977,6 +1982,7 @@
 */
 void Mem_Init(void)
 {
+	SEM_INIT(&alloc_mutex);
     mem_heap = new idHeap;
 }
 
@@ -1987,14 +1993,13 @@
 */
 void Mem_Shutdown(void)
 {
-
     if (mem_leakName[0] != '\0')
     {
         Mem_DumpCompressed(va("%s_leak_size.txt", mem_leakName), MEMSORT_SIZE, 0, 0);
         Mem_DumpCompressed(va("%s_leak_location.txt", mem_leakName), MEMSORT_LOCATION, 0, 0);
         Mem_DumpCompressed(va("%s_leak_cs1.txt", mem_leakName), MEMSORT_CALLSTACK, 2, 0);
     }
-
+	SEM_INIT(&alloc_mutex);
     idHeap *m = mem_heap;
     mem_heap = NULL;
     delete m;
diff -NEaurb neo/idlib/Heap.h neo/idlib/Heap.h
--- neo/idlib/Heap.h	2013-08-14 01:47:55 +0000
+++ neo/idlib/Heap.h	2013-08-13 03:29:22 +0000
@@ -41,6 +41,23 @@
 ===============================================================================
 */
 
+#if defined(_MSC_VER)
+#pragma intrinsic (_InterlockedExchange)
+#pragma intrinsic (_InterlockedExchangeAdd)
+#pragma intrinsic (_InterlockedCompareExchange)
+ID_INLINE int __sync_lock_test_and_set(int *addr, int val)
+{
+    return (int)_InterlockedExchange((long *)addr, (long)val);
+}
+ID_INLINE int __sync_fetch_and_add(int *addr, int val)
+{
+    return (int)_InterlockedExchangeAdd((long *)addr, (long)val);
+}
+ID_INLINE int __sync_val_compare_and_swap(volatile int *addr, int oldval, int newval)
+{
+    return _InterlockedCompareExchange((volatile long *)addr, newval, oldval);
+}
+#endif
 
 typedef struct
 {
@@ -202,6 +219,7 @@
 
     block_t *				blocks;
     element_t *				free;
+    semaphore_t				alloc_mutex;
     int						total;
     int						active;
 };
@@ -212,6 +230,7 @@
     blocks = NULL;
     free = NULL;
     total = active = 0;
+    SEM_INIT(&alloc_mutex);
 }
 
 template<class type, int blockSize>
@@ -223,6 +242,7 @@
 template<class type, int blockSize>
 type *idBlockAlloc<type,blockSize>::Alloc(void)
 {
+    SEM_WAIT(&alloc_mutex);
     if (!free)
     {
         block_t *block = new block_t;
@@ -239,21 +259,25 @@
     element_t *element = free;
     free = free->next;
     element->next = NULL;
+    SEM_POST(&alloc_mutex);
     return &element->t;
 }
 
 template<class type, int blockSize>
 void idBlockAlloc<type,blockSize>::Free(type *t)
 {
+    SEM_WAIT(&alloc_mutex);
     element_t *element = (element_t *)(((unsigned char *) t) - ((int) &((element_t *)0)->t));
     element->next = free;
     free = element;
     active--;
+    SEM_POST(&alloc_mutex);
 }
 
 template<class type, int blockSize>
 void idBlockAlloc<type,blockSize>::Shutdown(void)
 {
+    SEM_INIT(&alloc_mutex);
     while (blocks)
     {
         block_t *block = blocks;
@@ -517,6 +541,7 @@
     idBTree<idDynamicBlock<type>,int,4>freeTree;			// B-Tree with free memory blocks
     bool							allowAllocs;			// allow base block allocations
     bool							lockMemory;				// lock memory so it cannot get swapped out
+    semaphore_t						alloc_mutex;			// mutex
 
 #ifdef DYNAMIC_BLOCK_ALLOC_CHECK
     int								blockId[3];
@@ -557,6 +582,7 @@
 template<class type, int baseBlockSize, int minBlockSize>
 void idDynamicBlockAlloc<type, baseBlockSize, minBlockSize>::Init(void)
 {
+    SEM_INIT(&alloc_mutex);
     freeTree.Init();
 }
 
@@ -564,7 +590,7 @@
 void idDynamicBlockAlloc<type, baseBlockSize, minBlockSize>::Shutdown(void)
 {
     idDynamicBlock<type> *block;
-
+    SEM_INIT(&alloc_mutex);
     for (block = firstBlock; block != NULL; block = block->next)
     {
         if (block->node == NULL)
@@ -593,7 +619,7 @@
 void idDynamicBlockAlloc<type, baseBlockSize, minBlockSize>::SetFixedBlocks(int numBlocks)
 {
     idDynamicBlock<type> *block;
-
+    SEM_WAIT(&alloc_mutex);
     for (int i = numBaseBlocks; i < numBlocks; i++)
     {
         block = (idDynamicBlock<type> *) Mem_Alloc16(baseBlockSize);
@@ -626,6 +652,8 @@
     }
 
     allowAllocs = false;
+
+    SEM_POST(&alloc_mutex);
 }
 
 template<class type, int baseBlockSize, int minBlockSize>
@@ -638,7 +666,7 @@
 void idDynamicBlockAlloc<type, baseBlockSize, minBlockSize>::FreeEmptyBaseBlocks(void)
 {
     idDynamicBlock<type> *block, *next;
-
+    SEM_WAIT(&alloc_mutex);
     for (block = firstBlock; block != NULL; block = next)
     {
         next = block->next;
@@ -675,6 +703,7 @@
 #ifdef DYNAMIC_BLOCK_ALLOC_CHECK
     CheckMemory();
 #endif
+    SEM_POST(&alloc_mutex);
 }
 
 template<class type, int baseBlockSize, int minBlockSize>
@@ -682,7 +711,7 @@
 {
     int numEmptyBaseBlocks;
     idDynamicBlock<type> *block;
-
+    SEM_WAIT((semaphore_t *)&alloc_mutex);
     numEmptyBaseBlocks = 0;
     for (block = firstBlock; block != NULL; block = block->next)
     {
@@ -691,6 +720,8 @@
             numEmptyBaseBlocks++;
         }
     }
+    SEM_POST((semaphore_t *)&alloc_mutex);
+
     return numEmptyBaseBlocks;
 }
 
@@ -699,21 +730,23 @@
 {
     idDynamicBlock<type> *block;
 
-    numAllocs++;
+    __sync_fetch_and_add(&numAllocs, 1);
 
     if (num <= 0)
     {
         return NULL;
     }
-
+    SEM_WAIT(&alloc_mutex);
     block = AllocInternal(num);
     if (block == NULL)
     {
+        SEM_POST(&alloc_mutex);
         return NULL;
     }
     block = ResizeInternal(block, num);
     if (block == NULL)
     {
+        SEM_POST(&alloc_mutex);
         return NULL;
     }
 
@@ -724,6 +757,8 @@
     numUsedBlocks++;
     usedBlockMemory += block->GetSize();
 
+    SEM_POST(&alloc_mutex);
+
     return block->GetMemory();
 }
 
@@ -731,7 +766,7 @@
 type *idDynamicBlockAlloc<type, baseBlockSize, minBlockSize>::Resize(type *ptr, const int num)
 {
 
-    numResizes++;
+    __sync_fetch_and_add(&numResizes, 1);
 
     if (ptr == NULL)
     {
@@ -746,11 +781,14 @@
 
     idDynamicBlock<type> *block = (idDynamicBlock<type> *)(((byte *) ptr) - (int)sizeof(idDynamicBlock<type>));
 
+    SEM_WAIT(&alloc_mutex);
+
     usedBlockMemory -= block->GetSize();
 
     block = ResizeInternal(block, num);
     if (block == NULL)
     {
+        SEM_POST(&alloc_mutex);
         return NULL;
     }
 
@@ -760,6 +798,8 @@
 
     usedBlockMemory += block->GetSize();
 
+    SEM_POST(&alloc_mutex);
+
     return block->GetMemory();
 }
 
@@ -767,7 +807,7 @@
 void idDynamicBlockAlloc<type, baseBlockSize, minBlockSize>::Free(type *ptr)
 {
 
-    numFrees++;
+    __sync_fetch_and_add(&numFrees, 1);
 
     if (ptr == NULL)
     {
@@ -776,6 +816,8 @@
 
     idDynamicBlock<type> *block = (idDynamicBlock<type> *)(((byte *) ptr) - (int)sizeof(idDynamicBlock<type>));
 
+    SEM_WAIT(&alloc_mutex);
+
     numUsedBlocks--;
     usedBlockMemory -= block->GetSize();
 
@@ -784,6 +826,7 @@
 #ifdef DYNAMIC_BLOCK_ALLOC_CHECK
     CheckMemory();
 #endif
+    SEM_POST(&alloc_mutex);
 }
 
 template<class type, int baseBlockSize, int minBlockSize>
diff -NEaurb neo/idlib/Lexer.cpp neo/idlib/Lexer.cpp
--- neo/idlib/Lexer.cpp	2013-08-14 01:47:53 +0000
+++ neo/idlib/Lexer.cpp	2013-08-13 03:29:19 +0000
@@ -931,7 +931,7 @@
 int idLexer::ReadPunctuation(idToken *token)
 {
     int l, n, i;
-    char *p;
+    const char *p;
     const punctuation_t *punc;
 
 #ifdef PUNCTABLE
diff -NEaurb neo/idlib/Str.cpp neo/idlib/Str.cpp
--- neo/idlib/Str.cpp	2013-08-14 01:47:53 +0000
+++ neo/idlib/Str.cpp	2013-08-13 14:21:29 +0000
@@ -1300,7 +1300,6 @@
 int idStr::Icmp(const char *s1, const char *s2)
 {
     int c1, c2, d;
-
     do
     {
         c1 = *s1++;
diff -NEaurb neo/idlib/Token.cpp neo/idlib/Token.cpp
--- neo/idlib/Token.cpp	2013-08-14 01:47:53 +0000
+++ neo/idlib/Token.cpp	2013-08-13 15:32:11 +0000
@@ -118,7 +118,7 @@
                 }
             }
         }
-        intvalue = idMath::Ftol(floatvalue);
+        intvalue = idMath::Ftoi(floatvalue);
     }
     else if (subtype & TT_DECIMAL)
     {
diff -NEaurb neo/idlib/bv/Frustum.cpp neo/idlib/bv/Frustum.cpp
--- neo/idlib/bv/Frustum.cpp	2013-08-14 01:47:54 +0000
+++ neo/idlib/bv/Frustum.cpp	2013-08-13 15:43:53 +0000
@@ -1421,21 +1421,19 @@
     {
         return false;
     }
-
     bestAxis = 0;
     bestValue = idMath::Fabs(box.GetAxis()[0] * dir);
+
     for (i = 1; i < 3; i++)
     {
         value = idMath::Fabs(box.GetAxis()[i] * dir);
+
         if (value * box.GetExtents()[bestAxis] * box.GetExtents()[bestAxis] < bestValue * box.GetExtents()[i] * box.GetExtents()[i])
         {
             bestValue = value;
             bestAxis = i;
         }
     }
-
-#if 1
-
     int j, minX, minY, maxY, minZ, maxZ;
     idVec3 points[8];
 
@@ -1500,85 +1498,6 @@
     this->dUp = Max(idMath::Fabs(points[minZ].z / points[minZ].x), idMath::Fabs(points[maxZ].z / points[maxZ].x)) * dFar;
     this->invFar = 1.0f / dFar;
 
-#elif 1
-
-    int j;
-    float f, x;
-    idBounds b;
-    idVec3 points[8];
-
-    for (j = 0; j < 2; j++)
-    {
-
-        axis[0] = dir;
-        axis[1] = box.GetAxis()[bestAxis] - (box.GetAxis()[bestAxis] * axis[0]) * axis[0];
-        axis[1].Normalize();
-        axis[2].Cross(axis[0], axis[1]);
-
-        BoxToPoints((box.GetCenter() - projectionOrigin) * axis.Transpose(), box.GetExtents(), box.GetAxis() * axis.Transpose(), points);
-
-        b.Clear();
-        for (i = 0; i < 8; i++)
-        {
-            x = points[i].x;
-            if (x <= 1.0f)
-            {
-                return false;
-            }
-            f = 1.0f / x;
-            points[i].y *= f;
-            points[i].z *= f;
-            b.AddPoint(points[i]);
-        }
-
-        if (j == 0)
-        {
-            dir += idMath::Tan16(0.5f * (idMath::ATan16(b[1][1]) + idMath::ATan16(b[0][1]))) * axis[1];
-            dir += idMath::Tan16(0.5f * (idMath::ATan16(b[1][2]) + idMath::ATan16(b[0][2]))) * axis[2];
-            dir.Normalize();
-        }
-    }
-
-    this->origin = projectionOrigin;
-    this->dNear = b[0][0];
-    this->dFar = dFar;
-    this->dLeft = Max(idMath::Fabs(b[0][1]), idMath::Fabs(b[1][1])) * dFar;
-    this->dUp = Max(idMath::Fabs(b[0][2]), idMath::Fabs(b[1][2])) * dFar;
-    this->invFar = 1.0f / dFar;
-
-#else
-
-    float dist;
-    idVec3 org;
-
-    axis[0] = dir;
-    axis[1] = box.GetAxis()[bestAxis] - (box.GetAxis()[bestAxis] * axis[0]) * axis[0];
-    axis[1].Normalize();
-    axis[2].Cross(axis[0], axis[1]);
-
-    for (i = 0; i < 3; i++)
-    {
-        dist[i] = idMath::Fabs(box.GetExtents()[0] * (axis[i] * box.GetAxis()[0])) +
-                  idMath::Fabs(box.GetExtents()[1] * (axis[i] * box.GetAxis()[1])) +
-                  idMath::Fabs(box.GetExtents()[2] * (axis[i] * box.GetAxis()[2]));
-    }
-
-    dist[0] = axis[0] * (box.GetCenter() - projectionOrigin) - dist[0];
-    if (dist[0] <= 1.0f)
-    {
-        return false;
-    }
-    float invDist = 1.0f / dist[0];
-
-    this->origin = projectionOrigin;
-    this->dNear = dist[0];
-    this->dFar = dFar;
-    this->dLeft = dist[1] * invDist * dFar;
-    this->dUp = dist[2] * invDist * dFar;
-    this->invFar = 1.0f / dFar;
-
-#endif
-
     return true;
 }
 
diff -NEaurb neo/idlib/bv/Sphere.cpp neo/idlib/bv/Sphere.cpp
--- neo/idlib/bv/Sphere.cpp	2013-08-14 01:47:54 +0000
+++ neo/idlib/bv/Sphere.cpp	2013-08-13 03:29:20 +0000
@@ -29,7 +29,6 @@
 #include "../precompiled.h"
 #pragma hdrstop
 
-
 idSphere sphere_zero(vec3_zero, 0.0f);
 
 
diff -NEaurb neo/idlib/containers/HashIndex.h neo/idlib/containers/HashIndex.h
--- neo/idlib/containers/HashIndex.h	2013-08-14 01:47:55 +0000
+++ neo/idlib/containers/HashIndex.h	2013-08-13 14:35:23 +0000
@@ -194,7 +194,6 @@
         memcpy(hash, other.hash, hashSize * sizeof(hash[0]));
         memcpy(indexChain, other.indexChain, indexSize * sizeof(indexChain[0]));
     }
-
     return *this;
 }
 
diff -NEaurb neo/idlib/containers/StrPool.h neo/idlib/containers/StrPool.h
--- neo/idlib/containers/StrPool.h	2013-08-14 01:47:55 +0000
+++ neo/idlib/containers/StrPool.h	2013-08-14 02:14:26 +0000
@@ -38,7 +38,6 @@
 */
 
 class idStrPool;
-
 class idPoolStr : public idStr
 {
     friend class idStrPool;
diff -NEaurb neo/idlib/geometry/Surface_Polytope.cpp neo/idlib/geometry/Surface_Polytope.cpp
--- neo/idlib/geometry/Surface_Polytope.cpp	2013-08-14 01:47:54 +0000
+++ neo/idlib/geometry/Surface_Polytope.cpp	2013-08-13 11:34:19 +0000
@@ -48,7 +48,6 @@
 
     for (i = 0; i < numPlanes; i++)
     {
-
         w.BaseForPlane(planes[i]);
 
         for (j = 0; j < numPlanes; j++)
@@ -57,11 +56,13 @@
             {
                 continue;
             }
+
             if (!w.ClipInPlace(-planes[j], ON_EPSILON, true))
             {
                 break;
             }
         }
+
         if (!w.GetNumPoints())
         {
             continue;
@@ -69,13 +70,14 @@
 
         for (j = 0; j < w.GetNumPoints(); j++)
         {
-            for (k = 0; k < verts.Num(); j++)
+            for (k = 0; k < verts.Num(); k++)
             {
                 if (verts[k].xyz.Compare(w[j].ToVec3(), POLYTOPE_VERTEX_EPSILON))
                 {
                     break;
                 }
             }
+
             if (k >= verts.Num())
             {
                 newVert.xyz = w[j].ToVec3();
@@ -91,7 +93,6 @@
             indexes.Append(windingVerts[j]);
         }
     }
-
     GenerateEdgeIndexes();
 }
 
diff -NEaurb neo/idlib/geometry/Surface_SweptSpline.cpp neo/idlib/geometry/Surface_SweptSpline.cpp
--- neo/idlib/geometry/Surface_SweptSpline.cpp	2013-08-14 01:47:54 +0000
+++ neo/idlib/geometry/Surface_SweptSpline.cpp	2013-08-13 10:25:06 +0000
@@ -168,7 +168,7 @@
 
     // calculate the points and first derivatives for the swept spline
     totalTime = sweptSpline->GetTime(sweptSpline->GetNumValues() - 1) - sweptSpline->GetTime(0) + sweptSpline->GetCloseTime();
-    sweptSplineDiv = sweptSpline->GetBoundaryType() == idCurve_Spline<idVec3>::BT_CLOSED ? sweptSplineSubdivisions : sweptSplineSubdivisions - 1;
+    sweptSplineDiv = sweptSpline->GetBoundaryType() == idCurve_Spline<idVec4>::BT_CLOSED ? sweptSplineSubdivisions : sweptSplineSubdivisions - 1;
     baseOffset = (splineSubdivisions-1) * sweptSplineSubdivisions;
     for (i = 0; i < sweptSplineSubdivisions; i++)
     {
@@ -182,7 +182,7 @@
 
     // sweep the spline
     totalTime = spline->GetTime(spline->GetNumValues() - 1) - spline->GetTime(0) + spline->GetCloseTime();
-    splineDiv = spline->GetBoundaryType() == idCurve_Spline<idVec3>::BT_CLOSED ? splineSubdivisions : splineSubdivisions - 1;
+    splineDiv = spline->GetBoundaryType() == idCurve_Spline<idVec4>::BT_CLOSED ? splineSubdivisions : splineSubdivisions - 1;
     splineMat.Identity();
     for (i = 0; i < splineSubdivisions; i++)
     {
diff -NEaurb neo/idlib/hashing/MD5.cpp neo/idlib/hashing/MD5.cpp
--- neo/idlib/hashing/MD5.cpp	2013-08-14 01:47:54 +0000
+++ neo/idlib/hashing/MD5.cpp	2013-08-13 03:29:20 +0000
@@ -260,7 +260,7 @@
 
     MD5_Transform(ctx->state, (unsigned int *) ctx->in);
     memcpy(digest, ctx->state, 16);
-    memset(ctx, 0, sizeof(ctx));            /* In case it's sensitive */
+    memset(ctx, 0, sizeof(*ctx));            /* In case it's sensitive */
 }
 
 /*
diff -NEaurb neo/idlib/math/Math.h neo/idlib/math/Math.h
--- neo/idlib/math/Math.h	2013-08-14 01:47:55 +0000
+++ neo/idlib/math/Math.h	2013-08-13 15:43:53 +0000
@@ -56,13 +56,13 @@
 #define DEG2RAD(a)				( (a) * idMath::M_DEG2RAD )
 #define RAD2DEG(a)				( (a) * idMath::M_RAD2DEG )
 
-#define SEC2MS(t)				( idMath::FtoiFast( (t) * idMath::M_SEC2MS ) )
+#define SEC2MS(t)				( idMath::Ftoi( (t) * idMath::M_SEC2MS ) )
 #define MS2SEC(t)				( (t) * idMath::M_MS2SEC )
 
-#define	ANGLE2SHORT(x)			( idMath::FtoiFast( (x) * 65536.0f / 360.0f ) & 65535 )
+#define	ANGLE2SHORT(x)			( idMath::Ftoi( (x) * 65536.0f / 360.0f ) & 65535 )
 #define	SHORT2ANGLE(x)			( (x) * ( 360.0f / 65536.0f ) )
 
-#define	ANGLE2BYTE(x)			( idMath::FtoiFast( (x) * 256.0f / 360.0f ) & 255 )
+#define	ANGLE2BYTE(x)			( idMath::Ftoi( (x) * 256.0f / 360.0f ) & 255 )
 #define	BYTE2ANGLE(x)			( (x) * ( 360.0f / 256.0f ) )
 
 #define FLOATSIGNBITSET(f)		((*(const unsigned long *)&(f)) >> 31)
@@ -135,7 +135,6 @@
 class idMath
 {
 public:
-
     static void					Init(void);
 
     static float				RSqrt(float x);			// reciprocal square root, returns huge number when x == 0.0
@@ -212,9 +211,6 @@
     static float				Ceil(float f);			// returns the smallest integer that is greater than or equal to the given value
     static float				Rint(float f);			// returns the nearest integer
     static int					Ftoi(float f);			// float to int conversion
-    static int					FtoiFast(float f);		// fast float to int conversion but uses current FPU round mode (default round nearest)
-    static unsigned long		Ftol(float f);			// float to long conversion
-    static unsigned long		FtolFast(float);			// fast float to long conversion but uses current FPU round mode (default round nearest)
 
     static signed char			ClampChar(int i);
     static signed short			ClampShort(int i);
@@ -270,7 +266,6 @@
 
 ID_INLINE float idMath::RSqrt(float x)
 {
-
     long i;
     float y, r;
 
@@ -284,7 +279,6 @@
 
 ID_INLINE float idMath::InvSqrt16(float x)
 {
-
     dword a = ((union _flint*)(&x))->i;
     union _flint seed;
 
@@ -299,7 +293,6 @@
 
 ID_INLINE float idMath::InvSqrt(float x)
 {
-
     dword a = ((union _flint*)(&x))->i;
     union _flint seed;
 
@@ -357,7 +350,6 @@
     {
         a -= floorf(a / TWO_PI) * TWO_PI;
     }
-#if 1
     if (a < PI)
     {
         if (a > HALF_PI)
@@ -376,13 +368,6 @@
             a = PI - a;
         }
     }
-#else
-    a = PI - a;
-    if (fabs(a) >= HALF_PI)
-    {
-        a = ((a < 0.0f) ? -PI : PI) - a;
-    }
-#endif
     s = a * a;
     return a * (((((-2.39e-08f * s + 2.7526e-06f) * s - 1.98409e-04f) * s + 8.3333315e-03f) * s - 1.666666664e-01f) * s + 1.0f);
 }
@@ -405,7 +390,6 @@
     {
         a -= floorf(a / TWO_PI) * TWO_PI;
     }
-#if 1
     if (a < PI)
     {
         if (a > HALF_PI)
@@ -431,18 +415,6 @@
             d = -1.0f;
         }
     }
-#else
-    a = PI - a;
-    if (fabs(a) >= HALF_PI)
-    {
-        a = ((a < 0.0f) ? -PI : PI) - a;
-        d = 1.0f;
-    }
-    else
-    {
-        d = -1.0f;
-    }
-#endif
     s = a * a;
     return d * (((((-2.605e-07f * s + 2.47609e-05f) * s - 1.3888397e-03f) * s + 4.16666418e-02f) * s - 4.999999963e-01f) * s + 1.0f);
 }
@@ -478,7 +450,6 @@
     {
         a -= floorf(a / idMath::TWO_PI) * idMath::TWO_PI;
     }
-#if 1
     if (a < PI)
     {
         if (a > HALF_PI)
@@ -504,18 +475,6 @@
             d = -1.0f;
         }
     }
-#else
-    a = PI - a;
-    if (fabs(a) >= HALF_PI)
-    {
-        a = ((a < 0.0f) ? -PI : PI) - a;
-        d = 1.0f;
-    }
-    else
-    {
-        d = -1.0f;
-    }
-#endif
     t = a * a;
     s = a * (((((-2.39e-08f * t + 2.7526e-06f) * t - 1.98409e-04f) * t + 8.3333315e-03f) * t - 1.666666664e-01f) * t + 1.0f);
     c = d * (((((-2.605e-07f * t + 2.47609e-05f) * t - 1.3888397e-03f) * t + 4.16666418e-02f) * t - 4.999999963e-01f) * t + 1.0f);
@@ -553,7 +512,6 @@
     {
         a -= floorf(a / PI) * PI;
     }
-#if 1
     if (a < HALF_PI)
     {
         if (a > ONEFOURTH_PI)
@@ -579,18 +537,6 @@
             reciprocal = true;
         }
     }
-#else
-    a = HALF_PI - a;
-    if (fabs(a) >= ONEFOURTH_PI)
-    {
-        a = ((a < 0.0f) ? -HALF_PI : HALF_PI) - a;
-        reciprocal = false;
-    }
-    else
-    {
-        reciprocal = true;
-    }
-#endif
     s = a * a;
     s = a * ((((((9.5168091e-03f * s + 2.900525e-03f) * s + 2.45650893e-02f) * s + 5.33740603e-02f) * s + 1.333923995e-01f) * s + 3.333314036e-01f) * s + 1.0f);
     if (reciprocal)
@@ -803,19 +749,11 @@
     float x, x2, y, p, q;
 
     x = f * 1.44269504088896340f;		// multiply with ( 1 / log( 2 ) )
-#if 1
     i = *reinterpret_cast<int *>(&x);
     s = (i >> IEEE_FLT_SIGN_BIT);
     e = ((i >> IEEE_FLT_MANTISSA_BITS) & ((1 << IEEE_FLT_EXPONENT_BITS) - 1)) - IEEE_FLT_EXPONENT_BIAS;
     m = (i & ((1 << IEEE_FLT_MANTISSA_BITS) - 1)) | (1 << IEEE_FLT_MANTISSA_BITS);
     i = ((m >> (IEEE_FLT_MANTISSA_BITS - e)) & ~(e >> 31)) ^ s;
-#else
-    i = (int) x;
-    if (x < 0.0f)
-    {
-        i--;
-    }
-#endif
     exponent = (i + IEEE_FLT_EXPONENT_BIAS) << IEEE_FLT_MANTISSA_BITS;
     y = *reinterpret_cast<float *>(&exponent);
     x -= (float) i;
@@ -973,72 +911,11 @@
 
 ID_INLINE int idMath::Ftoi(float f)
 {
-    return (int) f;
-}
-
-ID_INLINE int idMath::FtoiFast(float f)
-{
-#ifdef _WIN32
-    int i;
-    __asm fld		f
-    __asm fistp		i		// use default rouding mode (round nearest)
-    return i;
-#elif 0						// round chop (C/C++ standard)
-    int i, s, e, m, shift;
-    i = *reinterpret_cast<int *>(&f);
-    s = i >> IEEE_FLT_SIGN_BIT;
-    e = ((i >> IEEE_FLT_MANTISSA_BITS) & ((1 << IEEE_FLT_EXPONENT_BITS) - 1)) - IEEE_FLT_EXPONENT_BIAS;
-    m = (i & ((1 << IEEE_FLT_MANTISSA_BITS) - 1)) | (1 << IEEE_FLT_MANTISSA_BITS);
-    shift = e - IEEE_FLT_MANTISSA_BITS;
-    return ((((m >> -shift) | (m << shift)) & ~(e >> 31)) ^ s) - s;
-//#elif defined( __i386__ )
-#elif 0
-    int i = 0;
-    __asm__ __volatile__(
-        "fld %1\n" \
-        "fistp %0\n" \
-        : "=m"(i) \
-        : "m"(f));
-    return i;
-#else
-    return (int) f;
-#endif
-}
-
-ID_INLINE unsigned long idMath::Ftol(float f)
-{
-    return (unsigned long) f;
-}
-
-ID_INLINE unsigned long idMath::FtolFast(float f)
-{
-#ifdef _WIN32
-    // FIXME: this overflows on 31bits still .. same as FtoiFast
-    unsigned long i;
-    __asm fld		f
-    __asm fistp		i		// use default rouding mode (round nearest)
-    return i;
-#elif 0						// round chop (C/C++ standard)
-    int i, s, e, m, shift;
-    i = *reinterpret_cast<int *>(&f);
-    s = i >> IEEE_FLT_SIGN_BIT;
-    e = ((i >> IEEE_FLT_MANTISSA_BITS) & ((1 << IEEE_FLT_EXPONENT_BITS) - 1)) - IEEE_FLT_EXPONENT_BIAS;
-    m = (i & ((1 << IEEE_FLT_MANTISSA_BITS) - 1)) | (1 << IEEE_FLT_MANTISSA_BITS);
-    shift = e - IEEE_FLT_MANTISSA_BITS;
-    return ((((m >> -shift) | (m << shift)) & ~(e >> 31)) ^ s) - s;
-//#elif defined( __i386__ )
-#elif 0
-    // for some reason, on gcc I need to make sure i == 0 before performing a fistp
-    int i = 0;
-    __asm__ __volatile__(
-        "fld %1\n" \
-        "fistp %0\n" \
-        : "=m"(i) \
-        : "m"(f));
-    return i;
-#else
-    return (unsigned long) f;
-#endif
+	// If a converted result is larger than the maximum signed doubleword integer,
+	// the floating-point invalid exception is raised, and if this exception is masked,
+	// the indefinite integer value (80000000H) is returned.
+	__m128 x = _mm_load_ss(&f);
+	return _mm_cvttss_si32(x);
 }
 
 ID_INLINE signed char idMath::ClampChar(int i)
diff -NEaurb neo/idlib/math/Matrix.cpp neo/idlib/math/Matrix.cpp
--- neo/idlib/math/Matrix.cpp	2013-08-14 01:47:54 +0000
+++ neo/idlib/math/Matrix.cpp	2013-08-14 02:14:26 +0000
@@ -75,7 +75,6 @@
 */
 bool idMat2::InverseFastSelf(void)
 {
-#if 1
     // 2+4 = 6 multiplications
     //		 1 division
     double det, invDet, a;
@@ -86,7 +85,6 @@
     {
         return false;
     }
-
     invDet = 1.0f / det;
 
     a = mat[0][0];
@@ -96,32 +94,6 @@
     mat[1][1] =   a * invDet;
 
     return true;
-#else
-    // 2*4 = 8 multiplications
-    //		 2 division
-    float *mat = reinterpret_cast<float *>(this);
-    double d, di;
-    float s;
-
-    di = mat[0];
-    s = di;
-    mat[0*2+0] = d = 1.0f / di;
-    mat[0*2+1] *= d;
-    d = -d;
-    mat[1*2+0] *= d;
-    d = mat[1*2+0] * di;
-    mat[1*2+1] += mat[0*2+1] * d;
-    di = mat[1*2+1];
-    s *= di;
-    mat[1*2+1] = d = 1.0f / di;
-    mat[1*2+0] *= d;
-    d = -d;
-    mat[0*2+1] *= d;
-    d = mat[0*2+1] * di;
-    mat[0*2+0] += mat[1*2+0] * d;
-
-    return (s != 0.0f && !FLOAT_IS_NAN(s));
-#endif
 }
 
 /*
@@ -410,7 +382,6 @@
 */
 bool idMat3::InverseFastSelf(void)
 {
-#if 1
     // 18+3+9 = 30 multiplications
     //			 1 division
     idMat3 inverse;
@@ -426,7 +397,6 @@
     {
         return false;
     }
-
     invDet = 1.0f / det;
 
     inverse[0][1] = mat[0][2] * mat[2][1] - mat[0][1] * mat[2][2];
@@ -449,121 +419,6 @@
     mat[2][2] = inverse[2][2] * invDet;
 
     return true;
-#elif 0
-    // 3*10 = 30 multiplications
-    //		   3 divisions
-    float *mat = reinterpret_cast<float *>(this);
-    float s;
-    double d, di;
-
-    di = mat[0];
-    s = di;
-    mat[0] = d = 1.0f / di;
-    mat[1] *= d;
-    mat[2] *= d;
-    d = -d;
-    mat[3] *= d;
-    mat[6] *= d;
-    d = mat[3] * di;
-    mat[4] += mat[1] * d;
-    mat[5] += mat[2] * d;
-    d = mat[6] * di;
-    mat[7] += mat[1] * d;
-    mat[8] += mat[2] * d;
-    di = mat[4];
-    s *= di;
-    mat[4] = d = 1.0f / di;
-    mat[3] *= d;
-    mat[5] *= d;
-    d = -d;
-    mat[1] *= d;
-    mat[7] *= d;
-    d = mat[1] * di;
-    mat[0] += mat[3] * d;
-    mat[2] += mat[5] * d;
-    d = mat[7] * di;
-    mat[6] += mat[3] * d;
-    mat[8] += mat[5] * d;
-    di = mat[8];
-    s *= di;
-    mat[8] = d = 1.0f / di;
-    mat[6] *= d;
-    mat[7] *= d;
-    d = -d;
-    mat[2] *= d;
-    mat[5] *= d;
-    d = mat[2] * di;
-    mat[0] += mat[6] * d;
-    mat[1] += mat[7] * d;
-    d = mat[5] * di;
-    mat[3] += mat[6] * d;
-    mat[4] += mat[7] * d;
-
-    return (s != 0.0f && !FLOAT_IS_NAN(s));
-#else
-    //	4*2+4*4 = 24 multiplications
-    //		2*1 =  2 divisions
-    idMat2 r0;
-    float r1[2], r2[2], r3;
-    float det, invDet;
-    float *mat = reinterpret_cast<float *>(this);
-
-    // r0 = m0.Inverse();	// 2x2
-    det = mat[0*3+0] * mat[1*3+1] - mat[0*3+1] * mat[1*3+0];
-
-    if (idMath::Fabs(det) < MATRIX_INVERSE_EPSILON)
-    {
-        return false;
-    }
-
-    invDet = 1.0f / det;
-
-    r0[0][0] =   mat[1*3+1] * invDet;
-    r0[0][1] = - mat[0*3+1] * invDet;
-    r0[1][0] = - mat[1*3+0] * invDet;
-    r0[1][1] =   mat[0*3+0] * invDet;
-
-    // r1 = r0 * m1;		// 2x1 = 2x2 * 2x1
-    r1[0] = r0[0][0] * mat[0*3+2] + r0[0][1] * mat[1*3+2];
-    r1[1] = r0[1][0] * mat[0*3+2] + r0[1][1] * mat[1*3+2];
-
-    // r2 = m2 * r1;		// 1x1 = 1x2 * 2x1
-    r2[0] = mat[2*3+0] * r1[0] + mat[2*3+1] * r1[1];
-
-    // r3 = r2 - m3;		// 1x1 = 1x1 - 1x1
-    r3 = r2[0] - mat[2*3+2];
-
-    // r3.InverseSelf();
-    if (idMath::Fabs(r3) < MATRIX_INVERSE_EPSILON)
-    {
-        return false;
-    }
-
-    r3 = 1.0f / r3;
-
-    // r2 = m2 * r0;		// 1x2 = 1x2 * 2x2
-    r2[0] = mat[2*3+0] * r0[0][0] + mat[2*3+1] * r0[1][0];
-    r2[1] = mat[2*3+0] * r0[0][1] + mat[2*3+1] * r0[1][1];
-
-    // m2 = r3 * r2;		// 1x2 = 1x1 * 1x2
-    mat[2*3+0] = r3 * r2[0];
-    mat[2*3+1] = r3 * r2[1];
-
-    // m0 = r0 - r1 * m2;	// 2x2 - 2x1 * 1x2
-    mat[0*3+0] = r0[0][0] - r1[0] * mat[2*3+0];
-    mat[0*3+1] = r0[0][1] - r1[0] * mat[2*3+1];
-    mat[1*3+0] = r0[1][0] - r1[1] * mat[2*3+0];
-    mat[1*3+1] = r0[1][1] - r1[1] * mat[2*3+1];
-
-    // m1 = r1 * r3;		// 2x1 = 2x1 * 1x1
-    mat[0*3+2] = r1[0] * r3;
-    mat[1*3+2] = r1[1] * r3;
-
-    // m3 = -r3;
-    mat[2*3+2] = -r3;
-
-    return true;
-#endif
 }
 
 /*
@@ -3187,8 +3042,8 @@
     {
         return false;
     }
-
     ptr1 = mat;
+
     for (int i = 0; i < numRows; i++)
     {
         for (int j = 0; j < numColumns; j++)
@@ -3225,33 +3080,36 @@
     {
         return false;
     }
-
     ptr1 = mat;
+
     for (int i = 0; i < numRows; i++)
     {
         for (int j = 0; j < numColumns; j++)
         {
             ptr2 = mat + j;
             sum = ptr1[0] * ptr2[0] - (float)(i == j);
+
             for (int n = 1; n < numColumns; n++)
             {
                 ptr2 += numColumns;
                 sum += ptr1[n] * ptr2[0];
             }
+
             if (idMath::Fabs(sum) > epsilon)
             {
                 return false;
             }
         }
         ptr1 += numColumns;
-
         ptr2 = mat + i;
         sum = ptr2[0] * ptr2[0] - 1.0f;
+
         for (i = 1; i < numRows; i++)
         {
             ptr2 += numColumns;
             sum += ptr2[i] * ptr2[i];
         }
+
         if (idMath::Fabs(sum) > epsilon)
         {
             return false;
diff -NEaurb neo/idlib/math/Matrix.h neo/idlib/math/Matrix.h
--- neo/idlib/math/Matrix.h	2013-08-14 01:47:55 +0000
+++ neo/idlib/math/Matrix.h	2013-08-14 02:30:43 +0000
@@ -32,7 +32,7 @@
 /*
 ===============================================================================
 
-  Matrix classes, all matrices are row-major except idMat3
+Matrix classes, all matrices are row-major except idMat3
 
 ===============================================================================
 */
@@ -344,7 +344,7 @@
     idMat2 invMat;
 
     invMat = *this;
-    int r = invMat.InverseSelf();
+	int r id_attribute((unused)) = invMat.InverseSelf();
     assert(r);
     return invMat;
 }
@@ -354,7 +354,7 @@
     idMat2 invMat;
 
     invMat = *this;
-    int r = invMat.InverseFastSelf();
+	int r id_attribute((unused)) = invMat.InverseFastSelf();
     assert(r);
     return invMat;
 }
@@ -835,7 +835,7 @@
     idMat3 invMat;
 
     invMat = *this;
-    int r = invMat.InverseSelf();
+	int r id_attribute((unused)) = invMat.InverseSelf();
     assert(r);
     return invMat;
 }
@@ -845,7 +845,7 @@
     idMat3 invMat;
 
     invMat = *this;
-    int r = invMat.InverseFastSelf();
+	int r id_attribute((unused)) = invMat.InverseFastSelf();
     assert(r);
     return invMat;
 }
@@ -1351,7 +1351,7 @@
     idMat4 invMat;
 
     invMat = *this;
-    int r = invMat.InverseSelf();
+	int r id_attribute((unused)) = invMat.InverseSelf();
     assert(r);
     return invMat;
 }
@@ -1361,7 +1361,7 @@
     idMat4 invMat;
 
     invMat = *this;
-    int r = invMat.InverseFastSelf();
+	int r id_attribute((unused)) = invMat.InverseFastSelf();
     assert(r);
     return invMat;
 }
@@ -1762,7 +1762,7 @@
     idMat5 invMat;
 
     invMat = *this;
-    int r = invMat.InverseSelf();
+	int r id_attribute((unused)) = invMat.InverseSelf();
     assert(r);
     return invMat;
 }
@@ -1772,7 +1772,7 @@
     idMat5 invMat;
 
     invMat = *this;
-    int r = invMat.InverseFastSelf();
+	int r id_attribute((unused)) = invMat.InverseFastSelf();
     assert(r);
     return invMat;
 }
@@ -2226,7 +2226,7 @@
     idMat6 invMat;
 
     invMat = *this;
-    int r = invMat.InverseSelf();
+	int r id_attribute((unused)) = invMat.InverseSelf();
     assert(r);
     return invMat;
 }
@@ -2236,7 +2236,7 @@
     idMat6 invMat;
 
     invMat = *this;
-    int r = invMat.InverseFastSelf();
+	int r id_attribute((unused)) = invMat.InverseFastSelf();
     assert(r);
     return invMat;
 }
@@ -3196,7 +3196,7 @@
 
     invMat.SetTempSize(numRows, numColumns);
     memcpy(invMat.mat, mat, numRows * numColumns * sizeof(float));
-    int r = invMat.InverseSelf();
+	int r id_attribute((unused)) = invMat.InverseSelf();
     assert(r);
     return invMat;
 }
@@ -3228,6 +3228,7 @@
     default:
         return InverseSelfGeneric();
     }
+	return false;
 }
 
 ID_INLINE idMatX idMatX::InverseFast(void) const
@@ -3236,14 +3237,13 @@
 
     invMat.SetTempSize(numRows, numColumns);
     memcpy(invMat.mat, mat, numRows * numColumns * sizeof(float));
-    int r = invMat.InverseFastSelf();
+	int r id_attribute((unused)) = invMat.InverseFastSelf();
     assert(r);
     return invMat;
 }
 
 ID_INLINE bool idMatX::InverseFastSelf(void)
 {
-
     assert(numRows == numColumns);
 
     switch (numRows)
diff -NEaurb neo/idlib/math/Simd.cpp neo/idlib/math/Simd.cpp
--- neo/idlib/math/Simd.cpp	2013-08-14 01:47:54 +0000
+++ neo/idlib/math/Simd.cpp	2013-08-13 16:27:25 +0000
@@ -70,9 +70,7 @@
 
     if (forceGeneric)
     {
-
         newProcessor = generic;
-
     }
     else
     {
diff -NEaurb neo/idlib/math/Simd_Generic.cpp neo/idlib/math/Simd_Generic.cpp
--- neo/idlib/math/Simd_Generic.cpp	2013-08-14 01:47:54 +0000
+++ neo/idlib/math/Simd_Generic.cpp	2013-08-13 15:48:36 +0000
@@ -342,8 +342,6 @@
 */
 void VPCALL idSIMD_Generic::Dot(float &dot, const float *src1, const float *src2, const int count)
 {
-#if 1
-
     switch (count)
     {
     case 0:
@@ -413,16 +411,6 @@
         dot = sum;
     }
     }
-
-#else
-
-    dot = 0.0f;
-    for (i = 0; i < count; i++)
-    {
-        dot += src1[i] * src2[i];
-    }
-
-#endif
 }
 
 /*
@@ -1974,8 +1962,6 @@
 */
 void VPCALL idSIMD_Generic::MatX_LowerTriangularSolve(const idMatX &L, float *x, const float *b, const int n, int skip)
 {
-#if 1
-
     int nc;
     const float *lptr;
 
@@ -2126,24 +2112,6 @@
         lptr += nc;
     }
 
-#else
-
-    int i, j;
-    const float *lptr;
-    double sum;
-
-    for (i = skip; i < n; i++)
-    {
-        sum = b[i];
-        lptr = L[i];
-        for (j = 0; j < i; j++)
-        {
-            sum -= lptr[j] * x[j];
-        }
-        x[i] = sum;
-    }
-
-#endif
 }
 
 /*
@@ -2157,8 +2125,6 @@
 */
 void VPCALL idSIMD_Generic::MatX_LowerTriangularSolveTranspose(const idMatX &L, float *x, const float *b, const int n)
 {
-#if 1
-
     int nc;
     const float *lptr;
 
@@ -2280,25 +2246,6 @@
         x[i] = s0;
     }
 
-#else
-
-    int i, j, nc;
-    const float *ptr;
-    double sum;
-
-    nc = L.GetNumColumns();
-    for (i = n - 1; i >= 0; i--)
-    {
-        sum = b[i];
-        ptr = L[0] + i;
-        for (j = i + 1; j < n; j++)
-        {
-            sum -= ptr[j*nc] * x[j];
-        }
-        x[i] = sum;
-    }
-
-#endif
 }
 
 /*
@@ -2311,8 +2258,6 @@
 */
 bool VPCALL idSIMD_Generic::MatX_LDLTFactor(idMatX &mat, idVecX &invDiag, const int n)
 {
-#if 1
-
     int i, j, k, nc;
     float *v, *diag, *mptr;
     double s0, s1, s2, s3, sum, d;
@@ -2326,7 +2271,6 @@
     {
         return true;
     }
-
     mptr = mat[0];
 
     sum = mptr[0];
@@ -2335,7 +2279,6 @@
     {
         return false;
     }
-
     diag[0] = sum;
     invDiag[0] = d = 1.0f / sum;
 
@@ -2343,13 +2286,12 @@
     {
         return true;
     }
-
     mptr = mat[0];
+
     for (j = 1; j < n; j++)
     {
         mptr[j*nc+0] = (mptr[j*nc+0]) * d;
     }
-
     mptr = mat[1];
 
     v[0] = diag[0] * mptr[0];
@@ -2360,7 +2302,6 @@
     {
         return false;
     }
-
     mat[1][1] = sum;
     diag[1] = sum;
     invDiag[1] = d = 1.0f / sum;
@@ -2369,13 +2310,12 @@
     {
         return true;
     }
-
     mptr = mat[0];
+
     for (j = 2; j < n; j++)
     {
         mptr[j*nc+1] = (mptr[j*nc+1] - v[0] * mptr[j*nc+0]) * d;
     }
-
     mptr = mat[2];
 
     v[0] = diag[0] * mptr[0];
@@ -2388,8 +2328,8 @@
     {
         return false;
     }
-
     mat[2][2] = sum;
+
     diag[2] = sum;
     invDiag[2] = d = 1.0f / sum;
 
@@ -2397,13 +2337,12 @@
     {
         return true;
     }
-
     mptr = mat[0];
+
     for (j = 3; j < n; j++)
     {
         mptr[j*nc+2] = (mptr[j*nc+2] - v[0] * mptr[j*nc+0] - v[1] * mptr[j*nc+1]) * d;
     }
-
     mptr = mat[3];
 
     v[0] = diag[0] * mptr[0];
@@ -2418,7 +2357,6 @@
     {
         return false;
     }
-
     mat[3][3] = sum;
     diag[3] = sum;
     invDiag[3] = d = 1.0f / sum;
@@ -2427,8 +2365,8 @@
     {
         return true;
     }
-
     mptr = mat[0];
+
     for (j = 4; j < n; j++)
     {
         mptr[j*nc+3] = (mptr[j*nc+3] - v[0] * mptr[j*nc+0] - v[1] * mptr[j*nc+1] - v[2] * mptr[j*nc+2]) * d;
@@ -2436,7 +2374,6 @@
 
     for (i = 4; i < n; i++)
     {
-
         mptr = mat[i];
 
         v[0] = diag[0] * mptr[0];
@@ -2447,6 +2384,7 @@
         s2 = v[2] * mptr[2];
         v[3] = diag[3] * mptr[3];
         s3 = v[3] * mptr[3];
+
         for (k = 4; k < i-3; k += 4)
         {
             v[k+0] = diag[k+0] * mptr[k+0];
@@ -2492,8 +2430,8 @@
         {
             return true;
         }
-
         mptr = mat[i+1];
+
         for (j = i+1; j < n; j++)
         {
             s0 = mptr[0] * v[0];
@@ -2539,61 +2477,8 @@
             mptr += nc;
         }
     }
-
-    return true;
-
-#else
-
-    int i, j, k, nc;
-    float *v, *ptr, *diagPtr;
-    double d, sum;
-
-    v = (float *) _alloca16(n * sizeof(float));
-    nc = mat.GetNumColumns();
-
-    for (i = 0; i < n; i++)
-    {
-
-        ptr = mat[i];
-        diagPtr = mat[0];
-        sum = ptr[i];
-        for (j = 0; j < i; j++)
-        {
-            d = ptr[j];
-            v[j] = diagPtr[0] * d;
-            sum -= v[j] * d;
-            diagPtr += nc + 1;
-        }
-
-        if (sum == 0.0f)
-        {
-            return false;
-        }
-
-        diagPtr[0] = sum;
-        invDiag[i] = d = 1.0f / sum;
-
-        if (i + 1 >= n)
-        {
-            continue;
-        }
-
-        ptr = mat[i+1];
-        for (j = i + 1; j < n; j++)
-        {
-            sum = ptr[i];
-            for (k = 0; k < i; k++)
-            {
-                sum -= ptr[k] * v[k];
-            }
-            ptr[i] = sum * d;
-            ptr += nc;
-        }
-    }
-
     return true;
 
-#endif
 }
 
 /*
diff -NEaurb neo/idlib/math/Simd_SSE.cpp neo/idlib/math/Simd_SSE.cpp
--- neo/idlib/math/Simd_SSE.cpp	2013-08-14 02:30:43 +0000
+++ neo/idlib/math/Simd_SSE.cpp	2013-08-13 16:10:44 +0000
@@ -1143,8 +1143,6 @@
 */
 float SSE_SinZeroHalfPI(float a)
 {
-#if 1
-
     float t;
 
     assert(a >= 0.0f && a <= idMath::HALF_PI);
@@ -1168,32 +1166,7 @@
         mulss		xmm2, xmm0
         movss		t, xmm2
     }
-
-    return t;
-
-#else
-
-    float s, t;
-
-    assert(a >= 0.0f && a <= idMath::HALF_PI);
-
-    s = a * a;
-    t = -2.39e-08f;
-    t *= s;
-    t += 2.7526e-06f;
-    t *= s;
-    t += -1.98409e-04f;
-    t *= s;
-    t += 8.3333315e-03f;
-    t *= s;
-    t += -1.666666664e-01f;
-    t *= s;
-    t += 1.0f;
-    t *= a;
-
     return t;
-
-#endif
 }
 
 /*
@@ -1235,8 +1208,6 @@
 */
 float SSE_Sin(float a)
 {
-#if 1
-
     float t;
 
     __asm
@@ -1283,41 +1254,8 @@
         mulss		xmm2, xmm0
         movss		t, xmm2
     }
-
-    return t;
-
-#else
-
-    float s, t;
-
-    if ((a < 0.0f) || (a >= idMath::TWO_PI))
-    {
-        a -= floorf(a / idMath::TWO_PI) * idMath::TWO_PI;
-    }
-
-    a = idMath::PI - a;
-    if (fabs(a) >= idMath::HALF_PI)
-    {
-        a = ((a < 0.0f) ? -idMath::PI : idMath::PI) - a;
-    }
-
-    s = a * a;
-    t = -2.39e-08f;
-    t *= s;
-    t += 2.7526e-06f;
-    t *= s;
-    t += -1.98409e-04f;
-    t *= s;
-    t += 8.3333315e-03f;
-    t *= s;
-    t += -1.666666664e-01f;
-    t *= s;
-    t += 1.0f;
-    t *= a;
-
     return t;
 
-#endif
 }
 
 /*
@@ -1394,8 +1332,6 @@
 */
 float SSE_CosZeroHalfPI(float a)
 {
-#if 1
-
     float t;
 
     assert(a >= 0.0f && a <= idMath::HALF_PI);
@@ -1420,28 +1356,6 @@
 
     return t;
 
-#else
-
-    float s, t;
-
-    assert(a >= 0.0f && a <= idMath::HALF_PI);
-
-    s = a * a;
-    t = -2.605e-07f;
-    t *= s;
-    t += 2.47609e-05f;
-    t *= s;
-    t += -1.3888397e-03f;
-    t *= s;
-    t += 4.16666418e-02f;
-    t *= s;
-    t += -4.999999963e-01f;
-    t *= s;
-    t += 1.0f;
-
-    return t;
-
-#endif
 }
 
 /*
@@ -1481,8 +1395,6 @@
 */
 float SSE_Cos(float a)
 {
-#if 1
-
     float t;
 
     __asm
@@ -1532,43 +1444,6 @@
 
     return t;
 
-#else
-
-    float s, t;
-
-    if ((a < 0.0f) || (a >= idMath::TWO_PI))
-    {
-        a -= floorf(a / idMath::TWO_PI) * idMath::TWO_PI;
-    }
-
-    a = idMath::PI - a;
-    if (fabs(a) >= idMath::HALF_PI)
-    {
-        a = ((a < 0.0f) ? -idMath::PI : idMath::PI) - a;
-        d = 1.0f;
-    }
-    else
-    {
-        d = -1.0f;
-    }
-
-    s = a * a;
-    t = -2.605e-07f;
-    t *= s;
-    t += 2.47609e-05f;
-    t *= s;
-    t += -1.3888397e-03f;
-    t *= s;
-    t += 4.16666418e-02f;
-    t *= s;
-    t += -4.999999963e-01f;
-    t *= s;
-    t += 1.0f;
-    t *= d;
-
-    return t;
-
-#endif
 }
 
 /*
@@ -1795,8 +1670,6 @@
 */
 float SSE_ATanPositive(float y, float x)
 {
-#if 1
-
     float t;
 
     assert(y >= 0.0f && x >= 0.0f);
@@ -1842,49 +1715,7 @@
         addss		xmm2, xmm3
         movss		t, xmm2
     }
-
-    return t;
-
-#else
-
-    float a, d, s, t;
-
-    assert(y >= 0.0f && x >= 0.0f);
-
-    if (y > x)
-    {
-        a = -x / y;
-        d = idMath::HALF_PI;
-    }
-    else
-    {
-        a = y / x;
-        d = 0.0f;
-    }
-    s = a * a;
-    t = 0.0028662257f;
-    t *= s;
-    t += -0.0161657367f;
-    t *= s;
-    t += 0.0429096138f;
-    t *= s;
-    t += -0.0752896400f;
-    t *= s;
-    t += 0.1065626393f;
-    t *= s;
-    t += -0.1420889944f;
-    t *= s;
-    t += 0.1999355085f;
-    t *= s;
-    t += -0.3333314528f;
-    t *= s;
-    t += 1.0f;
-    t *= a;
-    t += d;
-
     return t;
-
-#endif
 }
 
 /*
@@ -1949,8 +1780,6 @@
 */
 float SSE_ATan(float y, float x)
 {
-#if 1
-
     float t;
 
     __asm
@@ -2001,49 +1830,7 @@
         addss		xmm2, xmm3
         movss		t, xmm2
     }
-
-    return t;
-
-#else
-
-    float a, d, s, t;
-
-    if (fabs(y) > fabs(x))
-    {
-        a = -x / y;
-        d = idMath::HALF_PI;
-        *((unsigned long *)&d) ^= (*((unsigned long *)&x) ^ *((unsigned long *)&y)) & (1<<31);
-    }
-    else
-    {
-        a = y / x;
-        d = 0.0f;
-    }
-
-    s = a * a;
-    t = 0.0028662257f;
-    t *= s;
-    t += -0.0161657367f;
-    t *= s;
-    t += 0.0429096138f;
-    t *= s;
-    t += -0.0752896400f;
-    t *= s;
-    t += 0.1065626393f;
-    t *= s;
-    t += -0.1420889944f;
-    t *= s;
-    t += 0.1999355085f;
-    t *= s;
-    t += -0.3333314528f;
-    t *= s;
-    t += 1.0f;
-    t *= a;
-    t += d;
-
     return t;
-
-#endif
 }
 
 /*
@@ -11045,9 +10832,6 @@
         }
         return;
     }
-
-#if 1
-
     int i, j, m;
     float *xptr;
     double s0;
@@ -11274,170 +11058,6 @@
         x[i] = s0;
     }
 
-#else
-
-    int i, j, m;
-    double s0, s1, s2, s3, t;
-    const float *lptr2;
-    float *xptr, *xptr2;
-
-    m = n;
-    if (m & 1)
-    {
-
-        m--;
-        x[m] = b[m];
-
-        lptr = L.ToFloatPtr() + m * nc + m - 4;
-        xptr = x + m;
-        // process 4 rows at a time
-        for (i = m; i >= 4; i -= 4)
-        {
-            s0 = b[i-4];
-            s1 = b[i-3];
-            s2 = b[i-2];
-            s3 = b[i-1];
-            // process 4x4 blocks
-            xptr2 = xptr;	// x + i;
-            lptr2 = lptr;	// ptr = L[i] + i - 4;
-            for (j = 0; j < m-i; j += 4)
-            {
-                t = xptr2[0];
-                s0 -= lptr2[0] * t;
-                s1 -= lptr2[1] * t;
-                s2 -= lptr2[2] * t;
-                s3 -= lptr2[3] * t;
-                lptr2 += nc;
-                xptr2++;
-                t = xptr2[0];
-                s0 -= lptr2[0] * t;
-                s1 -= lptr2[1] * t;
-                s2 -= lptr2[2] * t;
-                s3 -= lptr2[3] * t;
-                lptr2 += nc;
-                xptr2++;
-                t = xptr2[0];
-                s0 -= lptr2[0] * t;
-                s1 -= lptr2[1] * t;
-                s2 -= lptr2[2] * t;
-                s3 -= lptr2[3] * t;
-                lptr2 += nc;
-                xptr2++;
-                t = xptr2[0];
-                s0 -= lptr2[0] * t;
-                s1 -= lptr2[1] * t;
-                s2 -= lptr2[2] * t;
-                s3 -= lptr2[3] * t;
-                lptr2 += nc;
-                xptr2++;
-            }
-            t = xptr2[0];
-            s0 -= lptr2[0] * t;
-            s1 -= lptr2[1] * t;
-            s2 -= lptr2[2] * t;
-            s3 -= lptr2[3] * t;
-            // process left over of the 4 rows
-            lptr -= nc;
-            s0 -= lptr[0] * s3;
-            s1 -= lptr[1] * s3;
-            s2 -= lptr[2] * s3;
-            lptr -= nc;
-            s0 -= lptr[0] * s2;
-            s1 -= lptr[1] * s2;
-            lptr -= nc;
-            s0 -= lptr[0] * s1;
-            lptr -= nc;
-            // store result
-            xptr[-4] = s0;
-            xptr[-3] = s1;
-            xptr[-2] = s2;
-            xptr[-1] = s3;
-            // update pointers for next four rows
-            lptr -= 4;
-            xptr -= 4;
-        }
-
-    }
-    else
-    {
-
-        lptr = L.ToFloatPtr() + m * nc + m - 4;
-        xptr = x + m;
-        // process 4 rows at a time
-        for (i = m; i >= 4; i -= 4)
-        {
-            s0 = b[i-4];
-            s1 = b[i-3];
-            s2 = b[i-2];
-            s3 = b[i-1];
-            // process 4x4 blocks
-            xptr2 = xptr;	// x + i;
-            lptr2 = lptr;	// ptr = L[i] + i - 4;
-            for (j = 0; j < m-i; j += 4)
-            {
-                t = xptr2[0];
-                s0 -= lptr2[0] * t;
-                s1 -= lptr2[1] * t;
-                s2 -= lptr2[2] * t;
-                s3 -= lptr2[3] * t;
-                lptr2 += nc;
-                xptr2++;
-                t = xptr2[0];
-                s0 -= lptr2[0] * t;
-                s1 -= lptr2[1] * t;
-                s2 -= lptr2[2] * t;
-                s3 -= lptr2[3] * t;
-                lptr2 += nc;
-                xptr2++;
-                t = xptr2[0];
-                s0 -= lptr2[0] * t;
-                s1 -= lptr2[1] * t;
-                s2 -= lptr2[2] * t;
-                s3 -= lptr2[3] * t;
-                lptr2 += nc;
-                xptr2++;
-                t = xptr2[0];
-                s0 -= lptr2[0] * t;
-                s1 -= lptr2[1] * t;
-                s2 -= lptr2[2] * t;
-                s3 -= lptr2[3] * t;
-                lptr2 += nc;
-                xptr2++;
-            }
-            // process left over of the 4 rows
-            lptr -= nc;
-            s0 -= lptr[0] * s3;
-            s1 -= lptr[1] * s3;
-            s2 -= lptr[2] * s3;
-            lptr -= nc;
-            s0 -= lptr[0] * s2;
-            s1 -= lptr[1] * s2;
-            lptr -= nc;
-            s0 -= lptr[0] * s1;
-            lptr -= nc;
-            // store result
-            xptr[-4] = s0;
-            xptr[-3] = s1;
-            xptr[-2] = s2;
-            xptr[-1] = s3;
-            // update pointers for next four rows
-            lptr -= 4;
-            xptr -= 4;
-        }
-    }
-    // process left over rows
-    for (i--; i >= 0; i--)
-    {
-        s0 = b[i];
-        lptr = L[0] + i;
-        for (j = i + 1; j < m; j++)
-        {
-            s0 -= lptr[j*nc] * x[j];
-        }
-        x[i] = s0;
-    }
-
-#endif
 }
 
 /*
@@ -11451,8 +11071,6 @@
 */
 bool VPCALL idSIMD_SSE::MatX_LDLTFactor(idMatX &mat, idVecX &invDiag, const int n)
 {
-#if 1
-
     int j, nc;
     float *v, *diag, *invDiagPtr, *mptr;
     double s0, s1, s2, sum, d;
@@ -11746,320 +11364,93 @@
 
     return true;
 
-#else
-
-    int i, j, k, nc;
-    float *v, *diag, *mptr;
-    double s0, s1, s2, s3, sum, d;
+}
 
-    v = (float *) _alloca16(n * sizeof(float));
-    diag = (float *) _alloca16(n * sizeof(float));
+/*
+============
+idSIMD_SSE::BlendJoints
+============
+*/
+#define REFINE_BLENDJOINTS_RECIPROCAL
 
-    nc = mat.GetNumColumns();
+void VPCALL idSIMD_SSE::BlendJoints(idJointQuat *joints, const idJointQuat *blendJoints, const float lerp, const int *index, const int numJoints)
+{
+    int i;
 
-    if (n <= 0)
+    if (lerp <= 0.0f)
     {
-        return true;
+        return;
     }
-
-    mptr = mat[0];
-
-    sum = mptr[0];
-
-    if (sum == 0.0f)
+    else if (lerp >= 1.0f)
     {
-        return false;
-    }
-
-    diag[0] = sum;
-    invDiag[0] = d = 1.0f / sum;
-
-    if (n <= 1)
+        for (i = 0; i < numJoints; i++)
     {
-        return true;
+            int j = index[i];
+            joints[j] = blendJoints[j];
     }
-
-    mptr = mat[0];
-    for (j = 1; j < n; j++)
-    {
-        mptr[j*nc+0] = (mptr[j*nc+0]) * d;
+        return;
     }
 
-    mptr = mat[1];
-
-    v[0] = diag[0] * mptr[0];
-    s0 = v[0] * mptr[0];
-    sum = mptr[1] - s0;
-
-    if (sum == 0.0f)
+    for (i = 0; i <= numJoints - 4; i += 4)
     {
-        return false;
-    }
-
-    mat[1][1] = sum;
-    diag[1] = sum;
-    invDiag[1] = d = 1.0f / sum;
+        ALIGN16(float jointVert0[4]);
+        ALIGN16(float jointVert1[4]);
+        ALIGN16(float jointVert2[4]);
+        ALIGN16(float blendVert0[4]);
+        ALIGN16(float blendVert1[4]);
+        ALIGN16(float blendVert2[4]);
+        ALIGN16(float jointQuat0[4]);
+        ALIGN16(float jointQuat1[4]);
+        ALIGN16(float jointQuat2[4]);
+        ALIGN16(float jointQuat3[4]);
+        ALIGN16(float blendQuat0[4]);
+        ALIGN16(float blendQuat1[4]);
+        ALIGN16(float blendQuat2[4]);
+        ALIGN16(float blendQuat3[4]);
 
-    if (n <= 2)
+        for (int j = 0; j < 4; j++)
     {
-        return true;
-    }
+            int n = index[i+j];
 
-    mptr = mat[0];
-    for (j = 2; j < n; j++)
-    {
-        mptr[j*nc+1] = (mptr[j*nc+1] - v[0] * mptr[j*nc+0]) * d;
-    }
+            jointVert0[j] = joints[n].t[0];
+            jointVert1[j] = joints[n].t[1];
+            jointVert2[j] = joints[n].t[2];
 
-    mptr = mat[2];
+            blendVert0[j] = blendJoints[n].t[0];
+            blendVert1[j] = blendJoints[n].t[1];
+            blendVert2[j] = blendJoints[n].t[2];
 
-    v[0] = diag[0] * mptr[0];
-    s0 = v[0] * mptr[0];
-    v[1] = diag[1] * mptr[1];
-    s1 = v[1] * mptr[1];
-    sum = mptr[2] - s0 - s1;
+            jointQuat0[j] = joints[n].q[0];
+            jointQuat1[j] = joints[n].q[1];
+            jointQuat2[j] = joints[n].q[2];
+            jointQuat3[j] = joints[n].q[3];
 
-    if (sum == 0.0f)
-    {
-        return false;
+            blendQuat0[j] = blendJoints[n].q[0];
+            blendQuat1[j] = blendJoints[n].q[1];
+            blendQuat2[j] = blendJoints[n].q[2];
+            blendQuat3[j] = blendJoints[n].q[3];
     }
 
-    mat[2][2] = sum;
-    diag[2] = sum;
-    invDiag[2] = d = 1.0f / sum;
-
-    if (n <= 3)
+       __asm
     {
-        return true;
-    }
-
-    mptr = mat[0];
-    for (j = 3; j < n; j++)
-    {
-        mptr[j*nc+2] = (mptr[j*nc+2] - v[0] * mptr[j*nc+0] - v[1] * mptr[j*nc+1]) * d;
-    }
-
-    mptr = mat[3];
-
-    v[0] = diag[0] * mptr[0];
-    s0 = v[0] * mptr[0];
-    v[1] = diag[1] * mptr[1];
-    s1 = v[1] * mptr[1];
-    v[2] = diag[2] * mptr[2];
-    s2 = v[2] * mptr[2];
-    sum = mptr[3] - s0 - s1 - s2;
-
-    if (sum == 0.0f)
-    {
-        return false;
-    }
-
-    mat[3][3] = sum;
-    diag[3] = sum;
-    invDiag[3] = d = 1.0f / sum;
-
-    if (n <= 4)
-    {
-        return true;
-    }
-
-    mptr = mat[0];
-    for (j = 4; j < n; j++)
-    {
-        mptr[j*nc+3] = (mptr[j*nc+3] - v[0] * mptr[j*nc+0] - v[1] * mptr[j*nc+1] - v[2] * mptr[j*nc+2]) * d;
-    }
-
-    for (i = 4; i < n; i++)
-    {
-
-        mptr = mat[i];
-
-        v[0] = diag[0] * mptr[0];
-        s0 = v[0] * mptr[0];
-        v[1] = diag[1] * mptr[1];
-        s1 = v[1] * mptr[1];
-        v[2] = diag[2] * mptr[2];
-        s2 = v[2] * mptr[2];
-        v[3] = diag[3] * mptr[3];
-        s3 = v[3] * mptr[3];
-        for (k = 4; k < i-3; k += 4)
-        {
-            v[k+0] = diag[k+0] * mptr[k+0];
-            s0 += v[k+0] * mptr[k+0];
-            v[k+1] = diag[k+1] * mptr[k+1];
-            s1 += v[k+1] * mptr[k+1];
-            v[k+2] = diag[k+2] * mptr[k+2];
-            s2 += v[k+2] * mptr[k+2];
-            v[k+3] = diag[k+3] * mptr[k+3];
-            s3 += v[k+3] * mptr[k+3];
-        }
-        switch (i - k)
-        {
-        case 3:
-                v[k+2] = diag[k+2] * mptr[k+2];
-            s0 += v[k+2] * mptr[k+2];
-        case 2:
-                v[k+1] = diag[k+1] * mptr[k+1];
-            s1 += v[k+1] * mptr[k+1];
-        case 1:
-                v[k+0] = diag[k+0] * mptr[k+0];
-            s2 += v[k+0] * mptr[k+0];
-        }
-        sum = s3;
-        sum += s2;
-        sum += s1;
-        sum += s0;
-        sum = mptr[i] - sum;
-
-        if (sum == 0.0f)
-        {
-            return false;
-        }
-
-        mat[i][i] = sum;
-        diag[i] = sum;
-        invDiag[i] = d = 1.0f / sum;
-
-        if (i + 1 >= n)
-        {
-            return true;
-        }
-
-        mptr = mat[i+1];
-        for (j = i+1; j < n; j++)
-        {
-            s0 = mptr[0] * v[0];
-            s1 = mptr[1] * v[1];
-            s2 = mptr[2] * v[2];
-            s3 = mptr[3] * v[3];
-            for (k = 4; k < i-7; k += 8)
-            {
-                s0 += mptr[k+0] * v[k+0];
-                s1 += mptr[k+1] * v[k+1];
-                s2 += mptr[k+2] * v[k+2];
-                s3 += mptr[k+3] * v[k+3];
-                s0 += mptr[k+4] * v[k+4];
-                s1 += mptr[k+5] * v[k+5];
-                s2 += mptr[k+6] * v[k+6];
-                s3 += mptr[k+7] * v[k+7];
-            }
-            switch (i - k)
-            {
-            case 7:
-                    s0 += mptr[k+6] * v[k+6];
-            case 6:
-                    s1 += mptr[k+5] * v[k+5];
-            case 5:
-                    s2 += mptr[k+4] * v[k+4];
-            case 4:
-                    s3 += mptr[k+3] * v[k+3];
-            case 3:
-                    s0 += mptr[k+2] * v[k+2];
-            case 2:
-                    s1 += mptr[k+1] * v[k+1];
-            case 1:
-                    s2 += mptr[k+0] * v[k+0];
-            }
-            sum = s3;
-            sum += s2;
-            sum += s1;
-            sum += s0;
-            mptr[i] = (mptr[i] - sum) * d;
-            mptr += nc;
-        }
-    }
-
-    return true;
-
-#endif
-}
-
-/*
-============
-idSIMD_SSE::BlendJoints
-============
-*/
-#define REFINE_BLENDJOINTS_RECIPROCAL
-
-void VPCALL idSIMD_SSE::BlendJoints(idJointQuat *joints, const idJointQuat *blendJoints, const float lerp, const int *index, const int numJoints)
-{
-    int i;
-
-    if (lerp <= 0.0f)
-    {
-        return;
-    }
-    else if (lerp >= 1.0f)
-    {
-        for (i = 0; i < numJoints; i++)
-        {
-            int j = index[i];
-            joints[j] = blendJoints[j];
-        }
-        return;
-    }
-
-    for (i = 0; i <= numJoints - 4; i += 4)
-    {
-        ALIGN16(float jointVert0[4]);
-        ALIGN16(float jointVert1[4]);
-        ALIGN16(float jointVert2[4]);
-        ALIGN16(float blendVert0[4]);
-        ALIGN16(float blendVert1[4]);
-        ALIGN16(float blendVert2[4]);
-        ALIGN16(float jointQuat0[4]);
-        ALIGN16(float jointQuat1[4]);
-        ALIGN16(float jointQuat2[4]);
-        ALIGN16(float jointQuat3[4]);
-        ALIGN16(float blendQuat0[4]);
-        ALIGN16(float blendQuat1[4]);
-        ALIGN16(float blendQuat2[4]);
-        ALIGN16(float blendQuat3[4]);
-
-        for (int j = 0; j < 4; j++)
-        {
-            int n = index[i+j];
-
-            jointVert0[j] = joints[n].t[0];
-            jointVert1[j] = joints[n].t[1];
-            jointVert2[j] = joints[n].t[2];
-
-            blendVert0[j] = blendJoints[n].t[0];
-            blendVert1[j] = blendJoints[n].t[1];
-            blendVert2[j] = blendJoints[n].t[2];
-
-            jointQuat0[j] = joints[n].q[0];
-            jointQuat1[j] = joints[n].q[1];
-            jointQuat2[j] = joints[n].q[2];
-            jointQuat3[j] = joints[n].q[3];
-
-            blendQuat0[j] = blendJoints[n].q[0];
-            blendQuat1[j] = blendJoints[n].q[1];
-            blendQuat2[j] = blendJoints[n].q[2];
-            blendQuat3[j] = blendJoints[n].q[3];
-        }
-
-#if 1
-        __asm
-        {
-            // lerp translation
-            movss		xmm7, lerp
-            shufps		xmm7, xmm7, R_SHUFFLEPS(0, 0, 0, 0)
-            movaps		xmm0, blendVert0
-            subps		xmm0, jointVert0
-            mulps		xmm0, xmm7
-            addps		xmm0, jointVert0
-            movaps		jointVert0, xmm0
-            movaps		xmm1, blendVert1
-            subps		xmm1, jointVert1
-            mulps		xmm1, xmm7
-            addps		xmm1, jointVert1
-            movaps		jointVert1, xmm1
-            movaps		xmm2, blendVert2
-            subps		xmm2, jointVert2
-            mulps		xmm2, xmm7
-            addps		xmm2, jointVert2
-            movaps		jointVert2, xmm2
+            // lerp translation
+            movss		xmm7, lerp
+            shufps		xmm7, xmm7, R_SHUFFLEPS(0, 0, 0, 0)
+            movaps		xmm0, blendVert0
+            subps		xmm0, jointVert0
+            mulps		xmm0, xmm7
+            addps		xmm0, jointVert0
+            movaps		jointVert0, xmm0
+            movaps		xmm1, blendVert1
+            subps		xmm1, jointVert1
+            mulps		xmm1, xmm7
+            addps		xmm1, jointVert1
+            movaps		jointVert1, xmm1
+            movaps		xmm2, blendVert2
+            subps		xmm2, jointVert2
+            mulps		xmm2, xmm7
+            addps		xmm2, jointVert2
+            movaps		jointVert2, xmm2
 
             // lerp quaternions
             movaps		xmm0, jointQuat0
@@ -12212,133 +11603,6 @@
             movaps		jointQuat3, xmm3
         }
 
-#else
-
-        jointVert0[0] += lerp * (blendVert0[0] - jointVert0[0]);
-        jointVert0[1] += lerp * (blendVert0[1] - jointVert0[1]);
-        jointVert0[2] += lerp * (blendVert0[2] - jointVert0[2]);
-        jointVert0[3] += lerp * (blendVert0[3] - jointVert0[3]);
-
-        jointVert1[0] += lerp * (blendVert1[0] - jointVert1[0]);
-        jointVert1[1] += lerp * (blendVert1[1] - jointVert1[1]);
-        jointVert1[2] += lerp * (blendVert1[2] - jointVert1[2]);
-        jointVert1[3] += lerp * (blendVert1[3] - jointVert1[3]);
-
-        jointVert2[0] += lerp * (blendVert2[0] - jointVert2[0]);
-        jointVert2[1] += lerp * (blendVert2[1] - jointVert2[1]);
-        jointVert2[2] += lerp * (blendVert2[2] - jointVert2[2]);
-        jointVert2[3] += lerp * (blendVert2[3] - jointVert2[3]);
-
-        ALIGN16(float cosom[4]);
-        ALIGN16(float sinom[4]);
-        ALIGN16(float omega0[4]);
-        ALIGN16(float omega1[4]);
-        ALIGN16(float scale0[4]);
-        ALIGN16(float scale1[4]);
-        ALIGN16(unsigned long signBit[4]);
-
-        cosom[0] = jointQuat0[0] * blendQuat0[0];
-        cosom[1] = jointQuat0[1] * blendQuat0[1];
-        cosom[2] = jointQuat0[2] * blendQuat0[2];
-        cosom[3] = jointQuat0[3] * blendQuat0[3];
-
-        cosom[0] += jointQuat1[0] * blendQuat1[0];
-        cosom[1] += jointQuat1[1] * blendQuat1[1];
-        cosom[2] += jointQuat1[2] * blendQuat1[2];
-        cosom[3] += jointQuat1[3] * blendQuat1[3];
-
-        cosom[0] += jointQuat2[0] * blendQuat2[0];
-        cosom[1] += jointQuat2[1] * blendQuat2[1];
-        cosom[2] += jointQuat2[2] * blendQuat2[2];
-        cosom[3] += jointQuat2[3] * blendQuat2[3];
-
-        cosom[0] += jointQuat3[0] * blendQuat3[0];
-        cosom[1] += jointQuat3[1] * blendQuat3[1];
-        cosom[2] += jointQuat3[2] * blendQuat3[2];
-        cosom[3] += jointQuat3[3] * blendQuat3[3];
-
-        signBit[0] = (*(unsigned long *)&cosom[0]) & (1 << 31);
-        signBit[1] = (*(unsigned long *)&cosom[1]) & (1 << 31);
-        signBit[2] = (*(unsigned long *)&cosom[2]) & (1 << 31);
-        signBit[3] = (*(unsigned long *)&cosom[3]) & (1 << 31);
-
-        (*(unsigned long *)&cosom[0]) ^= signBit[0];
-        (*(unsigned long *)&cosom[1]) ^= signBit[1];
-        (*(unsigned long *)&cosom[2]) ^= signBit[2];
-        (*(unsigned long *)&cosom[3]) ^= signBit[3];
-
-        scale0[0] = 1.0f - cosom[0] * cosom[0];
-        scale0[1] = 1.0f - cosom[1] * cosom[1];
-        scale0[2] = 1.0f - cosom[2] * cosom[2];
-        scale0[3] = 1.0f - cosom[3] * cosom[3];
-
-        scale0[0] = (scale0[0] <= 0.0f) ? SIMD_SP_tiny[0] : scale0[0];
-        scale0[1] = (scale0[1] <= 0.0f) ? SIMD_SP_tiny[1] : scale0[1];
-        scale0[2] = (scale0[2] <= 0.0f) ? SIMD_SP_tiny[2] : scale0[2];
-        scale0[3] = (scale0[3] <= 0.0f) ? SIMD_SP_tiny[3] : scale0[3];
-
-        sinom[0] = idMath::RSqrt(scale0[0]);
-        sinom[1] = idMath::RSqrt(scale0[1]);
-        sinom[2] = idMath::RSqrt(scale0[2]);
-        sinom[3] = idMath::RSqrt(scale0[3]);
-
-        scale0[0] *= sinom[0];
-        scale0[1] *= sinom[1];
-        scale0[2] *= sinom[2];
-        scale0[3] *= sinom[3];
-
-        omega0[0] = SSE_ATanPositive(scale0[0], cosom[0]);
-        omega0[1] = SSE_ATanPositive(scale0[1], cosom[1]);
-        omega0[2] = SSE_ATanPositive(scale0[2], cosom[2]);
-        omega0[3] = SSE_ATanPositive(scale0[3], cosom[3]);
-
-        omega1[0] = lerp * omega0[0];
-        omega1[1] = lerp * omega0[1];
-        omega1[2] = lerp * omega0[2];
-        omega1[3] = lerp * omega0[3];
-
-        omega0[0] -= omega1[0];
-        omega0[1] -= omega1[1];
-        omega0[2] -= omega1[2];
-        omega0[3] -= omega1[3];
-
-        scale0[0] = SSE_SinZeroHalfPI(omega0[0]) * sinom[0];
-        scale0[1] = SSE_SinZeroHalfPI(omega0[1]) * sinom[1];
-        scale0[2] = SSE_SinZeroHalfPI(omega0[2]) * sinom[2];
-        scale0[3] = SSE_SinZeroHalfPI(omega0[3]) * sinom[3];
-
-        scale1[0] = SSE_SinZeroHalfPI(omega1[0]) * sinom[0];
-        scale1[1] = SSE_SinZeroHalfPI(omega1[1]) * sinom[1];
-        scale1[2] = SSE_SinZeroHalfPI(omega1[2]) * sinom[2];
-        scale1[3] = SSE_SinZeroHalfPI(omega1[3]) * sinom[3];
-
-        (*(unsigned long *)&scale1[0]) ^= signBit[0];
-        (*(unsigned long *)&scale1[1]) ^= signBit[1];
-        (*(unsigned long *)&scale1[2]) ^= signBit[2];
-        (*(unsigned long *)&scale1[3]) ^= signBit[3];
-
-        jointQuat0[0] = scale0[0] * jointQuat0[0] + scale1[0] * blendQuat0[0];
-        jointQuat0[1] = scale0[1] * jointQuat0[1] + scale1[1] * blendQuat0[1];
-        jointQuat0[2] = scale0[2] * jointQuat0[2] + scale1[2] * blendQuat0[2];
-        jointQuat0[3] = scale0[3] * jointQuat0[3] + scale1[3] * blendQuat0[3];
-
-        jointQuat1[0] = scale0[0] * jointQuat1[0] + scale1[0] * blendQuat1[0];
-        jointQuat1[1] = scale0[1] * jointQuat1[1] + scale1[1] * blendQuat1[1];
-        jointQuat1[2] = scale0[2] * jointQuat1[2] + scale1[2] * blendQuat1[2];
-        jointQuat1[3] = scale0[3] * jointQuat1[3] + scale1[3] * blendQuat1[3];
-
-        jointQuat2[0] = scale0[0] * jointQuat2[0] + scale1[0] * blendQuat2[0];
-        jointQuat2[1] = scale0[1] * jointQuat2[1] + scale1[1] * blendQuat2[1];
-        jointQuat2[2] = scale0[2] * jointQuat2[2] + scale1[2] * blendQuat2[2];
-        jointQuat2[3] = scale0[3] * jointQuat2[3] + scale1[3] * blendQuat2[3];
-
-        jointQuat3[0] = scale0[0] * jointQuat3[0] + scale1[0] * blendQuat3[0];
-        jointQuat3[1] = scale0[1] * jointQuat3[1] + scale1[1] * blendQuat3[1];
-        jointQuat3[2] = scale0[2] * jointQuat3[2] + scale1[2] * blendQuat3[2];
-        jointQuat3[3] = scale0[3] * jointQuat3[3] + scale1[3] * blendQuat3[3];
-
-#endif
-
         for (int j = 0; j < 4; j++)
         {
             int n = index[i+j];
@@ -12471,8 +11735,6 @@
     assert(sizeof(idJointMat) == JOINTMAT_SIZE);
     assert((int)(&((idJointQuat *)0)->t) == (int)(&((idJointQuat *)0)->q) + (int)sizeof(((idJointQuat *)0)->q));
 
-#if 1
-
     ALIGN16(byte shuffle[16]);
 
     __asm
@@ -12857,141 +12119,6 @@
         done1:
     }
 
-#elif 0
-
-    for (int i = 0; i < numJoints; i++)
-    {
-        float s0, s1, s2;
-        int k0, k1, k2, k3;
-
-        float *q = jointQuats[i].q.ToFloatPtr();
-        const float *m = jointMats[i].ToFloatPtr();
-
-        if (m[0 * 4 + 0] + m[1 * 4 + 1] + m[2 * 4 + 2] > 0.0f)
-        {
-
-            k0 = 3;
-            k1 = 2;
-            k2 = 1;
-            k3 = 0;
-            s0 = 1.0f;
-            s1 = 1.0f;
-            s2 = 1.0f;
-
-        }
-        else if (m[0 * 4 + 0] > m[1 * 4 + 1] && m[0 * 4 + 0] > m[2 * 4 + 2])
-        {
-
-            k0 = 0;
-            k1 = 1;
-            k2 = 2;
-            k3 = 3;
-            s0 = 1.0f;
-            s1 = -1.0f;
-            s2 = -1.0f;
-
-        }
-        else if (m[1 * 4 + 1] > m[2 * 4 + 2])
-        {
-
-            k0 = 1;
-            k1 = 0;
-            k2 = 3;
-            k3 = 2;
-            s0 = -1.0f;
-            s1 = 1.0f;
-            s2 = -1.0f;
-
-        }
-        else
-        {
-
-            k0 = 2;
-            k1 = 3;
-            k2 = 0;
-            k3 = 1;
-            s0 = -1.0f;
-            s1 = -1.0f;
-            s2 = 1.0f;
-
-        }
-
-        float t = s0 * m[0 * 4 + 0] + s1 * m[1 * 4 + 1] + s2 * m[2 * 4 + 2] + 1.0f;
-        float s = idMath::InvSqrt(t) * 0.5f;
-
-        q[k0] = s * t;
-        q[k1] = (m[0 * 4 + 1] - s2 * m[1 * 4 + 0]) * s;
-        q[k2] = (m[2 * 4 + 0] - s1 * m[0 * 4 + 2]) * s;
-        q[k3] = (m[1 * 4 + 2] - s0 * m[2 * 4 + 1]) * s;
-
-        q[4] = m[0 * 4 + 3];
-        q[5] = m[1 * 4 + 3];
-        q[6] = m[2 * 4 + 3];
-    }
-
-#elif 1
-
-    for (int i = 0; i < numJoints; i++)
-    {
-
-        float *q = jointQuats[i].q.ToFloatPtr();
-        const float *m = jointMats[i].ToFloatPtr();
-
-        if (m[0 * 4 + 0] + m[1 * 4 + 1] + m[2 * 4 + 2] > 0.0f)
-        {
-
-            float t = + m[0 * 4 + 0] + m[1 * 4 + 1] + m[2 * 4 + 2] + 1.0f;
-            float s = idMath::InvSqrt(t) * 0.5f;
-
-            q[3] = s * t;
-            q[2] = (m[0 * 4 + 1] - m[1 * 4 + 0]) * s;
-            q[1] = (m[2 * 4 + 0] - m[0 * 4 + 2]) * s;
-            q[0] = (m[1 * 4 + 2] - m[2 * 4 + 1]) * s;
-
-        }
-        else if (m[0 * 4 + 0] > m[1 * 4 + 1] && m[0 * 4 + 0] > m[2 * 4 + 2])
-        {
-
-            float t = + m[0 * 4 + 0] - m[1 * 4 + 1] - m[2 * 4 + 2] + 1.0f;
-            float s = idMath::InvSqrt(t) * 0.5f;
-
-            q[0] = s * t;
-            q[1] = (m[0 * 4 + 1] + m[1 * 4 + 0]) * s;
-            q[2] = (m[2 * 4 + 0] + m[0 * 4 + 2]) * s;
-            q[3] = (m[1 * 4 + 2] - m[2 * 4 + 1]) * s;
-
-        }
-        else if (m[1 * 4 + 1] > m[2 * 4 + 2])
-        {
-
-            float t = - m[0 * 4 + 0] + m[1 * 4 + 1] - m[2 * 4 + 2] + 1.0f;
-            float s = idMath::InvSqrt(t) * 0.5f;
-
-            q[1] = s * t;
-            q[0] = (m[0 * 4 + 1] + m[1 * 4 + 0]) * s;
-            q[3] = (m[2 * 4 + 0] - m[0 * 4 + 2]) * s;
-            q[2] = (m[1 * 4 + 2] + m[2 * 4 + 1]) * s;
-
-        }
-        else
-        {
-
-            float t = - m[0 * 4 + 0] - m[1 * 4 + 1] + m[2 * 4 + 2] + 1.0f;
-            float s = idMath::InvSqrt(t) * 0.5f;
-
-            q[2] = s * t;
-            q[3] = (m[0 * 4 + 1] - m[1 * 4 + 0]) * s;
-            q[0] = (m[2 * 4 + 0] + m[0 * 4 + 2]) * s;
-            q[1] = (m[1 * 4 + 2] + m[2 * 4 + 1]) * s;
-
-        }
-
-        q[4] = m[0 * 4 + 3];
-        q[5] = m[1 * 4 + 3];
-        q[6] = m[2 * 4 + 3];
-    }
-
-#endif
 }
 
 /*
@@ -13001,8 +12128,6 @@
 */
 void VPCALL idSIMD_SSE::TransformJoints(idJointMat *jointMats, const int *parents, const int firstJoint, const int lastJoint)
 {
-#if 1
-
     assert(sizeof(idJointMat) == JOINTMAT_SIZE);
 
     __asm
@@ -13092,17 +12217,6 @@
         done:
     }
 
-#else
-
-    int i;
-
-    for (i = firstJoint; i <= lastJoint; i++)
-    {
-        assert(parents[i] < i);
-        jointMats[i] *= jointMats[parents[i]];
-    }
-
-#endif
 }
 
 /*
@@ -13112,8 +12226,6 @@
 */
 void VPCALL idSIMD_SSE::UntransformJoints(idJointMat *jointMats, const int *parents, const int firstJoint, const int lastJoint)
 {
-#if 1
-
     assert(sizeof(idJointMat) == JOINTMAT_SIZE);
 
     __asm
@@ -13197,17 +12309,6 @@
         done:
     }
 
-#else
-
-    int i;
-
-    for (i = lastJoint; i >= firstJoint; i--)
-    {
-        assert(parents[i] < i);
-        jointMats[i] /= jointMats[parents[i]];
-    }
-
-#endif
 }
 
 /*
@@ -13217,8 +12318,6 @@
 */
 void VPCALL idSIMD_SSE::TransformVerts(idDrawVert *verts, const int numVerts, const idJointMat *joints, const idVec4 *weights, const int *index, const int numWeights)
 {
-#if 1
-
     assert(sizeof(idDrawVert) == DRAWVERT_SIZE);
     assert((int)&((idDrawVert *)0)->xyz == DRAWVERT_XYZ_OFFSET);
     assert(sizeof(idVec4) == JOINTWEIGHT_SIZE);
@@ -13299,28 +12398,6 @@
         jl			loopVert
         done:
     }
-
-#else
-
-    int i, j;
-    const byte *jointsPtr = (byte *)joints;
-
-    for (j = i = 0; i < numVerts; i++)
-    {
-        idVec3 v;
-
-        v = (*(idJointMat *)(jointsPtr + index[j*2+0])) * weights[j];
-        while (index[j*2+1] == 0)
-        {
-            j++;
-            v += (*(idJointMat *)(jointsPtr + index[j*2+0])) * weights[j];
-        }
-        j++;
-
-        verts[i].xyz = v;
-    }
-
-#endif
 }
 
 /*
@@ -13330,8 +12407,6 @@
 */
 void VPCALL idSIMD_SSE::TracePointCull(byte *cullBits, byte &totalOr, const float radius, const idPlane *planes, const idDrawVert *verts, const int numVerts)
 {
-#if 1
-
     assert(sizeof(idDrawVert) == DRAWVERT_SIZE);
     assert((int)&((idDrawVert *)0)->xyz == DRAWVERT_XYZ_OFFSET);
 
@@ -13400,51 +12475,6 @@
         pop			ebx
     }
 
-#else
-
-    int i;
-    byte tOr;
-
-    tOr = 0;
-
-    for (i = 0; i < numVerts; i++)
-    {
-        byte bits;
-        float d0, d1, d2, d3, t;
-        const idVec3 &v = verts[i].xyz;
-
-        d0 = planes[0][0] * v[0] + planes[0][1] * v[1] + planes[0][2] * v[2] + planes[0][3];
-        d1 = planes[1][0] * v[0] + planes[1][1] * v[1] + planes[1][2] * v[2] + planes[1][3];
-        d2 = planes[2][0] * v[0] + planes[2][1] * v[1] + planes[2][2] * v[2] + planes[2][3];
-        d3 = planes[3][0] * v[0] + planes[3][1] * v[1] + planes[3][2] * v[2] + planes[3][3];
-
-        t = d0 + radius;
-        bits  = FLOATSIGNBITSET(t) << 0;
-        t = d1 + radius;
-        bits |= FLOATSIGNBITSET(t) << 1;
-        t = d2 + radius;
-        bits |= FLOATSIGNBITSET(t) << 2;
-        t = d3 + radius;
-        bits |= FLOATSIGNBITSET(t) << 3;
-
-        t = d0 - radius;
-        bits |= FLOATSIGNBITSET(t) << 4;
-        t = d1 - radius;
-        bits |= FLOATSIGNBITSET(t) << 5;
-        t = d2 - radius;
-        bits |= FLOATSIGNBITSET(t) << 6;
-        t = d3 - radius;
-        bits |= FLOATSIGNBITSET(t) << 7;
-
-        bits ^= 0x0F;		// flip lower four bits
-
-        tOr |= bits;
-        cullBits[i] = bits;
-    }
-
-    totalOr = tOr;
-
-#endif
 }
 
 /*
@@ -13454,8 +12484,6 @@
 */
 void VPCALL idSIMD_SSE::DecalPointCull(byte *cullBits, const idPlane *planes, const idDrawVert *verts, const int numVerts)
 {
-#if 1
-
     ALIGN16(float p0[4]);
     ALIGN16(float p1[4]);
     ALIGN16(float p2[4]);
@@ -13626,75 +12654,6 @@
     }
 
 
-#else
-
-    int i;
-
-    for (i = 0; i < numVerts; i += 2)
-    {
-        unsigned short bits0, bits1;
-        float d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11;
-        const idVec3 &v0 = verts[i+0].xyz;
-        const idVec3 &v1 = verts[i+1].xyz;
-
-        d0  = planes[0][0] * v0[0] + planes[0][1] * v0[1] + planes[0][2] * v0[2] + planes[0][3];
-        d1  = planes[1][0] * v0[0] + planes[1][1] * v0[1] + planes[1][2] * v0[2] + planes[1][3];
-        d2  = planes[2][0] * v0[0] + planes[2][1] * v0[1] + planes[2][2] * v0[2] + planes[2][3];
-        d3  = planes[3][0] * v0[0] + planes[3][1] * v0[1] + planes[3][2] * v0[2] + planes[3][3];
-
-        d4  = planes[4][0] * v0[0] + planes[4][1] * v0[1] + planes[4][2] * v0[2] + planes[4][3];
-        d5  = planes[5][0] * v0[0] + planes[5][1] * v0[1] + planes[5][2] * v0[2] + planes[5][3];
-        d10 = planes[4][0] * v1[0] + planes[4][1] * v1[1] + planes[4][2] * v1[2] + planes[4][3];
-        d11 = planes[5][0] * v1[0] + planes[5][1] * v1[1] + planes[5][2] * v1[2] + planes[5][3];
-
-        d6  = planes[0][0] * v1[0] + planes[0][1] * v1[1] + planes[0][2] * v1[2] + planes[0][3];
-        d7  = planes[1][0] * v1[0] + planes[1][1] * v1[1] + planes[1][2] * v1[2] + planes[1][3];
-        d8  = planes[2][0] * v1[0] + planes[2][1] * v1[1] + planes[2][2] * v1[2] + planes[2][3];
-        d9  = planes[3][0] * v1[0] + planes[3][1] * v1[1] + planes[3][2] * v1[2] + planes[3][3];
-
-        bits0  = FLOATSIGNBITSET(d0) << (0+0);
-        bits0 |= FLOATSIGNBITSET(d1) << (0+1);
-        bits0 |= FLOATSIGNBITSET(d2) << (0+2);
-        bits0 |= FLOATSIGNBITSET(d3) << (0+3);
-        bits0 |= FLOATSIGNBITSET(d4) << (0+4);
-        bits0 |= FLOATSIGNBITSET(d5) << (0+5);
-
-        bits1  = FLOATSIGNBITSET(d6) << (8+0);
-        bits1 |= FLOATSIGNBITSET(d7) << (8+1);
-        bits1 |= FLOATSIGNBITSET(d8) << (8+2);
-        bits1 |= FLOATSIGNBITSET(d9) << (8+3);
-        bits1 |= FLOATSIGNBITSET(d10) << (8+4);
-        bits1 |= FLOATSIGNBITSET(d11) << (8+5);
-
-        *(unsigned short *)(cullBits + i) = (bits0 | bits1) ^ 0x3F3F;
-    }
-
-    if (numVerts & 1)
-    {
-        byte bits;
-        float d0, d1, d2, d3, d4, d5;
-        const idVec3 &v = verts[numVerts - 1].xyz;
-
-        d0 = planes[0][0] * v[0] + planes[0][1] * v[1] + planes[0][2] * v[2] + planes[0][3];
-        d1 = planes[1][0] * v[0] + planes[1][1] * v[1] + planes[1][2] * v[2] + planes[1][3];
-        d2 = planes[2][0] * v[0] + planes[2][1] * v[1] + planes[2][2] * v[2] + planes[2][3];
-        d3 = planes[3][0] * v[0] + planes[3][1] * v[1] + planes[3][2] * v[2] + planes[3][3];
-
-        d4 = planes[4][0] * v[0] + planes[4][1] * v[1] + planes[4][2] * v[2] + planes[4][3];
-        d5 = planes[5][0] * v[0] + planes[5][1] * v[1] + planes[5][2] * v[2] + planes[5][3];
-
-        bits  = FLOATSIGNBITSET(d0) << 0;
-        bits |= FLOATSIGNBITSET(d1) << 1;
-        bits |= FLOATSIGNBITSET(d2) << 2;
-        bits |= FLOATSIGNBITSET(d3) << 3;
-
-        bits |= FLOATSIGNBITSET(d4) << 4;
-        bits |= FLOATSIGNBITSET(d5) << 5;
-
-        cullBits[numVerts - 1] = bits ^ 0x3F;		// flip lower 6 bits
-    }
-
-#endif
 }
 
 /*
@@ -13704,8 +12663,6 @@
 */
 void VPCALL idSIMD_SSE::OverlayPointCull(byte *cullBits, idVec2 *texCoords, const idPlane *planes, const idDrawVert *verts, const int numVerts)
 {
-#if 1
-
     assert(sizeof(idDrawVert) == DRAWVERT_SIZE);
     assert((int)&((idDrawVert *)0)->xyz == DRAWVERT_XYZ_OFFSET);
 
@@ -13798,75 +12755,6 @@
         done:
     }
 
-#else
-
-    const idPlane &p0 = planes[0];
-    const idPlane &p1 = planes[1];
-
-    for (int i = 0; i < numVerts - 1; i += 2)
-    {
-        unsigned short bits;
-        float d0, d1, d2, d3;
-
-        const idVec3 &v0 = verts[i+0].xyz;
-        const idVec3 &v1 = verts[i+1].xyz;
-
-        d0 = p0[0] * v0[0] + p0[1] * v0[1] + p0[2] * v0[2] + p0[3];
-        d1 = p1[0] * v0[0] + p1[1] * v0[1] + p1[2] * v0[2] + p1[3];
-        d2 = p0[0] * v1[0] + p0[1] * v1[1] + p0[2] * v1[2] + p0[3];
-        d3 = p1[0] * v1[0] + p1[1] * v1[1] + p1[2] * v1[2] + p1[3];
-
-        texCoords[i+0][0] = d0;
-        texCoords[i+0][1] = d1;
-        texCoords[i+1][0] = d2;
-        texCoords[i+1][1] = d3;
-
-        bits  = FLOATSIGNBITSET(d0) << 0;
-        bits |= FLOATSIGNBITSET(d1) << 1;
-        bits |= FLOATSIGNBITSET(d2) << 8;
-        bits |= FLOATSIGNBITSET(d3) << 9;
-
-        d0 = 1.0f - d0;
-        d1 = 1.0f - d1;
-        d2 = 1.0f - d2;
-        d3 = 1.0f - d3;
-
-        bits |= FLOATSIGNBITSET(d0) << 2;
-        bits |= FLOATSIGNBITSET(d1) << 3;
-        bits |= FLOATSIGNBITSET(d2) << 10;
-        bits |= FLOATSIGNBITSET(d3) << 11;
-
-        *(unsigned short *)(cullBits + i) = bits;
-    }
-
-    if (numVerts & 1)
-    {
-        byte bits;
-        float d0, d1;
-
-        const idPlane &p0 = planes[0];
-        const idPlane &p1 = planes[1];
-        const idVec3 &v0 = verts[numVerts - 1].xyz;
-
-        d0 = p0[0] * v0[0] + p0[1] * v0[1] + p0[2] * v0[2] + p0[3];
-        d1 = p1[0] * v0[0] + p1[1] * v0[1] + p1[2] * v0[2] + p1[3];
-
-        texCoords[i][0] = d0;
-        texCoords[i][1] = d1;
-
-        bits  = FLOATSIGNBITSET(d0) << 0;
-        bits |= FLOATSIGNBITSET(d1) << 1;
-
-        d0 = 1.0f - d0;
-        d1 = 1.0f - d1;
-
-        bits |= FLOATSIGNBITSET(d0) << 2;
-        bits |= FLOATSIGNBITSET(d1) << 3;
-
-        cullBits[numVerts - 1] = bits;
-    }
-
-#endif
 }
 
 /*
@@ -13876,8 +12764,6 @@
 */
 void VPCALL idSIMD_SSE::DeriveTriPlanes(idPlane *planes, const idDrawVert *verts, const int numVerts, const int *indexes, const int numIndexes)
 {
-#if 1
-
     assert(sizeof(idDrawVert) == DRAWVERT_SIZE);
     assert((int)&((idDrawVert *)0)->xyz == DRAWVERT_XYZ_OFFSET);
 
@@ -14233,159 +13119,6 @@
         done:
     }
 
-#else
-
-    int i, j;
-
-    for (i = 0; i <= numIndexes - 12; i += 12)
-    {
-        ALIGN16(float d0[4]);
-        ALIGN16(float d1[4]);
-        ALIGN16(float d2[4]);
-        ALIGN16(float d3[4]);
-        ALIGN16(float d4[4]);
-        ALIGN16(float d5[4]);
-        ALIGN16(float n0[4]);
-        ALIGN16(float n1[4]);
-        ALIGN16(float n2[4]);
-
-        for (j = 0; j < 4; j++)
-        {
-            const idDrawVert *a, *b, *c;
-
-            a = verts + indexes[i + j * 3 + 0];
-            b = verts + indexes[i + j * 3 + 1];
-            c = verts + indexes[i + j * 3 + 2];
-
-            d0[j] = b->xyz[0] - a->xyz[0];
-            d1[j] = b->xyz[1] - a->xyz[1];
-            d2[j] = b->xyz[2] - a->xyz[2];
-
-            d3[j] = c->xyz[0] - a->xyz[0];
-            d4[j] = c->xyz[1] - a->xyz[1];
-            d5[j] = c->xyz[2] - a->xyz[2];
-        }
-
-        ALIGN16(float tmp[4]);
-
-        n0[0] = d4[0] * d2[0];
-        n0[1] = d4[1] * d2[1];
-        n0[2] = d4[2] * d2[2];
-        n0[3] = d4[3] * d2[3];
-
-        n0[0] -= d5[0] * d1[0];
-        n0[1] -= d5[1] * d1[1];
-        n0[2] -= d5[2] * d1[2];
-        n0[3] -= d5[3] * d1[3];
-
-        n1[0] = d5[0] * d0[0];
-        n1[1] = d5[1] * d0[1];
-        n1[2] = d5[2] * d0[2];
-        n1[3] = d5[3] * d0[3];
-
-        n1[0] -= d3[0] * d2[0];
-        n1[1] -= d3[1] * d2[1];
-        n1[2] -= d3[2] * d2[2];
-        n1[3] -= d3[3] * d2[3];
-
-        n2[0] = d3[0] * d1[0];
-        n2[1] = d3[1] * d1[1];
-        n2[2] = d3[2] * d1[2];
-        n2[3] = d3[3] * d1[3];
-
-        n2[0] -= d4[0] * d0[0];
-        n2[1] -= d4[1] * d0[1];
-        n2[2] -= d4[2] * d0[2];
-        n2[3] -= d4[3] * d0[3];
-
-        tmp[0] = n0[0] * n0[0];
-        tmp[1] = n0[1] * n0[1];
-        tmp[2] = n0[2] * n0[2];
-        tmp[3] = n0[3] * n0[3];
-
-        tmp[0] += n1[0] * n1[0];
-        tmp[1] += n1[1] * n1[1];
-        tmp[2] += n1[2] * n1[2];
-        tmp[3] += n1[3] * n1[3];
-
-        tmp[0] += n2[0] * n2[0];
-        tmp[1] += n2[1] * n2[1];
-        tmp[2] += n2[2] * n2[2];
-        tmp[3] += n2[3] * n2[3];
-
-        tmp[0] = idMath::RSqrt(tmp[0]);
-        tmp[1] = idMath::RSqrt(tmp[1]);
-        tmp[2] = idMath::RSqrt(tmp[2]);
-        tmp[3] = idMath::RSqrt(tmp[3]);
-
-        n0[0] *= tmp[0];
-        n0[1] *= tmp[1];
-        n0[2] *= tmp[2];
-        n0[3] *= tmp[3];
-
-        n1[0] *= tmp[0];
-        n1[1] *= tmp[1];
-        n1[2] *= tmp[2];
-        n1[3] *= tmp[3];
-
-        n2[0] *= tmp[0];
-        n2[1] *= tmp[1];
-        n2[2] *= tmp[2];
-        n2[3] *= tmp[3];
-
-
-        for (j = 0; j < 4; j++)
-        {
-            const idDrawVert *a;
-
-            a = verts + indexes[i + j * 3];
-
-            planes->Normal()[0] = n0[j];
-            planes->Normal()[1] = n1[j];
-            planes->Normal()[2] = n2[j];
-            planes->FitThroughPoint(a->xyz);
-            planes++;
-        }
-    }
-
-    for (; i < numIndexes; i += 3)
-    {
-        const idDrawVert *a, *b, *c;
-        float d0, d1, d2, d3, d4, d5;
-        float n0, n1, n2;
-
-        a = verts + indexes[i + 0];
-        b = verts + indexes[i + 1];
-        c = verts + indexes[i + 2];
-
-        d0 = b->xyz[0] - a->xyz[0];
-        d1 = b->xyz[1] - a->xyz[1];
-        d2 = b->xyz[2] - a->xyz[2];
-
-        d3 = c->xyz[0] - a->xyz[0];
-        d4 = c->xyz[1] - a->xyz[1];
-        d5 = c->xyz[2] - a->xyz[2];
-
-        float tmp;
-
-        n0 = d4 * d2 - d5 * d1;
-        n1 = d5 * d0 - d3 * d2;
-        n2 = d3 * d1 - d4 * d0;
-
-        tmp = idMath::RSqrt(n0 * n0 + n1 * n1 + n2 * n2);
-
-        n0 *= tmp;
-        n1 *= tmp;
-        n2 *= tmp;
-
-        planes->Normal()[0] = n0;
-        planes->Normal()[1] = n1;
-        planes->Normal()[2] = n2;
-        planes->FitThroughPoint(a->xyz);
-        planes++;
-    }
-
-#endif
 }
 
 /*
@@ -14464,8 +13197,6 @@
             d9[j] = c->st[1] - a->st[1];
         }
 
-#if 1
-
         __asm
         {
             // normal
@@ -14647,236 +13378,6 @@
             movaps		t5, xmm2
         }
 
-#else
-
-        ALIGN16(float tmp[4]);
-
-        // normal
-        n0[0] = d6[0] * d2[0];
-        n0[1] = d6[1] * d2[1];
-        n0[2] = d6[2] * d2[2];
-        n0[3] = d6[3] * d2[3];
-
-        n0[0] -= d7[0] * d1[0];
-        n0[1] -= d7[1] * d1[1];
-        n0[2] -= d7[2] * d1[2];
-        n0[3] -= d7[3] * d1[3];
-
-        n1[0] = d7[0] * d0[0];
-        n1[1] = d7[1] * d0[1];
-        n1[2] = d7[2] * d0[2];
-        n1[3] = d7[3] * d0[3];
-
-        n1[0] -= d5[0] * d2[0];
-        n1[1] -= d5[1] * d2[1];
-        n1[2] -= d5[2] * d2[2];
-        n1[3] -= d5[3] * d2[3];
-
-        n2[0] = d5[0] * d1[0];
-        n2[1] = d5[1] * d1[1];
-        n2[2] = d5[2] * d1[2];
-        n2[3] = d5[3] * d1[3];
-
-        n2[0] -= d6[0] * d0[0];
-        n2[1] -= d6[1] * d0[1];
-        n2[2] -= d6[2] * d0[2];
-        n2[3] -= d6[3] * d0[3];
-
-        tmp[0] = n0[0] * n0[0];
-        tmp[1] = n0[1] * n0[1];
-        tmp[2] = n0[2] * n0[2];
-        tmp[3] = n0[3] * n0[3];
-
-        tmp[0] += n1[0] * n1[0];
-        tmp[1] += n1[1] * n1[1];
-        tmp[2] += n1[2] * n1[2];
-        tmp[3] += n1[3] * n1[3];
-
-        tmp[0] += n2[0] * n2[0];
-        tmp[1] += n2[1] * n2[1];
-        tmp[2] += n2[2] * n2[2];
-        tmp[3] += n2[3] * n2[3];
-
-        tmp[0] = idMath::RSqrt(tmp[0]);
-        tmp[1] = idMath::RSqrt(tmp[1]);
-        tmp[2] = idMath::RSqrt(tmp[2]);
-        tmp[3] = idMath::RSqrt(tmp[3]);
-
-        n0[0] *= tmp[0];
-        n0[1] *= tmp[1];
-        n0[2] *= tmp[2];
-        n0[3] *= tmp[3];
-
-        n1[0] *= tmp[0];
-        n1[1] *= tmp[1];
-        n1[2] *= tmp[2];
-        n1[3] *= tmp[3];
-
-        n2[0] *= tmp[0];
-        n2[1] *= tmp[1];
-        n2[2] *= tmp[2];
-        n2[3] *= tmp[3];
-
-        // area sign bit
-        tmp[0] = d3[0] * d9[0];
-        tmp[1] = d3[1] * d9[1];
-        tmp[2] = d3[2] * d9[2];
-        tmp[3] = d3[3] * d9[3];
-
-        tmp[0] -= d4[0] * d8[0];
-        tmp[1] -= d4[1] * d8[1];
-        tmp[2] -= d4[2] * d8[2];
-        tmp[3] -= d4[3] * d8[3];
-
-        signBit[0] = (*(unsigned long *)&tmp[0]) & (1 << 31);
-        signBit[1] = (*(unsigned long *)&tmp[1]) & (1 << 31);
-        signBit[2] = (*(unsigned long *)&tmp[2]) & (1 << 31);
-        signBit[3] = (*(unsigned long *)&tmp[3]) & (1 << 31);
-
-        // first tangent
-        t0[0] = d0[0] * d9[0];
-        t0[1] = d0[1] * d9[1];
-        t0[2] = d0[2] * d9[2];
-        t0[3] = d0[3] * d9[3];
-
-        t0[0] -= d4[0] * d5[0];
-        t0[1] -= d4[1] * d5[1];
-        t0[2] -= d4[2] * d5[2];
-        t0[3] -= d4[3] * d5[3];
-
-        t1[0] = d1[0] * d9[0];
-        t1[1] = d1[1] * d9[1];
-        t1[2] = d1[2] * d9[2];
-        t1[3] = d1[3] * d9[3];
-
-        t1[0] -= d4[0] * d6[0];
-        t1[1] -= d4[1] * d6[1];
-        t1[2] -= d4[2] * d6[2];
-        t1[3] -= d4[3] * d6[3];
-
-        t2[0] = d2[0] * d9[0];
-        t2[1] = d2[1] * d9[1];
-        t2[2] = d2[2] * d9[2];
-        t2[3] = d2[3] * d9[3];
-
-        t2[0] -= d4[0] * d7[0];
-        t2[1] -= d4[1] * d7[1];
-        t2[2] -= d4[2] * d7[2];
-        t2[3] -= d4[3] * d7[3];
-
-        tmp[0] = t0[0] * t0[0];
-        tmp[1] = t0[1] * t0[1];
-        tmp[2] = t0[2] * t0[2];
-        tmp[3] = t0[3] * t0[3];
-
-        tmp[0] += t1[0] * t1[0];
-        tmp[1] += t1[1] * t1[1];
-        tmp[2] += t1[2] * t1[2];
-        tmp[3] += t1[3] * t1[3];
-
-        tmp[0] += t2[0] * t2[0];
-        tmp[1] += t2[1] * t2[1];
-        tmp[2] += t2[2] * t2[2];
-        tmp[3] += t2[3] * t2[3];
-
-        tmp[0] = idMath::RSqrt(tmp[0]);
-        tmp[1] = idMath::RSqrt(tmp[1]);
-        tmp[2] = idMath::RSqrt(tmp[2]);
-        tmp[3] = idMath::RSqrt(tmp[3]);
-
-        *(unsigned long *)&tmp[0] ^= signBit[0];
-        *(unsigned long *)&tmp[1] ^= signBit[1];
-        *(unsigned long *)&tmp[2] ^= signBit[2];
-        *(unsigned long *)&tmp[3] ^= signBit[3];
-
-        t0[0] *= tmp[0];
-        t0[1] *= tmp[1];
-        t0[2] *= tmp[2];
-        t0[3] *= tmp[3];
-
-        t1[0] *= tmp[0];
-        t1[1] *= tmp[1];
-        t1[2] *= tmp[2];
-        t1[3] *= tmp[3];
-
-        t2[0] *= tmp[0];
-        t2[1] *= tmp[1];
-        t2[2] *= tmp[2];
-        t2[3] *= tmp[3];
-
-        // second tangent
-        t3[0] = d3[0] * d5[0];
-        t3[1] = d3[1] * d5[1];
-        t3[2] = d3[2] * d5[2];
-        t3[3] = d3[3] * d5[3];
-
-        t3[0] -= d0[0] * d8[0];
-        t3[1] -= d0[1] * d8[1];
-        t3[2] -= d0[2] * d8[2];
-        t3[3] -= d0[3] * d8[3];
-
-        t4[0] = d3[0] * d6[0];
-        t4[1] = d3[1] * d6[1];
-        t4[2] = d3[2] * d6[2];
-        t4[3] = d3[3] * d6[3];
-
-        t4[0] -= d1[0] * d8[0];
-        t4[1] -= d1[1] * d8[1];
-        t4[2] -= d1[2] * d8[2];
-        t4[3] -= d1[3] * d8[3];
-
-        t5[0] = d3[0] * d7[0];
-        t5[1] = d3[1] * d7[1];
-        t5[2] = d3[2] * d7[2];
-        t5[3] = d3[3] * d7[3];
-
-        t5[0] -= d2[0] * d8[0];
-        t5[1] -= d2[1] * d8[1];
-        t5[2] -= d2[2] * d8[2];
-        t5[3] -= d2[3] * d8[3];
-
-        tmp[0] = t3[0] * t3[0];
-        tmp[1] = t3[1] * t3[1];
-        tmp[2] = t3[2] * t3[2];
-        tmp[3] = t3[3] * t3[3];
-
-        tmp[0] += t4[0] * t4[0];
-        tmp[1] += t4[1] * t4[1];
-        tmp[2] += t4[2] * t4[2];
-        tmp[3] += t4[3] * t4[3];
-
-        tmp[0] += t5[0] * t5[0];
-        tmp[1] += t5[1] * t5[1];
-        tmp[2] += t5[2] * t5[2];
-        tmp[3] += t5[3] * t5[3];
-
-        tmp[0] = idMath::RSqrt(tmp[0]);
-        tmp[1] = idMath::RSqrt(tmp[1]);
-        tmp[2] = idMath::RSqrt(tmp[2]);
-        tmp[3] = idMath::RSqrt(tmp[3]);
-
-        *(unsigned long *)&tmp[0] ^= signBit[0];
-        *(unsigned long *)&tmp[1] ^= signBit[1];
-        *(unsigned long *)&tmp[2] ^= signBit[2];
-        *(unsigned long *)&tmp[3] ^= signBit[3];
-
-        t3[0] *= tmp[0];
-        t3[1] *= tmp[1];
-        t3[2] *= tmp[2];
-        t3[3] *= tmp[3];
-
-        t4[0] *= tmp[0];
-        t4[1] *= tmp[1];
-        t4[2] *= tmp[2];
-        t4[3] *= tmp[3];
-
-        t5[0] *= tmp[0];
-        t5[1] *= tmp[1];
-        t5[2] *= tmp[2];
-        t5[3] *= tmp[3];
-
-#endif
-
         for (int j = 0; j < 4; j++)
         {
 
@@ -15019,8 +13520,6 @@
         d8 = c->st[0] - a->st[0];
         d9 = c->st[1] - a->st[1];
 
-#if 1
-
         __asm
         {
             // normal
@@ -15201,52 +13700,6 @@
             mulss		xmm2, xmm3
             movss		t5, xmm2
         }
-
-#else
-
-        float tmp;
-
-        // normal
-        n0 = d6 * d2 - d7 * d1;
-        n1 = d7 * d0 - d5 * d2;
-        n2 = d5 * d1 - d6 * d0;
-
-        tmp = idMath::RSqrt(n0 * n0 + n1 * n1 + n2 * n2);
-
-        n0 *= tmp;
-        n1 *= tmp;
-        n2 *= tmp;
-
-        // area sign bit
-        tmp = d3 * d9 - d4 * d8;
-        signBit[0] = (*(unsigned long *)&tmp) & (1 << 31);
-
-        // first tangent
-        t0 = d0 * d9 - d4 * d5;
-        t1 = d1 * d9 - d4 * d6;
-        t2 = d2 * d9 - d4 * d7;
-
-        tmp = idMath::RSqrt(t0 * t0 + t1 * t1 + t2 * t2);
-        *(unsigned long *)&tmp ^= signBit[0];
-
-        t0 *= tmp;
-        t1 *= tmp;
-        t2 *= tmp;
-
-        // second tangent
-        t3 = d3 * d5 - d0 * d8;
-        t4 = d3 * d6 - d1 * d8;
-        t5 = d3 * d7 - d2 * d8;
-
-        tmp = idMath::RSqrt(t3 * t3 + t4 * t4 + t5 * t5);
-        *(unsigned long *)&tmp ^= signBit[0];
-
-        t3 *= tmp;
-        t4 *= tmp;
-        t5 *= tmp;
-
-#endif
-
         planes->Normal()[0] = n0;
         planes->Normal()[1] = n1;
         planes->Normal()[2] = n2;
@@ -15411,8 +13864,6 @@
             d9[j] = c->st[1] - a->st[1];
         }
 
-#if 1
-
         __asm
         {
 
@@ -15514,176 +13965,6 @@
             movaps		t5, xmm4
         }
 
-#else
-
-        n0[0] = d6[0] * d2[0];
-        n0[1] = d6[1] * d2[1];
-        n0[2] = d6[2] * d2[2];
-        n0[3] = d6[3] * d2[3];
-
-        n1[0] = d7[0] * d0[0];
-        n1[1] = d7[1] * d0[1];
-        n1[2] = d7[2] * d0[2];
-        n1[3] = d7[3] * d0[3];
-
-        n2[0] = d5[0] * d1[0];
-        n2[1] = d5[1] * d1[1];
-        n2[2] = d5[2] * d1[2];
-        n2[3] = d5[3] * d1[3];
-
-        n0[0] -= d7[0] * d1[0];
-        n0[1] -= d7[1] * d1[1];
-        n0[2] -= d7[2] * d1[2];
-        n0[3] -= d7[3] * d1[3];
-
-        n1[0] -= d5[0] * d2[0];
-        n1[1] -= d5[1] * d2[1];
-        n1[2] -= d5[2] * d2[2];
-        n1[3] -= d5[3] * d2[3];
-
-        n2[0] -= d6[0] * d0[0];
-        n2[1] -= d6[1] * d0[1];
-        n2[2] -= d6[2] * d0[2];
-        n2[3] -= d6[3] * d0[3];
-
-        n0[0] *= s2[0];
-        n0[1] *= s2[1];
-        n0[2] *= s2[2];
-        n0[3] *= s2[3];
-
-        n1[0] *= s2[0];
-        n1[1] *= s2[1];
-        n1[2] *= s2[2];
-        n1[3] *= s2[3];
-
-        n2[0] *= s2[0];
-        n2[1] *= s2[1];
-        n2[2] *= s2[2];
-        n2[3] *= s2[3];
-
-        t0[0] = d0[0] * d9[0];
-        t0[1] = d0[1] * d9[1];
-        t0[2] = d0[2] * d9[2];
-        t0[3] = d0[3] * d9[3];
-
-        t1[0] = d1[0] * d9[0];
-        t1[1] = d1[1] * d9[1];
-        t1[2] = d1[2] * d9[2];
-        t1[3] = d1[3] * d9[3];
-
-        t2[0] = d2[0] * d9[0];
-        t2[1] = d2[1] * d9[1];
-        t2[2] = d2[2] * d9[2];
-        t2[3] = d2[3] * d9[3];
-
-        t0[0] -= d4[0] * d5[0];
-        t0[1] -= d4[1] * d5[1];
-        t0[2] -= d4[2] * d5[2];
-        t0[3] -= d4[3] * d5[3];
-
-        t1[0] -= d4[0] * d6[0];
-        t1[1] -= d4[1] * d6[1];
-        t1[2] -= d4[2] * d6[2];
-        t1[3] -= d4[3] * d6[3];
-
-        t2[0] -= d4[0] * d7[0];
-        t2[1] -= d4[1] * d7[1];
-        t2[2] -= d4[2] * d7[2];
-        t2[3] -= d4[3] * d7[3];
-
-        t0[0] *= s0[0];
-        t0[1] *= s0[1];
-        t0[2] *= s0[2];
-        t0[3] *= s0[3];
-
-        t1[0] *= s0[0];
-        t1[1] *= s0[1];
-        t1[2] *= s0[2];
-        t1[3] *= s0[3];
-
-        t2[0] *= s0[0];
-        t2[1] *= s0[1];
-        t2[2] *= s0[2];
-        t2[3] *= s0[3];
-
-#ifndef DERIVE_UNSMOOTHED_BITANGENT
-        t3[0] = d3[0] * d5[0];
-        t3[1] = d3[1] * d5[1];
-        t3[2] = d3[2] * d5[2];
-        t3[3] = d3[3] * d5[3];
-
-        t4[0] = d3[0] * d6[0];
-        t4[1] = d3[1] * d6[1];
-        t4[2] = d3[2] * d6[2];
-        t4[3] = d3[3] * d6[3];
-
-        t5[0] = d3[0] * d7[0];
-        t5[1] = d3[1] * d7[1];
-        t5[2] = d3[2] * d7[2];
-        t5[3] = d3[3] * d7[3];
-
-        t3[0] -= d0[0] * d8[0];
-        t3[1] -= d0[1] * d8[1];
-        t3[2] -= d0[2] * d8[2];
-        t3[3] -= d0[3] * d8[3];
-
-        t4[0] -= d1[0] * d8[0];
-        t4[1] -= d1[1] * d8[1];
-        t4[2] -= d1[2] * d8[2];
-        t4[3] -= d1[3] * d8[3];
-
-        t5[0] -= d2[0] * d8[0];
-        t5[1] -= d2[1] * d8[1];
-        t5[2] -= d2[2] * d8[2];
-        t5[3] -= d2[3] * d8[3];
-#else
-        t3[0] = n2[0] * t1[0];
-        t3[1] = n2[1] * t1[1];
-        t3[2] = n2[2] * t1[2];
-        t3[3] = n2[3] * t1[3];
-
-        t4[0] = n0[0] * t2[0];
-        t4[1] = n0[1] * t2[1];
-        t4[2] = n0[2] * t2[2];
-        t4[3] = n0[3] * t2[3];
-
-        t5[0] = n1[0] * t0[0];
-        t5[1] = n1[1] * t0[1];
-        t5[2] = n1[2] * t0[2];
-        t5[3] = n1[3] * t0[3];
-
-        t3[0] -= n1[0] * t2[0];
-        t3[1] -= n1[1] * t2[1];
-        t3[2] -= n1[2] * t2[2];
-        t3[3] -= n1[3] * t2[3];
-
-        t4[0] -= n2[0] * t0[0];
-        t4[1] -= n2[1] * t0[1];
-        t4[2] -= n2[2] * t0[2];
-        t4[3] -= n2[3] * t0[3];
-
-        t5[0] -= n0[0] * t1[0];
-        t5[1] -= n0[1] * t1[1];
-        t5[2] -= n0[2] * t1[2];
-        t5[3] -= n0[3] * t1[3];
-#endif
-        t3[0] *= s1[0];
-        t3[1] *= s1[1];
-        t3[2] *= s1[2];
-        t3[3] *= s1[3];
-
-        t4[0] *= s1[0];
-        t4[1] *= s1[1];
-        t4[2] *= s1[2];
-        t4[3] *= s1[3];
-
-        t5[0] *= s1[0];
-        t5[1] *= s1[1];
-        t5[2] *= s1[2];
-        t5[3] *= s1[3];
-
-#endif
-
         for (j = 0; j < 4; j++)
         {
             idDrawVert *a;
@@ -15736,8 +14017,6 @@
         d8 = c->st[0] - a->st[0];
         d9 = c->st[1] - a->st[1];
 
-#if 1
-
         __asm
         {
 
@@ -15838,29 +14117,6 @@
             mulss		xmm4, xmm7
             movss		t5, xmm4
         }
-
-#else
-
-        n0 = s2 * (d6 * d2 - d7 * d1);
-        n1 = s2 * (d7 * d0 - d5 * d2);
-        n2 = s2 * (d5 * d1 - d6 * d0);
-
-        t0 = s0 * (d0 * d9 - d4 * d5);
-        t1 = s0 * (d1 * d9 - d4 * d6);
-        t2 = s0 * (d2 * d9 - d4 * d7);
-
-#ifndef DERIVE_UNSMOOTHED_BITANGENT
-        t3 = s1 * (d3 * d5 - d0 * d8);
-        t4 = s1 * (d3 * d6 - d1 * d8);
-        t5 = s1 * (d3 * d7 - d2 * d8);
-#else
-        t3 = s1 * (n2 * t1 - n1 * t2);
-        t4 = s1 * (n0 * t2 - n2 * t0);
-        t5 = s1 * (n1 * t0 - n0 * t1);
-#endif
-
-#endif
-
         a->normal[0] = n0;
         a->normal[1] = n1;
         a->normal[2] = n2;
@@ -17472,7 +15728,6 @@
 */
 int VPCALL idSIMD_SSE::CreateShadowCache(idVec4 *vertexCache, int *vertRemap, const idVec3 &lightOrigin, const idDrawVert *verts, const int numVerts)
 {
-#if 1
     int outVerts;
 
     __asm
@@ -17602,35 +15857,6 @@
         mov			outVerts, ecx
     }
     return outVerts;
-
-#else
-
-    int outVerts = 0;
-    for (int i = 0; i < numVerts; i++)
-    {
-        if (vertRemap[i])
-        {
-            continue;
-        }
-        const float *v = verts[i].xyz.ToFloatPtr();
-        vertexCache[outVerts+0][0] = v[0];
-        vertexCache[outVerts+0][1] = v[1];
-        vertexCache[outVerts+0][2] = v[2];
-        vertexCache[outVerts+0][3] = 1.0f;
-
-        // R_SetupProjection() builds the projection matrix with a slight crunch
-        // for depth, which keeps this w=0 division from rasterizing right at the
-        // wrap around point and causing depth fighting with the rear caps
-        vertexCache[outVerts+1][0] = v[0] - lightOrigin[0];
-        vertexCache[outVerts+1][1] = v[1] - lightOrigin[1];
-        vertexCache[outVerts+1][2] = v[2] - lightOrigin[2];
-        vertexCache[outVerts+1][3] = 0.0f;
-        vertRemap[i] = outVerts;
-        outVerts += 2;
-    }
-    return outVerts;
-
-#endif
 }
 
 /*
@@ -17640,8 +15866,6 @@
 */
 int VPCALL idSIMD_SSE::CreateVertexProgramShadowCache(idVec4 *vertexCache, const idDrawVert *verts, const int numVerts)
 {
-#if 1
-
     __asm
     {
         movaps		xmm4, SIMD_SP_lastOne
@@ -17717,24 +15941,6 @@
     }
     return numVerts * 2;
 
-#else
-
-    for (int i = 0; i < numVerts; i++)
-    {
-        const float *v = verts[i].xyz.ToFloatPtr();
-        vertexCache[i*2+0][0] = v[0];
-        vertexCache[i*2+0][1] = v[1];
-        vertexCache[i*2+0][2] = v[2];
-        vertexCache[i*2+0][3] = 1.0f;
-
-        vertexCache[i*2+1][0] = v[0];
-        vertexCache[i*2+1][1] = v[1];
-        vertexCache[i*2+1][2] = v[2];
-        vertexCache[i*2+1][3] = 0.0f;
-    }
-    return numVerts * 2;
-
-#endif
 }
 
 /*
@@ -18357,8 +16563,6 @@
 */
 void VPCALL idSIMD_SSE::MixSoundTwoSpeakerMono(float *mixBuffer, const float *samples, const int numSamples, const float lastV[2], const float currentV[2])
 {
-#if 1
-
     ALIGN16(float incs[2]);
 
     assert(numSamples == MIXBUFFER_SAMPLES);
@@ -18420,40 +16624,6 @@
         jl			loop16
     }
 
-#else
-
-    int i;
-    float incL;
-    float incR;
-    float sL0, sL1;
-    float sR0, sR1;
-
-    assert(numSamples == MIXBUFFER_SAMPLES);
-
-    incL = (currentV[0] - lastV[0]) / MIXBUFFER_SAMPLES;
-    incR = (currentV[1] - lastV[1]) / MIXBUFFER_SAMPLES;
-
-    sL0 = lastV[0];
-    sR0 = lastV[1];
-    sL1 = lastV[0] + incL;
-    sR1 = lastV[1] + incR;
-
-    incL *= 2;
-    incR *= 2;
-
-    for (i = 0; i < MIXBUFFER_SAMPLES; i += 2)
-    {
-        mixBuffer[i*2+0] += samples[i+0] * sL0;
-        mixBuffer[i*2+1] += samples[i+0] * sR0;
-        mixBuffer[i*2+2] += samples[i+1] * sL1;
-        mixBuffer[i*2+3] += samples[i+1] * sR1;
-        sL0 += incL;
-        sR0 += incR;
-        sL1 += incL;
-        sR1 += incR;
-    }
-
-#endif
 }
 
 /*
@@ -18463,8 +16633,6 @@
 */
 void VPCALL idSIMD_SSE::MixSoundTwoSpeakerStereo(float *mixBuffer, const float *samples, const int numSamples, const float lastV[2], const float currentV[2])
 {
-#if 1
-
     ALIGN16(float incs[2]);
 
     assert(numSamples == MIXBUFFER_SAMPLES);
@@ -18522,40 +16690,6 @@
         jl			loop16
     }
 
-#else
-
-    int i;
-    float incL;
-    float incR;
-    float sL0, sL1;
-    float sR0, sR1;
-
-    assert(numSamples == MIXBUFFER_SAMPLES);
-
-    incL = (currentV[0] - lastV[0]) / MIXBUFFER_SAMPLES;
-    incR = (currentV[1] - lastV[1]) / MIXBUFFER_SAMPLES;
-
-    sL0 = lastV[0];
-    sR0 = lastV[1];
-    sL1 = lastV[0] + incL;
-    sR1 = lastV[1] + incR;
-
-    incL *= 2;
-    incR *= 2;
-
-    for (i = 0; i < MIXBUFFER_SAMPLES; i += 2)
-    {
-        mixBuffer[i*2+0] += samples[i*2+0] * sL0;
-        mixBuffer[i*2+1] += samples[i*2+1] * sR0;
-        mixBuffer[i*2+2] += samples[i*2+2] * sL1;
-        mixBuffer[i*2+3] += samples[i*2+3] * sR1;
-        sL0 += incL;
-        sR0 += incR;
-        sL1 += incL;
-        sR1 += incR;
-    }
-
-#endif
 }
 
 /*
@@ -18565,8 +16699,6 @@
 */
 void VPCALL idSIMD_SSE::MixSoundSixSpeakerMono(float *mixBuffer, const float *samples, const int numSamples, const float lastV[6], const float currentV[6])
 {
-#if 1
-
     ALIGN16(float incs[6]);
 
     assert(numSamples == MIXBUFFER_SAMPLES);
@@ -18658,77 +16790,6 @@
 
         jl			loop24
     }
-
-#else
-
-    int i;
-    float sL0, sL1, sL2, sL3, sL4, sL5, sL6, sL7, sL8, sL9, sL10, sL11;
-    float incL0, incL1, incL2, incL3, incL4, incL5;
-
-    assert(numSamples == MIXBUFFER_SAMPLES);
-
-    incL0 = (currentV[0] - lastV[0]) / MIXBUFFER_SAMPLES;
-    incL1 = (currentV[1] - lastV[1]) / MIXBUFFER_SAMPLES;
-    incL2 = (currentV[2] - lastV[2]) / MIXBUFFER_SAMPLES;
-    incL3 = (currentV[3] - lastV[3]) / MIXBUFFER_SAMPLES;
-    incL4 = (currentV[4] - lastV[4]) / MIXBUFFER_SAMPLES;
-    incL5 = (currentV[5] - lastV[5]) / MIXBUFFER_SAMPLES;
-
-    sL0  = lastV[0];
-    sL1  = lastV[1];
-    sL2  = lastV[2];
-    sL3  = lastV[3];
-    sL4  = lastV[4];
-    sL5  = lastV[5];
-
-    sL6  = lastV[0] + incL0;
-    sL7  = lastV[1] + incL1;
-    sL8  = lastV[2] + incL2;
-    sL9  = lastV[3] + incL3;
-    sL10 = lastV[4] + incL4;
-    sL11 = lastV[5] + incL5;
-
-    incL0 *= 2;
-    incL1 *= 2;
-    incL2 *= 2;
-    incL3 *= 2;
-    incL4 *= 2;
-    incL5 *= 2;
-
-    for (i = 0; i <= MIXBUFFER_SAMPLES - 2; i += 2)
-    {
-        mixBuffer[i*6+ 0] += samples[i+0] * sL0;
-        mixBuffer[i*6+ 1] += samples[i+0] * sL1;
-        mixBuffer[i*6+ 2] += samples[i+0] * sL2;
-        mixBuffer[i*6+ 3] += samples[i+0] * sL3;
-
-        mixBuffer[i*6+ 4] += samples[i+0] * sL4;
-        mixBuffer[i*6+ 5] += samples[i+0] * sL5;
-        mixBuffer[i*6+ 6] += samples[i+1] * sL6;
-        mixBuffer[i*6+ 7] += samples[i+1] * sL7;
-
-        mixBuffer[i*6+ 8] += samples[i+1] * sL8;
-        mixBuffer[i*6+ 9] += samples[i+1] * sL9;
-        mixBuffer[i*6+10] += samples[i+1] * sL10;
-        mixBuffer[i*6+11] += samples[i+1] * sL11;
-
-        sL0  += incL0;
-        sL1  += incL1;
-        sL2  += incL2;
-        sL3  += incL3;
-
-        sL4  += incL4;
-        sL5  += incL5;
-        sL6  += incL0;
-        sL7  += incL1;
-
-        sL8  += incL2;
-        sL9  += incL3;
-        sL10 += incL4;
-        sL11 += incL5;
-    }
-
-#endif
 }
 
 /*
@@ -18738,8 +16799,6 @@
 */
 void VPCALL idSIMD_SSE::MixSoundSixSpeakerStereo(float *mixBuffer, const float *samples, const int numSamples, const float lastV[6], const float currentV[6])
 {
-#if 1
-
     ALIGN16(float incs[6]);
 
     assert(numSamples == MIXBUFFER_SAMPLES);
@@ -18815,78 +16874,6 @@
         emms
     }
 
-#else
-
-    int i;
-    float sL0, sL1, sL2, sL3, sL4, sL5, sL6, sL7, sL8, sL9, sL10, sL11;
-    float incL0, incL1, incL2, incL3, incL4, incL5;
-
-    assert(numSamples == MIXBUFFER_SAMPLES);
-    assert(SPEAKER_RIGHT == 1);
-    assert(SPEAKER_BACKRIGHT == 5);
-
-    incL0 = (currentV[0] - lastV[0]) / MIXBUFFER_SAMPLES;
-    incL1 = (currentV[1] - lastV[1]) / MIXBUFFER_SAMPLES;
-    incL2 = (currentV[2] - lastV[2]) / MIXBUFFER_SAMPLES;
-    incL3 = (currentV[3] - lastV[3]) / MIXBUFFER_SAMPLES;
-    incL4 = (currentV[4] - lastV[4]) / MIXBUFFER_SAMPLES;
-    incL5 = (currentV[5] - lastV[5]) / MIXBUFFER_SAMPLES;
-
-    sL0  = lastV[0];
-    sL1  = lastV[1];
-    sL2  = lastV[2];
-    sL3  = lastV[3];
-    sL4  = lastV[4];
-    sL5  = lastV[5];
-
-    sL6  = lastV[0] + incL0;
-    sL7  = lastV[1] + incL1;
-    sL8  = lastV[2] + incL2;
-    sL9  = lastV[3] + incL3;
-    sL10 = lastV[4] + incL4;
-    sL11 = lastV[5] + incL5;
-
-    incL0 *= 2;
-    incL1 *= 2;
-    incL2 *= 2;
-    incL3 *= 2;
-    incL4 *= 2;
-    incL5 *= 2;
-
-    for (i = 0; i <= MIXBUFFER_SAMPLES - 2; i += 2)
-    {
-        mixBuffer[i*6+ 0] += samples[i*2+0+0] * sL0;
-        mixBuffer[i*6+ 1] += samples[i*2+0+1] * sL1;
-        mixBuffer[i*6+ 2] += samples[i*2+0+0] * sL2;
-        mixBuffer[i*6+ 3] += samples[i*2+0+0] * sL3;
-
-        mixBuffer[i*6+ 4] += samples[i*2+0+0] * sL4;
-        mixBuffer[i*6+ 5] += samples[i*2+0+1] * sL5;
-        mixBuffer[i*6+ 6] += samples[i*2+2+0] * sL6;
-        mixBuffer[i*6+ 7] += samples[i*2+2+1] * sL7;
-
-        mixBuffer[i*6+ 8] += samples[i*2+2+0] * sL8;
-        mixBuffer[i*6+ 9] += samples[i*2+2+0] * sL9;
-        mixBuffer[i*6+10] += samples[i*2+2+0] * sL10;
-        mixBuffer[i*6+11] += samples[i*2+2+1] * sL11;
-
-        sL0  += incL0;
-        sL1  += incL1;
-        sL2  += incL2;
-        sL3  += incL3;
-
-        sL4  += incL4;
-        sL5  += incL5;
-        sL6  += incL0;
-        sL7  += incL1;
-
-        sL8  += incL2;
-        sL9  += incL3;
-        sL10 += incL4;
-        sL11 += incL5;
-    }
-
-#endif
 }
 
 /*
@@ -18896,8 +16883,6 @@
 */
 void VPCALL idSIMD_SSE::MixedSoundToSamples(short *samples, const float *mixBuffer, const int numSamples)
 {
-#if 1
-
     assert((numSamples % MIXBUFFER_SAMPLES) == 0);
 
     __asm
@@ -18955,25 +16940,6 @@
         emms
     }
 
-#else
-
-    for (int i = 0; i < numSamples; i++)
-    {
-        if (mixBuffer[i] <= -32768.0f)
-        {
-            samples[i] = -32768;
-        }
-        else if (mixBuffer[i] >= 32767.0f)
-        {
-            samples[i] = 32767;
-        }
-        else
-        {
-            samples[i] = (short) mixBuffer[i];
-        }
-    }
-
-#endif
 }
 
 #endif /* _WIN32 */
diff -NEaurb neo/idlib/math/Simd_SSE3.cpp neo/idlib/math/Simd_SSE3.cpp
--- neo/idlib/math/Simd_SSE3.cpp	2013-08-14 01:47:54 +0000
+++ neo/idlib/math/Simd_SSE3.cpp	2013-08-13 16:10:44 +0000
@@ -274,8 +274,6 @@
 */
 void VPCALL idSIMD_SSE3::TransformVerts(idDrawVert *verts, const int numVerts, const idJointMat *joints, const idVec4 *weights, const int *index, const int numWeights)
 {
-#if 1
-
     assert(sizeof(idDrawVert) == DRAWVERT_SIZE);
     assert((int)&((idDrawVert *)0)->xyz == DRAWVERT_XYZ_OFFSET);
     assert(sizeof(idVec4) == JOINTWEIGHT_SIZE);
@@ -348,27 +346,6 @@
         done:
     }
 
-#else
-
-    int i, j;
-    const byte *jointsPtr = (byte *)joints;
-
-    for (j = i = 0; i < numVerts; i++)
-    {
-        idVec3 v;
-
-        v = (*(idJointMat *)(jointsPtr + index[j*2+0])) * weights[j];
-        while (index[j*2+1] == 0)
-        {
-            j++;
-            v += (*(idJointMat *)(jointsPtr + index[j*2+0])) * weights[j];
-        }
-        j++;
-
-        verts[i].xyz = v;
-    }
-
-#endif
 }
 
 #endif /* _WIN32 */
diff -NEaurb neo/idlib/precompiled.h neo/idlib/precompiled.h
--- neo/idlib/precompiled.h	2013-08-14 01:47:55 +0000
+++ neo/idlib/precompiled.h	2013-08-13 15:03:52 +0000
@@ -44,24 +44,8 @@
 
 #define WINVER				0x501
 
-#if 0
-// Dedicated server hits unresolved when trying to link this way now. Likely because of the 2010/Win7 transition? - TTimo
-
-#ifdef	ID_DEDICATED
-// dedicated sets windows version here
-#define	_WIN32_WINNT WINVER
-#define	WIN32_LEAN_AND_MEAN
-#else
-// non-dedicated includes MFC and sets windows version here
-#include "../tools/comafx/StdAfx.h"			// this will go away when MFC goes away
-#endif
-
-#else
-
 #include "../tools/comafx/StdAfx.h"
 
-#endif
-
 #include <winsock2.h>
 #include <mmsystem.h>
 #include <mmreg.h>
@@ -75,6 +59,7 @@
 #endif /* !GAME_DLL */
 #endif /* !_D3SDK */
 
+#pragma warning(disable : 4005)				// macro redefinition
 #pragma warning(disable : 4100)				// unreferenced formal parameter
 #pragma warning(disable : 4244)				// conversion to smaller type, possible loss of data
 #pragma warning(disable : 4714)				// function marked as __forceinline not inlined
@@ -82,6 +67,12 @@
 
 #include <malloc.h>							// no malloc.h on mac or unix
 #include <windows.h>						// for qgl.h
+#include <omp.h>							// for threading
+
+typedef omp_lock_t semaphore_t;
+#define SEM_INIT(mutex_addr) omp_init_lock(mutex_addr);
+#define SEM_WAIT(mutex_addr) while (!omp_test_lock(mutex_addr))
+#define SEM_POST(mutex_addr) omp_unset_lock(mutex_addr)
 #undef FindText								// stupid namespace poluting Microsoft monkeys
 
 #endif /* _WIN32 */
@@ -96,6 +87,7 @@
 #include <stdio.h>
 #include <stdlib.h>
 #include <stdarg.h>
+#include <stddef.h>
 #include <string.h>
 #include <assert.h>
 #include <time.h>
@@ -103,6 +95,7 @@
 #include <typeinfo>
 #include <errno.h>
 #include <math.h>
+#include <intrin.h>
 
 //-----------------------------------------------------
 
diff -NEaurb neo/idlib.vcxproj neo/idlib.vcxproj
--- neo/idlib.vcxproj	2011-12-26 04:15:38 +0000
+++ neo/idlib.vcxproj	2013-08-13 14:37:21 +0000
@@ -46,30 +46,37 @@
   <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Dedicated Release|Win32'" Label="Configuration">
     <ConfigurationType>StaticLibrary</ConfigurationType>
     <CharacterSet>MultiByte</CharacterSet>
+    <PlatformToolset>v110</PlatformToolset>
   </PropertyGroup>
   <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Dedicated Debug with inlines|Win32'" Label="Configuration">
     <ConfigurationType>StaticLibrary</ConfigurationType>
     <CharacterSet>MultiByte</CharacterSet>
+    <PlatformToolset>v110</PlatformToolset>
   </PropertyGroup>
   <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Dedicated Debug|Win32'" Label="Configuration">
     <ConfigurationType>StaticLibrary</ConfigurationType>
     <CharacterSet>MultiByte</CharacterSet>
+    <PlatformToolset>v110</PlatformToolset>
   </PropertyGroup>
   <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug with inlines and memory log|Win32'" Label="Configuration">
     <ConfigurationType>StaticLibrary</ConfigurationType>
     <CharacterSet>MultiByte</CharacterSet>
+    <PlatformToolset>v110</PlatformToolset>
   </PropertyGroup>
   <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug with inlines|Win32'" Label="Configuration">
     <ConfigurationType>StaticLibrary</ConfigurationType>
     <CharacterSet>MultiByte</CharacterSet>
+    <PlatformToolset>v110</PlatformToolset>
   </PropertyGroup>
   <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|Win32'" Label="Configuration">
     <ConfigurationType>StaticLibrary</ConfigurationType>
     <CharacterSet>MultiByte</CharacterSet>
+    <PlatformToolset>v110</PlatformToolset>
   </PropertyGroup>
   <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'" Label="Configuration">
     <ConfigurationType>StaticLibrary</ConfigurationType>
     <CharacterSet>MultiByte</CharacterSet>
+    <PlatformToolset>v110</PlatformToolset>
   </PropertyGroup>
   <Import Project="$(VCTargetsPath)\Microsoft.Cpp.props" />
   <ImportGroup Label="ExtensionSettings">
@@ -148,7 +155,30 @@
     <CodeAnalysisRules Condition="'$(Configuration)|$(Platform)'=='Release|Win32'" />
     <CodeAnalysisRuleAssemblies Condition="'$(Configuration)|$(Platform)'=='Release|Win32'" />
   </PropertyGroup>
-  <ItemDefinitionGroup>
+  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release|Win32'">
+    <ClCompile>
+      <WarningLevel>Level3</WarningLevel>
+      <PrecompiledHeader>
+      </PrecompiledHeader>
+      <MultiProcessorCompilation>true</MultiProcessorCompilation>
+      <EnableParallelCodeGeneration>true</EnableParallelCodeGeneration>
+      <OpenMPSupport>true</OpenMPSupport>
+    </ClCompile>
+  </ItemDefinitionGroup>
+  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Dedicated Release|Win32'">
+    <ClCompile>
+      <MultiProcessorCompilation>true</MultiProcessorCompilation>
+      <EnableParallelCodeGeneration>true</EnableParallelCodeGeneration>
+      <PrecompiledHeader />
+    </ClCompile>
+  </ItemDefinitionGroup>
+  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">
+    <ClCompile>
+      <PreprocessorDefinitions>_ALLOW_KEYWORD_MACROS;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <MultiProcessorCompilation>true</MultiProcessorCompilation>
+      <EnableParallelCodeGeneration>true</EnableParallelCodeGeneration>
+      <OpenMPSupport>true</OpenMPSupport>
+    </ClCompile>
   </ItemDefinitionGroup>
   <ItemGroup>
     <ClCompile Include="idlib\bv\Bounds.cpp" />
diff -NEaurb neo/openal/include/dxerr.h neo/openal/include/dxerr.h
--- neo/openal/include/dxerr.h	1970-01-01 00:00:00 +0000
+++ neo/openal/include/dxerr.h	2013-08-13 11:16:47 +0000
@@ -0,0 +1,99 @@
+/*==========================================================================;
+ *
+ *
+ *  File:   dxerr.h
+ *  Content:    DirectX Error Library Include File
+ *
+ ****************************************************************************/
+
+#ifndef _DXERR_H_
+#define _DXERR_H_
+
+#ifdef __cplusplus
+extern "C" {
+#endif //__cplusplus
+
+//
+//  DXGetErrorString
+//
+//  Desc:  Converts a DirectX HRESULT to a string
+//
+//  Args:  HRESULT hr   Can be any error code from
+//                      XACT XAUDIO2 XAPO XINPUT DXGI D3D10 D3DX10 D3D9 D3DX9 DDRAW DSOUND DINPUT DSHOW
+//
+//  Return: Converted string
+//
+    const char*  WINAPI DXGetErrorStringA(__in HRESULT hr);
+    const WCHAR* WINAPI DXGetErrorStringW(__in HRESULT hr);
+
+#ifdef UNICODE
+#define DXGetErrorString DXGetErrorStringW
+#else
+#define DXGetErrorString DXGetErrorStringA
+#endif
+
+
+//
+//  DXGetErrorDescription
+//
+//  Desc:  Returns a string description of a DirectX HRESULT
+//
+//  Args:  HRESULT hr   Can be any error code from
+//                      XACT XAUDIO2 XAPO XINPUT DXGI D3D10 D3DX10 D3D9 D3DX9 DDRAW DSOUND DINPUT DSHOW
+//
+//  Return: String description
+//
+    const char*  WINAPI DXGetErrorDescriptionA(__in HRESULT hr);
+    const WCHAR* WINAPI DXGetErrorDescriptionW(__in HRESULT hr);
+
+#ifdef UNICODE
+#define DXGetErrorDescription DXGetErrorDescriptionW
+#else
+#define DXGetErrorDescription DXGetErrorDescriptionA
+#endif
+
+
+//
+//  DXTrace
+//
+//  Desc:  Outputs a formatted error message to the debug stream
+//
+//  Args:  CHAR* strFile   The current file, typically passed in using the
+//                         __FILE__ macro.
+//         DWORD dwLine    The current line number, typically passed in using the
+//                         __LINE__ macro.
+//         HRESULT hr      An HRESULT that will be traced to the debug stream.
+//         CHAR* strMsg    A string that will be traced to the debug stream (may be NULL)
+//         BOOL bPopMsgBox If TRUE, then a message box will popup also containing the passed info.
+//
+//  Return: The hr that was passed in.
+//
+    HRESULT WINAPI DXTraceA(__in_z const char* strFile, __in DWORD dwLine, __in HRESULT hr, __in_z_opt const char* strMsg, __in BOOL bPopMsgBox);
+    HRESULT WINAPI DXTraceW(__in_z const char* strFile, __in DWORD dwLine, __in HRESULT hr, __in_z_opt const WCHAR* strMsg, __in BOOL bPopMsgBox);
+
+#ifdef UNICODE
+#define DXTrace DXTraceW
+#else
+#define DXTrace DXTraceA
+#endif
+
+
+//
+// Helper macros
+//
+#if defined(DEBUG) | defined(_DEBUG)
+#define DXTRACE_MSG(str)              DXTrace( __FILE__, (DWORD)__LINE__, 0, str, FALSE )
+#define DXTRACE_ERR(str,hr)           DXTrace( __FILE__, (DWORD)__LINE__, hr, str, FALSE )
+#define DXTRACE_ERR_MSGBOX(str,hr)    DXTrace( __FILE__, (DWORD)__LINE__, hr, str, TRUE )
+#else
+#define DXTRACE_MSG(str)              (0L)
+#define DXTRACE_ERR(str,hr)           (hr)
+#define DXTRACE_ERR_MSGBOX(str,hr)    (hr)
+#endif
+
+
+#ifdef __cplusplus
+}
+#endif //__cplusplus
+
+#endif // _DXERR_H_
diff -NEaurb neo/renderer/Cinematic.cpp neo/renderer/Cinematic.cpp
--- neo/renderer/Cinematic.cpp	2013-08-14 01:47:51 +0000
+++ neo/renderer/Cinematic.cpp	2013-08-13 16:10:44 +0000
@@ -31,7 +31,7 @@
 
 #define JPEG_INTERNALS
 extern "C" {
-#include "jpeg-6/jpeglib.h"
+#include "jpeg-8c/jpeglib.h"
 }
 
 #include "tr_local.h"
@@ -511,7 +511,6 @@
 */
 void idCinematicLocal::move8_32(byte *src, byte *dst, int spl)
 {
-#if 1
     int *dsrc, *ddst;
     int dspl;
 
@@ -590,61 +589,6 @@
     ddst[7*dspl+5] = dsrc[7*dspl+5];
     ddst[7*dspl+6] = dsrc[7*dspl+6];
     ddst[7*dspl+7] = dsrc[7*dspl+7];
-#else
-    double *dsrc, *ddst;
-    int dspl;
-
-    dsrc = (double *)src;
-    ddst = (double *)dst;
-    dspl = spl>>3;
-
-    ddst[0] = dsrc[0];
-    ddst[1] = dsrc[1];
-    ddst[2] = dsrc[2];
-    ddst[3] = dsrc[3];
-    dsrc += dspl;
-    ddst += dspl;
-    ddst[0] = dsrc[0];
-    ddst[1] = dsrc[1];
-    ddst[2] = dsrc[2];
-    ddst[3] = dsrc[3];
-    dsrc += dspl;
-    ddst += dspl;
-    ddst[0] = dsrc[0];
-    ddst[1] = dsrc[1];
-    ddst[2] = dsrc[2];
-    ddst[3] = dsrc[3];
-    dsrc += dspl;
-    ddst += dspl;
-    ddst[0] = dsrc[0];
-    ddst[1] = dsrc[1];
-    ddst[2] = dsrc[2];
-    ddst[3] = dsrc[3];
-    dsrc += dspl;
-    ddst += dspl;
-    ddst[0] = dsrc[0];
-    ddst[1] = dsrc[1];
-    ddst[2] = dsrc[2];
-    ddst[3] = dsrc[3];
-    dsrc += dspl;
-    ddst += dspl;
-    ddst[0] = dsrc[0];
-    ddst[1] = dsrc[1];
-    ddst[2] = dsrc[2];
-    ddst[3] = dsrc[3];
-    dsrc += dspl;
-    ddst += dspl;
-    ddst[0] = dsrc[0];
-    ddst[1] = dsrc[1];
-    ddst[2] = dsrc[2];
-    ddst[3] = dsrc[3];
-    dsrc += dspl;
-    ddst += dspl;
-    ddst[0] = dsrc[0];
-    ddst[1] = dsrc[1];
-    ddst[2] = dsrc[2];
-    ddst[3] = dsrc[3];
-#endif
 }
 
 /*
@@ -654,7 +598,6 @@
 */
 void idCinematicLocal::move4_32(byte *src, byte *dst, int spl)
 {
-#if 1
     int *dsrc, *ddst;
     int dspl;
 
@@ -681,29 +624,6 @@
     ddst[3*dspl+1] = dsrc[3*dspl+1];
     ddst[3*dspl+2] = dsrc[3*dspl+2];
     ddst[3*dspl+3] = dsrc[3*dspl+3];
-#else
-    double *dsrc, *ddst;
-    int dspl;
-
-    dsrc = (double *)src;
-    ddst = (double *)dst;
-    dspl = spl>>3;
-
-    ddst[0] = dsrc[0];
-    ddst[1] = dsrc[1];
-    dsrc += dspl;
-    ddst += dspl;
-    ddst[0] = dsrc[0];
-    ddst[1] = dsrc[1];
-    dsrc += dspl;
-    ddst += dspl;
-    ddst[0] = dsrc[0];
-    ddst[1] = dsrc[1];
-    dsrc += dspl;
-    ddst += dspl;
-    ddst[0] = dsrc[0];
-    ddst[1] = dsrc[1];
-#endif
 }
 
 /*
@@ -713,7 +633,6 @@
 */
 void idCinematicLocal::blit8_32(byte *src, byte *dst, int spl)
 {
-#if 1
     int *dsrc, *ddst;
     int dspl;
 
@@ -792,61 +711,6 @@
     ddst[7*dspl+5] = dsrc[61];
     ddst[7*dspl+6] = dsrc[62];
     ddst[7*dspl+7] = dsrc[63];
-#else
-    double *dsrc, *ddst;
-    int dspl;
-
-    dsrc = (double *)src;
-    ddst = (double *)dst;
-    dspl = spl>>3;
-
-    ddst[0] = dsrc[0];
-    ddst[1] = dsrc[1];
-    ddst[2] = dsrc[2];
-    ddst[3] = dsrc[3];
-    dsrc += 4;
-    ddst += dspl;
-    ddst[0] = dsrc[0];
-    ddst[1] = dsrc[1];
-    ddst[2] = dsrc[2];
-    ddst[3] = dsrc[3];
-    dsrc += 4;
-    ddst += dspl;
-    ddst[0] = dsrc[0];
-    ddst[1] = dsrc[1];
-    ddst[2] = dsrc[2];
-    ddst[3] = dsrc[3];
-    dsrc += 4;
-    ddst += dspl;
-    ddst[0] = dsrc[0];
-    ddst[1] = dsrc[1];
-    ddst[2] = dsrc[2];
-    ddst[3] = dsrc[3];
-    dsrc += 4;
-    ddst += dspl;
-    ddst[0] = dsrc[0];
-    ddst[1] = dsrc[1];
-    ddst[2] = dsrc[2];
-    ddst[3] = dsrc[3];
-    dsrc += 4;
-    ddst += dspl;
-    ddst[0] = dsrc[0];
-    ddst[1] = dsrc[1];
-    ddst[2] = dsrc[2];
-    ddst[3] = dsrc[3];
-    dsrc += 4;
-    ddst += dspl;
-    ddst[0] = dsrc[0];
-    ddst[1] = dsrc[1];
-    ddst[2] = dsrc[2];
-    ddst[3] = dsrc[3];
-    dsrc += 4;
-    ddst += dspl;
-    ddst[0] = dsrc[0];
-    ddst[1] = dsrc[1];
-    ddst[2] = dsrc[2];
-    ddst[3] = dsrc[3];
-#endif
 }
 
 /*
@@ -856,7 +720,6 @@
 */
 void idCinematicLocal::blit4_32(byte *src, byte *dst, int spl)
 {
-#if 1
     int *dsrc, *ddst;
     int dspl;
 
@@ -880,29 +743,6 @@
     ddst[3*dspl+1] = dsrc[13];
     ddst[3*dspl+2] = dsrc[14];
     ddst[3*dspl+3] = dsrc[15];
-#else
-    double *dsrc, *ddst;
-    int dspl;
-
-    dsrc = (double *)src;
-    ddst = (double *)dst;
-    dspl = spl>>3;
-
-    ddst[0] = dsrc[0];
-    ddst[1] = dsrc[1];
-    dsrc += 2;
-    ddst += dspl;
-    ddst[0] = dsrc[0];
-    ddst[1] = dsrc[1];
-    dsrc += 2;
-    ddst += dspl;
-    ddst[0] = dsrc[0];
-    ddst[1] = dsrc[1];
-    dsrc += 2;
-    ddst += dspl;
-    ddst[0] = dsrc[0];
-    ddst[1] = dsrc[1];
-#endif
 }
 
 /*
@@ -912,7 +752,6 @@
 */
 void idCinematicLocal::blit2_32(byte *src, byte *dst, int spl)
 {
-#if 1
     int *dsrc, *ddst;
     int dspl;
 
@@ -924,17 +763,6 @@
     ddst[0*dspl+1] = dsrc[1];
     ddst[1*dspl+0] = dsrc[2];
     ddst[1*dspl+1] = dsrc[3];
-#else
-    double *dsrc, *ddst;
-    int dspl;
-
-    dsrc = (double *)src;
-    ddst = (double *)dst;
-    dspl = spl>>3;
-
-    ddst[0] = dsrc[0];
-    ddst[dspl] = dsrc[1];
-#endif
 }
 
 /*
@@ -1539,7 +1367,7 @@
  */
 
 
-METHODDEF boolean fill_input_buffer(j_decompress_ptr cinfo)
+METHODDEF(boolean) fill_input_buffer(j_decompress_ptr cinfo)
 {
     my_src_ptr src = (my_src_ptr) cinfo->src;
     int nbytes;
@@ -1571,7 +1399,7 @@
  */
 
 
-METHODDEF void init_source(j_decompress_ptr cinfo)
+METHODDEF(void) init_source(j_decompress_ptr cinfo)
 {
     my_src_ptr src = (my_src_ptr) cinfo->src;
 
@@ -1594,7 +1422,7 @@
  * buffer is the application writer's problem.
  */
 
-METHODDEF void
+METHODDEF(void)
 skip_input_data(j_decompress_ptr cinfo, long num_bytes)
 {
     my_src_ptr src = (my_src_ptr) cinfo->src;
@@ -1630,14 +1458,14 @@
  * for error exit.
  */
 
-METHODDEF void
+METHODDEF(void)
 term_source(j_decompress_ptr cinfo)
 {
     cinfo = cinfo;
     /* no work necessary here */
 }
 
-GLOBAL void
+GLOBAL(void)
 jpeg_memory_src(j_decompress_ptr cinfo, byte *infile, int size)
 {
     my_src_ptr src;
diff -NEaurb neo/renderer/Image_files.cpp neo/renderer/Image_files.cpp
--- neo/renderer/Image_files.cpp	2013-08-14 01:47:51 +0000
+++ neo/renderer/Image_files.cpp	2013-08-13 11:16:47 +0000
@@ -28,7 +28,6 @@
 
 #include "../idlib/precompiled.h"
 #pragma hdrstop
-
 #include "tr_local.h"
 
 /*
@@ -47,38 +46,35 @@
  * You may also wish to include "jerror.h".
  */
 
+#define JPEG_INTERNALS
 extern "C" {
-#include "jpeg-6/jpeglib.h"
+#include "jpeg-8c/jpeglib.h"
 
     // hooks from jpeg lib to our system
-
-    void jpg_Error(const char *fmt, ...)
+    static void jpg_Error(j_common_ptr cinfo)
     {
-        va_list		argptr;
-        char		msg[2048];
+        char buffer[JMSG_LENGTH_MAX];
 
-        va_start(argptr,fmt);
-        vsprintf(msg,fmt,argptr);
-        va_end(argptr);
+        (*cinfo->err->format_message)(cinfo, buffer);
 
-        common->FatalError("%s", msg);
+        /* Let the memory manager delete any temp files before we die */
+        jpeg_destroy(cinfo);
+
+        common->FatalError("%s", buffer);
     }
 
-    void jpg_Printf(const char *fmt, ...)
+    static void jpg_Printf(j_common_ptr cinfo)
     {
-        va_list		argptr;
-        char		msg[2048];
+        char buffer[JMSG_LENGTH_MAX];
 
-        va_start(argptr,fmt);
-        vsprintf(msg,fmt,argptr);
-        va_end(argptr);
+        /* Create the message */
+        (*cinfo->err->format_message)(cinfo, buffer);
 
-        common->Printf("%s", msg);
+        /* Send it to stderr, adding a newline */
+        common->Printf("%s\n", buffer);
     }
-
 }
 
-
 /*
 ================
 R_WriteTGA
@@ -112,7 +108,6 @@
         buffer[i+2] = data[i-imgStart+0];		// red
         buffer[i+3] = data[i-imgStart+3];		// alpha
     }
-
     fileSystem->WriteFile(filename, buffer, bufferSize);
 
     Mem_Free(buffer);
@@ -168,12 +163,10 @@
     Mem_Free(buffer);
 }
 
-
 static void LoadBMP(const char *name, byte **pic, int *width, int *height, ID_TIME_T *timestamp);
 static void LoadTGA(const char *name, byte **pic, int *width, int *height, ID_TIME_T *timestamp);
 static void LoadJPG(const char *name, byte **pic, int *width, int *height, ID_TIME_T *timestamp);
 
-
 /*
 ========================================================================
 
@@ -208,17 +201,37 @@
 ========================================================================
 */
 
+#define TGA_MAXCOLORS 16384
+
+/* Definitions for image types. */
+#define TGA_Null		0	/* no image data */
+#define TGA_Map			1	/* Uncompressed, color-mapped images. */
+#define TGA_RGB			2	/* Uncompressed, RGB images. */
+#define TGA_Mono		3	/* Uncompressed, black and white images. */
+#define TGA_RLEMap		9	/* Runlength encoded color-mapped images. */
+#define TGA_RLERGB		10	/* Runlength encoded RGB images. */
+#define TGA_RLEMono		11	/* Compressed, black and white images. */
+#define TGA_CompMap		32	/* Compressed color-mapped data, using Huffman, Delta, and runlength encoding. */
+#define TGA_CompMap4	33	/* Compressed color-mapped data, using Huffman, Delta, and runlength encoding.  4-pass quadtree-type process. */
+
+/* Definitions for interleave flag. */
+#define TGA_IL_None		0	/* non-interleaved. */
+#define TGA_IL_Two		1	/* two-way (even/odd) interleaving */
+#define TGA_IL_Four		2	/* four way interleaving */
+#define TGA_IL_Reserved	3	/* reserved */
+
+/* Definitions for origin flag */
+#define TGA_O_UPPER		0	/* Origin in lower left-hand corner. */
+#define TGA_O_LOWER		1	/* Origin in upper left-hand corner. */
+
 typedef struct _TargaHeader
 {
-    unsigned char 	id_length, colormap_type, image_type;
+    unsigned char 	id_length, colormap_type, colormap_size, image_type;
+    unsigned char	pixel_size, attributes;
     unsigned short	colormap_index, colormap_length;
-    unsigned char	colormap_size;
     unsigned short	x_origin, y_origin, width, height;
-    unsigned char	pixel_size, attributes;
 } TargaHeader;
 
-
-
 /*
 =========================================================
 
@@ -402,7 +415,6 @@
             }
         }
     }
-
     fileSystem->FreeFile(buffer);
 
 }
@@ -422,8 +434,7 @@
 LoadPCX
 ==============
 */
-static void LoadPCX(const char *filename, byte **pic, byte **palette, int *width, int *height,
-                    ID_TIME_T *timestamp)
+static void LoadPCX(const char *filename, byte **pic, byte **palette, int *width, int *height, ID_TIME_T *timestamp)
 {
     byte	*raw;
     pcx_t	*pcx;
@@ -484,11 +495,15 @@
     }
 
     if (width)
+    {
         *width = xmax+1;
+    }
+
     if (height)
+    {
         *height = ymax+1;
+    }
 // FIXME: use bytes_per_line here?
-
     for (y=0 ; y<=ymax ; y++, pix += xmax+1)
     {
         for (x=0 ; x<=xmax ;)
@@ -501,12 +516,15 @@
                 dataByte = *raw++;
             }
             else
+            {
                 runLength = 1;
+            }
 
             while (runLength-- > 0)
+            {
                 pix[x++] = dataByte;
         }
-
+        }
     }
 
     if (raw - (byte *)pcx > len)
@@ -515,7 +533,6 @@
         R_StaticFree(*pic);
         *pic = NULL;
     }
-
     fileSystem->FreeFile(pcx);
 }
 
@@ -538,14 +555,16 @@
         return;	// just getting timestamp
     }
     LoadPCX(filename, &pic8, &palette, width, height, timestamp);
+
     if (!pic8)
     {
         *pic = NULL;
         return;
     }
-
     c = (*width) * (*height);
-    pic32 = *pic = (byte *)R_StaticAlloc(4 * c);
+
+    pic32 = *pic = (byte *) R_StaticAlloc(4 * c);
+
     for (i = 0 ; i < c ; i++)
     {
         p = pic8[i];
@@ -555,7 +574,6 @@
         pic32[3] = 255;
         pic32 += 4;
     }
-
     R_StaticFree(pic8);
     R_StaticFree(palette);
 }
@@ -571,265 +589,354 @@
 /*
 =============
 LoadTGA
+
+TGA2 version.
+Image flip is no longer needed
+Supports many more formats
+Load errors are no longer fatal.
 =============
 */
 static void LoadTGA(const char *name, byte **pic, int *width, int *height, ID_TIME_T *timestamp)
 {
-    int		columns, rows, numPixels, fileSize, numBytes;
-    byte	*pixbuf;
-    int		row, column;
+    int			w, h, x, y, len, realrow, truerow, baserow, i, temp1, temp2, pixel_size, map_idx;
+    int			RLE_count, RLE_flag, size, interleave, origin;
+    bool		mapped, rlencoded;
+    byte		*data, *dst, r, g, b, a, j, k, l, *ColorMap;
     byte	*buf_p;
     byte	*buffer;
-    TargaHeader	targa_header;
-    byte		*targa_rgba;
+    TargaHeader	header;
 
     if (!pic)
     {
         fileSystem->ReadFile(name, NULL, timestamp);
         return;	// just getting timestamp
     }
-
     *pic = NULL;
 
     //
     // load the file
     //
-    fileSize = fileSystem->ReadFile(name, (void **)&buffer, timestamp);
-    if (!buffer)
+    len = fileSystem->ReadFile(name, (void **)&buffer, timestamp);
+
+    if (!buffer || len <= 0)
     {
         return;
     }
-
     buf_p = buffer;
 
-    targa_header.id_length = *buf_p++;
-    targa_header.colormap_type = *buf_p++;
-    targa_header.image_type = *buf_p++;
+    header.id_length = *buf_p++;
+    header.colormap_type = *buf_p++;
+    header.image_type = *buf_p++;
 
-    targa_header.colormap_index = LittleShort(*(short *)buf_p);
+    header.colormap_index = LittleShort(*(short *)buf_p);
     buf_p += 2;
-    targa_header.colormap_length = LittleShort(*(short *)buf_p);
+    header.colormap_length = LittleShort(*(short *)buf_p);
     buf_p += 2;
-    targa_header.colormap_size = *buf_p++;
-    targa_header.x_origin = LittleShort(*(short *)buf_p);
+    header.colormap_size = *buf_p++;
+    header.x_origin = LittleShort(*(short *)buf_p);
     buf_p += 2;
-    targa_header.y_origin = LittleShort(*(short *)buf_p);
+    header.y_origin = LittleShort(*(short *)buf_p);
     buf_p += 2;
-    targa_header.width = LittleShort(*(short *)buf_p);
+    header.width = LittleShort(*(short *)buf_p);
     buf_p += 2;
-    targa_header.height = LittleShort(*(short *)buf_p);
+    header.height = LittleShort(*(short *)buf_p);
     buf_p += 2;
-    targa_header.pixel_size = *buf_p++;
-    targa_header.attributes = *buf_p++;
+    header.pixel_size = *buf_p++;
+    header.attributes = *buf_p++;
 
-    if (targa_header.image_type != 2 && targa_header.image_type != 10 && targa_header.image_type != 3)
+    if (header.id_length != 0)
     {
-        common->Error("LoadTGA( %s ): Only type 2 (RGB), 3 (gray), and 10 (RGB) TGA images supported\n", name);
+        buf_p += header.id_length;
     }
 
-    if (targa_header.colormap_type != 0)
+    /* validate TGA type */
+    switch (header.image_type)
     {
-        common->Error("LoadTGA( %s ): colormaps not supported\n", name);
-    }
+    case TGA_Map:
+    case TGA_RGB:
+    case TGA_Mono:
+    case TGA_RLEMap:
+    case TGA_RLERGB:
+    case TGA_RLEMono:
+        break;
 
-    if ((targa_header.pixel_size != 32 && targa_header.pixel_size != 24) && targa_header.image_type != 3)
-    {
-        common->Error("LoadTGA( %s ): Only 32 or 24 bit images supported (no colormaps)\n", name);
+    default:
+        common->Printf("%s : Only type 1 (map), 2 (RGB), 3 (mono), 9 (RLEmap), 10 (RLERGB), 11 (RLEmono) TGA images supported\n", name);
+        return;
     }
 
-    if (targa_header.image_type == 2 || targa_header.image_type == 3)
-    {
-        numBytes = targa_header.width * targa_header.height * (targa_header.pixel_size >> 3);
-        if (numBytes > fileSize - 18 - targa_header.id_length)
+    /* validate color depth */
+    switch (header.pixel_size)
         {
-            common->Error("LoadTGA( %s ): incomplete file\n", name);
-        }
+    case 8:
+    case 15:
+    case 16:
+    case 24:
+    case 32:
+        break;
+
+    default:
+        common->Printf("%s : Only 8, 15, 16, 24 or 32 bit images (with colormaps) supported\n", name);
+        return;
     }
+    r = g = b = a = l = 0;
 
-    columns = targa_header.width;
-    rows = targa_header.height;
-    numPixels = columns * rows;
+    /* if required, read the color map information. */
+    ColorMap = NULL;
+    mapped = (header.image_type == TGA_Map || header.image_type == TGA_RLEMap) && header.colormap_type == 1;
 
-    if (width)
+    if (mapped)
     {
-        *width = columns;
-    }
-    if (height)
+        /* validate colormap size */
+        switch (header.colormap_size)
     {
-        *height = rows;
-    }
+        case 8:
+        case 15:
+        case 16:
+        case 32:
+        case 24:
+            break;
 
-    targa_rgba = (byte *)R_StaticAlloc(numPixels*4);
-    *pic = targa_rgba;
+        default:
+            common->Printf("%s : Only 8, 15, 16, 24 or 32 bit colormaps supported\n", name);
+            return;
+        }
+        temp1 = header.colormap_index;
+        temp2 = header.colormap_length;
 
-    if (targa_header.id_length != 0)
+        if ((temp1 + temp2 + 1) >= TGA_MAXCOLORS)
     {
-        buf_p += targa_header.id_length;  // skip TARGA image comment
+            return;
     }
+        ColorMap = (byte *) R_StaticAlloc(TGA_MAXCOLORS * 4);
 
-    if (targa_header.image_type == 2 || targa_header.image_type == 3)
-    {
-        // Uncompressed RGB or gray scale image
-        for (row = rows - 1; row >= 0; row--)
-        {
-            pixbuf = targa_rgba + row*columns*4;
-            for (column = 0; column < columns; column++)
+        map_idx = 0;
+
+        for (i = temp1 ; i < temp1 + temp2 ; ++i, map_idx += 4)
             {
-                unsigned char red,green,blue,alphabyte;
-                switch (targa_header.pixel_size)
+            /* read appropriate number of bytes, break into rgb & put in map. */
+            switch (header.colormap_size)
                 {
+            case 8:	/* grey scale, read and triplicate. */
+                r = g = b = *buf_p++;
+                a = 255;
+                break;
 
-                case 8:
-                    blue = *buf_p++;
-                    green = blue;
-                    red = blue;
-                    *pixbuf++ = red;
-                    *pixbuf++ = green;
-                    *pixbuf++ = blue;
-                    *pixbuf++ = 255;
+            case 15:	/* 5 bits each of red green and blue. */
+                /* watch byte order. */
+                j = *buf_p++;
+                k = *buf_p++;
+                l = ((unsigned int) k << 8) + j;
+                r = (byte)(((k & 0x7C) >> 2) << 3);
+                g = (byte)((((k & 0x03) << 3) + ((j & 0xE0) >> 5)) << 3);
+                b = (byte)((j & 0x1F) << 3);
+                a = 255;
                     break;
 
-                case 24:
-                    blue = *buf_p++;
-                    green = *buf_p++;
-                    red = *buf_p++;
-                    *pixbuf++ = red;
-                    *pixbuf++ = green;
-                    *pixbuf++ = blue;
-                    *pixbuf++ = 255;
+            case 16:	/* 5 bits each of red green and blue, 1 alpha bit. */
+                /* watch byte order. */
+                j = *buf_p++;
+                k = *buf_p++;
+                l = ((unsigned int) k << 8) + j;
+                r = (byte)(((k & 0x7C) >> 2) << 3);
+                g = (byte)((((k & 0x03) << 3) + ((j & 0xE0) >> 5)) << 3);
+                b = (byte)((j & 0x1F) << 3);
+                a = (k & 0x80) ? 255 : 0;
                     break;
-                case 32:
-                    blue = *buf_p++;
-                    green = *buf_p++;
-                    red = *buf_p++;
-                    alphabyte = *buf_p++;
-                    *pixbuf++ = red;
-                    *pixbuf++ = green;
-                    *pixbuf++ = blue;
-                    *pixbuf++ = alphabyte;
+
+            case 24:	/* 8 bits each of blue, green and red. */
+                b = *buf_p++;
+                g = *buf_p++;
+                r = *buf_p++;
+                a = 255;
+                l = 0;
                     break;
-                default:
-                    common->Error("LoadTGA( %s ): illegal pixel_size '%d'\n", name, targa_header.pixel_size);
+
+            case 32:	/* 8 bits each of blue, green, red and alpha. */
+                b = *buf_p++;
+                g = *buf_p++;
+                r = *buf_p++;
+                a = *buf_p++;
+                l = 0;
                     break;
                 }
+            ColorMap[map_idx+0] = r;
+            ColorMap[map_idx+1] = g;
+            ColorMap[map_idx+2] = b;
+            ColorMap[map_idx+3] = a;
             }
         }
-    }
-    else if (targa_header.image_type == 10)       // Runlength encoded RGB images
-    {
-        unsigned char red,green,blue,alphabyte,packetHeader,packetSize,j;
 
-        red = 0;
-        green = 0;
-        blue = 0;
-        alphabyte = 0xff;
+    /* check run-length encoding. */
+    rlencoded = (header.image_type == TGA_RLEMap || header.image_type == TGA_RLERGB || header.image_type == TGA_RLEMono);
+    RLE_count = RLE_flag = 0;
 
-        for (row = rows - 1; row >= 0; row--)
+    w = header.width;
+    h = header.height;
+    size = w * h * 4;
+
+    if (width)
         {
-            pixbuf = targa_rgba + row*columns*4;
-            for (column = 0; column < columns;)
+        *width = w;
+    }
+
+    if (height)
             {
-                packetHeader= *buf_p++;
-                packetSize = 1 + (packetHeader & 0x7f);
-                if (packetHeader & 0x80)            // run-length packet
+        *height = h;
+    }
+    data = (byte *) R_StaticAlloc(size);
+    *pic = data;
+
+    /* read the Targa file body and convert to portable format. */
+    pixel_size = header.pixel_size;
+    origin = (header.attributes & 0x20) >> 5;
+    interleave = (header.attributes & 0xC0) >> 6;
+    truerow = 0;
+    baserow = 0;
+
+    for (y=0 ; y<h ; y++)
                 {
-                    switch (targa_header.pixel_size)
+        realrow = truerow;
+
+        if (origin == TGA_O_UPPER)
                     {
-                    case 24:
-                        blue = *buf_p++;
-                        green = *buf_p++;
-                        red = *buf_p++;
-                        alphabyte = 255;
-                        break;
-                    case 32:
-                        blue = *buf_p++;
-                        green = *buf_p++;
-                        red = *buf_p++;
-                        alphabyte = *buf_p++;
-                        break;
-                    default:
-                        common->Error("LoadTGA( %s ): illegal pixel_size '%d'\n", name, targa_header.pixel_size);
-                        break;
+            realrow = h - realrow - 1;
                     }
+        dst = data + realrow * w * 4;
 
-                    for (j = 0; j < packetSize; j++)
+        for (x=0 ; x<w ; x++)
                     {
-                        *pixbuf++=red;
-                        *pixbuf++=green;
-                        *pixbuf++=blue;
-                        *pixbuf++=alphabyte;
-                        column++;
-                        if (column == columns)     // run spans across rows
+            /* check if run length encoded. */
+            if (rlencoded)
                         {
-                            column = 0;
-                            if (row > 0)
+                if (!RLE_count)
                             {
-                                row--;
-                            }
-                            else
+                    /* have to restart run. */
+                    i = *buf_p++;
+                    RLE_flag = (i & 0x80);
+
+                    if (!RLE_flag)	// stream of unencoded pixels
                             {
-                                goto breakOut;
-                            }
-                            pixbuf = targa_rgba + row*columns*4;
+                        RLE_count = i + 1;
                         }
+                    else		// single pixel replicated
+                    {
+                        RLE_count = i - 127;
                     }
+
+                    /* decrement count & get pixel. */
+                    --RLE_count;
                 }
-                else                              // non run-length packet
+                else
                 {
-                    for (j = 0; j < packetSize; j++)
+                    /* have already read count & (at least) first pixel. */
+                    --RLE_count;
+
+                    if (RLE_flag)
                     {
-                        switch (targa_header.pixel_size)
+                        /* replicated pixels. */
+                        goto PixEncode;
+                    }
+                }
+            }
+
+            /* read appropriate number of bytes, break into RGB. */
+            switch (pixel_size)
                         {
-                        case 24:
-                            blue = *buf_p++;
-                            green = *buf_p++;
-                            red = *buf_p++;
-                            *pixbuf++ = red;
-                            *pixbuf++ = green;
-                            *pixbuf++ = blue;
-                            *pixbuf++ = 255;
+            case 8:	/* grey scale, read and triplicate. */
+                r = g = b = l = *buf_p++;
+                a = 255;
                             break;
-                        case 32:
-                            blue = *buf_p++;
-                            green = *buf_p++;
-                            red = *buf_p++;
-                            alphabyte = *buf_p++;
-                            *pixbuf++ = red;
-                            *pixbuf++ = green;
-                            *pixbuf++ = blue;
-                            *pixbuf++ = alphabyte;
+
+            case 15:	/* 5 bits each of red green and blue. */
+                /* watch byte order. */
+                j = *buf_p++;
+                k = *buf_p++;
+                l = ((unsigned int) k << 8) + j;
+                r = (byte)(((k & 0x7C) >> 2) << 3);
+                g = (byte)((((k & 0x03) << 3) + ((j & 0xE0) >> 5)) << 3);
+                b = (byte)((j & 0x1F) << 3);
+                a = 255;
                             break;
-                        default:
-                            common->Error("LoadTGA( %s ): illegal pixel_size '%d'\n", name, targa_header.pixel_size);
+
+            case 16:	/* 5 bits each of red green and blue, 1 alpha bit. */
+                /* watch byte order. */
+                j = *buf_p++;
+                k = *buf_p++;
+                l = ((unsigned int) k << 8) + j;
+                r = (byte)(((k & 0x7C) >> 2) << 3);
+                g = (byte)((((k & 0x03) << 3) + ((j & 0xE0) >> 5)) << 3);
+                b = (byte)((j & 0x1F) << 3);
+                a = (k & 0x80) ? 255 : 0;
                             break;
-                        }
-                        column++;
-                        if (column == columns)     // pixel packet run spans across rows
+
+            case 24:	/* 8 bits each of blue, green and red. */
+                b = *buf_p++;
+                g = *buf_p++;
+                r = *buf_p++;
+                a = 255;
+                l = 0;
+                break;
+
+            case 32:	/* 8 bits each of blue, green, red and alpha. */
+                b = *buf_p++;
+                g = *buf_p++;
+                r = *buf_p++;
+                a = *buf_p++;
+                l = 0;
+                break;
+
+            default:
+                common->Printf("%s : Illegal pixel_size '%d'\n", name, pixel_size);
+                R_StaticFree(data);
+                if (mapped)
                         {
-                            column = 0;
-                            if (row > 0)
+                    R_StaticFree(ColorMap);
+                }
+                return;
+            }
+
+PixEncode:
+            if (mapped)
                             {
-                                row--;
+                map_idx = l * 4;
+                *dst++ = ColorMap[map_idx+0];
+                *dst++ = ColorMap[map_idx+1];
+                *dst++ = ColorMap[map_idx+2];
+                *dst++ = ColorMap[map_idx+3];
                             }
                             else
                             {
-                                goto breakOut;
+                *dst++ = r;
+                *dst++ = g;
+                *dst++ = b;
+                *dst++ = a;
                             }
-                            pixbuf = targa_rgba + row*columns*4;
                         }
+
+        if (interleave == TGA_IL_Four)
+        {
+            truerow += 4;
                     }
+        else if (interleave == TGA_IL_Two)
+        {
+            truerow += 2;
                 }
+        else
+        {
+            truerow++;
             }
-breakOut:
-            ;
+
+        if (truerow >= h)
+        {
+            truerow = ++baserow;
         }
     }
 
-    if ((targa_header.attributes & (1<<5)))  			// image flp bit
+    if (mapped)
     {
-        R_VerticalFlip(*pic, *width, *height);
+        R_StaticFree(ColorMap);
     }
-
     fileSystem->FreeFile(buffer);
 }
 
@@ -852,7 +959,7 @@
     /* This struct contains the JPEG decompression parameters and pointers to
      * working space (which is allocated as needed by the JPEG library).
      */
-    struct jpeg_decompress_struct cinfo;
+    struct jpeg_decompress_struct cinfo = {NULL};
     /* We use our private extension JPEG error handler.
      * Note that this struct must live as long as the main JPEG parameter
      * struct, to avoid dangling-pointer problems.
@@ -866,49 +973,39 @@
      * struct, to avoid dangling-pointer problems.
      */
     struct jpeg_error_mgr jerr;
+
     /* More stuff */
     JSAMPARRAY buffer;		/* Output row buffer */
-    int row_stride;		/* physical row width in output buffer */
-    unsigned char *out;
-    byte	*fbuffer;
-    byte  *bbuf;
+    unsigned int	row_stride;	/* physical row width in output buffer */
+    unsigned int	pixelcount, memcount;
+    unsigned int	sindex, dindex;
+    byte			*out;
+    int				len;
+    union
+    {
+        byte *b;
+        void *v;
+    } fbuffer;
+    byte			*buf;
+
+    if (!pic)
+    {
+        fileSystem->ReadFile(filename, NULL, timestamp);
+        return;	// just getting timestamp
+    }
+    *pic = NULL;
 
     /* In this example we want to open the input file before doing anything else,
      * so that the setjmp() error recovery below can assume the file is open.
      * VERY IMPORTANT: use "b" option to fopen() if you are on a machine that
      * requires it in order to read binary files.
      */
+    len = fileSystem->ReadFile(filename, &fbuffer.v, timestamp);
 
-    // JDC: because fill_input_buffer() blindly copies INPUT_BUF_SIZE bytes,
-    // we need to make sure the file buffer is padded or it may crash
-    if (pic)
-    {
-        *pic = NULL;		// until proven otherwise
-    }
-    {
-        int		len;
-        idFile *f;
-
-        f = fileSystem->OpenFileRead(filename);
-        if (!f)
+    if (!fbuffer.b || len <= 0)
         {
             return;
         }
-        len = f->Length();
-        if (timestamp)
-        {
-            *timestamp = f->Timestamp();
-        }
-        if (!pic)
-        {
-            fileSystem->CloseFile(f);
-            return;	// just getting timestamp
-        }
-        fbuffer = (byte *)Mem_ClearedAlloc(len + 4096);
-        f->Read(fbuffer, len);
-        fileSystem->CloseFile(f);
-    }
-
 
     /* Step 1: allocate and initialize JPEG decompression object */
 
@@ -918,17 +1015,17 @@
      * address which we place into the link field in cinfo.
      */
     cinfo.err = jpeg_std_error(&jerr);
+    cinfo.err->error_exit = jpg_Error;
+    cinfo.err->output_message = jpg_Printf;
 
     /* Now we can initialize the JPEG decompression object. */
     jpeg_create_decompress(&cinfo);
 
     /* Step 2: specify data source (eg, a file) */
-
-    jpeg_stdio_src(&cinfo, fbuffer);
+    jpeg_mem_src(&cinfo, fbuffer.b, len);
 
     /* Step 3: read file parameters with jpeg_read_header() */
-
-    (void) jpeg_read_header(&cinfo, true);
+    (void) jpeg_read_header(&cinfo, TRUE);
     /* We can ignore the return value from jpeg_read_header since
      *   (a) suspension is not possible with the stdio data source, and
      *   (b) we passed TRUE to reject a tables-only JPEG file as an error.
@@ -936,13 +1033,13 @@
      */
 
     /* Step 4: set parameters for decompression */
-
-    /* In this example, we don't need to change any of the defaults set by
-     * jpeg_read_header(), so we do nothing here.
+    /*
+     * Make sure it always converts images to RGB color space. This will
+     * automatically convert 8-bit greyscale images to RGB as well.
      */
+    cinfo.out_color_space = JCS_RGB;
 
     /* Step 5: Start decompressor */
-
     (void) jpeg_start_decompress(&cinfo);
     /* We can ignore the return value since suspension is not possible
      * with the stdio data source.
@@ -955,16 +1052,22 @@
      * In this example, we need to make an output work buffer of the right size.
      */
     /* JSAMPLEs per row in output buffer */
-    row_stride = cinfo.output_width * cinfo.output_components;
+    pixelcount = cinfo.output_width * cinfo.output_height;
 
-    if (cinfo.output_components!=4)
+    if (!cinfo.output_width || !cinfo.output_height || ((pixelcount * 4) / cinfo.output_width) / 4 != cinfo.output_height || pixelcount > 0x1FFFFFFF || cinfo.output_components != 3)
     {
-        common->DWarning("JPG %s is unsupported color depth (%d)",
-                         filename, cinfo.output_components);
+        // Free the memory to make sure we don't leak memory
+        fileSystem->FreeFile(fbuffer.v);
+
+        jpeg_destroy_decompress(&cinfo);
+
+        common->FatalError("LoadJPG: %s has an invalid image format: %dx%d*4=%d, components: %d", filename, cinfo.output_width, cinfo.output_height, pixelcount * 4, cinfo.output_components);
     }
-    out = (byte *)R_StaticAlloc(cinfo.output_width*cinfo.output_height*4);
+    memcount = pixelcount * 4;
+    row_stride = cinfo.output_width * cinfo.output_components;
+
+    out = (byte *) R_StaticAlloc(memcount);
 
-    *pic = out;
     *width = cinfo.output_width;
     *height = cinfo.output_height;
 
@@ -980,34 +1083,34 @@
          * Here the array is only one element long, but you could ask for
          * more than one scanline at a time if that's more convenient.
          */
-        bbuf = ((out+(row_stride*cinfo.output_scanline)));
-        buffer = &bbuf;
+        buf = ((out + (row_stride * cinfo.output_scanline)));
+        buffer = &buf;
         (void) jpeg_read_scanlines(&cinfo, buffer, 1);
     }
+    buf = out;
 
-    // clear all the alphas to 255
-    {
-        int	i, j;
-        byte	*buf;
+    // Expand from RGB to RGBA
+    sindex = pixelcount * cinfo.output_components;
+    dindex = memcount;
 
-        buf = *pic;
-
-        j = cinfo.output_width * cinfo.output_height * 4;
-        for (i = 3 ; i < j ; i+=4)
+    do
         {
-            buf[i] = 255;
-        }
+        buf[--dindex] = 255;
+        buf[--dindex] = buf[--sindex];
+        buf[--dindex] = buf[--sindex];
+        buf[--dindex] = buf[--sindex];
     }
+    while (sindex);
 
-    /* Step 7: Finish decompression */
+    *pic = out;
 
-    (void) jpeg_finish_decompress(&cinfo);
+    /* Step 7: Finish decompression */
+    jpeg_finish_decompress(&cinfo);
     /* We can ignore the return value since suspension is not possible
      * with the stdio data source.
      */
 
     /* Step 8: Release JPEG decompression object */
-
     /* This is an important step since it will release a good deal of memory. */
     jpeg_destroy_decompress(&cinfo);
 
@@ -1016,7 +1119,7 @@
      * so as to simplify the setjmp error logic above.  (Actually, I don't
      * think that jpeg_destroy can do an error exit, but why assume anything...)
      */
-    Mem_Free(fbuffer);
+    fileSystem->FreeFile(fbuffer.v);
 
     /* At this point you may want to check to see whether any corrupt-data
      * warnings occurred (test whether jerr.pub.num_warnings is nonzero).
diff -NEaurb neo/renderer/Image_load.cpp neo/renderer/Image_load.cpp
--- neo/renderer/Image_load.cpp	2013-08-14 01:47:51 +0000
+++ neo/renderer/Image_load.cpp	2013-08-13 16:10:44 +0000
@@ -1532,13 +1532,12 @@
         return false;
     }
 
-#if 1 // ( _D3XP had disabled ) - Allow grabbing of DDS's from original Doom pak files
+	// ( _D3XP had disabled ) - Allow grabbing of DDS's from original Doom pak files
     // if we are doing a copyFiles, make sure the original images are referenced
     if (fileSystem->PerformingCopyFiles())
     {
         return false;
     }
-#endif
 
     if (depth == TD_BUMP && globalImages->image_useNormalCompression.GetInteger() != 2)
     {
@@ -2352,13 +2351,8 @@
         // these probably should be clamp, but we have a lot of issues with editor
         // geometry coming out with texcoords slightly off one side, resulting in
         // a smear across the entire polygon
-#if 1
         qglTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);
         qglTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);
-#else
-        qglTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE);
-        qglTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE);
-#endif
     }
 }
 
diff -NEaurb neo/renderer/Interaction.cpp neo/renderer/Interaction.cpp
--- neo/renderer/Interaction.cpp	2013-08-14 01:47:51 +0000
+++ neo/renderer/Interaction.cpp	2013-08-13 11:16:48 +0000
@@ -40,6 +40,8 @@
 */
 
 // FIXME: use private allocator for srfCullInfo_t
+semaphore_t linklight_mutex;	// thread safe
+semaphore_t face_planes_mutex;	// thread safe
 
 /*
 ================
@@ -60,15 +62,17 @@
     {
         return;
     }
-
     R_GlobalPointToLocal(ent->modelMatrix, light->globalLightOrigin, localLightOrigin);
 
     int numFaces = tri->numIndexes / 3;
 
+    SEM_WAIT(&face_planes_mutex);
+
     if (!tri->facePlanes || !tri->facePlanesCalculated)
     {
         R_DeriveFacePlanes(const_cast<srfTriangles_t *>(tri));
     }
+    SEM_POST(&face_planes_mutex);
 
     cullInfo.facing = (byte *) R_StaticAlloc((numFaces + 1) * sizeof(cullInfo.facing[0]));
 
@@ -296,7 +300,6 @@
             }
         }
     }
-
     return true;
 }
 
@@ -502,6 +505,9 @@
     dynamicModelFrameCount	= 0;
     frustumState			= FRUSTUM_UNINITIALIZED;
     frustumAreas			= NULL;
+
+    // initialize the dynamic shadow volume threads
+    SEM_INIT(&entityDefDynModel);
 }
 
 /*
@@ -515,9 +521,7 @@
     {
         common->Error("idInteraction::AllocAndLink: NULL parm");
     }
-
     idRenderWorldLocal *renderWorld = edef->world;
-
     idInteraction *interaction = renderWorld->interactionAllocator.Alloc();
 
     // link and initialize
@@ -568,7 +572,6 @@
         }
         renderWorld->interactionTable[ index ] = interaction;
     }
-
     return interaction;
 }
 
@@ -608,7 +611,6 @@
             }
             R_FreeInteractionCullInfo(sint->cullInfo);
         }
-
         R_StaticFree(this->surfaces);
         this->surfaces = NULL;
     }
@@ -622,7 +624,6 @@
 */
 void idInteraction::Unlink(void)
 {
-
     // unlink from the entity's list
     if (this->entityPrev)
     {
@@ -671,7 +672,6 @@
 */
 void idInteraction::UnlinkAndFree(void)
 {
-
     // clear the table pointer
     idRenderWorldLocal *renderWorld = this->lightDef->world;
     if (renderWorld->interactionTable)
@@ -683,7 +683,6 @@
         }
         renderWorld->interactionTable[index] = NULL;
     }
-
     Unlink();
 
     FreeSurfaces();
@@ -709,6 +708,7 @@
 */
 void idInteraction::MakeEmpty(void)
 {
+    SEM_WAIT(&make_empty_mutex);
 
     // an empty interaction has no surfaces
     numSurfaces = 0;
@@ -740,6 +740,7 @@
     {
         this->lightDef->firstInteraction = this;
     }
+    SEM_POST(&make_empty_mutex);
 }
 
 /*
@@ -771,7 +772,6 @@
         total += R_TriSurfMemory(inter->lightTris);
         total += R_TriSurfMemory(inter->shadowTris);
     }
-
     return total;
 }
 
@@ -823,8 +823,8 @@
             frustumAreas = tr.viewDef->renderWorld->FloodFrustumAreas(frustum, frustumAreas);
             frustumState = idInteraction::FRUSTUM_VALIDAREAS;
         }
-
         portalRect.Clear();
+
         for (area = frustumAreas; area; area = area->next)
         {
             portalRect.Union(entityDef->world->GetAreaScreenRect(area->areaNum));
@@ -867,7 +867,6 @@
     {
         R_ShowColoredScreenRect(scissorRect, lightDef->index);
     }
-
     return scissorRect;
 }
 
@@ -878,7 +877,6 @@
 */
 bool idInteraction::CullInteractionByViewFrustum(const idFrustum &viewFrustum)
 {
-
     if (!r_useInteractionCulling.GetBool())
     {
         return false;
@@ -926,7 +924,6 @@
             tr.viewDef->renderWorld->DebugBox(colorWhite, idBox(entityDef->referenceBounds, entityDef->parms.origin, entityDef->parms.axis));
         }
     }
-
     return false;
 }
 
@@ -990,6 +987,7 @@
         surf = model->Surface(c);
 
         tri = surf->geometry;
+
         if (!tri)
         {
             continue;
@@ -1043,7 +1041,6 @@
         // if the interaction has shadows and this surface casts a shadow
         if (HasShadows() && shader->SurfaceCastsShadow() && tri->silEdges != NULL)
         {
-
             // if the light has an optimized shadow volume, don't create shadows for any models that are part of the base areas
             if (lightDef->parms.prelightModel == NULL || !model->IsStaticWorldModel() || !r_useOptimizedShadows.GetBool())
             {
@@ -1087,8 +1084,7 @@
 we can draw it without caps in zpass mode
 ======================
 */
-static bool R_PotentiallyInsideInfiniteShadow(const srfTriangles_t *occluder,
-        const idVec3 &localView, const idVec3 &localLight)
+static bool R_PotentiallyInsideInfiniteShadow(const srfTriangles_t *occluder, const idVec3 &localView, const idVec3 &localLight)
 {
     idBounds	exp;
 
@@ -1176,11 +1172,10 @@
 instantiate the dynamic model to find out
 ==================
 */
-void idInteraction::AddActiveInteraction(void)
+bool idInteraction::AddActiveInteraction(bool phase1, idScreenRect *shadowScissor, idRenderModel **modelRef)
 {
     viewLight_t *	vLight;
     viewEntity_t *	vEntity;
-    idScreenRect	shadowScissor;
     idScreenRect	lightScissor;
     idVec3			localLightOrigin;
     idVec3			localViewOrigin;
@@ -1188,42 +1183,43 @@
     vLight = lightDef->viewLight;
     vEntity = entityDef->viewEntity;
 
+    if (phase1)
+    {
+        *modelRef = NULL;
+
     // do not waste time culling the interaction frustum if there will be no shadows
     if (!HasShadows())
     {
-
         // use the entity scissor rectangle
-        shadowScissor = vEntity->scissorRect;
+            *shadowScissor = vEntity->scissorRect;
 
         // culling does not seem to be worth it for static world models
     }
     else if (entityDef->parms.hModel->IsStaticWorldModel())
     {
-
         // use the light scissor rectangle
-        shadowScissor = vLight->scissorRect;
-
+            *shadowScissor = vLight->scissorRect;
     }
     else
     {
-
         // try to cull the interaction
         // this will also cull the case where the light origin is inside the
         // view frustum and the entity bounds are outside the view frustum
         if (CullInteractionByViewFrustum(tr.viewDef->viewFrustum))
         {
-            return;
+                return false;
         }
 
         // calculate the shadow scissor rectangle
-        shadowScissor = CalcInteractionScissorRectangle(tr.viewDef->viewFrustum);
+            *shadowScissor = CalcInteractionScissorRectangle(tr.viewDef->viewFrustum);
     }
 
     // get out before making the dynamic model if the shadow scissor rectangle is empty
-    if (shadowScissor.IsEmpty())
+        if ((*shadowScissor).IsEmpty())
     {
-        return;
+            return false;
     }
+        SEM_WAIT(&entityDefDynModel);
 
     // We will need the dynamic surface created to make interactions, even if the
     // model itself wasn't visible.  This just returns a cached value after it
@@ -1231,7 +1227,8 @@
     idRenderModel *model = R_EntityDefDynamicModel(entityDef);
     if (model == NULL || model->NumSurfaces() <= 0)
     {
-        return;
+            SEM_POST(&entityDefDynModel);
+            return false;
     }
 
     // the dynamic model may have changed since we built the surface list
@@ -1241,12 +1238,16 @@
     }
     dynamicModelFrameCount = entityDef->dynamicModelFrameCount;
 
+        SEM_POST(&entityDefDynModel);
+
     // actually create the interaction if needed, building light and shadow surfaces as needed
     if (IsDeferred())
     {
-        CreateInteraction(model);
+            //CreateInteraction(model);
+            *modelRef = model;
+        }
+        return true;
     }
-
     R_GlobalPointToLocal(vEntity->modelMatrix, lightDef->globalLightOrigin, localLightOrigin);
     R_GlobalPointToLocal(vEntity->modelMatrix, tr.viewDef->renderView.vieworg, localViewOrigin);
 
@@ -1265,7 +1266,6 @@
         // see if the base surface is visible, we may still need to add shadows even if empty
         if (!lightScissorsEmpty && sint->ambientTris && sint->ambientTris->ambientViewCount == tr.viewCount)
         {
-
             // make sure we have created this interaction, which may have been deferred
             // on a previous use that only needed the shadow
             if (sint->lightTris == LIGHT_TRIS_DEFERRED)
@@ -1273,7 +1273,6 @@
                 sint->lightTris = R_CreateLightTris(vEntity->entityDef, sint->ambientTris, vLight->lightDef, sint->shader, sint->cullInfo);
                 R_FreeInteractionCullInfo(sint->cullInfo);
             }
-
             srfTriangles_t *lightTris = sint->lightTris;
 
             if (lightTris)
@@ -1284,7 +1283,6 @@
                 // but individual surfaces may still be cropped somewhat more
                 if (!R_CullLocalBox(lightTris->bounds, vEntity->modelMatrix, 5, tr.viewDef->frustum))
                 {
-
                     // make sure the original surface has its ambient cache created
                     srfTriangles_t *tri = sint->ambientTris;
                     if (!tri->ambientCache)
@@ -1328,7 +1326,6 @@
                     }
 
                     // add the surface to the light list
-
                     const idMaterial *shader = sint->shader;
                     R_GlobalShaderOverride(&shader);
 
@@ -1336,23 +1333,19 @@
                     // there are surfaces with NOSELFSHADOW
                     if (sint->shader->Coverage() == MC_TRANSLUCENT)
                     {
-                        R_LinkLightSurf(&vLight->translucentInteractions, lightTris,
-                                        vEntity, lightDef, shader, lightScissor, false);
+                        R_LinkLightSurf(&vLight->translucentInteractions, lightTris, vEntity, lightDef, shader, lightScissor, false);
                     }
                     else if (!lightDef->parms.noShadows && sint->shader->TestMaterialFlag(MF_NOSELFSHADOW))
                     {
-                        R_LinkLightSurf(&vLight->localInteractions, lightTris,
-                                        vEntity, lightDef, shader, lightScissor, false);
+                        R_LinkLightSurf(&vLight->localInteractions, lightTris, vEntity, lightDef, shader, lightScissor, false);
                     }
                     else
                     {
-                        R_LinkLightSurf(&vLight->globalInteractions, lightTris,
-                                        vEntity, lightDef, shader, lightScissor, false);
+                        R_LinkLightSurf(&vLight->globalInteractions, lightTris, vEntity, lightDef, shader, lightScissor, false);
                     }
                 }
             }
         }
-
         srfTriangles_t *shadowTris = sint->shadowTris;
 
         // the shadows will always have to be added, unless we can tell they
@@ -1363,13 +1356,11 @@
             // check for view specific shadow suppression (player shadows, etc)
             if (!r_skipSuppress.GetBool())
             {
-                if (entityDef->parms.suppressShadowInViewID &&
-                    entityDef->parms.suppressShadowInViewID == tr.viewDef->renderView.viewID)
+                if (entityDef->parms.suppressShadowInViewID && entityDef->parms.suppressShadowInViewID == tr.viewDef->renderView.viewID)
                 {
                     continue;
                 }
-                if (entityDef->parms.suppressShadowInLightID &&
-                    entityDef->parms.suppressShadowInLightID == lightDef->parms.lightId)
+                if (entityDef->parms.suppressShadowInLightID && entityDef->parms.suppressShadowInLightID == lightDef->parms.lightId)
                 {
                     continue;
                 }
@@ -1430,16 +1421,15 @@
 
             if (sint->shader->TestMaterialFlag(MF_NOSELFSHADOW))
             {
-                R_LinkLightSurf(&vLight->localShadows,
-                                shadowTris, vEntity, lightDef, NULL, shadowScissor, inside);
+                R_LinkLightSurf(&vLight->localShadows, shadowTris, vEntity, lightDef, NULL, *shadowScissor, inside);
             }
             else
             {
-                R_LinkLightSurf(&vLight->globalShadows,
-                                shadowTris, vEntity, lightDef, NULL, shadowScissor, inside);
+                R_LinkLightSurf(&vLight->globalShadows, shadowTris, vEntity, lightDef, NULL, *shadowScissor, inside);
             }
         }
     }
+    return true;
 }
 
 /*
diff -NEaurb neo/renderer/Interaction.h neo/renderer/Interaction.h
--- neo/renderer/Interaction.h	2013-08-14 01:47:52 +0000
+++ neo/renderer/Interaction.h	2013-08-13 11:16:48 +0000
@@ -154,7 +154,10 @@
 
     // makes sure all necessary light surfaces and shadow surfaces are created, and
     // calls R_LinkLightSurf() for each one
-    void					AddActiveInteraction(void);
+    bool					AddActiveInteraction(bool, idScreenRect *, idRenderModel **);
+
+    // actually create the interaction
+    void					CreateInteraction(const idRenderModel *model);
 
 private:
     enum
@@ -170,8 +173,6 @@
     int						dynamicModelFrameCount;	// so we can tell if a callback model animated
 
 private:
-    // actually create the interaction
-    void					CreateInteraction(const idRenderModel *model);
 
     // unlink from entity and light lists
     void					Unlink(void);
@@ -183,6 +184,9 @@
     // determine the minimum scissor rect that will include the interaction shadows
     // projected to the bounds of the light
     idScreenRect			CalcInteractionScissorRectangle(const idFrustum &viewFrustum);
+
+    // used as a mutex entry for dynamic shadow volumes
+    semaphore_t				entityDefDynModel;
 };
 
 
diff -NEaurb neo/renderer/MegaTexture.cpp neo/renderer/MegaTexture.cpp
--- neo/renderer/MegaTexture.cpp	2013-08-14 01:47:51 +0000
+++ neo/renderer/MegaTexture.cpp	2013-08-13 11:34:19 +0000
@@ -614,7 +614,7 @@
                         if (tx > width || ty > height)
                         {
                             // off edge, zero fill
-                            memset(newBlock, 0, sizeof(newBlock));
+                            memset(newBlock, 0, tileSize);
                         }
                         else
                         {
diff -NEaurb neo/renderer/Model.cpp neo/renderer/Model.cpp
--- neo/renderer/Model.cpp	2013-08-14 01:47:51 +0000
+++ neo/renderer/Model.cpp	2013-08-13 16:10:44 +0000
@@ -2272,7 +2272,7 @@
             max = data[i];
         }
     }
-#if 1
+
     // write out a gray scale height map
     byte	*image = (byte *)R_StaticAlloc(len);
     byte	*image_p = image;
@@ -2290,8 +2290,6 @@
     tgaName += ".tga";
     R_WriteTGA(tgaName.c_str(), image, size, size, false);
     R_StaticFree(image);
-//return false;
-#endif
 
     // find the island above sea level
     int	minX, maxX, minY, maxY;
diff -NEaurb neo/renderer/Model.h neo/renderer/Model.h
--- neo/renderer/Model.h	2013-08-14 01:47:52 +0000
+++ neo/renderer/Model.h	2013-08-13 16:10:44 +0000
@@ -46,19 +46,9 @@
 
 // using shorts for triangle indexes can save a significant amount of traffic, but
 // to support the large models that renderBump loads, they need to be 32 bits
-#if 1
-
 #define GL_INDEX_TYPE		GL_UNSIGNED_INT
 typedef int glIndex_t;
 
-#else
-
-#define GL_INDEX_TYPE		GL_UNSIGNED_SHORT
-typedef short glIndex_t;
-
-#endif
-
-
 typedef struct
 {
     // NOTE: making this a glIndex is dubious, as there can be 2x the faces as verts
diff -NEaurb neo/renderer/ModelDecal.cpp neo/renderer/ModelDecal.cpp
--- neo/renderer/ModelDecal.cpp	2013-08-14 01:47:51 +0000
+++ neo/renderer/ModelDecal.cpp	2013-08-13 15:32:11 +0000
@@ -261,7 +261,7 @@
             tri.verts[tri.numVerts + i].st[1] = w[i].t;
             for (int k = 0 ; k < 4 ; k++)
             {
-                int icolor = idMath::FtoiFast(decalInfo.start[k] * fade * 255.0f);
+                int icolor = idMath::Ftoi(decalInfo.start[k] * fade * 255.0f);
                 if (icolor < 0)
                 {
                     icolor = 0;
@@ -343,7 +343,6 @@
         {
             continue;
         }
-
         srfTriangles_t *stri = surf->geometry;
 
         // if the triangle bounds do not overlap with projection bounds
@@ -562,7 +561,7 @@
             for (int k = 0; k < 4; k++)
             {
                 float fcolor = decalInfo.start[k] + (decalInfo.end[k] - decalInfo.start[k]) * f;
-                int icolor = idMath::FtoiFast(fcolor * vertDepthFade[ind] * 255.0f);
+                int icolor = idMath::Ftoi(fcolor * vertDepthFade[ind] * 255.0f);
                 if (icolor < 0)
                 {
                     icolor = 0;
diff -NEaurb neo/renderer/Model_ase.cpp neo/renderer/Model_ase.cpp
--- neo/renderer/Model_ase.cpp	2013-08-14 01:47:51 +0000
+++ neo/renderer/Model_ase.cpp	2013-08-13 03:29:14 +0000
@@ -752,7 +752,23 @@
     else if (!strcmp(token, "*MESH"))
     {
         ase.currentMesh = &ase.currentObject->mesh;
-        memset(ase.currentMesh, 0, sizeof(ase.currentMesh));
+
+        // the transform is applied to normals so it must be saved out before we clear the mesh
+        idVec3 transform[4];
+
+        transform[0] = ase.currentMesh->transform[0];
+        transform[1] = ase.currentMesh->transform[1];
+        transform[2] = ase.currentMesh->transform[2];
+        transform[3] = ase.currentMesh->transform[3];
+
+        // and now it's safe to clear
+        memset(ase.currentMesh, 0, sizeof(*ase.currentMesh));
+
+        // and now we restore the saved out transform
+        ase.currentMesh->transform[0] = transform[0];
+        ase.currentMesh->transform[1] = transform[1];
+        ase.currentMesh->transform[2] = transform[2];
+        ase.currentMesh->transform[3] = transform[3];
 
         ASE_ParseBracedBlock(ASE_KeyMESH);
     }
diff -NEaurb neo/renderer/Model_beam.cpp neo/renderer/Model_beam.cpp
--- neo/renderer/Model_beam.cpp	2013-08-14 01:47:51 +0000
+++ neo/renderer/Model_beam.cpp	2013-08-13 15:32:11 +0000
@@ -159,10 +159,10 @@
         minor *= renderEntity->shaderParms[SHADERPARM_BEAM_WIDTH] * 0.5f;
     }
 
-    int red		= idMath::FtoiFast(renderEntity->shaderParms[SHADERPARM_RED] * 255.0f);
-    int green	= idMath::FtoiFast(renderEntity->shaderParms[SHADERPARM_GREEN] * 255.0f);
-    int blue	= idMath::FtoiFast(renderEntity->shaderParms[SHADERPARM_BLUE] * 255.0f);
-    int alpha	= idMath::FtoiFast(renderEntity->shaderParms[SHADERPARM_ALPHA] * 255.0f);
+    int red		= idMath::Ftoi(renderEntity->shaderParms[SHADERPARM_RED] * 255.0f);
+    int green	= idMath::Ftoi(renderEntity->shaderParms[SHADERPARM_GREEN] * 255.0f);
+    int blue	= idMath::Ftoi(renderEntity->shaderParms[SHADERPARM_BLUE] * 255.0f);
+    int alpha	= idMath::Ftoi(renderEntity->shaderParms[SHADERPARM_ALPHA] * 255.0f);
 
     tri->verts[0].xyz = minor;
     tri->verts[0].color[0] = red;
diff -NEaurb neo/renderer/Model_liquid.cpp neo/renderer/Model_liquid.cpp
--- neo/renderer/Model_liquid.cpp	2013-08-14 01:47:51 +0000
+++ neo/renderer/Model_liquid.cpp	2013-08-13 00:05:26 +0000
@@ -399,7 +399,6 @@
         MakeDefaultModel();
         return;
     }
-
     size_x = scale_x * verts_x;
     size_y = scale_y * verts_y;
 
@@ -468,10 +467,6 @@
             parser.ReadToken(&token);
             shader = declManager->FindMaterial(token);
         }
-        else if (!token.Icmp("seed"))
-        {
-            seed = parser.ParseInt();
-        }
         else if (!token.Icmp("update_rate"))
         {
             rate = parser.ParseFloat();
diff -NEaurb neo/renderer/Model_lwo.cpp neo/renderer/Model_lwo.cpp
--- neo/renderer/Model_lwo.cpp	2013-08-14 01:47:51 +0000
+++ neo/renderer/Model_lwo.cpp	2013-08-13 00:05:26 +0000
@@ -1313,7 +1313,7 @@
     i = **bp;
     if (i > 127) i -= 256;
     flen += 1;
-    *bp++;
+    (*bp)++;
     return i;
 }
 
@@ -1351,7 +1351,7 @@
     if (flen == FLEN_ERROR) return 0;
     c = **bp;
     flen += 1;
-    *bp++;
+    (*bp)++;
     return c;
 }
 
@@ -1797,7 +1797,7 @@
         clip->source.still.name = s;
     }
 
-    *nclips++;
+    (*nclips)++;
     clip->index = *nclips;
 
     lwListAdd((void**)clist, clip);
diff -NEaurb neo/renderer/Model_sprite.cpp neo/renderer/Model_sprite.cpp
--- neo/renderer/Model_sprite.cpp	2013-08-14 01:47:51 +0000
+++ neo/renderer/Model_sprite.cpp	2013-08-13 15:32:11 +0000
@@ -149,10 +149,10 @@
         staticModel->AddSurface(surf);
     }
 
-    int	red			= idMath::FtoiFast(renderEntity->shaderParms[ SHADERPARM_RED ] * 255.0f);
-    int green		= idMath::FtoiFast(renderEntity->shaderParms[ SHADERPARM_GREEN ] * 255.0f);
-    int	blue		= idMath::FtoiFast(renderEntity->shaderParms[ SHADERPARM_BLUE ] * 255.0f);
-    int	alpha		= idMath::FtoiFast(renderEntity->shaderParms[ SHADERPARM_ALPHA ] * 255.0f);
+    int	red			= idMath::Ftoi(renderEntity->shaderParms[ SHADERPARM_RED ] * 255.0f);
+    int green		= idMath::Ftoi(renderEntity->shaderParms[ SHADERPARM_GREEN ] * 255.0f);
+    int	blue		= idMath::Ftoi(renderEntity->shaderParms[ SHADERPARM_BLUE ] * 255.0f);
+    int	alpha		= idMath::Ftoi(renderEntity->shaderParms[ SHADERPARM_ALPHA ] * 255.0f);
 
     idVec3 right	= idVec3(0.0f, renderEntity->shaderParms[ SHADERPARM_SPRITE_WIDTH ] * 0.5f, 0.0f);
     idVec3 up		= idVec3(0.0f, 0.0f, renderEntity->shaderParms[ SHADERPARM_SPRITE_HEIGHT ] * 0.5f);
diff -NEaurb neo/renderer/RenderSystem.h neo/renderer/RenderSystem.h
--- neo/renderer/RenderSystem.h	2013-08-14 01:47:52 +0000
+++ neo/renderer/RenderSystem.h	2013-08-13 01:45:33 +0000
@@ -74,6 +74,7 @@
     bool				ARBVertexBufferObjectAvailable;
     bool				ARBVertexProgramAvailable;
     bool				ARBFragmentProgramAvailable;
+    bool				ARBMapBufferRangeAvailable;
     bool				twoSidedStencilAvailable;
     bool				textureNonPowerOfTwoAvailable;
     bool				depthBoundsTestAvailable;
diff -NEaurb neo/renderer/RenderSystem_init.cpp neo/renderer/RenderSystem_init.cpp
--- neo/renderer/RenderSystem_init.cpp	2013-08-14 01:47:51 +0000
+++ neo/renderer/RenderSystem_init.cpp	2013-08-13 12:17:25 +0000
@@ -40,7 +40,7 @@
 
 glconfig_t	glConfig;
 
-static void GfxInfo_f(void);
+static void GfxInfo_f(const idCmdArgs &args);
 
 const char *r_rendererArgs[] = { "best", "arb", "arb2", "Cg", "exp", "nv10", "nv20", "r200", NULL };
 
@@ -273,12 +273,9 @@
 PFNGLALPHAFRAGMENTOP3ATIPROC			qglAlphaFragmentOp3ATI;
 PFNGLSETFRAGMENTSHADERCONSTANTATIPROC	qglSetFragmentShaderConstantATI;
 
-// EXT_stencil_two_side
-PFNGLACTIVESTENCILFACEEXTPROC			qglActiveStencilFaceEXT;
-
-// ATI_separate_stencil
-PFNGLSTENCILOPSEPARATEATIPROC			qglStencilOpSeparateATI;
-PFNGLSTENCILFUNCSEPARATEATIPROC			qglStencilFuncSeparateATI;
+// GL_ATI_separate_stencil / OpenGL 2.0
+PFNGLSTENCILOPSEPARATEATIPROC			qglStencilOpSeparate;
+PFNGLSTENCILFUNCSEPARATEATIPROC			qglStencilFuncSeparate;
 
 // ARB_texture_compression
 PFNGLCOMPRESSEDTEXIMAGE2DARBPROC		qglCompressedTexImage2DARB;
@@ -307,6 +304,10 @@
 PFNGLPROGRAMENVPARAMETER4FVARBPROC		qglProgramEnvParameter4fvARB;
 PFNGLPROGRAMLOCALPARAMETER4FVARBPROC	qglProgramLocalParameter4fvARB;
 
+// ARB_MapBufferRange
+PFNGLMAPBUFFERRANGEPROC					qglMapBufferRange;
+PFNGLFLUSHMAPPEDBUFFERRANGEPROC			qglFlushMappedBufferRange;
+
 // GL_EXT_depth_bounds_test
 PFNGLDEPTHBOUNDSEXTPROC                 qglDepthBoundsEXT;
 
@@ -423,9 +424,7 @@
     glConfig.texture3DAvailable = R_CheckExtension("GL_EXT_texture3D");
     if (glConfig.texture3DAvailable)
     {
-        qglTexImage3D =
-            (void (APIENTRY *)(GLenum, GLint, GLint, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, const GLvoid *))
-            GLimp_ExtensionPointer("glTexImage3D");
+        qglTexImage3D = (void (APIENTRY *)(GLenum, GLint, GLint, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, const GLvoid *)) GLimp_ExtensionPointer("glTexImage3D");
     }
 
     // EXT_stencil_wrap
@@ -466,20 +465,12 @@
                                   GLimp_ExtensionPointer("glFinalCombinerInputNV");
     }
 
-    // GL_EXT_stencil_two_side
-    glConfig.twoSidedStencilAvailable = R_CheckExtension("GL_EXT_stencil_two_side");
+    // ATI_separate_stencil / OpenGL 2.0 separate stencil
+    glConfig.twoSidedStencilAvailable = (glConfig.glVersion >= 2.0f) || R_CheckExtension("GL_ATI_separate_stencil");
     if (glConfig.twoSidedStencilAvailable)
     {
-        qglActiveStencilFaceEXT = (PFNGLACTIVESTENCILFACEEXTPROC)GLimp_ExtensionPointer("glActiveStencilFaceEXT");
-    }
-    else
-    {
-        glConfig.atiTwoSidedStencilAvailable = R_CheckExtension("GL_ATI_separate_stencil");
-        if (glConfig.atiTwoSidedStencilAvailable)
-        {
-            qglStencilFuncSeparateATI  = (PFNGLSTENCILFUNCSEPARATEATIPROC)GLimp_ExtensionPointer("glStencilFuncSeparateATI");
-            qglStencilOpSeparateATI = (PFNGLSTENCILOPSEPARATEATIPROC)GLimp_ExtensionPointer("glStencilOpSeparateATI");
-        }
+        qglStencilOpSeparate = (PFNGLSTENCILOPSEPARATEATIPROC)GLimp_ExtensionPointer("glStencilOpSeparate");
+        qglStencilFuncSeparate = (PFNGLSTENCILFUNCSEPARATEATIPROC)GLimp_ExtensionPointer("glStencilFuncSeparate");
     }
 
     // GL_ATI_fragment_shader
@@ -556,6 +547,13 @@
         }
     }
 
+    glConfig.ARBMapBufferRangeAvailable = R_CheckExtension("GL_ARB_map_buffer_range");
+    if (glConfig.ARBMapBufferRangeAvailable)
+    {
+        qglMapBufferRange = (PFNGLMAPBUFFERRANGEPROC)GLimp_ExtensionPointer("glMapBufferRange");
+        qglFlushMappedBufferRange = (PFNGLFLUSHMAPPEDBUFFERRANGEPROC)GLimp_ExtensionPointer("glFlushMappedBufferRange");
+    }
+
     // check for minimum set
     if (!glConfig.multitextureAvailable || !glConfig.textureEnvCombineAvailable || !glConfig.cubeMapAvailable
         || !glConfig.envDot3Available)
@@ -595,11 +593,40 @@
     { "Mode  1: 400x300",		400,	300 },
     { "Mode  2: 512x384",		512,	384 },
     { "Mode  3: 640x480",		640,	480 },
-    { "Mode  4: 800x600",		800,	600 },
-    { "Mode  5: 1024x768",		1024,	768 },
-    { "Mode  6: 1152x864",		1152,	864 },
-    { "Mode  7: 1280x1024",		1280,	1024 },
-    { "Mode  8: 1600x1200",		1600,	1200 },
+
+    { "Mode  4: 720x405",		720,	405 },
+    { "Mode  5: 720x480",		720,	480 },
+    { "Mode  6: 720x576",		720,	576 },
+
+    { "Mode  7: 800x600",		800,	600 },
+
+    { "Mode  8: 960x540",		960,	540 },
+    { "Mode  9: 960x600",		960,	600 },
+    { "Mode  10: 960x720",		960,	720 },
+
+    { "Mode  11: 1024x576",		1024,	576 },
+    { "Mode  12: 1024x640",		1024,	640 },
+    { "Mode  13: 1024x768",		1024,	768 },
+
+    { "Mode  14: 1152x864",		1152,	864 },
+
+    { "Mode  15: 1280x720",		1280,	720 },
+    { "Mode  16: 1280x768",		1280,	768 },
+    { "Mode  17: 1280x960",		1280,	960 },
+    { "Mode  18: 1280x1024",	1280,	1024 },
+
+    { "Mode  19: 1440x810",		1440,	810 },
+    { "Mode  20: 1440x900",		1440,	900 },
+    { "Mode  21: 1440x1080",	1440,	1080 },
+
+    { "Mode  22: 1600x900",		1600,	900 },
+    { "Mode  23: 1600x1000",	1600,	1000 },
+    { "Mode  24: 1600x1200",	1600,	1200 },
+    { "Mode  25: 1680x1050",	1680,	1050 },
+
+    { "Mode  26: 1920x1080",	1920,	1080 },
+    { "Mode  27: 1920x1200",	1920,	1200 },
+    { "Mode  28: 1920x1440",	1920,	1440 },
 };
 static int	s_numVidModes = (sizeof(r_vidModes) / sizeof(r_vidModes[0]));
 
@@ -623,11 +650,17 @@
 
     if (mode == -1)
     {
+        if (width)
+        {
         *width = r_customWidth.GetInteger();
+        }
+
+        if (height)
+        {
         *height = r_customHeight.GetInteger();
+        }
         return true;
     }
-
     vm = &r_vidModes[mode];
 
     if (width)
@@ -665,12 +698,15 @@
     glimpParms_t	parms;
     int				i;
 
-    common->Printf("----- R_InitOpenGL -----\n");
+    common->Printf("----- Initializing OpenGL -----\n");
 
     if (glConfig.isInitialized)
     {
         common->FatalError("R_InitOpenGL called while active");
     }
+    common->Printf("OpenGL vendor: %s\n", glConfig.vendor_string);
+    common->Printf("OpenGL renderer: %s\n", glConfig.renderer_string);
+    common->Printf("OpenGL version: %s\n", glConfig.version_string);
 
     // in case we had an error while doing a tiled rendering
     tr.viewportOffset[0] = 0;
@@ -1974,7 +2010,7 @@
 GfxInfo_f
 ================
 */
-void GfxInfo_f(const idCmdArgs &args)
+static void GfxInfo_f(const idCmdArgs &args)
 {
     const char *fsstrings[] =
     {
@@ -2046,10 +2082,6 @@
         common->Printf("ARB2 path disabled\n");
     }
 
-    //=============================
-
-    common->Printf("-------\n");
-
     if (r_finish.GetBool())
     {
         common->Printf("Forcing glFinish\n");
@@ -2379,9 +2411,6 @@
 */
 void idRenderSystemLocal::Init(void)
 {
-
-    common->Printf("------- Initializing renderSystem --------\n");
-
     // clear all our internal state
     viewCount = 1;		// so cleared structures never match viewCount
     // we used to memset tr, but now that it is a class, we can't, so
@@ -2421,13 +2450,6 @@
     identitySpace.modelMatrix[0*4+0] = 1.0f;
     identitySpace.modelMatrix[1*4+1] = 1.0f;
     identitySpace.modelMatrix[2*4+2] = 1.0f;
-
-    // determine which back end we will use
-    // ??? this is invalid here as there is not enough information to set it up correctly
-    SetBackEndRenderer();
-
-    common->Printf("renderSystem initialized.\n");
-    common->Printf("--------------------------------------\n");
 }
 
 /*
diff -NEaurb neo/renderer/RenderWorld.cpp neo/renderer/RenderWorld.cpp
--- neo/renderer/RenderWorld.cpp	2013-08-14 01:47:51 +0000
+++ neo/renderer/RenderWorld.cpp	2013-08-13 16:10:44 +0000
@@ -1341,7 +1341,6 @@
     // check all areas for models
     for (i = 0; i < numAreas; i++)
     {
-
         area = &portalAreas[ areas[i] ];
 
         // check all models in this area
@@ -1362,7 +1361,7 @@
                     continue;
                 }
 
-#if 1	/* _D3XP addition. could use a cleaner approach */
+				/* _D3XP addition. could use a cleaner approach */
                 if (skipPlayer)
                 {
                     idStr name = model->Name();
@@ -1383,15 +1382,13 @@
                         continue;
                     }
                 }
-#endif
-
                 model = R_EntityDefDynamicModel(def);
+
                 if (!model)
                 {
                     continue;	// can happen with particle systems, which don't instantiate without a valid view
                 }
             }
-
             bounds.FromTransformedBounds(model->Bounds(&def->parms), def->parms.origin, def->parms.axis);
 
             // if the model bounds do not overlap with the trace bounds
@@ -1413,7 +1410,7 @@
                     continue;
                 }
 
-#if 1 /* _D3XP addition. could use a cleaner approach */
+				/* _D3XP addition. could use a cleaner approach */
                 if (skipPlayer)
                 {
                     idStr name = shader->GetName();
@@ -1434,8 +1431,6 @@
                         continue;
                     }
                 }
-#endif
-
                 tri = surf->geometry;
 
                 bounds.FromTransformedBounds(tri->bounds, def->parms.origin, def->parms.axis);
diff -NEaurb neo/renderer/VertexCache.cpp neo/renderer/VertexCache.cpp
--- neo/renderer/VertexCache.cpp	2013-08-14 01:47:51 +0000
+++ neo/renderer/VertexCache.cpp	2013-08-13 11:16:48 +0000
@@ -4,7 +4,7 @@
 Doom 3 GPL Source Code
 Copyright (C) 1999-2011 id Software LLC, a ZeniMax Media company.
 
-This file is part of the Doom 3 GPL Source Code (?Doom 3 Source Code?).
+This file is part of the Doom 3 GPL Source Code ("Doom 3 Source Code").
 
 Doom 3 Source Code is free software: you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
@@ -28,18 +28,74 @@
 
 #include "../idlib/precompiled.h"
 #pragma hdrstop
-
 #include "tr_local.h"
 
-
 static const int	FRAME_MEMORY_BYTES = 0x200000;
-static const int	EXPAND_HEADERS = 1024;
+static const int	EXPAND_HEADERS = 32;
 
-idCVar idVertexCache::r_showVertexCache("r_showVertexCache", "0", CVAR_INTEGER|CVAR_RENDERER, "");
-idCVar idVertexCache::r_vertexBufferMegs("r_vertexBufferMegs", "32", CVAR_INTEGER|CVAR_RENDERER, "");
+idCVar idVertexCache::r_showVertexCache("r_showVertexCache", "0", CVAR_INTEGER|CVAR_RENDERER, "show vertex cache");
+idCVar idVertexCache::r_useArbBufferRange("r_useArbBufferRange", "1", CVAR_BOOL|CVAR_RENDERER, "use ARB_map_buffer_range for optimization");
+idCVar idVertexCache::r_reuseVertexCacheSooner("r_reuseVertexCacheSooner", "1", CVAR_BOOL | CVAR_RENDERER, "reuse vertex buffers as soon as possible after freeing");
 
 idVertexCache		vertexCache;
 
+static GLuint gl_current_array_buffer = 0;
+static GLuint gl_current_index_buffer = 0;
+
+static void R_PrintVideoMem_f(const idCmdArgs &args)
+{
+    GLint  mem[4];
+
+    if (strstr(glConfig.extensions_string, "GL_NVX_gpu_memory_info"))
+    {
+        common->Printf("\nNvidia specific memory info:\n");
+        common->Printf("\n");
+        qglGetIntegerv(GPU_MEMORY_INFO_DEDICATED_VIDMEM_NVX , mem);
+        common->Printf("dedicated video memory %i MB\n", mem[0] >>10);
+
+        qglGetIntegerv(GPU_MEMORY_INFO_TOTAL_AVAILABLE_MEMORY_NVX , mem);
+        common->Printf("total available memory %i MB\n", mem[0] >>10);
+
+        qglGetIntegerv(GPU_MEMORY_INFO_CURRENT_AVAILABLE_VIDMEM_NVX , mem);
+        common->Printf("currently unused GPU memory %i MB\n", mem[0] >>10);
+
+        qglGetIntegerv(GPU_MEMORY_INFO_EVICTION_COUNT_NVX , mem);
+        common->Printf("count of total evictions seen by system %i MB\n", mem[0] >>10);
+
+        qglGetIntegerv(GPU_MEMORY_INFO_EVICTED_MEMORY_NVX , mem);
+        common->Printf("total video memory evicted %i MB\n", mem[0] >>10);
+    }
+    else
+    {
+        if (strstr(glConfig.extensions_string, "GL_ATI_meminfo"))
+        {
+            common->Printf("\nATI/AMD specific memory info:\n");
+            common->Printf("\n");
+            qglGetIntegerv(VBO_FREE_MEMORY_ATI, mem);
+            common->Printf("VBO: total memory free in the pool %i MB\n", mem[0] >> 10);
+            common->Printf("VBO: largest available free block in the pool %i MB\n", mem[1] >> 10);
+            common->Printf("VBO: total auxiliary memory free %i MB\n", mem[2] >> 10);
+            common->Printf("VBO: largest auxiliary free block %i MB\n", mem[3] >> 10);
+
+            qglGetIntegerv(TEXTURE_FREE_MEMORY_ATI, mem);
+            common->Printf("Texture: total memory free in the pool %i MB\n", mem[0] >> 10);
+            common->Printf("Texture: largest available free block in the pool %i MB\n", mem[1] >> 10);
+            common->Printf("Texture: total auxiliary memory free %i MB\n", mem[2] >> 10);
+            common->Printf("Texture: largest auxiliary free block %i MB\n", mem[3] >> 10);
+
+            qglGetIntegerv(RENDERBUFFER_FREE_MEMORY_ATI, mem);
+            common->Printf("RenderBuffer: total memory free in the pool %i MB\n", mem[0] >> 10);
+            common->Printf("RenderBuffer: largest available free block in the pool %i MB\n", mem[1] >> 10);
+            common->Printf("RenderBuffer: total auxiliary memory free %i MB\n", mem[2] >> 10);
+            common->Printf("RenderBuffer: largest auxiliary free block %i MB\n", mem[3] >> 10);
+        }
+        else
+        {
+            common->Printf("MemInfo not availabled for your video card or driver!\n");
+        }
+    }
+}
+
 /*
 ==============
 R_ListVertexCache_f
@@ -52,6 +108,37 @@
 
 /*
 ==============
+GL_BindBuffer
+==============
+*/
+static void GL_BindBuffer(GLenum target, GLuint buffer)
+{
+    if (target == GL_ARRAY_BUFFER)
+    {
+        if (gl_current_array_buffer != buffer)
+        {
+            gl_current_array_buffer = buffer;
+        }
+        else return;
+    }
+    else if (target == GL_ELEMENT_ARRAY_BUFFER)
+    {
+        if (gl_current_index_buffer != buffer)
+        {
+            gl_current_index_buffer = buffer;
+        }
+        else return;
+    }
+    else
+    {
+        common->Error("GL_BindBuffer : invalid buffer target : %i\n", (int) target);
+        return;
+    }
+    qglBindBufferARB(target, buffer);
+}
+
+/*
+==============
 idVertexCache::ActuallyFree
 ==============
 */
@@ -72,21 +159,33 @@
     // temp blocks are in a shared space that won't be freed
     if (block->tag != TAG_TEMP)
     {
-        staticAllocTotal -= block->size;
-        staticCountTotal--;
+        bool done = false;
 
-        if (block->vbo)
+        this->staticAllocTotal -= block->size;
+        this->staticCountTotal--;
+
+        if (block->vbo && !done)
+        {
+            // Does not seem to hurt any and is actually used in all other
+            // implementations in some form. Changed a bit to map to NULL pointer
+            // with block size. Removing this is probably ok but you cannot remove
+            // the if ( block->vbo ) cause then it will crash.
+            if (block->size == 0)
         {
-#if 0		// this isn't really necessary, it will be reused soon enough
-            // filling with zero length data is the equivalent of freeing
-            qglBindBufferARB(GL_ARRAY_BUFFER_ARB, block->vbo);
-            qglBufferDataARB(GL_ARRAY_BUFFER_ARB, 0, 0, GL_DYNAMIC_DRAW_ARB);
-#endif
+                GL_BindBuffer(GL_ARRAY_BUFFER_ARB, block->vbo);
+                qglBufferDataARB(GL_ARRAY_BUFFER_ARB, block->size, NULL, GL_DYNAMIC_DRAW_ARB);
         }
-        else if (block->virtMem)
+
+            // mark it as done and skip the rest.
+            done = true;
+        }
+        else if (block->virtMem && !done)
         {
             Mem_Free(block->virtMem);
             block->virtMem = NULL;
+
+            // mark it as done and skip the rest.
+            done = true;
         }
     }
     block->tag = TAG_FREE;		// mark as free
@@ -95,16 +194,18 @@
     block->next->prev = block->prev;
     block->prev->next = block->next;
 
-#if 1
+    if (r_reuseVertexCacheSooner.GetBool())
+    {
     // stick it on the front of the free list so it will be reused immediately
-    block->next = freeStaticHeaders.next;
-    block->prev = &freeStaticHeaders;
-#else
+        block->next = this->freeStaticHeaders.next;
+        block->prev = &this->freeStaticHeaders;
+    }
+    else
+    {
     // stick it on the back of the free list so it won't be reused soon (just for debugging)
-    block->next = &freeStaticHeaders;
-    block->prev = freeStaticHeaders.prev;
-#endif
-
+        block->next = &this->freeStaticHeaders;
+        block->prev = this->freeStaticHeaders.prev;
+    }
     block->next->prev = block;
     block->prev->next = block;
 }
@@ -141,14 +242,8 @@
                 common->Printf("GL_ARRAY_BUFFER_ARB = %i (%i bytes)\n", buffer->vbo, buffer->size);
             }
         }
-        if (buffer->indexBuffer)
-        {
-            qglBindBufferARB(GL_ELEMENT_ARRAY_BUFFER_ARB, buffer->vbo);
-        }
-        else
-        {
-            qglBindBufferARB(GL_ARRAY_BUFFER_ARB, buffer->vbo);
-        }
+        GL_BindBuffer((buffer->indexBuffer ? GL_ELEMENT_ARRAY_BUFFER : GL_ARRAY_BUFFER), buffer->vbo);
+
         return (void *)buffer->offset;
     }
 
@@ -156,12 +251,16 @@
     return (void *)((byte *)buffer->virtMem + buffer->offset);
 }
 
+/*
+===========
+idVertexCache::UnbindIndex
+===========
+*/
 void idVertexCache::UnbindIndex()
 {
-    qglBindBufferARB(GL_ELEMENT_ARRAY_BUFFER_ARB, 0);
+    GL_BindBuffer(GL_ELEMENT_ARRAY_BUFFER, 0);
 }
 
-
 //================================================================================
 
 /*
@@ -171,18 +270,14 @@
 */
 void idVertexCache::Init()
 {
-    cmdSystem->AddCommand("listVertexCache", R_ListVertexCache_f, CMD_FL_RENDERER, "lists vertex cache");
-
-    if (r_vertexBufferMegs.GetInteger() < 8)
-    {
-        r_vertexBufferMegs.SetInteger(8);
-    }
-
-    virtualMemory = false;
+    cmdSystem->AddCommand("printVideoMem", R_PrintVideoMem_f, CMD_FL_RENDERER, "Print Video Memory");
+    cmdSystem->AddCommand("listVertexCache", R_ListVertexCache_f, CMD_FL_RENDERER, "lists Vertex Cache");
 
     // use ARB_vertex_buffer_object unless explicitly disabled
     if (r_useVertexBuffers.GetInteger() && glConfig.ARBVertexBufferObjectAvailable)
     {
+        virtualMemory = false;
+        r_useIndexBuffers.SetBool(true);
         common->Printf("using ARB_vertex_buffer_object memory\n");
     }
     else
@@ -193,7 +288,7 @@
     }
 
     // initialize the cache memory blocks
-    freeStaticHeaders.next = freeStaticHeaders.prev = &freeStaticHeaders;
+    this->freeStaticHeaders.next = this->freeStaticHeaders.prev = &this->freeStaticHeaders;
     staticHeaders.next = staticHeaders.prev = &staticHeaders;
     freeDynamicHeaders.next = freeDynamicHeaders.prev = &freeDynamicHeaders;
     dynamicHeaders.next = dynamicHeaders.prev = &dynamicHeaders;
@@ -201,22 +296,23 @@
 
     // set up the dynamic frame memory
     frameBytes = FRAME_MEMORY_BYTES;
-    staticAllocTotal = 0;
+    this->staticAllocTotal = 0;
 
-    byte	*junk = (byte *)Mem_Alloc(frameBytes);
+    byte *frameBuffer = (byte *) Mem_Alloc(frameBytes);
     for (int i = 0 ; i < NUM_VERTEX_FRAMES ; i++)
     {
-        allocatingTempBuffer = true;	// force the alloc to use GL_STREAM_DRAW_ARB
-        Alloc(junk, frameBytes, &tempBuffers[i]);
-        allocatingTempBuffer = false;
-        tempBuffers[i]->tag = TAG_FIXED;
+        this->allocatingTempBuffer = true;	// force the alloc to use GL_STREAM_DRAW_ARB
+        this->Alloc(frameBuffer, this->frameBytes, &this->tempBuffers[i]);
+        this->allocatingTempBuffer = false;
+        this->tempBuffers[i]->tag = TAG_FIXED;
+
         // unlink these from the static list, so they won't ever get purged
-        tempBuffers[i]->next->prev = tempBuffers[i]->prev;
-        tempBuffers[i]->prev->next = tempBuffers[i]->next;
+        this->tempBuffers[i]->next->prev = this->tempBuffers[i]->prev;
+        this->tempBuffers[i]->prev->next = this->tempBuffers[i]->next;
     }
-    Mem_Free(junk);
+    Mem_Free(frameBuffer);
 
-    EndFrame();
+    this->EndFrame();
 }
 
 /*
@@ -242,8 +338,6 @@
 */
 void idVertexCache::Shutdown()
 {
-//	PurgeAll();	// !@#: also purge the temp buffers
-
     headerAllocator.Shutdown();
 }
 
@@ -254,7 +348,7 @@
 */
 void idVertexCache::Alloc(void *data, int size, vertCache_t **buffer, bool indexBuffer)
 {
-    vertCache_t	*block;
+    vertCache_t	*block = NULL;
 
     if (size <= 0)
     {
@@ -265,26 +359,59 @@
     *buffer = NULL;
 
     // if we don't have any remaining unused headers, allocate some more
-    if (freeStaticHeaders.next == &freeStaticHeaders)
+    if (this->freeStaticHeaders.next == &this->freeStaticHeaders)
     {
-
         for (int i = 0; i < EXPAND_HEADERS; i++)
         {
             block = headerAllocator.Alloc();
-            block->next = freeStaticHeaders.next;
-            block->prev = &freeStaticHeaders;
-            block->next->prev = block;
-            block->prev->next = block;
 
             if (!virtualMemory)
             {
-                qglGenBuffersARB(1, & block->vbo);
+                qglGenBuffersARB(1, &block->vbo);
+                block->size = 0;
             }
+            block->next = this->freeStaticHeaders.next;
+            block->prev = &this->freeStaticHeaders;
+            block->next->prev = block;
+            block->prev->next = block;
+        }
+    }
+    GLenum target = (indexBuffer ? GL_ELEMENT_ARRAY_BUFFER : GL_ARRAY_BUFFER);
+    GLenum usage = (allocatingTempBuffer ? GL_STREAM_DRAW : GL_STATIC_DRAW);
+
+    // try to find a matching block to replace so that we're not continually respecifying vbo data each frame
+    for (vertCache_t *findblock = this->freeStaticHeaders.next; ; findblock = findblock->next)
+    {
+        if (findblock == &this->freeStaticHeaders)
+        {
+            block = this->freeStaticHeaders.next;
+            break;
         }
+
+        if (findblock->target != target) continue;
+        if (findblock->usage != usage) continue;
+        if (findblock->size != size) continue;
+
+        block = findblock;
+        break;
     }
 
     // move it from the freeStaticHeaders list to the staticHeaders list
-    block = freeStaticHeaders.next;
+    block->target = target;
+    block->usage = usage;
+
+    if (block->vbo)
+    {
+        // orphan the buffer in case it needs respecifying (it usually will)
+        GL_BindBuffer(target, block->vbo);
+        qglBufferDataARB(target, (GLsizeiptr) size, NULL, usage);
+        qglBufferDataARB(target, (GLsizeiptr) size, data, usage);
+    }
+    else
+    {
+        block->virtMem = Mem_Alloc(size);
+        SIMDProcessor->Memcpy(block->virtMem, data, size);
+    }
     block->next->prev = block->prev;
     block->prev->next = block->next;
     block->next = staticHeaders.next;
@@ -297,10 +424,10 @@
     block->tag = TAG_USED;
 
     // save data for debugging
-    staticAllocThisFrame += block->size;
-    staticCountThisFrame++;
-    staticCountTotal++;
-    staticAllocTotal += block->size;
+    this->staticAllocThisFrame += block->size;
+    this->staticCountThisFrame++;
+    this->staticCountTotal++;
+    this->staticAllocTotal += block->size;
 
     // this will be set to zero when it is purged
     block->user = buffer;
@@ -310,35 +437,7 @@
     // load time lots of things may be created, but they aren't
     // referenced by the GPU yet, and can be purged if needed.
     block->frameUsed = currentFrame - NUM_VERTEX_FRAMES;
-
     block->indexBuffer = indexBuffer;
-
-    // copy the data
-    if (block->vbo)
-    {
-        if (indexBuffer)
-        {
-            qglBindBufferARB(GL_ELEMENT_ARRAY_BUFFER_ARB, block->vbo);
-            qglBufferDataARB(GL_ELEMENT_ARRAY_BUFFER_ARB, (GLsizeiptrARB)size, data, GL_STATIC_DRAW_ARB);
-        }
-        else
-        {
-            qglBindBufferARB(GL_ARRAY_BUFFER_ARB, block->vbo);
-            if (allocatingTempBuffer)
-            {
-                qglBufferDataARB(GL_ARRAY_BUFFER_ARB, (GLsizeiptrARB)size, data, GL_STREAM_DRAW_ARB);
-            }
-            else
-            {
-                qglBufferDataARB(GL_ARRAY_BUFFER_ARB, (GLsizeiptrARB)size, data, GL_STATIC_DRAW_ARB);
-            }
-        }
-    }
-    else
-    {
-        block->virtMem = Mem_Alloc(size);
-        SIMDProcessor->Memcpy(block->virtMem, data, size);
-    }
 }
 
 /*
@@ -357,11 +456,11 @@
     {
         common->FatalError("idVertexCache Touch: freed pointer");
     }
+
     if (block->tag == TAG_TEMP)
     {
         common->FatalError("idVertexCache Touch: temporary pointer");
     }
-
     block->frameUsed = currentFrame;
 
     // move to the head of the LRU list
@@ -370,6 +469,7 @@
 
     block->next = staticHeaders.next;
     block->prev = &staticHeaders;
+
     staticHeaders.next->prev = block;
     staticHeaders.next = block;
 }
@@ -390,6 +490,7 @@
     {
         common->FatalError("idVertexCache Free: freed pointer");
     }
+
     if (block->tag == TAG_TEMP)
     {
         common->FatalError("idVertexCache Free: temporary pointer");
@@ -404,6 +505,7 @@
 
     block->next = deferredFreeList.next;
     block->prev = &deferredFreeList;
+
     deferredFreeList.next->prev = block;
     deferredFreeList.next = block;
 }
@@ -430,9 +532,9 @@
     {
         // if we don't have enough room in the temp block, allocate a static block,
         // but immediately free it so it will get freed at the next frame
-        tempOverflow = true;
-        Alloc(data, size, &block);
-        Free(block);
+        this->tempOverflow = true;
+        this->Alloc(data, size, &block);
+        this->Free(block);
         return block;
     }
 
@@ -441,7 +543,6 @@
     // if we don't have any remaining unused headers, allocate some more
     if (freeDynamicHeaders.next == &freeDynamicHeaders)
     {
-
         for (int i = 0; i < EXPAND_HEADERS; i++)
         {
             block = headerAllocator.Alloc();
@@ -474,16 +575,40 @@
     block->virtMem = tempBuffers[listNum]->virtMem;
     block->vbo = tempBuffers[listNum]->vbo;
 
+    // mh code start
     if (block->vbo)
     {
-        qglBindBufferARB(GL_ARRAY_BUFFER_ARB, block->vbo);
-        qglBufferSubDataARB(GL_ARRAY_BUFFER_ARB, block->offset, (GLsizeiptrARB)size, data);
+        GL_BindBuffer(GL_ARRAY_BUFFER, block->vbo);
+
+        // try to get an unsynchronized map if at all possible
+        if (glConfig.ARBMapBufferRangeAvailable && r_useArbBufferRange.GetBool())
+        {
+            GLvoid		*dst = NULL;
+            GLbitfield	access = (GL_MAP_WRITE_BIT | ((block->offset == 0) ? GL_MAP_INVALIDATE_BUFFER_BIT : GL_MAP_UNSYNCHRONIZED_BIT) | GL_MAP_INVALIDATE_RANGE_BIT);
+
+            // if the buffer has wrapped then we orphan it
+            if ((dst = qglMapBufferRange(GL_ARRAY_BUFFER, block->offset, (GLsizeiptr) size, access)) != NULL)
+            {
+                SIMDProcessor->Memcpy((byte *) dst, data, size);
+
+                qglUnmapBufferARB(GL_ARRAY_BUFFER);
+
+                return block;
     }
     else
     {
-        SIMDProcessor->Memcpy((byte *)block->virtMem + block->offset, data, size);
+                qglBufferSubDataARB(GL_ARRAY_BUFFER, block->offset, (GLsizeiptr) size, data);
+            }
+        }
+        else
+        {
+            qglBufferSubDataARB(GL_ARRAY_BUFFER, block->offset, (GLsizeiptr) size, data);
+        }
+    }
+    else
+    {
+        SIMDProcessor->Memcpy((byte *) block->virtMem + block->offset, data, size);
     }
-
     return block;
 }
 
@@ -508,38 +633,26 @@
                 staticUseSize += block->size;
             }
         }
-
         const char *frameOverflow = tempOverflow ? "(OVERFLOW)" : "";
 
         common->Printf("vertex dynamic:%i=%ik%s, static alloc:%i=%ik used:%i=%ik total:%i=%ik\n",
                        dynamicCountThisFrame, dynamicAllocThisFrame/1024, frameOverflow,
-                       staticCountThisFrame, staticAllocThisFrame/1024,
+                       this->staticCountThisFrame, staticAllocThisFrame/1024,
                        staticUseCount, staticUseSize/1024,
-                       staticCountTotal, staticAllocTotal/1024);
+                       this->staticCountTotal, staticAllocTotal/1024);
     }
 
-#if 0
-    // if our total static count is above our working memory limit, start purging things
-    while (staticAllocTotal > r_vertexBufferMegs.GetInteger() * 1024 * 1024)
-    {
-        // free the least recently used
-
-    }
-#endif
-
     if (!virtualMemory)
     {
         // unbind vertex buffers so normal virtual memory will be used in case
         // r_useVertexBuffers / r_useIndexBuffers
-        qglBindBufferARB(GL_ARRAY_BUFFER_ARB, 0);
-        qglBindBufferARB(GL_ELEMENT_ARRAY_BUFFER_ARB, 0);
+        GL_BindBuffer(GL_ARRAY_BUFFER_ARB, 0);
+        GL_BindBuffer(GL_ELEMENT_ARRAY_BUFFER_ARB, 0);
     }
-
-
     currentFrame = tr.frameCount;
     listNum = currentFrame % NUM_VERTEX_FRAMES;
-    staticAllocThisFrame = 0;
-    staticCountThisFrame = 0;
+    this->staticAllocThisFrame = 0;
+    this->staticCountThisFrame = 0;
     dynamicAllocThisFrame = 0;
     dynamicCountThisFrame = 0;
     tempOverflow = false;
@@ -571,36 +684,33 @@
 void idVertexCache::List(void)
 {
     int	numActive = 0;
-    int	numDeferred = 0;
     int frameStatic = 0;
     int	totalStatic = 0;
-    int	deferredSpace = 0;
-
     vertCache_t *block;
+
     for (block = staticHeaders.next ; block != &staticHeaders ; block = block->next)
     {
         numActive++;
 
         totalStatic += block->size;
+
         if (block->frameUsed == currentFrame)
         {
             frameStatic += block->size;
         }
     }
-
     int	numFreeStaticHeaders = 0;
+
     for (block = freeStaticHeaders.next ; block != &freeStaticHeaders ; block = block->next)
     {
         numFreeStaticHeaders++;
     }
-
     int	numFreeDynamicHeaders = 0;
+
     for (block = freeDynamicHeaders.next ; block != &freeDynamicHeaders ; block = block->next)
     {
         numFreeDynamicHeaders++;
     }
-
-    common->Printf("%i megs working set\n", r_vertexBufferMegs.GetInteger());
     common->Printf("%i dynamic temp buffers of %ik\n", NUM_VERTEX_FRAMES, frameBytes / 1024);
     common->Printf("%5i active static headers\n", numActive);
     common->Printf("%5i free static headers\n", numFreeStaticHeaders);
diff -NEaurb neo/renderer/VertexCache.h neo/renderer/VertexCache.h
--- neo/renderer/VertexCache.h	2013-08-14 01:47:52 +0000
+++ neo/renderer/VertexCache.h	2013-08-13 03:29:16 +0000
@@ -4,7 +4,7 @@
 Doom 3 GPL Source Code
 Copyright (C) 1999-2011 id Software LLC, a ZeniMax Media company.
 
-This file is part of the Doom 3 GPL Source Code (?Doom 3 Source Code?).
+This file is part of the Doom 3 GPL Source Code ("Doom 3 Source Code").
 
 Doom 3 Source Code is free software: you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
@@ -27,7 +27,6 @@
 */
 
 // vertex cache calls should only be made by the front end
-
 const int NUM_VERTEX_FRAMES = 2;
 
 typedef enum
@@ -41,10 +40,12 @@
 typedef struct vertCache_s
 {
     GLuint			vbo;
+    GLenum			target;
+    GLenum			usage;
     void			*virtMem;			// only one of vbo / virtMem will be set
     bool			indexBuffer;		// holds indexes instead of vertexes
 
-    int				offset;
+    intptr_t		offset;
     int				size;				// may be larger than the amount asked for, due
     // to round up and minimum fragment sizes
     int				tag;				// a tag of 0 is a free block
@@ -111,7 +112,8 @@
     void			ActuallyFree(vertCache_t *block);
 
     static idCVar	r_showVertexCache;
-    static idCVar	r_vertexBufferMegs;
+    static idCVar	r_useArbBufferRange;
+    static idCVar	r_reuseVertexCacheSooner;
 
     int				staticCountTotal;
     int				staticAllocTotal;		// for end of frame purging
diff -NEaurb neo/renderer/draw_arb.cpp neo/renderer/draw_arb.cpp
--- neo/renderer/draw_arb.cpp	2013-08-14 01:47:51 +0000
+++ neo/renderer/draw_arb.cpp	2013-08-13 02:15:32 +0000
@@ -27,7 +27,6 @@
 */
 #include "../idlib/precompiled.h"
 #pragma hdrstop
-
 #include "tr_local.h"
 
 /*
@@ -108,7 +107,6 @@
 
 // ATI R100 can't do partial texgens
 #define	NO_MIXED_TEXGEN
-
 #ifdef NO_MIXED_TEXGEN
     idVec4	plane;
     plane[0] = 0;
@@ -138,19 +136,6 @@
     qglDisable(GL_TEXTURE_GEN_Q);
 #endif
 
-#if 0
-    GL_State(GLS_SRCBLEND_ONE | GLS_DSTBLEND_ZERO | GLS_DEPTHMASK
-             | backEnd.depthFunc);
-// the texccords are the non-normalized vector towards the light origin
-    GL_SelectTexture(0);
-    globalImages->normalCubeMapImage->Bind();
-    qglEnableClientState(GL_TEXTURE_COORD_ARRAY);
-    qglTexCoordPointer(3, GL_FLOAT, sizeof(lightingCache_t), ((lightingCache_t *)vertexCache.Position(tri->lightingCache))->localLightVector.ToFloatPtr());
-// draw it
-    RB_DrawElementsWithCounters(tri);
-    return;
-#endif
-
     // we can't do bump mapping with standard calls, so skip it
     if (glConfig.envDot3Available && glConfig.cubeMapAvailable)
     {
@@ -163,7 +148,6 @@
         // texture 0 will be the per-surface bump map
         GL_SelectTexture(0);
         qglEnableClientState(GL_TEXTURE_COORD_ARRAY);
-//	FIXME: matrix work!	RB_BindStageTexture( surfaceRegs, &surfaceStage->texture, surf );
         din->bumpImage->Bind();
 
         // texture 1 is the normalization cube map
@@ -200,7 +184,6 @@
         qglDisableClientState(GL_TEXTURE_COORD_ARRAY);
 
         GL_SelectTexture(0);
-//		RB_FinishStageTexture( &surfaceStage->texture, surf );
     }
 
     //-----------------------------------------------------
@@ -237,10 +220,8 @@
             qglTexEnvi(GL_TEXTURE_ENV, GL_RGB_SCALE_ARB, 1);
         }
     }
-
     qglEnableClientState(GL_TEXTURE_COORD_ARRAY);
-    // FIXME: does this not get the texture matrix?
-//	RB_BindStageTexture( surfaceRegs, &surfaceStage->texture, surf );
+
     din->diffuseImage->Bind();
 
     // texture 1 will get the light projected texture
@@ -270,8 +251,6 @@
         qglDisableClientState(GL_COLOR_ARRAY);
         GL_TexEnv(GL_MODULATE);
     }
-
-//	RB_FinishStageTexture( &surfaceStage->texture, surf );
 }
 
 /*
@@ -308,7 +287,6 @@
     // texture 0 will be the per-surface bump map
     GL_SelectTexture(0);
     qglEnableClientState(GL_TEXTURE_COORD_ARRAY);
-//	FIXME: matrix work!	RB_BindStageTexture( surfaceRegs, &surfaceStage->texture, surf );
     din->bumpImage->Bind();
 
     // texture 1 is the normalization cube map
@@ -345,8 +323,6 @@
     qglDisableClientState(GL_TEXTURE_COORD_ARRAY);
 
     GL_SelectTexture(0);
-//		RB_FinishStageTexture( &surfaceStage->texture, surf );
-
 
     //-----------------------------------------------------
     //
@@ -382,10 +358,7 @@
             qglTexEnvi(GL_TEXTURE_ENV, GL_RGB_SCALE_ARB, 1);
         }
     }
-
     qglEnableClientState(GL_TEXTURE_COORD_ARRAY);
-    // FIXME: does this not get the texture matrix?
-//	RB_BindStageTexture( surfaceRegs, &surfaceStage->texture, surf );
     din->diffuseImage->Bind();
 
     // texture 1 will get the light projected texture
@@ -444,8 +417,6 @@
         qglDisableClientState(GL_COLOR_ARRAY);
         GL_TexEnv(GL_MODULATE);
     }
-
-//	RB_FinishStageTexture( &surfaceStage->texture, surf );
 }
 
 
diff -NEaurb neo/renderer/draw_arb2.cpp neo/renderer/draw_arb2.cpp
--- neo/renderer/draw_arb2.cpp	2013-08-14 01:47:51 +0000
+++ neo/renderer/draw_arb2.cpp	2013-08-13 07:23:04 +0000
@@ -28,19 +28,8 @@
 
 #include "../idlib/precompiled.h"
 #pragma hdrstop
-
 #include "tr_local.h"
 
-#include "cg_explicit.h"
-
-CGcontext cg_context;
-
-static void cg_error_callback(void)
-{
-    CGerror i = cgGetError();
-    common->Printf("Cg error (%d): %s\n", i, cgGetErrorString(i));
-}
-
 /*
 =========================================================================================
 
@@ -336,12 +325,10 @@
         {
             continue;
         }
-
         qglStencilFunc(GL_ALWAYS, 128, 255);
 
         backEnd.depthFunc = GLS_DEPTHFUNC_LESS;
         RB_ARB2_CreateDrawInteractions(vLight->translucentInteractions);
-
         backEnd.depthFunc = GLS_DEPTHFUNC_EQUAL;
     }
 
@@ -585,7 +572,6 @@
         common->Printf("Not available.\n");
         return;
     }
-
     common->Printf("Available.\n");
 
     common->Printf("---------------------------------\n");
diff -NEaurb neo/renderer/draw_common.cpp neo/renderer/draw_common.cpp
--- neo/renderer/draw_common.cpp	2013-08-14 01:47:51 +0000
+++ neo/renderer/draw_common.cpp	2013-08-13 03:29:14 +0000
@@ -1169,8 +1169,7 @@
     const srfTriangles_t	*tri;
 
     // set the light position if we are using a vertex program to project the rear surfaces
-    if (tr.backEndRendererHasVertexPrograms && r_useShadowVertexProgram.GetBool()
-        && surf->space != backEnd.currentSpace)
+    if (tr.backEndRendererHasVertexPrograms && r_useShadowVertexProgram.GetBool() && surf->space != backEnd.currentSpace)
     {
         idVec4 localLight;
 
@@ -1280,7 +1279,6 @@
                 }
             }
         }
-
         qglStencilOp(GL_KEEP, GL_KEEP, GL_KEEP);
         qglDisable(GL_STENCIL_TEST);
         GL_Cull(CT_TWO_SIDED);
@@ -1291,20 +1289,41 @@
         return;
     }
 
-    // patent-free work around
     if (!external)
     {
+        // traditional depth-pass stencil shadows
+        if (glConfig.twoSidedStencilAvailable && r_useTwoSidedStencil.GetBool())
+        {
+            qglStencilOpSeparate(backEnd.viewDef->isMirror ? GL_FRONT : GL_BACK, GL_KEEP, tr.stencilDecr, GL_KEEP);
+            qglStencilOpSeparate(backEnd.viewDef->isMirror ? GL_BACK : GL_FRONT, GL_KEEP, tr.stencilIncr, GL_KEEP);
+            GL_Cull(CT_TWO_SIDED);
+            RB_DrawShadowElementsWithCounters(tri, numIndexes);
+        }
+        else
+        {
         // "preload" the stencil buffer with the number of volumes
         // that get clipped by the near or far clip plane
         qglStencilOp(GL_KEEP, tr.stencilDecr, tr.stencilDecr);
         GL_Cull(CT_FRONT_SIDED);
         RB_DrawShadowElementsWithCounters(tri, numIndexes);
+
         qglStencilOp(GL_KEEP, tr.stencilIncr, tr.stencilIncr);
         GL_Cull(CT_BACK_SIDED);
         RB_DrawShadowElementsWithCounters(tri, numIndexes);
     }
-
+    }
+    else
+    {
     // traditional depth-pass stencil shadows
+        if (glConfig.twoSidedStencilAvailable && r_useTwoSidedStencil.GetBool())
+        {
+            qglStencilOpSeparate(backEnd.viewDef->isMirror ? GL_FRONT : GL_BACK, GL_KEEP, GL_KEEP, tr.stencilIncr);
+            qglStencilOpSeparate(backEnd.viewDef->isMirror ? GL_BACK : GL_FRONT, GL_KEEP, GL_KEEP, tr.stencilDecr);
+            GL_Cull(CT_TWO_SIDED);
+            RB_DrawShadowElementsWithCounters(tri, numIndexes);
+        }
+        else
+        {
     qglStencilOp(GL_KEEP, GL_KEEP, tr.stencilIncr);
     GL_Cull(CT_FRONT_SIDED);
     RB_DrawShadowElementsWithCounters(tri, numIndexes);
@@ -1312,6 +1331,8 @@
     qglStencilOp(GL_KEEP, GL_KEEP, tr.stencilDecr);
     GL_Cull(CT_BACK_SIDED);
     RB_DrawShadowElementsWithCounters(tri, numIndexes);
+        }
+    }
 }
 
 /*
diff -NEaurb neo/renderer/draw_exp.cpp neo/renderer/draw_exp.cpp
--- neo/renderer/draw_exp.cpp	2013-08-14 01:47:51 +0000
+++ neo/renderer/draw_exp.cpp	2013-08-13 16:10:44 +0000
@@ -555,7 +555,6 @@
 
     initialized = true;
 
-#if 1
     //
     // allocate the floating point rendering buffer
     //
@@ -567,8 +566,6 @@
     *atr_p++ = TRUE;
     *atr_p++ = WGL_BIND_TO_TEXTURE_RECTANGLE_FLOAT_RGBA_NV;
     *atr_p++ = TRUE;
-//	*atr_p++ = WGL_BIND_TO_TEXTURE_RGBA_ARB;
-//	*atr_p++ = TRUE;
     *atr_p++ = WGL_DEPTH_BITS_ARB;
     *atr_p++ = 24;
     *atr_p++ = WGL_STENCIL_BITS_ARB;
@@ -579,12 +576,6 @@
     ret = wglChoosePixelFormatARB(win32.hDC, iAttributes, fAttributes,
                                   sizeof(pixelformats) / sizeof(pixelformats[0]), pixelformats, &numFormats);
 
-#if 0
-    for (int i = 0 ; i < (int)numFormats ; i++)
-    {
-        R_PrintPixelFormat(pixelformats[i]);
-    }
-#endif
     common->Printf("\nfloatPbuffer:\n");
     R_PrintPixelFormat(pixelformats[0]);
 
@@ -645,7 +636,7 @@
 
     // allocate a texture for the rendering
 
-#endif
+
 
     //=================================================================================
 
diff -NEaurb neo/renderer/draw_r200.cpp neo/renderer/draw_r200.cpp
--- neo/renderer/draw_r200.cpp	2013-08-14 01:47:51 +0000
+++ neo/renderer/draw_r200.cpp	2013-08-13 03:29:14 +0000
@@ -148,7 +148,6 @@
         break;
     }
 
-
     // texture 0 = light projection
     // texture 1 = light falloff
     // texture 2 = surface diffuse
diff -NEaurb neo/renderer/glext.h neo/renderer/glext.h
--- neo/renderer/glext.h	2013-08-14 01:47:52 +0000
+++ neo/renderer/glext.h	2013-08-13 11:16:48 +0000
@@ -6,34 +6,34 @@
 #endif
 
     /*
-    ** License Applicability. Except to the extent portions of this file are
-    ** made subject to an alternative license as permitted in the SGI Free
-    ** Software License B, Version 1.1 (the "License"), the contents of this
-    ** file are subject only to the provisions of the License. You may not use
-    ** this file except in compliance with the License. You may obtain a copy
-    ** of the License at Silicon Graphics, Inc., attn: Legal Services, 1600
-    ** Amphitheatre Parkway, Mountain View, CA 94043-1351, or at:
+    ** Copyright (c) 2007-2012 The Khronos Group Inc.
     **
-    ** http://oss.sgi.com/projects/FreeB
+    ** Permission is hereby granted, free of charge, to any person obtaining a
+    ** copy of this software and/or associated documentation files (the
+    ** "Materials"), to deal in the Materials without restriction, including
+    ** without limitation the rights to use, copy, modify, merge, publish,
+    ** distribute, sublicense, and/or sell copies of the Materials, and to
+    ** permit persons to whom the Materials are furnished to do so, subject to
+    ** the following conditions:
     **
-    ** Note that, as provided in the License, the Software is distributed on an
-    ** "AS IS" basis, with ALL EXPRESS AND IMPLIED WARRANTIES AND CONDITIONS
-    ** DISCLAIMED, INCLUDING, WITHOUT LIMITATION, ANY IMPLIED WARRANTIES AND
-    ** CONDITIONS OF MERCHANTABILITY, SATISFACTORY QUALITY, FITNESS FOR A
-    ** PARTICULAR PURPOSE, AND NON-INFRINGEMENT.
+    ** The above copyright notice and this permission notice shall be included
+    ** in all copies or substantial portions of the Materials.
     **
-    ** Original Code. The Original Code is: OpenGL Sample Implementation,
-    ** Version 1.2.1, released January 26, 2000, developed by Silicon Graphics,
-    ** Inc. The Original Code is Copyright (c) 1991-2002 Silicon Graphics, Inc.
-    ** Copyright in any portions created by third parties is as indicated
-    ** elsewhere herein. All Rights Reserved.
-    **
-    ** Additional Notice Provisions: This software was created using the
-    ** OpenGL(R) version 1.2.1 Sample Implementation published by SGI, but has
-    ** not been independently verified as being compliant with the OpenGL(R)
-    ** version 1.2.1 Specification.
+    ** THE MATERIALS ARE PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+    ** EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+    ** MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
+    ** IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
+    ** CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
+    ** TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
+    ** MATERIALS OR THE USE OR OTHER DEALINGS IN THE MATERIALS.
     */
 
+    /* Header file version number, required by OpenGL ABI for Linux */
+    /* glext.h last updated $Date: 2012-03-26 17:45:29 -0700 (Mon, 26 Mar 2012) $ */
+    /* Current version at http://www.opengl.org/registry/ */
+#define GL_GLEXT_VERSION 77
+    /* Function declaration macros - to move into glplatform.h */
+
 #if defined(_WIN32) && !defined(APIENTRY) && !defined(__CYGWIN__) && !defined(__SCITECH_SNAP__)
 #define WIN32_LEAN_AND_MEAN 1
 #include <windows.h>
@@ -49,12 +49,16 @@
 #define GLAPI extern
 #endif
 
-    /*************************************************************/
+#define	GPU_MEMORY_INFO_DEDICATED_VIDMEM_NVX          0x9047
+#define	GPU_MEMORY_INFO_TOTAL_AVAILABLE_MEMORY_NVX    0x9048
+#define	GPU_MEMORY_INFO_CURRENT_AVAILABLE_VIDMEM_NVX  0x9049
+#define	GPU_MEMORY_INFO_EVICTION_COUNT_NVX            0x904A
+#define	GPU_MEMORY_INFO_EVICTED_MEMORY_NVX            0x904B
+#define VBO_FREE_MEMORY_ATI                           0x87FB
+#define TEXTURE_FREE_MEMORY_ATI                       0x87FC
+#define RENDERBUFFER_FREE_MEMORY_ATI                  0x87FD
 
-    /* Header file version number, required by OpenGL ABI for Linux */
-    /* glext.h last updated 2003/1/12 */
-    /* Current version at http://oss.sgi.com/projects/ogl-sample/registry/ */
-#define GL_GLEXT_VERSION 21
+    /*************************************************************/
 
 #ifndef GL_VERSION_1_2
 #define GL_UNSIGNED_BYTE_3_3_2            0x8032
@@ -62,7 +66,6 @@
 #define GL_UNSIGNED_SHORT_5_5_5_1         0x8034
 #define GL_UNSIGNED_INT_8_8_8_8           0x8035
 #define GL_UNSIGNED_INT_10_10_10_2        0x8036
-#define GL_RESCALE_NORMAL                 0x803A
 #define GL_TEXTURE_BINDING_3D             0x806A
 #define GL_PACK_SKIP_IMAGES               0x806B
 #define GL_PACK_IMAGE_HEIGHT              0x806C
@@ -89,17 +92,21 @@
 #define GL_TEXTURE_MAX_LOD                0x813B
 #define GL_TEXTURE_BASE_LEVEL             0x813C
 #define GL_TEXTURE_MAX_LEVEL              0x813D
-#define GL_LIGHT_MODEL_COLOR_CONTROL      0x81F8
-#define GL_SINGLE_COLOR                   0x81F9
-#define GL_SEPARATE_SPECULAR_COLOR        0x81FA
 #define GL_SMOOTH_POINT_SIZE_RANGE        0x0B12
 #define GL_SMOOTH_POINT_SIZE_GRANULARITY  0x0B13
 #define GL_SMOOTH_LINE_WIDTH_RANGE        0x0B22
 #define GL_SMOOTH_LINE_WIDTH_GRANULARITY  0x0B23
-#define GL_ALIASED_POINT_SIZE_RANGE       0x846D
 #define GL_ALIASED_LINE_WIDTH_RANGE       0x846E
 #endif
 
+#ifndef GL_VERSION_1_2_DEPRECATED
+#define GL_RESCALE_NORMAL                 0x803A
+#define GL_LIGHT_MODEL_COLOR_CONTROL      0x81F8
+#define GL_SINGLE_COLOR                   0x81F9
+#define GL_SEPARATE_SPECULAR_COLOR        0x81FA
+#define GL_ALIASED_POINT_SIZE_RANGE       0x846D
+#endif
+
 #ifndef GL_ARB_imaging
 #define GL_CONSTANT_COLOR                 0x8001
 #define GL_ONE_MINUS_CONSTANT_COLOR       0x8002
@@ -112,6 +119,9 @@
 #define GL_BLEND_EQUATION                 0x8009
 #define GL_FUNC_SUBTRACT                  0x800A
 #define GL_FUNC_REVERSE_SUBTRACT          0x800B
+#endif
+
+#ifndef GL_ARB_imaging_DEPRECATED
 #define GL_CONVOLUTION_1D                 0x8010
 #define GL_CONVOLUTION_2D                 0x8011
 #define GL_SEPARABLE_2D                   0x8012
@@ -212,12 +222,6 @@
 #define GL_TEXTURE30                      0x84DE
 #define GL_TEXTURE31                      0x84DF
 #define GL_ACTIVE_TEXTURE                 0x84E0
-#define GL_CLIENT_ACTIVE_TEXTURE          0x84E1
-#define GL_MAX_TEXTURE_UNITS              0x84E2
-#define GL_TRANSPOSE_MODELVIEW_MATRIX     0x84E3
-#define GL_TRANSPOSE_PROJECTION_MATRIX    0x84E4
-#define GL_TRANSPOSE_TEXTURE_MATRIX       0x84E5
-#define GL_TRANSPOSE_COLOR_MATRIX         0x84E6
 #define GL_MULTISAMPLE                    0x809D
 #define GL_SAMPLE_ALPHA_TO_COVERAGE       0x809E
 #define GL_SAMPLE_ALPHA_TO_ONE            0x809F
@@ -226,9 +230,6 @@
 #define GL_SAMPLES                        0x80A9
 #define GL_SAMPLE_COVERAGE_VALUE          0x80AA
 #define GL_SAMPLE_COVERAGE_INVERT         0x80AB
-#define GL_MULTISAMPLE_BIT                0x20000000
-#define GL_NORMAL_MAP                     0x8511
-#define GL_REFLECTION_MAP                 0x8512
 #define GL_TEXTURE_CUBE_MAP               0x8513
 #define GL_TEXTURE_BINDING_CUBE_MAP       0x8514
 #define GL_TEXTURE_CUBE_MAP_POSITIVE_X    0x8515
@@ -239,10 +240,6 @@
 #define GL_TEXTURE_CUBE_MAP_NEGATIVE_Z    0x851A
 #define GL_PROXY_TEXTURE_CUBE_MAP         0x851B
 #define GL_MAX_CUBE_MAP_TEXTURE_SIZE      0x851C
-#define GL_COMPRESSED_ALPHA               0x84E9
-#define GL_COMPRESSED_LUMINANCE           0x84EA
-#define GL_COMPRESSED_LUMINANCE_ALPHA     0x84EB
-#define GL_COMPRESSED_INTENSITY           0x84EC
 #define GL_COMPRESSED_RGB                 0x84ED
 #define GL_COMPRESSED_RGBA                0x84EE
 #define GL_TEXTURE_COMPRESSION_HINT       0x84EF
@@ -251,7 +248,22 @@
 #define GL_NUM_COMPRESSED_TEXTURE_FORMATS 0x86A2
 #define GL_COMPRESSED_TEXTURE_FORMATS     0x86A3
 #define GL_CLAMP_TO_BORDER                0x812D
-#define GL_CLAMP_TO_BORDER_SGIS           0x812D
+#endif
+
+#ifndef GL_VERSION_1_3_DEPRECATED
+#define GL_CLIENT_ACTIVE_TEXTURE          0x84E1
+#define GL_MAX_TEXTURE_UNITS              0x84E2
+#define GL_TRANSPOSE_MODELVIEW_MATRIX     0x84E3
+#define GL_TRANSPOSE_PROJECTION_MATRIX    0x84E4
+#define GL_TRANSPOSE_TEXTURE_MATRIX       0x84E5
+#define GL_TRANSPOSE_COLOR_MATRIX         0x84E6
+#define GL_MULTISAMPLE_BIT                0x20000000
+#define GL_NORMAL_MAP                     0x8511
+#define GL_REFLECTION_MAP                 0x8512
+#define GL_COMPRESSED_ALPHA               0x84E9
+#define GL_COMPRESSED_LUMINANCE           0x84EA
+#define GL_COMPRESSED_LUMINANCE_ALPHA     0x84EB
+#define GL_COMPRESSED_INTENSITY           0x84EC
 #define GL_COMBINE                        0x8570
 #define GL_COMBINE_RGB                    0x8571
 #define GL_COMBINE_ALPHA                  0x8572
@@ -283,16 +295,26 @@
 #define GL_BLEND_SRC_RGB                  0x80C9
 #define GL_BLEND_DST_ALPHA                0x80CA
 #define GL_BLEND_SRC_ALPHA                0x80CB
-#define GL_POINT_SIZE_MIN                 0x8126
-#define GL_POINT_SIZE_MAX                 0x8127
 #define GL_POINT_FADE_THRESHOLD_SIZE      0x8128
-#define GL_POINT_DISTANCE_ATTENUATION     0x8129
-#define GL_GENERATE_MIPMAP                0x8191
-#define GL_GENERATE_MIPMAP_HINT           0x8192
 #define GL_DEPTH_COMPONENT16              0x81A5
 #define GL_DEPTH_COMPONENT24              0x81A6
 #define GL_DEPTH_COMPONENT32              0x81A7
 #define GL_MIRRORED_REPEAT                0x8370
+#define GL_MAX_TEXTURE_LOD_BIAS           0x84FD
+#define GL_TEXTURE_LOD_BIAS               0x8501
+#define GL_INCR_WRAP                      0x8507
+#define GL_DECR_WRAP                      0x8508
+#define GL_TEXTURE_DEPTH_SIZE             0x884A
+#define GL_TEXTURE_COMPARE_MODE           0x884C
+#define GL_TEXTURE_COMPARE_FUNC           0x884D
+#endif
+
+#ifndef GL_VERSION_1_4_DEPRECATED
+#define GL_POINT_SIZE_MIN                 0x8126
+#define GL_POINT_SIZE_MAX                 0x8127
+#define GL_POINT_DISTANCE_ATTENUATION     0x8129
+#define GL_GENERATE_MIPMAP                0x8191
+#define GL_GENERATE_MIPMAP_HINT           0x8192
 #define GL_FOG_COORDINATE_SOURCE          0x8450
 #define GL_FOG_COORDINATE                 0x8451
 #define GL_FRAGMENT_DEPTH                 0x8452
@@ -308,15 +330,8 @@
 #define GL_SECONDARY_COLOR_ARRAY_STRIDE   0x845C
 #define GL_SECONDARY_COLOR_ARRAY_POINTER  0x845D
 #define GL_SECONDARY_COLOR_ARRAY          0x845E
-#define GL_MAX_TEXTURE_LOD_BIAS           0x84FD
 #define GL_TEXTURE_FILTER_CONTROL         0x8500
-#define GL_TEXTURE_LOD_BIAS               0x8501
-#define GL_INCR_WRAP                      0x8507
-#define GL_DECR_WRAP                      0x8508
-#define GL_TEXTURE_DEPTH_SIZE             0x884A
 #define GL_DEPTH_TEXTURE_MODE             0x884B
-#define GL_TEXTURE_COMPARE_MODE           0x884C
-#define GL_TEXTURE_COMPARE_FUNC           0x884D
 #define GL_COMPARE_R_TO_TEXTURE           0x884E
 #endif
 
@@ -331,15 +346,6 @@
 #define GL_ELEMENT_ARRAY_BUFFER           0x8893
 #define GL_ARRAY_BUFFER_BINDING           0x8894
 #define GL_ELEMENT_ARRAY_BUFFER_BINDING   0x8895
-#define GL_VERTEX_ARRAY_BUFFER_BINDING    0x8896
-#define GL_NORMAL_ARRAY_BUFFER_BINDING    0x8897
-#define GL_COLOR_ARRAY_BUFFER_BINDING     0x8898
-#define GL_INDEX_ARRAY_BUFFER_BINDING     0x8899
-#define GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING 0x889A
-#define GL_EDGE_FLAG_ARRAY_BUFFER_BINDING 0x889B
-#define GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING 0x889C
-#define GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING 0x889D
-#define GL_WEIGHT_ARRAY_BUFFER_BINDING    0x889E
 #define GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING 0x889F
 #define GL_READ_ONLY                      0x88B8
 #define GL_WRITE_ONLY                     0x88B9
@@ -357,20 +363,813 @@
 #define GL_DYNAMIC_READ                   0x88E9
 #define GL_DYNAMIC_COPY                   0x88EA
 #define GL_SAMPLES_PASSED                 0x8914
-#define GL_FOG_COORD_SOURCE               GL_FOG_COORDINATE_SOURCE
-#define GL_FOG_COORD                      GL_FOG_COORDINATE
-#define GL_CURRENT_FOG_COORD              GL_CURRENT_FOG_COORDINATE
-#define GL_FOG_COORD_ARRAY_TYPE           GL_FOG_COORDINATE_ARRAY_TYPE
-#define GL_FOG_COORD_ARRAY_STRIDE         GL_FOG_COORDINATE_ARRAY_STRIDE
-#define GL_FOG_COORD_ARRAY_POINTER        GL_FOG_COORDINATE_ARRAY_POINTER
-#define GL_FOG_COORD_ARRAY                GL_FOG_COORDINATE_ARRAY
-#define GL_FOG_COORD_ARRAY_BUFFER_BINDING GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING
-#define GL_SRC0_RGB                       GL_SOURCE0_RGB
-#define GL_SRC1_RGB                       GL_SOURCE1_RGB
-#define GL_SRC2_RGB                       GL_SOURCE2_RGB
-#define GL_SRC0_ALPHA                     GL_SOURCE0_ALPHA
-#define GL_SRC1_ALPHA                     GL_SOURCE1_ALPHA
-#define GL_SRC2_ALPHA                     GL_SOURCE2_ALPHA
+#endif
+
+#ifndef GL_VERSION_1_5_DEPRECATED
+#define GL_VERTEX_ARRAY_BUFFER_BINDING    0x8896
+#define GL_NORMAL_ARRAY_BUFFER_BINDING    0x8897
+#define GL_COLOR_ARRAY_BUFFER_BINDING     0x8898
+#define GL_INDEX_ARRAY_BUFFER_BINDING     0x8899
+#define GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING 0x889A
+#define GL_EDGE_FLAG_ARRAY_BUFFER_BINDING 0x889B
+#define GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING 0x889C
+#define GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING 0x889D
+#define GL_WEIGHT_ARRAY_BUFFER_BINDING    0x889E
+#define GL_FOG_COORD_SRC                  0x8450
+#define GL_FOG_COORD                      0x8451
+#define GL_CURRENT_FOG_COORD              0x8453
+#define GL_FOG_COORD_ARRAY_TYPE           0x8454
+#define GL_FOG_COORD_ARRAY_STRIDE         0x8455
+#define GL_FOG_COORD_ARRAY_POINTER        0x8456
+#define GL_FOG_COORD_ARRAY                0x8457
+#define GL_FOG_COORD_ARRAY_BUFFER_BINDING 0x889D
+#define GL_SRC0_RGB                       0x8580
+#define GL_SRC1_RGB                       0x8581
+#define GL_SRC2_RGB                       0x8582
+#define GL_SRC0_ALPHA                     0x8588
+#define GL_SRC1_ALPHA                     0x8589
+#define GL_SRC2_ALPHA                     0x858A
+#endif
+
+#ifndef GL_VERSION_2_0
+#define GL_BLEND_EQUATION_RGB             0x8009
+#define GL_VERTEX_ATTRIB_ARRAY_ENABLED    0x8622
+#define GL_VERTEX_ATTRIB_ARRAY_SIZE       0x8623
+#define GL_VERTEX_ATTRIB_ARRAY_STRIDE     0x8624
+#define GL_VERTEX_ATTRIB_ARRAY_TYPE       0x8625
+#define GL_CURRENT_VERTEX_ATTRIB          0x8626
+#define GL_VERTEX_PROGRAM_POINT_SIZE      0x8642
+#define GL_VERTEX_ATTRIB_ARRAY_POINTER    0x8645
+#define GL_STENCIL_BACK_FUNC              0x8800
+#define GL_STENCIL_BACK_FAIL              0x8801
+#define GL_STENCIL_BACK_PASS_DEPTH_FAIL   0x8802
+#define GL_STENCIL_BACK_PASS_DEPTH_PASS   0x8803
+#define GL_MAX_DRAW_BUFFERS               0x8824
+#define GL_DRAW_BUFFER0                   0x8825
+#define GL_DRAW_BUFFER1                   0x8826
+#define GL_DRAW_BUFFER2                   0x8827
+#define GL_DRAW_BUFFER3                   0x8828
+#define GL_DRAW_BUFFER4                   0x8829
+#define GL_DRAW_BUFFER5                   0x882A
+#define GL_DRAW_BUFFER6                   0x882B
+#define GL_DRAW_BUFFER7                   0x882C
+#define GL_DRAW_BUFFER8                   0x882D
+#define GL_DRAW_BUFFER9                   0x882E
+#define GL_DRAW_BUFFER10                  0x882F
+#define GL_DRAW_BUFFER11                  0x8830
+#define GL_DRAW_BUFFER12                  0x8831
+#define GL_DRAW_BUFFER13                  0x8832
+#define GL_DRAW_BUFFER14                  0x8833
+#define GL_DRAW_BUFFER15                  0x8834
+#define GL_BLEND_EQUATION_ALPHA           0x883D
+#define GL_MAX_VERTEX_ATTRIBS             0x8869
+#define GL_VERTEX_ATTRIB_ARRAY_NORMALIZED 0x886A
+#define GL_MAX_TEXTURE_IMAGE_UNITS        0x8872
+#define GL_FRAGMENT_SHADER                0x8B30
+#define GL_VERTEX_SHADER                  0x8B31
+#define GL_MAX_FRAGMENT_UNIFORM_COMPONENTS 0x8B49
+#define GL_MAX_VERTEX_UNIFORM_COMPONENTS  0x8B4A
+#define GL_MAX_VARYING_FLOATS             0x8B4B
+#define GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS 0x8B4C
+#define GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS 0x8B4D
+#define GL_SHADER_TYPE                    0x8B4F
+#define GL_FLOAT_VEC2                     0x8B50
+#define GL_FLOAT_VEC3                     0x8B51
+#define GL_FLOAT_VEC4                     0x8B52
+#define GL_INT_VEC2                       0x8B53
+#define GL_INT_VEC3                       0x8B54
+#define GL_INT_VEC4                       0x8B55
+#define GL_BOOL                           0x8B56
+#define GL_BOOL_VEC2                      0x8B57
+#define GL_BOOL_VEC3                      0x8B58
+#define GL_BOOL_VEC4                      0x8B59
+#define GL_FLOAT_MAT2                     0x8B5A
+#define GL_FLOAT_MAT3                     0x8B5B
+#define GL_FLOAT_MAT4                     0x8B5C
+#define GL_SAMPLER_1D                     0x8B5D
+#define GL_SAMPLER_2D                     0x8B5E
+#define GL_SAMPLER_3D                     0x8B5F
+#define GL_SAMPLER_CUBE                   0x8B60
+#define GL_SAMPLER_1D_SHADOW              0x8B61
+#define GL_SAMPLER_2D_SHADOW              0x8B62
+#define GL_DELETE_STATUS                  0x8B80
+#define GL_COMPILE_STATUS                 0x8B81
+#define GL_LINK_STATUS                    0x8B82
+#define GL_VALIDATE_STATUS                0x8B83
+#define GL_INFO_LOG_LENGTH                0x8B84
+#define GL_ATTACHED_SHADERS               0x8B85
+#define GL_ACTIVE_UNIFORMS                0x8B86
+#define GL_ACTIVE_UNIFORM_MAX_LENGTH      0x8B87
+#define GL_SHADER_SOURCE_LENGTH           0x8B88
+#define GL_ACTIVE_ATTRIBUTES              0x8B89
+#define GL_ACTIVE_ATTRIBUTE_MAX_LENGTH    0x8B8A
+#define GL_FRAGMENT_SHADER_DERIVATIVE_HINT 0x8B8B
+#define GL_SHADING_LANGUAGE_VERSION       0x8B8C
+#define GL_CURRENT_PROGRAM                0x8B8D
+#define GL_POINT_SPRITE_COORD_ORIGIN      0x8CA0
+#define GL_LOWER_LEFT                     0x8CA1
+#define GL_UPPER_LEFT                     0x8CA2
+#define GL_STENCIL_BACK_REF               0x8CA3
+#define GL_STENCIL_BACK_VALUE_MASK        0x8CA4
+#define GL_STENCIL_BACK_WRITEMASK         0x8CA5
+#endif
+
+#ifndef GL_VERSION_2_0_DEPRECATED
+#define GL_VERTEX_PROGRAM_TWO_SIDE        0x8643
+#define GL_POINT_SPRITE                   0x8861
+#define GL_COORD_REPLACE                  0x8862
+#define GL_MAX_TEXTURE_COORDS             0x8871
+#endif
+
+#ifndef GL_VERSION_2_1
+#define GL_PIXEL_PACK_BUFFER              0x88EB
+#define GL_PIXEL_UNPACK_BUFFER            0x88EC
+#define GL_PIXEL_PACK_BUFFER_BINDING      0x88ED
+#define GL_PIXEL_UNPACK_BUFFER_BINDING    0x88EF
+#define GL_FLOAT_MAT2x3                   0x8B65
+#define GL_FLOAT_MAT2x4                   0x8B66
+#define GL_FLOAT_MAT3x2                   0x8B67
+#define GL_FLOAT_MAT3x4                   0x8B68
+#define GL_FLOAT_MAT4x2                   0x8B69
+#define GL_FLOAT_MAT4x3                   0x8B6A
+#define GL_SRGB                           0x8C40
+#define GL_SRGB8                          0x8C41
+#define GL_SRGB_ALPHA                     0x8C42
+#define GL_SRGB8_ALPHA8                   0x8C43
+#define GL_COMPRESSED_SRGB                0x8C48
+#define GL_COMPRESSED_SRGB_ALPHA          0x8C49
+#endif
+
+#ifndef GL_VERSION_2_1_DEPRECATED
+#define GL_CURRENT_RASTER_SECONDARY_COLOR 0x845F
+#define GL_SLUMINANCE_ALPHA               0x8C44
+#define GL_SLUMINANCE8_ALPHA8             0x8C45
+#define GL_SLUMINANCE                     0x8C46
+#define GL_SLUMINANCE8                    0x8C47
+#define GL_COMPRESSED_SLUMINANCE          0x8C4A
+#define GL_COMPRESSED_SLUMINANCE_ALPHA    0x8C4B
+#endif
+
+#ifndef GL_VERSION_3_0
+#define GL_COMPARE_REF_TO_TEXTURE         0x884E
+#define GL_CLIP_DISTANCE0                 0x3000
+#define GL_CLIP_DISTANCE1                 0x3001
+#define GL_CLIP_DISTANCE2                 0x3002
+#define GL_CLIP_DISTANCE3                 0x3003
+#define GL_CLIP_DISTANCE4                 0x3004
+#define GL_CLIP_DISTANCE5                 0x3005
+#define GL_CLIP_DISTANCE6                 0x3006
+#define GL_CLIP_DISTANCE7                 0x3007
+#define GL_MAX_CLIP_DISTANCES             0x0D32
+#define GL_MAJOR_VERSION                  0x821B
+#define GL_MINOR_VERSION                  0x821C
+#define GL_NUM_EXTENSIONS                 0x821D
+#define GL_CONTEXT_FLAGS                  0x821E
+#define GL_COMPRESSED_RED                 0x8225
+#define GL_COMPRESSED_RG                  0x8226
+#define GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT 0x0001
+#define GL_RGBA32F                        0x8814
+#define GL_RGB32F                         0x8815
+#define GL_RGBA16F                        0x881A
+#define GL_RGB16F                         0x881B
+#define GL_VERTEX_ATTRIB_ARRAY_INTEGER    0x88FD
+#define GL_MAX_ARRAY_TEXTURE_LAYERS       0x88FF
+#define GL_MIN_PROGRAM_TEXEL_OFFSET       0x8904
+#define GL_MAX_PROGRAM_TEXEL_OFFSET       0x8905
+#define GL_CLAMP_READ_COLOR               0x891C
+#define GL_FIXED_ONLY                     0x891D
+#define GL_MAX_VARYING_COMPONENTS         0x8B4B
+#define GL_TEXTURE_1D_ARRAY               0x8C18
+#define GL_PROXY_TEXTURE_1D_ARRAY         0x8C19
+#define GL_TEXTURE_2D_ARRAY               0x8C1A
+#define GL_PROXY_TEXTURE_2D_ARRAY         0x8C1B
+#define GL_TEXTURE_BINDING_1D_ARRAY       0x8C1C
+#define GL_TEXTURE_BINDING_2D_ARRAY       0x8C1D
+#define GL_R11F_G11F_B10F                 0x8C3A
+#define GL_UNSIGNED_INT_10F_11F_11F_REV   0x8C3B
+#define GL_RGB9_E5                        0x8C3D
+#define GL_UNSIGNED_INT_5_9_9_9_REV       0x8C3E
+#define GL_TEXTURE_SHARED_SIZE            0x8C3F
+#define GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH 0x8C76
+#define GL_TRANSFORM_FEEDBACK_BUFFER_MODE 0x8C7F
+#define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS 0x8C80
+#define GL_TRANSFORM_FEEDBACK_VARYINGS    0x8C83
+#define GL_TRANSFORM_FEEDBACK_BUFFER_START 0x8C84
+#define GL_TRANSFORM_FEEDBACK_BUFFER_SIZE 0x8C85
+#define GL_PRIMITIVES_GENERATED           0x8C87
+#define GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN 0x8C88
+#define GL_RASTERIZER_DISCARD             0x8C89
+#define GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS 0x8C8A
+#define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS 0x8C8B
+#define GL_INTERLEAVED_ATTRIBS            0x8C8C
+#define GL_SEPARATE_ATTRIBS               0x8C8D
+#define GL_TRANSFORM_FEEDBACK_BUFFER      0x8C8E
+#define GL_TRANSFORM_FEEDBACK_BUFFER_BINDING 0x8C8F
+#define GL_RGBA32UI                       0x8D70
+#define GL_RGB32UI                        0x8D71
+#define GL_RGBA16UI                       0x8D76
+#define GL_RGB16UI                        0x8D77
+#define GL_RGBA8UI                        0x8D7C
+#define GL_RGB8UI                         0x8D7D
+#define GL_RGBA32I                        0x8D82
+#define GL_RGB32I                         0x8D83
+#define GL_RGBA16I                        0x8D88
+#define GL_RGB16I                         0x8D89
+#define GL_RGBA8I                         0x8D8E
+#define GL_RGB8I                          0x8D8F
+#define GL_RED_INTEGER                    0x8D94
+#define GL_GREEN_INTEGER                  0x8D95
+#define GL_BLUE_INTEGER                   0x8D96
+#define GL_RGB_INTEGER                    0x8D98
+#define GL_RGBA_INTEGER                   0x8D99
+#define GL_BGR_INTEGER                    0x8D9A
+#define GL_BGRA_INTEGER                   0x8D9B
+#define GL_SAMPLER_1D_ARRAY               0x8DC0
+#define GL_SAMPLER_2D_ARRAY               0x8DC1
+#define GL_SAMPLER_1D_ARRAY_SHADOW        0x8DC3
+#define GL_SAMPLER_2D_ARRAY_SHADOW        0x8DC4
+#define GL_SAMPLER_CUBE_SHADOW            0x8DC5
+#define GL_UNSIGNED_INT_VEC2              0x8DC6
+#define GL_UNSIGNED_INT_VEC3              0x8DC7
+#define GL_UNSIGNED_INT_VEC4              0x8DC8
+#define GL_INT_SAMPLER_1D                 0x8DC9
+#define GL_INT_SAMPLER_2D                 0x8DCA
+#define GL_INT_SAMPLER_3D                 0x8DCB
+#define GL_INT_SAMPLER_CUBE               0x8DCC
+#define GL_INT_SAMPLER_1D_ARRAY           0x8DCE
+#define GL_INT_SAMPLER_2D_ARRAY           0x8DCF
+#define GL_UNSIGNED_INT_SAMPLER_1D        0x8DD1
+#define GL_UNSIGNED_INT_SAMPLER_2D        0x8DD2
+#define GL_UNSIGNED_INT_SAMPLER_3D        0x8DD3
+#define GL_UNSIGNED_INT_SAMPLER_CUBE      0x8DD4
+#define GL_UNSIGNED_INT_SAMPLER_1D_ARRAY  0x8DD6
+#define GL_UNSIGNED_INT_SAMPLER_2D_ARRAY  0x8DD7
+#define GL_QUERY_WAIT                     0x8E13
+#define GL_QUERY_NO_WAIT                  0x8E14
+#define GL_QUERY_BY_REGION_WAIT           0x8E15
+#define GL_QUERY_BY_REGION_NO_WAIT        0x8E16
+#define GL_BUFFER_ACCESS_FLAGS            0x911F
+#define GL_BUFFER_MAP_LENGTH              0x9120
+#define GL_BUFFER_MAP_OFFSET              0x9121
+    /* Reuse tokens from ARB_depth_buffer_float */
+    /* reuse GL_DEPTH_COMPONENT32F */
+    /* reuse GL_DEPTH32F_STENCIL8 */
+    /* reuse GL_FLOAT_32_UNSIGNED_INT_24_8_REV */
+    /* Reuse tokens from ARB_framebuffer_object */
+    /* reuse GL_INVALID_FRAMEBUFFER_OPERATION */
+    /* reuse GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING */
+    /* reuse GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE */
+    /* reuse GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE */
+    /* reuse GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE */
+    /* reuse GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE */
+    /* reuse GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE */
+    /* reuse GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE */
+    /* reuse GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE */
+    /* reuse GL_FRAMEBUFFER_DEFAULT */
+    /* reuse GL_FRAMEBUFFER_UNDEFINED */
+    /* reuse GL_DEPTH_STENCIL_ATTACHMENT */
+    /* reuse GL_INDEX */
+    /* reuse GL_MAX_RENDERBUFFER_SIZE */
+    /* reuse GL_DEPTH_STENCIL */
+    /* reuse GL_UNSIGNED_INT_24_8 */
+    /* reuse GL_DEPTH24_STENCIL8 */
+    /* reuse GL_TEXTURE_STENCIL_SIZE */
+    /* reuse GL_TEXTURE_RED_TYPE */
+    /* reuse GL_TEXTURE_GREEN_TYPE */
+    /* reuse GL_TEXTURE_BLUE_TYPE */
+    /* reuse GL_TEXTURE_ALPHA_TYPE */
+    /* reuse GL_TEXTURE_DEPTH_TYPE */
+    /* reuse GL_UNSIGNED_NORMALIZED */
+    /* reuse GL_FRAMEBUFFER_BINDING */
+    /* reuse GL_DRAW_FRAMEBUFFER_BINDING */
+    /* reuse GL_RENDERBUFFER_BINDING */
+    /* reuse GL_READ_FRAMEBUFFER */
+    /* reuse GL_DRAW_FRAMEBUFFER */
+    /* reuse GL_READ_FRAMEBUFFER_BINDING */
+    /* reuse GL_RENDERBUFFER_SAMPLES */
+    /* reuse GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE */
+    /* reuse GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME */
+    /* reuse GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL */
+    /* reuse GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE */
+    /* reuse GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER */
+    /* reuse GL_FRAMEBUFFER_COMPLETE */
+    /* reuse GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT */
+    /* reuse GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT */
+    /* reuse GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER */
+    /* reuse GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER */
+    /* reuse GL_FRAMEBUFFER_UNSUPPORTED */
+    /* reuse GL_MAX_COLOR_ATTACHMENTS */
+    /* reuse GL_COLOR_ATTACHMENT0 */
+    /* reuse GL_COLOR_ATTACHMENT1 */
+    /* reuse GL_COLOR_ATTACHMENT2 */
+    /* reuse GL_COLOR_ATTACHMENT3 */
+    /* reuse GL_COLOR_ATTACHMENT4 */
+    /* reuse GL_COLOR_ATTACHMENT5 */
+    /* reuse GL_COLOR_ATTACHMENT6 */
+    /* reuse GL_COLOR_ATTACHMENT7 */
+    /* reuse GL_COLOR_ATTACHMENT8 */
+    /* reuse GL_COLOR_ATTACHMENT9 */
+    /* reuse GL_COLOR_ATTACHMENT10 */
+    /* reuse GL_COLOR_ATTACHMENT11 */
+    /* reuse GL_COLOR_ATTACHMENT12 */
+    /* reuse GL_COLOR_ATTACHMENT13 */
+    /* reuse GL_COLOR_ATTACHMENT14 */
+    /* reuse GL_COLOR_ATTACHMENT15 */
+    /* reuse GL_DEPTH_ATTACHMENT */
+    /* reuse GL_STENCIL_ATTACHMENT */
+    /* reuse GL_FRAMEBUFFER */
+    /* reuse GL_RENDERBUFFER */
+    /* reuse GL_RENDERBUFFER_WIDTH */
+    /* reuse GL_RENDERBUFFER_HEIGHT */
+    /* reuse GL_RENDERBUFFER_INTERNAL_FORMAT */
+    /* reuse GL_STENCIL_INDEX1 */
+    /* reuse GL_STENCIL_INDEX4 */
+    /* reuse GL_STENCIL_INDEX8 */
+    /* reuse GL_STENCIL_INDEX16 */
+    /* reuse GL_RENDERBUFFER_RED_SIZE */
+    /* reuse GL_RENDERBUFFER_GREEN_SIZE */
+    /* reuse GL_RENDERBUFFER_BLUE_SIZE */
+    /* reuse GL_RENDERBUFFER_ALPHA_SIZE */
+    /* reuse GL_RENDERBUFFER_DEPTH_SIZE */
+    /* reuse GL_RENDERBUFFER_STENCIL_SIZE */
+    /* reuse GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE */
+    /* reuse GL_MAX_SAMPLES */
+    /* Reuse tokens from ARB_framebuffer_sRGB */
+    /* reuse GL_FRAMEBUFFER_SRGB */
+    /* Reuse tokens from ARB_half_float_vertex */
+    /* reuse GL_HALF_FLOAT */
+    /* Reuse tokens from ARB_map_buffer_range */
+    /* reuse GL_MAP_READ_BIT */
+    /* reuse GL_MAP_WRITE_BIT */
+    /* reuse GL_MAP_INVALIDATE_RANGE_BIT */
+    /* reuse GL_MAP_INVALIDATE_BUFFER_BIT */
+    /* reuse GL_MAP_FLUSH_EXPLICIT_BIT */
+    /* reuse GL_MAP_UNSYNCHRONIZED_BIT */
+    /* Reuse tokens from ARB_texture_compression_rgtc */
+    /* reuse GL_COMPRESSED_RED_RGTC1 */
+    /* reuse GL_COMPRESSED_SIGNED_RED_RGTC1 */
+    /* reuse GL_COMPRESSED_RG_RGTC2 */
+    /* reuse GL_COMPRESSED_SIGNED_RG_RGTC2 */
+    /* Reuse tokens from ARB_texture_rg */
+    /* reuse GL_RG */
+    /* reuse GL_RG_INTEGER */
+    /* reuse GL_R8 */
+    /* reuse GL_R16 */
+    /* reuse GL_RG8 */
+    /* reuse GL_RG16 */
+    /* reuse GL_R16F */
+    /* reuse GL_R32F */
+    /* reuse GL_RG16F */
+    /* reuse GL_RG32F */
+    /* reuse GL_R8I */
+    /* reuse GL_R8UI */
+    /* reuse GL_R16I */
+    /* reuse GL_R16UI */
+    /* reuse GL_R32I */
+    /* reuse GL_R32UI */
+    /* reuse GL_RG8I */
+    /* reuse GL_RG8UI */
+    /* reuse GL_RG16I */
+    /* reuse GL_RG16UI */
+    /* reuse GL_RG32I */
+    /* reuse GL_RG32UI */
+    /* Reuse tokens from ARB_vertex_array_object */
+    /* reuse GL_VERTEX_ARRAY_BINDING */
+#endif
+
+#ifndef GL_VERSION_3_0_DEPRECATED
+#define GL_CLAMP_VERTEX_COLOR             0x891A
+#define GL_CLAMP_FRAGMENT_COLOR           0x891B
+#define GL_ALPHA_INTEGER                  0x8D97
+    /* Reuse tokens from ARB_framebuffer_object */
+    /* reuse GL_TEXTURE_LUMINANCE_TYPE */
+    /* reuse GL_TEXTURE_INTENSITY_TYPE */
+#endif
+
+#ifndef GL_VERSION_3_1
+#define GL_SAMPLER_2D_RECT                0x8B63
+#define GL_SAMPLER_2D_RECT_SHADOW         0x8B64
+#define GL_SAMPLER_BUFFER                 0x8DC2
+#define GL_INT_SAMPLER_2D_RECT            0x8DCD
+#define GL_INT_SAMPLER_BUFFER             0x8DD0
+#define GL_UNSIGNED_INT_SAMPLER_2D_RECT   0x8DD5
+#define GL_UNSIGNED_INT_SAMPLER_BUFFER    0x8DD8
+#define GL_TEXTURE_BUFFER                 0x8C2A
+#define GL_MAX_TEXTURE_BUFFER_SIZE        0x8C2B
+#define GL_TEXTURE_BINDING_BUFFER         0x8C2C
+#define GL_TEXTURE_BUFFER_DATA_STORE_BINDING 0x8C2D
+#define GL_TEXTURE_BUFFER_FORMAT          0x8C2E
+#define GL_TEXTURE_RECTANGLE              0x84F5
+#define GL_TEXTURE_BINDING_RECTANGLE      0x84F6
+#define GL_PROXY_TEXTURE_RECTANGLE        0x84F7
+#define GL_MAX_RECTANGLE_TEXTURE_SIZE     0x84F8
+#define GL_RED_SNORM                      0x8F90
+#define GL_RG_SNORM                       0x8F91
+#define GL_RGB_SNORM                      0x8F92
+#define GL_RGBA_SNORM                     0x8F93
+#define GL_R8_SNORM                       0x8F94
+#define GL_RG8_SNORM                      0x8F95
+#define GL_RGB8_SNORM                     0x8F96
+#define GL_RGBA8_SNORM                    0x8F97
+#define GL_R16_SNORM                      0x8F98
+#define GL_RG16_SNORM                     0x8F99
+#define GL_RGB16_SNORM                    0x8F9A
+#define GL_RGBA16_SNORM                   0x8F9B
+#define GL_SIGNED_NORMALIZED              0x8F9C
+#define GL_PRIMITIVE_RESTART              0x8F9D
+#define GL_PRIMITIVE_RESTART_INDEX        0x8F9E
+    /* Reuse tokens from ARB_copy_buffer */
+    /* reuse GL_COPY_READ_BUFFER */
+    /* reuse GL_COPY_WRITE_BUFFER */
+    /* Reuse tokens from ARB_draw_instanced (none) */
+    /* Reuse tokens from ARB_uniform_buffer_object */
+    /* reuse GL_UNIFORM_BUFFER */
+    /* reuse GL_UNIFORM_BUFFER_BINDING */
+    /* reuse GL_UNIFORM_BUFFER_START */
+    /* reuse GL_UNIFORM_BUFFER_SIZE */
+    /* reuse GL_MAX_VERTEX_UNIFORM_BLOCKS */
+    /* reuse GL_MAX_FRAGMENT_UNIFORM_BLOCKS */
+    /* reuse GL_MAX_COMBINED_UNIFORM_BLOCKS */
+    /* reuse GL_MAX_UNIFORM_BUFFER_BINDINGS */
+    /* reuse GL_MAX_UNIFORM_BLOCK_SIZE */
+    /* reuse GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS */
+    /* reuse GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS */
+    /* reuse GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT */
+    /* reuse GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH */
+    /* reuse GL_ACTIVE_UNIFORM_BLOCKS */
+    /* reuse GL_UNIFORM_TYPE */
+    /* reuse GL_UNIFORM_SIZE */
+    /* reuse GL_UNIFORM_NAME_LENGTH */
+    /* reuse GL_UNIFORM_BLOCK_INDEX */
+    /* reuse GL_UNIFORM_OFFSET */
+    /* reuse GL_UNIFORM_ARRAY_STRIDE */
+    /* reuse GL_UNIFORM_MATRIX_STRIDE */
+    /* reuse GL_UNIFORM_IS_ROW_MAJOR */
+    /* reuse GL_UNIFORM_BLOCK_BINDING */
+    /* reuse GL_UNIFORM_BLOCK_DATA_SIZE */
+    /* reuse GL_UNIFORM_BLOCK_NAME_LENGTH */
+    /* reuse GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS */
+    /* reuse GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES */
+    /* reuse GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER */
+    /* reuse GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER */
+    /* reuse GL_INVALID_INDEX */
+#endif
+
+#ifndef GL_VERSION_3_2
+#define GL_CONTEXT_CORE_PROFILE_BIT       0x00000001
+#define GL_CONTEXT_COMPATIBILITY_PROFILE_BIT 0x00000002
+#define GL_LINES_ADJACENCY                0x000A
+#define GL_LINE_STRIP_ADJACENCY           0x000B
+#define GL_TRIANGLES_ADJACENCY            0x000C
+#define GL_TRIANGLE_STRIP_ADJACENCY       0x000D
+#define GL_PROGRAM_POINT_SIZE             0x8642
+#define GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS 0x8C29
+#define GL_FRAMEBUFFER_ATTACHMENT_LAYERED 0x8DA7
+#define GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS 0x8DA8
+#define GL_GEOMETRY_SHADER                0x8DD9
+#define GL_GEOMETRY_VERTICES_OUT          0x8916
+#define GL_GEOMETRY_INPUT_TYPE            0x8917
+#define GL_GEOMETRY_OUTPUT_TYPE           0x8918
+#define GL_MAX_GEOMETRY_UNIFORM_COMPONENTS 0x8DDF
+#define GL_MAX_GEOMETRY_OUTPUT_VERTICES   0x8DE0
+#define GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS 0x8DE1
+#define GL_MAX_VERTEX_OUTPUT_COMPONENTS   0x9122
+#define GL_MAX_GEOMETRY_INPUT_COMPONENTS  0x9123
+#define GL_MAX_GEOMETRY_OUTPUT_COMPONENTS 0x9124
+#define GL_MAX_FRAGMENT_INPUT_COMPONENTS  0x9125
+#define GL_CONTEXT_PROFILE_MASK           0x9126
+    /* reuse GL_MAX_VARYING_COMPONENTS */
+    /* reuse GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER */
+    /* Reuse tokens from ARB_depth_clamp */
+    /* reuse GL_DEPTH_CLAMP */
+    /* Reuse tokens from ARB_draw_elements_base_vertex (none) */
+    /* Reuse tokens from ARB_fragment_coord_conventions (none) */
+    /* Reuse tokens from ARB_provoking_vertex */
+    /* reuse GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION */
+    /* reuse GL_FIRST_VERTEX_CONVENTION */
+    /* reuse GL_LAST_VERTEX_CONVENTION */
+    /* reuse GL_PROVOKING_VERTEX */
+    /* Reuse tokens from ARB_seamless_cube_map */
+    /* reuse GL_TEXTURE_CUBE_MAP_SEAMLESS */
+    /* Reuse tokens from ARB_sync */
+    /* reuse GL_MAX_SERVER_WAIT_TIMEOUT */
+    /* reuse GL_OBJECT_TYPE */
+    /* reuse GL_SYNC_CONDITION */
+    /* reuse GL_SYNC_STATUS */
+    /* reuse GL_SYNC_FLAGS */
+    /* reuse GL_SYNC_FENCE */
+    /* reuse GL_SYNC_GPU_COMMANDS_COMPLETE */
+    /* reuse GL_UNSIGNALED */
+    /* reuse GL_SIGNALED */
+    /* reuse GL_ALREADY_SIGNALED */
+    /* reuse GL_TIMEOUT_EXPIRED */
+    /* reuse GL_CONDITION_SATISFIED */
+    /* reuse GL_WAIT_FAILED */
+    /* reuse GL_TIMEOUT_IGNORED */
+    /* reuse GL_SYNC_FLUSH_COMMANDS_BIT */
+    /* reuse GL_TIMEOUT_IGNORED */
+    /* Reuse tokens from ARB_texture_multisample */
+    /* reuse GL_SAMPLE_POSITION */
+    /* reuse GL_SAMPLE_MASK */
+    /* reuse GL_SAMPLE_MASK_VALUE */
+    /* reuse GL_MAX_SAMPLE_MASK_WORDS */
+    /* reuse GL_TEXTURE_2D_MULTISAMPLE */
+    /* reuse GL_PROXY_TEXTURE_2D_MULTISAMPLE */
+    /* reuse GL_TEXTURE_2D_MULTISAMPLE_ARRAY */
+    /* reuse GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY */
+    /* reuse GL_TEXTURE_BINDING_2D_MULTISAMPLE */
+    /* reuse GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY */
+    /* reuse GL_TEXTURE_SAMPLES */
+    /* reuse GL_TEXTURE_FIXED_SAMPLE_LOCATIONS */
+    /* reuse GL_SAMPLER_2D_MULTISAMPLE */
+    /* reuse GL_INT_SAMPLER_2D_MULTISAMPLE */
+    /* reuse GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE */
+    /* reuse GL_SAMPLER_2D_MULTISAMPLE_ARRAY */
+    /* reuse GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY */
+    /* reuse GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY */
+    /* reuse GL_MAX_COLOR_TEXTURE_SAMPLES */
+    /* reuse GL_MAX_DEPTH_TEXTURE_SAMPLES */
+    /* reuse GL_MAX_INTEGER_SAMPLES */
+    /* Don't need to reuse tokens from ARB_vertex_array_bgra since they're already in 1.2 core */
+#endif
+
+#ifndef GL_VERSION_3_3
+#define GL_VERTEX_ATTRIB_ARRAY_DIVISOR    0x88FE
+    /* Reuse tokens from ARB_blend_func_extended */
+    /* reuse GL_SRC1_COLOR */
+    /* reuse GL_ONE_MINUS_SRC1_COLOR */
+    /* reuse GL_ONE_MINUS_SRC1_ALPHA */
+    /* reuse GL_MAX_DUAL_SOURCE_DRAW_BUFFERS */
+    /* Reuse tokens from ARB_explicit_attrib_location (none) */
+    /* Reuse tokens from ARB_occlusion_query2 */
+    /* reuse GL_ANY_SAMPLES_PASSED */
+    /* Reuse tokens from ARB_sampler_objects */
+    /* reuse GL_SAMPLER_BINDING */
+    /* Reuse tokens from ARB_shader_bit_encoding (none) */
+    /* Reuse tokens from ARB_texture_rgb10_a2ui */
+    /* reuse GL_RGB10_A2UI */
+    /* Reuse tokens from ARB_texture_swizzle */
+    /* reuse GL_TEXTURE_SWIZZLE_R */
+    /* reuse GL_TEXTURE_SWIZZLE_G */
+    /* reuse GL_TEXTURE_SWIZZLE_B */
+    /* reuse GL_TEXTURE_SWIZZLE_A */
+    /* reuse GL_TEXTURE_SWIZZLE_RGBA */
+    /* Reuse tokens from ARB_timer_query */
+    /* reuse GL_TIME_ELAPSED */
+    /* reuse GL_TIMESTAMP */
+    /* Reuse tokens from ARB_vertex_type_2_10_10_10_rev */
+    /* reuse GL_INT_2_10_10_10_REV */
+#endif
+
+#ifndef GL_VERSION_4_0
+#define GL_SAMPLE_SHADING                 0x8C36
+#define GL_MIN_SAMPLE_SHADING_VALUE       0x8C37
+#define GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET 0x8E5E
+#define GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET 0x8E5F
+#define GL_TEXTURE_CUBE_MAP_ARRAY         0x9009
+#define GL_TEXTURE_BINDING_CUBE_MAP_ARRAY 0x900A
+#define GL_PROXY_TEXTURE_CUBE_MAP_ARRAY   0x900B
+#define GL_SAMPLER_CUBE_MAP_ARRAY         0x900C
+#define GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW  0x900D
+#define GL_INT_SAMPLER_CUBE_MAP_ARRAY     0x900E
+#define GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY 0x900F
+    /* Reuse tokens from ARB_texture_query_lod (none) */
+    /* Reuse tokens from ARB_draw_buffers_blend (none) */
+    /* Reuse tokens from ARB_draw_indirect */
+    /* reuse GL_DRAW_INDIRECT_BUFFER */
+    /* reuse GL_DRAW_INDIRECT_BUFFER_BINDING */
+    /* Reuse tokens from ARB_gpu_shader5 */
+    /* reuse GL_GEOMETRY_SHADER_INVOCATIONS */
+    /* reuse GL_MAX_GEOMETRY_SHADER_INVOCATIONS */
+    /* reuse GL_MIN_FRAGMENT_INTERPOLATION_OFFSET */
+    /* reuse GL_MAX_FRAGMENT_INTERPOLATION_OFFSET */
+    /* reuse GL_FRAGMENT_INTERPOLATION_OFFSET_BITS */
+    /* reuse GL_MAX_VERTEX_STREAMS */
+    /* Reuse tokens from ARB_gpu_shader_fp64 */
+    /* reuse GL_DOUBLE_VEC2 */
+    /* reuse GL_DOUBLE_VEC3 */
+    /* reuse GL_DOUBLE_VEC4 */
+    /* reuse GL_DOUBLE_MAT2 */
+    /* reuse GL_DOUBLE_MAT3 */
+    /* reuse GL_DOUBLE_MAT4 */
+    /* reuse GL_DOUBLE_MAT2x3 */
+    /* reuse GL_DOUBLE_MAT2x4 */
+    /* reuse GL_DOUBLE_MAT3x2 */
+    /* reuse GL_DOUBLE_MAT3x4 */
+    /* reuse GL_DOUBLE_MAT4x2 */
+    /* reuse GL_DOUBLE_MAT4x3 */
+    /* Reuse tokens from ARB_shader_subroutine */
+    /* reuse GL_ACTIVE_SUBROUTINES */
+    /* reuse GL_ACTIVE_SUBROUTINE_UNIFORMS */
+    /* reuse GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS */
+    /* reuse GL_ACTIVE_SUBROUTINE_MAX_LENGTH */
+    /* reuse GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH */
+    /* reuse GL_MAX_SUBROUTINES */
+    /* reuse GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS */
+    /* reuse GL_NUM_COMPATIBLE_SUBROUTINES */
+    /* reuse GL_COMPATIBLE_SUBROUTINES */
+    /* Reuse tokens from ARB_tessellation_shader */
+    /* reuse GL_PATCHES */
+    /* reuse GL_PATCH_VERTICES */
+    /* reuse GL_PATCH_DEFAULT_INNER_LEVEL */
+    /* reuse GL_PATCH_DEFAULT_OUTER_LEVEL */
+    /* reuse GL_TESS_CONTROL_OUTPUT_VERTICES */
+    /* reuse GL_TESS_GEN_MODE */
+    /* reuse GL_TESS_GEN_SPACING */
+    /* reuse GL_TESS_GEN_VERTEX_ORDER */
+    /* reuse GL_TESS_GEN_POINT_MODE */
+    /* reuse GL_ISOLINES */
+    /* reuse GL_FRACTIONAL_ODD */
+    /* reuse GL_FRACTIONAL_EVEN */
+    /* reuse GL_MAX_PATCH_VERTICES */
+    /* reuse GL_MAX_TESS_GEN_LEVEL */
+    /* reuse GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS */
+    /* reuse GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS */
+    /* reuse GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS */
+    /* reuse GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS */
+    /* reuse GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS */
+    /* reuse GL_MAX_TESS_PATCH_COMPONENTS */
+    /* reuse GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS */
+    /* reuse GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS */
+    /* reuse GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS */
+    /* reuse GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS */
+    /* reuse GL_MAX_TESS_CONTROL_INPUT_COMPONENTS */
+    /* reuse GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS */
+    /* reuse GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS */
+    /* reuse GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS */
+    /* reuse GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER */
+    /* reuse GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER */
+    /* reuse GL_TESS_EVALUATION_SHADER */
+    /* reuse GL_TESS_CONTROL_SHADER */
+    /* Reuse tokens from ARB_texture_buffer_object_rgb32 (none) */
+    /* Reuse tokens from ARB_transform_feedback2 */
+    /* reuse GL_TRANSFORM_FEEDBACK */
+    /* reuse GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED */
+    /* reuse GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE */
+    /* reuse GL_TRANSFORM_FEEDBACK_BINDING */
+    /* Reuse tokens from ARB_transform_feedback3 */
+    /* reuse GL_MAX_TRANSFORM_FEEDBACK_BUFFERS */
+    /* reuse GL_MAX_VERTEX_STREAMS */
+#endif
+
+#ifndef GL_VERSION_4_1
+    /* Reuse tokens from ARB_ES2_compatibility */
+    /* reuse GL_FIXED */
+    /* reuse GL_IMPLEMENTATION_COLOR_READ_TYPE */
+    /* reuse GL_IMPLEMENTATION_COLOR_READ_FORMAT */
+    /* reuse GL_LOW_FLOAT */
+    /* reuse GL_MEDIUM_FLOAT */
+    /* reuse GL_HIGH_FLOAT */
+    /* reuse GL_LOW_INT */
+    /* reuse GL_MEDIUM_INT */
+    /* reuse GL_HIGH_INT */
+    /* reuse GL_SHADER_COMPILER */
+    /* reuse GL_NUM_SHADER_BINARY_FORMATS */
+    /* reuse GL_MAX_VERTEX_UNIFORM_VECTORS */
+    /* reuse GL_MAX_VARYING_VECTORS */
+    /* reuse GL_MAX_FRAGMENT_UNIFORM_VECTORS */
+    /* Reuse tokens from ARB_get_program_binary */
+    /* reuse GL_PROGRAM_BINARY_RETRIEVABLE_HINT */
+    /* reuse GL_PROGRAM_BINARY_LENGTH */
+    /* reuse GL_NUM_PROGRAM_BINARY_FORMATS */
+    /* reuse GL_PROGRAM_BINARY_FORMATS */
+    /* Reuse tokens from ARB_separate_shader_objects */
+    /* reuse GL_VERTEX_SHADER_BIT */
+    /* reuse GL_FRAGMENT_SHADER_BIT */
+    /* reuse GL_GEOMETRY_SHADER_BIT */
+    /* reuse GL_TESS_CONTROL_SHADER_BIT */
+    /* reuse GL_TESS_EVALUATION_SHADER_BIT */
+    /* reuse GL_ALL_SHADER_BITS */
+    /* reuse GL_PROGRAM_SEPARABLE */
+    /* reuse GL_ACTIVE_PROGRAM */
+    /* reuse GL_PROGRAM_PIPELINE_BINDING */
+    /* Reuse tokens from ARB_shader_precision (none) */
+    /* Reuse tokens from ARB_vertex_attrib_64bit - all are in GL 3.0 and 4.0 already */
+    /* Reuse tokens from ARB_viewport_array - some are in GL 1.1 and ARB_provoking_vertex already */
+    /* reuse GL_MAX_VIEWPORTS */
+    /* reuse GL_VIEWPORT_SUBPIXEL_BITS */
+    /* reuse GL_VIEWPORT_BOUNDS_RANGE */
+    /* reuse GL_LAYER_PROVOKING_VERTEX */
+    /* reuse GL_VIEWPORT_INDEX_PROVOKING_VERTEX */
+    /* reuse GL_UNDEFINED_VERTEX */
+#endif
+
+#ifndef GL_VERSION_4_2
+    /* Reuse tokens from ARB_base_instance (none) */
+    /* Reuse tokens from ARB_shading_language_420pack (none) */
+    /* Reuse tokens from ARB_transform_feedback_instanced (none) */
+    /* Reuse tokens from ARB_compressed_texture_pixel_storage */
+    /* reuse GL_UNPACK_COMPRESSED_BLOCK_WIDTH */
+    /* reuse GL_UNPACK_COMPRESSED_BLOCK_HEIGHT */
+    /* reuse GL_UNPACK_COMPRESSED_BLOCK_DEPTH */
+    /* reuse GL_UNPACK_COMPRESSED_BLOCK_SIZE */
+    /* reuse GL_PACK_COMPRESSED_BLOCK_WIDTH */
+    /* reuse GL_PACK_COMPRESSED_BLOCK_HEIGHT */
+    /* reuse GL_PACK_COMPRESSED_BLOCK_DEPTH */
+    /* reuse GL_PACK_COMPRESSED_BLOCK_SIZE */
+    /* Reuse tokens from ARB_conservative_depth (none) */
+    /* Reuse tokens from ARB_internalformat_query */
+    /* reuse GL_NUM_SAMPLE_COUNTS */
+    /* Reuse tokens from ARB_map_buffer_alignment */
+    /* reuse GL_MIN_MAP_BUFFER_ALIGNMENT */
+    /* Reuse tokens from ARB_shader_atomic_counters */
+    /* reuse GL_ATOMIC_COUNTER_BUFFER */
+    /* reuse GL_ATOMIC_COUNTER_BUFFER_BINDING */
+    /* reuse GL_ATOMIC_COUNTER_BUFFER_START */
+    /* reuse GL_ATOMIC_COUNTER_BUFFER_SIZE */
+    /* reuse GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE */
+    /* reuse GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS */
+    /* reuse GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES */
+    /* reuse GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER */
+    /* reuse GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER */
+    /* reuse GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER */
+    /* reuse GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER */
+    /* reuse GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER */
+    /* reuse GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS */
+    /* reuse GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS */
+    /* reuse GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS */
+    /* reuse GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS */
+    /* reuse GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS */
+    /* reuse GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS */
+    /* reuse GL_MAX_VERTEX_ATOMIC_COUNTERS */
+    /* reuse GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS */
+    /* reuse GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS */
+    /* reuse GL_MAX_GEOMETRY_ATOMIC_COUNTERS */
+    /* reuse GL_MAX_FRAGMENT_ATOMIC_COUNTERS */
+    /* reuse GL_MAX_COMBINED_ATOMIC_COUNTERS */
+    /* reuse GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE */
+    /* reuse GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS */
+    /* reuse GL_ACTIVE_ATOMIC_COUNTER_BUFFERS */
+    /* reuse GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX */
+    /* reuse GL_UNSIGNED_INT_ATOMIC_COUNTER */
+    /* Reuse tokens from ARB_shader_image_load_store */
+    /* reuse GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT */
+    /* reuse GL_ELEMENT_ARRAY_BARRIER_BIT */
+    /* reuse GL_UNIFORM_BARRIER_BIT */
+    /* reuse GL_TEXTURE_FETCH_BARRIER_BIT */
+    /* reuse GL_SHADER_IMAGE_ACCESS_BARRIER_BIT */
+    /* reuse GL_COMMAND_BARRIER_BIT */
+    /* reuse GL_PIXEL_BUFFER_BARRIER_BIT */
+    /* reuse GL_TEXTURE_UPDATE_BARRIER_BIT */
+    /* reuse GL_BUFFER_UPDATE_BARRIER_BIT */
+    /* reuse GL_FRAMEBUFFER_BARRIER_BIT */
+    /* reuse GL_TRANSFORM_FEEDBACK_BARRIER_BIT */
+    /* reuse GL_ATOMIC_COUNTER_BARRIER_BIT */
+    /* reuse GL_ALL_BARRIER_BITS */
+    /* reuse GL_MAX_IMAGE_UNITS */
+    /* reuse GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS */
+    /* reuse GL_IMAGE_BINDING_NAME */
+    /* reuse GL_IMAGE_BINDING_LEVEL */
+    /* reuse GL_IMAGE_BINDING_LAYERED */
+    /* reuse GL_IMAGE_BINDING_LAYER */
+    /* reuse GL_IMAGE_BINDING_ACCESS */
+    /* reuse GL_IMAGE_1D */
+    /* reuse GL_IMAGE_2D */
+    /* reuse GL_IMAGE_3D */
+    /* reuse GL_IMAGE_2D_RECT */
+    /* reuse GL_IMAGE_CUBE */
+    /* reuse GL_IMAGE_BUFFER */
+    /* reuse GL_IMAGE_1D_ARRAY */
+    /* reuse GL_IMAGE_2D_ARRAY */
+    /* reuse GL_IMAGE_CUBE_MAP_ARRAY */
+    /* reuse GL_IMAGE_2D_MULTISAMPLE */
+    /* reuse GL_IMAGE_2D_MULTISAMPLE_ARRAY */
+    /* reuse GL_INT_IMAGE_1D */
+    /* reuse GL_INT_IMAGE_2D */
+    /* reuse GL_INT_IMAGE_3D */
+    /* reuse GL_INT_IMAGE_2D_RECT */
+    /* reuse GL_INT_IMAGE_CUBE */
+    /* reuse GL_INT_IMAGE_BUFFER */
+    /* reuse GL_INT_IMAGE_1D_ARRAY */
+    /* reuse GL_INT_IMAGE_2D_ARRAY */
+    /* reuse GL_INT_IMAGE_CUBE_MAP_ARRAY */
+    /* reuse GL_INT_IMAGE_2D_MULTISAMPLE */
+    /* reuse GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY */
+    /* reuse GL_UNSIGNED_INT_IMAGE_1D */
+    /* reuse GL_UNSIGNED_INT_IMAGE_2D */
+    /* reuse GL_UNSIGNED_INT_IMAGE_3D */
+    /* reuse GL_UNSIGNED_INT_IMAGE_2D_RECT */
+    /* reuse GL_UNSIGNED_INT_IMAGE_CUBE */
+    /* reuse GL_UNSIGNED_INT_IMAGE_BUFFER */
+    /* reuse GL_UNSIGNED_INT_IMAGE_1D_ARRAY */
+    /* reuse GL_UNSIGNED_INT_IMAGE_2D_ARRAY */
+    /* reuse GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY */
+    /* reuse GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE */
+    /* reuse GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY */
+    /* reuse GL_MAX_IMAGE_SAMPLES */
+    /* reuse GL_IMAGE_BINDING_FORMAT */
+    /* reuse GL_IMAGE_FORMAT_COMPATIBILITY_TYPE */
+    /* reuse GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE */
+    /* reuse GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS */
+    /* reuse GL_MAX_VERTEX_IMAGE_UNIFORMS */
+    /* reuse GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS */
+    /* reuse GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS */
+    /* reuse GL_MAX_GEOMETRY_IMAGE_UNIFORMS */
+    /* reuse GL_MAX_FRAGMENT_IMAGE_UNIFORMS */
+    /* reuse GL_MAX_COMBINED_IMAGE_UNIFORMS */
+    /* Reuse tokens from ARB_shading_language_packing (none) */
+    /* Reuse tokens from ARB_texture_storage */
+    /* reuse GL_TEXTURE_IMMUTABLE_FORMAT */
 #endif
 
 #ifndef GL_ARB_multitexture
@@ -749,6 +1548,14 @@
 #define GL_FLOAT_MAT2_ARB                 0x8B5A
 #define GL_FLOAT_MAT3_ARB                 0x8B5B
 #define GL_FLOAT_MAT4_ARB                 0x8B5C
+#define GL_SAMPLER_1D_ARB                 0x8B5D
+#define GL_SAMPLER_2D_ARB                 0x8B5E
+#define GL_SAMPLER_3D_ARB                 0x8B5F
+#define GL_SAMPLER_CUBE_ARB               0x8B60
+#define GL_SAMPLER_1D_SHADOW_ARB          0x8B61
+#define GL_SAMPLER_2D_SHADOW_ARB          0x8B62
+#define GL_SAMPLER_2D_RECT_ARB            0x8B63
+#define GL_SAMPLER_2D_RECT_SHADOW_ARB     0x8B64
 #define GL_OBJECT_DELETE_STATUS_ARB       0x8B80
 #define GL_OBJECT_COMPILE_STATUS_ARB      0x8B81
 #define GL_OBJECT_LINK_STATUS_ARB         0x8B82
@@ -773,9 +1580,11 @@
 #ifndef GL_ARB_fragment_shader
 #define GL_FRAGMENT_SHADER_ARB            0x8B30
 #define GL_MAX_FRAGMENT_UNIFORM_COMPONENTS_ARB 0x8B49
+#define GL_FRAGMENT_SHADER_DERIVATIVE_HINT_ARB 0x8B8B
 #endif
 
 #ifndef GL_ARB_shading_language_100
+#define GL_SHADING_LANGUAGE_VERSION_ARB   0x8B8C
 #endif
 
 #ifndef GL_ARB_texture_non_power_of_two
@@ -786,6 +1595,813 @@
 #define GL_COORD_REPLACE_ARB              0x8862
 #endif
 
+#ifndef GL_ARB_fragment_program_shadow
+#endif
+
+#ifndef GL_ARB_draw_buffers
+#define GL_MAX_DRAW_BUFFERS_ARB           0x8824
+#define GL_DRAW_BUFFER0_ARB               0x8825
+#define GL_DRAW_BUFFER1_ARB               0x8826
+#define GL_DRAW_BUFFER2_ARB               0x8827
+#define GL_DRAW_BUFFER3_ARB               0x8828
+#define GL_DRAW_BUFFER4_ARB               0x8829
+#define GL_DRAW_BUFFER5_ARB               0x882A
+#define GL_DRAW_BUFFER6_ARB               0x882B
+#define GL_DRAW_BUFFER7_ARB               0x882C
+#define GL_DRAW_BUFFER8_ARB               0x882D
+#define GL_DRAW_BUFFER9_ARB               0x882E
+#define GL_DRAW_BUFFER10_ARB              0x882F
+#define GL_DRAW_BUFFER11_ARB              0x8830
+#define GL_DRAW_BUFFER12_ARB              0x8831
+#define GL_DRAW_BUFFER13_ARB              0x8832
+#define GL_DRAW_BUFFER14_ARB              0x8833
+#define GL_DRAW_BUFFER15_ARB              0x8834
+#endif
+
+#ifndef GL_ARB_texture_rectangle
+#define GL_TEXTURE_RECTANGLE_ARB          0x84F5
+#define GL_TEXTURE_BINDING_RECTANGLE_ARB  0x84F6
+#define GL_PROXY_TEXTURE_RECTANGLE_ARB    0x84F7
+#define GL_MAX_RECTANGLE_TEXTURE_SIZE_ARB 0x84F8
+#endif
+
+#ifndef GL_ARB_color_buffer_float
+#define GL_RGBA_FLOAT_MODE_ARB            0x8820
+#define GL_CLAMP_VERTEX_COLOR_ARB         0x891A
+#define GL_CLAMP_FRAGMENT_COLOR_ARB       0x891B
+#define GL_CLAMP_READ_COLOR_ARB           0x891C
+#define GL_FIXED_ONLY_ARB                 0x891D
+#endif
+
+#ifndef GL_ARB_half_float_pixel
+#define GL_HALF_FLOAT_ARB                 0x140B
+#endif
+
+#ifndef GL_ARB_texture_float
+#define GL_TEXTURE_RED_TYPE_ARB           0x8C10
+#define GL_TEXTURE_GREEN_TYPE_ARB         0x8C11
+#define GL_TEXTURE_BLUE_TYPE_ARB          0x8C12
+#define GL_TEXTURE_ALPHA_TYPE_ARB         0x8C13
+#define GL_TEXTURE_LUMINANCE_TYPE_ARB     0x8C14
+#define GL_TEXTURE_INTENSITY_TYPE_ARB     0x8C15
+#define GL_TEXTURE_DEPTH_TYPE_ARB         0x8C16
+#define GL_UNSIGNED_NORMALIZED_ARB        0x8C17
+#define GL_RGBA32F_ARB                    0x8814
+#define GL_RGB32F_ARB                     0x8815
+#define GL_ALPHA32F_ARB                   0x8816
+#define GL_INTENSITY32F_ARB               0x8817
+#define GL_LUMINANCE32F_ARB               0x8818
+#define GL_LUMINANCE_ALPHA32F_ARB         0x8819
+#define GL_RGBA16F_ARB                    0x881A
+#define GL_RGB16F_ARB                     0x881B
+#define GL_ALPHA16F_ARB                   0x881C
+#define GL_INTENSITY16F_ARB               0x881D
+#define GL_LUMINANCE16F_ARB               0x881E
+#define GL_LUMINANCE_ALPHA16F_ARB         0x881F
+#endif
+
+#ifndef GL_ARB_pixel_buffer_object
+#define GL_PIXEL_PACK_BUFFER_ARB          0x88EB
+#define GL_PIXEL_UNPACK_BUFFER_ARB        0x88EC
+#define GL_PIXEL_PACK_BUFFER_BINDING_ARB  0x88ED
+#define GL_PIXEL_UNPACK_BUFFER_BINDING_ARB 0x88EF
+#endif
+
+#ifndef GL_ARB_depth_buffer_float
+#define GL_DEPTH_COMPONENT32F             0x8CAC
+#define GL_DEPTH32F_STENCIL8              0x8CAD
+#define GL_FLOAT_32_UNSIGNED_INT_24_8_REV 0x8DAD
+#endif
+
+#ifndef GL_ARB_draw_instanced
+#endif
+
+#ifndef GL_ARB_framebuffer_object
+#define GL_INVALID_FRAMEBUFFER_OPERATION  0x0506
+#define GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING 0x8210
+#define GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE 0x8211
+#define GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE 0x8212
+#define GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE 0x8213
+#define GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE 0x8214
+#define GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE 0x8215
+#define GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE 0x8216
+#define GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE 0x8217
+#define GL_FRAMEBUFFER_DEFAULT            0x8218
+#define GL_FRAMEBUFFER_UNDEFINED          0x8219
+#define GL_DEPTH_STENCIL_ATTACHMENT       0x821A
+#define GL_MAX_RENDERBUFFER_SIZE          0x84E8
+#define GL_DEPTH_STENCIL                  0x84F9
+#define GL_UNSIGNED_INT_24_8              0x84FA
+#define GL_DEPTH24_STENCIL8               0x88F0
+#define GL_TEXTURE_STENCIL_SIZE           0x88F1
+#define GL_TEXTURE_RED_TYPE               0x8C10
+#define GL_TEXTURE_GREEN_TYPE             0x8C11
+#define GL_TEXTURE_BLUE_TYPE              0x8C12
+#define GL_TEXTURE_ALPHA_TYPE             0x8C13
+#define GL_TEXTURE_DEPTH_TYPE             0x8C16
+#define GL_UNSIGNED_NORMALIZED            0x8C17
+#define GL_FRAMEBUFFER_BINDING            0x8CA6
+#define GL_DRAW_FRAMEBUFFER_BINDING       GL_FRAMEBUFFER_BINDING
+#define GL_RENDERBUFFER_BINDING           0x8CA7
+#define GL_READ_FRAMEBUFFER               0x8CA8
+#define GL_DRAW_FRAMEBUFFER               0x8CA9
+#define GL_READ_FRAMEBUFFER_BINDING       0x8CAA
+#define GL_RENDERBUFFER_SAMPLES           0x8CAB
+#define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE 0x8CD0
+#define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME 0x8CD1
+#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL 0x8CD2
+#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE 0x8CD3
+#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER 0x8CD4
+#define GL_FRAMEBUFFER_COMPLETE           0x8CD5
+#define GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT 0x8CD6
+#define GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT 0x8CD7
+#define GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER 0x8CDB
+#define GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER 0x8CDC
+#define GL_FRAMEBUFFER_UNSUPPORTED        0x8CDD
+#define GL_MAX_COLOR_ATTACHMENTS          0x8CDF
+#define GL_COLOR_ATTACHMENT0              0x8CE0
+#define GL_COLOR_ATTACHMENT1              0x8CE1
+#define GL_COLOR_ATTACHMENT2              0x8CE2
+#define GL_COLOR_ATTACHMENT3              0x8CE3
+#define GL_COLOR_ATTACHMENT4              0x8CE4
+#define GL_COLOR_ATTACHMENT5              0x8CE5
+#define GL_COLOR_ATTACHMENT6              0x8CE6
+#define GL_COLOR_ATTACHMENT7              0x8CE7
+#define GL_COLOR_ATTACHMENT8              0x8CE8
+#define GL_COLOR_ATTACHMENT9              0x8CE9
+#define GL_COLOR_ATTACHMENT10             0x8CEA
+#define GL_COLOR_ATTACHMENT11             0x8CEB
+#define GL_COLOR_ATTACHMENT12             0x8CEC
+#define GL_COLOR_ATTACHMENT13             0x8CED
+#define GL_COLOR_ATTACHMENT14             0x8CEE
+#define GL_COLOR_ATTACHMENT15             0x8CEF
+#define GL_DEPTH_ATTACHMENT               0x8D00
+#define GL_STENCIL_ATTACHMENT             0x8D20
+#define GL_FRAMEBUFFER                    0x8D40
+#define GL_RENDERBUFFER                   0x8D41
+#define GL_RENDERBUFFER_WIDTH             0x8D42
+#define GL_RENDERBUFFER_HEIGHT            0x8D43
+#define GL_RENDERBUFFER_INTERNAL_FORMAT   0x8D44
+#define GL_STENCIL_INDEX1                 0x8D46
+#define GL_STENCIL_INDEX4                 0x8D47
+#define GL_STENCIL_INDEX8                 0x8D48
+#define GL_STENCIL_INDEX16                0x8D49
+#define GL_RENDERBUFFER_RED_SIZE          0x8D50
+#define GL_RENDERBUFFER_GREEN_SIZE        0x8D51
+#define GL_RENDERBUFFER_BLUE_SIZE         0x8D52
+#define GL_RENDERBUFFER_ALPHA_SIZE        0x8D53
+#define GL_RENDERBUFFER_DEPTH_SIZE        0x8D54
+#define GL_RENDERBUFFER_STENCIL_SIZE      0x8D55
+#define GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE 0x8D56
+#define GL_MAX_SAMPLES                    0x8D57
+#endif
+
+#ifndef GL_ARB_framebuffer_object_DEPRECATED
+#define GL_INDEX                          0x8222
+#define GL_TEXTURE_LUMINANCE_TYPE         0x8C14
+#define GL_TEXTURE_INTENSITY_TYPE         0x8C15
+#endif
+
+#ifndef GL_ARB_framebuffer_sRGB
+#define GL_FRAMEBUFFER_SRGB               0x8DB9
+#endif
+
+#ifndef GL_ARB_geometry_shader4
+#define GL_LINES_ADJACENCY_ARB            0x000A
+#define GL_LINE_STRIP_ADJACENCY_ARB       0x000B
+#define GL_TRIANGLES_ADJACENCY_ARB        0x000C
+#define GL_TRIANGLE_STRIP_ADJACENCY_ARB   0x000D
+#define GL_PROGRAM_POINT_SIZE_ARB         0x8642
+#define GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_ARB 0x8C29
+#define GL_FRAMEBUFFER_ATTACHMENT_LAYERED_ARB 0x8DA7
+#define GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_ARB 0x8DA8
+#define GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_ARB 0x8DA9
+#define GL_GEOMETRY_SHADER_ARB            0x8DD9
+#define GL_GEOMETRY_VERTICES_OUT_ARB      0x8DDA
+#define GL_GEOMETRY_INPUT_TYPE_ARB        0x8DDB
+#define GL_GEOMETRY_OUTPUT_TYPE_ARB       0x8DDC
+#define GL_MAX_GEOMETRY_VARYING_COMPONENTS_ARB 0x8DDD
+#define GL_MAX_VERTEX_VARYING_COMPONENTS_ARB 0x8DDE
+#define GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_ARB 0x8DDF
+#define GL_MAX_GEOMETRY_OUTPUT_VERTICES_ARB 0x8DE0
+#define GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_ARB 0x8DE1
+    /* reuse GL_MAX_VARYING_COMPONENTS */
+    /* reuse GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER */
+#endif
+
+#ifndef GL_ARB_half_float_vertex
+#define GL_HALF_FLOAT                     0x140B
+#endif
+
+#ifndef GL_ARB_instanced_arrays
+#define GL_VERTEX_ATTRIB_ARRAY_DIVISOR_ARB 0x88FE
+#endif
+
+#ifndef GL_ARB_map_buffer_range
+#define GL_MAP_READ_BIT                   0x0001
+#define GL_MAP_WRITE_BIT                  0x0002
+#define GL_MAP_INVALIDATE_RANGE_BIT       0x0004
+#define GL_MAP_INVALIDATE_BUFFER_BIT      0x0008
+#define GL_MAP_FLUSH_EXPLICIT_BIT         0x0010
+#define GL_MAP_UNSYNCHRONIZED_BIT         0x0020
+#endif
+
+#ifndef GL_ARB_texture_buffer_object
+#define GL_TEXTURE_BUFFER_ARB             0x8C2A
+#define GL_MAX_TEXTURE_BUFFER_SIZE_ARB    0x8C2B
+#define GL_TEXTURE_BINDING_BUFFER_ARB     0x8C2C
+#define GL_TEXTURE_BUFFER_DATA_STORE_BINDING_ARB 0x8C2D
+#define GL_TEXTURE_BUFFER_FORMAT_ARB      0x8C2E
+#endif
+
+#ifndef GL_ARB_texture_compression_rgtc
+#define GL_COMPRESSED_RED_RGTC1           0x8DBB
+#define GL_COMPRESSED_SIGNED_RED_RGTC1    0x8DBC
+#define GL_COMPRESSED_RG_RGTC2            0x8DBD
+#define GL_COMPRESSED_SIGNED_RG_RGTC2     0x8DBE
+#endif
+
+#ifndef GL_ARB_texture_rg
+#define GL_RG                             0x8227
+#define GL_RG_INTEGER                     0x8228
+#define GL_R8                             0x8229
+#define GL_R16                            0x822A
+#define GL_RG8                            0x822B
+#define GL_RG16                           0x822C
+#define GL_R16F                           0x822D
+#define GL_R32F                           0x822E
+#define GL_RG16F                          0x822F
+#define GL_RG32F                          0x8230
+#define GL_R8I                            0x8231
+#define GL_R8UI                           0x8232
+#define GL_R16I                           0x8233
+#define GL_R16UI                          0x8234
+#define GL_R32I                           0x8235
+#define GL_R32UI                          0x8236
+#define GL_RG8I                           0x8237
+#define GL_RG8UI                          0x8238
+#define GL_RG16I                          0x8239
+#define GL_RG16UI                         0x823A
+#define GL_RG32I                          0x823B
+#define GL_RG32UI                         0x823C
+#endif
+
+#ifndef GL_ARB_vertex_array_object
+#define GL_VERTEX_ARRAY_BINDING           0x85B5
+#endif
+
+#ifndef GL_ARB_uniform_buffer_object
+#define GL_UNIFORM_BUFFER                 0x8A11
+#define GL_UNIFORM_BUFFER_BINDING         0x8A28
+#define GL_UNIFORM_BUFFER_START           0x8A29
+#define GL_UNIFORM_BUFFER_SIZE            0x8A2A
+#define GL_MAX_VERTEX_UNIFORM_BLOCKS      0x8A2B
+#define GL_MAX_GEOMETRY_UNIFORM_BLOCKS    0x8A2C
+#define GL_MAX_FRAGMENT_UNIFORM_BLOCKS    0x8A2D
+#define GL_MAX_COMBINED_UNIFORM_BLOCKS    0x8A2E
+#define GL_MAX_UNIFORM_BUFFER_BINDINGS    0x8A2F
+#define GL_MAX_UNIFORM_BLOCK_SIZE         0x8A30
+#define GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS 0x8A31
+#define GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS 0x8A32
+#define GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS 0x8A33
+#define GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT 0x8A34
+#define GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH 0x8A35
+#define GL_ACTIVE_UNIFORM_BLOCKS          0x8A36
+#define GL_UNIFORM_TYPE                   0x8A37
+#define GL_UNIFORM_SIZE                   0x8A38
+#define GL_UNIFORM_NAME_LENGTH            0x8A39
+#define GL_UNIFORM_BLOCK_INDEX            0x8A3A
+#define GL_UNIFORM_OFFSET                 0x8A3B
+#define GL_UNIFORM_ARRAY_STRIDE           0x8A3C
+#define GL_UNIFORM_MATRIX_STRIDE          0x8A3D
+#define GL_UNIFORM_IS_ROW_MAJOR           0x8A3E
+#define GL_UNIFORM_BLOCK_BINDING          0x8A3F
+#define GL_UNIFORM_BLOCK_DATA_SIZE        0x8A40
+#define GL_UNIFORM_BLOCK_NAME_LENGTH      0x8A41
+#define GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS  0x8A42
+#define GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES 0x8A43
+#define GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER 0x8A44
+#define GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER 0x8A45
+#define GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER 0x8A46
+#define GL_INVALID_INDEX                  0xFFFFFFFFu
+#endif
+
+#ifndef GL_ARB_compatibility
+    /* ARB_compatibility just defines tokens from core 3.0 */
+#endif
+
+#ifndef GL_ARB_copy_buffer
+#define GL_COPY_READ_BUFFER               0x8F36
+#define GL_COPY_WRITE_BUFFER              0x8F37
+#endif
+
+#ifndef GL_ARB_shader_texture_lod
+#endif
+
+#ifndef GL_ARB_depth_clamp
+#define GL_DEPTH_CLAMP                    0x864F
+#endif
+
+#ifndef GL_ARB_draw_elements_base_vertex
+#endif
+
+#ifndef GL_ARB_fragment_coord_conventions
+#endif
+
+#ifndef GL_ARB_provoking_vertex
+#define GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION 0x8E4C
+#define GL_FIRST_VERTEX_CONVENTION        0x8E4D
+#define GL_LAST_VERTEX_CONVENTION         0x8E4E
+#define GL_PROVOKING_VERTEX               0x8E4F
+#endif
+
+#ifndef GL_ARB_seamless_cube_map
+#define GL_TEXTURE_CUBE_MAP_SEAMLESS      0x884F
+#endif
+
+#ifndef GL_ARB_sync
+#define GL_MAX_SERVER_WAIT_TIMEOUT        0x9111
+#define GL_OBJECT_TYPE                    0x9112
+#define GL_SYNC_CONDITION                 0x9113
+#define GL_SYNC_STATUS                    0x9114
+#define GL_SYNC_FLAGS                     0x9115
+#define GL_SYNC_FENCE                     0x9116
+#define GL_SYNC_GPU_COMMANDS_COMPLETE     0x9117
+#define GL_UNSIGNALED                     0x9118
+#define GL_SIGNALED                       0x9119
+#define GL_ALREADY_SIGNALED               0x911A
+#define GL_TIMEOUT_EXPIRED                0x911B
+#define GL_CONDITION_SATISFIED            0x911C
+#define GL_WAIT_FAILED                    0x911D
+#define GL_SYNC_FLUSH_COMMANDS_BIT        0x00000001
+#define GL_TIMEOUT_IGNORED                0xFFFFFFFFFFFFFFFFull
+#endif
+
+#ifndef GL_ARB_texture_multisample
+#define GL_SAMPLE_POSITION                0x8E50
+#define GL_SAMPLE_MASK                    0x8E51
+#define GL_SAMPLE_MASK_VALUE              0x8E52
+#define GL_MAX_SAMPLE_MASK_WORDS          0x8E59
+#define GL_TEXTURE_2D_MULTISAMPLE         0x9100
+#define GL_PROXY_TEXTURE_2D_MULTISAMPLE   0x9101
+#define GL_TEXTURE_2D_MULTISAMPLE_ARRAY   0x9102
+#define GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY 0x9103
+#define GL_TEXTURE_BINDING_2D_MULTISAMPLE 0x9104
+#define GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY 0x9105
+#define GL_TEXTURE_SAMPLES                0x9106
+#define GL_TEXTURE_FIXED_SAMPLE_LOCATIONS 0x9107
+#define GL_SAMPLER_2D_MULTISAMPLE         0x9108
+#define GL_INT_SAMPLER_2D_MULTISAMPLE     0x9109
+#define GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE 0x910A
+#define GL_SAMPLER_2D_MULTISAMPLE_ARRAY   0x910B
+#define GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY 0x910C
+#define GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY 0x910D
+#define GL_MAX_COLOR_TEXTURE_SAMPLES      0x910E
+#define GL_MAX_DEPTH_TEXTURE_SAMPLES      0x910F
+#define GL_MAX_INTEGER_SAMPLES            0x9110
+#endif
+
+#ifndef GL_ARB_vertex_array_bgra
+    /* reuse GL_BGRA */
+#endif
+
+#ifndef GL_ARB_draw_buffers_blend
+#endif
+
+#ifndef GL_ARB_sample_shading
+#define GL_SAMPLE_SHADING_ARB             0x8C36
+#define GL_MIN_SAMPLE_SHADING_VALUE_ARB   0x8C37
+#endif
+
+#ifndef GL_ARB_texture_cube_map_array
+#define GL_TEXTURE_CUBE_MAP_ARRAY_ARB     0x9009
+#define GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_ARB 0x900A
+#define GL_PROXY_TEXTURE_CUBE_MAP_ARRAY_ARB 0x900B
+#define GL_SAMPLER_CUBE_MAP_ARRAY_ARB     0x900C
+#define GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_ARB 0x900D
+#define GL_INT_SAMPLER_CUBE_MAP_ARRAY_ARB 0x900E
+#define GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_ARB 0x900F
+#endif
+
+#ifndef GL_ARB_texture_gather
+#define GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_ARB 0x8E5E
+#define GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_ARB 0x8E5F
+#endif
+
+#ifndef GL_ARB_texture_query_lod
+#endif
+
+#ifndef GL_ARB_shading_language_include
+#define GL_SHADER_INCLUDE_ARB             0x8DAE
+#define GL_NAMED_STRING_LENGTH_ARB        0x8DE9
+#define GL_NAMED_STRING_TYPE_ARB          0x8DEA
+#endif
+
+#ifndef GL_ARB_texture_compression_bptc
+#define GL_COMPRESSED_RGBA_BPTC_UNORM_ARB 0x8E8C
+#define GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM_ARB 0x8E8D
+#define GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT_ARB 0x8E8E
+#define GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_ARB 0x8E8F
+#endif
+
+#ifndef GL_ARB_blend_func_extended
+#define GL_SRC1_COLOR                     0x88F9
+    /* reuse GL_SRC1_ALPHA */
+#define GL_ONE_MINUS_SRC1_COLOR           0x88FA
+#define GL_ONE_MINUS_SRC1_ALPHA           0x88FB
+#define GL_MAX_DUAL_SOURCE_DRAW_BUFFERS   0x88FC
+#endif
+
+#ifndef GL_ARB_explicit_attrib_location
+#endif
+
+#ifndef GL_ARB_occlusion_query2
+#define GL_ANY_SAMPLES_PASSED             0x8C2F
+#endif
+
+#ifndef GL_ARB_sampler_objects
+#define GL_SAMPLER_BINDING                0x8919
+#endif
+
+#ifndef GL_ARB_shader_bit_encoding
+#endif
+
+#ifndef GL_ARB_texture_rgb10_a2ui
+#define GL_RGB10_A2UI                     0x906F
+#endif
+
+#ifndef GL_ARB_texture_swizzle
+#define GL_TEXTURE_SWIZZLE_R              0x8E42
+#define GL_TEXTURE_SWIZZLE_G              0x8E43
+#define GL_TEXTURE_SWIZZLE_B              0x8E44
+#define GL_TEXTURE_SWIZZLE_A              0x8E45
+#define GL_TEXTURE_SWIZZLE_RGBA           0x8E46
+#endif
+
+#ifndef GL_ARB_timer_query
+#define GL_TIME_ELAPSED                   0x88BF
+#define GL_TIMESTAMP                      0x8E28
+#endif
+
+#ifndef GL_ARB_vertex_type_2_10_10_10_rev
+    /* reuse GL_UNSIGNED_INT_2_10_10_10_REV */
+#define GL_INT_2_10_10_10_REV             0x8D9F
+#endif
+
+#ifndef GL_ARB_draw_indirect
+#define GL_DRAW_INDIRECT_BUFFER           0x8F3F
+#define GL_DRAW_INDIRECT_BUFFER_BINDING   0x8F43
+#endif
+
+#ifndef GL_ARB_gpu_shader5
+#define GL_GEOMETRY_SHADER_INVOCATIONS    0x887F
+#define GL_MAX_GEOMETRY_SHADER_INVOCATIONS 0x8E5A
+#define GL_MIN_FRAGMENT_INTERPOLATION_OFFSET 0x8E5B
+#define GL_MAX_FRAGMENT_INTERPOLATION_OFFSET 0x8E5C
+#define GL_FRAGMENT_INTERPOLATION_OFFSET_BITS 0x8E5D
+    /* reuse GL_MAX_VERTEX_STREAMS */
+#endif
+
+#ifndef GL_ARB_gpu_shader_fp64
+    /* reuse GL_DOUBLE */
+#define GL_DOUBLE_VEC2                    0x8FFC
+#define GL_DOUBLE_VEC3                    0x8FFD
+#define GL_DOUBLE_VEC4                    0x8FFE
+#define GL_DOUBLE_MAT2                    0x8F46
+#define GL_DOUBLE_MAT3                    0x8F47
+#define GL_DOUBLE_MAT4                    0x8F48
+#define GL_DOUBLE_MAT2x3                  0x8F49
+#define GL_DOUBLE_MAT2x4                  0x8F4A
+#define GL_DOUBLE_MAT3x2                  0x8F4B
+#define GL_DOUBLE_MAT3x4                  0x8F4C
+#define GL_DOUBLE_MAT4x2                  0x8F4D
+#define GL_DOUBLE_MAT4x3                  0x8F4E
+#endif
+
+#ifndef GL_ARB_shader_subroutine
+#define GL_ACTIVE_SUBROUTINES             0x8DE5
+#define GL_ACTIVE_SUBROUTINE_UNIFORMS     0x8DE6
+#define GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS 0x8E47
+#define GL_ACTIVE_SUBROUTINE_MAX_LENGTH   0x8E48
+#define GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH 0x8E49
+#define GL_MAX_SUBROUTINES                0x8DE7
+#define GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS 0x8DE8
+#define GL_NUM_COMPATIBLE_SUBROUTINES     0x8E4A
+#define GL_COMPATIBLE_SUBROUTINES         0x8E4B
+    /* reuse GL_UNIFORM_SIZE */
+    /* reuse GL_UNIFORM_NAME_LENGTH */
+#endif
+
+#ifndef GL_ARB_tessellation_shader
+#define GL_PATCHES                        0x000E
+#define GL_PATCH_VERTICES                 0x8E72
+#define GL_PATCH_DEFAULT_INNER_LEVEL      0x8E73
+#define GL_PATCH_DEFAULT_OUTER_LEVEL      0x8E74
+#define GL_TESS_CONTROL_OUTPUT_VERTICES   0x8E75
+#define GL_TESS_GEN_MODE                  0x8E76
+#define GL_TESS_GEN_SPACING               0x8E77
+#define GL_TESS_GEN_VERTEX_ORDER          0x8E78
+#define GL_TESS_GEN_POINT_MODE            0x8E79
+    /* reuse GL_TRIANGLES */
+    /* reuse GL_QUADS */
+#define GL_ISOLINES                       0x8E7A
+    /* reuse GL_EQUAL */
+#define GL_FRACTIONAL_ODD                 0x8E7B
+#define GL_FRACTIONAL_EVEN                0x8E7C
+    /* reuse GL_CCW */
+    /* reuse GL_CW */
+#define GL_MAX_PATCH_VERTICES             0x8E7D
+#define GL_MAX_TESS_GEN_LEVEL             0x8E7E
+#define GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS 0x8E7F
+#define GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS 0x8E80
+#define GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS 0x8E81
+#define GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS 0x8E82
+#define GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS 0x8E83
+#define GL_MAX_TESS_PATCH_COMPONENTS      0x8E84
+#define GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS 0x8E85
+#define GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS 0x8E86
+#define GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS 0x8E89
+#define GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS 0x8E8A
+#define GL_MAX_TESS_CONTROL_INPUT_COMPONENTS 0x886C
+#define GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS 0x886D
+#define GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS 0x8E1E
+#define GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS 0x8E1F
+#define GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER 0x84F0
+#define GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER 0x84F1
+#define GL_TESS_EVALUATION_SHADER         0x8E87
+#define GL_TESS_CONTROL_SHADER            0x8E88
+#endif
+
+#ifndef GL_ARB_texture_buffer_object_rgb32
+    /* reuse GL_RGB32F */
+    /* reuse GL_RGB32UI */
+    /* reuse GL_RGB32I */
+#endif
+
+#ifndef GL_ARB_transform_feedback2
+#define GL_TRANSFORM_FEEDBACK             0x8E22
+#define GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED 0x8E23
+#define GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE 0x8E24
+#define GL_TRANSFORM_FEEDBACK_BINDING     0x8E25
+#endif
+
+#ifndef GL_ARB_transform_feedback3
+#define GL_MAX_TRANSFORM_FEEDBACK_BUFFERS 0x8E70
+#define GL_MAX_VERTEX_STREAMS             0x8E71
+#endif
+
+#ifndef GL_ARB_ES2_compatibility
+#define GL_FIXED                          0x140C
+#define GL_IMPLEMENTATION_COLOR_READ_TYPE 0x8B9A
+#define GL_IMPLEMENTATION_COLOR_READ_FORMAT 0x8B9B
+#define GL_LOW_FLOAT                      0x8DF0
+#define GL_MEDIUM_FLOAT                   0x8DF1
+#define GL_HIGH_FLOAT                     0x8DF2
+#define GL_LOW_INT                        0x8DF3
+#define GL_MEDIUM_INT                     0x8DF4
+#define GL_HIGH_INT                       0x8DF5
+#define GL_SHADER_COMPILER                0x8DFA
+#define GL_NUM_SHADER_BINARY_FORMATS      0x8DF9
+#define GL_MAX_VERTEX_UNIFORM_VECTORS     0x8DFB
+#define GL_MAX_VARYING_VECTORS            0x8DFC
+#define GL_MAX_FRAGMENT_UNIFORM_VECTORS   0x8DFD
+#endif
+
+#ifndef GL_ARB_get_program_binary
+#define GL_PROGRAM_BINARY_RETRIEVABLE_HINT 0x8257
+#define GL_PROGRAM_BINARY_LENGTH          0x8741
+#define GL_NUM_PROGRAM_BINARY_FORMATS     0x87FE
+#define GL_PROGRAM_BINARY_FORMATS         0x87FF
+#endif
+
+#ifndef GL_ARB_separate_shader_objects
+#define GL_VERTEX_SHADER_BIT              0x00000001
+#define GL_FRAGMENT_SHADER_BIT            0x00000002
+#define GL_GEOMETRY_SHADER_BIT            0x00000004
+#define GL_TESS_CONTROL_SHADER_BIT        0x00000008
+#define GL_TESS_EVALUATION_SHADER_BIT     0x00000010
+#define GL_ALL_SHADER_BITS                0xFFFFFFFF
+#define GL_PROGRAM_SEPARABLE              0x8258
+#define GL_ACTIVE_PROGRAM                 0x8259
+#define GL_PROGRAM_PIPELINE_BINDING       0x825A
+#endif
+
+#ifndef GL_ARB_shader_precision
+#endif
+
+#ifndef GL_ARB_vertex_attrib_64bit
+    /* reuse GL_RGB32I */
+    /* reuse GL_DOUBLE_VEC2 */
+    /* reuse GL_DOUBLE_VEC3 */
+    /* reuse GL_DOUBLE_VEC4 */
+    /* reuse GL_DOUBLE_MAT2 */
+    /* reuse GL_DOUBLE_MAT3 */
+    /* reuse GL_DOUBLE_MAT4 */
+    /* reuse GL_DOUBLE_MAT2x3 */
+    /* reuse GL_DOUBLE_MAT2x4 */
+    /* reuse GL_DOUBLE_MAT3x2 */
+    /* reuse GL_DOUBLE_MAT3x4 */
+    /* reuse GL_DOUBLE_MAT4x2 */
+    /* reuse GL_DOUBLE_MAT4x3 */
+#endif
+
+#ifndef GL_ARB_viewport_array
+    /* reuse GL_SCISSOR_BOX */
+    /* reuse GL_VIEWPORT */
+    /* reuse GL_DEPTH_RANGE */
+    /* reuse GL_SCISSOR_TEST */
+#define GL_MAX_VIEWPORTS                  0x825B
+#define GL_VIEWPORT_SUBPIXEL_BITS         0x825C
+#define GL_VIEWPORT_BOUNDS_RANGE          0x825D
+#define GL_LAYER_PROVOKING_VERTEX         0x825E
+#define GL_VIEWPORT_INDEX_PROVOKING_VERTEX 0x825F
+#define GL_UNDEFINED_VERTEX               0x8260
+    /* reuse GL_FIRST_VERTEX_CONVENTION */
+    /* reuse GL_LAST_VERTEX_CONVENTION */
+    /* reuse GL_PROVOKING_VERTEX */
+#endif
+
+#ifndef GL_ARB_cl_event
+#define GL_SYNC_CL_EVENT_ARB              0x8240
+#define GL_SYNC_CL_EVENT_COMPLETE_ARB     0x8241
+#endif
+
+#ifndef GL_ARB_debug_output
+#define GL_DEBUG_OUTPUT_SYNCHRONOUS_ARB   0x8242
+#define GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_ARB 0x8243
+#define GL_DEBUG_CALLBACK_FUNCTION_ARB    0x8244
+#define GL_DEBUG_CALLBACK_USER_PARAM_ARB  0x8245
+#define GL_DEBUG_SOURCE_API_ARB           0x8246
+#define GL_DEBUG_SOURCE_WINDOW_SYSTEM_ARB 0x8247
+#define GL_DEBUG_SOURCE_SHADER_COMPILER_ARB 0x8248
+#define GL_DEBUG_SOURCE_THIRD_PARTY_ARB   0x8249
+#define GL_DEBUG_SOURCE_APPLICATION_ARB   0x824A
+#define GL_DEBUG_SOURCE_OTHER_ARB         0x824B
+#define GL_DEBUG_TYPE_ERROR_ARB           0x824C
+#define GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_ARB 0x824D
+#define GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_ARB 0x824E
+#define GL_DEBUG_TYPE_PORTABILITY_ARB     0x824F
+#define GL_DEBUG_TYPE_PERFORMANCE_ARB     0x8250
+#define GL_DEBUG_TYPE_OTHER_ARB           0x8251
+#define GL_MAX_DEBUG_MESSAGE_LENGTH_ARB   0x9143
+#define GL_MAX_DEBUG_LOGGED_MESSAGES_ARB  0x9144
+#define GL_DEBUG_LOGGED_MESSAGES_ARB      0x9145
+#define GL_DEBUG_SEVERITY_HIGH_ARB        0x9146
+#define GL_DEBUG_SEVERITY_MEDIUM_ARB      0x9147
+#define GL_DEBUG_SEVERITY_LOW_ARB         0x9148
+#endif
+
+#ifndef GL_ARB_robustness
+    /* reuse GL_NO_ERROR */
+#define GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT_ARB 0x00000004
+#define GL_LOSE_CONTEXT_ON_RESET_ARB      0x8252
+#define GL_GUILTY_CONTEXT_RESET_ARB       0x8253
+#define GL_INNOCENT_CONTEXT_RESET_ARB     0x8254
+#define GL_UNKNOWN_CONTEXT_RESET_ARB      0x8255
+#define GL_RESET_NOTIFICATION_STRATEGY_ARB 0x8256
+#define GL_NO_RESET_NOTIFICATION_ARB      0x8261
+#endif
+
+#ifndef GL_ARB_shader_stencil_export
+#endif
+
+#ifndef GL_ARB_base_instance
+#endif
+
+#ifndef GL_ARB_shading_language_420pack
+#endif
+
+#ifndef GL_ARB_transform_feedback_instanced
+#endif
+
+#ifndef GL_ARB_compressed_texture_pixel_storage
+#define GL_UNPACK_COMPRESSED_BLOCK_WIDTH  0x9127
+#define GL_UNPACK_COMPRESSED_BLOCK_HEIGHT 0x9128
+#define GL_UNPACK_COMPRESSED_BLOCK_DEPTH  0x9129
+#define GL_UNPACK_COMPRESSED_BLOCK_SIZE   0x912A
+#define GL_PACK_COMPRESSED_BLOCK_WIDTH    0x912B
+#define GL_PACK_COMPRESSED_BLOCK_HEIGHT   0x912C
+#define GL_PACK_COMPRESSED_BLOCK_DEPTH    0x912D
+#define GL_PACK_COMPRESSED_BLOCK_SIZE     0x912E
+#endif
+
+#ifndef GL_ARB_conservative_depth
+#endif
+
+#ifndef GL_ARB_internalformat_query
+#define GL_NUM_SAMPLE_COUNTS              0x9380
+#endif
+
+#ifndef GL_ARB_map_buffer_alignment
+#define GL_MIN_MAP_BUFFER_ALIGNMENT       0x90BC
+#endif
+
+#ifndef GL_ARB_shader_atomic_counters
+#define GL_ATOMIC_COUNTER_BUFFER          0x92C0
+#define GL_ATOMIC_COUNTER_BUFFER_BINDING  0x92C1
+#define GL_ATOMIC_COUNTER_BUFFER_START    0x92C2
+#define GL_ATOMIC_COUNTER_BUFFER_SIZE     0x92C3
+#define GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE 0x92C4
+#define GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS 0x92C5
+#define GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES 0x92C6
+#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER 0x92C7
+#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER 0x92C8
+#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER 0x92C9
+#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER 0x92CA
+#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER 0x92CB
+#define GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS 0x92CC
+#define GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS 0x92CD
+#define GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS 0x92CE
+#define GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS 0x92CF
+#define GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS 0x92D0
+#define GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS 0x92D1
+#define GL_MAX_VERTEX_ATOMIC_COUNTERS     0x92D2
+#define GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS 0x92D3
+#define GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS 0x92D4
+#define GL_MAX_GEOMETRY_ATOMIC_COUNTERS   0x92D5
+#define GL_MAX_FRAGMENT_ATOMIC_COUNTERS   0x92D6
+#define GL_MAX_COMBINED_ATOMIC_COUNTERS   0x92D7
+#define GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE 0x92D8
+#define GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS 0x92DC
+#define GL_ACTIVE_ATOMIC_COUNTER_BUFFERS  0x92D9
+#define GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX 0x92DA
+#define GL_UNSIGNED_INT_ATOMIC_COUNTER    0x92DB
+#endif
+
+#ifndef GL_ARB_shader_image_load_store
+#define GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT 0x00000001
+#define GL_ELEMENT_ARRAY_BARRIER_BIT      0x00000002
+#define GL_UNIFORM_BARRIER_BIT            0x00000004
+#define GL_TEXTURE_FETCH_BARRIER_BIT      0x00000008
+#define GL_SHADER_IMAGE_ACCESS_BARRIER_BIT 0x00000020
+#define GL_COMMAND_BARRIER_BIT            0x00000040
+#define GL_PIXEL_BUFFER_BARRIER_BIT       0x00000080
+#define GL_TEXTURE_UPDATE_BARRIER_BIT     0x00000100
+#define GL_BUFFER_UPDATE_BARRIER_BIT      0x00000200
+#define GL_FRAMEBUFFER_BARRIER_BIT        0x00000400
+#define GL_TRANSFORM_FEEDBACK_BARRIER_BIT 0x00000800
+#define GL_ATOMIC_COUNTER_BARRIER_BIT     0x00001000
+#define GL_ALL_BARRIER_BITS               0xFFFFFFFF
+#define GL_MAX_IMAGE_UNITS                0x8F38
+#define GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS 0x8F39
+#define GL_IMAGE_BINDING_NAME             0x8F3A
+#define GL_IMAGE_BINDING_LEVEL            0x8F3B
+#define GL_IMAGE_BINDING_LAYERED          0x8F3C
+#define GL_IMAGE_BINDING_LAYER            0x8F3D
+#define GL_IMAGE_BINDING_ACCESS           0x8F3E
+#define GL_IMAGE_1D                       0x904C
+#define GL_IMAGE_2D                       0x904D
+#define GL_IMAGE_3D                       0x904E
+#define GL_IMAGE_2D_RECT                  0x904F
+#define GL_IMAGE_CUBE                     0x9050
+#define GL_IMAGE_BUFFER                   0x9051
+#define GL_IMAGE_1D_ARRAY                 0x9052
+#define GL_IMAGE_2D_ARRAY                 0x9053
+#define GL_IMAGE_CUBE_MAP_ARRAY           0x9054
+#define GL_IMAGE_2D_MULTISAMPLE           0x9055
+#define GL_IMAGE_2D_MULTISAMPLE_ARRAY     0x9056
+#define GL_INT_IMAGE_1D                   0x9057
+#define GL_INT_IMAGE_2D                   0x9058
+#define GL_INT_IMAGE_3D                   0x9059
+#define GL_INT_IMAGE_2D_RECT              0x905A
+#define GL_INT_IMAGE_CUBE                 0x905B
+#define GL_INT_IMAGE_BUFFER               0x905C
+#define GL_INT_IMAGE_1D_ARRAY             0x905D
+#define GL_INT_IMAGE_2D_ARRAY             0x905E
+#define GL_INT_IMAGE_CUBE_MAP_ARRAY       0x905F
+#define GL_INT_IMAGE_2D_MULTISAMPLE       0x9060
+#define GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY 0x9061
+#define GL_UNSIGNED_INT_IMAGE_1D          0x9062
+#define GL_UNSIGNED_INT_IMAGE_2D          0x9063
+#define GL_UNSIGNED_INT_IMAGE_3D          0x9064
+#define GL_UNSIGNED_INT_IMAGE_2D_RECT     0x9065
+#define GL_UNSIGNED_INT_IMAGE_CUBE        0x9066
+#define GL_UNSIGNED_INT_IMAGE_BUFFER      0x9067
+#define GL_UNSIGNED_INT_IMAGE_1D_ARRAY    0x9068
+#define GL_UNSIGNED_INT_IMAGE_2D_ARRAY    0x9069
+#define GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY 0x906A
+#define GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE 0x906B
+#define GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY 0x906C
+#define GL_MAX_IMAGE_SAMPLES              0x906D
+#define GL_IMAGE_BINDING_FORMAT           0x906E
+#define GL_IMAGE_FORMAT_COMPATIBILITY_TYPE 0x90C7
+#define GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE 0x90C8
+#define GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS 0x90C9
+#define GL_MAX_VERTEX_IMAGE_UNIFORMS      0x90CA
+#define GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS 0x90CB
+#define GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS 0x90CC
+#define GL_MAX_GEOMETRY_IMAGE_UNIFORMS    0x90CD
+#define GL_MAX_FRAGMENT_IMAGE_UNIFORMS    0x90CE
+#define GL_MAX_COMBINED_IMAGE_UNIFORMS    0x90CF
+#endif
+
+#ifndef GL_ARB_shading_language_packing
+#endif
+
+#ifndef GL_ARB_texture_storage
+#define GL_TEXTURE_IMMUTABLE_FORMAT       0x912F
+#endif
+
 #ifndef GL_EXT_abgr
 #define GL_ABGR_EXT                       0x8000
 #endif
@@ -1116,6 +2732,10 @@
 #define GL_CLAMP_TO_EDGE_SGIS             0x812F
 #endif
 
+#ifndef GL_SGIS_texture_border_clamp
+#define GL_CLAMP_TO_BORDER_SGIS           0x812D
+#endif
+
 #ifndef GL_EXT_blend_minmax
 #define GL_FUNC_ADD_EXT                   0x8006
 #define GL_MIN_EXT                        0x8007
@@ -2603,9 +4223,9 @@
 #endif
 
 #ifndef GL_APPLE_element_array
-#define GL_ELEMENT_ARRAY_APPLE            0x8768
-#define GL_ELEMENT_ARRAY_TYPE_APPLE       0x8769
-#define GL_ELEMENT_ARRAY_POINTER_APPLE    0x876A
+#define GL_ELEMENT_ARRAY_APPLE            0x8A0C
+#define GL_ELEMENT_ARRAY_TYPE_APPLE       0x8A0D
+#define GL_ELEMENT_ARRAY_POINTER_APPLE    0x8A0E
 #endif
 
 #ifndef GL_APPLE_fence
@@ -2622,6 +4242,7 @@
 #define GL_VERTEX_ARRAY_RANGE_LENGTH_APPLE 0x851E
 #define GL_VERTEX_ARRAY_STORAGE_HINT_APPLE 0x851F
 #define GL_VERTEX_ARRAY_RANGE_POINTER_APPLE 0x8521
+#define GL_STORAGE_CLIENT_APPLE           0x85B4
 #define GL_STORAGE_CACHED_APPLE           0x85BE
 #define GL_STORAGE_SHARED_APPLE           0x85BF
 #endif
@@ -2659,6 +4280,11 @@
 #define GL_DRAW_BUFFER15_ATI              0x8834
 #endif
 
+#ifndef GL_ATI_pixel_format_float
+#define GL_TYPE_RGBA_FLOAT_ATI            0x8820
+#define GL_COLOR_CLEAR_UNCLAMPED_VALUE_ATI 0x8835
+#endif
+
 #ifndef GL_ATI_texture_env_combine3
 #define GL_MODULATE_ADD_ATI               0x8744
 #define GL_MODULATE_SIGNED_ADD_ATI        0x8745
@@ -2745,6 +4371,11 @@
 #ifndef GL_ATI_vertex_attrib_array_object
 #endif
 
+#ifndef GL_OES_read_format
+#define GL_IMPLEMENTATION_COLOR_READ_TYPE_OES 0x8B9A
+#define GL_IMPLEMENTATION_COLOR_READ_FORMAT_OES 0x8B9B
+#endif
+
 #ifndef GL_EXT_depth_bounds_test
 #define GL_DEPTH_BOUNDS_TEST_EXT          0x8890
 #define GL_DEPTH_BOUNDS_EXT               0x8891
@@ -2757,7 +4388,7 @@
 #endif
 
 #ifndef GL_EXT_blend_equation_separate
-#define GL_BLEND_EQUATION_RGB_EXT         GL_BLEND_EQUATION
+#define GL_BLEND_EQUATION_RGB_EXT         0x8009
 #define GL_BLEND_EQUATION_ALPHA_EXT       0x883D
 #endif
 
@@ -2771,10 +4402,1094 @@
 #define GL_YCBCR_MESA                     0x8757
 #endif
 
+#ifndef GL_EXT_pixel_buffer_object
+#define GL_PIXEL_PACK_BUFFER_EXT          0x88EB
+#define GL_PIXEL_UNPACK_BUFFER_EXT        0x88EC
+#define GL_PIXEL_PACK_BUFFER_BINDING_EXT  0x88ED
+#define GL_PIXEL_UNPACK_BUFFER_BINDING_EXT 0x88EF
+#endif
+
+#ifndef GL_NV_fragment_program_option
+#endif
+
+#ifndef GL_NV_fragment_program2
+#define GL_MAX_PROGRAM_EXEC_INSTRUCTIONS_NV 0x88F4
+#define GL_MAX_PROGRAM_CALL_DEPTH_NV      0x88F5
+#define GL_MAX_PROGRAM_IF_DEPTH_NV        0x88F6
+#define GL_MAX_PROGRAM_LOOP_DEPTH_NV      0x88F7
+#define GL_MAX_PROGRAM_LOOP_COUNT_NV      0x88F8
+#endif
+
+#ifndef GL_NV_vertex_program2_option
+    /* reuse GL_MAX_PROGRAM_EXEC_INSTRUCTIONS_NV */
+    /* reuse GL_MAX_PROGRAM_CALL_DEPTH_NV */
+#endif
+
+#ifndef GL_NV_vertex_program3
+    /* reuse GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB */
+#endif
+
+#ifndef GL_EXT_framebuffer_object
+#define GL_INVALID_FRAMEBUFFER_OPERATION_EXT 0x0506
+#define GL_MAX_RENDERBUFFER_SIZE_EXT      0x84E8
+#define GL_FRAMEBUFFER_BINDING_EXT        0x8CA6
+#define GL_RENDERBUFFER_BINDING_EXT       0x8CA7
+#define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_EXT 0x8CD0
+#define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_EXT 0x8CD1
+#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_EXT 0x8CD2
+#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_EXT 0x8CD3
+#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_EXT 0x8CD4
+#define GL_FRAMEBUFFER_COMPLETE_EXT       0x8CD5
+#define GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_EXT 0x8CD6
+#define GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_EXT 0x8CD7
+#define GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_EXT 0x8CD9
+#define GL_FRAMEBUFFER_INCOMPLETE_FORMATS_EXT 0x8CDA
+#define GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_EXT 0x8CDB
+#define GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_EXT 0x8CDC
+#define GL_FRAMEBUFFER_UNSUPPORTED_EXT    0x8CDD
+#define GL_MAX_COLOR_ATTACHMENTS_EXT      0x8CDF
+#define GL_COLOR_ATTACHMENT0_EXT          0x8CE0
+#define GL_COLOR_ATTACHMENT1_EXT          0x8CE1
+#define GL_COLOR_ATTACHMENT2_EXT          0x8CE2
+#define GL_COLOR_ATTACHMENT3_EXT          0x8CE3
+#define GL_COLOR_ATTACHMENT4_EXT          0x8CE4
+#define GL_COLOR_ATTACHMENT5_EXT          0x8CE5
+#define GL_COLOR_ATTACHMENT6_EXT          0x8CE6
+#define GL_COLOR_ATTACHMENT7_EXT          0x8CE7
+#define GL_COLOR_ATTACHMENT8_EXT          0x8CE8
+#define GL_COLOR_ATTACHMENT9_EXT          0x8CE9
+#define GL_COLOR_ATTACHMENT10_EXT         0x8CEA
+#define GL_COLOR_ATTACHMENT11_EXT         0x8CEB
+#define GL_COLOR_ATTACHMENT12_EXT         0x8CEC
+#define GL_COLOR_ATTACHMENT13_EXT         0x8CED
+#define GL_COLOR_ATTACHMENT14_EXT         0x8CEE
+#define GL_COLOR_ATTACHMENT15_EXT         0x8CEF
+#define GL_DEPTH_ATTACHMENT_EXT           0x8D00
+#define GL_STENCIL_ATTACHMENT_EXT         0x8D20
+#define GL_FRAMEBUFFER_EXT                0x8D40
+#define GL_RENDERBUFFER_EXT               0x8D41
+#define GL_RENDERBUFFER_WIDTH_EXT         0x8D42
+#define GL_RENDERBUFFER_HEIGHT_EXT        0x8D43
+#define GL_RENDERBUFFER_INTERNAL_FORMAT_EXT 0x8D44
+#define GL_STENCIL_INDEX1_EXT             0x8D46
+#define GL_STENCIL_INDEX4_EXT             0x8D47
+#define GL_STENCIL_INDEX8_EXT             0x8D48
+#define GL_STENCIL_INDEX16_EXT            0x8D49
+#define GL_RENDERBUFFER_RED_SIZE_EXT      0x8D50
+#define GL_RENDERBUFFER_GREEN_SIZE_EXT    0x8D51
+#define GL_RENDERBUFFER_BLUE_SIZE_EXT     0x8D52
+#define GL_RENDERBUFFER_ALPHA_SIZE_EXT    0x8D53
+#define GL_RENDERBUFFER_DEPTH_SIZE_EXT    0x8D54
+#define GL_RENDERBUFFER_STENCIL_SIZE_EXT  0x8D55
+#endif
+
+#ifndef GL_GREMEDY_string_marker
+#endif
+
+#ifndef GL_EXT_packed_depth_stencil
+#define GL_DEPTH_STENCIL_EXT              0x84F9
+#define GL_UNSIGNED_INT_24_8_EXT          0x84FA
+#define GL_DEPTH24_STENCIL8_EXT           0x88F0
+#define GL_TEXTURE_STENCIL_SIZE_EXT       0x88F1
+#endif
+
+#ifndef GL_EXT_stencil_clear_tag
+#define GL_STENCIL_TAG_BITS_EXT           0x88F2
+#define GL_STENCIL_CLEAR_TAG_VALUE_EXT    0x88F3
+#endif
+
+#ifndef GL_EXT_texture_sRGB
+#define GL_SRGB_EXT                       0x8C40
+#define GL_SRGB8_EXT                      0x8C41
+#define GL_SRGB_ALPHA_EXT                 0x8C42
+#define GL_SRGB8_ALPHA8_EXT               0x8C43
+#define GL_SLUMINANCE_ALPHA_EXT           0x8C44
+#define GL_SLUMINANCE8_ALPHA8_EXT         0x8C45
+#define GL_SLUMINANCE_EXT                 0x8C46
+#define GL_SLUMINANCE8_EXT                0x8C47
+#define GL_COMPRESSED_SRGB_EXT            0x8C48
+#define GL_COMPRESSED_SRGB_ALPHA_EXT      0x8C49
+#define GL_COMPRESSED_SLUMINANCE_EXT      0x8C4A
+#define GL_COMPRESSED_SLUMINANCE_ALPHA_EXT 0x8C4B
+#define GL_COMPRESSED_SRGB_S3TC_DXT1_EXT  0x8C4C
+#define GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT 0x8C4D
+#define GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT 0x8C4E
+#define GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT 0x8C4F
+#endif
+
+#ifndef GL_EXT_framebuffer_blit
+#define GL_READ_FRAMEBUFFER_EXT           0x8CA8
+#define GL_DRAW_FRAMEBUFFER_EXT           0x8CA9
+#define GL_DRAW_FRAMEBUFFER_BINDING_EXT   GL_FRAMEBUFFER_BINDING_EXT
+#define GL_READ_FRAMEBUFFER_BINDING_EXT   0x8CAA
+#endif
+
+#ifndef GL_EXT_framebuffer_multisample
+#define GL_RENDERBUFFER_SAMPLES_EXT       0x8CAB
+#define GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_EXT 0x8D56
+#define GL_MAX_SAMPLES_EXT                0x8D57
+#endif
+
+#ifndef GL_MESAX_texture_stack
+#define GL_TEXTURE_1D_STACK_MESAX         0x8759
+#define GL_TEXTURE_2D_STACK_MESAX         0x875A
+#define GL_PROXY_TEXTURE_1D_STACK_MESAX   0x875B
+#define GL_PROXY_TEXTURE_2D_STACK_MESAX   0x875C
+#define GL_TEXTURE_1D_STACK_BINDING_MESAX 0x875D
+#define GL_TEXTURE_2D_STACK_BINDING_MESAX 0x875E
+#endif
+
+#ifndef GL_EXT_timer_query
+#define GL_TIME_ELAPSED_EXT               0x88BF
+#endif
+
+#ifndef GL_EXT_gpu_program_parameters
+#endif
+
+#ifndef GL_APPLE_flush_buffer_range
+#define GL_BUFFER_SERIALIZED_MODIFY_APPLE 0x8A12
+#define GL_BUFFER_FLUSHING_UNMAP_APPLE    0x8A13
+#endif
+
+#ifndef GL_NV_gpu_program4
+#define GL_MIN_PROGRAM_TEXEL_OFFSET_NV    0x8904
+#define GL_MAX_PROGRAM_TEXEL_OFFSET_NV    0x8905
+#define GL_PROGRAM_ATTRIB_COMPONENTS_NV   0x8906
+#define GL_PROGRAM_RESULT_COMPONENTS_NV   0x8907
+#define GL_MAX_PROGRAM_ATTRIB_COMPONENTS_NV 0x8908
+#define GL_MAX_PROGRAM_RESULT_COMPONENTS_NV 0x8909
+#define GL_MAX_PROGRAM_GENERIC_ATTRIBS_NV 0x8DA5
+#define GL_MAX_PROGRAM_GENERIC_RESULTS_NV 0x8DA6
+#endif
+
+#ifndef GL_NV_geometry_program4
+#define GL_LINES_ADJACENCY_EXT            0x000A
+#define GL_LINE_STRIP_ADJACENCY_EXT       0x000B
+#define GL_TRIANGLES_ADJACENCY_EXT        0x000C
+#define GL_TRIANGLE_STRIP_ADJACENCY_EXT   0x000D
+#define GL_GEOMETRY_PROGRAM_NV            0x8C26
+#define GL_MAX_PROGRAM_OUTPUT_VERTICES_NV 0x8C27
+#define GL_MAX_PROGRAM_TOTAL_OUTPUT_COMPONENTS_NV 0x8C28
+#define GL_GEOMETRY_VERTICES_OUT_EXT      0x8DDA
+#define GL_GEOMETRY_INPUT_TYPE_EXT        0x8DDB
+#define GL_GEOMETRY_OUTPUT_TYPE_EXT       0x8DDC
+#define GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT 0x8C29
+#define GL_FRAMEBUFFER_ATTACHMENT_LAYERED_EXT 0x8DA7
+#define GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXT 0x8DA8
+#define GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_EXT 0x8DA9
+#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT 0x8CD4
+#define GL_PROGRAM_POINT_SIZE_EXT         0x8642
+#endif
+
+#ifndef GL_EXT_geometry_shader4
+#define GL_GEOMETRY_SHADER_EXT            0x8DD9
+    /* reuse GL_GEOMETRY_VERTICES_OUT_EXT */
+    /* reuse GL_GEOMETRY_INPUT_TYPE_EXT */
+    /* reuse GL_GEOMETRY_OUTPUT_TYPE_EXT */
+    /* reuse GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT */
+#define GL_MAX_GEOMETRY_VARYING_COMPONENTS_EXT 0x8DDD
+#define GL_MAX_VERTEX_VARYING_COMPONENTS_EXT 0x8DDE
+#define GL_MAX_VARYING_COMPONENTS_EXT     0x8B4B
+#define GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_EXT 0x8DDF
+#define GL_MAX_GEOMETRY_OUTPUT_VERTICES_EXT 0x8DE0
+#define GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_EXT 0x8DE1
+    /* reuse GL_LINES_ADJACENCY_EXT */
+    /* reuse GL_LINE_STRIP_ADJACENCY_EXT */
+    /* reuse GL_TRIANGLES_ADJACENCY_EXT */
+    /* reuse GL_TRIANGLE_STRIP_ADJACENCY_EXT */
+    /* reuse GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXT */
+    /* reuse GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_EXT */
+    /* reuse GL_FRAMEBUFFER_ATTACHMENT_LAYERED_EXT */
+    /* reuse GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT */
+    /* reuse GL_PROGRAM_POINT_SIZE_EXT */
+#endif
+
+#ifndef GL_NV_vertex_program4
+#define GL_VERTEX_ATTRIB_ARRAY_INTEGER_NV 0x88FD
+#endif
+
+#ifndef GL_EXT_gpu_shader4
+#define GL_SAMPLER_1D_ARRAY_EXT           0x8DC0
+#define GL_SAMPLER_2D_ARRAY_EXT           0x8DC1
+#define GL_SAMPLER_BUFFER_EXT             0x8DC2
+#define GL_SAMPLER_1D_ARRAY_SHADOW_EXT    0x8DC3
+#define GL_SAMPLER_2D_ARRAY_SHADOW_EXT    0x8DC4
+#define GL_SAMPLER_CUBE_SHADOW_EXT        0x8DC5
+#define GL_UNSIGNED_INT_VEC2_EXT          0x8DC6
+#define GL_UNSIGNED_INT_VEC3_EXT          0x8DC7
+#define GL_UNSIGNED_INT_VEC4_EXT          0x8DC8
+#define GL_INT_SAMPLER_1D_EXT             0x8DC9
+#define GL_INT_SAMPLER_2D_EXT             0x8DCA
+#define GL_INT_SAMPLER_3D_EXT             0x8DCB
+#define GL_INT_SAMPLER_CUBE_EXT           0x8DCC
+#define GL_INT_SAMPLER_2D_RECT_EXT        0x8DCD
+#define GL_INT_SAMPLER_1D_ARRAY_EXT       0x8DCE
+#define GL_INT_SAMPLER_2D_ARRAY_EXT       0x8DCF
+#define GL_INT_SAMPLER_BUFFER_EXT         0x8DD0
+#define GL_UNSIGNED_INT_SAMPLER_1D_EXT    0x8DD1
+#define GL_UNSIGNED_INT_SAMPLER_2D_EXT    0x8DD2
+#define GL_UNSIGNED_INT_SAMPLER_3D_EXT    0x8DD3
+#define GL_UNSIGNED_INT_SAMPLER_CUBE_EXT  0x8DD4
+#define GL_UNSIGNED_INT_SAMPLER_2D_RECT_EXT 0x8DD5
+#define GL_UNSIGNED_INT_SAMPLER_1D_ARRAY_EXT 0x8DD6
+#define GL_UNSIGNED_INT_SAMPLER_2D_ARRAY_EXT 0x8DD7
+#define GL_UNSIGNED_INT_SAMPLER_BUFFER_EXT 0x8DD8
+#endif
+
+#ifndef GL_EXT_draw_instanced
+#endif
+
+#ifndef GL_EXT_packed_float
+#define GL_R11F_G11F_B10F_EXT             0x8C3A
+#define GL_UNSIGNED_INT_10F_11F_11F_REV_EXT 0x8C3B
+#define GL_RGBA_SIGNED_COMPONENTS_EXT     0x8C3C
+#endif
+
+#ifndef GL_EXT_texture_array
+#define GL_TEXTURE_1D_ARRAY_EXT           0x8C18
+#define GL_PROXY_TEXTURE_1D_ARRAY_EXT     0x8C19
+#define GL_TEXTURE_2D_ARRAY_EXT           0x8C1A
+#define GL_PROXY_TEXTURE_2D_ARRAY_EXT     0x8C1B
+#define GL_TEXTURE_BINDING_1D_ARRAY_EXT   0x8C1C
+#define GL_TEXTURE_BINDING_2D_ARRAY_EXT   0x8C1D
+#define GL_MAX_ARRAY_TEXTURE_LAYERS_EXT   0x88FF
+#define GL_COMPARE_REF_DEPTH_TO_TEXTURE_EXT 0x884E
+    /* reuse GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT */
+#endif
+
+#ifndef GL_EXT_texture_buffer_object
+#define GL_TEXTURE_BUFFER_EXT             0x8C2A
+#define GL_MAX_TEXTURE_BUFFER_SIZE_EXT    0x8C2B
+#define GL_TEXTURE_BINDING_BUFFER_EXT     0x8C2C
+#define GL_TEXTURE_BUFFER_DATA_STORE_BINDING_EXT 0x8C2D
+#define GL_TEXTURE_BUFFER_FORMAT_EXT      0x8C2E
+#endif
+
+#ifndef GL_EXT_texture_compression_latc
+#define GL_COMPRESSED_LUMINANCE_LATC1_EXT 0x8C70
+#define GL_COMPRESSED_SIGNED_LUMINANCE_LATC1_EXT 0x8C71
+#define GL_COMPRESSED_LUMINANCE_ALPHA_LATC2_EXT 0x8C72
+#define GL_COMPRESSED_SIGNED_LUMINANCE_ALPHA_LATC2_EXT 0x8C73
+#endif
+
+#ifndef GL_EXT_texture_compression_rgtc
+#define GL_COMPRESSED_RED_RGTC1_EXT       0x8DBB
+#define GL_COMPRESSED_SIGNED_RED_RGTC1_EXT 0x8DBC
+#define GL_COMPRESSED_RED_GREEN_RGTC2_EXT 0x8DBD
+#define GL_COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT 0x8DBE
+#endif
+
+#ifndef GL_EXT_texture_shared_exponent
+#define GL_RGB9_E5_EXT                    0x8C3D
+#define GL_UNSIGNED_INT_5_9_9_9_REV_EXT   0x8C3E
+#define GL_TEXTURE_SHARED_SIZE_EXT        0x8C3F
+#endif
+
+#ifndef GL_NV_depth_buffer_float
+#define GL_DEPTH_COMPONENT32F_NV          0x8DAB
+#define GL_DEPTH32F_STENCIL8_NV           0x8DAC
+#define GL_FLOAT_32_UNSIGNED_INT_24_8_REV_NV 0x8DAD
+#define GL_DEPTH_BUFFER_FLOAT_MODE_NV     0x8DAF
+#endif
+
+#ifndef GL_NV_fragment_program4
+#endif
+
+#ifndef GL_NV_framebuffer_multisample_coverage
+#define GL_RENDERBUFFER_COVERAGE_SAMPLES_NV 0x8CAB
+#define GL_RENDERBUFFER_COLOR_SAMPLES_NV  0x8E10
+#define GL_MAX_MULTISAMPLE_COVERAGE_MODES_NV 0x8E11
+#define GL_MULTISAMPLE_COVERAGE_MODES_NV  0x8E12
+#endif
+
+#ifndef GL_EXT_framebuffer_sRGB
+#define GL_FRAMEBUFFER_SRGB_EXT           0x8DB9
+#define GL_FRAMEBUFFER_SRGB_CAPABLE_EXT   0x8DBA
+#endif
+
+#ifndef GL_NV_geometry_shader4
+#endif
+
+#ifndef GL_NV_parameter_buffer_object
+#define GL_MAX_PROGRAM_PARAMETER_BUFFER_BINDINGS_NV 0x8DA0
+#define GL_MAX_PROGRAM_PARAMETER_BUFFER_SIZE_NV 0x8DA1
+#define GL_VERTEX_PROGRAM_PARAMETER_BUFFER_NV 0x8DA2
+#define GL_GEOMETRY_PROGRAM_PARAMETER_BUFFER_NV 0x8DA3
+#define GL_FRAGMENT_PROGRAM_PARAMETER_BUFFER_NV 0x8DA4
+#endif
+
+#ifndef GL_EXT_draw_buffers2
+#endif
+
+#ifndef GL_NV_transform_feedback
+#define GL_BACK_PRIMARY_COLOR_NV          0x8C77
+#define GL_BACK_SECONDARY_COLOR_NV        0x8C78
+#define GL_TEXTURE_COORD_NV               0x8C79
+#define GL_CLIP_DISTANCE_NV               0x8C7A
+#define GL_VERTEX_ID_NV                   0x8C7B
+#define GL_PRIMITIVE_ID_NV                0x8C7C
+#define GL_GENERIC_ATTRIB_NV              0x8C7D
+#define GL_TRANSFORM_FEEDBACK_ATTRIBS_NV  0x8C7E
+#define GL_TRANSFORM_FEEDBACK_BUFFER_MODE_NV 0x8C7F
+#define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_NV 0x8C80
+#define GL_ACTIVE_VARYINGS_NV             0x8C81
+#define GL_ACTIVE_VARYING_MAX_LENGTH_NV   0x8C82
+#define GL_TRANSFORM_FEEDBACK_VARYINGS_NV 0x8C83
+#define GL_TRANSFORM_FEEDBACK_BUFFER_START_NV 0x8C84
+#define GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_NV 0x8C85
+#define GL_TRANSFORM_FEEDBACK_RECORD_NV   0x8C86
+#define GL_PRIMITIVES_GENERATED_NV        0x8C87
+#define GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_NV 0x8C88
+#define GL_RASTERIZER_DISCARD_NV          0x8C89
+#define GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_ATTRIBS_NV 0x8C8A
+#define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_NV 0x8C8B
+#define GL_INTERLEAVED_ATTRIBS_NV         0x8C8C
+#define GL_SEPARATE_ATTRIBS_NV            0x8C8D
+#define GL_TRANSFORM_FEEDBACK_BUFFER_NV   0x8C8E
+#define GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_NV 0x8C8F
+#define GL_LAYER_NV                       0x8DAA
+#define GL_NEXT_BUFFER_NV                 -2
+#define GL_SKIP_COMPONENTS4_NV            -3
+#define GL_SKIP_COMPONENTS3_NV            -4
+#define GL_SKIP_COMPONENTS2_NV            -5
+#define GL_SKIP_COMPONENTS1_NV            -6
+#endif
+
+#ifndef GL_EXT_bindable_uniform
+#define GL_MAX_VERTEX_BINDABLE_UNIFORMS_EXT 0x8DE2
+#define GL_MAX_FRAGMENT_BINDABLE_UNIFORMS_EXT 0x8DE3
+#define GL_MAX_GEOMETRY_BINDABLE_UNIFORMS_EXT 0x8DE4
+#define GL_MAX_BINDABLE_UNIFORM_SIZE_EXT  0x8DED
+#define GL_UNIFORM_BUFFER_EXT             0x8DEE
+#define GL_UNIFORM_BUFFER_BINDING_EXT     0x8DEF
+#endif
+
+#ifndef GL_EXT_texture_integer
+#define GL_RGBA32UI_EXT                   0x8D70
+#define GL_RGB32UI_EXT                    0x8D71
+#define GL_ALPHA32UI_EXT                  0x8D72
+#define GL_INTENSITY32UI_EXT              0x8D73
+#define GL_LUMINANCE32UI_EXT              0x8D74
+#define GL_LUMINANCE_ALPHA32UI_EXT        0x8D75
+#define GL_RGBA16UI_EXT                   0x8D76
+#define GL_RGB16UI_EXT                    0x8D77
+#define GL_ALPHA16UI_EXT                  0x8D78
+#define GL_INTENSITY16UI_EXT              0x8D79
+#define GL_LUMINANCE16UI_EXT              0x8D7A
+#define GL_LUMINANCE_ALPHA16UI_EXT        0x8D7B
+#define GL_RGBA8UI_EXT                    0x8D7C
+#define GL_RGB8UI_EXT                     0x8D7D
+#define GL_ALPHA8UI_EXT                   0x8D7E
+#define GL_INTENSITY8UI_EXT               0x8D7F
+#define GL_LUMINANCE8UI_EXT               0x8D80
+#define GL_LUMINANCE_ALPHA8UI_EXT         0x8D81
+#define GL_RGBA32I_EXT                    0x8D82
+#define GL_RGB32I_EXT                     0x8D83
+#define GL_ALPHA32I_EXT                   0x8D84
+#define GL_INTENSITY32I_EXT               0x8D85
+#define GL_LUMINANCE32I_EXT               0x8D86
+#define GL_LUMINANCE_ALPHA32I_EXT         0x8D87
+#define GL_RGBA16I_EXT                    0x8D88
+#define GL_RGB16I_EXT                     0x8D89
+#define GL_ALPHA16I_EXT                   0x8D8A
+#define GL_INTENSITY16I_EXT               0x8D8B
+#define GL_LUMINANCE16I_EXT               0x8D8C
+#define GL_LUMINANCE_ALPHA16I_EXT         0x8D8D
+#define GL_RGBA8I_EXT                     0x8D8E
+#define GL_RGB8I_EXT                      0x8D8F
+#define GL_ALPHA8I_EXT                    0x8D90
+#define GL_INTENSITY8I_EXT                0x8D91
+#define GL_LUMINANCE8I_EXT                0x8D92
+#define GL_LUMINANCE_ALPHA8I_EXT          0x8D93
+#define GL_RED_INTEGER_EXT                0x8D94
+#define GL_GREEN_INTEGER_EXT              0x8D95
+#define GL_BLUE_INTEGER_EXT               0x8D96
+#define GL_ALPHA_INTEGER_EXT              0x8D97
+#define GL_RGB_INTEGER_EXT                0x8D98
+#define GL_RGBA_INTEGER_EXT               0x8D99
+#define GL_BGR_INTEGER_EXT                0x8D9A
+#define GL_BGRA_INTEGER_EXT               0x8D9B
+#define GL_LUMINANCE_INTEGER_EXT          0x8D9C
+#define GL_LUMINANCE_ALPHA_INTEGER_EXT    0x8D9D
+#define GL_RGBA_INTEGER_MODE_EXT          0x8D9E
+#endif
+
+#ifndef GL_GREMEDY_frame_terminator
+#endif
+
+#ifndef GL_NV_conditional_render
+#define GL_QUERY_WAIT_NV                  0x8E13
+#define GL_QUERY_NO_WAIT_NV               0x8E14
+#define GL_QUERY_BY_REGION_WAIT_NV        0x8E15
+#define GL_QUERY_BY_REGION_NO_WAIT_NV     0x8E16
+#endif
+
+#ifndef GL_NV_present_video
+#define GL_FRAME_NV                       0x8E26
+#define GL_FIELDS_NV                      0x8E27
+#define GL_CURRENT_TIME_NV                0x8E28
+#define GL_NUM_FILL_STREAMS_NV            0x8E29
+#define GL_PRESENT_TIME_NV                0x8E2A
+#define GL_PRESENT_DURATION_NV            0x8E2B
+#endif
+
+#ifndef GL_EXT_transform_feedback
+#define GL_TRANSFORM_FEEDBACK_BUFFER_EXT  0x8C8E
+#define GL_TRANSFORM_FEEDBACK_BUFFER_START_EXT 0x8C84
+#define GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_EXT 0x8C85
+#define GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_EXT 0x8C8F
+#define GL_INTERLEAVED_ATTRIBS_EXT        0x8C8C
+#define GL_SEPARATE_ATTRIBS_EXT           0x8C8D
+#define GL_PRIMITIVES_GENERATED_EXT       0x8C87
+#define GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_EXT 0x8C88
+#define GL_RASTERIZER_DISCARD_EXT         0x8C89
+#define GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_EXT 0x8C8A
+#define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_EXT 0x8C8B
+#define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_EXT 0x8C80
+#define GL_TRANSFORM_FEEDBACK_VARYINGS_EXT 0x8C83
+#define GL_TRANSFORM_FEEDBACK_BUFFER_MODE_EXT 0x8C7F
+#define GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH_EXT 0x8C76
+#endif
+
+#ifndef GL_EXT_direct_state_access
+#define GL_PROGRAM_MATRIX_EXT             0x8E2D
+#define GL_TRANSPOSE_PROGRAM_MATRIX_EXT   0x8E2E
+#define GL_PROGRAM_MATRIX_STACK_DEPTH_EXT 0x8E2F
+#endif
+
+#ifndef GL_EXT_vertex_array_bgra
+    /* reuse GL_BGRA */
+#endif
+
+#ifndef GL_EXT_texture_swizzle
+#define GL_TEXTURE_SWIZZLE_R_EXT          0x8E42
+#define GL_TEXTURE_SWIZZLE_G_EXT          0x8E43
+#define GL_TEXTURE_SWIZZLE_B_EXT          0x8E44
+#define GL_TEXTURE_SWIZZLE_A_EXT          0x8E45
+#define GL_TEXTURE_SWIZZLE_RGBA_EXT       0x8E46
+#endif
+
+#ifndef GL_NV_explicit_multisample
+#define GL_SAMPLE_POSITION_NV             0x8E50
+#define GL_SAMPLE_MASK_NV                 0x8E51
+#define GL_SAMPLE_MASK_VALUE_NV           0x8E52
+#define GL_TEXTURE_BINDING_RENDERBUFFER_NV 0x8E53
+#define GL_TEXTURE_RENDERBUFFER_DATA_STORE_BINDING_NV 0x8E54
+#define GL_TEXTURE_RENDERBUFFER_NV        0x8E55
+#define GL_SAMPLER_RENDERBUFFER_NV        0x8E56
+#define GL_INT_SAMPLER_RENDERBUFFER_NV    0x8E57
+#define GL_UNSIGNED_INT_SAMPLER_RENDERBUFFER_NV 0x8E58
+#define GL_MAX_SAMPLE_MASK_WORDS_NV       0x8E59
+#endif
+
+#ifndef GL_NV_transform_feedback2
+#define GL_TRANSFORM_FEEDBACK_NV          0x8E22
+#define GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED_NV 0x8E23
+#define GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE_NV 0x8E24
+#define GL_TRANSFORM_FEEDBACK_BINDING_NV  0x8E25
+#endif
+
+#ifndef GL_ATI_meminfo
+#define GL_VBO_FREE_MEMORY_ATI            0x87FB
+#define GL_TEXTURE_FREE_MEMORY_ATI        0x87FC
+#define GL_RENDERBUFFER_FREE_MEMORY_ATI   0x87FD
+#endif
+
+#ifndef GL_AMD_performance_monitor
+#define GL_COUNTER_TYPE_AMD               0x8BC0
+#define GL_COUNTER_RANGE_AMD              0x8BC1
+#define GL_UNSIGNED_INT64_AMD             0x8BC2
+#define GL_PERCENTAGE_AMD                 0x8BC3
+#define GL_PERFMON_RESULT_AVAILABLE_AMD   0x8BC4
+#define GL_PERFMON_RESULT_SIZE_AMD        0x8BC5
+#define GL_PERFMON_RESULT_AMD             0x8BC6
+#endif
+
+#ifndef GL_AMD_texture_texture4
+#endif
+
+#ifndef GL_AMD_vertex_shader_tesselator
+#define GL_SAMPLER_BUFFER_AMD             0x9001
+#define GL_INT_SAMPLER_BUFFER_AMD         0x9002
+#define GL_UNSIGNED_INT_SAMPLER_BUFFER_AMD 0x9003
+#define GL_TESSELLATION_MODE_AMD          0x9004
+#define GL_TESSELLATION_FACTOR_AMD        0x9005
+#define GL_DISCRETE_AMD                   0x9006
+#define GL_CONTINUOUS_AMD                 0x9007
+#endif
+
+#ifndef GL_EXT_provoking_vertex
+#define GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION_EXT 0x8E4C
+#define GL_FIRST_VERTEX_CONVENTION_EXT    0x8E4D
+#define GL_LAST_VERTEX_CONVENTION_EXT     0x8E4E
+#define GL_PROVOKING_VERTEX_EXT           0x8E4F
+#endif
+
+#ifndef GL_EXT_texture_snorm
+#define GL_ALPHA_SNORM                    0x9010
+#define GL_LUMINANCE_SNORM                0x9011
+#define GL_LUMINANCE_ALPHA_SNORM          0x9012
+#define GL_INTENSITY_SNORM                0x9013
+#define GL_ALPHA8_SNORM                   0x9014
+#define GL_LUMINANCE8_SNORM               0x9015
+#define GL_LUMINANCE8_ALPHA8_SNORM        0x9016
+#define GL_INTENSITY8_SNORM               0x9017
+#define GL_ALPHA16_SNORM                  0x9018
+#define GL_LUMINANCE16_SNORM              0x9019
+#define GL_LUMINANCE16_ALPHA16_SNORM      0x901A
+#define GL_INTENSITY16_SNORM              0x901B
+    /* reuse GL_RED_SNORM */
+    /* reuse GL_RG_SNORM */
+    /* reuse GL_RGB_SNORM */
+    /* reuse GL_RGBA_SNORM */
+    /* reuse GL_R8_SNORM */
+    /* reuse GL_RG8_SNORM */
+    /* reuse GL_RGB8_SNORM */
+    /* reuse GL_RGBA8_SNORM */
+    /* reuse GL_R16_SNORM */
+    /* reuse GL_RG16_SNORM */
+    /* reuse GL_RGB16_SNORM */
+    /* reuse GL_RGBA16_SNORM */
+    /* reuse GL_SIGNED_NORMALIZED */
+#endif
+
+#ifndef GL_AMD_draw_buffers_blend
+#endif
+
+#ifndef GL_APPLE_texture_range
+#define GL_TEXTURE_RANGE_LENGTH_APPLE     0x85B7
+#define GL_TEXTURE_RANGE_POINTER_APPLE    0x85B8
+#define GL_TEXTURE_STORAGE_HINT_APPLE     0x85BC
+#define GL_STORAGE_PRIVATE_APPLE          0x85BD
+    /* reuse GL_STORAGE_CACHED_APPLE */
+    /* reuse GL_STORAGE_SHARED_APPLE */
+#endif
+
+#ifndef GL_APPLE_float_pixels
+#define GL_HALF_APPLE                     0x140B
+#define GL_RGBA_FLOAT32_APPLE             0x8814
+#define GL_RGB_FLOAT32_APPLE              0x8815
+#define GL_ALPHA_FLOAT32_APPLE            0x8816
+#define GL_INTENSITY_FLOAT32_APPLE        0x8817
+#define GL_LUMINANCE_FLOAT32_APPLE        0x8818
+#define GL_LUMINANCE_ALPHA_FLOAT32_APPLE  0x8819
+#define GL_RGBA_FLOAT16_APPLE             0x881A
+#define GL_RGB_FLOAT16_APPLE              0x881B
+#define GL_ALPHA_FLOAT16_APPLE            0x881C
+#define GL_INTENSITY_FLOAT16_APPLE        0x881D
+#define GL_LUMINANCE_FLOAT16_APPLE        0x881E
+#define GL_LUMINANCE_ALPHA_FLOAT16_APPLE  0x881F
+#define GL_COLOR_FLOAT_APPLE              0x8A0F
+#endif
+
+#ifndef GL_APPLE_vertex_program_evaluators
+#define GL_VERTEX_ATTRIB_MAP1_APPLE       0x8A00
+#define GL_VERTEX_ATTRIB_MAP2_APPLE       0x8A01
+#define GL_VERTEX_ATTRIB_MAP1_SIZE_APPLE  0x8A02
+#define GL_VERTEX_ATTRIB_MAP1_COEFF_APPLE 0x8A03
+#define GL_VERTEX_ATTRIB_MAP1_ORDER_APPLE 0x8A04
+#define GL_VERTEX_ATTRIB_MAP1_DOMAIN_APPLE 0x8A05
+#define GL_VERTEX_ATTRIB_MAP2_SIZE_APPLE  0x8A06
+#define GL_VERTEX_ATTRIB_MAP2_COEFF_APPLE 0x8A07
+#define GL_VERTEX_ATTRIB_MAP2_ORDER_APPLE 0x8A08
+#define GL_VERTEX_ATTRIB_MAP2_DOMAIN_APPLE 0x8A09
+#endif
+
+#ifndef GL_APPLE_aux_depth_stencil
+#define GL_AUX_DEPTH_STENCIL_APPLE        0x8A14
+#endif
+
+#ifndef GL_APPLE_object_purgeable
+#define GL_BUFFER_OBJECT_APPLE            0x85B3
+#define GL_RELEASED_APPLE                 0x8A19
+#define GL_VOLATILE_APPLE                 0x8A1A
+#define GL_RETAINED_APPLE                 0x8A1B
+#define GL_UNDEFINED_APPLE                0x8A1C
+#define GL_PURGEABLE_APPLE                0x8A1D
+#endif
+
+#ifndef GL_APPLE_row_bytes
+#define GL_PACK_ROW_BYTES_APPLE           0x8A15
+#define GL_UNPACK_ROW_BYTES_APPLE         0x8A16
+#endif
+
+#ifndef GL_APPLE_rgb_422
+#define GL_RGB_422_APPLE                  0x8A1F
+    /* reuse GL_UNSIGNED_SHORT_8_8_APPLE */
+    /* reuse GL_UNSIGNED_SHORT_8_8_REV_APPLE */
+#endif
+
+#ifndef GL_NV_video_capture
+#define GL_VIDEO_BUFFER_NV                0x9020
+#define GL_VIDEO_BUFFER_BINDING_NV        0x9021
+#define GL_FIELD_UPPER_NV                 0x9022
+#define GL_FIELD_LOWER_NV                 0x9023
+#define GL_NUM_VIDEO_CAPTURE_STREAMS_NV   0x9024
+#define GL_NEXT_VIDEO_CAPTURE_BUFFER_STATUS_NV 0x9025
+#define GL_VIDEO_CAPTURE_TO_422_SUPPORTED_NV 0x9026
+#define GL_LAST_VIDEO_CAPTURE_STATUS_NV   0x9027
+#define GL_VIDEO_BUFFER_PITCH_NV          0x9028
+#define GL_VIDEO_COLOR_CONVERSION_MATRIX_NV 0x9029
+#define GL_VIDEO_COLOR_CONVERSION_MAX_NV  0x902A
+#define GL_VIDEO_COLOR_CONVERSION_MIN_NV  0x902B
+#define GL_VIDEO_COLOR_CONVERSION_OFFSET_NV 0x902C
+#define GL_VIDEO_BUFFER_INTERNAL_FORMAT_NV 0x902D
+#define GL_PARTIAL_SUCCESS_NV             0x902E
+#define GL_SUCCESS_NV                     0x902F
+#define GL_FAILURE_NV                     0x9030
+#define GL_YCBYCR8_422_NV                 0x9031
+#define GL_YCBAYCR8A_4224_NV              0x9032
+#define GL_Z6Y10Z6CB10Z6Y10Z6CR10_422_NV  0x9033
+#define GL_Z6Y10Z6CB10Z6A10Z6Y10Z6CR10Z6A10_4224_NV 0x9034
+#define GL_Z4Y12Z4CB12Z4Y12Z4CR12_422_NV  0x9035
+#define GL_Z4Y12Z4CB12Z4A12Z4Y12Z4CR12Z4A12_4224_NV 0x9036
+#define GL_Z4Y12Z4CB12Z4CR12_444_NV       0x9037
+#define GL_VIDEO_CAPTURE_FRAME_WIDTH_NV   0x9038
+#define GL_VIDEO_CAPTURE_FRAME_HEIGHT_NV  0x9039
+#define GL_VIDEO_CAPTURE_FIELD_UPPER_HEIGHT_NV 0x903A
+#define GL_VIDEO_CAPTURE_FIELD_LOWER_HEIGHT_NV 0x903B
+#define GL_VIDEO_CAPTURE_SURFACE_ORIGIN_NV 0x903C
+#endif
+
+#ifndef GL_NV_copy_image
+#endif
+
+#ifndef GL_EXT_separate_shader_objects
+#define GL_ACTIVE_PROGRAM_EXT             0x8B8D
+#endif
+
+#ifndef GL_NV_parameter_buffer_object2
+#endif
+
+#ifndef GL_NV_shader_buffer_load
+#define GL_BUFFER_GPU_ADDRESS_NV          0x8F1D
+#define GL_GPU_ADDRESS_NV                 0x8F34
+#define GL_MAX_SHADER_BUFFER_ADDRESS_NV   0x8F35
+#endif
+
+#ifndef GL_NV_vertex_buffer_unified_memory
+#define GL_VERTEX_ATTRIB_ARRAY_UNIFIED_NV 0x8F1E
+#define GL_ELEMENT_ARRAY_UNIFIED_NV       0x8F1F
+#define GL_VERTEX_ATTRIB_ARRAY_ADDRESS_NV 0x8F20
+#define GL_VERTEX_ARRAY_ADDRESS_NV        0x8F21
+#define GL_NORMAL_ARRAY_ADDRESS_NV        0x8F22
+#define GL_COLOR_ARRAY_ADDRESS_NV         0x8F23
+#define GL_INDEX_ARRAY_ADDRESS_NV         0x8F24
+#define GL_TEXTURE_COORD_ARRAY_ADDRESS_NV 0x8F25
+#define GL_EDGE_FLAG_ARRAY_ADDRESS_NV     0x8F26
+#define GL_SECONDARY_COLOR_ARRAY_ADDRESS_NV 0x8F27
+#define GL_FOG_COORD_ARRAY_ADDRESS_NV     0x8F28
+#define GL_ELEMENT_ARRAY_ADDRESS_NV       0x8F29
+#define GL_VERTEX_ATTRIB_ARRAY_LENGTH_NV  0x8F2A
+#define GL_VERTEX_ARRAY_LENGTH_NV         0x8F2B
+#define GL_NORMAL_ARRAY_LENGTH_NV         0x8F2C
+#define GL_COLOR_ARRAY_LENGTH_NV          0x8F2D
+#define GL_INDEX_ARRAY_LENGTH_NV          0x8F2E
+#define GL_TEXTURE_COORD_ARRAY_LENGTH_NV  0x8F2F
+#define GL_EDGE_FLAG_ARRAY_LENGTH_NV      0x8F30
+#define GL_SECONDARY_COLOR_ARRAY_LENGTH_NV 0x8F31
+#define GL_FOG_COORD_ARRAY_LENGTH_NV      0x8F32
+#define GL_ELEMENT_ARRAY_LENGTH_NV        0x8F33
+#define GL_DRAW_INDIRECT_UNIFIED_NV       0x8F40
+#define GL_DRAW_INDIRECT_ADDRESS_NV       0x8F41
+#define GL_DRAW_INDIRECT_LENGTH_NV        0x8F42
+#endif
+
+#ifndef GL_NV_texture_barrier
+#endif
+
+#ifndef GL_AMD_shader_stencil_export
+#endif
+
+#ifndef GL_AMD_seamless_cubemap_per_texture
+    /* reuse GL_TEXTURE_CUBE_MAP_SEAMLESS */
+#endif
+
+#ifndef GL_AMD_conservative_depth
+#endif
+
+#ifndef GL_EXT_shader_image_load_store
+#define GL_MAX_IMAGE_UNITS_EXT            0x8F38
+#define GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS_EXT 0x8F39
+#define GL_IMAGE_BINDING_NAME_EXT         0x8F3A
+#define GL_IMAGE_BINDING_LEVEL_EXT        0x8F3B
+#define GL_IMAGE_BINDING_LAYERED_EXT      0x8F3C
+#define GL_IMAGE_BINDING_LAYER_EXT        0x8F3D
+#define GL_IMAGE_BINDING_ACCESS_EXT       0x8F3E
+#define GL_IMAGE_1D_EXT                   0x904C
+#define GL_IMAGE_2D_EXT                   0x904D
+#define GL_IMAGE_3D_EXT                   0x904E
+#define GL_IMAGE_2D_RECT_EXT              0x904F
+#define GL_IMAGE_CUBE_EXT                 0x9050
+#define GL_IMAGE_BUFFER_EXT               0x9051
+#define GL_IMAGE_1D_ARRAY_EXT             0x9052
+#define GL_IMAGE_2D_ARRAY_EXT             0x9053
+#define GL_IMAGE_CUBE_MAP_ARRAY_EXT       0x9054
+#define GL_IMAGE_2D_MULTISAMPLE_EXT       0x9055
+#define GL_IMAGE_2D_MULTISAMPLE_ARRAY_EXT 0x9056
+#define GL_INT_IMAGE_1D_EXT               0x9057
+#define GL_INT_IMAGE_2D_EXT               0x9058
+#define GL_INT_IMAGE_3D_EXT               0x9059
+#define GL_INT_IMAGE_2D_RECT_EXT          0x905A
+#define GL_INT_IMAGE_CUBE_EXT             0x905B
+#define GL_INT_IMAGE_BUFFER_EXT           0x905C
+#define GL_INT_IMAGE_1D_ARRAY_EXT         0x905D
+#define GL_INT_IMAGE_2D_ARRAY_EXT         0x905E
+#define GL_INT_IMAGE_CUBE_MAP_ARRAY_EXT   0x905F
+#define GL_INT_IMAGE_2D_MULTISAMPLE_EXT   0x9060
+#define GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT 0x9061
+#define GL_UNSIGNED_INT_IMAGE_1D_EXT      0x9062
+#define GL_UNSIGNED_INT_IMAGE_2D_EXT      0x9063
+#define GL_UNSIGNED_INT_IMAGE_3D_EXT      0x9064
+#define GL_UNSIGNED_INT_IMAGE_2D_RECT_EXT 0x9065
+#define GL_UNSIGNED_INT_IMAGE_CUBE_EXT    0x9066
+#define GL_UNSIGNED_INT_IMAGE_BUFFER_EXT  0x9067
+#define GL_UNSIGNED_INT_IMAGE_1D_ARRAY_EXT 0x9068
+#define GL_UNSIGNED_INT_IMAGE_2D_ARRAY_EXT 0x9069
+#define GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY_EXT 0x906A
+#define GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_EXT 0x906B
+#define GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT 0x906C
+#define GL_MAX_IMAGE_SAMPLES_EXT          0x906D
+#define GL_IMAGE_BINDING_FORMAT_EXT       0x906E
+#define GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT_EXT 0x00000001
+#define GL_ELEMENT_ARRAY_BARRIER_BIT_EXT  0x00000002
+#define GL_UNIFORM_BARRIER_BIT_EXT        0x00000004
+#define GL_TEXTURE_FETCH_BARRIER_BIT_EXT  0x00000008
+#define GL_SHADER_IMAGE_ACCESS_BARRIER_BIT_EXT 0x00000020
+#define GL_COMMAND_BARRIER_BIT_EXT        0x00000040
+#define GL_PIXEL_BUFFER_BARRIER_BIT_EXT   0x00000080
+#define GL_TEXTURE_UPDATE_BARRIER_BIT_EXT 0x00000100
+#define GL_BUFFER_UPDATE_BARRIER_BIT_EXT  0x00000200
+#define GL_FRAMEBUFFER_BARRIER_BIT_EXT    0x00000400
+#define GL_TRANSFORM_FEEDBACK_BARRIER_BIT_EXT 0x00000800
+#define GL_ATOMIC_COUNTER_BARRIER_BIT_EXT 0x00001000
+#define GL_ALL_BARRIER_BITS_EXT           0xFFFFFFFF
+#endif
+
+#ifndef GL_EXT_vertex_attrib_64bit
+    /* reuse GL_DOUBLE */
+#define GL_DOUBLE_VEC2_EXT                0x8FFC
+#define GL_DOUBLE_VEC3_EXT                0x8FFD
+#define GL_DOUBLE_VEC4_EXT                0x8FFE
+#define GL_DOUBLE_MAT2_EXT                0x8F46
+#define GL_DOUBLE_MAT3_EXT                0x8F47
+#define GL_DOUBLE_MAT4_EXT                0x8F48
+#define GL_DOUBLE_MAT2x3_EXT              0x8F49
+#define GL_DOUBLE_MAT2x4_EXT              0x8F4A
+#define GL_DOUBLE_MAT3x2_EXT              0x8F4B
+#define GL_DOUBLE_MAT3x4_EXT              0x8F4C
+#define GL_DOUBLE_MAT4x2_EXT              0x8F4D
+#define GL_DOUBLE_MAT4x3_EXT              0x8F4E
+#endif
+
+#ifndef GL_NV_gpu_program5
+#define GL_MAX_GEOMETRY_PROGRAM_INVOCATIONS_NV 0x8E5A
+#define GL_MIN_FRAGMENT_INTERPOLATION_OFFSET_NV 0x8E5B
+#define GL_MAX_FRAGMENT_INTERPOLATION_OFFSET_NV 0x8E5C
+#define GL_FRAGMENT_PROGRAM_INTERPOLATION_OFFSET_BITS_NV 0x8E5D
+#define GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_NV 0x8E5E
+#define GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_NV 0x8E5F
+#define GL_MAX_PROGRAM_SUBROUTINE_PARAMETERS_NV 0x8F44
+#define GL_MAX_PROGRAM_SUBROUTINE_NUM_NV  0x8F45
+#endif
+
+#ifndef GL_NV_gpu_shader5
+#define GL_INT64_NV                       0x140E
+#define GL_UNSIGNED_INT64_NV              0x140F
+#define GL_INT8_NV                        0x8FE0
+#define GL_INT8_VEC2_NV                   0x8FE1
+#define GL_INT8_VEC3_NV                   0x8FE2
+#define GL_INT8_VEC4_NV                   0x8FE3
+#define GL_INT16_NV                       0x8FE4
+#define GL_INT16_VEC2_NV                  0x8FE5
+#define GL_INT16_VEC3_NV                  0x8FE6
+#define GL_INT16_VEC4_NV                  0x8FE7
+#define GL_INT64_VEC2_NV                  0x8FE9
+#define GL_INT64_VEC3_NV                  0x8FEA
+#define GL_INT64_VEC4_NV                  0x8FEB
+#define GL_UNSIGNED_INT8_NV               0x8FEC
+#define GL_UNSIGNED_INT8_VEC2_NV          0x8FED
+#define GL_UNSIGNED_INT8_VEC3_NV          0x8FEE
+#define GL_UNSIGNED_INT8_VEC4_NV          0x8FEF
+#define GL_UNSIGNED_INT16_NV              0x8FF0
+#define GL_UNSIGNED_INT16_VEC2_NV         0x8FF1
+#define GL_UNSIGNED_INT16_VEC3_NV         0x8FF2
+#define GL_UNSIGNED_INT16_VEC4_NV         0x8FF3
+#define GL_UNSIGNED_INT64_VEC2_NV         0x8FF5
+#define GL_UNSIGNED_INT64_VEC3_NV         0x8FF6
+#define GL_UNSIGNED_INT64_VEC4_NV         0x8FF7
+#define GL_FLOAT16_NV                     0x8FF8
+#define GL_FLOAT16_VEC2_NV                0x8FF9
+#define GL_FLOAT16_VEC3_NV                0x8FFA
+#define GL_FLOAT16_VEC4_NV                0x8FFB
+    /* reuse GL_PATCHES */
+#endif
+
+#ifndef GL_NV_shader_buffer_store
+#define GL_SHADER_GLOBAL_ACCESS_BARRIER_BIT_NV 0x00000010
+    /* reuse GL_READ_WRITE */
+    /* reuse GL_WRITE_ONLY */
+#endif
+
+#ifndef GL_NV_tessellation_program5
+#define GL_MAX_PROGRAM_PATCH_ATTRIBS_NV   0x86D8
+#define GL_TESS_CONTROL_PROGRAM_NV        0x891E
+#define GL_TESS_EVALUATION_PROGRAM_NV     0x891F
+#define GL_TESS_CONTROL_PROGRAM_PARAMETER_BUFFER_NV 0x8C74
+#define GL_TESS_EVALUATION_PROGRAM_PARAMETER_BUFFER_NV 0x8C75
+#endif
+
+#ifndef GL_NV_vertex_attrib_integer_64bit
+    /* reuse GL_INT64_NV */
+    /* reuse GL_UNSIGNED_INT64_NV */
+#endif
+
+#ifndef GL_NV_multisample_coverage
+#define GL_COVERAGE_SAMPLES_NV            0x80A9
+#define GL_COLOR_SAMPLES_NV               0x8E20
+#endif
+
+#ifndef GL_AMD_name_gen_delete
+#define GL_DATA_BUFFER_AMD                0x9151
+#define GL_PERFORMANCE_MONITOR_AMD        0x9152
+#define GL_QUERY_OBJECT_AMD               0x9153
+#define GL_VERTEX_ARRAY_OBJECT_AMD        0x9154
+#define GL_SAMPLER_OBJECT_AMD             0x9155
+#endif
+
+#ifndef GL_AMD_debug_output
+#define GL_MAX_DEBUG_LOGGED_MESSAGES_AMD  0x9144
+#define GL_DEBUG_LOGGED_MESSAGES_AMD      0x9145
+#define GL_DEBUG_SEVERITY_HIGH_AMD        0x9146
+#define GL_DEBUG_SEVERITY_MEDIUM_AMD      0x9147
+#define GL_DEBUG_SEVERITY_LOW_AMD         0x9148
+#define GL_DEBUG_CATEGORY_API_ERROR_AMD   0x9149
+#define GL_DEBUG_CATEGORY_WINDOW_SYSTEM_AMD 0x914A
+#define GL_DEBUG_CATEGORY_DEPRECATION_AMD 0x914B
+#define GL_DEBUG_CATEGORY_UNDEFINED_BEHAVIOR_AMD 0x914C
+#define GL_DEBUG_CATEGORY_PERFORMANCE_AMD 0x914D
+#define GL_DEBUG_CATEGORY_SHADER_COMPILER_AMD 0x914E
+#define GL_DEBUG_CATEGORY_APPLICATION_AMD 0x914F
+#define GL_DEBUG_CATEGORY_OTHER_AMD       0x9150
+#endif
+
+#ifndef GL_NV_vdpau_interop
+#define GL_SURFACE_STATE_NV               0x86EB
+#define GL_SURFACE_REGISTERED_NV          0x86FD
+#define GL_SURFACE_MAPPED_NV              0x8700
+#define GL_WRITE_DISCARD_NV               0x88BE
+#endif
+
+#ifndef GL_AMD_transform_feedback3_lines_triangles
+#endif
+
+#ifndef GL_AMD_depth_clamp_separate
+#define GL_DEPTH_CLAMP_NEAR_AMD           0x901E
+#define GL_DEPTH_CLAMP_FAR_AMD            0x901F
+#endif
+
+#ifndef GL_EXT_texture_sRGB_decode
+#define GL_TEXTURE_SRGB_DECODE_EXT        0x8A48
+#define GL_DECODE_EXT                     0x8A49
+#define GL_SKIP_DECODE_EXT                0x8A4A
+#endif
+
+#ifndef GL_NV_texture_multisample
+#define GL_TEXTURE_COVERAGE_SAMPLES_NV    0x9045
+#define GL_TEXTURE_COLOR_SAMPLES_NV       0x9046
+#endif
+
+#ifndef GL_AMD_blend_minmax_factor
+#define GL_FACTOR_MIN_AMD                 0x901C
+#define GL_FACTOR_MAX_AMD                 0x901D
+#endif
+
+#ifndef GL_AMD_sample_positions
+#define GL_SUBSAMPLE_DISTANCE_AMD         0x883F
+#endif
+
+#ifndef GL_EXT_x11_sync_object
+#define GL_SYNC_X11_FENCE_EXT             0x90E1
+#endif
+
+#ifndef GL_AMD_multi_draw_indirect
+#endif
+
+#ifndef GL_EXT_framebuffer_multisample_blit_scaled
+#define GL_SCALED_RESOLVE_FASTEST_EXT     0x90BA
+#define GL_SCALED_RESOLVE_NICEST_EXT      0x90BB
+#endif
+
+#ifndef GL_NV_path_rendering
+#define GL_PATH_FORMAT_SVG_NV             0x9070
+#define GL_PATH_FORMAT_PS_NV              0x9071
+#define GL_STANDARD_FONT_NAME_NV          0x9072
+#define GL_SYSTEM_FONT_NAME_NV            0x9073
+#define GL_FILE_NAME_NV                   0x9074
+#define GL_PATH_STROKE_WIDTH_NV           0x9075
+#define GL_PATH_END_CAPS_NV               0x9076
+#define GL_PATH_INITIAL_END_CAP_NV        0x9077
+#define GL_PATH_TERMINAL_END_CAP_NV       0x9078
+#define GL_PATH_JOIN_STYLE_NV             0x9079
+#define GL_PATH_MITER_LIMIT_NV            0x907A
+#define GL_PATH_DASH_CAPS_NV              0x907B
+#define GL_PATH_INITIAL_DASH_CAP_NV       0x907C
+#define GL_PATH_TERMINAL_DASH_CAP_NV      0x907D
+#define GL_PATH_DASH_OFFSET_NV            0x907E
+#define GL_PATH_CLIENT_LENGTH_NV          0x907F
+#define GL_PATH_FILL_MODE_NV              0x9080
+#define GL_PATH_FILL_MASK_NV              0x9081
+#define GL_PATH_FILL_COVER_MODE_NV        0x9082
+#define GL_PATH_STROKE_COVER_MODE_NV      0x9083
+#define GL_PATH_STROKE_MASK_NV            0x9084
+#define GL_PATH_SAMPLE_QUALITY_NV         0x9085
+#define GL_PATH_STROKE_BOUND_NV           0x9086
+#define GL_PATH_STROKE_OVERSAMPLE_COUNT_NV 0x9087
+#define GL_COUNT_UP_NV                    0x9088
+#define GL_COUNT_DOWN_NV                  0x9089
+#define GL_PATH_OBJECT_BOUNDING_BOX_NV    0x908A
+#define GL_CONVEX_HULL_NV                 0x908B
+#define GL_MULTI_HULLS_NV                 0x908C
+#define GL_BOUNDING_BOX_NV                0x908D
+#define GL_TRANSLATE_X_NV                 0x908E
+#define GL_TRANSLATE_Y_NV                 0x908F
+#define GL_TRANSLATE_2D_NV                0x9090
+#define GL_TRANSLATE_3D_NV                0x9091
+#define GL_AFFINE_2D_NV                   0x9092
+#define GL_PROJECTIVE_2D_NV               0x9093
+#define GL_AFFINE_3D_NV                   0x9094
+#define GL_PROJECTIVE_3D_NV               0x9095
+#define GL_TRANSPOSE_AFFINE_2D_NV         0x9096
+#define GL_TRANSPOSE_PROJECTIVE_2D_NV     0x9097
+#define GL_TRANSPOSE_AFFINE_3D_NV         0x9098
+#define GL_TRANSPOSE_PROJECTIVE_3D_NV     0x9099
+#define GL_UTF8_NV                        0x909A
+#define GL_UTF16_NV                       0x909B
+#define GL_BOUNDING_BOX_OF_BOUNDING_BOXES_NV 0x909C
+#define GL_PATH_COMMAND_COUNT_NV          0x909D
+#define GL_PATH_COORD_COUNT_NV            0x909E
+#define GL_PATH_DASH_ARRAY_COUNT_NV       0x909F
+#define GL_PATH_COMPUTED_LENGTH_NV        0x90A0
+#define GL_PATH_FILL_BOUNDING_BOX_NV      0x90A1
+#define GL_PATH_STROKE_BOUNDING_BOX_NV    0x90A2
+#define GL_SQUARE_NV                      0x90A3
+#define GL_ROUND_NV                       0x90A4
+#define GL_TRIANGULAR_NV                  0x90A5
+#define GL_BEVEL_NV                       0x90A6
+#define GL_MITER_REVERT_NV                0x90A7
+#define GL_MITER_TRUNCATE_NV              0x90A8
+#define GL_SKIP_MISSING_GLYPH_NV          0x90A9
+#define GL_USE_MISSING_GLYPH_NV           0x90AA
+#define GL_PATH_ERROR_POSITION_NV         0x90AB
+#define GL_PATH_FOG_GEN_MODE_NV           0x90AC
+#define GL_ACCUM_ADJACENT_PAIRS_NV        0x90AD
+#define GL_ADJACENT_PAIRS_NV              0x90AE
+#define GL_FIRST_TO_REST_NV               0x90AF
+#define GL_PATH_GEN_MODE_NV               0x90B0
+#define GL_PATH_GEN_COEFF_NV              0x90B1
+#define GL_PATH_GEN_COLOR_FORMAT_NV       0x90B2
+#define GL_PATH_GEN_COMPONENTS_NV         0x90B3
+#define GL_PATH_STENCIL_FUNC_NV           0x90B7
+#define GL_PATH_STENCIL_REF_NV            0x90B8
+#define GL_PATH_STENCIL_VALUE_MASK_NV     0x90B9
+#define GL_PATH_STENCIL_DEPTH_OFFSET_FACTOR_NV 0x90BD
+#define GL_PATH_STENCIL_DEPTH_OFFSET_UNITS_NV 0x90BE
+#define GL_PATH_COVER_DEPTH_FUNC_NV       0x90BF
+#define GL_PATH_DASH_OFFSET_RESET_NV      0x90B4
+#define GL_MOVE_TO_RESETS_NV              0x90B5
+#define GL_MOVE_TO_CONTINUES_NV           0x90B6
+#define GL_CLOSE_PATH_NV                  0x00
+#define GL_MOVE_TO_NV                     0x02
+#define GL_RELATIVE_MOVE_TO_NV            0x03
+#define GL_LINE_TO_NV                     0x04
+#define GL_RELATIVE_LINE_TO_NV            0x05
+#define GL_HORIZONTAL_LINE_TO_NV          0x06
+#define GL_RELATIVE_HORIZONTAL_LINE_TO_NV 0x07
+#define GL_VERTICAL_LINE_TO_NV            0x08
+#define GL_RELATIVE_VERTICAL_LINE_TO_NV   0x09
+#define GL_QUADRATIC_CURVE_TO_NV          0x0A
+#define GL_RELATIVE_QUADRATIC_CURVE_TO_NV 0x0B
+#define GL_CUBIC_CURVE_TO_NV              0x0C
+#define GL_RELATIVE_CUBIC_CURVE_TO_NV     0x0D
+#define GL_SMOOTH_QUADRATIC_CURVE_TO_NV   0x0E
+#define GL_RELATIVE_SMOOTH_QUADRATIC_CURVE_TO_NV 0x0F
+#define GL_SMOOTH_CUBIC_CURVE_TO_NV       0x10
+#define GL_RELATIVE_SMOOTH_CUBIC_CURVE_TO_NV 0x11
+#define GL_SMALL_CCW_ARC_TO_NV            0x12
+#define GL_RELATIVE_SMALL_CCW_ARC_TO_NV   0x13
+#define GL_SMALL_CW_ARC_TO_NV             0x14
+#define GL_RELATIVE_SMALL_CW_ARC_TO_NV    0x15
+#define GL_LARGE_CCW_ARC_TO_NV            0x16
+#define GL_RELATIVE_LARGE_CCW_ARC_TO_NV   0x17
+#define GL_LARGE_CW_ARC_TO_NV             0x18
+#define GL_RELATIVE_LARGE_CW_ARC_TO_NV    0x19
+#define GL_RESTART_PATH_NV                0xF0
+#define GL_DUP_FIRST_CUBIC_CURVE_TO_NV    0xF2
+#define GL_DUP_LAST_CUBIC_CURVE_TO_NV     0xF4
+#define GL_RECT_NV                        0xF6
+#define GL_CIRCULAR_CCW_ARC_TO_NV         0xF8
+#define GL_CIRCULAR_CW_ARC_TO_NV          0xFA
+#define GL_CIRCULAR_TANGENT_ARC_TO_NV     0xFC
+#define GL_ARC_TO_NV                      0xFE
+#define GL_RELATIVE_ARC_TO_NV             0xFF
+#define GL_BOLD_BIT_NV                    0x01
+#define GL_ITALIC_BIT_NV                  0x02
+#define GL_GLYPH_WIDTH_BIT_NV             0x01
+#define GL_GLYPH_HEIGHT_BIT_NV            0x02
+#define GL_GLYPH_HORIZONTAL_BEARING_X_BIT_NV 0x04
+#define GL_GLYPH_HORIZONTAL_BEARING_Y_BIT_NV 0x08
+#define GL_GLYPH_HORIZONTAL_BEARING_ADVANCE_BIT_NV 0x10
+#define GL_GLYPH_VERTICAL_BEARING_X_BIT_NV 0x20
+#define GL_GLYPH_VERTICAL_BEARING_Y_BIT_NV 0x40
+#define GL_GLYPH_VERTICAL_BEARING_ADVANCE_BIT_NV 0x80
+#define GL_GLYPH_HAS_KERNING_NV           0x100
+#define GL_FONT_X_MIN_BOUNDS_NV           0x00010000
+#define GL_FONT_Y_MIN_BOUNDS_NV           0x00020000
+#define GL_FONT_X_MAX_BOUNDS_NV           0x00040000
+#define GL_FONT_Y_MAX_BOUNDS_NV           0x00080000
+#define GL_FONT_UNITS_PER_EM_NV           0x00100000
+#define GL_FONT_ASCENDER_NV               0x00200000
+#define GL_FONT_DESCENDER_NV              0x00400000
+#define GL_FONT_HEIGHT_NV                 0x00800000
+#define GL_FONT_MAX_ADVANCE_WIDTH_NV      0x01000000
+#define GL_FONT_MAX_ADVANCE_HEIGHT_NV     0x02000000
+#define GL_FONT_UNDERLINE_POSITION_NV     0x04000000
+#define GL_FONT_UNDERLINE_THICKNESS_NV    0x08000000
+#define GL_FONT_HAS_KERNING_NV            0x10000000
+#endif
+
+#ifndef GL_AMD_pinned_memory
+#define GL_EXTERNAL_VIRTUAL_MEMORY_BUFFER_AMD 0x9160
+#endif
+
+#ifndef GL_AMD_stencil_operation_extended
+#define GL_SET_AMD                        0x874A
+#define GL_REPLACE_VALUE_AMD              0x874B
+#define GL_STENCIL_OP_VALUE_AMD           0x874C
+#define GL_STENCIL_BACK_OP_VALUE_AMD      0x874D
+#endif
+
+#ifndef GL_AMD_vertex_shader_viewport_index
+#endif
+
+#ifndef GL_AMD_vertex_shader_layer
+#endif
+
+#ifndef GL_NV_bindless_texture
+#endif
+
+#ifndef GL_NV_shader_atomic_float
+#endif
+
 
     /*************************************************************/
 
 #include <stddef.h>
+#ifndef GL_VERSION_2_0
+    /* GL type for program/shader text */
+    typedef char GLchar;
+#endif
+
 #ifndef GL_VERSION_1_5
     /* GL types for handling large vertex buffer objects */
     typedef ptrdiff_t GLintptr;
@@ -2788,61 +5503,118 @@
 #endif
 
 #ifndef GL_ARB_shader_objects
-    /* GL types for handling shader object handles and characters */
-    typedef char GLcharARB;		/* native character */
-    typedef unsigned int GLhandleARB;	/* shader object handle */
+    /* GL types for program/shader text and shader object handles */
+    typedef char GLcharARB;
+    typedef unsigned int GLhandleARB;
+#endif
+
+    /* GL type for "half" precision (s10e5) float data in host memory */
+#ifndef GL_ARB_half_float_pixel
+    typedef unsigned short GLhalfARB;
 #endif
 
 #ifndef GL_NV_half_float
-    /* GL type for representing NVIDIA "half" floating point type in host memory */
     typedef unsigned short GLhalfNV;
 #endif
 
+#ifndef GLEXT_64_TYPES_DEFINED
+    /* This code block is duplicated in glxext.h, so must be protected */
+#define GLEXT_64_TYPES_DEFINED
+    /* Define int32_t, int64_t, and uint64_t types for UST/MSC */
+    /* (as used in the GL_EXT_timer_query extension). */
+#if defined(_WIN32)
+    typedef __int32 int32_t;
+    typedef __int64 int64_t;
+    typedef unsigned __int64 uint64_t;
+#else
+    /* Fallback if nothing above works */
+#include <inttypes.h>
+#endif
+#endif
+
+#ifndef GL_EXT_timer_query
+    typedef int64_t GLint64EXT;
+    typedef uint64_t GLuint64EXT;
+#endif
+
+#ifndef GL_ARB_sync
+    typedef int64_t GLint64;
+    typedef uint64_t GLuint64;
+    typedef struct __GLsync *GLsync;
+#endif
+
+#ifndef GL_ARB_cl_event
+    /* These incomplete types let us declare types compatible with OpenCL's cl_context and cl_event */
+    struct _cl_context;
+    struct _cl_event;
+#endif
+
+#ifndef GL_ARB_debug_output
+    typedef void (APIENTRY *GLDEBUGPROCARB)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,const GLchar *message,GLvoid *userParam);
+#endif
+
+#ifndef GL_AMD_debug_output
+    typedef void (APIENTRY *GLDEBUGPROCAMD)(GLuint id,GLenum category,GLenum severity,GLsizei length,const GLchar *message,GLvoid *userParam);
+#endif
+
+#ifndef GL_NV_vdpau_interop
+    typedef GLintptr GLvdpauSurfaceNV;
+#endif
+
 #ifndef GL_VERSION_1_2
 #define GL_VERSION_1_2 1
 #ifdef GL_GLEXT_PROTOTYPES
-    GLAPI void APIENTRY glBlendColor(GLclampf, GLclampf, GLclampf, GLclampf);
-    GLAPI void APIENTRY glBlendEquation(GLenum);
-    GLAPI void APIENTRY glDrawRangeElements(GLenum, GLuint, GLuint, GLsizei, GLenum, const GLvoid *);
-    GLAPI void APIENTRY glColorTable(GLenum, GLenum, GLsizei, GLenum, GLenum, const GLvoid *);
-    GLAPI void APIENTRY glColorTableParameterfv(GLenum, GLenum, const GLfloat *);
-    GLAPI void APIENTRY glColorTableParameteriv(GLenum, GLenum, const GLint *);
-    GLAPI void APIENTRY glCopyColorTable(GLenum, GLenum, GLint, GLint, GLsizei);
-    GLAPI void APIENTRY glGetColorTable(GLenum, GLenum, GLenum, GLvoid *);
-    GLAPI void APIENTRY glGetColorTableParameterfv(GLenum, GLenum, GLfloat *);
-    GLAPI void APIENTRY glGetColorTableParameteriv(GLenum, GLenum, GLint *);
-    GLAPI void APIENTRY glColorSubTable(GLenum, GLsizei, GLsizei, GLenum, GLenum, const GLvoid *);
-    GLAPI void APIENTRY glCopyColorSubTable(GLenum, GLsizei, GLint, GLint, GLsizei);
-    GLAPI void APIENTRY glConvolutionFilter1D(GLenum, GLenum, GLsizei, GLenum, GLenum, const GLvoid *);
-    GLAPI void APIENTRY glConvolutionFilter2D(GLenum, GLenum, GLsizei, GLsizei, GLenum, GLenum, const GLvoid *);
-    GLAPI void APIENTRY glConvolutionParameterf(GLenum, GLenum, GLfloat);
-    GLAPI void APIENTRY glConvolutionParameterfv(GLenum, GLenum, const GLfloat *);
-    GLAPI void APIENTRY glConvolutionParameteri(GLenum, GLenum, GLint);
-    GLAPI void APIENTRY glConvolutionParameteriv(GLenum, GLenum, const GLint *);
-    GLAPI void APIENTRY glCopyConvolutionFilter1D(GLenum, GLenum, GLint, GLint, GLsizei);
-    GLAPI void APIENTRY glCopyConvolutionFilter2D(GLenum, GLenum, GLint, GLint, GLsizei, GLsizei);
-    GLAPI void APIENTRY glGetConvolutionFilter(GLenum, GLenum, GLenum, GLvoid *);
-    GLAPI void APIENTRY glGetConvolutionParameterfv(GLenum, GLenum, GLfloat *);
-    GLAPI void APIENTRY glGetConvolutionParameteriv(GLenum, GLenum, GLint *);
-    GLAPI void APIENTRY glGetSeparableFilter(GLenum, GLenum, GLenum, GLvoid *, GLvoid *, GLvoid *);
-    GLAPI void APIENTRY glSeparableFilter2D(GLenum, GLenum, GLsizei, GLsizei, GLenum, GLenum, const GLvoid *, const GLvoid *);
-    GLAPI void APIENTRY glGetHistogram(GLenum, GLboolean, GLenum, GLenum, GLvoid *);
-    GLAPI void APIENTRY glGetHistogramParameterfv(GLenum, GLenum, GLfloat *);
-    GLAPI void APIENTRY glGetHistogramParameteriv(GLenum, GLenum, GLint *);
-    GLAPI void APIENTRY glGetMinmax(GLenum, GLboolean, GLenum, GLenum, GLvoid *);
-    GLAPI void APIENTRY glGetMinmaxParameterfv(GLenum, GLenum, GLfloat *);
-    GLAPI void APIENTRY glGetMinmaxParameteriv(GLenum, GLenum, GLint *);
-    GLAPI void APIENTRY glHistogram(GLenum, GLsizei, GLenum, GLboolean);
-    GLAPI void APIENTRY glMinmax(GLenum, GLenum, GLboolean);
-    GLAPI void APIENTRY glResetHistogram(GLenum);
-    GLAPI void APIENTRY glResetMinmax(GLenum);
-    GLAPI void APIENTRY glTexImage3D(GLenum, GLint, GLint, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, const GLvoid *);
-    GLAPI void APIENTRY glTexSubImage3D(GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, const GLvoid *);
-    GLAPI void APIENTRY glCopyTexSubImage3D(GLenum, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei);
+    GLAPI void APIENTRY glBlendColor(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha);
+    GLAPI void APIENTRY glBlendEquation(GLenum mode);
+    GLAPI void APIENTRY glDrawRangeElements(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices);
+    GLAPI void APIENTRY glTexImage3D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
+    GLAPI void APIENTRY glTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels);
+    GLAPI void APIENTRY glCopyTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
 #endif /* GL_GLEXT_PROTOTYPES */
     typedef void (APIENTRYP PFNGLBLENDCOLORPROC)(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha);
     typedef void (APIENTRYP PFNGLBLENDEQUATIONPROC)(GLenum mode);
     typedef void (APIENTRYP PFNGLDRAWRANGEELEMENTSPROC)(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices);
+    typedef void (APIENTRYP PFNGLTEXIMAGE3DPROC)(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
+    typedef void (APIENTRYP PFNGLTEXSUBIMAGE3DPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels);
+    typedef void (APIENTRYP PFNGLCOPYTEXSUBIMAGE3DPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
+#endif
+
+#ifndef GL_VERSION_1_2_DEPRECATED
+#define GL_VERSION_1_2_DEPRECATED 1
+#ifdef GL_GLEXT_PROTOTYPES
+    GLAPI void APIENTRY glColorTable(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *table);
+    GLAPI void APIENTRY glColorTableParameterfv(GLenum target, GLenum pname, const GLfloat *params);
+    GLAPI void APIENTRY glColorTableParameteriv(GLenum target, GLenum pname, const GLint *params);
+    GLAPI void APIENTRY glCopyColorTable(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);
+    GLAPI void APIENTRY glGetColorTable(GLenum target, GLenum format, GLenum type, GLvoid *table);
+    GLAPI void APIENTRY glGetColorTableParameterfv(GLenum target, GLenum pname, GLfloat *params);
+    GLAPI void APIENTRY glGetColorTableParameteriv(GLenum target, GLenum pname, GLint *params);
+    GLAPI void APIENTRY glColorSubTable(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const GLvoid *data);
+    GLAPI void APIENTRY glCopyColorSubTable(GLenum target, GLsizei start, GLint x, GLint y, GLsizei width);
+    GLAPI void APIENTRY glConvolutionFilter1D(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *image);
+    GLAPI void APIENTRY glConvolutionFilter2D(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *image);
+    GLAPI void APIENTRY glConvolutionParameterf(GLenum target, GLenum pname, GLfloat params);
+    GLAPI void APIENTRY glConvolutionParameterfv(GLenum target, GLenum pname, const GLfloat *params);
+    GLAPI void APIENTRY glConvolutionParameteri(GLenum target, GLenum pname, GLint params);
+    GLAPI void APIENTRY glConvolutionParameteriv(GLenum target, GLenum pname, const GLint *params);
+    GLAPI void APIENTRY glCopyConvolutionFilter1D(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);
+    GLAPI void APIENTRY glCopyConvolutionFilter2D(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height);
+    GLAPI void APIENTRY glGetConvolutionFilter(GLenum target, GLenum format, GLenum type, GLvoid *image);
+    GLAPI void APIENTRY glGetConvolutionParameterfv(GLenum target, GLenum pname, GLfloat *params);
+    GLAPI void APIENTRY glGetConvolutionParameteriv(GLenum target, GLenum pname, GLint *params);
+    GLAPI void APIENTRY glGetSeparableFilter(GLenum target, GLenum format, GLenum type, GLvoid *row, GLvoid *column, GLvoid *span);
+    GLAPI void APIENTRY glSeparableFilter2D(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *row, const GLvoid *column);
+    GLAPI void APIENTRY glGetHistogram(GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *values);
+    GLAPI void APIENTRY glGetHistogramParameterfv(GLenum target, GLenum pname, GLfloat *params);
+    GLAPI void APIENTRY glGetHistogramParameteriv(GLenum target, GLenum pname, GLint *params);
+    GLAPI void APIENTRY glGetMinmax(GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *values);
+    GLAPI void APIENTRY glGetMinmaxParameterfv(GLenum target, GLenum pname, GLfloat *params);
+    GLAPI void APIENTRY glGetMinmaxParameteriv(GLenum target, GLenum pname, GLint *params);
+    GLAPI void APIENTRY glHistogram(GLenum target, GLsizei width, GLenum internalformat, GLboolean sink);
+    GLAPI void APIENTRY glMinmax(GLenum target, GLenum internalformat, GLboolean sink);
+    GLAPI void APIENTRY glResetHistogram(GLenum target);
+    GLAPI void APIENTRY glResetMinmax(GLenum target);
+#endif /* GL_GLEXT_PROTOTYPES */
     typedef void (APIENTRYP PFNGLCOLORTABLEPROC)(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *table);
     typedef void (APIENTRYP PFNGLCOLORTABLEPARAMETERFVPROC)(GLenum target, GLenum pname, const GLfloat *params);
     typedef void (APIENTRYP PFNGLCOLORTABLEPARAMETERIVPROC)(GLenum target, GLenum pname, const GLint *params);
@@ -2875,62 +5647,73 @@
     typedef void (APIENTRYP PFNGLMINMAXPROC)(GLenum target, GLenum internalformat, GLboolean sink);
     typedef void (APIENTRYP PFNGLRESETHISTOGRAMPROC)(GLenum target);
     typedef void (APIENTRYP PFNGLRESETMINMAXPROC)(GLenum target);
-    typedef void (APIENTRYP PFNGLTEXIMAGE3DPROC)(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
-    typedef void (APIENTRYP PFNGLTEXSUBIMAGE3DPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels);
-    typedef void (APIENTRYP PFNGLCOPYTEXSUBIMAGE3DPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
 #endif
 
 #ifndef GL_VERSION_1_3
 #define GL_VERSION_1_3 1
 #ifdef GL_GLEXT_PROTOTYPES
-    GLAPI void APIENTRY glActiveTexture(GLenum);
-    GLAPI void APIENTRY glClientActiveTexture(GLenum);
-    GLAPI void APIENTRY glMultiTexCoord1d(GLenum, GLdouble);
-    GLAPI void APIENTRY glMultiTexCoord1dv(GLenum, const GLdouble *);
-    GLAPI void APIENTRY glMultiTexCoord1f(GLenum, GLfloat);
-    GLAPI void APIENTRY glMultiTexCoord1fv(GLenum, const GLfloat *);
-    GLAPI void APIENTRY glMultiTexCoord1i(GLenum, GLint);
-    GLAPI void APIENTRY glMultiTexCoord1iv(GLenum, const GLint *);
-    GLAPI void APIENTRY glMultiTexCoord1s(GLenum, GLshort);
-    GLAPI void APIENTRY glMultiTexCoord1sv(GLenum, const GLshort *);
-    GLAPI void APIENTRY glMultiTexCoord2d(GLenum, GLdouble, GLdouble);
-    GLAPI void APIENTRY glMultiTexCoord2dv(GLenum, const GLdouble *);
-    GLAPI void APIENTRY glMultiTexCoord2f(GLenum, GLfloat, GLfloat);
-    GLAPI void APIENTRY glMultiTexCoord2fv(GLenum, const GLfloat *);
-    GLAPI void APIENTRY glMultiTexCoord2i(GLenum, GLint, GLint);
-    GLAPI void APIENTRY glMultiTexCoord2iv(GLenum, const GLint *);
-    GLAPI void APIENTRY glMultiTexCoord2s(GLenum, GLshort, GLshort);
-    GLAPI void APIENTRY glMultiTexCoord2sv(GLenum, const GLshort *);
-    GLAPI void APIENTRY glMultiTexCoord3d(GLenum, GLdouble, GLdouble, GLdouble);
-    GLAPI void APIENTRY glMultiTexCoord3dv(GLenum, const GLdouble *);
-    GLAPI void APIENTRY glMultiTexCoord3f(GLenum, GLfloat, GLfloat, GLfloat);
-    GLAPI void APIENTRY glMultiTexCoord3fv(GLenum, const GLfloat *);
-    GLAPI void APIENTRY glMultiTexCoord3i(GLenum, GLint, GLint, GLint);
-    GLAPI void APIENTRY glMultiTexCoord3iv(GLenum, const GLint *);
-    GLAPI void APIENTRY glMultiTexCoord3s(GLenum, GLshort, GLshort, GLshort);
-    GLAPI void APIENTRY glMultiTexCoord3sv(GLenum, const GLshort *);
-    GLAPI void APIENTRY glMultiTexCoord4d(GLenum, GLdouble, GLdouble, GLdouble, GLdouble);
-    GLAPI void APIENTRY glMultiTexCoord4dv(GLenum, const GLdouble *);
-    GLAPI void APIENTRY glMultiTexCoord4f(GLenum, GLfloat, GLfloat, GLfloat, GLfloat);
-    GLAPI void APIENTRY glMultiTexCoord4fv(GLenum, const GLfloat *);
-    GLAPI void APIENTRY glMultiTexCoord4i(GLenum, GLint, GLint, GLint, GLint);
-    GLAPI void APIENTRY glMultiTexCoord4iv(GLenum, const GLint *);
-    GLAPI void APIENTRY glMultiTexCoord4s(GLenum, GLshort, GLshort, GLshort, GLshort);
-    GLAPI void APIENTRY glMultiTexCoord4sv(GLenum, const GLshort *);
-    GLAPI void APIENTRY glLoadTransposeMatrixf(const GLfloat *);
-    GLAPI void APIENTRY glLoadTransposeMatrixd(const GLdouble *);
-    GLAPI void APIENTRY glMultTransposeMatrixf(const GLfloat *);
-    GLAPI void APIENTRY glMultTransposeMatrixd(const GLdouble *);
-    GLAPI void APIENTRY glSampleCoverage(GLclampf, GLboolean);
-    GLAPI void APIENTRY glCompressedTexImage3D(GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLsizei, const GLvoid *);
-    GLAPI void APIENTRY glCompressedTexImage2D(GLenum, GLint, GLenum, GLsizei, GLsizei, GLint, GLsizei, const GLvoid *);
-    GLAPI void APIENTRY glCompressedTexImage1D(GLenum, GLint, GLenum, GLsizei, GLint, GLsizei, const GLvoid *);
-    GLAPI void APIENTRY glCompressedTexSubImage3D(GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, const GLvoid *);
-    GLAPI void APIENTRY glCompressedTexSubImage2D(GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLsizei, const GLvoid *);
-    GLAPI void APIENTRY glCompressedTexSubImage1D(GLenum, GLint, GLint, GLsizei, GLenum, GLsizei, const GLvoid *);
-    GLAPI void APIENTRY glGetCompressedTexImage(GLenum, GLint, GLvoid *);
+    GLAPI void APIENTRY glActiveTexture(GLenum texture);
+    GLAPI void APIENTRY glSampleCoverage(GLclampf value, GLboolean invert);
+    GLAPI void APIENTRY glCompressedTexImage3D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *data);
+    GLAPI void APIENTRY glCompressedTexImage2D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *data);
+    GLAPI void APIENTRY glCompressedTexImage1D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *data);
+    GLAPI void APIENTRY glCompressedTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *data);
+    GLAPI void APIENTRY glCompressedTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *data);
+    GLAPI void APIENTRY glCompressedTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *data);
+    GLAPI void APIENTRY glGetCompressedTexImage(GLenum target, GLint level, GLvoid *img);
 #endif /* GL_GLEXT_PROTOTYPES */
     typedef void (APIENTRYP PFNGLACTIVETEXTUREPROC)(GLenum texture);
+    typedef void (APIENTRYP PFNGLSAMPLECOVERAGEPROC)(GLclampf value, GLboolean invert);
+    typedef void (APIENTRYP PFNGLCOMPRESSEDTEXIMAGE3DPROC)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *data);
+    typedef void (APIENTRYP PFNGLCOMPRESSEDTEXIMAGE2DPROC)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *data);
+    typedef void (APIENTRYP PFNGLCOMPRESSEDTEXIMAGE1DPROC)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *data);
+    typedef void (APIENTRYP PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *data);
+    typedef void (APIENTRYP PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *data);
+    typedef void (APIENTRYP PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC)(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *data);
+    typedef void (APIENTRYP PFNGLGETCOMPRESSEDTEXIMAGEPROC)(GLenum target, GLint level, GLvoid *img);
+#endif
+
+#ifndef GL_VERSION_1_3_DEPRECATED
+#define GL_VERSION_1_3_DEPRECATED 1
+#ifdef GL_GLEXT_PROTOTYPES
+    GLAPI void APIENTRY glClientActiveTexture(GLenum texture);
+    GLAPI void APIENTRY glMultiTexCoord1d(GLenum target, GLdouble s);
+    GLAPI void APIENTRY glMultiTexCoord1dv(GLenum target, const GLdouble *v);
+    GLAPI void APIENTRY glMultiTexCoord1f(GLenum target, GLfloat s);
+    GLAPI void APIENTRY glMultiTexCoord1fv(GLenum target, const GLfloat *v);
+    GLAPI void APIENTRY glMultiTexCoord1i(GLenum target, GLint s);
+    GLAPI void APIENTRY glMultiTexCoord1iv(GLenum target, const GLint *v);
+    GLAPI void APIENTRY glMultiTexCoord1s(GLenum target, GLshort s);
+    GLAPI void APIENTRY glMultiTexCoord1sv(GLenum target, const GLshort *v);
+    GLAPI void APIENTRY glMultiTexCoord2d(GLenum target, GLdouble s, GLdouble t);
+    GLAPI void APIENTRY glMultiTexCoord2dv(GLenum target, const GLdouble *v);
+    GLAPI void APIENTRY glMultiTexCoord2f(GLenum target, GLfloat s, GLfloat t);
+    GLAPI void APIENTRY glMultiTexCoord2fv(GLenum target, const GLfloat *v);
+    GLAPI void APIENTRY glMultiTexCoord2i(GLenum target, GLint s, GLint t);
+    GLAPI void APIENTRY glMultiTexCoord2iv(GLenum target, const GLint *v);
+    GLAPI void APIENTRY glMultiTexCoord2s(GLenum target, GLshort s, GLshort t);
+    GLAPI void APIENTRY glMultiTexCoord2sv(GLenum target, const GLshort *v);
+    GLAPI void APIENTRY glMultiTexCoord3d(GLenum target, GLdouble s, GLdouble t, GLdouble r);
+    GLAPI void APIENTRY glMultiTexCoord3dv(GLenum target, const GLdouble *v);
+    GLAPI void APIENTRY glMultiTexCoord3f(GLenum target, GLfloat s, GLfloat t, GLfloat r);
+    GLAPI void APIENTRY glMultiTexCoord3fv(GLenum target, const GLfloat *v);
+    GLAPI void APIENTRY glMultiTexCoord3i(GLenum target, GLint s, GLint t, GLint r);
+    GLAPI void APIENTRY glMultiTexCoord3iv(GLenum target, const GLint *v);
+    GLAPI void APIENTRY glMultiTexCoord3s(GLenum target, GLshort s, GLshort t, GLshort r);
+    GLAPI void APIENTRY glMultiTexCoord3sv(GLenum target, const GLshort *v);
+    GLAPI void APIENTRY glMultiTexCoord4d(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q);
+    GLAPI void APIENTRY glMultiTexCoord4dv(GLenum target, const GLdouble *v);
+    GLAPI void APIENTRY glMultiTexCoord4f(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q);
+    GLAPI void APIENTRY glMultiTexCoord4fv(GLenum target, const GLfloat *v);
+    GLAPI void APIENTRY glMultiTexCoord4i(GLenum target, GLint s, GLint t, GLint r, GLint q);
+    GLAPI void APIENTRY glMultiTexCoord4iv(GLenum target, const GLint *v);
+    GLAPI void APIENTRY glMultiTexCoord4s(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q);
+    GLAPI void APIENTRY glMultiTexCoord4sv(GLenum target, const GLshort *v);
+    GLAPI void APIENTRY glLoadTransposeMatrixf(const GLfloat *m);
+    GLAPI void APIENTRY glLoadTransposeMatrixd(const GLdouble *m);
+    GLAPI void APIENTRY glMultTransposeMatrixf(const GLfloat *m);
+    GLAPI void APIENTRY glMultTransposeMatrixd(const GLdouble *m);
+#endif /* GL_GLEXT_PROTOTYPES */
     typedef void (APIENTRYP PFNGLCLIENTACTIVETEXTUREPROC)(GLenum texture);
     typedef void (APIENTRYP PFNGLMULTITEXCOORD1DPROC)(GLenum target, GLdouble s);
     typedef void (APIENTRYP PFNGLMULTITEXCOORD1DVPROC)(GLenum target, const GLdouble *v);
@@ -2968,77 +5751,75 @@
     typedef void (APIENTRYP PFNGLLOADTRANSPOSEMATRIXDPROC)(const GLdouble *m);
     typedef void (APIENTRYP PFNGLMULTTRANSPOSEMATRIXFPROC)(const GLfloat *m);
     typedef void (APIENTRYP PFNGLMULTTRANSPOSEMATRIXDPROC)(const GLdouble *m);
-    typedef void (APIENTRYP PFNGLSAMPLECOVERAGEPROC)(GLclampf value, GLboolean invert);
-    typedef void (APIENTRYP PFNGLCOMPRESSEDTEXIMAGE3DPROC)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *data);
-    typedef void (APIENTRYP PFNGLCOMPRESSEDTEXIMAGE2DPROC)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *data);
-    typedef void (APIENTRYP PFNGLCOMPRESSEDTEXIMAGE1DPROC)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *data);
-    typedef void (APIENTRYP PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *data);
-    typedef void (APIENTRYP PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *data);
-    typedef void (APIENTRYP PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC)(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *data);
-    typedef void (APIENTRYP PFNGLGETCOMPRESSEDTEXIMAGEPROC)(GLenum target, GLint level, GLvoid *img);
 #endif
 
 #ifndef GL_VERSION_1_4
 #define GL_VERSION_1_4 1
 #ifdef GL_GLEXT_PROTOTYPES
-    GLAPI void APIENTRY glBlendFuncSeparate(GLenum, GLenum, GLenum, GLenum);
-    GLAPI void APIENTRY glFogCoordf(GLfloat);
-    GLAPI void APIENTRY glFogCoordfv(const GLfloat *);
-    GLAPI void APIENTRY glFogCoordd(GLdouble);
-    GLAPI void APIENTRY glFogCoorddv(const GLdouble *);
-    GLAPI void APIENTRY glFogCoordPointer(GLenum, GLsizei, const GLvoid *);
-    GLAPI void APIENTRY glMultiDrawArrays(GLenum, GLint *, GLsizei *, GLsizei);
-    GLAPI void APIENTRY glMultiDrawElements(GLenum, const GLsizei *, GLenum, const GLvoid* *, GLsizei);
-    GLAPI void APIENTRY glPointParameterf(GLenum, GLfloat);
-    GLAPI void APIENTRY glPointParameterfv(GLenum, const GLfloat *);
-    GLAPI void APIENTRY glPointParameteri(GLenum, GLint);
-    GLAPI void APIENTRY glPointParameteriv(GLenum, const GLint *);
-    GLAPI void APIENTRY glSecondaryColor3b(GLbyte, GLbyte, GLbyte);
-    GLAPI void APIENTRY glSecondaryColor3bv(const GLbyte *);
-    GLAPI void APIENTRY glSecondaryColor3d(GLdouble, GLdouble, GLdouble);
-    GLAPI void APIENTRY glSecondaryColor3dv(const GLdouble *);
-    GLAPI void APIENTRY glSecondaryColor3f(GLfloat, GLfloat, GLfloat);
-    GLAPI void APIENTRY glSecondaryColor3fv(const GLfloat *);
-    GLAPI void APIENTRY glSecondaryColor3i(GLint, GLint, GLint);
-    GLAPI void APIENTRY glSecondaryColor3iv(const GLint *);
-    GLAPI void APIENTRY glSecondaryColor3s(GLshort, GLshort, GLshort);
-    GLAPI void APIENTRY glSecondaryColor3sv(const GLshort *);
-    GLAPI void APIENTRY glSecondaryColor3ub(GLubyte, GLubyte, GLubyte);
-    GLAPI void APIENTRY glSecondaryColor3ubv(const GLubyte *);
-    GLAPI void APIENTRY glSecondaryColor3ui(GLuint, GLuint, GLuint);
-    GLAPI void APIENTRY glSecondaryColor3uiv(const GLuint *);
-    GLAPI void APIENTRY glSecondaryColor3us(GLushort, GLushort, GLushort);
-    GLAPI void APIENTRY glSecondaryColor3usv(const GLushort *);
-    GLAPI void APIENTRY glSecondaryColorPointer(GLint, GLenum, GLsizei, const GLvoid *);
-    GLAPI void APIENTRY glWindowPos2d(GLdouble, GLdouble);
-    GLAPI void APIENTRY glWindowPos2dv(const GLdouble *);
-    GLAPI void APIENTRY glWindowPos2f(GLfloat, GLfloat);
-    GLAPI void APIENTRY glWindowPos2fv(const GLfloat *);
-    GLAPI void APIENTRY glWindowPos2i(GLint, GLint);
-    GLAPI void APIENTRY glWindowPos2iv(const GLint *);
-    GLAPI void APIENTRY glWindowPos2s(GLshort, GLshort);
-    GLAPI void APIENTRY glWindowPos2sv(const GLshort *);
-    GLAPI void APIENTRY glWindowPos3d(GLdouble, GLdouble, GLdouble);
-    GLAPI void APIENTRY glWindowPos3dv(const GLdouble *);
-    GLAPI void APIENTRY glWindowPos3f(GLfloat, GLfloat, GLfloat);
-    GLAPI void APIENTRY glWindowPos3fv(const GLfloat *);
-    GLAPI void APIENTRY glWindowPos3i(GLint, GLint, GLint);
-    GLAPI void APIENTRY glWindowPos3iv(const GLint *);
-    GLAPI void APIENTRY glWindowPos3s(GLshort, GLshort, GLshort);
-    GLAPI void APIENTRY glWindowPos3sv(const GLshort *);
+    GLAPI void APIENTRY glBlendFuncSeparate(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
+    GLAPI void APIENTRY glMultiDrawArrays(GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount);
+    GLAPI void APIENTRY glMultiDrawElements(GLenum mode, const GLsizei *count, GLenum type, const GLvoid* *indices, GLsizei primcount);
+    GLAPI void APIENTRY glPointParameterf(GLenum pname, GLfloat param);
+    GLAPI void APIENTRY glPointParameterfv(GLenum pname, const GLfloat *params);
+    GLAPI void APIENTRY glPointParameteri(GLenum pname, GLint param);
+    GLAPI void APIENTRY glPointParameteriv(GLenum pname, const GLint *params);
 #endif /* GL_GLEXT_PROTOTYPES */
     typedef void (APIENTRYP PFNGLBLENDFUNCSEPARATEPROC)(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
-    typedef void (APIENTRYP PFNGLFOGCOORDFPROC)(GLfloat coord);
-    typedef void (APIENTRYP PFNGLFOGCOORDFVPROC)(const GLfloat *coord);
-    typedef void (APIENTRYP PFNGLFOGCOORDDPROC)(GLdouble coord);
-    typedef void (APIENTRYP PFNGLFOGCOORDDVPROC)(const GLdouble *coord);
-    typedef void (APIENTRYP PFNGLFOGCOORDPOINTERPROC)(GLenum type, GLsizei stride, const GLvoid *pointer);
-    typedef void (APIENTRYP PFNGLMULTIDRAWARRAYSPROC)(GLenum mode, GLint *first, GLsizei *count, GLsizei primcount);
+    typedef void (APIENTRYP PFNGLMULTIDRAWARRAYSPROC)(GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount);
     typedef void (APIENTRYP PFNGLMULTIDRAWELEMENTSPROC)(GLenum mode, const GLsizei *count, GLenum type, const GLvoid* *indices, GLsizei primcount);
     typedef void (APIENTRYP PFNGLPOINTPARAMETERFPROC)(GLenum pname, GLfloat param);
     typedef void (APIENTRYP PFNGLPOINTPARAMETERFVPROC)(GLenum pname, const GLfloat *params);
     typedef void (APIENTRYP PFNGLPOINTPARAMETERIPROC)(GLenum pname, GLint param);
     typedef void (APIENTRYP PFNGLPOINTPARAMETERIVPROC)(GLenum pname, const GLint *params);
+#endif
+
+#ifndef GL_VERSION_1_4_DEPRECATED
+#define GL_VERSION_1_4_DEPRECATED 1
+#ifdef GL_GLEXT_PROTOTYPES
+    GLAPI void APIENTRY glFogCoordf(GLfloat coord);
+    GLAPI void APIENTRY glFogCoordfv(const GLfloat *coord);
+    GLAPI void APIENTRY glFogCoordd(GLdouble coord);
+    GLAPI void APIENTRY glFogCoorddv(const GLdouble *coord);
+    GLAPI void APIENTRY glFogCoordPointer(GLenum type, GLsizei stride, const GLvoid *pointer);
+    GLAPI void APIENTRY glSecondaryColor3b(GLbyte red, GLbyte green, GLbyte blue);
+    GLAPI void APIENTRY glSecondaryColor3bv(const GLbyte *v);
+    GLAPI void APIENTRY glSecondaryColor3d(GLdouble red, GLdouble green, GLdouble blue);
+    GLAPI void APIENTRY glSecondaryColor3dv(const GLdouble *v);
+    GLAPI void APIENTRY glSecondaryColor3f(GLfloat red, GLfloat green, GLfloat blue);
+    GLAPI void APIENTRY glSecondaryColor3fv(const GLfloat *v);
+    GLAPI void APIENTRY glSecondaryColor3i(GLint red, GLint green, GLint blue);
+    GLAPI void APIENTRY glSecondaryColor3iv(const GLint *v);
+    GLAPI void APIENTRY glSecondaryColor3s(GLshort red, GLshort green, GLshort blue);
+    GLAPI void APIENTRY glSecondaryColor3sv(const GLshort *v);
+    GLAPI void APIENTRY glSecondaryColor3ub(GLubyte red, GLubyte green, GLubyte blue);
+    GLAPI void APIENTRY glSecondaryColor3ubv(const GLubyte *v);
+    GLAPI void APIENTRY glSecondaryColor3ui(GLuint red, GLuint green, GLuint blue);
+    GLAPI void APIENTRY glSecondaryColor3uiv(const GLuint *v);
+    GLAPI void APIENTRY glSecondaryColor3us(GLushort red, GLushort green, GLushort blue);
+    GLAPI void APIENTRY glSecondaryColor3usv(const GLushort *v);
+    GLAPI void APIENTRY glSecondaryColorPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
+    GLAPI void APIENTRY glWindowPos2d(GLdouble x, GLdouble y);
+    GLAPI void APIENTRY glWindowPos2dv(const GLdouble *v);
+    GLAPI void APIENTRY glWindowPos2f(GLfloat x, GLfloat y);
+    GLAPI void APIENTRY glWindowPos2fv(const GLfloat *v);
+    GLAPI void APIENTRY glWindowPos2i(GLint x, GLint y);
+    GLAPI void APIENTRY glWindowPos2iv(const GLint *v);
+    GLAPI void APIENTRY glWindowPos2s(GLshort x, GLshort y);
+    GLAPI void APIENTRY glWindowPos2sv(const GLshort *v);
+    GLAPI void APIENTRY glWindowPos3d(GLdouble x, GLdouble y, GLdouble z);
+    GLAPI void APIENTRY glWindowPos3dv(const GLdouble *v);
+    GLAPI void APIENTRY glWindowPos3f(GLfloat x, GLfloat y, GLfloat z);
+    GLAPI void APIENTRY glWindowPos3fv(const GLfloat *v);
+    GLAPI void APIENTRY glWindowPos3i(GLint x, GLint y, GLint z);
+    GLAPI void APIENTRY glWindowPos3iv(const GLint *v);
+    GLAPI void APIENTRY glWindowPos3s(GLshort x, GLshort y, GLshort z);
+    GLAPI void APIENTRY glWindowPos3sv(const GLshort *v);
+#endif /* GL_GLEXT_PROTOTYPES */
+    typedef void (APIENTRYP PFNGLFOGCOORDFPROC)(GLfloat coord);
+    typedef void (APIENTRYP PFNGLFOGCOORDFVPROC)(const GLfloat *coord);
+    typedef void (APIENTRYP PFNGLFOGCOORDDPROC)(GLdouble coord);
+    typedef void (APIENTRYP PFNGLFOGCOORDDVPROC)(const GLdouble *coord);
+    typedef void (APIENTRYP PFNGLFOGCOORDPOINTERPROC)(GLenum type, GLsizei stride, const GLvoid *pointer);
     typedef void (APIENTRYP PFNGLSECONDARYCOLOR3BPROC)(GLbyte red, GLbyte green, GLbyte blue);
     typedef void (APIENTRYP PFNGLSECONDARYCOLOR3BVPROC)(const GLbyte *v);
     typedef void (APIENTRYP PFNGLSECONDARYCOLOR3DPROC)(GLdouble red, GLdouble green, GLdouble blue);
@@ -3077,25 +5858,25 @@
 #ifndef GL_VERSION_1_5
 #define GL_VERSION_1_5 1
 #ifdef GL_GLEXT_PROTOTYPES
-    GLAPI void APIENTRY glGenQueries(GLsizei, GLuint *);
-    GLAPI void APIENTRY glDeleteQueries(GLsizei, const GLuint *);
-    GLAPI GLboolean APIENTRY glIsQuery(GLuint);
-    GLAPI void APIENTRY glBeginQuery(GLenum, GLuint);
-    GLAPI void APIENTRY glEndQuery(GLenum);
-    GLAPI void APIENTRY glGetQueryiv(GLenum, GLenum, GLint *);
-    GLAPI void APIENTRY glGetQueryObjectiv(GLuint, GLenum, GLint *);
-    GLAPI void APIENTRY glGetQueryObjectuiv(GLuint, GLenum, GLuint *);
-    GLAPI void APIENTRY glBindBuffer(GLenum, GLuint);
-    GLAPI void APIENTRY glDeleteBuffers(GLsizei, const GLuint *);
-    GLAPI void APIENTRY glGenBuffers(GLsizei, GLuint *);
-    GLAPI GLboolean APIENTRY glIsBuffer(GLuint);
-    GLAPI void APIENTRY glBufferData(GLenum, GLsizeiptr, const GLvoid *, GLenum);
-    GLAPI void APIENTRY glBufferSubData(GLenum, GLintptr, GLsizeiptr, const GLvoid *);
-    GLAPI void APIENTRY glGetBufferSubData(GLenum, GLintptr, GLsizeiptr, GLvoid *);
-    GLAPI GLvoid* APIENTRY glMapBuffer(GLenum, GLenum);
-    GLAPI GLboolean APIENTRY glUnmapBuffer(GLenum);
-    GLAPI void APIENTRY glGetBufferParameteriv(GLenum, GLenum, GLint *);
-    GLAPI void APIENTRY glGetBufferPointerv(GLenum, GLenum, GLvoid* *);
+    GLAPI void APIENTRY glGenQueries(GLsizei n, GLuint *ids);
+    GLAPI void APIENTRY glDeleteQueries(GLsizei n, const GLuint *ids);
+    GLAPI GLboolean APIENTRY glIsQuery(GLuint id);
+    GLAPI void APIENTRY glBeginQuery(GLenum target, GLuint id);
+    GLAPI void APIENTRY glEndQuery(GLenum target);
+    GLAPI void APIENTRY glGetQueryiv(GLenum target, GLenum pname, GLint *params);
+    GLAPI void APIENTRY glGetQueryObjectiv(GLuint id, GLenum pname, GLint *params);
+    GLAPI void APIENTRY glGetQueryObjectuiv(GLuint id, GLenum pname, GLuint *params);
+    GLAPI void APIENTRY glBindBuffer(GLenum target, GLuint buffer);
+    GLAPI void APIENTRY glDeleteBuffers(GLsizei n, const GLuint *buffers);
+    GLAPI void APIENTRY glGenBuffers(GLsizei n, GLuint *buffers);
+    GLAPI GLboolean APIENTRY glIsBuffer(GLuint buffer);
+    GLAPI void APIENTRY glBufferData(GLenum target, GLsizeiptr size, const GLvoid *data, GLenum usage);
+    GLAPI void APIENTRY glBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, const GLvoid *data);
+    GLAPI void APIENTRY glGetBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, GLvoid *data);
+    GLAPI GLvoid* APIENTRY glMapBuffer(GLenum target, GLenum access);
+    GLAPI GLboolean APIENTRY glUnmapBuffer(GLenum target);
+    GLAPI void APIENTRY glGetBufferParameteriv(GLenum target, GLenum pname, GLint *params);
+    GLAPI void APIENTRY glGetBufferPointerv(GLenum target, GLenum pname, GLvoid* *params);
 #endif /* GL_GLEXT_PROTOTYPES */
     typedef void (APIENTRYP PFNGLGENQUERIESPROC)(GLsizei n, GLuint *ids);
     typedef void (APIENTRYP PFNGLDELETEQUERIESPROC)(GLsizei n, const GLuint *ids);
@@ -3118,43 +5899,486 @@
     typedef void (APIENTRYP PFNGLGETBUFFERPOINTERVPROC)(GLenum target, GLenum pname, GLvoid* *params);
 #endif
 
+#ifndef GL_VERSION_2_0
+#define GL_VERSION_2_0 1
+#ifdef GL_GLEXT_PROTOTYPES
+    GLAPI void APIENTRY glBlendEquationSeparate(GLenum modeRGB, GLenum modeAlpha);
+    GLAPI void APIENTRY glDrawBuffers(GLsizei n, const GLenum *bufs);
+    GLAPI void APIENTRY glStencilOpSeparate(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass);
+    GLAPI void APIENTRY glStencilFuncSeparate(GLenum face, GLenum func, GLint ref, GLuint mask);
+    GLAPI void APIENTRY glStencilMaskSeparate(GLenum face, GLuint mask);
+    GLAPI void APIENTRY glAttachShader(GLuint program, GLuint shader);
+    GLAPI void APIENTRY glBindAttribLocation(GLuint program, GLuint index, const GLchar *name);
+    GLAPI void APIENTRY glCompileShader(GLuint shader);
+    GLAPI GLuint APIENTRY glCreateProgram(void);
+    GLAPI GLuint APIENTRY glCreateShader(GLenum type);
+    GLAPI void APIENTRY glDeleteProgram(GLuint program);
+    GLAPI void APIENTRY glDeleteShader(GLuint shader);
+    GLAPI void APIENTRY glDetachShader(GLuint program, GLuint shader);
+    GLAPI void APIENTRY glDisableVertexAttribArray(GLuint index);
+    GLAPI void APIENTRY glEnableVertexAttribArray(GLuint index);
+    GLAPI void APIENTRY glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name);
+    GLAPI void APIENTRY glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name);
+    GLAPI void APIENTRY glGetAttachedShaders(GLuint program, GLsizei maxCount, GLsizei *count, GLuint *obj);
+    GLAPI GLint APIENTRY glGetAttribLocation(GLuint program, const GLchar *name);
+    GLAPI void APIENTRY glGetProgramiv(GLuint program, GLenum pname, GLint *params);
+    GLAPI void APIENTRY glGetProgramInfoLog(GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog);
+    GLAPI void APIENTRY glGetShaderiv(GLuint shader, GLenum pname, GLint *params);
+    GLAPI void APIENTRY glGetShaderInfoLog(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog);
+    GLAPI void APIENTRY glGetShaderSource(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source);
+    GLAPI GLint APIENTRY glGetUniformLocation(GLuint program, const GLchar *name);
+    GLAPI void APIENTRY glGetUniformfv(GLuint program, GLint location, GLfloat *params);
+    GLAPI void APIENTRY glGetUniformiv(GLuint program, GLint location, GLint *params);
+    GLAPI void APIENTRY glGetVertexAttribdv(GLuint index, GLenum pname, GLdouble *params);
+    GLAPI void APIENTRY glGetVertexAttribfv(GLuint index, GLenum pname, GLfloat *params);
+    GLAPI void APIENTRY glGetVertexAttribiv(GLuint index, GLenum pname, GLint *params);
+    GLAPI void APIENTRY glGetVertexAttribPointerv(GLuint index, GLenum pname, GLvoid* *pointer);
+    GLAPI GLboolean APIENTRY glIsProgram(GLuint program);
+    GLAPI GLboolean APIENTRY glIsShader(GLuint shader);
+    GLAPI void APIENTRY glLinkProgram(GLuint program);
+    GLAPI void APIENTRY glShaderSource(GLuint shader, GLsizei count, const GLchar* *string, const GLint *length);
+    GLAPI void APIENTRY glUseProgram(GLuint program);
+    GLAPI void APIENTRY glUniform1f(GLint location, GLfloat v0);
+    GLAPI void APIENTRY glUniform2f(GLint location, GLfloat v0, GLfloat v1);
+    GLAPI void APIENTRY glUniform3f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
+    GLAPI void APIENTRY glUniform4f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
+    GLAPI void APIENTRY glUniform1i(GLint location, GLint v0);
+    GLAPI void APIENTRY glUniform2i(GLint location, GLint v0, GLint v1);
+    GLAPI void APIENTRY glUniform3i(GLint location, GLint v0, GLint v1, GLint v2);
+    GLAPI void APIENTRY glUniform4i(GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
+    GLAPI void APIENTRY glUniform1fv(GLint location, GLsizei count, const GLfloat *value);
+    GLAPI void APIENTRY glUniform2fv(GLint location, GLsizei count, const GLfloat *value);
+    GLAPI void APIENTRY glUniform3fv(GLint location, GLsizei count, const GLfloat *value);
+    GLAPI void APIENTRY glUniform4fv(GLint location, GLsizei count, const GLfloat *value);
+    GLAPI void APIENTRY glUniform1iv(GLint location, GLsizei count, const GLint *value);
+    GLAPI void APIENTRY glUniform2iv(GLint location, GLsizei count, const GLint *value);
+    GLAPI void APIENTRY glUniform3iv(GLint location, GLsizei count, const GLint *value);
+    GLAPI void APIENTRY glUniform4iv(GLint location, GLsizei count, const GLint *value);
+    GLAPI void APIENTRY glUniformMatrix2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
+    GLAPI void APIENTRY glUniformMatrix3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
+    GLAPI void APIENTRY glUniformMatrix4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
+    GLAPI void APIENTRY glValidateProgram(GLuint program);
+    GLAPI void APIENTRY glVertexAttrib1d(GLuint index, GLdouble x);
+    GLAPI void APIENTRY glVertexAttrib1dv(GLuint index, const GLdouble *v);
+    GLAPI void APIENTRY glVertexAttrib1f(GLuint index, GLfloat x);
+    GLAPI void APIENTRY glVertexAttrib1fv(GLuint index, const GLfloat *v);
+    GLAPI void APIENTRY glVertexAttrib1s(GLuint index, GLshort x);
+    GLAPI void APIENTRY glVertexAttrib1sv(GLuint index, const GLshort *v);
+    GLAPI void APIENTRY glVertexAttrib2d(GLuint index, GLdouble x, GLdouble y);
+    GLAPI void APIENTRY glVertexAttrib2dv(GLuint index, const GLdouble *v);
+    GLAPI void APIENTRY glVertexAttrib2f(GLuint index, GLfloat x, GLfloat y);
+    GLAPI void APIENTRY glVertexAttrib2fv(GLuint index, const GLfloat *v);
+    GLAPI void APIENTRY glVertexAttrib2s(GLuint index, GLshort x, GLshort y);
+    GLAPI void APIENTRY glVertexAttrib2sv(GLuint index, const GLshort *v);
+    GLAPI void APIENTRY glVertexAttrib3d(GLuint index, GLdouble x, GLdouble y, GLdouble z);
+    GLAPI void APIENTRY glVertexAttrib3dv(GLuint index, const GLdouble *v);
+    GLAPI void APIENTRY glVertexAttrib3f(GLuint index, GLfloat x, GLfloat y, GLfloat z);
+    GLAPI void APIENTRY glVertexAttrib3fv(GLuint index, const GLfloat *v);
+    GLAPI void APIENTRY glVertexAttrib3s(GLuint index, GLshort x, GLshort y, GLshort z);
+    GLAPI void APIENTRY glVertexAttrib3sv(GLuint index, const GLshort *v);
+    GLAPI void APIENTRY glVertexAttrib4Nbv(GLuint index, const GLbyte *v);
+    GLAPI void APIENTRY glVertexAttrib4Niv(GLuint index, const GLint *v);
+    GLAPI void APIENTRY glVertexAttrib4Nsv(GLuint index, const GLshort *v);
+    GLAPI void APIENTRY glVertexAttrib4Nub(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
+    GLAPI void APIENTRY glVertexAttrib4Nubv(GLuint index, const GLubyte *v);
+    GLAPI void APIENTRY glVertexAttrib4Nuiv(GLuint index, const GLuint *v);
+    GLAPI void APIENTRY glVertexAttrib4Nusv(GLuint index, const GLushort *v);
+    GLAPI void APIENTRY glVertexAttrib4bv(GLuint index, const GLbyte *v);
+    GLAPI void APIENTRY glVertexAttrib4d(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
+    GLAPI void APIENTRY glVertexAttrib4dv(GLuint index, const GLdouble *v);
+    GLAPI void APIENTRY glVertexAttrib4f(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
+    GLAPI void APIENTRY glVertexAttrib4fv(GLuint index, const GLfloat *v);
+    GLAPI void APIENTRY glVertexAttrib4iv(GLuint index, const GLint *v);
+    GLAPI void APIENTRY glVertexAttrib4s(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
+    GLAPI void APIENTRY glVertexAttrib4sv(GLuint index, const GLshort *v);
+    GLAPI void APIENTRY glVertexAttrib4ubv(GLuint index, const GLubyte *v);
+    GLAPI void APIENTRY glVertexAttrib4uiv(GLuint index, const GLuint *v);
+    GLAPI void APIENTRY glVertexAttrib4usv(GLuint index, const GLushort *v);
+    GLAPI void APIENTRY glVertexAttribPointer(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLvoid *pointer);
+#endif /* GL_GLEXT_PROTOTYPES */
+    typedef void (APIENTRYP PFNGLBLENDEQUATIONSEPARATEPROC)(GLenum modeRGB, GLenum modeAlpha);
+    typedef void (APIENTRYP PFNGLDRAWBUFFERSPROC)(GLsizei n, const GLenum *bufs);
+    typedef void (APIENTRYP PFNGLSTENCILOPSEPARATEPROC)(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass);
+    typedef void (APIENTRYP PFNGLSTENCILFUNCSEPARATEPROC)(GLenum face, GLenum func, GLint ref, GLuint mask);
+    typedef void (APIENTRYP PFNGLSTENCILMASKSEPARATEPROC)(GLenum face, GLuint mask);
+    typedef void (APIENTRYP PFNGLATTACHSHADERPROC)(GLuint program, GLuint shader);
+    typedef void (APIENTRYP PFNGLBINDATTRIBLOCATIONPROC)(GLuint program, GLuint index, const GLchar *name);
+    typedef void (APIENTRYP PFNGLCOMPILESHADERPROC)(GLuint shader);
+    typedef GLuint(APIENTRYP PFNGLCREATEPROGRAMPROC)(void);
+    typedef GLuint(APIENTRYP PFNGLCREATESHADERPROC)(GLenum type);
+    typedef void (APIENTRYP PFNGLDELETEPROGRAMPROC)(GLuint program);
+    typedef void (APIENTRYP PFNGLDELETESHADERPROC)(GLuint shader);
+    typedef void (APIENTRYP PFNGLDETACHSHADERPROC)(GLuint program, GLuint shader);
+    typedef void (APIENTRYP PFNGLDISABLEVERTEXATTRIBARRAYPROC)(GLuint index);
+    typedef void (APIENTRYP PFNGLENABLEVERTEXATTRIBARRAYPROC)(GLuint index);
+    typedef void (APIENTRYP PFNGLGETACTIVEATTRIBPROC)(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name);
+    typedef void (APIENTRYP PFNGLGETACTIVEUNIFORMPROC)(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name);
+    typedef void (APIENTRYP PFNGLGETATTACHEDSHADERSPROC)(GLuint program, GLsizei maxCount, GLsizei *count, GLuint *obj);
+    typedef GLint(APIENTRYP PFNGLGETATTRIBLOCATIONPROC)(GLuint program, const GLchar *name);
+    typedef void (APIENTRYP PFNGLGETPROGRAMIVPROC)(GLuint program, GLenum pname, GLint *params);
+    typedef void (APIENTRYP PFNGLGETPROGRAMINFOLOGPROC)(GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog);
+    typedef void (APIENTRYP PFNGLGETSHADERIVPROC)(GLuint shader, GLenum pname, GLint *params);
+    typedef void (APIENTRYP PFNGLGETSHADERINFOLOGPROC)(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog);
+    typedef void (APIENTRYP PFNGLGETSHADERSOURCEPROC)(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source);
+    typedef GLint(APIENTRYP PFNGLGETUNIFORMLOCATIONPROC)(GLuint program, const GLchar *name);
+    typedef void (APIENTRYP PFNGLGETUNIFORMFVPROC)(GLuint program, GLint location, GLfloat *params);
+    typedef void (APIENTRYP PFNGLGETUNIFORMIVPROC)(GLuint program, GLint location, GLint *params);
+    typedef void (APIENTRYP PFNGLGETVERTEXATTRIBDVPROC)(GLuint index, GLenum pname, GLdouble *params);
+    typedef void (APIENTRYP PFNGLGETVERTEXATTRIBFVPROC)(GLuint index, GLenum pname, GLfloat *params);
+    typedef void (APIENTRYP PFNGLGETVERTEXATTRIBIVPROC)(GLuint index, GLenum pname, GLint *params);
+    typedef void (APIENTRYP PFNGLGETVERTEXATTRIBPOINTERVPROC)(GLuint index, GLenum pname, GLvoid* *pointer);
+    typedef GLboolean(APIENTRYP PFNGLISPROGRAMPROC)(GLuint program);
+    typedef GLboolean(APIENTRYP PFNGLISSHADERPROC)(GLuint shader);
+    typedef void (APIENTRYP PFNGLLINKPROGRAMPROC)(GLuint program);
+    typedef void (APIENTRYP PFNGLSHADERSOURCEPROC)(GLuint shader, GLsizei count, const GLchar* *string, const GLint *length);
+    typedef void (APIENTRYP PFNGLUSEPROGRAMPROC)(GLuint program);
+    typedef void (APIENTRYP PFNGLUNIFORM1FPROC)(GLint location, GLfloat v0);
+    typedef void (APIENTRYP PFNGLUNIFORM2FPROC)(GLint location, GLfloat v0, GLfloat v1);
+    typedef void (APIENTRYP PFNGLUNIFORM3FPROC)(GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
+    typedef void (APIENTRYP PFNGLUNIFORM4FPROC)(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
+    typedef void (APIENTRYP PFNGLUNIFORM1IPROC)(GLint location, GLint v0);
+    typedef void (APIENTRYP PFNGLUNIFORM2IPROC)(GLint location, GLint v0, GLint v1);
+    typedef void (APIENTRYP PFNGLUNIFORM3IPROC)(GLint location, GLint v0, GLint v1, GLint v2);
+    typedef void (APIENTRYP PFNGLUNIFORM4IPROC)(GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
+    typedef void (APIENTRYP PFNGLUNIFORM1FVPROC)(GLint location, GLsizei count, const GLfloat *value);
+    typedef void (APIENTRYP PFNGLUNIFORM2FVPROC)(GLint location, GLsizei count, const GLfloat *value);
+    typedef void (APIENTRYP PFNGLUNIFORM3FVPROC)(GLint location, GLsizei count, const GLfloat *value);
+    typedef void (APIENTRYP PFNGLUNIFORM4FVPROC)(GLint location, GLsizei count, const GLfloat *value);
+    typedef void (APIENTRYP PFNGLUNIFORM1IVPROC)(GLint location, GLsizei count, const GLint *value);
+    typedef void (APIENTRYP PFNGLUNIFORM2IVPROC)(GLint location, GLsizei count, const GLint *value);
+    typedef void (APIENTRYP PFNGLUNIFORM3IVPROC)(GLint location, GLsizei count, const GLint *value);
+    typedef void (APIENTRYP PFNGLUNIFORM4IVPROC)(GLint location, GLsizei count, const GLint *value);
+    typedef void (APIENTRYP PFNGLUNIFORMMATRIX2FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
+    typedef void (APIENTRYP PFNGLUNIFORMMATRIX3FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
+    typedef void (APIENTRYP PFNGLUNIFORMMATRIX4FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
+    typedef void (APIENTRYP PFNGLVALIDATEPROGRAMPROC)(GLuint program);
+    typedef void (APIENTRYP PFNGLVERTEXATTRIB1DPROC)(GLuint index, GLdouble x);
+    typedef void (APIENTRYP PFNGLVERTEXATTRIB1DVPROC)(GLuint index, const GLdouble *v);
+    typedef void (APIENTRYP PFNGLVERTEXATTRIB1FPROC)(GLuint index, GLfloat x);
+    typedef void (APIENTRYP PFNGLVERTEXATTRIB1FVPROC)(GLuint index, const GLfloat *v);
+    typedef void (APIENTRYP PFNGLVERTEXATTRIB1SPROC)(GLuint index, GLshort x);
+    typedef void (APIENTRYP PFNGLVERTEXATTRIB1SVPROC)(GLuint index, const GLshort *v);
+    typedef void (APIENTRYP PFNGLVERTEXATTRIB2DPROC)(GLuint index, GLdouble x, GLdouble y);
+    typedef void (APIENTRYP PFNGLVERTEXATTRIB2DVPROC)(GLuint index, const GLdouble *v);
+    typedef void (APIENTRYP PFNGLVERTEXATTRIB2FPROC)(GLuint index, GLfloat x, GLfloat y);
+    typedef void (APIENTRYP PFNGLVERTEXATTRIB2FVPROC)(GLuint index, const GLfloat *v);
+    typedef void (APIENTRYP PFNGLVERTEXATTRIB2SPROC)(GLuint index, GLshort x, GLshort y);
+    typedef void (APIENTRYP PFNGLVERTEXATTRIB2SVPROC)(GLuint index, const GLshort *v);
+    typedef void (APIENTRYP PFNGLVERTEXATTRIB3DPROC)(GLuint index, GLdouble x, GLdouble y, GLdouble z);
+    typedef void (APIENTRYP PFNGLVERTEXATTRIB3DVPROC)(GLuint index, const GLdouble *v);
+    typedef void (APIENTRYP PFNGLVERTEXATTRIB3FPROC)(GLuint index, GLfloat x, GLfloat y, GLfloat z);
+    typedef void (APIENTRYP PFNGLVERTEXATTRIB3FVPROC)(GLuint index, const GLfloat *v);
+    typedef void (APIENTRYP PFNGLVERTEXATTRIB3SPROC)(GLuint index, GLshort x, GLshort y, GLshort z);
+    typedef void (APIENTRYP PFNGLVERTEXATTRIB3SVPROC)(GLuint index, const GLshort *v);
+    typedef void (APIENTRYP PFNGLVERTEXATTRIB4NBVPROC)(GLuint index, const GLbyte *v);
+    typedef void (APIENTRYP PFNGLVERTEXATTRIB4NIVPROC)(GLuint index, const GLint *v);
+    typedef void (APIENTRYP PFNGLVERTEXATTRIB4NSVPROC)(GLuint index, const GLshort *v);
+    typedef void (APIENTRYP PFNGLVERTEXATTRIB4NUBPROC)(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
+    typedef void (APIENTRYP PFNGLVERTEXATTRIB4NUBVPROC)(GLuint index, const GLubyte *v);
+    typedef void (APIENTRYP PFNGLVERTEXATTRIB4NUIVPROC)(GLuint index, const GLuint *v);
+    typedef void (APIENTRYP PFNGLVERTEXATTRIB4NUSVPROC)(GLuint index, const GLushort *v);
+    typedef void (APIENTRYP PFNGLVERTEXATTRIB4BVPROC)(GLuint index, const GLbyte *v);
+    typedef void (APIENTRYP PFNGLVERTEXATTRIB4DPROC)(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
+    typedef void (APIENTRYP PFNGLVERTEXATTRIB4DVPROC)(GLuint index, const GLdouble *v);
+    typedef void (APIENTRYP PFNGLVERTEXATTRIB4FPROC)(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
+    typedef void (APIENTRYP PFNGLVERTEXATTRIB4FVPROC)(GLuint index, const GLfloat *v);
+    typedef void (APIENTRYP PFNGLVERTEXATTRIB4IVPROC)(GLuint index, const GLint *v);
+    typedef void (APIENTRYP PFNGLVERTEXATTRIB4SPROC)(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
+    typedef void (APIENTRYP PFNGLVERTEXATTRIB4SVPROC)(GLuint index, const GLshort *v);
+    typedef void (APIENTRYP PFNGLVERTEXATTRIB4UBVPROC)(GLuint index, const GLubyte *v);
+    typedef void (APIENTRYP PFNGLVERTEXATTRIB4UIVPROC)(GLuint index, const GLuint *v);
+    typedef void (APIENTRYP PFNGLVERTEXATTRIB4USVPROC)(GLuint index, const GLushort *v);
+    typedef void (APIENTRYP PFNGLVERTEXATTRIBPOINTERPROC)(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLvoid *pointer);
+#endif
+
+#ifndef GL_VERSION_2_1
+#define GL_VERSION_2_1 1
+#ifdef GL_GLEXT_PROTOTYPES
+    GLAPI void APIENTRY glUniformMatrix2x3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
+    GLAPI void APIENTRY glUniformMatrix3x2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
+    GLAPI void APIENTRY glUniformMatrix2x4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
+    GLAPI void APIENTRY glUniformMatrix4x2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
+    GLAPI void APIENTRY glUniformMatrix3x4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
+    GLAPI void APIENTRY glUniformMatrix4x3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
+#endif /* GL_GLEXT_PROTOTYPES */
+    typedef void (APIENTRYP PFNGLUNIFORMMATRIX2X3FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
+    typedef void (APIENTRYP PFNGLUNIFORMMATRIX3X2FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
+    typedef void (APIENTRYP PFNGLUNIFORMMATRIX2X4FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
+    typedef void (APIENTRYP PFNGLUNIFORMMATRIX4X2FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
+    typedef void (APIENTRYP PFNGLUNIFORMMATRIX3X4FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
+    typedef void (APIENTRYP PFNGLUNIFORMMATRIX4X3FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
+#endif
+
+#ifndef GL_VERSION_3_0
+#define GL_VERSION_3_0 1
+    /* OpenGL 3.0 also reuses entry points from these extensions: */
+    /* ARB_framebuffer_object */
+    /* ARB_map_buffer_range */
+    /* ARB_vertex_array_object */
+#ifdef GL_GLEXT_PROTOTYPES
+    GLAPI void APIENTRY glColorMaski(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a);
+    GLAPI void APIENTRY glGetBooleani_v(GLenum target, GLuint index, GLboolean *data);
+    GLAPI void APIENTRY glGetIntegeri_v(GLenum target, GLuint index, GLint *data);
+    GLAPI void APIENTRY glEnablei(GLenum target, GLuint index);
+    GLAPI void APIENTRY glDisablei(GLenum target, GLuint index);
+    GLAPI GLboolean APIENTRY glIsEnabledi(GLenum target, GLuint index);
+    GLAPI void APIENTRY glBeginTransformFeedback(GLenum primitiveMode);
+    GLAPI void APIENTRY glEndTransformFeedback(void);
+    GLAPI void APIENTRY glBindBufferRange(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
+    GLAPI void APIENTRY glBindBufferBase(GLenum target, GLuint index, GLuint buffer);
+    GLAPI void APIENTRY glTransformFeedbackVaryings(GLuint program, GLsizei count, const GLchar* *varyings, GLenum bufferMode);
+    GLAPI void APIENTRY glGetTransformFeedbackVarying(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name);
+    GLAPI void APIENTRY glClampColor(GLenum target, GLenum clamp);
+    GLAPI void APIENTRY glBeginConditionalRender(GLuint id, GLenum mode);
+    GLAPI void APIENTRY glEndConditionalRender(void);
+    GLAPI void APIENTRY glVertexAttribIPointer(GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
+    GLAPI void APIENTRY glGetVertexAttribIiv(GLuint index, GLenum pname, GLint *params);
+    GLAPI void APIENTRY glGetVertexAttribIuiv(GLuint index, GLenum pname, GLuint *params);
+    GLAPI void APIENTRY glVertexAttribI1i(GLuint index, GLint x);
+    GLAPI void APIENTRY glVertexAttribI2i(GLuint index, GLint x, GLint y);
+    GLAPI void APIENTRY glVertexAttribI3i(GLuint index, GLint x, GLint y, GLint z);
+    GLAPI void APIENTRY glVertexAttribI4i(GLuint index, GLint x, GLint y, GLint z, GLint w);
+    GLAPI void APIENTRY glVertexAttribI1ui(GLuint index, GLuint x);
+    GLAPI void APIENTRY glVertexAttribI2ui(GLuint index, GLuint x, GLuint y);
+    GLAPI void APIENTRY glVertexAttribI3ui(GLuint index, GLuint x, GLuint y, GLuint z);
+    GLAPI void APIENTRY glVertexAttribI4ui(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
+    GLAPI void APIENTRY glVertexAttribI1iv(GLuint index, const GLint *v);
+    GLAPI void APIENTRY glVertexAttribI2iv(GLuint index, const GLint *v);
+    GLAPI void APIENTRY glVertexAttribI3iv(GLuint index, const GLint *v);
+    GLAPI void APIENTRY glVertexAttribI4iv(GLuint index, const GLint *v);
+    GLAPI void APIENTRY glVertexAttribI1uiv(GLuint index, const GLuint *v);
+    GLAPI void APIENTRY glVertexAttribI2uiv(GLuint index, const GLuint *v);
+    GLAPI void APIENTRY glVertexAttribI3uiv(GLuint index, const GLuint *v);
+    GLAPI void APIENTRY glVertexAttribI4uiv(GLuint index, const GLuint *v);
+    GLAPI void APIENTRY glVertexAttribI4bv(GLuint index, const GLbyte *v);
+    GLAPI void APIENTRY glVertexAttribI4sv(GLuint index, const GLshort *v);
+    GLAPI void APIENTRY glVertexAttribI4ubv(GLuint index, const GLubyte *v);
+    GLAPI void APIENTRY glVertexAttribI4usv(GLuint index, const GLushort *v);
+    GLAPI void APIENTRY glGetUniformuiv(GLuint program, GLint location, GLuint *params);
+    GLAPI void APIENTRY glBindFragDataLocation(GLuint program, GLuint color, const GLchar *name);
+    GLAPI GLint APIENTRY glGetFragDataLocation(GLuint program, const GLchar *name);
+    GLAPI void APIENTRY glUniform1ui(GLint location, GLuint v0);
+    GLAPI void APIENTRY glUniform2ui(GLint location, GLuint v0, GLuint v1);
+    GLAPI void APIENTRY glUniform3ui(GLint location, GLuint v0, GLuint v1, GLuint v2);
+    GLAPI void APIENTRY glUniform4ui(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
+    GLAPI void APIENTRY glUniform1uiv(GLint location, GLsizei count, const GLuint *value);
+    GLAPI void APIENTRY glUniform2uiv(GLint location, GLsizei count, const GLuint *value);
+    GLAPI void APIENTRY glUniform3uiv(GLint location, GLsizei count, const GLuint *value);
+    GLAPI void APIENTRY glUniform4uiv(GLint location, GLsizei count, const GLuint *value);
+    GLAPI void APIENTRY glTexParameterIiv(GLenum target, GLenum pname, const GLint *params);
+    GLAPI void APIENTRY glTexParameterIuiv(GLenum target, GLenum pname, const GLuint *params);
+    GLAPI void APIENTRY glGetTexParameterIiv(GLenum target, GLenum pname, GLint *params);
+    GLAPI void APIENTRY glGetTexParameterIuiv(GLenum target, GLenum pname, GLuint *params);
+    GLAPI void APIENTRY glClearBufferiv(GLenum buffer, GLint drawbuffer, const GLint *value);
+    GLAPI void APIENTRY glClearBufferuiv(GLenum buffer, GLint drawbuffer, const GLuint *value);
+    GLAPI void APIENTRY glClearBufferfv(GLenum buffer, GLint drawbuffer, const GLfloat *value);
+    GLAPI void APIENTRY glClearBufferfi(GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil);
+    GLAPI const GLubyte * APIENTRY glGetStringi(GLenum name, GLuint index);
+#endif /* GL_GLEXT_PROTOTYPES */
+    typedef void (APIENTRYP PFNGLCOLORMASKIPROC)(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a);
+    typedef void (APIENTRYP PFNGLGETBOOLEANI_VPROC)(GLenum target, GLuint index, GLboolean *data);
+    typedef void (APIENTRYP PFNGLGETINTEGERI_VPROC)(GLenum target, GLuint index, GLint *data);
+    typedef void (APIENTRYP PFNGLENABLEIPROC)(GLenum target, GLuint index);
+    typedef void (APIENTRYP PFNGLDISABLEIPROC)(GLenum target, GLuint index);
+    typedef GLboolean(APIENTRYP PFNGLISENABLEDIPROC)(GLenum target, GLuint index);
+    typedef void (APIENTRYP PFNGLBEGINTRANSFORMFEEDBACKPROC)(GLenum primitiveMode);
+    typedef void (APIENTRYP PFNGLENDTRANSFORMFEEDBACKPROC)(void);
+    typedef void (APIENTRYP PFNGLBINDBUFFERRANGEPROC)(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
+    typedef void (APIENTRYP PFNGLBINDBUFFERBASEPROC)(GLenum target, GLuint index, GLuint buffer);
+    typedef void (APIENTRYP PFNGLTRANSFORMFEEDBACKVARYINGSPROC)(GLuint program, GLsizei count, const GLchar* *varyings, GLenum bufferMode);
+    typedef void (APIENTRYP PFNGLGETTRANSFORMFEEDBACKVARYINGPROC)(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name);
+    typedef void (APIENTRYP PFNGLCLAMPCOLORPROC)(GLenum target, GLenum clamp);
+    typedef void (APIENTRYP PFNGLBEGINCONDITIONALRENDERPROC)(GLuint id, GLenum mode);
+    typedef void (APIENTRYP PFNGLENDCONDITIONALRENDERPROC)(void);
+    typedef void (APIENTRYP PFNGLVERTEXATTRIBIPOINTERPROC)(GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
+    typedef void (APIENTRYP PFNGLGETVERTEXATTRIBIIVPROC)(GLuint index, GLenum pname, GLint *params);
+    typedef void (APIENTRYP PFNGLGETVERTEXATTRIBIUIVPROC)(GLuint index, GLenum pname, GLuint *params);
+    typedef void (APIENTRYP PFNGLVERTEXATTRIBI1IPROC)(GLuint index, GLint x);
+    typedef void (APIENTRYP PFNGLVERTEXATTRIBI2IPROC)(GLuint index, GLint x, GLint y);
+    typedef void (APIENTRYP PFNGLVERTEXATTRIBI3IPROC)(GLuint index, GLint x, GLint y, GLint z);
+    typedef void (APIENTRYP PFNGLVERTEXATTRIBI4IPROC)(GLuint index, GLint x, GLint y, GLint z, GLint w);
+    typedef void (APIENTRYP PFNGLVERTEXATTRIBI1UIPROC)(GLuint index, GLuint x);
+    typedef void (APIENTRYP PFNGLVERTEXATTRIBI2UIPROC)(GLuint index, GLuint x, GLuint y);
+    typedef void (APIENTRYP PFNGLVERTEXATTRIBI3UIPROC)(GLuint index, GLuint x, GLuint y, GLuint z);
+    typedef void (APIENTRYP PFNGLVERTEXATTRIBI4UIPROC)(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
+    typedef void (APIENTRYP PFNGLVERTEXATTRIBI1IVPROC)(GLuint index, const GLint *v);
+    typedef void (APIENTRYP PFNGLVERTEXATTRIBI2IVPROC)(GLuint index, const GLint *v);
+    typedef void (APIENTRYP PFNGLVERTEXATTRIBI3IVPROC)(GLuint index, const GLint *v);
+    typedef void (APIENTRYP PFNGLVERTEXATTRIBI4IVPROC)(GLuint index, const GLint *v);
+    typedef void (APIENTRYP PFNGLVERTEXATTRIBI1UIVPROC)(GLuint index, const GLuint *v);
+    typedef void (APIENTRYP PFNGLVERTEXATTRIBI2UIVPROC)(GLuint index, const GLuint *v);
+    typedef void (APIENTRYP PFNGLVERTEXATTRIBI3UIVPROC)(GLuint index, const GLuint *v);
+    typedef void (APIENTRYP PFNGLVERTEXATTRIBI4UIVPROC)(GLuint index, const GLuint *v);
+    typedef void (APIENTRYP PFNGLVERTEXATTRIBI4BVPROC)(GLuint index, const GLbyte *v);
+    typedef void (APIENTRYP PFNGLVERTEXATTRIBI4SVPROC)(GLuint index, const GLshort *v);
+    typedef void (APIENTRYP PFNGLVERTEXATTRIBI4UBVPROC)(GLuint index, const GLubyte *v);
+    typedef void (APIENTRYP PFNGLVERTEXATTRIBI4USVPROC)(GLuint index, const GLushort *v);
+    typedef void (APIENTRYP PFNGLGETUNIFORMUIVPROC)(GLuint program, GLint location, GLuint *params);
+    typedef void (APIENTRYP PFNGLBINDFRAGDATALOCATIONPROC)(GLuint program, GLuint color, const GLchar *name);
+    typedef GLint(APIENTRYP PFNGLGETFRAGDATALOCATIONPROC)(GLuint program, const GLchar *name);
+    typedef void (APIENTRYP PFNGLUNIFORM1UIPROC)(GLint location, GLuint v0);
+    typedef void (APIENTRYP PFNGLUNIFORM2UIPROC)(GLint location, GLuint v0, GLuint v1);
+    typedef void (APIENTRYP PFNGLUNIFORM3UIPROC)(GLint location, GLuint v0, GLuint v1, GLuint v2);
+    typedef void (APIENTRYP PFNGLUNIFORM4UIPROC)(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
+    typedef void (APIENTRYP PFNGLUNIFORM1UIVPROC)(GLint location, GLsizei count, const GLuint *value);
+    typedef void (APIENTRYP PFNGLUNIFORM2UIVPROC)(GLint location, GLsizei count, const GLuint *value);
+    typedef void (APIENTRYP PFNGLUNIFORM3UIVPROC)(GLint location, GLsizei count, const GLuint *value);
+    typedef void (APIENTRYP PFNGLUNIFORM4UIVPROC)(GLint location, GLsizei count, const GLuint *value);
+    typedef void (APIENTRYP PFNGLTEXPARAMETERIIVPROC)(GLenum target, GLenum pname, const GLint *params);
+    typedef void (APIENTRYP PFNGLTEXPARAMETERIUIVPROC)(GLenum target, GLenum pname, const GLuint *params);
+    typedef void (APIENTRYP PFNGLGETTEXPARAMETERIIVPROC)(GLenum target, GLenum pname, GLint *params);
+    typedef void (APIENTRYP PFNGLGETTEXPARAMETERIUIVPROC)(GLenum target, GLenum pname, GLuint *params);
+    typedef void (APIENTRYP PFNGLCLEARBUFFERIVPROC)(GLenum buffer, GLint drawbuffer, const GLint *value);
+    typedef void (APIENTRYP PFNGLCLEARBUFFERUIVPROC)(GLenum buffer, GLint drawbuffer, const GLuint *value);
+    typedef void (APIENTRYP PFNGLCLEARBUFFERFVPROC)(GLenum buffer, GLint drawbuffer, const GLfloat *value);
+    typedef void (APIENTRYP PFNGLCLEARBUFFERFIPROC)(GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil);
+    typedef const GLubyte * (APIENTRYP PFNGLGETSTRINGIPROC)(GLenum name, GLuint index);
+#endif
+
+#ifndef GL_VERSION_3_1
+#define GL_VERSION_3_1 1
+    /* OpenGL 3.1 also reuses entry points from these extensions: */
+    /* ARB_copy_buffer */
+    /* ARB_uniform_buffer_object */
+#ifdef GL_GLEXT_PROTOTYPES
+    GLAPI void APIENTRY glDrawArraysInstanced(GLenum mode, GLint first, GLsizei count, GLsizei primcount);
+    GLAPI void APIENTRY glDrawElementsInstanced(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount);
+    GLAPI void APIENTRY glTexBuffer(GLenum target, GLenum internalformat, GLuint buffer);
+    GLAPI void APIENTRY glPrimitiveRestartIndex(GLuint index);
+#endif /* GL_GLEXT_PROTOTYPES */
+    typedef void (APIENTRYP PFNGLDRAWARRAYSINSTANCEDPROC)(GLenum mode, GLint first, GLsizei count, GLsizei primcount);
+    typedef void (APIENTRYP PFNGLDRAWELEMENTSINSTANCEDPROC)(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount);
+    typedef void (APIENTRYP PFNGLTEXBUFFERPROC)(GLenum target, GLenum internalformat, GLuint buffer);
+    typedef void (APIENTRYP PFNGLPRIMITIVERESTARTINDEXPROC)(GLuint index);
+#endif
+
+#ifndef GL_VERSION_3_2
+#define GL_VERSION_3_2 1
+    /* OpenGL 3.2 also reuses entry points from these extensions: */
+    /* ARB_draw_elements_base_vertex */
+    /* ARB_provoking_vertex */
+    /* ARB_sync */
+    /* ARB_texture_multisample */
+#ifdef GL_GLEXT_PROTOTYPES
+    GLAPI void APIENTRY glGetInteger64i_v(GLenum target, GLuint index, GLint64 *data);
+    GLAPI void APIENTRY glGetBufferParameteri64v(GLenum target, GLenum pname, GLint64 *params);
+    GLAPI void APIENTRY glFramebufferTexture(GLenum target, GLenum attachment, GLuint texture, GLint level);
+#endif /* GL_GLEXT_PROTOTYPES */
+    typedef void (APIENTRYP PFNGLGETINTEGER64I_VPROC)(GLenum target, GLuint index, GLint64 *data);
+    typedef void (APIENTRYP PFNGLGETBUFFERPARAMETERI64VPROC)(GLenum target, GLenum pname, GLint64 *params);
+    typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTUREPROC)(GLenum target, GLenum attachment, GLuint texture, GLint level);
+#endif
+
+#ifndef GL_VERSION_3_3
+#define GL_VERSION_3_3 1
+    /* OpenGL 3.3 also reuses entry points from these extensions: */
+    /* ARB_blend_func_extended */
+    /* ARB_sampler_objects */
+    /* ARB_explicit_attrib_location, but it has none */
+    /* ARB_occlusion_query2 (no entry points) */
+    /* ARB_shader_bit_encoding (no entry points) */
+    /* ARB_texture_rgb10_a2ui (no entry points) */
+    /* ARB_texture_swizzle (no entry points) */
+    /* ARB_timer_query */
+    /* ARB_vertex_type_2_10_10_10_rev */
+#ifdef GL_GLEXT_PROTOTYPES
+    GLAPI void APIENTRY glVertexAttribDivisor(GLuint index, GLuint divisor);
+#endif /* GL_GLEXT_PROTOTYPES */
+    typedef void (APIENTRYP PFNGLVERTEXATTRIBDIVISORPROC)(GLuint index, GLuint divisor);
+#endif
+
+#ifndef GL_VERSION_4_0
+#define GL_VERSION_4_0 1
+    /* OpenGL 4.0 also reuses entry points from these extensions: */
+    /* ARB_texture_query_lod (no entry points) */
+    /* ARB_draw_indirect */
+    /* ARB_gpu_shader5 (no entry points) */
+    /* ARB_gpu_shader_fp64 */
+    /* ARB_shader_subroutine */
+    /* ARB_tessellation_shader */
+    /* ARB_texture_buffer_object_rgb32 (no entry points) */
+    /* ARB_texture_cube_map_array (no entry points) */
+    /* ARB_texture_gather (no entry points) */
+    /* ARB_transform_feedback2 */
+    /* ARB_transform_feedback3 */
+#ifdef GL_GLEXT_PROTOTYPES
+    GLAPI void APIENTRY glMinSampleShading(GLclampf value);
+    GLAPI void APIENTRY glBlendEquationi(GLuint buf, GLenum mode);
+    GLAPI void APIENTRY glBlendEquationSeparatei(GLuint buf, GLenum modeRGB, GLenum modeAlpha);
+    GLAPI void APIENTRY glBlendFunci(GLuint buf, GLenum src, GLenum dst);
+    GLAPI void APIENTRY glBlendFuncSeparatei(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
+#endif /* GL_GLEXT_PROTOTYPES */
+    typedef void (APIENTRYP PFNGLMINSAMPLESHADINGPROC)(GLclampf value);
+    typedef void (APIENTRYP PFNGLBLENDEQUATIONIPROC)(GLuint buf, GLenum mode);
+    typedef void (APIENTRYP PFNGLBLENDEQUATIONSEPARATEIPROC)(GLuint buf, GLenum modeRGB, GLenum modeAlpha);
+    typedef void (APIENTRYP PFNGLBLENDFUNCIPROC)(GLuint buf, GLenum src, GLenum dst);
+    typedef void (APIENTRYP PFNGLBLENDFUNCSEPARATEIPROC)(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
+#endif
+
+#ifndef GL_VERSION_4_1
+#define GL_VERSION_4_1 1
+    /* OpenGL 4.1 reuses entry points from these extensions: */
+    /* ARB_ES2_compatibility */
+    /* ARB_get_program_binary */
+    /* ARB_separate_shader_objects */
+    /* ARB_shader_precision (no entry points) */
+    /* ARB_vertex_attrib_64bit */
+    /* ARB_viewport_array */
+#endif
+
+#ifndef GL_VERSION_4_2
+#define GL_VERSION_4_2 1
+    /* OpenGL 4.2 reuses entry points from these extensions: */
+    /* ARB_base_instance */
+    /* ARB_shading_language_420pack (no entry points) */
+    /* ARB_transform_feedback_instanced */
+    /* ARB_compressed_texture_pixel_storage (no entry points) */
+    /* ARB_conservative_depth (no entry points) */
+    /* ARB_internalformat_query */
+    /* ARB_map_buffer_alignment (no entry points) */
+    /* ARB_shader_atomic_counters */
+    /* ARB_shader_image_load_store */
+    /* ARB_shading_language_packing (no entry points) */
+    /* ARB_texture_storage */
+#endif
+
 #ifndef GL_ARB_multitexture
 #define GL_ARB_multitexture 1
 #ifdef GL_GLEXT_PROTOTYPES
-    GLAPI void APIENTRY glActiveTextureARB(GLenum);
-    GLAPI void APIENTRY glClientActiveTextureARB(GLenum);
-    GLAPI void APIENTRY glMultiTexCoord1dARB(GLenum, GLdouble);
-    GLAPI void APIENTRY glMultiTexCoord1dvARB(GLenum, const GLdouble *);
-    GLAPI void APIENTRY glMultiTexCoord1fARB(GLenum, GLfloat);
-    GLAPI void APIENTRY glMultiTexCoord1fvARB(GLenum, const GLfloat *);
-    GLAPI void APIENTRY glMultiTexCoord1iARB(GLenum, GLint);
-    GLAPI void APIENTRY glMultiTexCoord1ivARB(GLenum, const GLint *);
-    GLAPI void APIENTRY glMultiTexCoord1sARB(GLenum, GLshort);
-    GLAPI void APIENTRY glMultiTexCoord1svARB(GLenum, const GLshort *);
-    GLAPI void APIENTRY glMultiTexCoord2dARB(GLenum, GLdouble, GLdouble);
-    GLAPI void APIENTRY glMultiTexCoord2dvARB(GLenum, const GLdouble *);
-    GLAPI void APIENTRY glMultiTexCoord2fARB(GLenum, GLfloat, GLfloat);
-    GLAPI void APIENTRY glMultiTexCoord2fvARB(GLenum, const GLfloat *);
-    GLAPI void APIENTRY glMultiTexCoord2iARB(GLenum, GLint, GLint);
-    GLAPI void APIENTRY glMultiTexCoord2ivARB(GLenum, const GLint *);
-    GLAPI void APIENTRY glMultiTexCoord2sARB(GLenum, GLshort, GLshort);
-    GLAPI void APIENTRY glMultiTexCoord2svARB(GLenum, const GLshort *);
-    GLAPI void APIENTRY glMultiTexCoord3dARB(GLenum, GLdouble, GLdouble, GLdouble);
-    GLAPI void APIENTRY glMultiTexCoord3dvARB(GLenum, const GLdouble *);
-    GLAPI void APIENTRY glMultiTexCoord3fARB(GLenum, GLfloat, GLfloat, GLfloat);
-    GLAPI void APIENTRY glMultiTexCoord3fvARB(GLenum, const GLfloat *);
-    GLAPI void APIENTRY glMultiTexCoord3iARB(GLenum, GLint, GLint, GLint);
-    GLAPI void APIENTRY glMultiTexCoord3ivARB(GLenum, const GLint *);
-    GLAPI void APIENTRY glMultiTexCoord3sARB(GLenum, GLshort, GLshort, GLshort);
-    GLAPI void APIENTRY glMultiTexCoord3svARB(GLenum, const GLshort *);
-    GLAPI void APIENTRY glMultiTexCoord4dARB(GLenum, GLdouble, GLdouble, GLdouble, GLdouble);
-    GLAPI void APIENTRY glMultiTexCoord4dvARB(GLenum, const GLdouble *);
-    GLAPI void APIENTRY glMultiTexCoord4fARB(GLenum, GLfloat, GLfloat, GLfloat, GLfloat);
-    GLAPI void APIENTRY glMultiTexCoord4fvARB(GLenum, const GLfloat *);
-    GLAPI void APIENTRY glMultiTexCoord4iARB(GLenum, GLint, GLint, GLint, GLint);
-    GLAPI void APIENTRY glMultiTexCoord4ivARB(GLenum, const GLint *);
-    GLAPI void APIENTRY glMultiTexCoord4sARB(GLenum, GLshort, GLshort, GLshort, GLshort);
-    GLAPI void APIENTRY glMultiTexCoord4svARB(GLenum, const GLshort *);
+    GLAPI void APIENTRY glActiveTextureARB(GLenum texture);
+    GLAPI void APIENTRY glClientActiveTextureARB(GLenum texture);
+    GLAPI void APIENTRY glMultiTexCoord1dARB(GLenum target, GLdouble s);
+    GLAPI void APIENTRY glMultiTexCoord1dvARB(GLenum target, const GLdouble *v);
+    GLAPI void APIENTRY glMultiTexCoord1fARB(GLenum target, GLfloat s);
+    GLAPI void APIENTRY glMultiTexCoord1fvARB(GLenum target, const GLfloat *v);
+    GLAPI void APIENTRY glMultiTexCoord1iARB(GLenum target, GLint s);
+    GLAPI void APIENTRY glMultiTexCoord1ivARB(GLenum target, const GLint *v);
+    GLAPI void APIENTRY glMultiTexCoord1sARB(GLenum target, GLshort s);
+    GLAPI void APIENTRY glMultiTexCoord1svARB(GLenum target, const GLshort *v);
+    GLAPI void APIENTRY glMultiTexCoord2dARB(GLenum target, GLdouble s, GLdouble t);
+    GLAPI void APIENTRY glMultiTexCoord2dvARB(GLenum target, const GLdouble *v);
+    GLAPI void APIENTRY glMultiTexCoord2fARB(GLenum target, GLfloat s, GLfloat t);
+    GLAPI void APIENTRY glMultiTexCoord2fvARB(GLenum target, const GLfloat *v);
+    GLAPI void APIENTRY glMultiTexCoord2iARB(GLenum target, GLint s, GLint t);
+    GLAPI void APIENTRY glMultiTexCoord2ivARB(GLenum target, const GLint *v);
+    GLAPI void APIENTRY glMultiTexCoord2sARB(GLenum target, GLshort s, GLshort t);
+    GLAPI void APIENTRY glMultiTexCoord2svARB(GLenum target, const GLshort *v);
+    GLAPI void APIENTRY glMultiTexCoord3dARB(GLenum target, GLdouble s, GLdouble t, GLdouble r);
+    GLAPI void APIENTRY glMultiTexCoord3dvARB(GLenum target, const GLdouble *v);
+    GLAPI void APIENTRY glMultiTexCoord3fARB(GLenum target, GLfloat s, GLfloat t, GLfloat r);
+    GLAPI void APIENTRY glMultiTexCoord3fvARB(GLenum target, const GLfloat *v);
+    GLAPI void APIENTRY glMultiTexCoord3iARB(GLenum target, GLint s, GLint t, GLint r);
+    GLAPI void APIENTRY glMultiTexCoord3ivARB(GLenum target, const GLint *v);
+    GLAPI void APIENTRY glMultiTexCoord3sARB(GLenum target, GLshort s, GLshort t, GLshort r);
+    GLAPI void APIENTRY glMultiTexCoord3svARB(GLenum target, const GLshort *v);
+    GLAPI void APIENTRY glMultiTexCoord4dARB(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q);
+    GLAPI void APIENTRY glMultiTexCoord4dvARB(GLenum target, const GLdouble *v);
+    GLAPI void APIENTRY glMultiTexCoord4fARB(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q);
+    GLAPI void APIENTRY glMultiTexCoord4fvARB(GLenum target, const GLfloat *v);
+    GLAPI void APIENTRY glMultiTexCoord4iARB(GLenum target, GLint s, GLint t, GLint r, GLint q);
+    GLAPI void APIENTRY glMultiTexCoord4ivARB(GLenum target, const GLint *v);
+    GLAPI void APIENTRY glMultiTexCoord4sARB(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q);
+    GLAPI void APIENTRY glMultiTexCoord4svARB(GLenum target, const GLshort *v);
 #endif /* GL_GLEXT_PROTOTYPES */
     typedef void (APIENTRYP PFNGLACTIVETEXTUREARBPROC)(GLenum texture);
     typedef void (APIENTRYP PFNGLCLIENTACTIVETEXTUREARBPROC)(GLenum texture);
@@ -3195,10 +6419,10 @@
 #ifndef GL_ARB_transpose_matrix
 #define GL_ARB_transpose_matrix 1
 #ifdef GL_GLEXT_PROTOTYPES
-    GLAPI void APIENTRY glLoadTransposeMatrixfARB(const GLfloat *);
-    GLAPI void APIENTRY glLoadTransposeMatrixdARB(const GLdouble *);
-    GLAPI void APIENTRY glMultTransposeMatrixfARB(const GLfloat *);
-    GLAPI void APIENTRY glMultTransposeMatrixdARB(const GLdouble *);
+    GLAPI void APIENTRY glLoadTransposeMatrixfARB(const GLfloat *m);
+    GLAPI void APIENTRY glLoadTransposeMatrixdARB(const GLdouble *m);
+    GLAPI void APIENTRY glMultTransposeMatrixfARB(const GLfloat *m);
+    GLAPI void APIENTRY glMultTransposeMatrixdARB(const GLdouble *m);
 #endif /* GL_GLEXT_PROTOTYPES */
     typedef void (APIENTRYP PFNGLLOADTRANSPOSEMATRIXFARBPROC)(const GLfloat *m);
     typedef void (APIENTRYP PFNGLLOADTRANSPOSEMATRIXDARBPROC)(const GLdouble *m);
@@ -3209,7 +6433,7 @@
 #ifndef GL_ARB_multisample
 #define GL_ARB_multisample 1
 #ifdef GL_GLEXT_PROTOTYPES
-    GLAPI void APIENTRY glSampleCoverageARB(GLclampf, GLboolean);
+    GLAPI void APIENTRY glSampleCoverageARB(GLclampf value, GLboolean invert);
 #endif /* GL_GLEXT_PROTOTYPES */
     typedef void (APIENTRYP PFNGLSAMPLECOVERAGEARBPROC)(GLclampf value, GLboolean invert);
 #endif
@@ -3225,13 +6449,13 @@
 #ifndef GL_ARB_texture_compression
 #define GL_ARB_texture_compression 1
 #ifdef GL_GLEXT_PROTOTYPES
-    GLAPI void APIENTRY glCompressedTexImage3DARB(GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLsizei, const GLvoid *);
-    GLAPI void APIENTRY glCompressedTexImage2DARB(GLenum, GLint, GLenum, GLsizei, GLsizei, GLint, GLsizei, const GLvoid *);
-    GLAPI void APIENTRY glCompressedTexImage1DARB(GLenum, GLint, GLenum, GLsizei, GLint, GLsizei, const GLvoid *);
-    GLAPI void APIENTRY glCompressedTexSubImage3DARB(GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, const GLvoid *);
-    GLAPI void APIENTRY glCompressedTexSubImage2DARB(GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLsizei, const GLvoid *);
-    GLAPI void APIENTRY glCompressedTexSubImage1DARB(GLenum, GLint, GLint, GLsizei, GLenum, GLsizei, const GLvoid *);
-    GLAPI void APIENTRY glGetCompressedTexImageARB(GLenum, GLint, GLvoid *);
+    GLAPI void APIENTRY glCompressedTexImage3DARB(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *data);
+    GLAPI void APIENTRY glCompressedTexImage2DARB(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *data);
+    GLAPI void APIENTRY glCompressedTexImage1DARB(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *data);
+    GLAPI void APIENTRY glCompressedTexSubImage3DARB(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *data);
+    GLAPI void APIENTRY glCompressedTexSubImage2DARB(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *data);
+    GLAPI void APIENTRY glCompressedTexSubImage1DARB(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *data);
+    GLAPI void APIENTRY glGetCompressedTexImageARB(GLenum target, GLint level, GLvoid *img);
 #endif /* GL_GLEXT_PROTOTYPES */
     typedef void (APIENTRYP PFNGLCOMPRESSEDTEXIMAGE3DARBPROC)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *data);
     typedef void (APIENTRYP PFNGLCOMPRESSEDTEXIMAGE2DARBPROC)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *data);
@@ -3249,8 +6473,8 @@
 #ifndef GL_ARB_point_parameters
 #define GL_ARB_point_parameters 1
 #ifdef GL_GLEXT_PROTOTYPES
-    GLAPI void APIENTRY glPointParameterfARB(GLenum, GLfloat);
-    GLAPI void APIENTRY glPointParameterfvARB(GLenum, const GLfloat *);
+    GLAPI void APIENTRY glPointParameterfARB(GLenum pname, GLfloat param);
+    GLAPI void APIENTRY glPointParameterfvARB(GLenum pname, const GLfloat *params);
 #endif /* GL_GLEXT_PROTOTYPES */
     typedef void (APIENTRYP PFNGLPOINTPARAMETERFARBPROC)(GLenum pname, GLfloat param);
     typedef void (APIENTRYP PFNGLPOINTPARAMETERFVARBPROC)(GLenum pname, const GLfloat *params);
@@ -3259,16 +6483,16 @@
 #ifndef GL_ARB_vertex_blend
 #define GL_ARB_vertex_blend 1
 #ifdef GL_GLEXT_PROTOTYPES
-    GLAPI void APIENTRY glWeightbvARB(GLint, const GLbyte *);
-    GLAPI void APIENTRY glWeightsvARB(GLint, const GLshort *);
-    GLAPI void APIENTRY glWeightivARB(GLint, const GLint *);
-    GLAPI void APIENTRY glWeightfvARB(GLint, const GLfloat *);
-    GLAPI void APIENTRY glWeightdvARB(GLint, const GLdouble *);
-    GLAPI void APIENTRY glWeightubvARB(GLint, const GLubyte *);
-    GLAPI void APIENTRY glWeightusvARB(GLint, const GLushort *);
-    GLAPI void APIENTRY glWeightuivARB(GLint, const GLuint *);
-    GLAPI void APIENTRY glWeightPointerARB(GLint, GLenum, GLsizei, const GLvoid *);
-    GLAPI void APIENTRY glVertexBlendARB(GLint);
+    GLAPI void APIENTRY glWeightbvARB(GLint size, const GLbyte *weights);
+    GLAPI void APIENTRY glWeightsvARB(GLint size, const GLshort *weights);
+    GLAPI void APIENTRY glWeightivARB(GLint size, const GLint *weights);
+    GLAPI void APIENTRY glWeightfvARB(GLint size, const GLfloat *weights);
+    GLAPI void APIENTRY glWeightdvARB(GLint size, const GLdouble *weights);
+    GLAPI void APIENTRY glWeightubvARB(GLint size, const GLubyte *weights);
+    GLAPI void APIENTRY glWeightusvARB(GLint size, const GLushort *weights);
+    GLAPI void APIENTRY glWeightuivARB(GLint size, const GLuint *weights);
+    GLAPI void APIENTRY glWeightPointerARB(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
+    GLAPI void APIENTRY glVertexBlendARB(GLint count);
 #endif /* GL_GLEXT_PROTOTYPES */
     typedef void (APIENTRYP PFNGLWEIGHTBVARBPROC)(GLint size, const GLbyte *weights);
     typedef void (APIENTRYP PFNGLWEIGHTSVARBPROC)(GLint size, const GLshort *weights);
@@ -3285,11 +6509,11 @@
 #ifndef GL_ARB_matrix_palette
 #define GL_ARB_matrix_palette 1
 #ifdef GL_GLEXT_PROTOTYPES
-    GLAPI void APIENTRY glCurrentPaletteMatrixARB(GLint);
-    GLAPI void APIENTRY glMatrixIndexubvARB(GLint, const GLubyte *);
-    GLAPI void APIENTRY glMatrixIndexusvARB(GLint, const GLushort *);
-    GLAPI void APIENTRY glMatrixIndexuivARB(GLint, const GLuint *);
-    GLAPI void APIENTRY glMatrixIndexPointerARB(GLint, GLenum, GLsizei, const GLvoid *);
+    GLAPI void APIENTRY glCurrentPaletteMatrixARB(GLint index);
+    GLAPI void APIENTRY glMatrixIndexubvARB(GLint size, const GLubyte *indices);
+    GLAPI void APIENTRY glMatrixIndexusvARB(GLint size, const GLushort *indices);
+    GLAPI void APIENTRY glMatrixIndexuivARB(GLint size, const GLuint *indices);
+    GLAPI void APIENTRY glMatrixIndexPointerARB(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
 #endif /* GL_GLEXT_PROTOTYPES */
     typedef void (APIENTRYP PFNGLCURRENTPALETTEMATRIXARBPROC)(GLint index);
     typedef void (APIENTRYP PFNGLMATRIXINDEXUBVARBPROC)(GLint size, const GLubyte *indices);
@@ -3310,8 +6534,8 @@
 #define GL_ARB_texture_env_dot3 1
 #endif
 
-#ifndef GL_ARB_texture_mirror_repeat
-#define GL_ARB_texture_mirror_repeat 1
+#ifndef GL_ARB_texture_mirrored_repeat
+#define GL_ARB_texture_mirrored_repeat 1
 #endif
 
 #ifndef GL_ARB_depth_texture
@@ -3329,22 +6553,22 @@
 #ifndef GL_ARB_window_pos
 #define GL_ARB_window_pos 1
 #ifdef GL_GLEXT_PROTOTYPES
-    GLAPI void APIENTRY glWindowPos2dARB(GLdouble, GLdouble);
-    GLAPI void APIENTRY glWindowPos2dvARB(const GLdouble *);
-    GLAPI void APIENTRY glWindowPos2fARB(GLfloat, GLfloat);
-    GLAPI void APIENTRY glWindowPos2fvARB(const GLfloat *);
-    GLAPI void APIENTRY glWindowPos2iARB(GLint, GLint);
-    GLAPI void APIENTRY glWindowPos2ivARB(const GLint *);
-    GLAPI void APIENTRY glWindowPos2sARB(GLshort, GLshort);
-    GLAPI void APIENTRY glWindowPos2svARB(const GLshort *);
-    GLAPI void APIENTRY glWindowPos3dARB(GLdouble, GLdouble, GLdouble);
-    GLAPI void APIENTRY glWindowPos3dvARB(const GLdouble *);
-    GLAPI void APIENTRY glWindowPos3fARB(GLfloat, GLfloat, GLfloat);
-    GLAPI void APIENTRY glWindowPos3fvARB(const GLfloat *);
-    GLAPI void APIENTRY glWindowPos3iARB(GLint, GLint, GLint);
-    GLAPI void APIENTRY glWindowPos3ivARB(const GLint *);
-    GLAPI void APIENTRY glWindowPos3sARB(GLshort, GLshort, GLshort);
-    GLAPI void APIENTRY glWindowPos3svARB(const GLshort *);
+    GLAPI void APIENTRY glWindowPos2dARB(GLdouble x, GLdouble y);
+    GLAPI void APIENTRY glWindowPos2dvARB(const GLdouble *v);
+    GLAPI void APIENTRY glWindowPos2fARB(GLfloat x, GLfloat y);
+    GLAPI void APIENTRY glWindowPos2fvARB(const GLfloat *v);
+    GLAPI void APIENTRY glWindowPos2iARB(GLint x, GLint y);
+    GLAPI void APIENTRY glWindowPos2ivARB(const GLint *v);
+    GLAPI void APIENTRY glWindowPos2sARB(GLshort x, GLshort y);
+    GLAPI void APIENTRY glWindowPos2svARB(const GLshort *v);
+    GLAPI void APIENTRY glWindowPos3dARB(GLdouble x, GLdouble y, GLdouble z);
+    GLAPI void APIENTRY glWindowPos3dvARB(const GLdouble *v);
+    GLAPI void APIENTRY glWindowPos3fARB(GLfloat x, GLfloat y, GLfloat z);
+    GLAPI void APIENTRY glWindowPos3fvARB(const GLfloat *v);
+    GLAPI void APIENTRY glWindowPos3iARB(GLint x, GLint y, GLint z);
+    GLAPI void APIENTRY glWindowPos3ivARB(const GLint *v);
+    GLAPI void APIENTRY glWindowPos3sARB(GLshort x, GLshort y, GLshort z);
+    GLAPI void APIENTRY glWindowPos3svARB(const GLshort *v);
 #endif /* GL_GLEXT_PROTOTYPES */
     typedef void (APIENTRYP PFNGLWINDOWPOS2DARBPROC)(GLdouble x, GLdouble y);
     typedef void (APIENTRYP PFNGLWINDOWPOS2DVARBPROC)(const GLdouble *v);
@@ -3367,68 +6591,68 @@
 #ifndef GL_ARB_vertex_program
 #define GL_ARB_vertex_program 1
 #ifdef GL_GLEXT_PROTOTYPES
-    GLAPI void APIENTRY glVertexAttrib1dARB(GLuint, GLdouble);
-    GLAPI void APIENTRY glVertexAttrib1dvARB(GLuint, const GLdouble *);
-    GLAPI void APIENTRY glVertexAttrib1fARB(GLuint, GLfloat);
-    GLAPI void APIENTRY glVertexAttrib1fvARB(GLuint, const GLfloat *);
-    GLAPI void APIENTRY glVertexAttrib1sARB(GLuint, GLshort);
-    GLAPI void APIENTRY glVertexAttrib1svARB(GLuint, const GLshort *);
-    GLAPI void APIENTRY glVertexAttrib2dARB(GLuint, GLdouble, GLdouble);
-    GLAPI void APIENTRY glVertexAttrib2dvARB(GLuint, const GLdouble *);
-    GLAPI void APIENTRY glVertexAttrib2fARB(GLuint, GLfloat, GLfloat);
-    GLAPI void APIENTRY glVertexAttrib2fvARB(GLuint, const GLfloat *);
-    GLAPI void APIENTRY glVertexAttrib2sARB(GLuint, GLshort, GLshort);
-    GLAPI void APIENTRY glVertexAttrib2svARB(GLuint, const GLshort *);
-    GLAPI void APIENTRY glVertexAttrib3dARB(GLuint, GLdouble, GLdouble, GLdouble);
-    GLAPI void APIENTRY glVertexAttrib3dvARB(GLuint, const GLdouble *);
-    GLAPI void APIENTRY glVertexAttrib3fARB(GLuint, GLfloat, GLfloat, GLfloat);
-    GLAPI void APIENTRY glVertexAttrib3fvARB(GLuint, const GLfloat *);
-    GLAPI void APIENTRY glVertexAttrib3sARB(GLuint, GLshort, GLshort, GLshort);
-    GLAPI void APIENTRY glVertexAttrib3svARB(GLuint, const GLshort *);
-    GLAPI void APIENTRY glVertexAttrib4NbvARB(GLuint, const GLbyte *);
-    GLAPI void APIENTRY glVertexAttrib4NivARB(GLuint, const GLint *);
-    GLAPI void APIENTRY glVertexAttrib4NsvARB(GLuint, const GLshort *);
-    GLAPI void APIENTRY glVertexAttrib4NubARB(GLuint, GLubyte, GLubyte, GLubyte, GLubyte);
-    GLAPI void APIENTRY glVertexAttrib4NubvARB(GLuint, const GLubyte *);
-    GLAPI void APIENTRY glVertexAttrib4NuivARB(GLuint, const GLuint *);
-    GLAPI void APIENTRY glVertexAttrib4NusvARB(GLuint, const GLushort *);
-    GLAPI void APIENTRY glVertexAttrib4bvARB(GLuint, const GLbyte *);
-    GLAPI void APIENTRY glVertexAttrib4dARB(GLuint, GLdouble, GLdouble, GLdouble, GLdouble);
-    GLAPI void APIENTRY glVertexAttrib4dvARB(GLuint, const GLdouble *);
-    GLAPI void APIENTRY glVertexAttrib4fARB(GLuint, GLfloat, GLfloat, GLfloat, GLfloat);
-    GLAPI void APIENTRY glVertexAttrib4fvARB(GLuint, const GLfloat *);
-    GLAPI void APIENTRY glVertexAttrib4ivARB(GLuint, const GLint *);
-    GLAPI void APIENTRY glVertexAttrib4sARB(GLuint, GLshort, GLshort, GLshort, GLshort);
-    GLAPI void APIENTRY glVertexAttrib4svARB(GLuint, const GLshort *);
-    GLAPI void APIENTRY glVertexAttrib4ubvARB(GLuint, const GLubyte *);
-    GLAPI void APIENTRY glVertexAttrib4uivARB(GLuint, const GLuint *);
-    GLAPI void APIENTRY glVertexAttrib4usvARB(GLuint, const GLushort *);
-    GLAPI void APIENTRY glVertexAttribPointerARB(GLuint, GLint, GLenum, GLboolean, GLsizei, const GLvoid *);
-    GLAPI void APIENTRY glEnableVertexAttribArrayARB(GLuint);
-    GLAPI void APIENTRY glDisableVertexAttribArrayARB(GLuint);
-    GLAPI void APIENTRY glProgramStringARB(GLenum, GLenum, GLsizei, const GLvoid *);
-    GLAPI void APIENTRY glBindProgramARB(GLenum, GLuint);
-    GLAPI void APIENTRY glDeleteProgramsARB(GLsizei, const GLuint *);
-    GLAPI void APIENTRY glGenProgramsARB(GLsizei, GLuint *);
-    GLAPI void APIENTRY glProgramEnvParameter4dARB(GLenum, GLuint, GLdouble, GLdouble, GLdouble, GLdouble);
-    GLAPI void APIENTRY glProgramEnvParameter4dvARB(GLenum, GLuint, const GLdouble *);
-    GLAPI void APIENTRY glProgramEnvParameter4fARB(GLenum, GLuint, GLfloat, GLfloat, GLfloat, GLfloat);
-    GLAPI void APIENTRY glProgramEnvParameter4fvARB(GLenum, GLuint, const GLfloat *);
-    GLAPI void APIENTRY glProgramLocalParameter4dARB(GLenum, GLuint, GLdouble, GLdouble, GLdouble, GLdouble);
-    GLAPI void APIENTRY glProgramLocalParameter4dvARB(GLenum, GLuint, const GLdouble *);
-    GLAPI void APIENTRY glProgramLocalParameter4fARB(GLenum, GLuint, GLfloat, GLfloat, GLfloat, GLfloat);
-    GLAPI void APIENTRY glProgramLocalParameter4fvARB(GLenum, GLuint, const GLfloat *);
-    GLAPI void APIENTRY glGetProgramEnvParameterdvARB(GLenum, GLuint, GLdouble *);
-    GLAPI void APIENTRY glGetProgramEnvParameterfvARB(GLenum, GLuint, GLfloat *);
-    GLAPI void APIENTRY glGetProgramLocalParameterdvARB(GLenum, GLuint, GLdouble *);
-    GLAPI void APIENTRY glGetProgramLocalParameterfvARB(GLenum, GLuint, GLfloat *);
-    GLAPI void APIENTRY glGetProgramivARB(GLenum, GLenum, GLint *);
-    GLAPI void APIENTRY glGetProgramStringARB(GLenum, GLenum, GLvoid *);
-    GLAPI void APIENTRY glGetVertexAttribdvARB(GLuint, GLenum, GLdouble *);
-    GLAPI void APIENTRY glGetVertexAttribfvARB(GLuint, GLenum, GLfloat *);
-    GLAPI void APIENTRY glGetVertexAttribivARB(GLuint, GLenum, GLint *);
-    GLAPI void APIENTRY glGetVertexAttribPointervARB(GLuint, GLenum, GLvoid* *);
-    GLAPI GLboolean APIENTRY glIsProgramARB(GLuint);
+    GLAPI void APIENTRY glVertexAttrib1dARB(GLuint index, GLdouble x);
+    GLAPI void APIENTRY glVertexAttrib1dvARB(GLuint index, const GLdouble *v);
+    GLAPI void APIENTRY glVertexAttrib1fARB(GLuint index, GLfloat x);
+    GLAPI void APIENTRY glVertexAttrib1fvARB(GLuint index, const GLfloat *v);
+    GLAPI void APIENTRY glVertexAttrib1sARB(GLuint index, GLshort x);
+    GLAPI void APIENTRY glVertexAttrib1svARB(GLuint index, const GLshort *v);
+    GLAPI void APIENTRY glVertexAttrib2dARB(GLuint index, GLdouble x, GLdouble y);
+    GLAPI void APIENTRY glVertexAttrib2dvARB(GLuint index, const GLdouble *v);
+    GLAPI void APIENTRY glVertexAttrib2fARB(GLuint index, GLfloat x, GLfloat y);
+    GLAPI void APIENTRY glVertexAttrib2fvARB(GLuint index, const GLfloat *v);
+    GLAPI void APIENTRY glVertexAttrib2sARB(GLuint index, GLshort x, GLshort y);
+    GLAPI void APIENTRY glVertexAttrib2svARB(GLuint index, const GLshort *v);
+    GLAPI void APIENTRY glVertexAttrib3dARB(GLuint index, GLdouble x, GLdouble y, GLdouble z);
+    GLAPI void APIENTRY glVertexAttrib3dvARB(GLuint index, const GLdouble *v);
+    GLAPI void APIENTRY glVertexAttrib3fARB(GLuint index, GLfloat x, GLfloat y, GLfloat z);
+    GLAPI void APIENTRY glVertexAttrib3fvARB(GLuint index, const GLfloat *v);
+    GLAPI void APIENTRY glVertexAttrib3sARB(GLuint index, GLshort x, GLshort y, GLshort z);
+    GLAPI void APIENTRY glVertexAttrib3svARB(GLuint index, const GLshort *v);
+    GLAPI void APIENTRY glVertexAttrib4NbvARB(GLuint index, const GLbyte *v);
+    GLAPI void APIENTRY glVertexAttrib4NivARB(GLuint index, const GLint *v);
+    GLAPI void APIENTRY glVertexAttrib4NsvARB(GLuint index, const GLshort *v);
+    GLAPI void APIENTRY glVertexAttrib4NubARB(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
+    GLAPI void APIENTRY glVertexAttrib4NubvARB(GLuint index, const GLubyte *v);
+    GLAPI void APIENTRY glVertexAttrib4NuivARB(GLuint index, const GLuint *v);
+    GLAPI void APIENTRY glVertexAttrib4NusvARB(GLuint index, const GLushort *v);
+    GLAPI void APIENTRY glVertexAttrib4bvARB(GLuint index, const GLbyte *v);
+    GLAPI void APIENTRY glVertexAttrib4dARB(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
+    GLAPI void APIENTRY glVertexAttrib4dvARB(GLuint index, const GLdouble *v);
+    GLAPI void APIENTRY glVertexAttrib4fARB(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
+    GLAPI void APIENTRY glVertexAttrib4fvARB(GLuint index, const GLfloat *v);
+    GLAPI void APIENTRY glVertexAttrib4ivARB(GLuint index, const GLint *v);
+    GLAPI void APIENTRY glVertexAttrib4sARB(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
+    GLAPI void APIENTRY glVertexAttrib4svARB(GLuint index, const GLshort *v);
+    GLAPI void APIENTRY glVertexAttrib4ubvARB(GLuint index, const GLubyte *v);
+    GLAPI void APIENTRY glVertexAttrib4uivARB(GLuint index, const GLuint *v);
+    GLAPI void APIENTRY glVertexAttrib4usvARB(GLuint index, const GLushort *v);
+    GLAPI void APIENTRY glVertexAttribPointerARB(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLvoid *pointer);
+    GLAPI void APIENTRY glEnableVertexAttribArrayARB(GLuint index);
+    GLAPI void APIENTRY glDisableVertexAttribArrayARB(GLuint index);
+    GLAPI void APIENTRY glProgramStringARB(GLenum target, GLenum format, GLsizei len, const GLvoid *string);
+    GLAPI void APIENTRY glBindProgramARB(GLenum target, GLuint program);
+    GLAPI void APIENTRY glDeleteProgramsARB(GLsizei n, const GLuint *programs);
+    GLAPI void APIENTRY glGenProgramsARB(GLsizei n, GLuint *programs);
+    GLAPI void APIENTRY glProgramEnvParameter4dARB(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
+    GLAPI void APIENTRY glProgramEnvParameter4dvARB(GLenum target, GLuint index, const GLdouble *params);
+    GLAPI void APIENTRY glProgramEnvParameter4fARB(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
+    GLAPI void APIENTRY glProgramEnvParameter4fvARB(GLenum target, GLuint index, const GLfloat *params);
+    GLAPI void APIENTRY glProgramLocalParameter4dARB(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
+    GLAPI void APIENTRY glProgramLocalParameter4dvARB(GLenum target, GLuint index, const GLdouble *params);
+    GLAPI void APIENTRY glProgramLocalParameter4fARB(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
+    GLAPI void APIENTRY glProgramLocalParameter4fvARB(GLenum target, GLuint index, const GLfloat *params);
+    GLAPI void APIENTRY glGetProgramEnvParameterdvARB(GLenum target, GLuint index, GLdouble *params);
+    GLAPI void APIENTRY glGetProgramEnvParameterfvARB(GLenum target, GLuint index, GLfloat *params);
+    GLAPI void APIENTRY glGetProgramLocalParameterdvARB(GLenum target, GLuint index, GLdouble *params);
+    GLAPI void APIENTRY glGetProgramLocalParameterfvARB(GLenum target, GLuint index, GLfloat *params);
+    GLAPI void APIENTRY glGetProgramivARB(GLenum target, GLenum pname, GLint *params);
+    GLAPI void APIENTRY glGetProgramStringARB(GLenum target, GLenum pname, GLvoid *string);
+    GLAPI void APIENTRY glGetVertexAttribdvARB(GLuint index, GLenum pname, GLdouble *params);
+    GLAPI void APIENTRY glGetVertexAttribfvARB(GLuint index, GLenum pname, GLfloat *params);
+    GLAPI void APIENTRY glGetVertexAttribivARB(GLuint index, GLenum pname, GLint *params);
+    GLAPI void APIENTRY glGetVertexAttribPointervARB(GLuint index, GLenum pname, GLvoid* *pointer);
+    GLAPI GLboolean APIENTRY glIsProgramARB(GLuint program);
 #endif /* GL_GLEXT_PROTOTYPES */
     typedef void (APIENTRYP PFNGLVERTEXATTRIB1DARBPROC)(GLuint index, GLdouble x);
     typedef void (APIENTRYP PFNGLVERTEXATTRIB1DVARBPROC)(GLuint index, const GLdouble *v);
@@ -3502,17 +6726,17 @@
 #ifndef GL_ARB_vertex_buffer_object
 #define GL_ARB_vertex_buffer_object 1
 #ifdef GL_GLEXT_PROTOTYPES
-    GLAPI void APIENTRY glBindBufferARB(GLenum, GLuint);
-    GLAPI void APIENTRY glDeleteBuffersARB(GLsizei, const GLuint *);
-    GLAPI void APIENTRY glGenBuffersARB(GLsizei, GLuint *);
-    GLAPI GLboolean APIENTRY glIsBufferARB(GLuint);
-    GLAPI void APIENTRY glBufferDataARB(GLenum, GLsizeiptrARB, const GLvoid *, GLenum);
-    GLAPI void APIENTRY glBufferSubDataARB(GLenum, GLintptrARB, GLsizeiptrARB, const GLvoid *);
-    GLAPI void APIENTRY glGetBufferSubDataARB(GLenum, GLintptrARB, GLsizeiptrARB, GLvoid *);
-    GLAPI GLvoid* APIENTRY glMapBufferARB(GLenum, GLenum);
-    GLAPI GLboolean APIENTRY glUnmapBufferARB(GLenum);
-    GLAPI void APIENTRY glGetBufferParameterivARB(GLenum, GLenum, GLint *);
-    GLAPI void APIENTRY glGetBufferPointervARB(GLenum, GLenum, GLvoid* *);
+    GLAPI void APIENTRY glBindBufferARB(GLenum target, GLuint buffer);
+    GLAPI void APIENTRY glDeleteBuffersARB(GLsizei n, const GLuint *buffers);
+    GLAPI void APIENTRY glGenBuffersARB(GLsizei n, GLuint *buffers);
+    GLAPI GLboolean APIENTRY glIsBufferARB(GLuint buffer);
+    GLAPI void APIENTRY glBufferDataARB(GLenum target, GLsizeiptrARB size, const GLvoid *data, GLenum usage);
+    GLAPI void APIENTRY glBufferSubDataARB(GLenum target, GLintptrARB offset, GLsizeiptrARB size, const GLvoid *data);
+    GLAPI void APIENTRY glGetBufferSubDataARB(GLenum target, GLintptrARB offset, GLsizeiptrARB size, GLvoid *data);
+    GLAPI GLvoid* APIENTRY glMapBufferARB(GLenum target, GLenum access);
+    GLAPI GLboolean APIENTRY glUnmapBufferARB(GLenum target);
+    GLAPI void APIENTRY glGetBufferParameterivARB(GLenum target, GLenum pname, GLint *params);
+    GLAPI void APIENTRY glGetBufferPointervARB(GLenum target, GLenum pname, GLvoid* *params);
 #endif /* GL_GLEXT_PROTOTYPES */
     typedef void (APIENTRYP PFNGLBINDBUFFERARBPROC)(GLenum target, GLuint buffer);
     typedef void (APIENTRYP PFNGLDELETEBUFFERSARBPROC)(GLsizei n, const GLuint *buffers);
@@ -3530,14 +6754,14 @@
 #ifndef GL_ARB_occlusion_query
 #define GL_ARB_occlusion_query 1
 #ifdef GL_GLEXT_PROTOTYPES
-    GLAPI void APIENTRY glGenQueriesARB(GLsizei, GLuint *);
-    GLAPI void APIENTRY glDeleteQueriesARB(GLsizei, const GLuint *);
-    GLAPI GLboolean APIENTRY glIsQueryARB(GLuint);
-    GLAPI void APIENTRY glBeginQueryARB(GLenum, GLuint);
-    GLAPI void APIENTRY glEndQueryARB(GLenum);
-    GLAPI void APIENTRY glGetQueryivARB(GLenum, GLenum, GLint *);
-    GLAPI void APIENTRY glGetQueryObjectivARB(GLuint, GLenum, GLint *);
-    GLAPI void APIENTRY glGetQueryObjectuivARB(GLuint, GLenum, GLuint *);
+    GLAPI void APIENTRY glGenQueriesARB(GLsizei n, GLuint *ids);
+    GLAPI void APIENTRY glDeleteQueriesARB(GLsizei n, const GLuint *ids);
+    GLAPI GLboolean APIENTRY glIsQueryARB(GLuint id);
+    GLAPI void APIENTRY glBeginQueryARB(GLenum target, GLuint id);
+    GLAPI void APIENTRY glEndQueryARB(GLenum target);
+    GLAPI void APIENTRY glGetQueryivARB(GLenum target, GLenum pname, GLint *params);
+    GLAPI void APIENTRY glGetQueryObjectivARB(GLuint id, GLenum pname, GLint *params);
+    GLAPI void APIENTRY glGetQueryObjectuivARB(GLuint id, GLenum pname, GLuint *params);
 #endif /* GL_GLEXT_PROTOTYPES */
     typedef void (APIENTRYP PFNGLGENQUERIESARBPROC)(GLsizei n, GLuint *ids);
     typedef void (APIENTRYP PFNGLDELETEQUERIESARBPROC)(GLsizei n, const GLuint *ids);
@@ -3552,45 +6776,45 @@
 #ifndef GL_ARB_shader_objects
 #define GL_ARB_shader_objects 1
 #ifdef GL_GLEXT_PROTOTYPES
-    GLAPI void APIENTRY glDeleteObjectARB(GLhandleARB);
-    GLAPI GLhandleARB APIENTRY glGetHandleARB(GLenum);
-    GLAPI void APIENTRY glDetachObjectARB(GLhandleARB, GLhandleARB);
-    GLAPI GLhandleARB APIENTRY glCreateShaderObjectARB(GLenum);
-    GLAPI void APIENTRY glShaderSourceARB(GLhandleARB, GLsizei, const GLcharARB* *, const GLint *);
-    GLAPI void APIENTRY glCompileShaderARB(GLhandleARB);
+    GLAPI void APIENTRY glDeleteObjectARB(GLhandleARB obj);
+    GLAPI GLhandleARB APIENTRY glGetHandleARB(GLenum pname);
+    GLAPI void APIENTRY glDetachObjectARB(GLhandleARB containerObj, GLhandleARB attachedObj);
+    GLAPI GLhandleARB APIENTRY glCreateShaderObjectARB(GLenum shaderType);
+    GLAPI void APIENTRY glShaderSourceARB(GLhandleARB shaderObj, GLsizei count, const GLcharARB* *string, const GLint *length);
+    GLAPI void APIENTRY glCompileShaderARB(GLhandleARB shaderObj);
     GLAPI GLhandleARB APIENTRY glCreateProgramObjectARB(void);
-    GLAPI void APIENTRY glAttachObjectARB(GLhandleARB, GLhandleARB);
-    GLAPI void APIENTRY glLinkProgramARB(GLhandleARB);
-    GLAPI void APIENTRY glUseProgramObjectARB(GLhandleARB);
-    GLAPI void APIENTRY glValidateProgramARB(GLhandleARB);
-    GLAPI void APIENTRY glUniform1fARB(GLint, GLfloat);
-    GLAPI void APIENTRY glUniform2fARB(GLint, GLfloat, GLfloat);
-    GLAPI void APIENTRY glUniform3fARB(GLint, GLfloat, GLfloat, GLfloat);
-    GLAPI void APIENTRY glUniform4fARB(GLint, GLfloat, GLfloat, GLfloat, GLfloat);
-    GLAPI void APIENTRY glUniform1iARB(GLint, GLint);
-    GLAPI void APIENTRY glUniform2iARB(GLint, GLint, GLint);
-    GLAPI void APIENTRY glUniform3iARB(GLint, GLint, GLint, GLint);
-    GLAPI void APIENTRY glUniform4iARB(GLint, GLint, GLint, GLint, GLint);
-    GLAPI void APIENTRY glUniform1fvARB(GLint, GLsizei, const GLfloat *);
-    GLAPI void APIENTRY glUniform2fvARB(GLint, GLsizei, const GLfloat *);
-    GLAPI void APIENTRY glUniform3fvARB(GLint, GLsizei, const GLfloat *);
-    GLAPI void APIENTRY glUniform4fvARB(GLint, GLsizei, const GLfloat *);
-    GLAPI void APIENTRY glUniform1ivARB(GLint, GLsizei, const GLint *);
-    GLAPI void APIENTRY glUniform2ivARB(GLint, GLsizei, const GLint *);
-    GLAPI void APIENTRY glUniform3ivARB(GLint, GLsizei, const GLint *);
-    GLAPI void APIENTRY glUniform4ivARB(GLint, GLsizei, const GLint *);
-    GLAPI void APIENTRY glUniformMatrix2fvARB(GLint, GLsizei, GLboolean, const GLfloat *);
-    GLAPI void APIENTRY glUniformMatrix3fvARB(GLint, GLsizei, GLboolean, const GLfloat *);
-    GLAPI void APIENTRY glUniformMatrix4fvARB(GLint, GLsizei, GLboolean, const GLfloat *);
-    GLAPI void APIENTRY glGetObjectParameterfvARB(GLhandleARB, GLenum, GLfloat *);
-    GLAPI void APIENTRY glGetObjectParameterivARB(GLhandleARB, GLenum, GLint *);
-    GLAPI void APIENTRY glGetInfoLogARB(GLhandleARB, GLsizei, GLsizei *, GLcharARB *);
-    GLAPI void APIENTRY glGetAttachedObjectsARB(GLhandleARB, GLsizei, GLsizei *, GLhandleARB *);
-    GLAPI GLint APIENTRY glGetUniformLocationARB(GLhandleARB, const GLcharARB *);
-    GLAPI void APIENTRY glGetActiveUniformARB(GLhandleARB, GLuint, GLsizei, GLsizei *, GLint *, GLenum *, GLcharARB *);
-    GLAPI void APIENTRY glGetUniformfvARB(GLhandleARB, GLint, GLfloat *);
-    GLAPI void APIENTRY glGetUniformivARB(GLhandleARB, GLint, GLint *);
-    GLAPI void APIENTRY glGetShaderSourceARB(GLhandleARB, GLsizei, GLsizei *, GLcharARB *);
+    GLAPI void APIENTRY glAttachObjectARB(GLhandleARB containerObj, GLhandleARB obj);
+    GLAPI void APIENTRY glLinkProgramARB(GLhandleARB programObj);
+    GLAPI void APIENTRY glUseProgramObjectARB(GLhandleARB programObj);
+    GLAPI void APIENTRY glValidateProgramARB(GLhandleARB programObj);
+    GLAPI void APIENTRY glUniform1fARB(GLint location, GLfloat v0);
+    GLAPI void APIENTRY glUniform2fARB(GLint location, GLfloat v0, GLfloat v1);
+    GLAPI void APIENTRY glUniform3fARB(GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
+    GLAPI void APIENTRY glUniform4fARB(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
+    GLAPI void APIENTRY glUniform1iARB(GLint location, GLint v0);
+    GLAPI void APIENTRY glUniform2iARB(GLint location, GLint v0, GLint v1);
+    GLAPI void APIENTRY glUniform3iARB(GLint location, GLint v0, GLint v1, GLint v2);
+    GLAPI void APIENTRY glUniform4iARB(GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
+    GLAPI void APIENTRY glUniform1fvARB(GLint location, GLsizei count, const GLfloat *value);
+    GLAPI void APIENTRY glUniform2fvARB(GLint location, GLsizei count, const GLfloat *value);
+    GLAPI void APIENTRY glUniform3fvARB(GLint location, GLsizei count, const GLfloat *value);
+    GLAPI void APIENTRY glUniform4fvARB(GLint location, GLsizei count, const GLfloat *value);
+    GLAPI void APIENTRY glUniform1ivARB(GLint location, GLsizei count, const GLint *value);
+    GLAPI void APIENTRY glUniform2ivARB(GLint location, GLsizei count, const GLint *value);
+    GLAPI void APIENTRY glUniform3ivARB(GLint location, GLsizei count, const GLint *value);
+    GLAPI void APIENTRY glUniform4ivARB(GLint location, GLsizei count, const GLint *value);
+    GLAPI void APIENTRY glUniformMatrix2fvARB(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
+    GLAPI void APIENTRY glUniformMatrix3fvARB(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
+    GLAPI void APIENTRY glUniformMatrix4fvARB(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
+    GLAPI void APIENTRY glGetObjectParameterfvARB(GLhandleARB obj, GLenum pname, GLfloat *params);
+    GLAPI void APIENTRY glGetObjectParameterivARB(GLhandleARB obj, GLenum pname, GLint *params);
+    GLAPI void APIENTRY glGetInfoLogARB(GLhandleARB obj, GLsizei maxLength, GLsizei *length, GLcharARB *infoLog);
+    GLAPI void APIENTRY glGetAttachedObjectsARB(GLhandleARB containerObj, GLsizei maxCount, GLsizei *count, GLhandleARB *obj);
+    GLAPI GLint APIENTRY glGetUniformLocationARB(GLhandleARB programObj, const GLcharARB *name);
+    GLAPI void APIENTRY glGetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei *length, GLint *size, GLenum *type, GLcharARB *name);
+    GLAPI void APIENTRY glGetUniformfvARB(GLhandleARB programObj, GLint location, GLfloat *params);
+    GLAPI void APIENTRY glGetUniformivARB(GLhandleARB programObj, GLint location, GLint *params);
+    GLAPI void APIENTRY glGetShaderSourceARB(GLhandleARB obj, GLsizei maxLength, GLsizei *length, GLcharARB *source);
 #endif /* GL_GLEXT_PROTOTYPES */
     typedef void (APIENTRYP PFNGLDELETEOBJECTARBPROC)(GLhandleARB obj);
     typedef GLhandleARB(APIENTRYP PFNGLGETHANDLEARBPROC)(GLenum pname);
@@ -3636,9 +6860,9 @@
 #ifndef GL_ARB_vertex_shader
 #define GL_ARB_vertex_shader 1
 #ifdef GL_GLEXT_PROTOTYPES
-    GLAPI void APIENTRY glBindAttribLocationARB(GLhandleARB, GLuint, const GLcharARB *);
-    GLAPI void APIENTRY glGetActiveAttribARB(GLhandleARB, GLuint, GLsizei, GLsizei *, GLint *, GLenum *, GLcharARB *);
-    GLAPI GLint APIENTRY glGetAttribLocationARB(GLhandleARB, const GLcharARB *);
+    GLAPI void APIENTRY glBindAttribLocationARB(GLhandleARB programObj, GLuint index, const GLcharARB *name);
+    GLAPI void APIENTRY glGetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei *length, GLint *size, GLenum *type, GLcharARB *name);
+    GLAPI GLint APIENTRY glGetAttribLocationARB(GLhandleARB programObj, const GLcharARB *name);
 #endif /* GL_GLEXT_PROTOTYPES */
     typedef void (APIENTRYP PFNGLBINDATTRIBLOCATIONARBPROC)(GLhandleARB programObj, GLuint index, const GLcharARB *name);
     typedef void (APIENTRYP PFNGLGETACTIVEATTRIBARBPROC)(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei *length, GLint *size, GLenum *type, GLcharARB *name);
@@ -3661,6 +6885,984 @@
 #define GL_ARB_point_sprite 1
 #endif
 
+#ifndef GL_ARB_fragment_program_shadow
+#define GL_ARB_fragment_program_shadow 1
+#endif
+
+#ifndef GL_ARB_draw_buffers
+#define GL_ARB_draw_buffers 1
+#ifdef GL_GLEXT_PROTOTYPES
+    GLAPI void APIENTRY glDrawBuffersARB(GLsizei n, const GLenum *bufs);
+#endif /* GL_GLEXT_PROTOTYPES */
+    typedef void (APIENTRYP PFNGLDRAWBUFFERSARBPROC)(GLsizei n, const GLenum *bufs);
+#endif
+
+#ifndef GL_ARB_texture_rectangle
+#define GL_ARB_texture_rectangle 1
+#endif
+
+#ifndef GL_ARB_color_buffer_float
+#define GL_ARB_color_buffer_float 1
+#ifdef GL_GLEXT_PROTOTYPES
+    GLAPI void APIENTRY glClampColorARB(GLenum target, GLenum clamp);
+#endif /* GL_GLEXT_PROTOTYPES */
+    typedef void (APIENTRYP PFNGLCLAMPCOLORARBPROC)(GLenum target, GLenum clamp);
+#endif
+
+#ifndef GL_ARB_half_float_pixel
+#define GL_ARB_half_float_pixel 1
+#endif
+
+#ifndef GL_ARB_texture_float
+#define GL_ARB_texture_float 1
+#endif
+
+#ifndef GL_ARB_pixel_buffer_object
+#define GL_ARB_pixel_buffer_object 1
+#endif
+
+#ifndef GL_ARB_depth_buffer_float
+#define GL_ARB_depth_buffer_float 1
+#endif
+
+#ifndef GL_ARB_draw_instanced
+#define GL_ARB_draw_instanced 1
+#ifdef GL_GLEXT_PROTOTYPES
+    GLAPI void APIENTRY glDrawArraysInstancedARB(GLenum mode, GLint first, GLsizei count, GLsizei primcount);
+    GLAPI void APIENTRY glDrawElementsInstancedARB(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount);
+#endif /* GL_GLEXT_PROTOTYPES */
+    typedef void (APIENTRYP PFNGLDRAWARRAYSINSTANCEDARBPROC)(GLenum mode, GLint first, GLsizei count, GLsizei primcount);
+    typedef void (APIENTRYP PFNGLDRAWELEMENTSINSTANCEDARBPROC)(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount);
+#endif
+
+#ifndef GL_ARB_framebuffer_object
+#define GL_ARB_framebuffer_object 1
+#ifdef GL_GLEXT_PROTOTYPES
+    GLAPI GLboolean APIENTRY glIsRenderbuffer(GLuint renderbuffer);
+    GLAPI void APIENTRY glBindRenderbuffer(GLenum target, GLuint renderbuffer);
+    GLAPI void APIENTRY glDeleteRenderbuffers(GLsizei n, const GLuint *renderbuffers);
+    GLAPI void APIENTRY glGenRenderbuffers(GLsizei n, GLuint *renderbuffers);
+    GLAPI void APIENTRY glRenderbufferStorage(GLenum target, GLenum internalformat, GLsizei width, GLsizei height);
+    GLAPI void APIENTRY glGetRenderbufferParameteriv(GLenum target, GLenum pname, GLint *params);
+    GLAPI GLboolean APIENTRY glIsFramebuffer(GLuint framebuffer);
+    GLAPI void APIENTRY glBindFramebuffer(GLenum target, GLuint framebuffer);
+    GLAPI void APIENTRY glDeleteFramebuffers(GLsizei n, const GLuint *framebuffers);
+    GLAPI void APIENTRY glGenFramebuffers(GLsizei n, GLuint *framebuffers);
+    GLAPI GLenum APIENTRY glCheckFramebufferStatus(GLenum target);
+    GLAPI void APIENTRY glFramebufferTexture1D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
+    GLAPI void APIENTRY glFramebufferTexture2D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
+    GLAPI void APIENTRY glFramebufferTexture3D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);
+    GLAPI void APIENTRY glFramebufferRenderbuffer(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
+    GLAPI void APIENTRY glGetFramebufferAttachmentParameteriv(GLenum target, GLenum attachment, GLenum pname, GLint *params);
+    GLAPI void APIENTRY glGenerateMipmap(GLenum target);
+    GLAPI void APIENTRY glBlitFramebuffer(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
+    GLAPI void APIENTRY glRenderbufferStorageMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
+    GLAPI void APIENTRY glFramebufferTextureLayer(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);
+#endif /* GL_GLEXT_PROTOTYPES */
+    typedef GLboolean(APIENTRYP PFNGLISRENDERBUFFERPROC)(GLuint renderbuffer);
+    typedef void (APIENTRYP PFNGLBINDRENDERBUFFERPROC)(GLenum target, GLuint renderbuffer);
+    typedef void (APIENTRYP PFNGLDELETERENDERBUFFERSPROC)(GLsizei n, const GLuint *renderbuffers);
+    typedef void (APIENTRYP PFNGLGENRENDERBUFFERSPROC)(GLsizei n, GLuint *renderbuffers);
+    typedef void (APIENTRYP PFNGLRENDERBUFFERSTORAGEPROC)(GLenum target, GLenum internalformat, GLsizei width, GLsizei height);
+    typedef void (APIENTRYP PFNGLGETRENDERBUFFERPARAMETERIVPROC)(GLenum target, GLenum pname, GLint *params);
+    typedef GLboolean(APIENTRYP PFNGLISFRAMEBUFFERPROC)(GLuint framebuffer);
+    typedef void (APIENTRYP PFNGLBINDFRAMEBUFFERPROC)(GLenum target, GLuint framebuffer);
+    typedef void (APIENTRYP PFNGLDELETEFRAMEBUFFERSPROC)(GLsizei n, const GLuint *framebuffers);
+    typedef void (APIENTRYP PFNGLGENFRAMEBUFFERSPROC)(GLsizei n, GLuint *framebuffers);
+    typedef GLenum(APIENTRYP PFNGLCHECKFRAMEBUFFERSTATUSPROC)(GLenum target);
+    typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTURE1DPROC)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
+    typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTURE2DPROC)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
+    typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTURE3DPROC)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);
+    typedef void (APIENTRYP PFNGLFRAMEBUFFERRENDERBUFFERPROC)(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
+    typedef void (APIENTRYP PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC)(GLenum target, GLenum attachment, GLenum pname, GLint *params);
+    typedef void (APIENTRYP PFNGLGENERATEMIPMAPPROC)(GLenum target);
+    typedef void (APIENTRYP PFNGLBLITFRAMEBUFFERPROC)(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
+    typedef void (APIENTRYP PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
+    typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTURELAYERPROC)(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);
+#endif
+
+#ifndef GL_ARB_framebuffer_sRGB
+#define GL_ARB_framebuffer_sRGB 1
+#endif
+
+#ifndef GL_ARB_geometry_shader4
+#define GL_ARB_geometry_shader4 1
+#ifdef GL_GLEXT_PROTOTYPES
+    GLAPI void APIENTRY glProgramParameteriARB(GLuint program, GLenum pname, GLint value);
+    GLAPI void APIENTRY glFramebufferTextureARB(GLenum target, GLenum attachment, GLuint texture, GLint level);
+    GLAPI void APIENTRY glFramebufferTextureLayerARB(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);
+    GLAPI void APIENTRY glFramebufferTextureFaceARB(GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face);
+#endif /* GL_GLEXT_PROTOTYPES */
+    typedef void (APIENTRYP PFNGLPROGRAMPARAMETERIARBPROC)(GLuint program, GLenum pname, GLint value);
+    typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTUREARBPROC)(GLenum target, GLenum attachment, GLuint texture, GLint level);
+    typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTURELAYERARBPROC)(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);
+    typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTUREFACEARBPROC)(GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face);
+#endif
+
+#ifndef GL_ARB_half_float_vertex
+#define GL_ARB_half_float_vertex 1
+#endif
+
+#ifndef GL_ARB_instanced_arrays
+#define GL_ARB_instanced_arrays 1
+#ifdef GL_GLEXT_PROTOTYPES
+    GLAPI void APIENTRY glVertexAttribDivisorARB(GLuint index, GLuint divisor);
+#endif /* GL_GLEXT_PROTOTYPES */
+    typedef void (APIENTRYP PFNGLVERTEXATTRIBDIVISORARBPROC)(GLuint index, GLuint divisor);
+#endif
+
+#ifndef GL_ARB_map_buffer_range
+#define GL_ARB_map_buffer_range 1
+#ifdef GL_GLEXT_PROTOTYPES
+    GLAPI GLvoid* APIENTRY glMapBufferRange(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access);
+    GLAPI void APIENTRY glFlushMappedBufferRange(GLenum target, GLintptr offset, GLsizeiptr length);
+#endif /* GL_GLEXT_PROTOTYPES */
+    typedef GLvoid* (APIENTRYP PFNGLMAPBUFFERRANGEPROC)(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access);
+    typedef void (APIENTRYP PFNGLFLUSHMAPPEDBUFFERRANGEPROC)(GLenum target, GLintptr offset, GLsizeiptr length);
+#endif
+
+#ifndef GL_ARB_texture_buffer_object
+#define GL_ARB_texture_buffer_object 1
+#ifdef GL_GLEXT_PROTOTYPES
+    GLAPI void APIENTRY glTexBufferARB(GLenum target, GLenum internalformat, GLuint buffer);
+#endif /* GL_GLEXT_PROTOTYPES */
+    typedef void (APIENTRYP PFNGLTEXBUFFERARBPROC)(GLenum target, GLenum internalformat, GLuint buffer);
+#endif
+
+#ifndef GL_ARB_texture_compression_rgtc
+#define GL_ARB_texture_compression_rgtc 1
+#endif
+
+#ifndef GL_ARB_texture_rg
+#define GL_ARB_texture_rg 1
+#endif
+
+#ifndef GL_ARB_vertex_array_object
+#define GL_ARB_vertex_array_object 1
+#ifdef GL_GLEXT_PROTOTYPES
+    GLAPI void APIENTRY glBindVertexArray(GLuint array);
+    GLAPI void APIENTRY glDeleteVertexArrays(GLsizei n, const GLuint *arrays);
+    GLAPI void APIENTRY glGenVertexArrays(GLsizei n, GLuint *arrays);
+    GLAPI GLboolean APIENTRY glIsVertexArray(GLuint array);
+#endif /* GL_GLEXT_PROTOTYPES */
+    typedef void (APIENTRYP PFNGLBINDVERTEXARRAYPROC)(GLuint array);
+    typedef void (APIENTRYP PFNGLDELETEVERTEXARRAYSPROC)(GLsizei n, const GLuint *arrays);
+    typedef void (APIENTRYP PFNGLGENVERTEXARRAYSPROC)(GLsizei n, GLuint *arrays);
+    typedef GLboolean(APIENTRYP PFNGLISVERTEXARRAYPROC)(GLuint array);
+#endif
+
+#ifndef GL_ARB_uniform_buffer_object
+#define GL_ARB_uniform_buffer_object 1
+#ifdef GL_GLEXT_PROTOTYPES
+    GLAPI void APIENTRY glGetUniformIndices(GLuint program, GLsizei uniformCount, const GLchar* *uniformNames, GLuint *uniformIndices);
+    GLAPI void APIENTRY glGetActiveUniformsiv(GLuint program, GLsizei uniformCount, const GLuint *uniformIndices, GLenum pname, GLint *params);
+    GLAPI void APIENTRY glGetActiveUniformName(GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformName);
+    GLAPI GLuint APIENTRY glGetUniformBlockIndex(GLuint program, const GLchar *uniformBlockName);
+    GLAPI void APIENTRY glGetActiveUniformBlockiv(GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params);
+    GLAPI void APIENTRY glGetActiveUniformBlockName(GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName);
+    GLAPI void APIENTRY glUniformBlockBinding(GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding);
+#endif /* GL_GLEXT_PROTOTYPES */
+    typedef void (APIENTRYP PFNGLGETUNIFORMINDICESPROC)(GLuint program, GLsizei uniformCount, const GLchar* *uniformNames, GLuint *uniformIndices);
+    typedef void (APIENTRYP PFNGLGETACTIVEUNIFORMSIVPROC)(GLuint program, GLsizei uniformCount, const GLuint *uniformIndices, GLenum pname, GLint *params);
+    typedef void (APIENTRYP PFNGLGETACTIVEUNIFORMNAMEPROC)(GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformName);
+    typedef GLuint(APIENTRYP PFNGLGETUNIFORMBLOCKINDEXPROC)(GLuint program, const GLchar *uniformBlockName);
+    typedef void (APIENTRYP PFNGLGETACTIVEUNIFORMBLOCKIVPROC)(GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params);
+    typedef void (APIENTRYP PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC)(GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName);
+    typedef void (APIENTRYP PFNGLUNIFORMBLOCKBINDINGPROC)(GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding);
+#endif
+
+#ifndef GL_ARB_compatibility
+#define GL_ARB_compatibility 1
+#endif
+
+#ifndef GL_ARB_copy_buffer
+#define GL_ARB_copy_buffer 1
+#ifdef GL_GLEXT_PROTOTYPES
+    GLAPI void APIENTRY glCopyBufferSubData(GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
+#endif /* GL_GLEXT_PROTOTYPES */
+    typedef void (APIENTRYP PFNGLCOPYBUFFERSUBDATAPROC)(GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
+#endif
+
+#ifndef GL_ARB_shader_texture_lod
+#define GL_ARB_shader_texture_lod 1
+#endif
+
+#ifndef GL_ARB_depth_clamp
+#define GL_ARB_depth_clamp 1
+#endif
+
+#ifndef GL_ARB_draw_elements_base_vertex
+#define GL_ARB_draw_elements_base_vertex 1
+#ifdef GL_GLEXT_PROTOTYPES
+    GLAPI void APIENTRY glDrawElementsBaseVertex(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLint basevertex);
+    GLAPI void APIENTRY glDrawRangeElementsBaseVertex(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices, GLint basevertex);
+    GLAPI void APIENTRY glDrawElementsInstancedBaseVertex(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount, GLint basevertex);
+    GLAPI void APIENTRY glMultiDrawElementsBaseVertex(GLenum mode, const GLsizei *count, GLenum type, const GLvoid* *indices, GLsizei primcount, const GLint *basevertex);
+#endif /* GL_GLEXT_PROTOTYPES */
+    typedef void (APIENTRYP PFNGLDRAWELEMENTSBASEVERTEXPROC)(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLint basevertex);
+    typedef void (APIENTRYP PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC)(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices, GLint basevertex);
+    typedef void (APIENTRYP PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC)(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount, GLint basevertex);
+    typedef void (APIENTRYP PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC)(GLenum mode, const GLsizei *count, GLenum type, const GLvoid* *indices, GLsizei primcount, const GLint *basevertex);
+#endif
+
+#ifndef GL_ARB_fragment_coord_conventions
+#define GL_ARB_fragment_coord_conventions 1
+#endif
+
+#ifndef GL_ARB_provoking_vertex
+#define GL_ARB_provoking_vertex 1
+#ifdef GL_GLEXT_PROTOTYPES
+    GLAPI void APIENTRY glProvokingVertex(GLenum mode);
+#endif /* GL_GLEXT_PROTOTYPES */
+    typedef void (APIENTRYP PFNGLPROVOKINGVERTEXPROC)(GLenum mode);
+#endif
+
+#ifndef GL_ARB_seamless_cube_map
+#define GL_ARB_seamless_cube_map 1
+#endif
+
+#ifndef GL_ARB_sync
+#define GL_ARB_sync 1
+#ifdef GL_GLEXT_PROTOTYPES
+    GLAPI GLsync APIENTRY glFenceSync(GLenum condition, GLbitfield flags);
+    GLAPI GLboolean APIENTRY glIsSync(GLsync sync);
+    GLAPI void APIENTRY glDeleteSync(GLsync sync);
+    GLAPI GLenum APIENTRY glClientWaitSync(GLsync sync, GLbitfield flags, GLuint64 timeout);
+    GLAPI void APIENTRY glWaitSync(GLsync sync, GLbitfield flags, GLuint64 timeout);
+    GLAPI void APIENTRY glGetInteger64v(GLenum pname, GLint64 *params);
+    GLAPI void APIENTRY glGetSynciv(GLsync sync, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values);
+#endif /* GL_GLEXT_PROTOTYPES */
+    typedef GLsync(APIENTRYP PFNGLFENCESYNCPROC)(GLenum condition, GLbitfield flags);
+    typedef GLboolean(APIENTRYP PFNGLISSYNCPROC)(GLsync sync);
+    typedef void (APIENTRYP PFNGLDELETESYNCPROC)(GLsync sync);
+    typedef GLenum(APIENTRYP PFNGLCLIENTWAITSYNCPROC)(GLsync sync, GLbitfield flags, GLuint64 timeout);
+    typedef void (APIENTRYP PFNGLWAITSYNCPROC)(GLsync sync, GLbitfield flags, GLuint64 timeout);
+    typedef void (APIENTRYP PFNGLGETINTEGER64VPROC)(GLenum pname, GLint64 *params);
+    typedef void (APIENTRYP PFNGLGETSYNCIVPROC)(GLsync sync, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values);
+#endif
+
+#ifndef GL_ARB_texture_multisample
+#define GL_ARB_texture_multisample 1
+#ifdef GL_GLEXT_PROTOTYPES
+    GLAPI void APIENTRY glTexImage2DMultisample(GLenum target, GLsizei samples, GLint internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
+    GLAPI void APIENTRY glTexImage3DMultisample(GLenum target, GLsizei samples, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
+    GLAPI void APIENTRY glGetMultisamplefv(GLenum pname, GLuint index, GLfloat *val);
+    GLAPI void APIENTRY glSampleMaski(GLuint index, GLbitfield mask);
+#endif /* GL_GLEXT_PROTOTYPES */
+    typedef void (APIENTRYP PFNGLTEXIMAGE2DMULTISAMPLEPROC)(GLenum target, GLsizei samples, GLint internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
+    typedef void (APIENTRYP PFNGLTEXIMAGE3DMULTISAMPLEPROC)(GLenum target, GLsizei samples, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
+    typedef void (APIENTRYP PFNGLGETMULTISAMPLEFVPROC)(GLenum pname, GLuint index, GLfloat *val);
+    typedef void (APIENTRYP PFNGLSAMPLEMASKIPROC)(GLuint index, GLbitfield mask);
+#endif
+
+#ifndef GL_ARB_vertex_array_bgra
+#define GL_ARB_vertex_array_bgra 1
+#endif
+
+#ifndef GL_ARB_draw_buffers_blend
+#define GL_ARB_draw_buffers_blend 1
+#ifdef GL_GLEXT_PROTOTYPES
+    GLAPI void APIENTRY glBlendEquationiARB(GLuint buf, GLenum mode);
+    GLAPI void APIENTRY glBlendEquationSeparateiARB(GLuint buf, GLenum modeRGB, GLenum modeAlpha);
+    GLAPI void APIENTRY glBlendFunciARB(GLuint buf, GLenum src, GLenum dst);
+    GLAPI void APIENTRY glBlendFuncSeparateiARB(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
+#endif /* GL_GLEXT_PROTOTYPES */
+    typedef void (APIENTRYP PFNGLBLENDEQUATIONIARBPROC)(GLuint buf, GLenum mode);
+    typedef void (APIENTRYP PFNGLBLENDEQUATIONSEPARATEIARBPROC)(GLuint buf, GLenum modeRGB, GLenum modeAlpha);
+    typedef void (APIENTRYP PFNGLBLENDFUNCIARBPROC)(GLuint buf, GLenum src, GLenum dst);
+    typedef void (APIENTRYP PFNGLBLENDFUNCSEPARATEIARBPROC)(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
+#endif
+
+#ifndef GL_ARB_sample_shading
+#define GL_ARB_sample_shading 1
+#ifdef GL_GLEXT_PROTOTYPES
+    GLAPI void APIENTRY glMinSampleShadingARB(GLclampf value);
+#endif /* GL_GLEXT_PROTOTYPES */
+    typedef void (APIENTRYP PFNGLMINSAMPLESHADINGARBPROC)(GLclampf value);
+#endif
+
+#ifndef GL_ARB_texture_cube_map_array
+#define GL_ARB_texture_cube_map_array 1
+#endif
+
+#ifndef GL_ARB_texture_gather
+#define GL_ARB_texture_gather 1
+#endif
+
+#ifndef GL_ARB_texture_query_lod
+#define GL_ARB_texture_query_lod 1
+#endif
+
+#ifndef GL_ARB_shading_language_include
+#define GL_ARB_shading_language_include 1
+#ifdef GL_GLEXT_PROTOTYPES
+    GLAPI void APIENTRY glNamedStringARB(GLenum type, GLint namelen, const GLchar *name, GLint stringlen, const GLchar *string);
+    GLAPI void APIENTRY glDeleteNamedStringARB(GLint namelen, const GLchar *name);
+    GLAPI void APIENTRY glCompileShaderIncludeARB(GLuint shader, GLsizei count, const GLchar* *path, const GLint *length);
+    GLAPI GLboolean APIENTRY glIsNamedStringARB(GLint namelen, const GLchar *name);
+    GLAPI void APIENTRY glGetNamedStringARB(GLint namelen, const GLchar *name, GLsizei bufSize, GLint *stringlen, GLchar *string);
+    GLAPI void APIENTRY glGetNamedStringivARB(GLint namelen, const GLchar *name, GLenum pname, GLint *params);
+#endif /* GL_GLEXT_PROTOTYPES */
+    typedef void (APIENTRYP PFNGLNAMEDSTRINGARBPROC)(GLenum type, GLint namelen, const GLchar *name, GLint stringlen, const GLchar *string);
+    typedef void (APIENTRYP PFNGLDELETENAMEDSTRINGARBPROC)(GLint namelen, const GLchar *name);
+    typedef void (APIENTRYP PFNGLCOMPILESHADERINCLUDEARBPROC)(GLuint shader, GLsizei count, const GLchar* *path, const GLint *length);
+    typedef GLboolean(APIENTRYP PFNGLISNAMEDSTRINGARBPROC)(GLint namelen, const GLchar *name);
+    typedef void (APIENTRYP PFNGLGETNAMEDSTRINGARBPROC)(GLint namelen, const GLchar *name, GLsizei bufSize, GLint *stringlen, GLchar *string);
+    typedef void (APIENTRYP PFNGLGETNAMEDSTRINGIVARBPROC)(GLint namelen, const GLchar *name, GLenum pname, GLint *params);
+#endif
+
+#ifndef GL_ARB_texture_compression_bptc
+#define GL_ARB_texture_compression_bptc 1
+#endif
+
+#ifndef GL_ARB_blend_func_extended
+#define GL_ARB_blend_func_extended 1
+#ifdef GL_GLEXT_PROTOTYPES
+    GLAPI void APIENTRY glBindFragDataLocationIndexed(GLuint program, GLuint colorNumber, GLuint index, const GLchar *name);
+    GLAPI GLint APIENTRY glGetFragDataIndex(GLuint program, const GLchar *name);
+#endif /* GL_GLEXT_PROTOTYPES */
+    typedef void (APIENTRYP PFNGLBINDFRAGDATALOCATIONINDEXEDPROC)(GLuint program, GLuint colorNumber, GLuint index, const GLchar *name);
+    typedef GLint(APIENTRYP PFNGLGETFRAGDATAINDEXPROC)(GLuint program, const GLchar *name);
+#endif
+
+#ifndef GL_ARB_explicit_attrib_location
+#define GL_ARB_explicit_attrib_location 1
+#endif
+
+#ifndef GL_ARB_occlusion_query2
+#define GL_ARB_occlusion_query2 1
+#endif
+
+#ifndef GL_ARB_sampler_objects
+#define GL_ARB_sampler_objects 1
+#ifdef GL_GLEXT_PROTOTYPES
+    GLAPI void APIENTRY glGenSamplers(GLsizei count, GLuint *samplers);
+    GLAPI void APIENTRY glDeleteSamplers(GLsizei count, const GLuint *samplers);
+    GLAPI GLboolean APIENTRY glIsSampler(GLuint sampler);
+    GLAPI void APIENTRY glBindSampler(GLuint unit, GLuint sampler);
+    GLAPI void APIENTRY glSamplerParameteri(GLuint sampler, GLenum pname, GLint param);
+    GLAPI void APIENTRY glSamplerParameteriv(GLuint sampler, GLenum pname, const GLint *param);
+    GLAPI void APIENTRY glSamplerParameterf(GLuint sampler, GLenum pname, GLfloat param);
+    GLAPI void APIENTRY glSamplerParameterfv(GLuint sampler, GLenum pname, const GLfloat *param);
+    GLAPI void APIENTRY glSamplerParameterIiv(GLuint sampler, GLenum pname, const GLint *param);
+    GLAPI void APIENTRY glSamplerParameterIuiv(GLuint sampler, GLenum pname, const GLuint *param);
+    GLAPI void APIENTRY glGetSamplerParameteriv(GLuint sampler, GLenum pname, GLint *params);
+    GLAPI void APIENTRY glGetSamplerParameterIiv(GLuint sampler, GLenum pname, GLint *params);
+    GLAPI void APIENTRY glGetSamplerParameterfv(GLuint sampler, GLenum pname, GLfloat *params);
+    GLAPI void APIENTRY glGetSamplerParameterIuiv(GLuint sampler, GLenum pname, GLuint *params);
+#endif /* GL_GLEXT_PROTOTYPES */
+    typedef void (APIENTRYP PFNGLGENSAMPLERSPROC)(GLsizei count, GLuint *samplers);
+    typedef void (APIENTRYP PFNGLDELETESAMPLERSPROC)(GLsizei count, const GLuint *samplers);
+    typedef GLboolean(APIENTRYP PFNGLISSAMPLERPROC)(GLuint sampler);
+    typedef void (APIENTRYP PFNGLBINDSAMPLERPROC)(GLuint unit, GLuint sampler);
+    typedef void (APIENTRYP PFNGLSAMPLERPARAMETERIPROC)(GLuint sampler, GLenum pname, GLint param);
+    typedef void (APIENTRYP PFNGLSAMPLERPARAMETERIVPROC)(GLuint sampler, GLenum pname, const GLint *param);
+    typedef void (APIENTRYP PFNGLSAMPLERPARAMETERFPROC)(GLuint sampler, GLenum pname, GLfloat param);
+    typedef void (APIENTRYP PFNGLSAMPLERPARAMETERFVPROC)(GLuint sampler, GLenum pname, const GLfloat *param);
+    typedef void (APIENTRYP PFNGLSAMPLERPARAMETERIIVPROC)(GLuint sampler, GLenum pname, const GLint *param);
+    typedef void (APIENTRYP PFNGLSAMPLERPARAMETERIUIVPROC)(GLuint sampler, GLenum pname, const GLuint *param);
+    typedef void (APIENTRYP PFNGLGETSAMPLERPARAMETERIVPROC)(GLuint sampler, GLenum pname, GLint *params);
+    typedef void (APIENTRYP PFNGLGETSAMPLERPARAMETERIIVPROC)(GLuint sampler, GLenum pname, GLint *params);
+    typedef void (APIENTRYP PFNGLGETSAMPLERPARAMETERFVPROC)(GLuint sampler, GLenum pname, GLfloat *params);
+    typedef void (APIENTRYP PFNGLGETSAMPLERPARAMETERIUIVPROC)(GLuint sampler, GLenum pname, GLuint *params);
+#endif
+
+#ifndef GL_ARB_shader_bit_encoding
+#define GL_ARB_shader_bit_encoding 1
+#endif
+
+#ifndef GL_ARB_texture_rgb10_a2ui
+#define GL_ARB_texture_rgb10_a2ui 1
+#endif
+
+#ifndef GL_ARB_texture_swizzle
+#define GL_ARB_texture_swizzle 1
+#endif
+
+#ifndef GL_ARB_timer_query
+#define GL_ARB_timer_query 1
+#ifdef GL_GLEXT_PROTOTYPES
+    GLAPI void APIENTRY glQueryCounter(GLuint id, GLenum target);
+    GLAPI void APIENTRY glGetQueryObjecti64v(GLuint id, GLenum pname, GLint64 *params);
+    GLAPI void APIENTRY glGetQueryObjectui64v(GLuint id, GLenum pname, GLuint64 *params);
+#endif /* GL_GLEXT_PROTOTYPES */
+    typedef void (APIENTRYP PFNGLQUERYCOUNTERPROC)(GLuint id, GLenum target);
+    typedef void (APIENTRYP PFNGLGETQUERYOBJECTI64VPROC)(GLuint id, GLenum pname, GLint64 *params);
+    typedef void (APIENTRYP PFNGLGETQUERYOBJECTUI64VPROC)(GLuint id, GLenum pname, GLuint64 *params);
+#endif
+
+#ifndef GL_ARB_vertex_type_2_10_10_10_rev
+#define GL_ARB_vertex_type_2_10_10_10_rev 1
+#ifdef GL_GLEXT_PROTOTYPES
+    GLAPI void APIENTRY glVertexP2ui(GLenum type, GLuint value);
+    GLAPI void APIENTRY glVertexP2uiv(GLenum type, const GLuint *value);
+    GLAPI void APIENTRY glVertexP3ui(GLenum type, GLuint value);
+    GLAPI void APIENTRY glVertexP3uiv(GLenum type, const GLuint *value);
+    GLAPI void APIENTRY glVertexP4ui(GLenum type, GLuint value);
+    GLAPI void APIENTRY glVertexP4uiv(GLenum type, const GLuint *value);
+    GLAPI void APIENTRY glTexCoordP1ui(GLenum type, GLuint coords);
+    GLAPI void APIENTRY glTexCoordP1uiv(GLenum type, const GLuint *coords);
+    GLAPI void APIENTRY glTexCoordP2ui(GLenum type, GLuint coords);
+    GLAPI void APIENTRY glTexCoordP2uiv(GLenum type, const GLuint *coords);
+    GLAPI void APIENTRY glTexCoordP3ui(GLenum type, GLuint coords);
+    GLAPI void APIENTRY glTexCoordP3uiv(GLenum type, const GLuint *coords);
+    GLAPI void APIENTRY glTexCoordP4ui(GLenum type, GLuint coords);
+    GLAPI void APIENTRY glTexCoordP4uiv(GLenum type, const GLuint *coords);
+    GLAPI void APIENTRY glMultiTexCoordP1ui(GLenum texture, GLenum type, GLuint coords);
+    GLAPI void APIENTRY glMultiTexCoordP1uiv(GLenum texture, GLenum type, const GLuint *coords);
+    GLAPI void APIENTRY glMultiTexCoordP2ui(GLenum texture, GLenum type, GLuint coords);
+    GLAPI void APIENTRY glMultiTexCoordP2uiv(GLenum texture, GLenum type, const GLuint *coords);
+    GLAPI void APIENTRY glMultiTexCoordP3ui(GLenum texture, GLenum type, GLuint coords);
+    GLAPI void APIENTRY glMultiTexCoordP3uiv(GLenum texture, GLenum type, const GLuint *coords);
+    GLAPI void APIENTRY glMultiTexCoordP4ui(GLenum texture, GLenum type, GLuint coords);
+    GLAPI void APIENTRY glMultiTexCoordP4uiv(GLenum texture, GLenum type, const GLuint *coords);
+    GLAPI void APIENTRY glNormalP3ui(GLenum type, GLuint coords);
+    GLAPI void APIENTRY glNormalP3uiv(GLenum type, const GLuint *coords);
+    GLAPI void APIENTRY glColorP3ui(GLenum type, GLuint color);
+    GLAPI void APIENTRY glColorP3uiv(GLenum type, const GLuint *color);
+    GLAPI void APIENTRY glColorP4ui(GLenum type, GLuint color);
+    GLAPI void APIENTRY glColorP4uiv(GLenum type, const GLuint *color);
+    GLAPI void APIENTRY glSecondaryColorP3ui(GLenum type, GLuint color);
+    GLAPI void APIENTRY glSecondaryColorP3uiv(GLenum type, const GLuint *color);
+    GLAPI void APIENTRY glVertexAttribP1ui(GLuint index, GLenum type, GLboolean normalized, GLuint value);
+    GLAPI void APIENTRY glVertexAttribP1uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
+    GLAPI void APIENTRY glVertexAttribP2ui(GLuint index, GLenum type, GLboolean normalized, GLuint value);
+    GLAPI void APIENTRY glVertexAttribP2uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
+    GLAPI void APIENTRY glVertexAttribP3ui(GLuint index, GLenum type, GLboolean normalized, GLuint value);
+    GLAPI void APIENTRY glVertexAttribP3uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
+    GLAPI void APIENTRY glVertexAttribP4ui(GLuint index, GLenum type, GLboolean normalized, GLuint value);
+    GLAPI void APIENTRY glVertexAttribP4uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
+#endif /* GL_GLEXT_PROTOTYPES */
+    typedef void (APIENTRYP PFNGLVERTEXP2UIPROC)(GLenum type, GLuint value);
+    typedef void (APIENTRYP PFNGLVERTEXP2UIVPROC)(GLenum type, const GLuint *value);
+    typedef void (APIENTRYP PFNGLVERTEXP3UIPROC)(GLenum type, GLuint value);
+    typedef void (APIENTRYP PFNGLVERTEXP3UIVPROC)(GLenum type, const GLuint *value);
+    typedef void (APIENTRYP PFNGLVERTEXP4UIPROC)(GLenum type, GLuint value);
+    typedef void (APIENTRYP PFNGLVERTEXP4UIVPROC)(GLenum type, const GLuint *value);
+    typedef void (APIENTRYP PFNGLTEXCOORDP1UIPROC)(GLenum type, GLuint coords);
+    typedef void (APIENTRYP PFNGLTEXCOORDP1UIVPROC)(GLenum type, const GLuint *coords);
+    typedef void (APIENTRYP PFNGLTEXCOORDP2UIPROC)(GLenum type, GLuint coords);
+    typedef void (APIENTRYP PFNGLTEXCOORDP2UIVPROC)(GLenum type, const GLuint *coords);
+    typedef void (APIENTRYP PFNGLTEXCOORDP3UIPROC)(GLenum type, GLuint coords);
+    typedef void (APIENTRYP PFNGLTEXCOORDP3UIVPROC)(GLenum type, const GLuint *coords);
+    typedef void (APIENTRYP PFNGLTEXCOORDP4UIPROC)(GLenum type, GLuint coords);
+    typedef void (APIENTRYP PFNGLTEXCOORDP4UIVPROC)(GLenum type, const GLuint *coords);
+    typedef void (APIENTRYP PFNGLMULTITEXCOORDP1UIPROC)(GLenum texture, GLenum type, GLuint coords);
+    typedef void (APIENTRYP PFNGLMULTITEXCOORDP1UIVPROC)(GLenum texture, GLenum type, const GLuint *coords);
+    typedef void (APIENTRYP PFNGLMULTITEXCOORDP2UIPROC)(GLenum texture, GLenum type, GLuint coords);
+    typedef void (APIENTRYP PFNGLMULTITEXCOORDP2UIVPROC)(GLenum texture, GLenum type, const GLuint *coords);
+    typedef void (APIENTRYP PFNGLMULTITEXCOORDP3UIPROC)(GLenum texture, GLenum type, GLuint coords);
+    typedef void (APIENTRYP PFNGLMULTITEXCOORDP3UIVPROC)(GLenum texture, GLenum type, const GLuint *coords);
+    typedef void (APIENTRYP PFNGLMULTITEXCOORDP4UIPROC)(GLenum texture, GLenum type, GLuint coords);
+    typedef void (APIENTRYP PFNGLMULTITEXCOORDP4UIVPROC)(GLenum texture, GLenum type, const GLuint *coords);
+    typedef void (APIENTRYP PFNGLNORMALP3UIPROC)(GLenum type, GLuint coords);
+    typedef void (APIENTRYP PFNGLNORMALP3UIVPROC)(GLenum type, const GLuint *coords);
+    typedef void (APIENTRYP PFNGLCOLORP3UIPROC)(GLenum type, GLuint color);
+    typedef void (APIENTRYP PFNGLCOLORP3UIVPROC)(GLenum type, const GLuint *color);
+    typedef void (APIENTRYP PFNGLCOLORP4UIPROC)(GLenum type, GLuint color);
+    typedef void (APIENTRYP PFNGLCOLORP4UIVPROC)(GLenum type, const GLuint *color);
+    typedef void (APIENTRYP PFNGLSECONDARYCOLORP3UIPROC)(GLenum type, GLuint color);
+    typedef void (APIENTRYP PFNGLSECONDARYCOLORP3UIVPROC)(GLenum type, const GLuint *color);
+    typedef void (APIENTRYP PFNGLVERTEXATTRIBP1UIPROC)(GLuint index, GLenum type, GLboolean normalized, GLuint value);
+    typedef void (APIENTRYP PFNGLVERTEXATTRIBP1UIVPROC)(GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
+    typedef void (APIENTRYP PFNGLVERTEXATTRIBP2UIPROC)(GLuint index, GLenum type, GLboolean normalized, GLuint value);
+    typedef void (APIENTRYP PFNGLVERTEXATTRIBP2UIVPROC)(GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
+    typedef void (APIENTRYP PFNGLVERTEXATTRIBP3UIPROC)(GLuint index, GLenum type, GLboolean normalized, GLuint value);
+    typedef void (APIENTRYP PFNGLVERTEXATTRIBP3UIVPROC)(GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
+    typedef void (APIENTRYP PFNGLVERTEXATTRIBP4UIPROC)(GLuint index, GLenum type, GLboolean normalized, GLuint value);
+    typedef void (APIENTRYP PFNGLVERTEXATTRIBP4UIVPROC)(GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
+#endif
+
+#ifndef GL_ARB_draw_indirect
+#define GL_ARB_draw_indirect 1
+#ifdef GL_GLEXT_PROTOTYPES
+    GLAPI void APIENTRY glDrawArraysIndirect(GLenum mode, const GLvoid *indirect);
+    GLAPI void APIENTRY glDrawElementsIndirect(GLenum mode, GLenum type, const GLvoid *indirect);
+#endif /* GL_GLEXT_PROTOTYPES */
+    typedef void (APIENTRYP PFNGLDRAWARRAYSINDIRECTPROC)(GLenum mode, const GLvoid *indirect);
+    typedef void (APIENTRYP PFNGLDRAWELEMENTSINDIRECTPROC)(GLenum mode, GLenum type, const GLvoid *indirect);
+#endif
+
+#ifndef GL_ARB_gpu_shader5
+#define GL_ARB_gpu_shader5 1
+#endif
+
+#ifndef GL_ARB_gpu_shader_fp64
+#define GL_ARB_gpu_shader_fp64 1
+#ifdef GL_GLEXT_PROTOTYPES
+    GLAPI void APIENTRY glUniform1d(GLint location, GLdouble x);
+    GLAPI void APIENTRY glUniform2d(GLint location, GLdouble x, GLdouble y);
+    GLAPI void APIENTRY glUniform3d(GLint location, GLdouble x, GLdouble y, GLdouble z);
+    GLAPI void APIENTRY glUniform4d(GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
+    GLAPI void APIENTRY glUniform1dv(GLint location, GLsizei count, const GLdouble *value);
+    GLAPI void APIENTRY glUniform2dv(GLint location, GLsizei count, const GLdouble *value);
+    GLAPI void APIENTRY glUniform3dv(GLint location, GLsizei count, const GLdouble *value);
+    GLAPI void APIENTRY glUniform4dv(GLint location, GLsizei count, const GLdouble *value);
+    GLAPI void APIENTRY glUniformMatrix2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
+    GLAPI void APIENTRY glUniformMatrix3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
+    GLAPI void APIENTRY glUniformMatrix4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
+    GLAPI void APIENTRY glUniformMatrix2x3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
+    GLAPI void APIENTRY glUniformMatrix2x4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
+    GLAPI void APIENTRY glUniformMatrix3x2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
+    GLAPI void APIENTRY glUniformMatrix3x4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
+    GLAPI void APIENTRY glUniformMatrix4x2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
+    GLAPI void APIENTRY glUniformMatrix4x3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
+    GLAPI void APIENTRY glGetUniformdv(GLuint program, GLint location, GLdouble *params);
+#endif /* GL_GLEXT_PROTOTYPES */
+    typedef void (APIENTRYP PFNGLUNIFORM1DPROC)(GLint location, GLdouble x);
+    typedef void (APIENTRYP PFNGLUNIFORM2DPROC)(GLint location, GLdouble x, GLdouble y);
+    typedef void (APIENTRYP PFNGLUNIFORM3DPROC)(GLint location, GLdouble x, GLdouble y, GLdouble z);
+    typedef void (APIENTRYP PFNGLUNIFORM4DPROC)(GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
+    typedef void (APIENTRYP PFNGLUNIFORM1DVPROC)(GLint location, GLsizei count, const GLdouble *value);
+    typedef void (APIENTRYP PFNGLUNIFORM2DVPROC)(GLint location, GLsizei count, const GLdouble *value);
+    typedef void (APIENTRYP PFNGLUNIFORM3DVPROC)(GLint location, GLsizei count, const GLdouble *value);
+    typedef void (APIENTRYP PFNGLUNIFORM4DVPROC)(GLint location, GLsizei count, const GLdouble *value);
+    typedef void (APIENTRYP PFNGLUNIFORMMATRIX2DVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
+    typedef void (APIENTRYP PFNGLUNIFORMMATRIX3DVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
+    typedef void (APIENTRYP PFNGLUNIFORMMATRIX4DVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
+    typedef void (APIENTRYP PFNGLUNIFORMMATRIX2X3DVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
+    typedef void (APIENTRYP PFNGLUNIFORMMATRIX2X4DVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
+    typedef void (APIENTRYP PFNGLUNIFORMMATRIX3X2DVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
+    typedef void (APIENTRYP PFNGLUNIFORMMATRIX3X4DVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
+    typedef void (APIENTRYP PFNGLUNIFORMMATRIX4X2DVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
+    typedef void (APIENTRYP PFNGLUNIFORMMATRIX4X3DVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
+    typedef void (APIENTRYP PFNGLGETUNIFORMDVPROC)(GLuint program, GLint location, GLdouble *params);
+#endif
+
+#ifndef GL_ARB_shader_subroutine
+#define GL_ARB_shader_subroutine 1
+#ifdef GL_GLEXT_PROTOTYPES
+    GLAPI GLint APIENTRY glGetSubroutineUniformLocation(GLuint program, GLenum shadertype, const GLchar *name);
+    GLAPI GLuint APIENTRY glGetSubroutineIndex(GLuint program, GLenum shadertype, const GLchar *name);
+    GLAPI void APIENTRY glGetActiveSubroutineUniformiv(GLuint program, GLenum shadertype, GLuint index, GLenum pname, GLint *values);
+    GLAPI void APIENTRY glGetActiveSubroutineUniformName(GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei *length, GLchar *name);
+    GLAPI void APIENTRY glGetActiveSubroutineName(GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei *length, GLchar *name);
+    GLAPI void APIENTRY glUniformSubroutinesuiv(GLenum shadertype, GLsizei count, const GLuint *indices);
+    GLAPI void APIENTRY glGetUniformSubroutineuiv(GLenum shadertype, GLint location, GLuint *params);
+    GLAPI void APIENTRY glGetProgramStageiv(GLuint program, GLenum shadertype, GLenum pname, GLint *values);
+#endif /* GL_GLEXT_PROTOTYPES */
+    typedef GLint(APIENTRYP PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC)(GLuint program, GLenum shadertype, const GLchar *name);
+    typedef GLuint(APIENTRYP PFNGLGETSUBROUTINEINDEXPROC)(GLuint program, GLenum shadertype, const GLchar *name);
+    typedef void (APIENTRYP PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC)(GLuint program, GLenum shadertype, GLuint index, GLenum pname, GLint *values);
+    typedef void (APIENTRYP PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC)(GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei *length, GLchar *name);
+    typedef void (APIENTRYP PFNGLGETACTIVESUBROUTINENAMEPROC)(GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei *length, GLchar *name);
+    typedef void (APIENTRYP PFNGLUNIFORMSUBROUTINESUIVPROC)(GLenum shadertype, GLsizei count, const GLuint *indices);
+    typedef void (APIENTRYP PFNGLGETUNIFORMSUBROUTINEUIVPROC)(GLenum shadertype, GLint location, GLuint *params);
+    typedef void (APIENTRYP PFNGLGETPROGRAMSTAGEIVPROC)(GLuint program, GLenum shadertype, GLenum pname, GLint *values);
+#endif
+
+#ifndef GL_ARB_tessellation_shader
+#define GL_ARB_tessellation_shader 1
+#ifdef GL_GLEXT_PROTOTYPES
+    GLAPI void APIENTRY glPatchParameteri(GLenum pname, GLint value);
+    GLAPI void APIENTRY glPatchParameterfv(GLenum pname, const GLfloat *values);
+#endif /* GL_GLEXT_PROTOTYPES */
+    typedef void (APIENTRYP PFNGLPATCHPARAMETERIPROC)(GLenum pname, GLint value);
+    typedef void (APIENTRYP PFNGLPATCHPARAMETERFVPROC)(GLenum pname, const GLfloat *values);
+#endif
+
+#ifndef GL_ARB_texture_buffer_object_rgb32
+#define GL_ARB_texture_buffer_object_rgb32 1
+#endif
+
+#ifndef GL_ARB_transform_feedback2
+#define GL_ARB_transform_feedback2 1
+#ifdef GL_GLEXT_PROTOTYPES
+    GLAPI void APIENTRY glBindTransformFeedback(GLenum target, GLuint id);
+    GLAPI void APIENTRY glDeleteTransformFeedbacks(GLsizei n, const GLuint *ids);
+    GLAPI void APIENTRY glGenTransformFeedbacks(GLsizei n, GLuint *ids);
+    GLAPI GLboolean APIENTRY glIsTransformFeedback(GLuint id);
+    GLAPI void APIENTRY glPauseTransformFeedback(void);
+    GLAPI void APIENTRY glResumeTransformFeedback(void);
+    GLAPI void APIENTRY glDrawTransformFeedback(GLenum mode, GLuint id);
+#endif /* GL_GLEXT_PROTOTYPES */
+    typedef void (APIENTRYP PFNGLBINDTRANSFORMFEEDBACKPROC)(GLenum target, GLuint id);
+    typedef void (APIENTRYP PFNGLDELETETRANSFORMFEEDBACKSPROC)(GLsizei n, const GLuint *ids);
+    typedef void (APIENTRYP PFNGLGENTRANSFORMFEEDBACKSPROC)(GLsizei n, GLuint *ids);
+    typedef GLboolean(APIENTRYP PFNGLISTRANSFORMFEEDBACKPROC)(GLuint id);
+    typedef void (APIENTRYP PFNGLPAUSETRANSFORMFEEDBACKPROC)(void);
+    typedef void (APIENTRYP PFNGLRESUMETRANSFORMFEEDBACKPROC)(void);
+    typedef void (APIENTRYP PFNGLDRAWTRANSFORMFEEDBACKPROC)(GLenum mode, GLuint id);
+#endif
+
+#ifndef GL_ARB_transform_feedback3
+#define GL_ARB_transform_feedback3 1
+#ifdef GL_GLEXT_PROTOTYPES
+    GLAPI void APIENTRY glDrawTransformFeedbackStream(GLenum mode, GLuint id, GLuint stream);
+    GLAPI void APIENTRY glBeginQueryIndexed(GLenum target, GLuint index, GLuint id);
+    GLAPI void APIENTRY glEndQueryIndexed(GLenum target, GLuint index);
+    GLAPI void APIENTRY glGetQueryIndexediv(GLenum target, GLuint index, GLenum pname, GLint *params);
+#endif /* GL_GLEXT_PROTOTYPES */
+    typedef void (APIENTRYP PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC)(GLenum mode, GLuint id, GLuint stream);
+    typedef void (APIENTRYP PFNGLBEGINQUERYINDEXEDPROC)(GLenum target, GLuint index, GLuint id);
+    typedef void (APIENTRYP PFNGLENDQUERYINDEXEDPROC)(GLenum target, GLuint index);
+    typedef void (APIENTRYP PFNGLGETQUERYINDEXEDIVPROC)(GLenum target, GLuint index, GLenum pname, GLint *params);
+#endif
+
+#ifndef GL_ARB_ES2_compatibility
+#define GL_ARB_ES2_compatibility 1
+#ifdef GL_GLEXT_PROTOTYPES
+    GLAPI void APIENTRY glReleaseShaderCompiler(void);
+    GLAPI void APIENTRY glShaderBinary(GLsizei count, const GLuint *shaders, GLenum binaryformat, const GLvoid *binary, GLsizei length);
+    GLAPI void APIENTRY glGetShaderPrecisionFormat(GLenum shadertype, GLenum precisiontype, GLint *range, GLint *precision);
+    GLAPI void APIENTRY glDepthRangef(GLclampf n, GLclampf f);
+    GLAPI void APIENTRY glClearDepthf(GLclampf d);
+#endif /* GL_GLEXT_PROTOTYPES */
+    typedef void (APIENTRYP PFNGLRELEASESHADERCOMPILERPROC)(void);
+    typedef void (APIENTRYP PFNGLSHADERBINARYPROC)(GLsizei count, const GLuint *shaders, GLenum binaryformat, const GLvoid *binary, GLsizei length);
+    typedef void (APIENTRYP PFNGLGETSHADERPRECISIONFORMATPROC)(GLenum shadertype, GLenum precisiontype, GLint *range, GLint *precision);
+    typedef void (APIENTRYP PFNGLDEPTHRANGEFPROC)(GLclampf n, GLclampf f);
+    typedef void (APIENTRYP PFNGLCLEARDEPTHFPROC)(GLclampf d);
+#endif
+
+#ifndef GL_ARB_get_program_binary
+#define GL_ARB_get_program_binary 1
+#ifdef GL_GLEXT_PROTOTYPES
+    GLAPI void APIENTRY glGetProgramBinary(GLuint program, GLsizei bufSize, GLsizei *length, GLenum *binaryFormat, GLvoid *binary);
+    GLAPI void APIENTRY glProgramBinary(GLuint program, GLenum binaryFormat, const GLvoid *binary, GLsizei length);
+    GLAPI void APIENTRY glProgramParameteri(GLuint program, GLenum pname, GLint value);
+#endif /* GL_GLEXT_PROTOTYPES */
+    typedef void (APIENTRYP PFNGLGETPROGRAMBINARYPROC)(GLuint program, GLsizei bufSize, GLsizei *length, GLenum *binaryFormat, GLvoid *binary);
+    typedef void (APIENTRYP PFNGLPROGRAMBINARYPROC)(GLuint program, GLenum binaryFormat, const GLvoid *binary, GLsizei length);
+    typedef void (APIENTRYP PFNGLPROGRAMPARAMETERIPROC)(GLuint program, GLenum pname, GLint value);
+#endif
+
+#ifndef GL_ARB_separate_shader_objects
+#define GL_ARB_separate_shader_objects 1
+#ifdef GL_GLEXT_PROTOTYPES
+    GLAPI void APIENTRY glUseProgramStages(GLuint pipeline, GLbitfield stages, GLuint program);
+    GLAPI void APIENTRY glActiveShaderProgram(GLuint pipeline, GLuint program);
+    GLAPI GLuint APIENTRY glCreateShaderProgramv(GLenum type, GLsizei count, const GLchar* *strings);
+    GLAPI void APIENTRY glBindProgramPipeline(GLuint pipeline);
+    GLAPI void APIENTRY glDeleteProgramPipelines(GLsizei n, const GLuint *pipelines);
+    GLAPI void APIENTRY glGenProgramPipelines(GLsizei n, GLuint *pipelines);
+    GLAPI GLboolean APIENTRY glIsProgramPipeline(GLuint pipeline);
+    GLAPI void APIENTRY glGetProgramPipelineiv(GLuint pipeline, GLenum pname, GLint *params);
+    GLAPI void APIENTRY glProgramUniform1i(GLuint program, GLint location, GLint v0);
+    GLAPI void APIENTRY glProgramUniform1iv(GLuint program, GLint location, GLsizei count, const GLint *value);
+    GLAPI void APIENTRY glProgramUniform1f(GLuint program, GLint location, GLfloat v0);
+    GLAPI void APIENTRY glProgramUniform1fv(GLuint program, GLint location, GLsizei count, const GLfloat *value);
+    GLAPI void APIENTRY glProgramUniform1d(GLuint program, GLint location, GLdouble v0);
+    GLAPI void APIENTRY glProgramUniform1dv(GLuint program, GLint location, GLsizei count, const GLdouble *value);
+    GLAPI void APIENTRY glProgramUniform1ui(GLuint program, GLint location, GLuint v0);
+    GLAPI void APIENTRY glProgramUniform1uiv(GLuint program, GLint location, GLsizei count, const GLuint *value);
+    GLAPI void APIENTRY glProgramUniform2i(GLuint program, GLint location, GLint v0, GLint v1);
+    GLAPI void APIENTRY glProgramUniform2iv(GLuint program, GLint location, GLsizei count, const GLint *value);
+    GLAPI void APIENTRY glProgramUniform2f(GLuint program, GLint location, GLfloat v0, GLfloat v1);
+    GLAPI void APIENTRY glProgramUniform2fv(GLuint program, GLint location, GLsizei count, const GLfloat *value);
+    GLAPI void APIENTRY glProgramUniform2d(GLuint program, GLint location, GLdouble v0, GLdouble v1);
+    GLAPI void APIENTRY glProgramUniform2dv(GLuint program, GLint location, GLsizei count, const GLdouble *value);
+    GLAPI void APIENTRY glProgramUniform2ui(GLuint program, GLint location, GLuint v0, GLuint v1);
+    GLAPI void APIENTRY glProgramUniform2uiv(GLuint program, GLint location, GLsizei count, const GLuint *value);
+    GLAPI void APIENTRY glProgramUniform3i(GLuint program, GLint location, GLint v0, GLint v1, GLint v2);
+    GLAPI void APIENTRY glProgramUniform3iv(GLuint program, GLint location, GLsizei count, const GLint *value);
+    GLAPI void APIENTRY glProgramUniform3f(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
+    GLAPI void APIENTRY glProgramUniform3fv(GLuint program, GLint location, GLsizei count, const GLfloat *value);
+    GLAPI void APIENTRY glProgramUniform3d(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2);
+    GLAPI void APIENTRY glProgramUniform3dv(GLuint program, GLint location, GLsizei count, const GLdouble *value);
+    GLAPI void APIENTRY glProgramUniform3ui(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2);
+    GLAPI void APIENTRY glProgramUniform3uiv(GLuint program, GLint location, GLsizei count, const GLuint *value);
+    GLAPI void APIENTRY glProgramUniform4i(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
+    GLAPI void APIENTRY glProgramUniform4iv(GLuint program, GLint location, GLsizei count, const GLint *value);
+    GLAPI void APIENTRY glProgramUniform4f(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
+    GLAPI void APIENTRY glProgramUniform4fv(GLuint program, GLint location, GLsizei count, const GLfloat *value);
+    GLAPI void APIENTRY glProgramUniform4d(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2, GLdouble v3);
+    GLAPI void APIENTRY glProgramUniform4dv(GLuint program, GLint location, GLsizei count, const GLdouble *value);
+    GLAPI void APIENTRY glProgramUniform4ui(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
+    GLAPI void APIENTRY glProgramUniform4uiv(GLuint program, GLint location, GLsizei count, const GLuint *value);
+    GLAPI void APIENTRY glProgramUniformMatrix2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
+    GLAPI void APIENTRY glProgramUniformMatrix3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
+    GLAPI void APIENTRY glProgramUniformMatrix4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
+    GLAPI void APIENTRY glProgramUniformMatrix2dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
+    GLAPI void APIENTRY glProgramUniformMatrix3dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
+    GLAPI void APIENTRY glProgramUniformMatrix4dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
+    GLAPI void APIENTRY glProgramUniformMatrix2x3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
+    GLAPI void APIENTRY glProgramUniformMatrix3x2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
+    GLAPI void APIENTRY glProgramUniformMatrix2x4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
+    GLAPI void APIENTRY glProgramUniformMatrix4x2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
+    GLAPI void APIENTRY glProgramUniformMatrix3x4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
+    GLAPI void APIENTRY glProgramUniformMatrix4x3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
+    GLAPI void APIENTRY glProgramUniformMatrix2x3dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
+    GLAPI void APIENTRY glProgramUniformMatrix3x2dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
+    GLAPI void APIENTRY glProgramUniformMatrix2x4dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
+    GLAPI void APIENTRY glProgramUniformMatrix4x2dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
+    GLAPI void APIENTRY glProgramUniformMatrix3x4dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
+    GLAPI void APIENTRY glProgramUniformMatrix4x3dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
+    GLAPI void APIENTRY glValidateProgramPipeline(GLuint pipeline);
+    GLAPI void APIENTRY glGetProgramPipelineInfoLog(GLuint pipeline, GLsizei bufSize, GLsizei *length, GLchar *infoLog);
+#endif /* GL_GLEXT_PROTOTYPES */
+    typedef void (APIENTRYP PFNGLUSEPROGRAMSTAGESPROC)(GLuint pipeline, GLbitfield stages, GLuint program);
+    typedef void (APIENTRYP PFNGLACTIVESHADERPROGRAMPROC)(GLuint pipeline, GLuint program);
+    typedef GLuint(APIENTRYP PFNGLCREATESHADERPROGRAMVPROC)(GLenum type, GLsizei count, const GLchar* *strings);
+    typedef void (APIENTRYP PFNGLBINDPROGRAMPIPELINEPROC)(GLuint pipeline);
+    typedef void (APIENTRYP PFNGLDELETEPROGRAMPIPELINESPROC)(GLsizei n, const GLuint *pipelines);
+    typedef void (APIENTRYP PFNGLGENPROGRAMPIPELINESPROC)(GLsizei n, GLuint *pipelines);
+    typedef GLboolean(APIENTRYP PFNGLISPROGRAMPIPELINEPROC)(GLuint pipeline);
+    typedef void (APIENTRYP PFNGLGETPROGRAMPIPELINEIVPROC)(GLuint pipeline, GLenum pname, GLint *params);
+    typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1IPROC)(GLuint program, GLint location, GLint v0);
+    typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1IVPROC)(GLuint program, GLint location, GLsizei count, const GLint *value);
+    typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1FPROC)(GLuint program, GLint location, GLfloat v0);
+    typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1FVPROC)(GLuint program, GLint location, GLsizei count, const GLfloat *value);
+    typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1DPROC)(GLuint program, GLint location, GLdouble v0);
+    typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1DVPROC)(GLuint program, GLint location, GLsizei count, const GLdouble *value);
+    typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1UIPROC)(GLuint program, GLint location, GLuint v0);
+    typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1UIVPROC)(GLuint program, GLint location, GLsizei count, const GLuint *value);
+    typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2IPROC)(GLuint program, GLint location, GLint v0, GLint v1);
+    typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2IVPROC)(GLuint program, GLint location, GLsizei count, const GLint *value);
+    typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2FPROC)(GLuint program, GLint location, GLfloat v0, GLfloat v1);
+    typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2FVPROC)(GLuint program, GLint location, GLsizei count, const GLfloat *value);
+    typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2DPROC)(GLuint program, GLint location, GLdouble v0, GLdouble v1);
+    typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2DVPROC)(GLuint program, GLint location, GLsizei count, const GLdouble *value);
+    typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2UIPROC)(GLuint program, GLint location, GLuint v0, GLuint v1);
+    typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2UIVPROC)(GLuint program, GLint location, GLsizei count, const GLuint *value);
+    typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3IPROC)(GLuint program, GLint location, GLint v0, GLint v1, GLint v2);
+    typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3IVPROC)(GLuint program, GLint location, GLsizei count, const GLint *value);
+    typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3FPROC)(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
+    typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3FVPROC)(GLuint program, GLint location, GLsizei count, const GLfloat *value);
+    typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3DPROC)(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2);
+    typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3DVPROC)(GLuint program, GLint location, GLsizei count, const GLdouble *value);
+    typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3UIPROC)(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2);
+    typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3UIVPROC)(GLuint program, GLint location, GLsizei count, const GLuint *value);
+    typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4IPROC)(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
+    typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4IVPROC)(GLuint program, GLint location, GLsizei count, const GLint *value);
+    typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4FPROC)(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
+    typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4FVPROC)(GLuint program, GLint location, GLsizei count, const GLfloat *value);
+    typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4DPROC)(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2, GLdouble v3);
+    typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4DVPROC)(GLuint program, GLint location, GLsizei count, const GLdouble *value);
+    typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4UIPROC)(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
+    typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4UIVPROC)(GLuint program, GLint location, GLsizei count, const GLuint *value);
+    typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX2FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
+    typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX3FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
+    typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX4FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
+    typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX2DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
+    typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX3DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
+    typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX4DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
+    typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
+    typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
+    typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
+    typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
+    typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
+    typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
+    typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
+    typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
+    typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
+    typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
+    typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
+    typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
+    typedef void (APIENTRYP PFNGLVALIDATEPROGRAMPIPELINEPROC)(GLuint pipeline);
+    typedef void (APIENTRYP PFNGLGETPROGRAMPIPELINEINFOLOGPROC)(GLuint pipeline, GLsizei bufSize, GLsizei *length, GLchar *infoLog);
+#endif
+
+#ifndef GL_ARB_vertex_attrib_64bit
+#define GL_ARB_vertex_attrib_64bit 1
+#ifdef GL_GLEXT_PROTOTYPES
+    GLAPI void APIENTRY glVertexAttribL1d(GLuint index, GLdouble x);
+    GLAPI void APIENTRY glVertexAttribL2d(GLuint index, GLdouble x, GLdouble y);
+    GLAPI void APIENTRY glVertexAttribL3d(GLuint index, GLdouble x, GLdouble y, GLdouble z);
+    GLAPI void APIENTRY glVertexAttribL4d(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
+    GLAPI void APIENTRY glVertexAttribL1dv(GLuint index, const GLdouble *v);
+    GLAPI void APIENTRY glVertexAttribL2dv(GLuint index, const GLdouble *v);
+    GLAPI void APIENTRY glVertexAttribL3dv(GLuint index, const GLdouble *v);
+    GLAPI void APIENTRY glVertexAttribL4dv(GLuint index, const GLdouble *v);
+    GLAPI void APIENTRY glVertexAttribLPointer(GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
+    GLAPI void APIENTRY glGetVertexAttribLdv(GLuint index, GLenum pname, GLdouble *params);
+#endif /* GL_GLEXT_PROTOTYPES */
+    typedef void (APIENTRYP PFNGLVERTEXATTRIBL1DPROC)(GLuint index, GLdouble x);
+    typedef void (APIENTRYP PFNGLVERTEXATTRIBL2DPROC)(GLuint index, GLdouble x, GLdouble y);
+    typedef void (APIENTRYP PFNGLVERTEXATTRIBL3DPROC)(GLuint index, GLdouble x, GLdouble y, GLdouble z);
+    typedef void (APIENTRYP PFNGLVERTEXATTRIBL4DPROC)(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
+    typedef void (APIENTRYP PFNGLVERTEXATTRIBL1DVPROC)(GLuint index, const GLdouble *v);
+    typedef void (APIENTRYP PFNGLVERTEXATTRIBL2DVPROC)(GLuint index, const GLdouble *v);
+    typedef void (APIENTRYP PFNGLVERTEXATTRIBL3DVPROC)(GLuint index, const GLdouble *v);
+    typedef void (APIENTRYP PFNGLVERTEXATTRIBL4DVPROC)(GLuint index, const GLdouble *v);
+    typedef void (APIENTRYP PFNGLVERTEXATTRIBLPOINTERPROC)(GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
+    typedef void (APIENTRYP PFNGLGETVERTEXATTRIBLDVPROC)(GLuint index, GLenum pname, GLdouble *params);
+#endif
+
+#ifndef GL_ARB_viewport_array
+#define GL_ARB_viewport_array 1
+#ifdef GL_GLEXT_PROTOTYPES
+    GLAPI void APIENTRY glViewportArrayv(GLuint first, GLsizei count, const GLfloat *v);
+    GLAPI void APIENTRY glViewportIndexedf(GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h);
+    GLAPI void APIENTRY glViewportIndexedfv(GLuint index, const GLfloat *v);
+    GLAPI void APIENTRY glScissorArrayv(GLuint first, GLsizei count, const GLint *v);
+    GLAPI void APIENTRY glScissorIndexed(GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height);
+    GLAPI void APIENTRY glScissorIndexedv(GLuint index, const GLint *v);
+    GLAPI void APIENTRY glDepthRangeArrayv(GLuint first, GLsizei count, const GLclampd *v);
+    GLAPI void APIENTRY glDepthRangeIndexed(GLuint index, GLclampd n, GLclampd f);
+    GLAPI void APIENTRY glGetFloati_v(GLenum target, GLuint index, GLfloat *data);
+    GLAPI void APIENTRY glGetDoublei_v(GLenum target, GLuint index, GLdouble *data);
+#endif /* GL_GLEXT_PROTOTYPES */
+    typedef void (APIENTRYP PFNGLVIEWPORTARRAYVPROC)(GLuint first, GLsizei count, const GLfloat *v);
+    typedef void (APIENTRYP PFNGLVIEWPORTINDEXEDFPROC)(GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h);
+    typedef void (APIENTRYP PFNGLVIEWPORTINDEXEDFVPROC)(GLuint index, const GLfloat *v);
+    typedef void (APIENTRYP PFNGLSCISSORARRAYVPROC)(GLuint first, GLsizei count, const GLint *v);
+    typedef void (APIENTRYP PFNGLSCISSORINDEXEDPROC)(GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height);
+    typedef void (APIENTRYP PFNGLSCISSORINDEXEDVPROC)(GLuint index, const GLint *v);
+    typedef void (APIENTRYP PFNGLDEPTHRANGEARRAYVPROC)(GLuint first, GLsizei count, const GLclampd *v);
+    typedef void (APIENTRYP PFNGLDEPTHRANGEINDEXEDPROC)(GLuint index, GLclampd n, GLclampd f);
+    typedef void (APIENTRYP PFNGLGETFLOATI_VPROC)(GLenum target, GLuint index, GLfloat *data);
+    typedef void (APIENTRYP PFNGLGETDOUBLEI_VPROC)(GLenum target, GLuint index, GLdouble *data);
+#endif
+
+#ifndef GL_ARB_cl_event
+#define GL_ARB_cl_event 1
+#ifdef GL_GLEXT_PROTOTYPES
+    GLAPI GLsync APIENTRY glCreateSyncFromCLeventARB(struct _cl_context * context, struct _cl_event * event, GLbitfield flags);
+#endif /* GL_GLEXT_PROTOTYPES */
+    typedef GLsync(APIENTRYP PFNGLCREATESYNCFROMCLEVENTARBPROC)(struct _cl_context * context, struct _cl_event * event, GLbitfield flags);
+#endif
+
+#ifndef GL_ARB_debug_output
+#define GL_ARB_debug_output 1
+#ifdef GL_GLEXT_PROTOTYPES
+    GLAPI void APIENTRY glDebugMessageControlARB(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled);
+    GLAPI void APIENTRY glDebugMessageInsertARB(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf);
+    GLAPI void APIENTRY glDebugMessageCallbackARB(GLDEBUGPROCARB callback, const GLvoid *userParam);
+    GLAPI GLuint APIENTRY glGetDebugMessageLogARB(GLuint count, GLsizei bufsize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog);
+#endif /* GL_GLEXT_PROTOTYPES */
+    typedef void (APIENTRYP PFNGLDEBUGMESSAGECONTROLARBPROC)(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled);
+    typedef void (APIENTRYP PFNGLDEBUGMESSAGEINSERTARBPROC)(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf);
+    typedef void (APIENTRYP PFNGLDEBUGMESSAGECALLBACKARBPROC)(GLDEBUGPROCARB callback, const GLvoid *userParam);
+    typedef GLuint(APIENTRYP PFNGLGETDEBUGMESSAGELOGARBPROC)(GLuint count, GLsizei bufsize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog);
+#endif
+
+#ifndef GL_ARB_robustness
+#define GL_ARB_robustness 1
+#ifdef GL_GLEXT_PROTOTYPES
+    GLAPI GLenum APIENTRY glGetGraphicsResetStatusARB(void);
+    GLAPI void APIENTRY glGetnMapdvARB(GLenum target, GLenum query, GLsizei bufSize, GLdouble *v);
+    GLAPI void APIENTRY glGetnMapfvARB(GLenum target, GLenum query, GLsizei bufSize, GLfloat *v);
+    GLAPI void APIENTRY glGetnMapivARB(GLenum target, GLenum query, GLsizei bufSize, GLint *v);
+    GLAPI void APIENTRY glGetnPixelMapfvARB(GLenum map, GLsizei bufSize, GLfloat *values);
+    GLAPI void APIENTRY glGetnPixelMapuivARB(GLenum map, GLsizei bufSize, GLuint *values);
+    GLAPI void APIENTRY glGetnPixelMapusvARB(GLenum map, GLsizei bufSize, GLushort *values);
+    GLAPI void APIENTRY glGetnPolygonStippleARB(GLsizei bufSize, GLubyte *pattern);
+    GLAPI void APIENTRY glGetnColorTableARB(GLenum target, GLenum format, GLenum type, GLsizei bufSize, GLvoid *table);
+    GLAPI void APIENTRY glGetnConvolutionFilterARB(GLenum target, GLenum format, GLenum type, GLsizei bufSize, GLvoid *image);
+    GLAPI void APIENTRY glGetnSeparableFilterARB(GLenum target, GLenum format, GLenum type, GLsizei rowBufSize, GLvoid *row, GLsizei columnBufSize, GLvoid *column, GLvoid *span);
+    GLAPI void APIENTRY glGetnHistogramARB(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, GLvoid *values);
+    GLAPI void APIENTRY glGetnMinmaxARB(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, GLvoid *values);
+    GLAPI void APIENTRY glGetnTexImageARB(GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, GLvoid *img);
+    GLAPI void APIENTRY glReadnPixelsARB(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, GLvoid *data);
+    GLAPI void APIENTRY glGetnCompressedTexImageARB(GLenum target, GLint lod, GLsizei bufSize, GLvoid *img);
+    GLAPI void APIENTRY glGetnUniformfvARB(GLuint program, GLint location, GLsizei bufSize, GLfloat *params);
+    GLAPI void APIENTRY glGetnUniformivARB(GLuint program, GLint location, GLsizei bufSize, GLint *params);
+    GLAPI void APIENTRY glGetnUniformuivARB(GLuint program, GLint location, GLsizei bufSize, GLuint *params);
+    GLAPI void APIENTRY glGetnUniformdvARB(GLuint program, GLint location, GLsizei bufSize, GLdouble *params);
+#endif /* GL_GLEXT_PROTOTYPES */
+    typedef GLenum(APIENTRYP PFNGLGETGRAPHICSRESETSTATUSARBPROC)(void);
+    typedef void (APIENTRYP PFNGLGETNMAPDVARBPROC)(GLenum target, GLenum query, GLsizei bufSize, GLdouble *v);
+    typedef void (APIENTRYP PFNGLGETNMAPFVARBPROC)(GLenum target, GLenum query, GLsizei bufSize, GLfloat *v);
+    typedef void (APIENTRYP PFNGLGETNMAPIVARBPROC)(GLenum target, GLenum query, GLsizei bufSize, GLint *v);
+    typedef void (APIENTRYP PFNGLGETNPIXELMAPFVARBPROC)(GLenum map, GLsizei bufSize, GLfloat *values);
+    typedef void (APIENTRYP PFNGLGETNPIXELMAPUIVARBPROC)(GLenum map, GLsizei bufSize, GLuint *values);
+    typedef void (APIENTRYP PFNGLGETNPIXELMAPUSVARBPROC)(GLenum map, GLsizei bufSize, GLushort *values);
+    typedef void (APIENTRYP PFNGLGETNPOLYGONSTIPPLEARBPROC)(GLsizei bufSize, GLubyte *pattern);
+    typedef void (APIENTRYP PFNGLGETNCOLORTABLEARBPROC)(GLenum target, GLenum format, GLenum type, GLsizei bufSize, GLvoid *table);
+    typedef void (APIENTRYP PFNGLGETNCONVOLUTIONFILTERARBPROC)(GLenum target, GLenum format, GLenum type, GLsizei bufSize, GLvoid *image);
+    typedef void (APIENTRYP PFNGLGETNSEPARABLEFILTERARBPROC)(GLenum target, GLenum format, GLenum type, GLsizei rowBufSize, GLvoid *row, GLsizei columnBufSize, GLvoid *column, GLvoid *span);
+    typedef void (APIENTRYP PFNGLGETNHISTOGRAMARBPROC)(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, GLvoid *values);
+    typedef void (APIENTRYP PFNGLGETNMINMAXARBPROC)(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, GLvoid *values);
+    typedef void (APIENTRYP PFNGLGETNTEXIMAGEARBPROC)(GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, GLvoid *img);
+    typedef void (APIENTRYP PFNGLREADNPIXELSARBPROC)(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, GLvoid *data);
+    typedef void (APIENTRYP PFNGLGETNCOMPRESSEDTEXIMAGEARBPROC)(GLenum target, GLint lod, GLsizei bufSize, GLvoid *img);
+    typedef void (APIENTRYP PFNGLGETNUNIFORMFVARBPROC)(GLuint program, GLint location, GLsizei bufSize, GLfloat *params);
+    typedef void (APIENTRYP PFNGLGETNUNIFORMIVARBPROC)(GLuint program, GLint location, GLsizei bufSize, GLint *params);
+    typedef void (APIENTRYP PFNGLGETNUNIFORMUIVARBPROC)(GLuint program, GLint location, GLsizei bufSize, GLuint *params);
+    typedef void (APIENTRYP PFNGLGETNUNIFORMDVARBPROC)(GLuint program, GLint location, GLsizei bufSize, GLdouble *params);
+#endif
+
+#ifndef GL_ARB_shader_stencil_export
+#define GL_ARB_shader_stencil_export 1
+#endif
+
+#ifndef GL_ARB_base_instance
+#define GL_ARB_base_instance 1
+#ifdef GL_GLEXT_PROTOTYPES
+    GLAPI void APIENTRY glDrawArraysInstancedBaseInstance(GLenum mode, GLint first, GLsizei count, GLsizei primcount, GLuint baseinstance);
+    GLAPI void APIENTRY glDrawElementsInstancedBaseInstance(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei primcount, GLuint baseinstance);
+    GLAPI void APIENTRY glDrawElementsInstancedBaseVertexBaseInstance(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei primcount, GLint basevertex, GLuint baseinstance);
+#endif /* GL_GLEXT_PROTOTYPES */
+    typedef void (APIENTRYP PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEPROC)(GLenum mode, GLint first, GLsizei count, GLsizei primcount, GLuint baseinstance);
+    typedef void (APIENTRYP PFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEPROC)(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei primcount, GLuint baseinstance);
+    typedef void (APIENTRYP PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEPROC)(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei primcount, GLint basevertex, GLuint baseinstance);
+#endif
+
+#ifndef GL_ARB_shading_language_420pack
+#define GL_ARB_shading_language_420pack 1
+#endif
+
+#ifndef GL_ARB_transform_feedback_instanced
+#define GL_ARB_transform_feedback_instanced 1
+#ifdef GL_GLEXT_PROTOTYPES
+    GLAPI void APIENTRY glDrawTransformFeedbackInstanced(GLenum mode, GLuint id, GLsizei primcount);
+    GLAPI void APIENTRY glDrawTransformFeedbackStreamInstanced(GLenum mode, GLuint id, GLuint stream, GLsizei primcount);
+#endif /* GL_GLEXT_PROTOTYPES */
+    typedef void (APIENTRYP PFNGLDRAWTRANSFORMFEEDBACKINSTANCEDPROC)(GLenum mode, GLuint id, GLsizei primcount);
+    typedef void (APIENTRYP PFNGLDRAWTRANSFORMFEEDBACKSTREAMINSTANCEDPROC)(GLenum mode, GLuint id, GLuint stream, GLsizei primcount);
+#endif
+
+#ifndef GL_ARB_compressed_texture_pixel_storage
+#define GL_ARB_compressed_texture_pixel_storage 1
+#endif
+
+#ifndef GL_ARB_conservative_depth
+#define GL_ARB_conservative_depth 1
+#endif
+
+#ifndef GL_ARB_internalformat_query
+#define GL_ARB_internalformat_query 1
+#ifdef GL_GLEXT_PROTOTYPES
+    GLAPI void APIENTRY glGetInternalformativ(GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint *params);
+#endif /* GL_GLEXT_PROTOTYPES */
+    typedef void (APIENTRYP PFNGLGETINTERNALFORMATIVPROC)(GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint *params);
+#endif
+
+#ifndef GL_ARB_map_buffer_alignment
+#define GL_ARB_map_buffer_alignment 1
+#endif
+
+#ifndef GL_ARB_shader_atomic_counters
+#define GL_ARB_shader_atomic_counters 1
+#ifdef GL_GLEXT_PROTOTYPES
+    GLAPI void APIENTRY glGetActiveAtomicCounterBufferiv(GLuint program, GLuint bufferIndex, GLenum pname, GLint *params);
+#endif /* GL_GLEXT_PROTOTYPES */
+    typedef void (APIENTRYP PFNGLGETACTIVEATOMICCOUNTERBUFFERIVPROC)(GLuint program, GLuint bufferIndex, GLenum pname, GLint *params);
+#endif
+
+#ifndef GL_ARB_shader_image_load_store
+#define GL_ARB_shader_image_load_store 1
+#ifdef GL_GLEXT_PROTOTYPES
+    GLAPI void APIENTRY glBindImageTexture(GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format);
+    GLAPI void APIENTRY glMemoryBarrier(GLbitfield barriers);
+#endif /* GL_GLEXT_PROTOTYPES */
+    typedef void (APIENTRYP PFNGLBINDIMAGETEXTUREPROC)(GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format);
+    typedef void (APIENTRYP PFNGLMEMORYBARRIERPROC)(GLbitfield barriers);
+#endif
+
+#ifndef GL_ARB_shading_language_packing
+#define GL_ARB_shading_language_packing 1
+#endif
+
+#ifndef GL_ARB_texture_storage
+#define GL_ARB_texture_storage 1
+#ifdef GL_GLEXT_PROTOTYPES
+    GLAPI void APIENTRY glTexStorage1D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width);
+    GLAPI void APIENTRY glTexStorage2D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);
+    GLAPI void APIENTRY glTexStorage3D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth);
+    GLAPI void APIENTRY glTextureStorage1DEXT(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width);
+    GLAPI void APIENTRY glTextureStorage2DEXT(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);
+    GLAPI void APIENTRY glTextureStorage3DEXT(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth);
+#endif /* GL_GLEXT_PROTOTYPES */
+    typedef void (APIENTRYP PFNGLTEXSTORAGE1DPROC)(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width);
+    typedef void (APIENTRYP PFNGLTEXSTORAGE2DPROC)(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);
+    typedef void (APIENTRYP PFNGLTEXSTORAGE3DPROC)(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth);
+    typedef void (APIENTRYP PFNGLTEXTURESTORAGE1DEXTPROC)(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width);
+    typedef void (APIENTRYP PFNGLTEXTURESTORAGE2DEXTPROC)(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);
+    typedef void (APIENTRYP PFNGLTEXTURESTORAGE3DEXTPROC)(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth);
+#endif
+
 #ifndef GL_EXT_abgr
 #define GL_EXT_abgr 1
 #endif
@@ -3668,7 +7870,7 @@
 #ifndef GL_EXT_blend_color
 #define GL_EXT_blend_color 1
 #ifdef GL_GLEXT_PROTOTYPES
-    GLAPI void APIENTRY glBlendColorEXT(GLclampf, GLclampf, GLclampf, GLclampf);
+    GLAPI void APIENTRY glBlendColorEXT(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha);
 #endif /* GL_GLEXT_PROTOTYPES */
     typedef void (APIENTRYP PFNGLBLENDCOLOREXTPROC)(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha);
 #endif
@@ -3676,7 +7878,7 @@
 #ifndef GL_EXT_polygon_offset
 #define GL_EXT_polygon_offset 1
 #ifdef GL_GLEXT_PROTOTYPES
-    GLAPI void APIENTRY glPolygonOffsetEXT(GLfloat, GLfloat);
+    GLAPI void APIENTRY glPolygonOffsetEXT(GLfloat factor, GLfloat bias);
 #endif /* GL_GLEXT_PROTOTYPES */
     typedef void (APIENTRYP PFNGLPOLYGONOFFSETEXTPROC)(GLfloat factor, GLfloat bias);
 #endif
@@ -3688,8 +7890,8 @@
 #ifndef GL_EXT_texture3D
 #define GL_EXT_texture3D 1
 #ifdef GL_GLEXT_PROTOTYPES
-    GLAPI void APIENTRY glTexImage3DEXT(GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, const GLvoid *);
-    GLAPI void APIENTRY glTexSubImage3DEXT(GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, const GLvoid *);
+    GLAPI void APIENTRY glTexImage3DEXT(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
+    GLAPI void APIENTRY glTexSubImage3DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels);
 #endif /* GL_GLEXT_PROTOTYPES */
     typedef void (APIENTRYP PFNGLTEXIMAGE3DEXTPROC)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
     typedef void (APIENTRYP PFNGLTEXSUBIMAGE3DEXTPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels);
@@ -3698,8 +7900,8 @@
 #ifndef GL_SGIS_texture_filter4
 #define GL_SGIS_texture_filter4 1
 #ifdef GL_GLEXT_PROTOTYPES
-    GLAPI void APIENTRY glGetTexFilterFuncSGIS(GLenum, GLenum, GLfloat *);
-    GLAPI void APIENTRY glTexFilterFuncSGIS(GLenum, GLenum, GLsizei, const GLfloat *);
+    GLAPI void APIENTRY glGetTexFilterFuncSGIS(GLenum target, GLenum filter, GLfloat *weights);
+    GLAPI void APIENTRY glTexFilterFuncSGIS(GLenum target, GLenum filter, GLsizei n, const GLfloat *weights);
 #endif /* GL_GLEXT_PROTOTYPES */
     typedef void (APIENTRYP PFNGLGETTEXFILTERFUNCSGISPROC)(GLenum target, GLenum filter, GLfloat *weights);
     typedef void (APIENTRYP PFNGLTEXFILTERFUNCSGISPROC)(GLenum target, GLenum filter, GLsizei n, const GLfloat *weights);
@@ -3708,8 +7910,8 @@
 #ifndef GL_EXT_subtexture
 #define GL_EXT_subtexture 1
 #ifdef GL_GLEXT_PROTOTYPES
-    GLAPI void APIENTRY glTexSubImage1DEXT(GLenum, GLint, GLint, GLsizei, GLenum, GLenum, const GLvoid *);
-    GLAPI void APIENTRY glTexSubImage2DEXT(GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, const GLvoid *);
+    GLAPI void APIENTRY glTexSubImage1DEXT(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels);
+    GLAPI void APIENTRY glTexSubImage2DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels);
 #endif /* GL_GLEXT_PROTOTYPES */
     typedef void (APIENTRYP PFNGLTEXSUBIMAGE1DEXTPROC)(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels);
     typedef void (APIENTRYP PFNGLTEXSUBIMAGE2DEXTPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels);
@@ -3718,11 +7920,11 @@
 #ifndef GL_EXT_copy_texture
 #define GL_EXT_copy_texture 1
 #ifdef GL_GLEXT_PROTOTYPES
-    GLAPI void APIENTRY glCopyTexImage1DEXT(GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLint);
-    GLAPI void APIENTRY glCopyTexImage2DEXT(GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLsizei, GLint);
-    GLAPI void APIENTRY glCopyTexSubImage1DEXT(GLenum, GLint, GLint, GLint, GLint, GLsizei);
-    GLAPI void APIENTRY glCopyTexSubImage2DEXT(GLenum, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei);
-    GLAPI void APIENTRY glCopyTexSubImage3DEXT(GLenum, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei);
+    GLAPI void APIENTRY glCopyTexImage1DEXT(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
+    GLAPI void APIENTRY glCopyTexImage2DEXT(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
+    GLAPI void APIENTRY glCopyTexSubImage1DEXT(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
+    GLAPI void APIENTRY glCopyTexSubImage2DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
+    GLAPI void APIENTRY glCopyTexSubImage3DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
 #endif /* GL_GLEXT_PROTOTYPES */
     typedef void (APIENTRYP PFNGLCOPYTEXIMAGE1DEXTPROC)(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
     typedef void (APIENTRYP PFNGLCOPYTEXIMAGE2DEXTPROC)(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
@@ -3734,16 +7936,16 @@
 #ifndef GL_EXT_histogram
 #define GL_EXT_histogram 1
 #ifdef GL_GLEXT_PROTOTYPES
-    GLAPI void APIENTRY glGetHistogramEXT(GLenum, GLboolean, GLenum, GLenum, GLvoid *);
-    GLAPI void APIENTRY glGetHistogramParameterfvEXT(GLenum, GLenum, GLfloat *);
-    GLAPI void APIENTRY glGetHistogramParameterivEXT(GLenum, GLenum, GLint *);
-    GLAPI void APIENTRY glGetMinmaxEXT(GLenum, GLboolean, GLenum, GLenum, GLvoid *);
-    GLAPI void APIENTRY glGetMinmaxParameterfvEXT(GLenum, GLenum, GLfloat *);
-    GLAPI void APIENTRY glGetMinmaxParameterivEXT(GLenum, GLenum, GLint *);
-    GLAPI void APIENTRY glHistogramEXT(GLenum, GLsizei, GLenum, GLboolean);
-    GLAPI void APIENTRY glMinmaxEXT(GLenum, GLenum, GLboolean);
-    GLAPI void APIENTRY glResetHistogramEXT(GLenum);
-    GLAPI void APIENTRY glResetMinmaxEXT(GLenum);
+    GLAPI void APIENTRY glGetHistogramEXT(GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *values);
+    GLAPI void APIENTRY glGetHistogramParameterfvEXT(GLenum target, GLenum pname, GLfloat *params);
+    GLAPI void APIENTRY glGetHistogramParameterivEXT(GLenum target, GLenum pname, GLint *params);
+    GLAPI void APIENTRY glGetMinmaxEXT(GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *values);
+    GLAPI void APIENTRY glGetMinmaxParameterfvEXT(GLenum target, GLenum pname, GLfloat *params);
+    GLAPI void APIENTRY glGetMinmaxParameterivEXT(GLenum target, GLenum pname, GLint *params);
+    GLAPI void APIENTRY glHistogramEXT(GLenum target, GLsizei width, GLenum internalformat, GLboolean sink);
+    GLAPI void APIENTRY glMinmaxEXT(GLenum target, GLenum internalformat, GLboolean sink);
+    GLAPI void APIENTRY glResetHistogramEXT(GLenum target);
+    GLAPI void APIENTRY glResetMinmaxEXT(GLenum target);
 #endif /* GL_GLEXT_PROTOTYPES */
     typedef void (APIENTRYP PFNGLGETHISTOGRAMEXTPROC)(GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *values);
     typedef void (APIENTRYP PFNGLGETHISTOGRAMPARAMETERFVEXTPROC)(GLenum target, GLenum pname, GLfloat *params);
@@ -3760,19 +7962,19 @@
 #ifndef GL_EXT_convolution
 #define GL_EXT_convolution 1
 #ifdef GL_GLEXT_PROTOTYPES
-    GLAPI void APIENTRY glConvolutionFilter1DEXT(GLenum, GLenum, GLsizei, GLenum, GLenum, const GLvoid *);
-    GLAPI void APIENTRY glConvolutionFilter2DEXT(GLenum, GLenum, GLsizei, GLsizei, GLenum, GLenum, const GLvoid *);
-    GLAPI void APIENTRY glConvolutionParameterfEXT(GLenum, GLenum, GLfloat);
-    GLAPI void APIENTRY glConvolutionParameterfvEXT(GLenum, GLenum, const GLfloat *);
-    GLAPI void APIENTRY glConvolutionParameteriEXT(GLenum, GLenum, GLint);
-    GLAPI void APIENTRY glConvolutionParameterivEXT(GLenum, GLenum, const GLint *);
-    GLAPI void APIENTRY glCopyConvolutionFilter1DEXT(GLenum, GLenum, GLint, GLint, GLsizei);
-    GLAPI void APIENTRY glCopyConvolutionFilter2DEXT(GLenum, GLenum, GLint, GLint, GLsizei, GLsizei);
-    GLAPI void APIENTRY glGetConvolutionFilterEXT(GLenum, GLenum, GLenum, GLvoid *);
-    GLAPI void APIENTRY glGetConvolutionParameterfvEXT(GLenum, GLenum, GLfloat *);
-    GLAPI void APIENTRY glGetConvolutionParameterivEXT(GLenum, GLenum, GLint *);
-    GLAPI void APIENTRY glGetSeparableFilterEXT(GLenum, GLenum, GLenum, GLvoid *, GLvoid *, GLvoid *);
-    GLAPI void APIENTRY glSeparableFilter2DEXT(GLenum, GLenum, GLsizei, GLsizei, GLenum, GLenum, const GLvoid *, const GLvoid *);
+    GLAPI void APIENTRY glConvolutionFilter1DEXT(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *image);
+    GLAPI void APIENTRY glConvolutionFilter2DEXT(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *image);
+    GLAPI void APIENTRY glConvolutionParameterfEXT(GLenum target, GLenum pname, GLfloat params);
+    GLAPI void APIENTRY glConvolutionParameterfvEXT(GLenum target, GLenum pname, const GLfloat *params);
+    GLAPI void APIENTRY glConvolutionParameteriEXT(GLenum target, GLenum pname, GLint params);
+    GLAPI void APIENTRY glConvolutionParameterivEXT(GLenum target, GLenum pname, const GLint *params);
+    GLAPI void APIENTRY glCopyConvolutionFilter1DEXT(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);
+    GLAPI void APIENTRY glCopyConvolutionFilter2DEXT(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height);
+    GLAPI void APIENTRY glGetConvolutionFilterEXT(GLenum target, GLenum format, GLenum type, GLvoid *image);
+    GLAPI void APIENTRY glGetConvolutionParameterfvEXT(GLenum target, GLenum pname, GLfloat *params);
+    GLAPI void APIENTRY glGetConvolutionParameterivEXT(GLenum target, GLenum pname, GLint *params);
+    GLAPI void APIENTRY glGetSeparableFilterEXT(GLenum target, GLenum format, GLenum type, GLvoid *row, GLvoid *column, GLvoid *span);
+    GLAPI void APIENTRY glSeparableFilter2DEXT(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *row, const GLvoid *column);
 #endif /* GL_GLEXT_PROTOTYPES */
     typedef void (APIENTRYP PFNGLCONVOLUTIONFILTER1DEXTPROC)(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *image);
     typedef void (APIENTRYP PFNGLCONVOLUTIONFILTER2DEXTPROC)(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *image);
@@ -3789,20 +7991,20 @@
     typedef void (APIENTRYP PFNGLSEPARABLEFILTER2DEXTPROC)(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *row, const GLvoid *column);
 #endif
 
-#ifndef GL_EXT_color_matrix
-#define GL_EXT_color_matrix 1
+#ifndef GL_SGI_color_matrix
+#define GL_SGI_color_matrix 1
 #endif
 
 #ifndef GL_SGI_color_table
 #define GL_SGI_color_table 1
 #ifdef GL_GLEXT_PROTOTYPES
-    GLAPI void APIENTRY glColorTableSGI(GLenum, GLenum, GLsizei, GLenum, GLenum, const GLvoid *);
-    GLAPI void APIENTRY glColorTableParameterfvSGI(GLenum, GLenum, const GLfloat *);
-    GLAPI void APIENTRY glColorTableParameterivSGI(GLenum, GLenum, const GLint *);
-    GLAPI void APIENTRY glCopyColorTableSGI(GLenum, GLenum, GLint, GLint, GLsizei);
-    GLAPI void APIENTRY glGetColorTableSGI(GLenum, GLenum, GLenum, GLvoid *);
-    GLAPI void APIENTRY glGetColorTableParameterfvSGI(GLenum, GLenum, GLfloat *);
-    GLAPI void APIENTRY glGetColorTableParameterivSGI(GLenum, GLenum, GLint *);
+    GLAPI void APIENTRY glColorTableSGI(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *table);
+    GLAPI void APIENTRY glColorTableParameterfvSGI(GLenum target, GLenum pname, const GLfloat *params);
+    GLAPI void APIENTRY glColorTableParameterivSGI(GLenum target, GLenum pname, const GLint *params);
+    GLAPI void APIENTRY glCopyColorTableSGI(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);
+    GLAPI void APIENTRY glGetColorTableSGI(GLenum target, GLenum format, GLenum type, GLvoid *table);
+    GLAPI void APIENTRY glGetColorTableParameterfvSGI(GLenum target, GLenum pname, GLfloat *params);
+    GLAPI void APIENTRY glGetColorTableParameterivSGI(GLenum target, GLenum pname, GLint *params);
 #endif /* GL_GLEXT_PROTOTYPES */
     typedef void (APIENTRYP PFNGLCOLORTABLESGIPROC)(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *table);
     typedef void (APIENTRYP PFNGLCOLORTABLEPARAMETERFVSGIPROC)(GLenum target, GLenum pname, const GLfloat *params);
@@ -3816,7 +8018,7 @@
 #ifndef GL_SGIX_pixel_texture
 #define GL_SGIX_pixel_texture 1
 #ifdef GL_GLEXT_PROTOTYPES
-    GLAPI void APIENTRY glPixelTexGenSGIX(GLenum);
+    GLAPI void APIENTRY glPixelTexGenSGIX(GLenum mode);
 #endif /* GL_GLEXT_PROTOTYPES */
     typedef void (APIENTRYP PFNGLPIXELTEXGENSGIXPROC)(GLenum mode);
 #endif
@@ -3824,12 +8026,12 @@
 #ifndef GL_SGIS_pixel_texture
 #define GL_SGIS_pixel_texture 1
 #ifdef GL_GLEXT_PROTOTYPES
-    GLAPI void APIENTRY glPixelTexGenParameteriSGIS(GLenum, GLint);
-    GLAPI void APIENTRY glPixelTexGenParameterivSGIS(GLenum, const GLint *);
-    GLAPI void APIENTRY glPixelTexGenParameterfSGIS(GLenum, GLfloat);
-    GLAPI void APIENTRY glPixelTexGenParameterfvSGIS(GLenum, const GLfloat *);
-    GLAPI void APIENTRY glGetPixelTexGenParameterivSGIS(GLenum, GLint *);
-    GLAPI void APIENTRY glGetPixelTexGenParameterfvSGIS(GLenum, GLfloat *);
+    GLAPI void APIENTRY glPixelTexGenParameteriSGIS(GLenum pname, GLint param);
+    GLAPI void APIENTRY glPixelTexGenParameterivSGIS(GLenum pname, const GLint *params);
+    GLAPI void APIENTRY glPixelTexGenParameterfSGIS(GLenum pname, GLfloat param);
+    GLAPI void APIENTRY glPixelTexGenParameterfvSGIS(GLenum pname, const GLfloat *params);
+    GLAPI void APIENTRY glGetPixelTexGenParameterivSGIS(GLenum pname, GLint *params);
+    GLAPI void APIENTRY glGetPixelTexGenParameterfvSGIS(GLenum pname, GLfloat *params);
 #endif /* GL_GLEXT_PROTOTYPES */
     typedef void (APIENTRYP PFNGLPIXELTEXGENPARAMETERISGISPROC)(GLenum pname, GLint param);
     typedef void (APIENTRYP PFNGLPIXELTEXGENPARAMETERIVSGISPROC)(GLenum pname, const GLint *params);
@@ -3842,8 +8044,8 @@
 #ifndef GL_SGIS_texture4D
 #define GL_SGIS_texture4D 1
 #ifdef GL_GLEXT_PROTOTYPES
-    GLAPI void APIENTRY glTexImage4DSGIS(GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, const GLvoid *);
-    GLAPI void APIENTRY glTexSubImage4DSGIS(GLenum, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLsizei, GLenum, GLenum, const GLvoid *);
+    GLAPI void APIENTRY glTexImage4DSGIS(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
+    GLAPI void APIENTRY glTexSubImage4DSGIS(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint woffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLenum format, GLenum type, const GLvoid *pixels);
 #endif /* GL_GLEXT_PROTOTYPES */
     typedef void (APIENTRYP PFNGLTEXIMAGE4DSGISPROC)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
     typedef void (APIENTRYP PFNGLTEXSUBIMAGE4DSGISPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint woffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLenum format, GLenum type, const GLvoid *pixels);
@@ -3860,12 +8062,12 @@
 #ifndef GL_EXT_texture_object
 #define GL_EXT_texture_object 1
 #ifdef GL_GLEXT_PROTOTYPES
-    GLAPI GLboolean APIENTRY glAreTexturesResidentEXT(GLsizei, const GLuint *, GLboolean *);
-    GLAPI void APIENTRY glBindTextureEXT(GLenum, GLuint);
-    GLAPI void APIENTRY glDeleteTexturesEXT(GLsizei, const GLuint *);
-    GLAPI void APIENTRY glGenTexturesEXT(GLsizei, GLuint *);
-    GLAPI GLboolean APIENTRY glIsTextureEXT(GLuint);
-    GLAPI void APIENTRY glPrioritizeTexturesEXT(GLsizei, const GLuint *, const GLclampf *);
+    GLAPI GLboolean APIENTRY glAreTexturesResidentEXT(GLsizei n, const GLuint *textures, GLboolean *residences);
+    GLAPI void APIENTRY glBindTextureEXT(GLenum target, GLuint texture);
+    GLAPI void APIENTRY glDeleteTexturesEXT(GLsizei n, const GLuint *textures);
+    GLAPI void APIENTRY glGenTexturesEXT(GLsizei n, GLuint *textures);
+    GLAPI GLboolean APIENTRY glIsTextureEXT(GLuint texture);
+    GLAPI void APIENTRY glPrioritizeTexturesEXT(GLsizei n, const GLuint *textures, const GLclampf *priorities);
 #endif /* GL_GLEXT_PROTOTYPES */
     typedef GLboolean(APIENTRYP PFNGLARETEXTURESRESIDENTEXTPROC)(GLsizei n, const GLuint *textures, GLboolean *residences);
     typedef void (APIENTRYP PFNGLBINDTEXTUREEXTPROC)(GLenum target, GLuint texture);
@@ -3878,8 +8080,8 @@
 #ifndef GL_SGIS_detail_texture
 #define GL_SGIS_detail_texture 1
 #ifdef GL_GLEXT_PROTOTYPES
-    GLAPI void APIENTRY glDetailTexFuncSGIS(GLenum, GLsizei, const GLfloat *);
-    GLAPI void APIENTRY glGetDetailTexFuncSGIS(GLenum, GLfloat *);
+    GLAPI void APIENTRY glDetailTexFuncSGIS(GLenum target, GLsizei n, const GLfloat *points);
+    GLAPI void APIENTRY glGetDetailTexFuncSGIS(GLenum target, GLfloat *points);
 #endif /* GL_GLEXT_PROTOTYPES */
     typedef void (APIENTRYP PFNGLDETAILTEXFUNCSGISPROC)(GLenum target, GLsizei n, const GLfloat *points);
     typedef void (APIENTRYP PFNGLGETDETAILTEXFUNCSGISPROC)(GLenum target, GLfloat *points);
@@ -3888,8 +8090,8 @@
 #ifndef GL_SGIS_sharpen_texture
 #define GL_SGIS_sharpen_texture 1
 #ifdef GL_GLEXT_PROTOTYPES
-    GLAPI void APIENTRY glSharpenTexFuncSGIS(GLenum, GLsizei, const GLfloat *);
-    GLAPI void APIENTRY glGetSharpenTexFuncSGIS(GLenum, GLfloat *);
+    GLAPI void APIENTRY glSharpenTexFuncSGIS(GLenum target, GLsizei n, const GLfloat *points);
+    GLAPI void APIENTRY glGetSharpenTexFuncSGIS(GLenum target, GLfloat *points);
 #endif /* GL_GLEXT_PROTOTYPES */
     typedef void (APIENTRYP PFNGLSHARPENTEXFUNCSGISPROC)(GLenum target, GLsizei n, const GLfloat *points);
     typedef void (APIENTRYP PFNGLGETSHARPENTEXFUNCSGISPROC)(GLenum target, GLfloat *points);
@@ -3906,8 +8108,8 @@
 #ifndef GL_SGIS_multisample
 #define GL_SGIS_multisample 1
 #ifdef GL_GLEXT_PROTOTYPES
-    GLAPI void APIENTRY glSampleMaskSGIS(GLclampf, GLboolean);
-    GLAPI void APIENTRY glSamplePatternSGIS(GLenum);
+    GLAPI void APIENTRY glSampleMaskSGIS(GLclampf value, GLboolean invert);
+    GLAPI void APIENTRY glSamplePatternSGIS(GLenum pattern);
 #endif /* GL_GLEXT_PROTOTYPES */
     typedef void (APIENTRYP PFNGLSAMPLEMASKSGISPROC)(GLclampf value, GLboolean invert);
     typedef void (APIENTRYP PFNGLSAMPLEPATTERNSGISPROC)(GLenum pattern);
@@ -3920,15 +8122,15 @@
 #ifndef GL_EXT_vertex_array
 #define GL_EXT_vertex_array 1
 #ifdef GL_GLEXT_PROTOTYPES
-    GLAPI void APIENTRY glArrayElementEXT(GLint);
-    GLAPI void APIENTRY glColorPointerEXT(GLint, GLenum, GLsizei, GLsizei, const GLvoid *);
-    GLAPI void APIENTRY glDrawArraysEXT(GLenum, GLint, GLsizei);
-    GLAPI void APIENTRY glEdgeFlagPointerEXT(GLsizei, GLsizei, const GLboolean *);
-    GLAPI void APIENTRY glGetPointervEXT(GLenum, GLvoid* *);
-    GLAPI void APIENTRY glIndexPointerEXT(GLenum, GLsizei, GLsizei, const GLvoid *);
-    GLAPI void APIENTRY glNormalPointerEXT(GLenum, GLsizei, GLsizei, const GLvoid *);
-    GLAPI void APIENTRY glTexCoordPointerEXT(GLint, GLenum, GLsizei, GLsizei, const GLvoid *);
-    GLAPI void APIENTRY glVertexPointerEXT(GLint, GLenum, GLsizei, GLsizei, const GLvoid *);
+    GLAPI void APIENTRY glArrayElementEXT(GLint i);
+    GLAPI void APIENTRY glColorPointerEXT(GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer);
+    GLAPI void APIENTRY glDrawArraysEXT(GLenum mode, GLint first, GLsizei count);
+    GLAPI void APIENTRY glEdgeFlagPointerEXT(GLsizei stride, GLsizei count, const GLboolean *pointer);
+    GLAPI void APIENTRY glGetPointervEXT(GLenum pname, GLvoid* *params);
+    GLAPI void APIENTRY glIndexPointerEXT(GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer);
+    GLAPI void APIENTRY glNormalPointerEXT(GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer);
+    GLAPI void APIENTRY glTexCoordPointerEXT(GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer);
+    GLAPI void APIENTRY glVertexPointerEXT(GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer);
 #endif /* GL_GLEXT_PROTOTYPES */
     typedef void (APIENTRYP PFNGLARRAYELEMENTEXTPROC)(GLint i);
     typedef void (APIENTRYP PFNGLCOLORPOINTEREXTPROC)(GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer);
@@ -3968,7 +8170,7 @@
 #ifndef GL_EXT_blend_minmax
 #define GL_EXT_blend_minmax 1
 #ifdef GL_GLEXT_PROTOTYPES
-    GLAPI void APIENTRY glBlendEquationEXT(GLenum);
+    GLAPI void APIENTRY glBlendEquationEXT(GLenum mode);
 #endif /* GL_GLEXT_PROTOTYPES */
     typedef void (APIENTRYP PFNGLBLENDEQUATIONEXTPROC)(GLenum mode);
 #endif
@@ -3996,10 +8198,10 @@
 #ifndef GL_SGIX_sprite
 #define GL_SGIX_sprite 1
 #ifdef GL_GLEXT_PROTOTYPES
-    GLAPI void APIENTRY glSpriteParameterfSGIX(GLenum, GLfloat);
-    GLAPI void APIENTRY glSpriteParameterfvSGIX(GLenum, const GLfloat *);
-    GLAPI void APIENTRY glSpriteParameteriSGIX(GLenum, GLint);
-    GLAPI void APIENTRY glSpriteParameterivSGIX(GLenum, const GLint *);
+    GLAPI void APIENTRY glSpriteParameterfSGIX(GLenum pname, GLfloat param);
+    GLAPI void APIENTRY glSpriteParameterfvSGIX(GLenum pname, const GLfloat *params);
+    GLAPI void APIENTRY glSpriteParameteriSGIX(GLenum pname, GLint param);
+    GLAPI void APIENTRY glSpriteParameterivSGIX(GLenum pname, const GLint *params);
 #endif /* GL_GLEXT_PROTOTYPES */
     typedef void (APIENTRYP PFNGLSPRITEPARAMETERFSGIXPROC)(GLenum pname, GLfloat param);
     typedef void (APIENTRYP PFNGLSPRITEPARAMETERFVSGIXPROC)(GLenum pname, const GLfloat *params);
@@ -4014,8 +8216,8 @@
 #ifndef GL_EXT_point_parameters
 #define GL_EXT_point_parameters 1
 #ifdef GL_GLEXT_PROTOTYPES
-    GLAPI void APIENTRY glPointParameterfEXT(GLenum, GLfloat);
-    GLAPI void APIENTRY glPointParameterfvEXT(GLenum, const GLfloat *);
+    GLAPI void APIENTRY glPointParameterfEXT(GLenum pname, GLfloat param);
+    GLAPI void APIENTRY glPointParameterfvEXT(GLenum pname, const GLfloat *params);
 #endif /* GL_GLEXT_PROTOTYPES */
     typedef void (APIENTRYP PFNGLPOINTPARAMETERFEXTPROC)(GLenum pname, GLfloat param);
     typedef void (APIENTRYP PFNGLPOINTPARAMETERFVEXTPROC)(GLenum pname, const GLfloat *params);
@@ -4024,8 +8226,8 @@
 #ifndef GL_SGIS_point_parameters
 #define GL_SGIS_point_parameters 1
 #ifdef GL_GLEXT_PROTOTYPES
-    GLAPI void APIENTRY glPointParameterfSGIS(GLenum, GLfloat);
-    GLAPI void APIENTRY glPointParameterfvSGIS(GLenum, const GLfloat *);
+    GLAPI void APIENTRY glPointParameterfSGIS(GLenum pname, GLfloat param);
+    GLAPI void APIENTRY glPointParameterfvSGIS(GLenum pname, const GLfloat *params);
 #endif /* GL_GLEXT_PROTOTYPES */
     typedef void (APIENTRYP PFNGLPOINTPARAMETERFSGISPROC)(GLenum pname, GLfloat param);
     typedef void (APIENTRYP PFNGLPOINTPARAMETERFVSGISPROC)(GLenum pname, const GLfloat *params);
@@ -4035,11 +8237,11 @@
 #define GL_SGIX_instruments 1
 #ifdef GL_GLEXT_PROTOTYPES
     GLAPI GLint APIENTRY glGetInstrumentsSGIX(void);
-    GLAPI void APIENTRY glInstrumentsBufferSGIX(GLsizei, GLint *);
-    GLAPI GLint APIENTRY glPollInstrumentsSGIX(GLint *);
-    GLAPI void APIENTRY glReadInstrumentsSGIX(GLint);
+    GLAPI void APIENTRY glInstrumentsBufferSGIX(GLsizei size, GLint *buffer);
+    GLAPI GLint APIENTRY glPollInstrumentsSGIX(GLint *marker_p);
+    GLAPI void APIENTRY glReadInstrumentsSGIX(GLint marker);
     GLAPI void APIENTRY glStartInstrumentsSGIX(void);
-    GLAPI void APIENTRY glStopInstrumentsSGIX(GLint);
+    GLAPI void APIENTRY glStopInstrumentsSGIX(GLint marker);
 #endif /* GL_GLEXT_PROTOTYPES */
     typedef GLint(APIENTRYP PFNGLGETINSTRUMENTSSGIXPROC)(void);
     typedef void (APIENTRYP PFNGLINSTRUMENTSBUFFERSGIXPROC)(GLsizei size, GLint *buffer);
@@ -4056,7 +8258,7 @@
 #ifndef GL_SGIX_framezoom
 #define GL_SGIX_framezoom 1
 #ifdef GL_GLEXT_PROTOTYPES
-    GLAPI void APIENTRY glFrameZoomSGIX(GLint);
+    GLAPI void APIENTRY glFrameZoomSGIX(GLint factor);
 #endif /* GL_GLEXT_PROTOTYPES */
     typedef void (APIENTRYP PFNGLFRAMEZOOMSGIXPROC)(GLint factor);
 #endif
@@ -4072,10 +8274,10 @@
 #ifndef GL_SGIX_polynomial_ffd
 #define GL_SGIX_polynomial_ffd 1
 #ifdef GL_GLEXT_PROTOTYPES
-    GLAPI void APIENTRY glDeformationMap3dSGIX(GLenum, GLdouble, GLdouble, GLint, GLint, GLdouble, GLdouble, GLint, GLint, GLdouble, GLdouble, GLint, GLint, const GLdouble *);
-    GLAPI void APIENTRY glDeformationMap3fSGIX(GLenum, GLfloat, GLfloat, GLint, GLint, GLfloat, GLfloat, GLint, GLint, GLfloat, GLfloat, GLint, GLint, const GLfloat *);
-    GLAPI void APIENTRY glDeformSGIX(GLbitfield);
-    GLAPI void APIENTRY glLoadIdentityDeformationMapSGIX(GLbitfield);
+    GLAPI void APIENTRY glDeformationMap3dSGIX(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, GLdouble w1, GLdouble w2, GLint wstride, GLint worder, const GLdouble *points);
+    GLAPI void APIENTRY glDeformationMap3fSGIX(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, GLfloat w1, GLfloat w2, GLint wstride, GLint worder, const GLfloat *points);
+    GLAPI void APIENTRY glDeformSGIX(GLbitfield mask);
+    GLAPI void APIENTRY glLoadIdentityDeformationMapSGIX(GLbitfield mask);
 #endif /* GL_GLEXT_PROTOTYPES */
     typedef void (APIENTRYP PFNGLDEFORMATIONMAP3DSGIXPROC)(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, GLdouble w1, GLdouble w2, GLint wstride, GLint worder, const GLdouble *points);
     typedef void (APIENTRYP PFNGLDEFORMATIONMAP3FSGIXPROC)(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, GLfloat w1, GLfloat w2, GLint wstride, GLint worder, const GLfloat *points);
@@ -4086,7 +8288,7 @@
 #ifndef GL_SGIX_reference_plane
 #define GL_SGIX_reference_plane 1
 #ifdef GL_GLEXT_PROTOTYPES
-    GLAPI void APIENTRY glReferencePlaneSGIX(const GLdouble *);
+    GLAPI void APIENTRY glReferencePlaneSGIX(const GLdouble *equation);
 #endif /* GL_GLEXT_PROTOTYPES */
     typedef void (APIENTRYP PFNGLREFERENCEPLANESGIXPROC)(const GLdouble *equation);
 #endif
@@ -4106,8 +8308,8 @@
 #ifndef GL_SGIS_fog_function
 #define GL_SGIS_fog_function 1
 #ifdef GL_GLEXT_PROTOTYPES
-    GLAPI void APIENTRY glFogFuncSGIS(GLsizei, const GLfloat *);
-    GLAPI void APIENTRY glGetFogFuncSGIS(GLfloat *);
+    GLAPI void APIENTRY glFogFuncSGIS(GLsizei n, const GLfloat *points);
+    GLAPI void APIENTRY glGetFogFuncSGIS(GLfloat *points);
 #endif /* GL_GLEXT_PROTOTYPES */
     typedef void (APIENTRYP PFNGLFOGFUNCSGISPROC)(GLsizei n, const GLfloat *points);
     typedef void (APIENTRYP PFNGLGETFOGFUNCSGISPROC)(GLfloat *points);
@@ -4120,12 +8322,12 @@
 #ifndef GL_HP_image_transform
 #define GL_HP_image_transform 1
 #ifdef GL_GLEXT_PROTOTYPES
-    GLAPI void APIENTRY glImageTransformParameteriHP(GLenum, GLenum, GLint);
-    GLAPI void APIENTRY glImageTransformParameterfHP(GLenum, GLenum, GLfloat);
-    GLAPI void APIENTRY glImageTransformParameterivHP(GLenum, GLenum, const GLint *);
-    GLAPI void APIENTRY glImageTransformParameterfvHP(GLenum, GLenum, const GLfloat *);
-    GLAPI void APIENTRY glGetImageTransformParameterivHP(GLenum, GLenum, GLint *);
-    GLAPI void APIENTRY glGetImageTransformParameterfvHP(GLenum, GLenum, GLfloat *);
+    GLAPI void APIENTRY glImageTransformParameteriHP(GLenum target, GLenum pname, GLint param);
+    GLAPI void APIENTRY glImageTransformParameterfHP(GLenum target, GLenum pname, GLfloat param);
+    GLAPI void APIENTRY glImageTransformParameterivHP(GLenum target, GLenum pname, const GLint *params);
+    GLAPI void APIENTRY glImageTransformParameterfvHP(GLenum target, GLenum pname, const GLfloat *params);
+    GLAPI void APIENTRY glGetImageTransformParameterivHP(GLenum target, GLenum pname, GLint *params);
+    GLAPI void APIENTRY glGetImageTransformParameterfvHP(GLenum target, GLenum pname, GLfloat *params);
 #endif /* GL_GLEXT_PROTOTYPES */
     typedef void (APIENTRYP PFNGLIMAGETRANSFORMPARAMETERIHPPROC)(GLenum target, GLenum pname, GLint param);
     typedef void (APIENTRYP PFNGLIMAGETRANSFORMPARAMETERFHPPROC)(GLenum target, GLenum pname, GLfloat param);
@@ -4146,8 +8348,8 @@
 #ifndef GL_EXT_color_subtable
 #define GL_EXT_color_subtable 1
 #ifdef GL_GLEXT_PROTOTYPES
-    GLAPI void APIENTRY glColorSubTableEXT(GLenum, GLsizei, GLsizei, GLenum, GLenum, const GLvoid *);
-    GLAPI void APIENTRY glCopyColorSubTableEXT(GLenum, GLsizei, GLint, GLint, GLsizei);
+    GLAPI void APIENTRY glColorSubTableEXT(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const GLvoid *data);
+    GLAPI void APIENTRY glCopyColorSubTableEXT(GLenum target, GLsizei start, GLint x, GLint y, GLsizei width);
 #endif /* GL_GLEXT_PROTOTYPES */
     typedef void (APIENTRYP PFNGLCOLORSUBTABLEEXTPROC)(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const GLvoid *data);
     typedef void (APIENTRYP PFNGLCOPYCOLORSUBTABLEEXTPROC)(GLenum target, GLsizei start, GLint x, GLint y, GLsizei width);
@@ -4160,7 +8362,7 @@
 #ifndef GL_PGI_misc_hints
 #define GL_PGI_misc_hints 1
 #ifdef GL_GLEXT_PROTOTYPES
-    GLAPI void APIENTRY glHintPGI(GLenum, GLint);
+    GLAPI void APIENTRY glHintPGI(GLenum target, GLint mode);
 #endif /* GL_GLEXT_PROTOTYPES */
     typedef void (APIENTRYP PFNGLHINTPGIPROC)(GLenum target, GLint mode);
 #endif
@@ -4168,10 +8370,10 @@
 #ifndef GL_EXT_paletted_texture
 #define GL_EXT_paletted_texture 1
 #ifdef GL_GLEXT_PROTOTYPES
-    GLAPI void APIENTRY glColorTableEXT(GLenum, GLenum, GLsizei, GLenum, GLenum, const GLvoid *);
-    GLAPI void APIENTRY glGetColorTableEXT(GLenum, GLenum, GLenum, GLvoid *);
-    GLAPI void APIENTRY glGetColorTableParameterivEXT(GLenum, GLenum, GLint *);
-    GLAPI void APIENTRY glGetColorTableParameterfvEXT(GLenum, GLenum, GLfloat *);
+    GLAPI void APIENTRY glColorTableEXT(GLenum target, GLenum internalFormat, GLsizei width, GLenum format, GLenum type, const GLvoid *table);
+    GLAPI void APIENTRY glGetColorTableEXT(GLenum target, GLenum format, GLenum type, GLvoid *data);
+    GLAPI void APIENTRY glGetColorTableParameterivEXT(GLenum target, GLenum pname, GLint *params);
+    GLAPI void APIENTRY glGetColorTableParameterfvEXT(GLenum target, GLenum pname, GLfloat *params);
 #endif /* GL_GLEXT_PROTOTYPES */
     typedef void (APIENTRYP PFNGLCOLORTABLEEXTPROC)(GLenum target, GLenum internalFormat, GLsizei width, GLenum format, GLenum type, const GLvoid *table);
     typedef void (APIENTRYP PFNGLGETCOLORTABLEEXTPROC)(GLenum target, GLenum format, GLenum type, GLvoid *data);
@@ -4186,12 +8388,12 @@
 #ifndef GL_SGIX_list_priority
 #define GL_SGIX_list_priority 1
 #ifdef GL_GLEXT_PROTOTYPES
-    GLAPI void APIENTRY glGetListParameterfvSGIX(GLuint, GLenum, GLfloat *);
-    GLAPI void APIENTRY glGetListParameterivSGIX(GLuint, GLenum, GLint *);
-    GLAPI void APIENTRY glListParameterfSGIX(GLuint, GLenum, GLfloat);
-    GLAPI void APIENTRY glListParameterfvSGIX(GLuint, GLenum, const GLfloat *);
-    GLAPI void APIENTRY glListParameteriSGIX(GLuint, GLenum, GLint);
-    GLAPI void APIENTRY glListParameterivSGIX(GLuint, GLenum, const GLint *);
+    GLAPI void APIENTRY glGetListParameterfvSGIX(GLuint list, GLenum pname, GLfloat *params);
+    GLAPI void APIENTRY glGetListParameterivSGIX(GLuint list, GLenum pname, GLint *params);
+    GLAPI void APIENTRY glListParameterfSGIX(GLuint list, GLenum pname, GLfloat param);
+    GLAPI void APIENTRY glListParameterfvSGIX(GLuint list, GLenum pname, const GLfloat *params);
+    GLAPI void APIENTRY glListParameteriSGIX(GLuint list, GLenum pname, GLint param);
+    GLAPI void APIENTRY glListParameterivSGIX(GLuint list, GLenum pname, const GLint *params);
 #endif /* GL_GLEXT_PROTOTYPES */
     typedef void (APIENTRYP PFNGLGETLISTPARAMETERFVSGIXPROC)(GLuint list, GLenum pname, GLfloat *params);
     typedef void (APIENTRYP PFNGLGETLISTPARAMETERIVSGIXPROC)(GLuint list, GLenum pname, GLint *params);
@@ -4224,7 +8426,7 @@
 #ifndef GL_EXT_index_material
 #define GL_EXT_index_material 1
 #ifdef GL_GLEXT_PROTOTYPES
-    GLAPI void APIENTRY glIndexMaterialEXT(GLenum, GLenum);
+    GLAPI void APIENTRY glIndexMaterialEXT(GLenum face, GLenum mode);
 #endif /* GL_GLEXT_PROTOTYPES */
     typedef void (APIENTRYP PFNGLINDEXMATERIALEXTPROC)(GLenum face, GLenum mode);
 #endif
@@ -4232,7 +8434,7 @@
 #ifndef GL_EXT_index_func
 #define GL_EXT_index_func 1
 #ifdef GL_GLEXT_PROTOTYPES
-    GLAPI void APIENTRY glIndexFuncEXT(GLenum, GLclampf);
+    GLAPI void APIENTRY glIndexFuncEXT(GLenum func, GLclampf ref);
 #endif /* GL_GLEXT_PROTOTYPES */
     typedef void (APIENTRYP PFNGLINDEXFUNCEXTPROC)(GLenum func, GLclampf ref);
 #endif
@@ -4244,7 +8446,7 @@
 #ifndef GL_EXT_compiled_vertex_array
 #define GL_EXT_compiled_vertex_array 1
 #ifdef GL_GLEXT_PROTOTYPES
-    GLAPI void APIENTRY glLockArraysEXT(GLint, GLsizei);
+    GLAPI void APIENTRY glLockArraysEXT(GLint first, GLsizei count);
     GLAPI void APIENTRY glUnlockArraysEXT(void);
 #endif /* GL_GLEXT_PROTOTYPES */
     typedef void (APIENTRYP PFNGLLOCKARRAYSEXTPROC)(GLint first, GLsizei count);
@@ -4254,8 +8456,8 @@
 #ifndef GL_EXT_cull_vertex
 #define GL_EXT_cull_vertex 1
 #ifdef GL_GLEXT_PROTOTYPES
-    GLAPI void APIENTRY glCullParameterdvEXT(GLenum, GLdouble *);
-    GLAPI void APIENTRY glCullParameterfvEXT(GLenum, GLfloat *);
+    GLAPI void APIENTRY glCullParameterdvEXT(GLenum pname, GLdouble *params);
+    GLAPI void APIENTRY glCullParameterfvEXT(GLenum pname, GLfloat *params);
 #endif /* GL_GLEXT_PROTOTYPES */
     typedef void (APIENTRYP PFNGLCULLPARAMETERDVEXTPROC)(GLenum pname, GLdouble *params);
     typedef void (APIENTRYP PFNGLCULLPARAMETERFVEXTPROC)(GLenum pname, GLfloat *params);
@@ -4268,24 +8470,24 @@
 #ifndef GL_SGIX_fragment_lighting
 #define GL_SGIX_fragment_lighting 1
 #ifdef GL_GLEXT_PROTOTYPES
-    GLAPI void APIENTRY glFragmentColorMaterialSGIX(GLenum, GLenum);
-    GLAPI void APIENTRY glFragmentLightfSGIX(GLenum, GLenum, GLfloat);
-    GLAPI void APIENTRY glFragmentLightfvSGIX(GLenum, GLenum, const GLfloat *);
-    GLAPI void APIENTRY glFragmentLightiSGIX(GLenum, GLenum, GLint);
-    GLAPI void APIENTRY glFragmentLightivSGIX(GLenum, GLenum, const GLint *);
-    GLAPI void APIENTRY glFragmentLightModelfSGIX(GLenum, GLfloat);
-    GLAPI void APIENTRY glFragmentLightModelfvSGIX(GLenum, const GLfloat *);
-    GLAPI void APIENTRY glFragmentLightModeliSGIX(GLenum, GLint);
-    GLAPI void APIENTRY glFragmentLightModelivSGIX(GLenum, const GLint *);
-    GLAPI void APIENTRY glFragmentMaterialfSGIX(GLenum, GLenum, GLfloat);
-    GLAPI void APIENTRY glFragmentMaterialfvSGIX(GLenum, GLenum, const GLfloat *);
-    GLAPI void APIENTRY glFragmentMaterialiSGIX(GLenum, GLenum, GLint);
-    GLAPI void APIENTRY glFragmentMaterialivSGIX(GLenum, GLenum, const GLint *);
-    GLAPI void APIENTRY glGetFragmentLightfvSGIX(GLenum, GLenum, GLfloat *);
-    GLAPI void APIENTRY glGetFragmentLightivSGIX(GLenum, GLenum, GLint *);
-    GLAPI void APIENTRY glGetFragmentMaterialfvSGIX(GLenum, GLenum, GLfloat *);
-    GLAPI void APIENTRY glGetFragmentMaterialivSGIX(GLenum, GLenum, GLint *);
-    GLAPI void APIENTRY glLightEnviSGIX(GLenum, GLint);
+    GLAPI void APIENTRY glFragmentColorMaterialSGIX(GLenum face, GLenum mode);
+    GLAPI void APIENTRY glFragmentLightfSGIX(GLenum light, GLenum pname, GLfloat param);
+    GLAPI void APIENTRY glFragmentLightfvSGIX(GLenum light, GLenum pname, const GLfloat *params);
+    GLAPI void APIENTRY glFragmentLightiSGIX(GLenum light, GLenum pname, GLint param);
+    GLAPI void APIENTRY glFragmentLightivSGIX(GLenum light, GLenum pname, const GLint *params);
+    GLAPI void APIENTRY glFragmentLightModelfSGIX(GLenum pname, GLfloat param);
+    GLAPI void APIENTRY glFragmentLightModelfvSGIX(GLenum pname, const GLfloat *params);
+    GLAPI void APIENTRY glFragmentLightModeliSGIX(GLenum pname, GLint param);
+    GLAPI void APIENTRY glFragmentLightModelivSGIX(GLenum pname, const GLint *params);
+    GLAPI void APIENTRY glFragmentMaterialfSGIX(GLenum face, GLenum pname, GLfloat param);
+    GLAPI void APIENTRY glFragmentMaterialfvSGIX(GLenum face, GLenum pname, const GLfloat *params);
+    GLAPI void APIENTRY glFragmentMaterialiSGIX(GLenum face, GLenum pname, GLint param);
+    GLAPI void APIENTRY glFragmentMaterialivSGIX(GLenum face, GLenum pname, const GLint *params);
+    GLAPI void APIENTRY glGetFragmentLightfvSGIX(GLenum light, GLenum pname, GLfloat *params);
+    GLAPI void APIENTRY glGetFragmentLightivSGIX(GLenum light, GLenum pname, GLint *params);
+    GLAPI void APIENTRY glGetFragmentMaterialfvSGIX(GLenum face, GLenum pname, GLfloat *params);
+    GLAPI void APIENTRY glGetFragmentMaterialivSGIX(GLenum face, GLenum pname, GLint *params);
+    GLAPI void APIENTRY glLightEnviSGIX(GLenum pname, GLint param);
 #endif /* GL_GLEXT_PROTOTYPES */
     typedef void (APIENTRYP PFNGLFRAGMENTCOLORMATERIALSGIXPROC)(GLenum face, GLenum mode);
     typedef void (APIENTRYP PFNGLFRAGMENTLIGHTFSGIXPROC)(GLenum light, GLenum pname, GLfloat param);
@@ -4318,7 +8520,7 @@
 #ifndef GL_EXT_draw_range_elements
 #define GL_EXT_draw_range_elements 1
 #ifdef GL_GLEXT_PROTOTYPES
-    GLAPI void APIENTRY glDrawRangeElementsEXT(GLenum, GLuint, GLuint, GLsizei, GLenum, const GLvoid *);
+    GLAPI void APIENTRY glDrawRangeElementsEXT(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices);
 #endif /* GL_GLEXT_PROTOTYPES */
     typedef void (APIENTRYP PFNGLDRAWRANGEELEMENTSEXTPROC)(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices);
 #endif
@@ -4334,9 +8536,9 @@
 #ifndef GL_EXT_light_texture
 #define GL_EXT_light_texture 1
 #ifdef GL_GLEXT_PROTOTYPES
-    GLAPI void APIENTRY glApplyTextureEXT(GLenum);
-    GLAPI void APIENTRY glTextureLightEXT(GLenum);
-    GLAPI void APIENTRY glTextureMaterialEXT(GLenum, GLenum);
+    GLAPI void APIENTRY glApplyTextureEXT(GLenum mode);
+    GLAPI void APIENTRY glTextureLightEXT(GLenum pname);
+    GLAPI void APIENTRY glTextureMaterialEXT(GLenum face, GLenum mode);
 #endif /* GL_GLEXT_PROTOTYPES */
     typedef void (APIENTRYP PFNGLAPPLYTEXTUREEXTPROC)(GLenum mode);
     typedef void (APIENTRYP PFNGLTEXTURELIGHTEXTPROC)(GLenum pname);
@@ -4354,12 +8556,12 @@
 #ifndef GL_SGIX_async
 #define GL_SGIX_async 1
 #ifdef GL_GLEXT_PROTOTYPES
-    GLAPI void APIENTRY glAsyncMarkerSGIX(GLuint);
-    GLAPI GLint APIENTRY glFinishAsyncSGIX(GLuint *);
-    GLAPI GLint APIENTRY glPollAsyncSGIX(GLuint *);
-    GLAPI GLuint APIENTRY glGenAsyncMarkersSGIX(GLsizei);
-    GLAPI void APIENTRY glDeleteAsyncMarkersSGIX(GLuint, GLsizei);
-    GLAPI GLboolean APIENTRY glIsAsyncMarkerSGIX(GLuint);
+    GLAPI void APIENTRY glAsyncMarkerSGIX(GLuint marker);
+    GLAPI GLint APIENTRY glFinishAsyncSGIX(GLuint *markerp);
+    GLAPI GLint APIENTRY glPollAsyncSGIX(GLuint *markerp);
+    GLAPI GLuint APIENTRY glGenAsyncMarkersSGIX(GLsizei range);
+    GLAPI void APIENTRY glDeleteAsyncMarkersSGIX(GLuint marker, GLsizei range);
+    GLAPI GLboolean APIENTRY glIsAsyncMarkerSGIX(GLuint marker);
 #endif /* GL_GLEXT_PROTOTYPES */
     typedef void (APIENTRYP PFNGLASYNCMARKERSGIXPROC)(GLuint marker);
     typedef GLint(APIENTRYP PFNGLFINISHASYNCSGIXPROC)(GLuint *markerp);
@@ -4380,10 +8582,10 @@
 #ifndef GL_INTEL_parallel_arrays
 #define GL_INTEL_parallel_arrays 1
 #ifdef GL_GLEXT_PROTOTYPES
-    GLAPI void APIENTRY glVertexPointervINTEL(GLint, GLenum, const GLvoid* *);
-    GLAPI void APIENTRY glNormalPointervINTEL(GLenum, const GLvoid* *);
-    GLAPI void APIENTRY glColorPointervINTEL(GLint, GLenum, const GLvoid* *);
-    GLAPI void APIENTRY glTexCoordPointervINTEL(GLint, GLenum, const GLvoid* *);
+    GLAPI void APIENTRY glVertexPointervINTEL(GLint size, GLenum type, const GLvoid* *pointer);
+    GLAPI void APIENTRY glNormalPointervINTEL(GLenum type, const GLvoid* *pointer);
+    GLAPI void APIENTRY glColorPointervINTEL(GLint size, GLenum type, const GLvoid* *pointer);
+    GLAPI void APIENTRY glTexCoordPointervINTEL(GLint size, GLenum type, const GLvoid* *pointer);
 #endif /* GL_GLEXT_PROTOTYPES */
     typedef void (APIENTRYP PFNGLVERTEXPOINTERVINTELPROC)(GLint size, GLenum type, const GLvoid* *pointer);
     typedef void (APIENTRYP PFNGLNORMALPOINTERVINTELPROC)(GLenum type, const GLvoid* *pointer);
@@ -4398,10 +8600,10 @@
 #ifndef GL_EXT_pixel_transform
 #define GL_EXT_pixel_transform 1
 #ifdef GL_GLEXT_PROTOTYPES
-    GLAPI void APIENTRY glPixelTransformParameteriEXT(GLenum, GLenum, GLint);
-    GLAPI void APIENTRY glPixelTransformParameterfEXT(GLenum, GLenum, GLfloat);
-    GLAPI void APIENTRY glPixelTransformParameterivEXT(GLenum, GLenum, const GLint *);
-    GLAPI void APIENTRY glPixelTransformParameterfvEXT(GLenum, GLenum, const GLfloat *);
+    GLAPI void APIENTRY glPixelTransformParameteriEXT(GLenum target, GLenum pname, GLint param);
+    GLAPI void APIENTRY glPixelTransformParameterfEXT(GLenum target, GLenum pname, GLfloat param);
+    GLAPI void APIENTRY glPixelTransformParameterivEXT(GLenum target, GLenum pname, const GLint *params);
+    GLAPI void APIENTRY glPixelTransformParameterfvEXT(GLenum target, GLenum pname, const GLfloat *params);
 #endif /* GL_GLEXT_PROTOTYPES */
     typedef void (APIENTRYP PFNGLPIXELTRANSFORMPARAMETERIEXTPROC)(GLenum target, GLenum pname, GLint param);
     typedef void (APIENTRYP PFNGLPIXELTRANSFORMPARAMETERFEXTPROC)(GLenum target, GLenum pname, GLfloat param);
@@ -4424,23 +8626,23 @@
 #ifndef GL_EXT_secondary_color
 #define GL_EXT_secondary_color 1
 #ifdef GL_GLEXT_PROTOTYPES
-    GLAPI void APIENTRY glSecondaryColor3bEXT(GLbyte, GLbyte, GLbyte);
-    GLAPI void APIENTRY glSecondaryColor3bvEXT(const GLbyte *);
-    GLAPI void APIENTRY glSecondaryColor3dEXT(GLdouble, GLdouble, GLdouble);
-    GLAPI void APIENTRY glSecondaryColor3dvEXT(const GLdouble *);
-    GLAPI void APIENTRY glSecondaryColor3fEXT(GLfloat, GLfloat, GLfloat);
-    GLAPI void APIENTRY glSecondaryColor3fvEXT(const GLfloat *);
-    GLAPI void APIENTRY glSecondaryColor3iEXT(GLint, GLint, GLint);
-    GLAPI void APIENTRY glSecondaryColor3ivEXT(const GLint *);
-    GLAPI void APIENTRY glSecondaryColor3sEXT(GLshort, GLshort, GLshort);
-    GLAPI void APIENTRY glSecondaryColor3svEXT(const GLshort *);
-    GLAPI void APIENTRY glSecondaryColor3ubEXT(GLubyte, GLubyte, GLubyte);
-    GLAPI void APIENTRY glSecondaryColor3ubvEXT(const GLubyte *);
-    GLAPI void APIENTRY glSecondaryColor3uiEXT(GLuint, GLuint, GLuint);
-    GLAPI void APIENTRY glSecondaryColor3uivEXT(const GLuint *);
-    GLAPI void APIENTRY glSecondaryColor3usEXT(GLushort, GLushort, GLushort);
-    GLAPI void APIENTRY glSecondaryColor3usvEXT(const GLushort *);
-    GLAPI void APIENTRY glSecondaryColorPointerEXT(GLint, GLenum, GLsizei, const GLvoid *);
+    GLAPI void APIENTRY glSecondaryColor3bEXT(GLbyte red, GLbyte green, GLbyte blue);
+    GLAPI void APIENTRY glSecondaryColor3bvEXT(const GLbyte *v);
+    GLAPI void APIENTRY glSecondaryColor3dEXT(GLdouble red, GLdouble green, GLdouble blue);
+    GLAPI void APIENTRY glSecondaryColor3dvEXT(const GLdouble *v);
+    GLAPI void APIENTRY glSecondaryColor3fEXT(GLfloat red, GLfloat green, GLfloat blue);
+    GLAPI void APIENTRY glSecondaryColor3fvEXT(const GLfloat *v);
+    GLAPI void APIENTRY glSecondaryColor3iEXT(GLint red, GLint green, GLint blue);
+    GLAPI void APIENTRY glSecondaryColor3ivEXT(const GLint *v);
+    GLAPI void APIENTRY glSecondaryColor3sEXT(GLshort red, GLshort green, GLshort blue);
+    GLAPI void APIENTRY glSecondaryColor3svEXT(const GLshort *v);
+    GLAPI void APIENTRY glSecondaryColor3ubEXT(GLubyte red, GLubyte green, GLubyte blue);
+    GLAPI void APIENTRY glSecondaryColor3ubvEXT(const GLubyte *v);
+    GLAPI void APIENTRY glSecondaryColor3uiEXT(GLuint red, GLuint green, GLuint blue);
+    GLAPI void APIENTRY glSecondaryColor3uivEXT(const GLuint *v);
+    GLAPI void APIENTRY glSecondaryColor3usEXT(GLushort red, GLushort green, GLushort blue);
+    GLAPI void APIENTRY glSecondaryColor3usvEXT(const GLushort *v);
+    GLAPI void APIENTRY glSecondaryColorPointerEXT(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
 #endif /* GL_GLEXT_PROTOTYPES */
     typedef void (APIENTRYP PFNGLSECONDARYCOLOR3BEXTPROC)(GLbyte red, GLbyte green, GLbyte blue);
     typedef void (APIENTRYP PFNGLSECONDARYCOLOR3BVEXTPROC)(const GLbyte *v);
@@ -4464,7 +8666,7 @@
 #ifndef GL_EXT_texture_perturb_normal
 #define GL_EXT_texture_perturb_normal 1
 #ifdef GL_GLEXT_PROTOTYPES
-    GLAPI void APIENTRY glTextureNormalEXT(GLenum);
+    GLAPI void APIENTRY glTextureNormalEXT(GLenum mode);
 #endif /* GL_GLEXT_PROTOTYPES */
     typedef void (APIENTRYP PFNGLTEXTURENORMALEXTPROC)(GLenum mode);
 #endif
@@ -4472,21 +8674,21 @@
 #ifndef GL_EXT_multi_draw_arrays
 #define GL_EXT_multi_draw_arrays 1
 #ifdef GL_GLEXT_PROTOTYPES
-    GLAPI void APIENTRY glMultiDrawArraysEXT(GLenum, GLint *, GLsizei *, GLsizei);
-    GLAPI void APIENTRY glMultiDrawElementsEXT(GLenum, const GLsizei *, GLenum, const GLvoid* *, GLsizei);
+    GLAPI void APIENTRY glMultiDrawArraysEXT(GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount);
+    GLAPI void APIENTRY glMultiDrawElementsEXT(GLenum mode, const GLsizei *count, GLenum type, const GLvoid* *indices, GLsizei primcount);
 #endif /* GL_GLEXT_PROTOTYPES */
-    typedef void (APIENTRYP PFNGLMULTIDRAWARRAYSEXTPROC)(GLenum mode, GLint *first, GLsizei *count, GLsizei primcount);
+    typedef void (APIENTRYP PFNGLMULTIDRAWARRAYSEXTPROC)(GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount);
     typedef void (APIENTRYP PFNGLMULTIDRAWELEMENTSEXTPROC)(GLenum mode, const GLsizei *count, GLenum type, const GLvoid* *indices, GLsizei primcount);
 #endif
 
 #ifndef GL_EXT_fog_coord
 #define GL_EXT_fog_coord 1
 #ifdef GL_GLEXT_PROTOTYPES
-    GLAPI void APIENTRY glFogCoordfEXT(GLfloat);
-    GLAPI void APIENTRY glFogCoordfvEXT(const GLfloat *);
-    GLAPI void APIENTRY glFogCoorddEXT(GLdouble);
-    GLAPI void APIENTRY glFogCoorddvEXT(const GLdouble *);
-    GLAPI void APIENTRY glFogCoordPointerEXT(GLenum, GLsizei, const GLvoid *);
+    GLAPI void APIENTRY glFogCoordfEXT(GLfloat coord);
+    GLAPI void APIENTRY glFogCoordfvEXT(const GLfloat *coord);
+    GLAPI void APIENTRY glFogCoorddEXT(GLdouble coord);
+    GLAPI void APIENTRY glFogCoorddvEXT(const GLdouble *coord);
+    GLAPI void APIENTRY glFogCoordPointerEXT(GLenum type, GLsizei stride, const GLvoid *pointer);
 #endif /* GL_GLEXT_PROTOTYPES */
     typedef void (APIENTRYP PFNGLFOGCOORDFEXTPROC)(GLfloat coord);
     typedef void (APIENTRYP PFNGLFOGCOORDFVEXTPROC)(const GLfloat *coord);
@@ -4502,28 +8704,28 @@
 #ifndef GL_EXT_coordinate_frame
 #define GL_EXT_coordinate_frame 1
 #ifdef GL_GLEXT_PROTOTYPES
-    GLAPI void APIENTRY glTangent3bEXT(GLbyte, GLbyte, GLbyte);
-    GLAPI void APIENTRY glTangent3bvEXT(const GLbyte *);
-    GLAPI void APIENTRY glTangent3dEXT(GLdouble, GLdouble, GLdouble);
-    GLAPI void APIENTRY glTangent3dvEXT(const GLdouble *);
-    GLAPI void APIENTRY glTangent3fEXT(GLfloat, GLfloat, GLfloat);
-    GLAPI void APIENTRY glTangent3fvEXT(const GLfloat *);
-    GLAPI void APIENTRY glTangent3iEXT(GLint, GLint, GLint);
-    GLAPI void APIENTRY glTangent3ivEXT(const GLint *);
-    GLAPI void APIENTRY glTangent3sEXT(GLshort, GLshort, GLshort);
-    GLAPI void APIENTRY glTangent3svEXT(const GLshort *);
-    GLAPI void APIENTRY glBinormal3bEXT(GLbyte, GLbyte, GLbyte);
-    GLAPI void APIENTRY glBinormal3bvEXT(const GLbyte *);
-    GLAPI void APIENTRY glBinormal3dEXT(GLdouble, GLdouble, GLdouble);
-    GLAPI void APIENTRY glBinormal3dvEXT(const GLdouble *);
-    GLAPI void APIENTRY glBinormal3fEXT(GLfloat, GLfloat, GLfloat);
-    GLAPI void APIENTRY glBinormal3fvEXT(const GLfloat *);
-    GLAPI void APIENTRY glBinormal3iEXT(GLint, GLint, GLint);
-    GLAPI void APIENTRY glBinormal3ivEXT(const GLint *);
-    GLAPI void APIENTRY glBinormal3sEXT(GLshort, GLshort, GLshort);
-    GLAPI void APIENTRY glBinormal3svEXT(const GLshort *);
-    GLAPI void APIENTRY glTangentPointerEXT(GLenum, GLsizei, const GLvoid *);
-    GLAPI void APIENTRY glBinormalPointerEXT(GLenum, GLsizei, const GLvoid *);
+    GLAPI void APIENTRY glTangent3bEXT(GLbyte tx, GLbyte ty, GLbyte tz);
+    GLAPI void APIENTRY glTangent3bvEXT(const GLbyte *v);
+    GLAPI void APIENTRY glTangent3dEXT(GLdouble tx, GLdouble ty, GLdouble tz);
+    GLAPI void APIENTRY glTangent3dvEXT(const GLdouble *v);
+    GLAPI void APIENTRY glTangent3fEXT(GLfloat tx, GLfloat ty, GLfloat tz);
+    GLAPI void APIENTRY glTangent3fvEXT(const GLfloat *v);
+    GLAPI void APIENTRY glTangent3iEXT(GLint tx, GLint ty, GLint tz);
+    GLAPI void APIENTRY glTangent3ivEXT(const GLint *v);
+    GLAPI void APIENTRY glTangent3sEXT(GLshort tx, GLshort ty, GLshort tz);
+    GLAPI void APIENTRY glTangent3svEXT(const GLshort *v);
+    GLAPI void APIENTRY glBinormal3bEXT(GLbyte bx, GLbyte by, GLbyte bz);
+    GLAPI void APIENTRY glBinormal3bvEXT(const GLbyte *v);
+    GLAPI void APIENTRY glBinormal3dEXT(GLdouble bx, GLdouble by, GLdouble bz);
+    GLAPI void APIENTRY glBinormal3dvEXT(const GLdouble *v);
+    GLAPI void APIENTRY glBinormal3fEXT(GLfloat bx, GLfloat by, GLfloat bz);
+    GLAPI void APIENTRY glBinormal3fvEXT(const GLfloat *v);
+    GLAPI void APIENTRY glBinormal3iEXT(GLint bx, GLint by, GLint bz);
+    GLAPI void APIENTRY glBinormal3ivEXT(const GLint *v);
+    GLAPI void APIENTRY glBinormal3sEXT(GLshort bx, GLshort by, GLshort bz);
+    GLAPI void APIENTRY glBinormal3svEXT(const GLshort *v);
+    GLAPI void APIENTRY glTangentPointerEXT(GLenum type, GLsizei stride, const GLvoid *pointer);
+    GLAPI void APIENTRY glBinormalPointerEXT(GLenum type, GLsizei stride, const GLvoid *pointer);
 #endif /* GL_GLEXT_PROTOTYPES */
     typedef void (APIENTRYP PFNGLTANGENT3BEXTPROC)(GLbyte tx, GLbyte ty, GLbyte tz);
     typedef void (APIENTRYP PFNGLTANGENT3BVEXTPROC)(const GLbyte *v);
@@ -4576,14 +8778,14 @@
 #ifndef GL_SUN_global_alpha
 #define GL_SUN_global_alpha 1
 #ifdef GL_GLEXT_PROTOTYPES
-    GLAPI void APIENTRY glGlobalAlphaFactorbSUN(GLbyte);
-    GLAPI void APIENTRY glGlobalAlphaFactorsSUN(GLshort);
-    GLAPI void APIENTRY glGlobalAlphaFactoriSUN(GLint);
-    GLAPI void APIENTRY glGlobalAlphaFactorfSUN(GLfloat);
-    GLAPI void APIENTRY glGlobalAlphaFactordSUN(GLdouble);
-    GLAPI void APIENTRY glGlobalAlphaFactorubSUN(GLubyte);
-    GLAPI void APIENTRY glGlobalAlphaFactorusSUN(GLushort);
-    GLAPI void APIENTRY glGlobalAlphaFactoruiSUN(GLuint);
+    GLAPI void APIENTRY glGlobalAlphaFactorbSUN(GLbyte factor);
+    GLAPI void APIENTRY glGlobalAlphaFactorsSUN(GLshort factor);
+    GLAPI void APIENTRY glGlobalAlphaFactoriSUN(GLint factor);
+    GLAPI void APIENTRY glGlobalAlphaFactorfSUN(GLfloat factor);
+    GLAPI void APIENTRY glGlobalAlphaFactordSUN(GLdouble factor);
+    GLAPI void APIENTRY glGlobalAlphaFactorubSUN(GLubyte factor);
+    GLAPI void APIENTRY glGlobalAlphaFactorusSUN(GLushort factor);
+    GLAPI void APIENTRY glGlobalAlphaFactoruiSUN(GLuint factor);
 #endif /* GL_GLEXT_PROTOTYPES */
     typedef void (APIENTRYP PFNGLGLOBALALPHAFACTORBSUNPROC)(GLbyte factor);
     typedef void (APIENTRYP PFNGLGLOBALALPHAFACTORSSUNPROC)(GLshort factor);
@@ -4598,13 +8800,13 @@
 #ifndef GL_SUN_triangle_list
 #define GL_SUN_triangle_list 1
 #ifdef GL_GLEXT_PROTOTYPES
-    GLAPI void APIENTRY glReplacementCodeuiSUN(GLuint);
-    GLAPI void APIENTRY glReplacementCodeusSUN(GLushort);
-    GLAPI void APIENTRY glReplacementCodeubSUN(GLubyte);
-    GLAPI void APIENTRY glReplacementCodeuivSUN(const GLuint *);
-    GLAPI void APIENTRY glReplacementCodeusvSUN(const GLushort *);
-    GLAPI void APIENTRY glReplacementCodeubvSUN(const GLubyte *);
-    GLAPI void APIENTRY glReplacementCodePointerSUN(GLenum, GLsizei, const GLvoid* *);
+    GLAPI void APIENTRY glReplacementCodeuiSUN(GLuint code);
+    GLAPI void APIENTRY glReplacementCodeusSUN(GLushort code);
+    GLAPI void APIENTRY glReplacementCodeubSUN(GLubyte code);
+    GLAPI void APIENTRY glReplacementCodeuivSUN(const GLuint *code);
+    GLAPI void APIENTRY glReplacementCodeusvSUN(const GLushort *code);
+    GLAPI void APIENTRY glReplacementCodeubvSUN(const GLubyte *code);
+    GLAPI void APIENTRY glReplacementCodePointerSUN(GLenum type, GLsizei stride, const GLvoid* *pointer);
 #endif /* GL_GLEXT_PROTOTYPES */
     typedef void (APIENTRYP PFNGLREPLACEMENTCODEUISUNPROC)(GLuint code);
     typedef void (APIENTRYP PFNGLREPLACEMENTCODEUSSUNPROC)(GLushort code);
@@ -4618,46 +8820,46 @@
 #ifndef GL_SUN_vertex
 #define GL_SUN_vertex 1
 #ifdef GL_GLEXT_PROTOTYPES
-    GLAPI void APIENTRY glColor4ubVertex2fSUN(GLubyte, GLubyte, GLubyte, GLubyte, GLfloat, GLfloat);
-    GLAPI void APIENTRY glColor4ubVertex2fvSUN(const GLubyte *, const GLfloat *);
-    GLAPI void APIENTRY glColor4ubVertex3fSUN(GLubyte, GLubyte, GLubyte, GLubyte, GLfloat, GLfloat, GLfloat);
-    GLAPI void APIENTRY glColor4ubVertex3fvSUN(const GLubyte *, const GLfloat *);
-    GLAPI void APIENTRY glColor3fVertex3fSUN(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
-    GLAPI void APIENTRY glColor3fVertex3fvSUN(const GLfloat *, const GLfloat *);
-    GLAPI void APIENTRY glNormal3fVertex3fSUN(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
-    GLAPI void APIENTRY glNormal3fVertex3fvSUN(const GLfloat *, const GLfloat *);
-    GLAPI void APIENTRY glColor4fNormal3fVertex3fSUN(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
-    GLAPI void APIENTRY glColor4fNormal3fVertex3fvSUN(const GLfloat *, const GLfloat *, const GLfloat *);
-    GLAPI void APIENTRY glTexCoord2fVertex3fSUN(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
-    GLAPI void APIENTRY glTexCoord2fVertex3fvSUN(const GLfloat *, const GLfloat *);
-    GLAPI void APIENTRY glTexCoord4fVertex4fSUN(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
-    GLAPI void APIENTRY glTexCoord4fVertex4fvSUN(const GLfloat *, const GLfloat *);
-    GLAPI void APIENTRY glTexCoord2fColor4ubVertex3fSUN(GLfloat, GLfloat, GLubyte, GLubyte, GLubyte, GLubyte, GLfloat, GLfloat, GLfloat);
-    GLAPI void APIENTRY glTexCoord2fColor4ubVertex3fvSUN(const GLfloat *, const GLubyte *, const GLfloat *);
-    GLAPI void APIENTRY glTexCoord2fColor3fVertex3fSUN(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
-    GLAPI void APIENTRY glTexCoord2fColor3fVertex3fvSUN(const GLfloat *, const GLfloat *, const GLfloat *);
-    GLAPI void APIENTRY glTexCoord2fNormal3fVertex3fSUN(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
-    GLAPI void APIENTRY glTexCoord2fNormal3fVertex3fvSUN(const GLfloat *, const GLfloat *, const GLfloat *);
-    GLAPI void APIENTRY glTexCoord2fColor4fNormal3fVertex3fSUN(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
-    GLAPI void APIENTRY glTexCoord2fColor4fNormal3fVertex3fvSUN(const GLfloat *, const GLfloat *, const GLfloat *, const GLfloat *);
-    GLAPI void APIENTRY glTexCoord4fColor4fNormal3fVertex4fSUN(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
-    GLAPI void APIENTRY glTexCoord4fColor4fNormal3fVertex4fvSUN(const GLfloat *, const GLfloat *, const GLfloat *, const GLfloat *);
-    GLAPI void APIENTRY glReplacementCodeuiVertex3fSUN(GLuint, GLfloat, GLfloat, GLfloat);
-    GLAPI void APIENTRY glReplacementCodeuiVertex3fvSUN(const GLuint *, const GLfloat *);
-    GLAPI void APIENTRY glReplacementCodeuiColor4ubVertex3fSUN(GLuint, GLubyte, GLubyte, GLubyte, GLubyte, GLfloat, GLfloat, GLfloat);
-    GLAPI void APIENTRY glReplacementCodeuiColor4ubVertex3fvSUN(const GLuint *, const GLubyte *, const GLfloat *);
-    GLAPI void APIENTRY glReplacementCodeuiColor3fVertex3fSUN(GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
-    GLAPI void APIENTRY glReplacementCodeuiColor3fVertex3fvSUN(const GLuint *, const GLfloat *, const GLfloat *);
-    GLAPI void APIENTRY glReplacementCodeuiNormal3fVertex3fSUN(GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
-    GLAPI void APIENTRY glReplacementCodeuiNormal3fVertex3fvSUN(const GLuint *, const GLfloat *, const GLfloat *);
-    GLAPI void APIENTRY glReplacementCodeuiColor4fNormal3fVertex3fSUN(GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
-    GLAPI void APIENTRY glReplacementCodeuiColor4fNormal3fVertex3fvSUN(const GLuint *, const GLfloat *, const GLfloat *, const GLfloat *);
-    GLAPI void APIENTRY glReplacementCodeuiTexCoord2fVertex3fSUN(GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
-    GLAPI void APIENTRY glReplacementCodeuiTexCoord2fVertex3fvSUN(const GLuint *, const GLfloat *, const GLfloat *);
-    GLAPI void APIENTRY glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN(GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
-    GLAPI void APIENTRY glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(const GLuint *, const GLfloat *, const GLfloat *, const GLfloat *);
-    GLAPI void APIENTRY glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN(GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
-    GLAPI void APIENTRY glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(const GLuint *, const GLfloat *, const GLfloat *, const GLfloat *, const GLfloat *);
+    GLAPI void APIENTRY glColor4ubVertex2fSUN(GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y);
+    GLAPI void APIENTRY glColor4ubVertex2fvSUN(const GLubyte *c, const GLfloat *v);
+    GLAPI void APIENTRY glColor4ubVertex3fSUN(GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z);
+    GLAPI void APIENTRY glColor4ubVertex3fvSUN(const GLubyte *c, const GLfloat *v);
+    GLAPI void APIENTRY glColor3fVertex3fSUN(GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z);
+    GLAPI void APIENTRY glColor3fVertex3fvSUN(const GLfloat *c, const GLfloat *v);
+    GLAPI void APIENTRY glNormal3fVertex3fSUN(GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
+    GLAPI void APIENTRY glNormal3fVertex3fvSUN(const GLfloat *n, const GLfloat *v);
+    GLAPI void APIENTRY glColor4fNormal3fVertex3fSUN(GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
+    GLAPI void APIENTRY glColor4fNormal3fVertex3fvSUN(const GLfloat *c, const GLfloat *n, const GLfloat *v);
+    GLAPI void APIENTRY glTexCoord2fVertex3fSUN(GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z);
+    GLAPI void APIENTRY glTexCoord2fVertex3fvSUN(const GLfloat *tc, const GLfloat *v);
+    GLAPI void APIENTRY glTexCoord4fVertex4fSUN(GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
+    GLAPI void APIENTRY glTexCoord4fVertex4fvSUN(const GLfloat *tc, const GLfloat *v);
+    GLAPI void APIENTRY glTexCoord2fColor4ubVertex3fSUN(GLfloat s, GLfloat t, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z);
+    GLAPI void APIENTRY glTexCoord2fColor4ubVertex3fvSUN(const GLfloat *tc, const GLubyte *c, const GLfloat *v);
+    GLAPI void APIENTRY glTexCoord2fColor3fVertex3fSUN(GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z);
+    GLAPI void APIENTRY glTexCoord2fColor3fVertex3fvSUN(const GLfloat *tc, const GLfloat *c, const GLfloat *v);
+    GLAPI void APIENTRY glTexCoord2fNormal3fVertex3fSUN(GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
+    GLAPI void APIENTRY glTexCoord2fNormal3fVertex3fvSUN(const GLfloat *tc, const GLfloat *n, const GLfloat *v);
+    GLAPI void APIENTRY glTexCoord2fColor4fNormal3fVertex3fSUN(GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
+    GLAPI void APIENTRY glTexCoord2fColor4fNormal3fVertex3fvSUN(const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v);
+    GLAPI void APIENTRY glTexCoord4fColor4fNormal3fVertex4fSUN(GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
+    GLAPI void APIENTRY glTexCoord4fColor4fNormal3fVertex4fvSUN(const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v);
+    GLAPI void APIENTRY glReplacementCodeuiVertex3fSUN(GLuint rc, GLfloat x, GLfloat y, GLfloat z);
+    GLAPI void APIENTRY glReplacementCodeuiVertex3fvSUN(const GLuint *rc, const GLfloat *v);
+    GLAPI void APIENTRY glReplacementCodeuiColor4ubVertex3fSUN(GLuint rc, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z);
+    GLAPI void APIENTRY glReplacementCodeuiColor4ubVertex3fvSUN(const GLuint *rc, const GLubyte *c, const GLfloat *v);
+    GLAPI void APIENTRY glReplacementCodeuiColor3fVertex3fSUN(GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z);
+    GLAPI void APIENTRY glReplacementCodeuiColor3fVertex3fvSUN(const GLuint *rc, const GLfloat *c, const GLfloat *v);
+    GLAPI void APIENTRY glReplacementCodeuiNormal3fVertex3fSUN(GLuint rc, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
+    GLAPI void APIENTRY glReplacementCodeuiNormal3fVertex3fvSUN(const GLuint *rc, const GLfloat *n, const GLfloat *v);
+    GLAPI void APIENTRY glReplacementCodeuiColor4fNormal3fVertex3fSUN(GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
+    GLAPI void APIENTRY glReplacementCodeuiColor4fNormal3fVertex3fvSUN(const GLuint *rc, const GLfloat *c, const GLfloat *n, const GLfloat *v);
+    GLAPI void APIENTRY glReplacementCodeuiTexCoord2fVertex3fSUN(GLuint rc, GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z);
+    GLAPI void APIENTRY glReplacementCodeuiTexCoord2fVertex3fvSUN(const GLuint *rc, const GLfloat *tc, const GLfloat *v);
+    GLAPI void APIENTRY glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN(GLuint rc, GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
+    GLAPI void APIENTRY glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(const GLuint *rc, const GLfloat *tc, const GLfloat *n, const GLfloat *v);
+    GLAPI void APIENTRY glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN(GLuint rc, GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
+    GLAPI void APIENTRY glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(const GLuint *rc, const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v);
 #endif /* GL_GLEXT_PROTOTYPES */
     typedef void (APIENTRYP PFNGLCOLOR4UBVERTEX2FSUNPROC)(GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y);
     typedef void (APIENTRYP PFNGLCOLOR4UBVERTEX2FVSUNPROC)(const GLubyte *c, const GLfloat *v);
@@ -4704,7 +8906,7 @@
 #ifndef GL_EXT_blend_func_separate
 #define GL_EXT_blend_func_separate 1
 #ifdef GL_GLEXT_PROTOTYPES
-    GLAPI void APIENTRY glBlendFuncSeparateEXT(GLenum, GLenum, GLenum, GLenum);
+    GLAPI void APIENTRY glBlendFuncSeparateEXT(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
 #endif /* GL_GLEXT_PROTOTYPES */
     typedef void (APIENTRYP PFNGLBLENDFUNCSEPARATEEXTPROC)(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
 #endif
@@ -4712,7 +8914,7 @@
 #ifndef GL_INGR_blend_func_separate
 #define GL_INGR_blend_func_separate 1
 #ifdef GL_GLEXT_PROTOTYPES
-    GLAPI void APIENTRY glBlendFuncSeparateINGR(GLenum, GLenum, GLenum, GLenum);
+    GLAPI void APIENTRY glBlendFuncSeparateINGR(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
 #endif /* GL_GLEXT_PROTOTYPES */
     typedef void (APIENTRYP PFNGLBLENDFUNCSEPARATEINGRPROC)(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
 #endif
@@ -4756,9 +8958,9 @@
 #ifndef GL_EXT_vertex_weighting
 #define GL_EXT_vertex_weighting 1
 #ifdef GL_GLEXT_PROTOTYPES
-    GLAPI void APIENTRY glVertexWeightfEXT(GLfloat);
-    GLAPI void APIENTRY glVertexWeightfvEXT(const GLfloat *);
-    GLAPI void APIENTRY glVertexWeightPointerEXT(GLsizei, GLenum, GLsizei, const GLvoid *);
+    GLAPI void APIENTRY glVertexWeightfEXT(GLfloat weight);
+    GLAPI void APIENTRY glVertexWeightfvEXT(const GLfloat *weight);
+    GLAPI void APIENTRY glVertexWeightPointerEXT(GLsizei size, GLenum type, GLsizei stride, const GLvoid *pointer);
 #endif /* GL_GLEXT_PROTOTYPES */
     typedef void (APIENTRYP PFNGLVERTEXWEIGHTFEXTPROC)(GLfloat weight);
     typedef void (APIENTRYP PFNGLVERTEXWEIGHTFVEXTPROC)(const GLfloat *weight);
@@ -4773,7 +8975,7 @@
 #define GL_NV_vertex_array_range 1
 #ifdef GL_GLEXT_PROTOTYPES
     GLAPI void APIENTRY glFlushVertexArrayRangeNV(void);
-    GLAPI void APIENTRY glVertexArrayRangeNV(GLsizei, const GLvoid *);
+    GLAPI void APIENTRY glVertexArrayRangeNV(GLsizei length, const GLvoid *pointer);
 #endif /* GL_GLEXT_PROTOTYPES */
     typedef void (APIENTRYP PFNGLFLUSHVERTEXARRAYRANGENVPROC)(void);
     typedef void (APIENTRYP PFNGLVERTEXARRAYRANGENVPROC)(GLsizei length, const GLvoid *pointer);
@@ -4782,19 +8984,19 @@
 #ifndef GL_NV_register_combiners
 #define GL_NV_register_combiners 1
 #ifdef GL_GLEXT_PROTOTYPES
-    GLAPI void APIENTRY glCombinerParameterfvNV(GLenum, const GLfloat *);
-    GLAPI void APIENTRY glCombinerParameterfNV(GLenum, GLfloat);
-    GLAPI void APIENTRY glCombinerParameterivNV(GLenum, const GLint *);
-    GLAPI void APIENTRY glCombinerParameteriNV(GLenum, GLint);
-    GLAPI void APIENTRY glCombinerInputNV(GLenum, GLenum, GLenum, GLenum, GLenum, GLenum);
-    GLAPI void APIENTRY glCombinerOutputNV(GLenum, GLenum, GLenum, GLenum, GLenum, GLenum, GLenum, GLboolean, GLboolean, GLboolean);
-    GLAPI void APIENTRY glFinalCombinerInputNV(GLenum, GLenum, GLenum, GLenum);
-    GLAPI void APIENTRY glGetCombinerInputParameterfvNV(GLenum, GLenum, GLenum, GLenum, GLfloat *);
-    GLAPI void APIENTRY glGetCombinerInputParameterivNV(GLenum, GLenum, GLenum, GLenum, GLint *);
-    GLAPI void APIENTRY glGetCombinerOutputParameterfvNV(GLenum, GLenum, GLenum, GLfloat *);
-    GLAPI void APIENTRY glGetCombinerOutputParameterivNV(GLenum, GLenum, GLenum, GLint *);
-    GLAPI void APIENTRY glGetFinalCombinerInputParameterfvNV(GLenum, GLenum, GLfloat *);
-    GLAPI void APIENTRY glGetFinalCombinerInputParameterivNV(GLenum, GLenum, GLint *);
+    GLAPI void APIENTRY glCombinerParameterfvNV(GLenum pname, const GLfloat *params);
+    GLAPI void APIENTRY glCombinerParameterfNV(GLenum pname, GLfloat param);
+    GLAPI void APIENTRY glCombinerParameterivNV(GLenum pname, const GLint *params);
+    GLAPI void APIENTRY glCombinerParameteriNV(GLenum pname, GLint param);
+    GLAPI void APIENTRY glCombinerInputNV(GLenum stage, GLenum portion, GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage);
+    GLAPI void APIENTRY glCombinerOutputNV(GLenum stage, GLenum portion, GLenum abOutput, GLenum cdOutput, GLenum sumOutput, GLenum scale, GLenum bias, GLboolean abDotProduct, GLboolean cdDotProduct, GLboolean muxSum);
+    GLAPI void APIENTRY glFinalCombinerInputNV(GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage);
+    GLAPI void APIENTRY glGetCombinerInputParameterfvNV(GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLfloat *params);
+    GLAPI void APIENTRY glGetCombinerInputParameterivNV(GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLint *params);
+    GLAPI void APIENTRY glGetCombinerOutputParameterfvNV(GLenum stage, GLenum portion, GLenum pname, GLfloat *params);
+    GLAPI void APIENTRY glGetCombinerOutputParameterivNV(GLenum stage, GLenum portion, GLenum pname, GLint *params);
+    GLAPI void APIENTRY glGetFinalCombinerInputParameterfvNV(GLenum variable, GLenum pname, GLfloat *params);
+    GLAPI void APIENTRY glGetFinalCombinerInputParameterivNV(GLenum variable, GLenum pname, GLint *params);
 #endif /* GL_GLEXT_PROTOTYPES */
     typedef void (APIENTRYP PFNGLCOMBINERPARAMETERFVNVPROC)(GLenum pname, const GLfloat *params);
     typedef void (APIENTRYP PFNGLCOMBINERPARAMETERFNVPROC)(GLenum pname, GLfloat param);
@@ -4838,30 +9040,30 @@
 #ifndef GL_MESA_window_pos
 #define GL_MESA_window_pos 1
 #ifdef GL_GLEXT_PROTOTYPES
-    GLAPI void APIENTRY glWindowPos2dMESA(GLdouble, GLdouble);
-    GLAPI void APIENTRY glWindowPos2dvMESA(const GLdouble *);
-    GLAPI void APIENTRY glWindowPos2fMESA(GLfloat, GLfloat);
-    GLAPI void APIENTRY glWindowPos2fvMESA(const GLfloat *);
-    GLAPI void APIENTRY glWindowPos2iMESA(GLint, GLint);
-    GLAPI void APIENTRY glWindowPos2ivMESA(const GLint *);
-    GLAPI void APIENTRY glWindowPos2sMESA(GLshort, GLshort);
-    GLAPI void APIENTRY glWindowPos2svMESA(const GLshort *);
-    GLAPI void APIENTRY glWindowPos3dMESA(GLdouble, GLdouble, GLdouble);
-    GLAPI void APIENTRY glWindowPos3dvMESA(const GLdouble *);
-    GLAPI void APIENTRY glWindowPos3fMESA(GLfloat, GLfloat, GLfloat);
-    GLAPI void APIENTRY glWindowPos3fvMESA(const GLfloat *);
-    GLAPI void APIENTRY glWindowPos3iMESA(GLint, GLint, GLint);
-    GLAPI void APIENTRY glWindowPos3ivMESA(const GLint *);
-    GLAPI void APIENTRY glWindowPos3sMESA(GLshort, GLshort, GLshort);
-    GLAPI void APIENTRY glWindowPos3svMESA(const GLshort *);
-    GLAPI void APIENTRY glWindowPos4dMESA(GLdouble, GLdouble, GLdouble, GLdouble);
-    GLAPI void APIENTRY glWindowPos4dvMESA(const GLdouble *);
-    GLAPI void APIENTRY glWindowPos4fMESA(GLfloat, GLfloat, GLfloat, GLfloat);
-    GLAPI void APIENTRY glWindowPos4fvMESA(const GLfloat *);
-    GLAPI void APIENTRY glWindowPos4iMESA(GLint, GLint, GLint, GLint);
-    GLAPI void APIENTRY glWindowPos4ivMESA(const GLint *);
-    GLAPI void APIENTRY glWindowPos4sMESA(GLshort, GLshort, GLshort, GLshort);
-    GLAPI void APIENTRY glWindowPos4svMESA(const GLshort *);
+    GLAPI void APIENTRY glWindowPos2dMESA(GLdouble x, GLdouble y);
+    GLAPI void APIENTRY glWindowPos2dvMESA(const GLdouble *v);
+    GLAPI void APIENTRY glWindowPos2fMESA(GLfloat x, GLfloat y);
+    GLAPI void APIENTRY glWindowPos2fvMESA(const GLfloat *v);
+    GLAPI void APIENTRY glWindowPos2iMESA(GLint x, GLint y);
+    GLAPI void APIENTRY glWindowPos2ivMESA(const GLint *v);
+    GLAPI void APIENTRY glWindowPos2sMESA(GLshort x, GLshort y);
+    GLAPI void APIENTRY glWindowPos2svMESA(const GLshort *v);
+    GLAPI void APIENTRY glWindowPos3dMESA(GLdouble x, GLdouble y, GLdouble z);
+    GLAPI void APIENTRY glWindowPos3dvMESA(const GLdouble *v);
+    GLAPI void APIENTRY glWindowPos3fMESA(GLfloat x, GLfloat y, GLfloat z);
+    GLAPI void APIENTRY glWindowPos3fvMESA(const GLfloat *v);
+    GLAPI void APIENTRY glWindowPos3iMESA(GLint x, GLint y, GLint z);
+    GLAPI void APIENTRY glWindowPos3ivMESA(const GLint *v);
+    GLAPI void APIENTRY glWindowPos3sMESA(GLshort x, GLshort y, GLshort z);
+    GLAPI void APIENTRY glWindowPos3svMESA(const GLshort *v);
+    GLAPI void APIENTRY glWindowPos4dMESA(GLdouble x, GLdouble y, GLdouble z, GLdouble w);
+    GLAPI void APIENTRY glWindowPos4dvMESA(const GLdouble *v);
+    GLAPI void APIENTRY glWindowPos4fMESA(GLfloat x, GLfloat y, GLfloat z, GLfloat w);
+    GLAPI void APIENTRY glWindowPos4fvMESA(const GLfloat *v);
+    GLAPI void APIENTRY glWindowPos4iMESA(GLint x, GLint y, GLint z, GLint w);
+    GLAPI void APIENTRY glWindowPos4ivMESA(const GLint *v);
+    GLAPI void APIENTRY glWindowPos4sMESA(GLshort x, GLshort y, GLshort z, GLshort w);
+    GLAPI void APIENTRY glWindowPos4svMESA(const GLshort *v);
 #endif /* GL_GLEXT_PROTOTYPES */
     typedef void (APIENTRYP PFNGLWINDOWPOS2DMESAPROC)(GLdouble x, GLdouble y);
     typedef void (APIENTRYP PFNGLWINDOWPOS2DVMESAPROC)(const GLdouble *v);
@@ -4896,8 +9098,8 @@
 #ifndef GL_IBM_multimode_draw_arrays
 #define GL_IBM_multimode_draw_arrays 1
 #ifdef GL_GLEXT_PROTOTYPES
-    GLAPI void APIENTRY glMultiModeDrawArraysIBM(const GLenum *, const GLint *, const GLsizei *, GLsizei, GLint);
-    GLAPI void APIENTRY glMultiModeDrawElementsIBM(const GLenum *, const GLsizei *, GLenum, const GLvoid* const *, GLsizei, GLint);
+    GLAPI void APIENTRY glMultiModeDrawArraysIBM(const GLenum *mode, const GLint *first, const GLsizei *count, GLsizei primcount, GLint modestride);
+    GLAPI void APIENTRY glMultiModeDrawElementsIBM(const GLenum *mode, const GLsizei *count, GLenum type, const GLvoid* const *indices, GLsizei primcount, GLint modestride);
 #endif /* GL_GLEXT_PROTOTYPES */
     typedef void (APIENTRYP PFNGLMULTIMODEDRAWARRAYSIBMPROC)(const GLenum *mode, const GLint *first, const GLsizei *count, GLsizei primcount, GLint modestride);
     typedef void (APIENTRYP PFNGLMULTIMODEDRAWELEMENTSIBMPROC)(const GLenum *mode, const GLsizei *count, GLenum type, const GLvoid* const *indices, GLsizei primcount, GLint modestride);
@@ -4906,14 +9108,14 @@
 #ifndef GL_IBM_vertex_array_lists
 #define GL_IBM_vertex_array_lists 1
 #ifdef GL_GLEXT_PROTOTYPES
-    GLAPI void APIENTRY glColorPointerListIBM(GLint, GLenum, GLint, const GLvoid* *, GLint);
-    GLAPI void APIENTRY glSecondaryColorPointerListIBM(GLint, GLenum, GLint, const GLvoid* *, GLint);
-    GLAPI void APIENTRY glEdgeFlagPointerListIBM(GLint, const GLboolean* *, GLint);
-    GLAPI void APIENTRY glFogCoordPointerListIBM(GLenum, GLint, const GLvoid* *, GLint);
-    GLAPI void APIENTRY glIndexPointerListIBM(GLenum, GLint, const GLvoid* *, GLint);
-    GLAPI void APIENTRY glNormalPointerListIBM(GLenum, GLint, const GLvoid* *, GLint);
-    GLAPI void APIENTRY glTexCoordPointerListIBM(GLint, GLenum, GLint, const GLvoid* *, GLint);
-    GLAPI void APIENTRY glVertexPointerListIBM(GLint, GLenum, GLint, const GLvoid* *, GLint);
+    GLAPI void APIENTRY glColorPointerListIBM(GLint size, GLenum type, GLint stride, const GLvoid* *pointer, GLint ptrstride);
+    GLAPI void APIENTRY glSecondaryColorPointerListIBM(GLint size, GLenum type, GLint stride, const GLvoid* *pointer, GLint ptrstride);
+    GLAPI void APIENTRY glEdgeFlagPointerListIBM(GLint stride, const GLboolean* *pointer, GLint ptrstride);
+    GLAPI void APIENTRY glFogCoordPointerListIBM(GLenum type, GLint stride, const GLvoid* *pointer, GLint ptrstride);
+    GLAPI void APIENTRY glIndexPointerListIBM(GLenum type, GLint stride, const GLvoid* *pointer, GLint ptrstride);
+    GLAPI void APIENTRY glNormalPointerListIBM(GLenum type, GLint stride, const GLvoid* *pointer, GLint ptrstride);
+    GLAPI void APIENTRY glTexCoordPointerListIBM(GLint size, GLenum type, GLint stride, const GLvoid* *pointer, GLint ptrstride);
+    GLAPI void APIENTRY glVertexPointerListIBM(GLint size, GLenum type, GLint stride, const GLvoid* *pointer, GLint ptrstride);
 #endif /* GL_GLEXT_PROTOTYPES */
     typedef void (APIENTRYP PFNGLCOLORPOINTERLISTIBMPROC)(GLint size, GLenum type, GLint stride, const GLvoid* *pointer, GLint ptrstride);
     typedef void (APIENTRYP PFNGLSECONDARYCOLORPOINTERLISTIBMPROC)(GLint size, GLenum type, GLint stride, const GLvoid* *pointer, GLint ptrstride);
@@ -4952,7 +9154,7 @@
 #ifndef GL_3DFX_tbuffer
 #define GL_3DFX_tbuffer 1
 #ifdef GL_GLEXT_PROTOTYPES
-    GLAPI void APIENTRY glTbufferMask3DFX(GLuint);
+    GLAPI void APIENTRY glTbufferMask3DFX(GLuint mask);
 #endif /* GL_GLEXT_PROTOTYPES */
     typedef void (APIENTRYP PFNGLTBUFFERMASK3DFXPROC)(GLuint mask);
 #endif
@@ -4960,8 +9162,8 @@
 #ifndef GL_EXT_multisample
 #define GL_EXT_multisample 1
 #ifdef GL_GLEXT_PROTOTYPES
-    GLAPI void APIENTRY glSampleMaskEXT(GLclampf, GLboolean);
-    GLAPI void APIENTRY glSamplePatternEXT(GLenum);
+    GLAPI void APIENTRY glSampleMaskEXT(GLclampf value, GLboolean invert);
+    GLAPI void APIENTRY glSamplePatternEXT(GLenum pattern);
 #endif /* GL_GLEXT_PROTOTYPES */
     typedef void (APIENTRYP PFNGLSAMPLEMASKEXTPROC)(GLclampf value, GLboolean invert);
     typedef void (APIENTRYP PFNGLSAMPLEPATTERNEXTPROC)(GLenum pattern);
@@ -4986,7 +9188,7 @@
 #ifndef GL_SGIS_texture_color_mask
 #define GL_SGIS_texture_color_mask 1
 #ifdef GL_GLEXT_PROTOTYPES
-    GLAPI void APIENTRY glTextureColorMaskSGIS(GLboolean, GLboolean, GLboolean, GLboolean);
+    GLAPI void APIENTRY glTextureColorMaskSGIS(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);
 #endif /* GL_GLEXT_PROTOTYPES */
     typedef void (APIENTRYP PFNGLTEXTURECOLORMASKSGISPROC)(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);
 #endif
@@ -4994,7 +9196,7 @@
 #ifndef GL_SGIX_igloo_interface
 #define GL_SGIX_igloo_interface 1
 #ifdef GL_GLEXT_PROTOTYPES
-    GLAPI void APIENTRY glIglooInterfaceSGIX(GLenum, const GLvoid *);
+    GLAPI void APIENTRY glIglooInterfaceSGIX(GLenum pname, const GLvoid *params);
 #endif /* GL_GLEXT_PROTOTYPES */
     typedef void (APIENTRYP PFNGLIGLOOINTERFACESGIXPROC)(GLenum pname, const GLvoid *params);
 #endif
@@ -5010,13 +9212,13 @@
 #ifndef GL_NV_fence
 #define GL_NV_fence 1
 #ifdef GL_GLEXT_PROTOTYPES
-    GLAPI void APIENTRY glDeleteFencesNV(GLsizei, const GLuint *);
-    GLAPI void APIENTRY glGenFencesNV(GLsizei, GLuint *);
-    GLAPI GLboolean APIENTRY glIsFenceNV(GLuint);
-    GLAPI GLboolean APIENTRY glTestFenceNV(GLuint);
-    GLAPI void APIENTRY glGetFenceivNV(GLuint, GLenum, GLint *);
-    GLAPI void APIENTRY glFinishFenceNV(GLuint);
-    GLAPI void APIENTRY glSetFenceNV(GLuint, GLenum);
+    GLAPI void APIENTRY glDeleteFencesNV(GLsizei n, const GLuint *fences);
+    GLAPI void APIENTRY glGenFencesNV(GLsizei n, GLuint *fences);
+    GLAPI GLboolean APIENTRY glIsFenceNV(GLuint fence);
+    GLAPI GLboolean APIENTRY glTestFenceNV(GLuint fence);
+    GLAPI void APIENTRY glGetFenceivNV(GLuint fence, GLenum pname, GLint *params);
+    GLAPI void APIENTRY glFinishFenceNV(GLuint fence);
+    GLAPI void APIENTRY glSetFenceNV(GLuint fence, GLenum condition);
 #endif /* GL_GLEXT_PROTOTYPES */
     typedef void (APIENTRYP PFNGLDELETEFENCESNVPROC)(GLsizei n, const GLuint *fences);
     typedef void (APIENTRYP PFNGLGENFENCESNVPROC)(GLsizei n, GLuint *fences);
@@ -5030,15 +9232,15 @@
 #ifndef GL_NV_evaluators
 #define GL_NV_evaluators 1
 #ifdef GL_GLEXT_PROTOTYPES
-    GLAPI void APIENTRY glMapControlPointsNV(GLenum, GLuint, GLenum, GLsizei, GLsizei, GLint, GLint, GLboolean, const GLvoid *);
-    GLAPI void APIENTRY glMapParameterivNV(GLenum, GLenum, const GLint *);
-    GLAPI void APIENTRY glMapParameterfvNV(GLenum, GLenum, const GLfloat *);
-    GLAPI void APIENTRY glGetMapControlPointsNV(GLenum, GLuint, GLenum, GLsizei, GLsizei, GLboolean, GLvoid *);
-    GLAPI void APIENTRY glGetMapParameterivNV(GLenum, GLenum, GLint *);
-    GLAPI void APIENTRY glGetMapParameterfvNV(GLenum, GLenum, GLfloat *);
-    GLAPI void APIENTRY glGetMapAttribParameterivNV(GLenum, GLuint, GLenum, GLint *);
-    GLAPI void APIENTRY glGetMapAttribParameterfvNV(GLenum, GLuint, GLenum, GLfloat *);
-    GLAPI void APIENTRY glEvalMapsNV(GLenum, GLenum);
+    GLAPI void APIENTRY glMapControlPointsNV(GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLint uorder, GLint vorder, GLboolean packed, const GLvoid *points);
+    GLAPI void APIENTRY glMapParameterivNV(GLenum target, GLenum pname, const GLint *params);
+    GLAPI void APIENTRY glMapParameterfvNV(GLenum target, GLenum pname, const GLfloat *params);
+    GLAPI void APIENTRY glGetMapControlPointsNV(GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLboolean packed, GLvoid *points);
+    GLAPI void APIENTRY glGetMapParameterivNV(GLenum target, GLenum pname, GLint *params);
+    GLAPI void APIENTRY glGetMapParameterfvNV(GLenum target, GLenum pname, GLfloat *params);
+    GLAPI void APIENTRY glGetMapAttribParameterivNV(GLenum target, GLuint index, GLenum pname, GLint *params);
+    GLAPI void APIENTRY glGetMapAttribParameterfvNV(GLenum target, GLuint index, GLenum pname, GLfloat *params);
+    GLAPI void APIENTRY glEvalMapsNV(GLenum target, GLenum mode);
 #endif /* GL_GLEXT_PROTOTYPES */
     typedef void (APIENTRYP PFNGLMAPCONTROLPOINTSNVPROC)(GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLint uorder, GLint vorder, GLboolean packed, const GLvoid *points);
     typedef void (APIENTRYP PFNGLMAPPARAMETERIVNVPROC)(GLenum target, GLenum pname, const GLint *params);
@@ -5058,8 +9260,8 @@
 #ifndef GL_NV_register_combiners2
 #define GL_NV_register_combiners2 1
 #ifdef GL_GLEXT_PROTOTYPES
-    GLAPI void APIENTRY glCombinerStageParameterfvNV(GLenum, GLenum, const GLfloat *);
-    GLAPI void APIENTRY glGetCombinerStageParameterfvNV(GLenum, GLenum, GLfloat *);
+    GLAPI void APIENTRY glCombinerStageParameterfvNV(GLenum stage, GLenum pname, const GLfloat *params);
+    GLAPI void APIENTRY glGetCombinerStageParameterfvNV(GLenum stage, GLenum pname, GLfloat *params);
 #endif /* GL_GLEXT_PROTOTYPES */
     typedef void (APIENTRYP PFNGLCOMBINERSTAGEPARAMETERFVNVPROC)(GLenum stage, GLenum pname, const GLfloat *params);
     typedef void (APIENTRYP PFNGLGETCOMBINERSTAGEPARAMETERFVNVPROC)(GLenum stage, GLenum pname, GLfloat *params);
@@ -5088,70 +9290,70 @@
 #ifndef GL_NV_vertex_program
 #define GL_NV_vertex_program 1
 #ifdef GL_GLEXT_PROTOTYPES
-    GLAPI GLboolean APIENTRY glAreProgramsResidentNV(GLsizei, const GLuint *, GLboolean *);
-    GLAPI void APIENTRY glBindProgramNV(GLenum, GLuint);
-    GLAPI void APIENTRY glDeleteProgramsNV(GLsizei, const GLuint *);
-    GLAPI void APIENTRY glExecuteProgramNV(GLenum, GLuint, const GLfloat *);
-    GLAPI void APIENTRY glGenProgramsNV(GLsizei, GLuint *);
-    GLAPI void APIENTRY glGetProgramParameterdvNV(GLenum, GLuint, GLenum, GLdouble *);
-    GLAPI void APIENTRY glGetProgramParameterfvNV(GLenum, GLuint, GLenum, GLfloat *);
-    GLAPI void APIENTRY glGetProgramivNV(GLuint, GLenum, GLint *);
-    GLAPI void APIENTRY glGetProgramStringNV(GLuint, GLenum, GLubyte *);
-    GLAPI void APIENTRY glGetTrackMatrixivNV(GLenum, GLuint, GLenum, GLint *);
-    GLAPI void APIENTRY glGetVertexAttribdvNV(GLuint, GLenum, GLdouble *);
-    GLAPI void APIENTRY glGetVertexAttribfvNV(GLuint, GLenum, GLfloat *);
-    GLAPI void APIENTRY glGetVertexAttribivNV(GLuint, GLenum, GLint *);
-    GLAPI void APIENTRY glGetVertexAttribPointervNV(GLuint, GLenum, GLvoid* *);
-    GLAPI GLboolean APIENTRY glIsProgramNV(GLuint);
-    GLAPI void APIENTRY glLoadProgramNV(GLenum, GLuint, GLsizei, const GLubyte *);
-    GLAPI void APIENTRY glProgramParameter4dNV(GLenum, GLuint, GLdouble, GLdouble, GLdouble, GLdouble);
-    GLAPI void APIENTRY glProgramParameter4dvNV(GLenum, GLuint, const GLdouble *);
-    GLAPI void APIENTRY glProgramParameter4fNV(GLenum, GLuint, GLfloat, GLfloat, GLfloat, GLfloat);
-    GLAPI void APIENTRY glProgramParameter4fvNV(GLenum, GLuint, const GLfloat *);
-    GLAPI void APIENTRY glProgramParameters4dvNV(GLenum, GLuint, GLuint, const GLdouble *);
-    GLAPI void APIENTRY glProgramParameters4fvNV(GLenum, GLuint, GLuint, const GLfloat *);
-    GLAPI void APIENTRY glRequestResidentProgramsNV(GLsizei, const GLuint *);
-    GLAPI void APIENTRY glTrackMatrixNV(GLenum, GLuint, GLenum, GLenum);
-    GLAPI void APIENTRY glVertexAttribPointerNV(GLuint, GLint, GLenum, GLsizei, const GLvoid *);
-    GLAPI void APIENTRY glVertexAttrib1dNV(GLuint, GLdouble);
-    GLAPI void APIENTRY glVertexAttrib1dvNV(GLuint, const GLdouble *);
-    GLAPI void APIENTRY glVertexAttrib1fNV(GLuint, GLfloat);
-    GLAPI void APIENTRY glVertexAttrib1fvNV(GLuint, const GLfloat *);
-    GLAPI void APIENTRY glVertexAttrib1sNV(GLuint, GLshort);
-    GLAPI void APIENTRY glVertexAttrib1svNV(GLuint, const GLshort *);
-    GLAPI void APIENTRY glVertexAttrib2dNV(GLuint, GLdouble, GLdouble);
-    GLAPI void APIENTRY glVertexAttrib2dvNV(GLuint, const GLdouble *);
-    GLAPI void APIENTRY glVertexAttrib2fNV(GLuint, GLfloat, GLfloat);
-    GLAPI void APIENTRY glVertexAttrib2fvNV(GLuint, const GLfloat *);
-    GLAPI void APIENTRY glVertexAttrib2sNV(GLuint, GLshort, GLshort);
-    GLAPI void APIENTRY glVertexAttrib2svNV(GLuint, const GLshort *);
-    GLAPI void APIENTRY glVertexAttrib3dNV(GLuint, GLdouble, GLdouble, GLdouble);
-    GLAPI void APIENTRY glVertexAttrib3dvNV(GLuint, const GLdouble *);
-    GLAPI void APIENTRY glVertexAttrib3fNV(GLuint, GLfloat, GLfloat, GLfloat);
-    GLAPI void APIENTRY glVertexAttrib3fvNV(GLuint, const GLfloat *);
-    GLAPI void APIENTRY glVertexAttrib3sNV(GLuint, GLshort, GLshort, GLshort);
-    GLAPI void APIENTRY glVertexAttrib3svNV(GLuint, const GLshort *);
-    GLAPI void APIENTRY glVertexAttrib4dNV(GLuint, GLdouble, GLdouble, GLdouble, GLdouble);
-    GLAPI void APIENTRY glVertexAttrib4dvNV(GLuint, const GLdouble *);
-    GLAPI void APIENTRY glVertexAttrib4fNV(GLuint, GLfloat, GLfloat, GLfloat, GLfloat);
-    GLAPI void APIENTRY glVertexAttrib4fvNV(GLuint, const GLfloat *);
-    GLAPI void APIENTRY glVertexAttrib4sNV(GLuint, GLshort, GLshort, GLshort, GLshort);
-    GLAPI void APIENTRY glVertexAttrib4svNV(GLuint, const GLshort *);
-    GLAPI void APIENTRY glVertexAttrib4ubNV(GLuint, GLubyte, GLubyte, GLubyte, GLubyte);
-    GLAPI void APIENTRY glVertexAttrib4ubvNV(GLuint, const GLubyte *);
-    GLAPI void APIENTRY glVertexAttribs1dvNV(GLuint, GLsizei, const GLdouble *);
-    GLAPI void APIENTRY glVertexAttribs1fvNV(GLuint, GLsizei, const GLfloat *);
-    GLAPI void APIENTRY glVertexAttribs1svNV(GLuint, GLsizei, const GLshort *);
-    GLAPI void APIENTRY glVertexAttribs2dvNV(GLuint, GLsizei, const GLdouble *);
-    GLAPI void APIENTRY glVertexAttribs2fvNV(GLuint, GLsizei, const GLfloat *);
-    GLAPI void APIENTRY glVertexAttribs2svNV(GLuint, GLsizei, const GLshort *);
-    GLAPI void APIENTRY glVertexAttribs3dvNV(GLuint, GLsizei, const GLdouble *);
-    GLAPI void APIENTRY glVertexAttribs3fvNV(GLuint, GLsizei, const GLfloat *);
-    GLAPI void APIENTRY glVertexAttribs3svNV(GLuint, GLsizei, const GLshort *);
-    GLAPI void APIENTRY glVertexAttribs4dvNV(GLuint, GLsizei, const GLdouble *);
-    GLAPI void APIENTRY glVertexAttribs4fvNV(GLuint, GLsizei, const GLfloat *);
-    GLAPI void APIENTRY glVertexAttribs4svNV(GLuint, GLsizei, const GLshort *);
-    GLAPI void APIENTRY glVertexAttribs4ubvNV(GLuint, GLsizei, const GLubyte *);
+    GLAPI GLboolean APIENTRY glAreProgramsResidentNV(GLsizei n, const GLuint *programs, GLboolean *residences);
+    GLAPI void APIENTRY glBindProgramNV(GLenum target, GLuint id);
+    GLAPI void APIENTRY glDeleteProgramsNV(GLsizei n, const GLuint *programs);
+    GLAPI void APIENTRY glExecuteProgramNV(GLenum target, GLuint id, const GLfloat *params);
+    GLAPI void APIENTRY glGenProgramsNV(GLsizei n, GLuint *programs);
+    GLAPI void APIENTRY glGetProgramParameterdvNV(GLenum target, GLuint index, GLenum pname, GLdouble *params);
+    GLAPI void APIENTRY glGetProgramParameterfvNV(GLenum target, GLuint index, GLenum pname, GLfloat *params);
+    GLAPI void APIENTRY glGetProgramivNV(GLuint id, GLenum pname, GLint *params);
+    GLAPI void APIENTRY glGetProgramStringNV(GLuint id, GLenum pname, GLubyte *program);
+    GLAPI void APIENTRY glGetTrackMatrixivNV(GLenum target, GLuint address, GLenum pname, GLint *params);
+    GLAPI void APIENTRY glGetVertexAttribdvNV(GLuint index, GLenum pname, GLdouble *params);
+    GLAPI void APIENTRY glGetVertexAttribfvNV(GLuint index, GLenum pname, GLfloat *params);
+    GLAPI void APIENTRY glGetVertexAttribivNV(GLuint index, GLenum pname, GLint *params);
+    GLAPI void APIENTRY glGetVertexAttribPointervNV(GLuint index, GLenum pname, GLvoid* *pointer);
+    GLAPI GLboolean APIENTRY glIsProgramNV(GLuint id);
+    GLAPI void APIENTRY glLoadProgramNV(GLenum target, GLuint id, GLsizei len, const GLubyte *program);
+    GLAPI void APIENTRY glProgramParameter4dNV(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
+    GLAPI void APIENTRY glProgramParameter4dvNV(GLenum target, GLuint index, const GLdouble *v);
+    GLAPI void APIENTRY glProgramParameter4fNV(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
+    GLAPI void APIENTRY glProgramParameter4fvNV(GLenum target, GLuint index, const GLfloat *v);
+    GLAPI void APIENTRY glProgramParameters4dvNV(GLenum target, GLuint index, GLsizei count, const GLdouble *v);
+    GLAPI void APIENTRY glProgramParameters4fvNV(GLenum target, GLuint index, GLsizei count, const GLfloat *v);
+    GLAPI void APIENTRY glRequestResidentProgramsNV(GLsizei n, const GLuint *programs);
+    GLAPI void APIENTRY glTrackMatrixNV(GLenum target, GLuint address, GLenum matrix, GLenum transform);
+    GLAPI void APIENTRY glVertexAttribPointerNV(GLuint index, GLint fsize, GLenum type, GLsizei stride, const GLvoid *pointer);
+    GLAPI void APIENTRY glVertexAttrib1dNV(GLuint index, GLdouble x);
+    GLAPI void APIENTRY glVertexAttrib1dvNV(GLuint index, const GLdouble *v);
+    GLAPI void APIENTRY glVertexAttrib1fNV(GLuint index, GLfloat x);
+    GLAPI void APIENTRY glVertexAttrib1fvNV(GLuint index, const GLfloat *v);
+    GLAPI void APIENTRY glVertexAttrib1sNV(GLuint index, GLshort x);
+    GLAPI void APIENTRY glVertexAttrib1svNV(GLuint index, const GLshort *v);
+    GLAPI void APIENTRY glVertexAttrib2dNV(GLuint index, GLdouble x, GLdouble y);
+    GLAPI void APIENTRY glVertexAttrib2dvNV(GLuint index, const GLdouble *v);
+    GLAPI void APIENTRY glVertexAttrib2fNV(GLuint index, GLfloat x, GLfloat y);
+    GLAPI void APIENTRY glVertexAttrib2fvNV(GLuint index, const GLfloat *v);
+    GLAPI void APIENTRY glVertexAttrib2sNV(GLuint index, GLshort x, GLshort y);
+    GLAPI void APIENTRY glVertexAttrib2svNV(GLuint index, const GLshort *v);
+    GLAPI void APIENTRY glVertexAttrib3dNV(GLuint index, GLdouble x, GLdouble y, GLdouble z);
+    GLAPI void APIENTRY glVertexAttrib3dvNV(GLuint index, const GLdouble *v);
+    GLAPI void APIENTRY glVertexAttrib3fNV(GLuint index, GLfloat x, GLfloat y, GLfloat z);
+    GLAPI void APIENTRY glVertexAttrib3fvNV(GLuint index, const GLfloat *v);
+    GLAPI void APIENTRY glVertexAttrib3sNV(GLuint index, GLshort x, GLshort y, GLshort z);
+    GLAPI void APIENTRY glVertexAttrib3svNV(GLuint index, const GLshort *v);
+    GLAPI void APIENTRY glVertexAttrib4dNV(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
+    GLAPI void APIENTRY glVertexAttrib4dvNV(GLuint index, const GLdouble *v);
+    GLAPI void APIENTRY glVertexAttrib4fNV(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
+    GLAPI void APIENTRY glVertexAttrib4fvNV(GLuint index, const GLfloat *v);
+    GLAPI void APIENTRY glVertexAttrib4sNV(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
+    GLAPI void APIENTRY glVertexAttrib4svNV(GLuint index, const GLshort *v);
+    GLAPI void APIENTRY glVertexAttrib4ubNV(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
+    GLAPI void APIENTRY glVertexAttrib4ubvNV(GLuint index, const GLubyte *v);
+    GLAPI void APIENTRY glVertexAttribs1dvNV(GLuint index, GLsizei count, const GLdouble *v);
+    GLAPI void APIENTRY glVertexAttribs1fvNV(GLuint index, GLsizei count, const GLfloat *v);
+    GLAPI void APIENTRY glVertexAttribs1svNV(GLuint index, GLsizei count, const GLshort *v);
+    GLAPI void APIENTRY glVertexAttribs2dvNV(GLuint index, GLsizei count, const GLdouble *v);
+    GLAPI void APIENTRY glVertexAttribs2fvNV(GLuint index, GLsizei count, const GLfloat *v);
+    GLAPI void APIENTRY glVertexAttribs2svNV(GLuint index, GLsizei count, const GLshort *v);
+    GLAPI void APIENTRY glVertexAttribs3dvNV(GLuint index, GLsizei count, const GLdouble *v);
+    GLAPI void APIENTRY glVertexAttribs3fvNV(GLuint index, GLsizei count, const GLfloat *v);
+    GLAPI void APIENTRY glVertexAttribs3svNV(GLuint index, GLsizei count, const GLshort *v);
+    GLAPI void APIENTRY glVertexAttribs4dvNV(GLuint index, GLsizei count, const GLdouble *v);
+    GLAPI void APIENTRY glVertexAttribs4fvNV(GLuint index, GLsizei count, const GLfloat *v);
+    GLAPI void APIENTRY glVertexAttribs4svNV(GLuint index, GLsizei count, const GLshort *v);
+    GLAPI void APIENTRY glVertexAttribs4ubvNV(GLuint index, GLsizei count, const GLubyte *v);
 #endif /* GL_GLEXT_PROTOTYPES */
     typedef GLboolean(APIENTRYP PFNGLAREPROGRAMSRESIDENTNVPROC)(GLsizei n, const GLuint *programs, GLboolean *residences);
     typedef void (APIENTRYP PFNGLBINDPROGRAMNVPROC)(GLenum target, GLuint id);
@@ -5173,8 +9375,8 @@
     typedef void (APIENTRYP PFNGLPROGRAMPARAMETER4DVNVPROC)(GLenum target, GLuint index, const GLdouble *v);
     typedef void (APIENTRYP PFNGLPROGRAMPARAMETER4FNVPROC)(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
     typedef void (APIENTRYP PFNGLPROGRAMPARAMETER4FVNVPROC)(GLenum target, GLuint index, const GLfloat *v);
-    typedef void (APIENTRYP PFNGLPROGRAMPARAMETERS4DVNVPROC)(GLenum target, GLuint index, GLuint count, const GLdouble *v);
-    typedef void (APIENTRYP PFNGLPROGRAMPARAMETERS4FVNVPROC)(GLenum target, GLuint index, GLuint count, const GLfloat *v);
+    typedef void (APIENTRYP PFNGLPROGRAMPARAMETERS4DVNVPROC)(GLenum target, GLuint index, GLsizei count, const GLdouble *v);
+    typedef void (APIENTRYP PFNGLPROGRAMPARAMETERS4FVNVPROC)(GLenum target, GLuint index, GLsizei count, const GLfloat *v);
     typedef void (APIENTRYP PFNGLREQUESTRESIDENTPROGRAMSNVPROC)(GLsizei n, const GLuint *programs);
     typedef void (APIENTRYP PFNGLTRACKMATRIXNVPROC)(GLenum target, GLuint address, GLenum matrix, GLenum transform);
     typedef void (APIENTRYP PFNGLVERTEXATTRIBPOINTERNVPROC)(GLuint index, GLint fsize, GLenum type, GLsizei stride, const GLvoid *pointer);
@@ -5246,10 +9448,10 @@
 #ifndef GL_ATI_envmap_bumpmap
 #define GL_ATI_envmap_bumpmap 1
 #ifdef GL_GLEXT_PROTOTYPES
-    GLAPI void APIENTRY glTexBumpParameterivATI(GLenum, const GLint *);
-    GLAPI void APIENTRY glTexBumpParameterfvATI(GLenum, const GLfloat *);
-    GLAPI void APIENTRY glGetTexBumpParameterivATI(GLenum, GLint *);
-    GLAPI void APIENTRY glGetTexBumpParameterfvATI(GLenum, GLfloat *);
+    GLAPI void APIENTRY glTexBumpParameterivATI(GLenum pname, const GLint *param);
+    GLAPI void APIENTRY glTexBumpParameterfvATI(GLenum pname, const GLfloat *param);
+    GLAPI void APIENTRY glGetTexBumpParameterivATI(GLenum pname, GLint *param);
+    GLAPI void APIENTRY glGetTexBumpParameterfvATI(GLenum pname, GLfloat *param);
 #endif /* GL_GLEXT_PROTOTYPES */
     typedef void (APIENTRYP PFNGLTEXBUMPPARAMETERIVATIPROC)(GLenum pname, const GLint *param);
     typedef void (APIENTRYP PFNGLTEXBUMPPARAMETERFVATIPROC)(GLenum pname, const GLfloat *param);
@@ -5260,20 +9462,20 @@
 #ifndef GL_ATI_fragment_shader
 #define GL_ATI_fragment_shader 1
 #ifdef GL_GLEXT_PROTOTYPES
-    GLAPI GLuint APIENTRY glGenFragmentShadersATI(GLuint);
-    GLAPI void APIENTRY glBindFragmentShaderATI(GLuint);
-    GLAPI void APIENTRY glDeleteFragmentShaderATI(GLuint);
+    GLAPI GLuint APIENTRY glGenFragmentShadersATI(GLuint range);
+    GLAPI void APIENTRY glBindFragmentShaderATI(GLuint id);
+    GLAPI void APIENTRY glDeleteFragmentShaderATI(GLuint id);
     GLAPI void APIENTRY glBeginFragmentShaderATI(void);
     GLAPI void APIENTRY glEndFragmentShaderATI(void);
-    GLAPI void APIENTRY glPassTexCoordATI(GLuint, GLuint, GLenum);
-    GLAPI void APIENTRY glSampleMapATI(GLuint, GLuint, GLenum);
-    GLAPI void APIENTRY glColorFragmentOp1ATI(GLenum, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint);
-    GLAPI void APIENTRY glColorFragmentOp2ATI(GLenum, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint);
-    GLAPI void APIENTRY glColorFragmentOp3ATI(GLenum, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint);
-    GLAPI void APIENTRY glAlphaFragmentOp1ATI(GLenum, GLuint, GLuint, GLuint, GLuint, GLuint);
-    GLAPI void APIENTRY glAlphaFragmentOp2ATI(GLenum, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint);
-    GLAPI void APIENTRY glAlphaFragmentOp3ATI(GLenum, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint);
-    GLAPI void APIENTRY glSetFragmentShaderConstantATI(GLuint, const GLfloat *);
+    GLAPI void APIENTRY glPassTexCoordATI(GLuint dst, GLuint coord, GLenum swizzle);
+    GLAPI void APIENTRY glSampleMapATI(GLuint dst, GLuint interp, GLenum swizzle);
+    GLAPI void APIENTRY glColorFragmentOp1ATI(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod);
+    GLAPI void APIENTRY glColorFragmentOp2ATI(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod);
+    GLAPI void APIENTRY glColorFragmentOp3ATI(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod);
+    GLAPI void APIENTRY glAlphaFragmentOp1ATI(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod);
+    GLAPI void APIENTRY glAlphaFragmentOp2ATI(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod);
+    GLAPI void APIENTRY glAlphaFragmentOp3ATI(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod);
+    GLAPI void APIENTRY glSetFragmentShaderConstantATI(GLuint dst, const GLfloat *value);
 #endif /* GL_GLEXT_PROTOTYPES */
     typedef GLuint(APIENTRYP PFNGLGENFRAGMENTSHADERSATIPROC)(GLuint range);
     typedef void (APIENTRYP PFNGLBINDFRAGMENTSHADERATIPROC)(GLuint id);
@@ -5294,8 +9496,8 @@
 #ifndef GL_ATI_pn_triangles
 #define GL_ATI_pn_triangles 1
 #ifdef GL_GLEXT_PROTOTYPES
-    GLAPI void APIENTRY glPNTrianglesiATI(GLenum, GLint);
-    GLAPI void APIENTRY glPNTrianglesfATI(GLenum, GLfloat);
+    GLAPI void APIENTRY glPNTrianglesiATI(GLenum pname, GLint param);
+    GLAPI void APIENTRY glPNTrianglesfATI(GLenum pname, GLfloat param);
 #endif /* GL_GLEXT_PROTOTYPES */
     typedef void (APIENTRYP PFNGLPNTRIANGLESIATIPROC)(GLenum pname, GLint param);
     typedef void (APIENTRYP PFNGLPNTRIANGLESFATIPROC)(GLenum pname, GLfloat param);
@@ -5304,18 +9506,18 @@
 #ifndef GL_ATI_vertex_array_object
 #define GL_ATI_vertex_array_object 1
 #ifdef GL_GLEXT_PROTOTYPES
-    GLAPI GLuint APIENTRY glNewObjectBufferATI(GLsizei, const GLvoid *, GLenum);
-    GLAPI GLboolean APIENTRY glIsObjectBufferATI(GLuint);
-    GLAPI void APIENTRY glUpdateObjectBufferATI(GLuint, GLuint, GLsizei, const GLvoid *, GLenum);
-    GLAPI void APIENTRY glGetObjectBufferfvATI(GLuint, GLenum, GLfloat *);
-    GLAPI void APIENTRY glGetObjectBufferivATI(GLuint, GLenum, GLint *);
-    GLAPI void APIENTRY glFreeObjectBufferATI(GLuint);
-    GLAPI void APIENTRY glArrayObjectATI(GLenum, GLint, GLenum, GLsizei, GLuint, GLuint);
-    GLAPI void APIENTRY glGetArrayObjectfvATI(GLenum, GLenum, GLfloat *);
-    GLAPI void APIENTRY glGetArrayObjectivATI(GLenum, GLenum, GLint *);
-    GLAPI void APIENTRY glVariantArrayObjectATI(GLuint, GLenum, GLsizei, GLuint, GLuint);
-    GLAPI void APIENTRY glGetVariantArrayObjectfvATI(GLuint, GLenum, GLfloat *);
-    GLAPI void APIENTRY glGetVariantArrayObjectivATI(GLuint, GLenum, GLint *);
+    GLAPI GLuint APIENTRY glNewObjectBufferATI(GLsizei size, const GLvoid *pointer, GLenum usage);
+    GLAPI GLboolean APIENTRY glIsObjectBufferATI(GLuint buffer);
+    GLAPI void APIENTRY glUpdateObjectBufferATI(GLuint buffer, GLuint offset, GLsizei size, const GLvoid *pointer, GLenum preserve);
+    GLAPI void APIENTRY glGetObjectBufferfvATI(GLuint buffer, GLenum pname, GLfloat *params);
+    GLAPI void APIENTRY glGetObjectBufferivATI(GLuint buffer, GLenum pname, GLint *params);
+    GLAPI void APIENTRY glFreeObjectBufferATI(GLuint buffer);
+    GLAPI void APIENTRY glArrayObjectATI(GLenum array, GLint size, GLenum type, GLsizei stride, GLuint buffer, GLuint offset);
+    GLAPI void APIENTRY glGetArrayObjectfvATI(GLenum array, GLenum pname, GLfloat *params);
+    GLAPI void APIENTRY glGetArrayObjectivATI(GLenum array, GLenum pname, GLint *params);
+    GLAPI void APIENTRY glVariantArrayObjectATI(GLuint id, GLenum type, GLsizei stride, GLuint buffer, GLuint offset);
+    GLAPI void APIENTRY glGetVariantArrayObjectfvATI(GLuint id, GLenum pname, GLfloat *params);
+    GLAPI void APIENTRY glGetVariantArrayObjectivATI(GLuint id, GLenum pname, GLint *params);
 #endif /* GL_GLEXT_PROTOTYPES */
     typedef GLuint(APIENTRYP PFNGLNEWOBJECTBUFFERATIPROC)(GLsizei size, const GLvoid *pointer, GLenum usage);
     typedef GLboolean(APIENTRYP PFNGLISOBJECTBUFFERATIPROC)(GLuint buffer);
@@ -5336,46 +9538,46 @@
 #ifdef GL_GLEXT_PROTOTYPES
     GLAPI void APIENTRY glBeginVertexShaderEXT(void);
     GLAPI void APIENTRY glEndVertexShaderEXT(void);
-    GLAPI void APIENTRY glBindVertexShaderEXT(GLuint);
-    GLAPI GLuint APIENTRY glGenVertexShadersEXT(GLuint);
-    GLAPI void APIENTRY glDeleteVertexShaderEXT(GLuint);
-    GLAPI void APIENTRY glShaderOp1EXT(GLenum, GLuint, GLuint);
-    GLAPI void APIENTRY glShaderOp2EXT(GLenum, GLuint, GLuint, GLuint);
-    GLAPI void APIENTRY glShaderOp3EXT(GLenum, GLuint, GLuint, GLuint, GLuint);
-    GLAPI void APIENTRY glSwizzleEXT(GLuint, GLuint, GLenum, GLenum, GLenum, GLenum);
-    GLAPI void APIENTRY glWriteMaskEXT(GLuint, GLuint, GLenum, GLenum, GLenum, GLenum);
-    GLAPI void APIENTRY glInsertComponentEXT(GLuint, GLuint, GLuint);
-    GLAPI void APIENTRY glExtractComponentEXT(GLuint, GLuint, GLuint);
-    GLAPI GLuint APIENTRY glGenSymbolsEXT(GLenum, GLenum, GLenum, GLuint);
-    GLAPI void APIENTRY glSetInvariantEXT(GLuint, GLenum, const GLvoid *);
-    GLAPI void APIENTRY glSetLocalConstantEXT(GLuint, GLenum, const GLvoid *);
-    GLAPI void APIENTRY glVariantbvEXT(GLuint, const GLbyte *);
-    GLAPI void APIENTRY glVariantsvEXT(GLuint, const GLshort *);
-    GLAPI void APIENTRY glVariantivEXT(GLuint, const GLint *);
-    GLAPI void APIENTRY glVariantfvEXT(GLuint, const GLfloat *);
-    GLAPI void APIENTRY glVariantdvEXT(GLuint, const GLdouble *);
-    GLAPI void APIENTRY glVariantubvEXT(GLuint, const GLubyte *);
-    GLAPI void APIENTRY glVariantusvEXT(GLuint, const GLushort *);
-    GLAPI void APIENTRY glVariantuivEXT(GLuint, const GLuint *);
-    GLAPI void APIENTRY glVariantPointerEXT(GLuint, GLenum, GLuint, const GLvoid *);
-    GLAPI void APIENTRY glEnableVariantClientStateEXT(GLuint);
-    GLAPI void APIENTRY glDisableVariantClientStateEXT(GLuint);
-    GLAPI GLuint APIENTRY glBindLightParameterEXT(GLenum, GLenum);
-    GLAPI GLuint APIENTRY glBindMaterialParameterEXT(GLenum, GLenum);
-    GLAPI GLuint APIENTRY glBindTexGenParameterEXT(GLenum, GLenum, GLenum);
-    GLAPI GLuint APIENTRY glBindTextureUnitParameterEXT(GLenum, GLenum);
-    GLAPI GLuint APIENTRY glBindParameterEXT(GLenum);
-    GLAPI GLboolean APIENTRY glIsVariantEnabledEXT(GLuint, GLenum);
-    GLAPI void APIENTRY glGetVariantBooleanvEXT(GLuint, GLenum, GLboolean *);
-    GLAPI void APIENTRY glGetVariantIntegervEXT(GLuint, GLenum, GLint *);
-    GLAPI void APIENTRY glGetVariantFloatvEXT(GLuint, GLenum, GLfloat *);
-    GLAPI void APIENTRY glGetVariantPointervEXT(GLuint, GLenum, GLvoid* *);
-    GLAPI void APIENTRY glGetInvariantBooleanvEXT(GLuint, GLenum, GLboolean *);
-    GLAPI void APIENTRY glGetInvariantIntegervEXT(GLuint, GLenum, GLint *);
-    GLAPI void APIENTRY glGetInvariantFloatvEXT(GLuint, GLenum, GLfloat *);
-    GLAPI void APIENTRY glGetLocalConstantBooleanvEXT(GLuint, GLenum, GLboolean *);
-    GLAPI void APIENTRY glGetLocalConstantIntegervEXT(GLuint, GLenum, GLint *);
-    GLAPI void APIENTRY glGetLocalConstantFloatvEXT(GLuint, GLenum, GLfloat *);
+    GLAPI void APIENTRY glBindVertexShaderEXT(GLuint id);
+    GLAPI GLuint APIENTRY glGenVertexShadersEXT(GLuint range);
+    GLAPI void APIENTRY glDeleteVertexShaderEXT(GLuint id);
+    GLAPI void APIENTRY glShaderOp1EXT(GLenum op, GLuint res, GLuint arg1);
+    GLAPI void APIENTRY glShaderOp2EXT(GLenum op, GLuint res, GLuint arg1, GLuint arg2);
+    GLAPI void APIENTRY glShaderOp3EXT(GLenum op, GLuint res, GLuint arg1, GLuint arg2, GLuint arg3);
+    GLAPI void APIENTRY glSwizzleEXT(GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW);
+    GLAPI void APIENTRY glWriteMaskEXT(GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW);
+    GLAPI void APIENTRY glInsertComponentEXT(GLuint res, GLuint src, GLuint num);
+    GLAPI void APIENTRY glExtractComponentEXT(GLuint res, GLuint src, GLuint num);
+    GLAPI GLuint APIENTRY glGenSymbolsEXT(GLenum datatype, GLenum storagetype, GLenum range, GLuint components);
+    GLAPI void APIENTRY glSetInvariantEXT(GLuint id, GLenum type, const GLvoid *addr);
+    GLAPI void APIENTRY glSetLocalConstantEXT(GLuint id, GLenum type, const GLvoid *addr);
+    GLAPI void APIENTRY glVariantbvEXT(GLuint id, const GLbyte *addr);
+    GLAPI void APIENTRY glVariantsvEXT(GLuint id, const GLshort *addr);
+    GLAPI void APIENTRY glVariantivEXT(GLuint id, const GLint *addr);
+    GLAPI void APIENTRY glVariantfvEXT(GLuint id, const GLfloat *addr);
+    GLAPI void APIENTRY glVariantdvEXT(GLuint id, const GLdouble *addr);
+    GLAPI void APIENTRY glVariantubvEXT(GLuint id, const GLubyte *addr);
+    GLAPI void APIENTRY glVariantusvEXT(GLuint id, const GLushort *addr);
+    GLAPI void APIENTRY glVariantuivEXT(GLuint id, const GLuint *addr);
+    GLAPI void APIENTRY glVariantPointerEXT(GLuint id, GLenum type, GLuint stride, const GLvoid *addr);
+    GLAPI void APIENTRY glEnableVariantClientStateEXT(GLuint id);
+    GLAPI void APIENTRY glDisableVariantClientStateEXT(GLuint id);
+    GLAPI GLuint APIENTRY glBindLightParameterEXT(GLenum light, GLenum value);
+    GLAPI GLuint APIENTRY glBindMaterialParameterEXT(GLenum face, GLenum value);
+    GLAPI GLuint APIENTRY glBindTexGenParameterEXT(GLenum unit, GLenum coord, GLenum value);
+    GLAPI GLuint APIENTRY glBindTextureUnitParameterEXT(GLenum unit, GLenum value);
+    GLAPI GLuint APIENTRY glBindParameterEXT(GLenum value);
+    GLAPI GLboolean APIENTRY glIsVariantEnabledEXT(GLuint id, GLenum cap);
+    GLAPI void APIENTRY glGetVariantBooleanvEXT(GLuint id, GLenum value, GLboolean *data);
+    GLAPI void APIENTRY glGetVariantIntegervEXT(GLuint id, GLenum value, GLint *data);
+    GLAPI void APIENTRY glGetVariantFloatvEXT(GLuint id, GLenum value, GLfloat *data);
+    GLAPI void APIENTRY glGetVariantPointervEXT(GLuint id, GLenum value, GLvoid* *data);
+    GLAPI void APIENTRY glGetInvariantBooleanvEXT(GLuint id, GLenum value, GLboolean *data);
+    GLAPI void APIENTRY glGetInvariantIntegervEXT(GLuint id, GLenum value, GLint *data);
+    GLAPI void APIENTRY glGetInvariantFloatvEXT(GLuint id, GLenum value, GLfloat *data);
+    GLAPI void APIENTRY glGetLocalConstantBooleanvEXT(GLuint id, GLenum value, GLboolean *data);
+    GLAPI void APIENTRY glGetLocalConstantIntegervEXT(GLuint id, GLenum value, GLint *data);
+    GLAPI void APIENTRY glGetLocalConstantFloatvEXT(GLuint id, GLenum value, GLfloat *data);
 #endif /* GL_GLEXT_PROTOTYPES */
     typedef void (APIENTRYP PFNGLBEGINVERTEXSHADEREXTPROC)(void);
     typedef void (APIENTRYP PFNGLENDVERTEXSHADEREXTPROC)(void);
@@ -5424,51 +9626,51 @@
 #ifndef GL_ATI_vertex_streams
 #define GL_ATI_vertex_streams 1
 #ifdef GL_GLEXT_PROTOTYPES
-    GLAPI void APIENTRY glVertexStream1sATI(GLenum, GLshort);
-    GLAPI void APIENTRY glVertexStream1svATI(GLenum, const GLshort *);
-    GLAPI void APIENTRY glVertexStream1iATI(GLenum, GLint);
-    GLAPI void APIENTRY glVertexStream1ivATI(GLenum, const GLint *);
-    GLAPI void APIENTRY glVertexStream1fATI(GLenum, GLfloat);
-    GLAPI void APIENTRY glVertexStream1fvATI(GLenum, const GLfloat *);
-    GLAPI void APIENTRY glVertexStream1dATI(GLenum, GLdouble);
-    GLAPI void APIENTRY glVertexStream1dvATI(GLenum, const GLdouble *);
-    GLAPI void APIENTRY glVertexStream2sATI(GLenum, GLshort, GLshort);
-    GLAPI void APIENTRY glVertexStream2svATI(GLenum, const GLshort *);
-    GLAPI void APIENTRY glVertexStream2iATI(GLenum, GLint, GLint);
-    GLAPI void APIENTRY glVertexStream2ivATI(GLenum, const GLint *);
-    GLAPI void APIENTRY glVertexStream2fATI(GLenum, GLfloat, GLfloat);
-    GLAPI void APIENTRY glVertexStream2fvATI(GLenum, const GLfloat *);
-    GLAPI void APIENTRY glVertexStream2dATI(GLenum, GLdouble, GLdouble);
-    GLAPI void APIENTRY glVertexStream2dvATI(GLenum, const GLdouble *);
-    GLAPI void APIENTRY glVertexStream3sATI(GLenum, GLshort, GLshort, GLshort);
-    GLAPI void APIENTRY glVertexStream3svATI(GLenum, const GLshort *);
-    GLAPI void APIENTRY glVertexStream3iATI(GLenum, GLint, GLint, GLint);
-    GLAPI void APIENTRY glVertexStream3ivATI(GLenum, const GLint *);
-    GLAPI void APIENTRY glVertexStream3fATI(GLenum, GLfloat, GLfloat, GLfloat);
-    GLAPI void APIENTRY glVertexStream3fvATI(GLenum, const GLfloat *);
-    GLAPI void APIENTRY glVertexStream3dATI(GLenum, GLdouble, GLdouble, GLdouble);
-    GLAPI void APIENTRY glVertexStream3dvATI(GLenum, const GLdouble *);
-    GLAPI void APIENTRY glVertexStream4sATI(GLenum, GLshort, GLshort, GLshort, GLshort);
-    GLAPI void APIENTRY glVertexStream4svATI(GLenum, const GLshort *);
-    GLAPI void APIENTRY glVertexStream4iATI(GLenum, GLint, GLint, GLint, GLint);
-    GLAPI void APIENTRY glVertexStream4ivATI(GLenum, const GLint *);
-    GLAPI void APIENTRY glVertexStream4fATI(GLenum, GLfloat, GLfloat, GLfloat, GLfloat);
-    GLAPI void APIENTRY glVertexStream4fvATI(GLenum, const GLfloat *);
-    GLAPI void APIENTRY glVertexStream4dATI(GLenum, GLdouble, GLdouble, GLdouble, GLdouble);
-    GLAPI void APIENTRY glVertexStream4dvATI(GLenum, const GLdouble *);
-    GLAPI void APIENTRY glNormalStream3bATI(GLenum, GLbyte, GLbyte, GLbyte);
-    GLAPI void APIENTRY glNormalStream3bvATI(GLenum, const GLbyte *);
-    GLAPI void APIENTRY glNormalStream3sATI(GLenum, GLshort, GLshort, GLshort);
-    GLAPI void APIENTRY glNormalStream3svATI(GLenum, const GLshort *);
-    GLAPI void APIENTRY glNormalStream3iATI(GLenum, GLint, GLint, GLint);
-    GLAPI void APIENTRY glNormalStream3ivATI(GLenum, const GLint *);
-    GLAPI void APIENTRY glNormalStream3fATI(GLenum, GLfloat, GLfloat, GLfloat);
-    GLAPI void APIENTRY glNormalStream3fvATI(GLenum, const GLfloat *);
-    GLAPI void APIENTRY glNormalStream3dATI(GLenum, GLdouble, GLdouble, GLdouble);
-    GLAPI void APIENTRY glNormalStream3dvATI(GLenum, const GLdouble *);
-    GLAPI void APIENTRY glClientActiveVertexStreamATI(GLenum);
-    GLAPI void APIENTRY glVertexBlendEnviATI(GLenum, GLint);
-    GLAPI void APIENTRY glVertexBlendEnvfATI(GLenum, GLfloat);
+    GLAPI void APIENTRY glVertexStream1sATI(GLenum stream, GLshort x);
+    GLAPI void APIENTRY glVertexStream1svATI(GLenum stream, const GLshort *coords);
+    GLAPI void APIENTRY glVertexStream1iATI(GLenum stream, GLint x);
+    GLAPI void APIENTRY glVertexStream1ivATI(GLenum stream, const GLint *coords);
+    GLAPI void APIENTRY glVertexStream1fATI(GLenum stream, GLfloat x);
+    GLAPI void APIENTRY glVertexStream1fvATI(GLenum stream, const GLfloat *coords);
+    GLAPI void APIENTRY glVertexStream1dATI(GLenum stream, GLdouble x);
+    GLAPI void APIENTRY glVertexStream1dvATI(GLenum stream, const GLdouble *coords);
+    GLAPI void APIENTRY glVertexStream2sATI(GLenum stream, GLshort x, GLshort y);
+    GLAPI void APIENTRY glVertexStream2svATI(GLenum stream, const GLshort *coords);
+    GLAPI void APIENTRY glVertexStream2iATI(GLenum stream, GLint x, GLint y);
+    GLAPI void APIENTRY glVertexStream2ivATI(GLenum stream, const GLint *coords);
+    GLAPI void APIENTRY glVertexStream2fATI(GLenum stream, GLfloat x, GLfloat y);
+    GLAPI void APIENTRY glVertexStream2fvATI(GLenum stream, const GLfloat *coords);
+    GLAPI void APIENTRY glVertexStream2dATI(GLenum stream, GLdouble x, GLdouble y);
+    GLAPI void APIENTRY glVertexStream2dvATI(GLenum stream, const GLdouble *coords);
+    GLAPI void APIENTRY glVertexStream3sATI(GLenum stream, GLshort x, GLshort y, GLshort z);
+    GLAPI void APIENTRY glVertexStream3svATI(GLenum stream, const GLshort *coords);
+    GLAPI void APIENTRY glVertexStream3iATI(GLenum stream, GLint x, GLint y, GLint z);
+    GLAPI void APIENTRY glVertexStream3ivATI(GLenum stream, const GLint *coords);
+    GLAPI void APIENTRY glVertexStream3fATI(GLenum stream, GLfloat x, GLfloat y, GLfloat z);
+    GLAPI void APIENTRY glVertexStream3fvATI(GLenum stream, const GLfloat *coords);
+    GLAPI void APIENTRY glVertexStream3dATI(GLenum stream, GLdouble x, GLdouble y, GLdouble z);
+    GLAPI void APIENTRY glVertexStream3dvATI(GLenum stream, const GLdouble *coords);
+    GLAPI void APIENTRY glVertexStream4sATI(GLenum stream, GLshort x, GLshort y, GLshort z, GLshort w);
+    GLAPI void APIENTRY glVertexStream4svATI(GLenum stream, const GLshort *coords);
+    GLAPI void APIENTRY glVertexStream4iATI(GLenum stream, GLint x, GLint y, GLint z, GLint w);
+    GLAPI void APIENTRY glVertexStream4ivATI(GLenum stream, const GLint *coords);
+    GLAPI void APIENTRY glVertexStream4fATI(GLenum stream, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
+    GLAPI void APIENTRY glVertexStream4fvATI(GLenum stream, const GLfloat *coords);
+    GLAPI void APIENTRY glVertexStream4dATI(GLenum stream, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
+    GLAPI void APIENTRY glVertexStream4dvATI(GLenum stream, const GLdouble *coords);
+    GLAPI void APIENTRY glNormalStream3bATI(GLenum stream, GLbyte nx, GLbyte ny, GLbyte nz);
+    GLAPI void APIENTRY glNormalStream3bvATI(GLenum stream, const GLbyte *coords);
+    GLAPI void APIENTRY glNormalStream3sATI(GLenum stream, GLshort nx, GLshort ny, GLshort nz);
+    GLAPI void APIENTRY glNormalStream3svATI(GLenum stream, const GLshort *coords);
+    GLAPI void APIENTRY glNormalStream3iATI(GLenum stream, GLint nx, GLint ny, GLint nz);
+    GLAPI void APIENTRY glNormalStream3ivATI(GLenum stream, const GLint *coords);
+    GLAPI void APIENTRY glNormalStream3fATI(GLenum stream, GLfloat nx, GLfloat ny, GLfloat nz);
+    GLAPI void APIENTRY glNormalStream3fvATI(GLenum stream, const GLfloat *coords);
+    GLAPI void APIENTRY glNormalStream3dATI(GLenum stream, GLdouble nx, GLdouble ny, GLdouble nz);
+    GLAPI void APIENTRY glNormalStream3dvATI(GLenum stream, const GLdouble *coords);
+    GLAPI void APIENTRY glClientActiveVertexStreamATI(GLenum stream);
+    GLAPI void APIENTRY glVertexBlendEnviATI(GLenum pname, GLint param);
+    GLAPI void APIENTRY glVertexBlendEnvfATI(GLenum pname, GLfloat param);
 #endif /* GL_GLEXT_PROTOTYPES */
     typedef void (APIENTRYP PFNGLVERTEXSTREAM1SATIPROC)(GLenum stream, GLshort x);
     typedef void (APIENTRYP PFNGLVERTEXSTREAM1SVATIPROC)(GLenum stream, const GLshort *coords);
@@ -5520,9 +9722,9 @@
 #ifndef GL_ATI_element_array
 #define GL_ATI_element_array 1
 #ifdef GL_GLEXT_PROTOTYPES
-    GLAPI void APIENTRY glElementPointerATI(GLenum, const GLvoid *);
-    GLAPI void APIENTRY glDrawElementArrayATI(GLenum, GLsizei);
-    GLAPI void APIENTRY glDrawRangeElementArrayATI(GLenum, GLuint, GLuint, GLsizei);
+    GLAPI void APIENTRY glElementPointerATI(GLenum type, const GLvoid *pointer);
+    GLAPI void APIENTRY glDrawElementArrayATI(GLenum mode, GLsizei count);
+    GLAPI void APIENTRY glDrawRangeElementArrayATI(GLenum mode, GLuint start, GLuint end, GLsizei count);
 #endif /* GL_GLEXT_PROTOTYPES */
     typedef void (APIENTRYP PFNGLELEMENTPOINTERATIPROC)(GLenum type, const GLvoid *pointer);
     typedef void (APIENTRYP PFNGLDRAWELEMENTARRAYATIPROC)(GLenum mode, GLsizei count);
@@ -5532,7 +9734,7 @@
 #ifndef GL_SUN_mesh_array
 #define GL_SUN_mesh_array 1
 #ifdef GL_GLEXT_PROTOTYPES
-    GLAPI void APIENTRY glDrawMeshArraysSUN(GLenum, GLint, GLsizei, GLsizei);
+    GLAPI void APIENTRY glDrawMeshArraysSUN(GLenum mode, GLint first, GLsizei count, GLsizei width);
 #endif /* GL_GLEXT_PROTOTYPES */
     typedef void (APIENTRYP PFNGLDRAWMESHARRAYSSUNPROC)(GLenum mode, GLint first, GLsizei count, GLsizei width);
 #endif
@@ -5552,13 +9754,13 @@
 #ifndef GL_NV_occlusion_query
 #define GL_NV_occlusion_query 1
 #ifdef GL_GLEXT_PROTOTYPES
-    GLAPI void APIENTRY glGenOcclusionQueriesNV(GLsizei, GLuint *);
-    GLAPI void APIENTRY glDeleteOcclusionQueriesNV(GLsizei, const GLuint *);
-    GLAPI GLboolean APIENTRY glIsOcclusionQueryNV(GLuint);
-    GLAPI void APIENTRY glBeginOcclusionQueryNV(GLuint);
+    GLAPI void APIENTRY glGenOcclusionQueriesNV(GLsizei n, GLuint *ids);
+    GLAPI void APIENTRY glDeleteOcclusionQueriesNV(GLsizei n, const GLuint *ids);
+    GLAPI GLboolean APIENTRY glIsOcclusionQueryNV(GLuint id);
+    GLAPI void APIENTRY glBeginOcclusionQueryNV(GLuint id);
     GLAPI void APIENTRY glEndOcclusionQueryNV(void);
-    GLAPI void APIENTRY glGetOcclusionQueryivNV(GLuint, GLenum, GLint *);
-    GLAPI void APIENTRY glGetOcclusionQueryuivNV(GLuint, GLenum, GLuint *);
+    GLAPI void APIENTRY glGetOcclusionQueryivNV(GLuint id, GLenum pname, GLint *params);
+    GLAPI void APIENTRY glGetOcclusionQueryuivNV(GLuint id, GLenum pname, GLuint *params);
 #endif /* GL_GLEXT_PROTOTYPES */
     typedef void (APIENTRYP PFNGLGENOCCLUSIONQUERIESNVPROC)(GLsizei n, GLuint *ids);
     typedef void (APIENTRYP PFNGLDELETEOCCLUSIONQUERIESNVPROC)(GLsizei n, const GLuint *ids);
@@ -5572,8 +9774,8 @@
 #ifndef GL_NV_point_sprite
 #define GL_NV_point_sprite 1
 #ifdef GL_GLEXT_PROTOTYPES
-    GLAPI void APIENTRY glPointParameteriNV(GLenum, GLint);
-    GLAPI void APIENTRY glPointParameterivNV(GLenum, const GLint *);
+    GLAPI void APIENTRY glPointParameteriNV(GLenum pname, GLint param);
+    GLAPI void APIENTRY glPointParameterivNV(GLenum pname, const GLint *params);
 #endif /* GL_GLEXT_PROTOTYPES */
     typedef void (APIENTRYP PFNGLPOINTPARAMETERINVPROC)(GLenum pname, GLint param);
     typedef void (APIENTRYP PFNGLPOINTPARAMETERIVNVPROC)(GLenum pname, const GLint *params);
@@ -5594,7 +9796,7 @@
 #ifndef GL_EXT_stencil_two_side
 #define GL_EXT_stencil_two_side 1
 #ifdef GL_GLEXT_PROTOTYPES
-    GLAPI void APIENTRY glActiveStencilFaceEXT(GLenum);
+    GLAPI void APIENTRY glActiveStencilFaceEXT(GLenum face);
 #endif /* GL_GLEXT_PROTOTYPES */
     typedef void (APIENTRYP PFNGLACTIVESTENCILFACEEXTPROC)(GLenum face);
 #endif
@@ -5610,11 +9812,11 @@
 #ifndef GL_APPLE_element_array
 #define GL_APPLE_element_array 1
 #ifdef GL_GLEXT_PROTOTYPES
-    GLAPI void APIENTRY glElementPointerAPPLE(GLenum, const GLvoid *);
-    GLAPI void APIENTRY glDrawElementArrayAPPLE(GLenum, GLint, GLsizei);
-    GLAPI void APIENTRY glDrawRangeElementArrayAPPLE(GLenum, GLuint, GLuint, GLint, GLsizei);
-    GLAPI void APIENTRY glMultiDrawElementArrayAPPLE(GLenum, const GLint *, const GLsizei *, GLsizei);
-    GLAPI void APIENTRY glMultiDrawRangeElementArrayAPPLE(GLenum, GLuint, GLuint, const GLint *, const GLsizei *, GLsizei);
+    GLAPI void APIENTRY glElementPointerAPPLE(GLenum type, const GLvoid *pointer);
+    GLAPI void APIENTRY glDrawElementArrayAPPLE(GLenum mode, GLint first, GLsizei count);
+    GLAPI void APIENTRY glDrawRangeElementArrayAPPLE(GLenum mode, GLuint start, GLuint end, GLint first, GLsizei count);
+    GLAPI void APIENTRY glMultiDrawElementArrayAPPLE(GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount);
+    GLAPI void APIENTRY glMultiDrawRangeElementArrayAPPLE(GLenum mode, GLuint start, GLuint end, const GLint *first, const GLsizei *count, GLsizei primcount);
 #endif /* GL_GLEXT_PROTOTYPES */
     typedef void (APIENTRYP PFNGLELEMENTPOINTERAPPLEPROC)(GLenum type, const GLvoid *pointer);
     typedef void (APIENTRYP PFNGLDRAWELEMENTARRAYAPPLEPROC)(GLenum mode, GLint first, GLsizei count);
@@ -5626,14 +9828,14 @@
 #ifndef GL_APPLE_fence
 #define GL_APPLE_fence 1
 #ifdef GL_GLEXT_PROTOTYPES
-    GLAPI void APIENTRY glGenFencesAPPLE(GLsizei, GLuint *);
-    GLAPI void APIENTRY glDeleteFencesAPPLE(GLsizei, const GLuint *);
-    GLAPI void APIENTRY glSetFenceAPPLE(GLuint);
-    GLAPI GLboolean APIENTRY glIsFenceAPPLE(GLuint);
-    GLAPI GLboolean APIENTRY glTestFenceAPPLE(GLuint);
-    GLAPI void APIENTRY glFinishFenceAPPLE(GLuint);
-    GLAPI GLboolean APIENTRY glTestObjectAPPLE(GLenum, GLuint);
-    GLAPI void APIENTRY glFinishObjectAPPLE(GLenum, GLint);
+    GLAPI void APIENTRY glGenFencesAPPLE(GLsizei n, GLuint *fences);
+    GLAPI void APIENTRY glDeleteFencesAPPLE(GLsizei n, const GLuint *fences);
+    GLAPI void APIENTRY glSetFenceAPPLE(GLuint fence);
+    GLAPI GLboolean APIENTRY glIsFenceAPPLE(GLuint fence);
+    GLAPI GLboolean APIENTRY glTestFenceAPPLE(GLuint fence);
+    GLAPI void APIENTRY glFinishFenceAPPLE(GLuint fence);
+    GLAPI GLboolean APIENTRY glTestObjectAPPLE(GLenum object, GLuint name);
+    GLAPI void APIENTRY glFinishObjectAPPLE(GLenum object, GLint name);
 #endif /* GL_GLEXT_PROTOTYPES */
     typedef void (APIENTRYP PFNGLGENFENCESAPPLEPROC)(GLsizei n, GLuint *fences);
     typedef void (APIENTRYP PFNGLDELETEFENCESAPPLEPROC)(GLsizei n, const GLuint *fences);
@@ -5648,23 +9850,23 @@
 #ifndef GL_APPLE_vertex_array_object
 #define GL_APPLE_vertex_array_object 1
 #ifdef GL_GLEXT_PROTOTYPES
-    GLAPI void APIENTRY glBindVertexArrayAPPLE(GLuint);
-    GLAPI void APIENTRY glDeleteVertexArraysAPPLE(GLsizei, const GLuint *);
-    GLAPI void APIENTRY glGenVertexArraysAPPLE(GLsizei, const GLuint *);
-    GLAPI GLboolean APIENTRY glIsVertexArrayAPPLE(GLuint);
+    GLAPI void APIENTRY glBindVertexArrayAPPLE(GLuint array);
+    GLAPI void APIENTRY glDeleteVertexArraysAPPLE(GLsizei n, const GLuint *arrays);
+    GLAPI void APIENTRY glGenVertexArraysAPPLE(GLsizei n, GLuint *arrays);
+    GLAPI GLboolean APIENTRY glIsVertexArrayAPPLE(GLuint array);
 #endif /* GL_GLEXT_PROTOTYPES */
     typedef void (APIENTRYP PFNGLBINDVERTEXARRAYAPPLEPROC)(GLuint array);
     typedef void (APIENTRYP PFNGLDELETEVERTEXARRAYSAPPLEPROC)(GLsizei n, const GLuint *arrays);
-    typedef void (APIENTRYP PFNGLGENVERTEXARRAYSAPPLEPROC)(GLsizei n, const GLuint *arrays);
+    typedef void (APIENTRYP PFNGLGENVERTEXARRAYSAPPLEPROC)(GLsizei n, GLuint *arrays);
     typedef GLboolean(APIENTRYP PFNGLISVERTEXARRAYAPPLEPROC)(GLuint array);
 #endif
 
 #ifndef GL_APPLE_vertex_array_range
 #define GL_APPLE_vertex_array_range 1
 #ifdef GL_GLEXT_PROTOTYPES
-    GLAPI void APIENTRY glVertexArrayRangeAPPLE(GLsizei, GLvoid *);
-    GLAPI void APIENTRY glFlushVertexArrayRangeAPPLE(GLsizei, GLvoid *);
-    GLAPI void APIENTRY glVertexArrayParameteriAPPLE(GLenum, GLint);
+    GLAPI void APIENTRY glVertexArrayRangeAPPLE(GLsizei length, GLvoid *pointer);
+    GLAPI void APIENTRY glFlushVertexArrayRangeAPPLE(GLsizei length, GLvoid *pointer);
+    GLAPI void APIENTRY glVertexArrayParameteriAPPLE(GLenum pname, GLint param);
 #endif /* GL_GLEXT_PROTOTYPES */
     typedef void (APIENTRYP PFNGLVERTEXARRAYRANGEAPPLEPROC)(GLsizei length, GLvoid *pointer);
     typedef void (APIENTRYP PFNGLFLUSHVERTEXARRAYRANGEAPPLEPROC)(GLsizei length, GLvoid *pointer);
@@ -5682,11 +9884,18 @@
 #ifndef GL_ATI_draw_buffers
 #define GL_ATI_draw_buffers 1
 #ifdef GL_GLEXT_PROTOTYPES
-    GLAPI void APIENTRY glDrawBuffersATI(GLsizei, const GLenum *);
+    GLAPI void APIENTRY glDrawBuffersATI(GLsizei n, const GLenum *bufs);
 #endif /* GL_GLEXT_PROTOTYPES */
     typedef void (APIENTRYP PFNGLDRAWBUFFERSATIPROC)(GLsizei n, const GLenum *bufs);
 #endif
 
+#ifndef GL_ATI_pixel_format_float
+#define GL_ATI_pixel_format_float 1
+    /* This is really a WGL extension, but defines some associated GL enums.
+     * ATI does not export "GL_ATI_pixel_format_float" in the GL_EXTENSIONS string.
+     */
+#endif
+
 #ifndef GL_ATI_texture_env_combine3
 #define GL_ATI_texture_env_combine3 1
 #endif
@@ -5703,12 +9912,12 @@
 #define GL_NV_fragment_program 1
     /* Some NV_fragment_program entry points are shared with ARB_vertex_program. */
 #ifdef GL_GLEXT_PROTOTYPES
-    GLAPI void APIENTRY glProgramNamedParameter4fNV(GLuint, GLsizei, const GLubyte *, GLfloat, GLfloat, GLfloat, GLfloat);
-    GLAPI void APIENTRY glProgramNamedParameter4dNV(GLuint, GLsizei, const GLubyte *, GLdouble, GLdouble, GLdouble, GLdouble);
-    GLAPI void APIENTRY glProgramNamedParameter4fvNV(GLuint, GLsizei, const GLubyte *, const GLfloat *);
-    GLAPI void APIENTRY glProgramNamedParameter4dvNV(GLuint, GLsizei, const GLubyte *, const GLdouble *);
-    GLAPI void APIENTRY glGetProgramNamedParameterfvNV(GLuint, GLsizei, const GLubyte *, GLfloat *);
-    GLAPI void APIENTRY glGetProgramNamedParameterdvNV(GLuint, GLsizei, const GLubyte *, GLdouble *);
+    GLAPI void APIENTRY glProgramNamedParameter4fNV(GLuint id, GLsizei len, const GLubyte *name, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
+    GLAPI void APIENTRY glProgramNamedParameter4dNV(GLuint id, GLsizei len, const GLubyte *name, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
+    GLAPI void APIENTRY glProgramNamedParameter4fvNV(GLuint id, GLsizei len, const GLubyte *name, const GLfloat *v);
+    GLAPI void APIENTRY glProgramNamedParameter4dvNV(GLuint id, GLsizei len, const GLubyte *name, const GLdouble *v);
+    GLAPI void APIENTRY glGetProgramNamedParameterfvNV(GLuint id, GLsizei len, const GLubyte *name, GLfloat *params);
+    GLAPI void APIENTRY glGetProgramNamedParameterdvNV(GLuint id, GLsizei len, const GLubyte *name, GLdouble *params);
 #endif /* GL_GLEXT_PROTOTYPES */
     typedef void (APIENTRYP PFNGLPROGRAMNAMEDPARAMETER4FNVPROC)(GLuint id, GLsizei len, const GLubyte *name, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
     typedef void (APIENTRYP PFNGLPROGRAMNAMEDPARAMETER4DNVPROC)(GLuint id, GLsizei len, const GLubyte *name, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
@@ -5721,52 +9930,52 @@
 #ifndef GL_NV_half_float
 #define GL_NV_half_float 1
 #ifdef GL_GLEXT_PROTOTYPES
-    GLAPI void APIENTRY glVertex2hNV(GLhalfNV, GLhalfNV);
-    GLAPI void APIENTRY glVertex2hvNV(const GLhalfNV *);
-    GLAPI void APIENTRY glVertex3hNV(GLhalfNV, GLhalfNV, GLhalfNV);
-    GLAPI void APIENTRY glVertex3hvNV(const GLhalfNV *);
-    GLAPI void APIENTRY glVertex4hNV(GLhalfNV, GLhalfNV, GLhalfNV, GLhalfNV);
-    GLAPI void APIENTRY glVertex4hvNV(const GLhalfNV *);
-    GLAPI void APIENTRY glNormal3hNV(GLhalfNV, GLhalfNV, GLhalfNV);
-    GLAPI void APIENTRY glNormal3hvNV(const GLhalfNV *);
-    GLAPI void APIENTRY glColor3hNV(GLhalfNV, GLhalfNV, GLhalfNV);
-    GLAPI void APIENTRY glColor3hvNV(const GLhalfNV *);
-    GLAPI void APIENTRY glColor4hNV(GLhalfNV, GLhalfNV, GLhalfNV, GLhalfNV);
-    GLAPI void APIENTRY glColor4hvNV(const GLhalfNV *);
-    GLAPI void APIENTRY glTexCoord1hNV(GLhalfNV);
-    GLAPI void APIENTRY glTexCoord1hvNV(const GLhalfNV *);
-    GLAPI void APIENTRY glTexCoord2hNV(GLhalfNV, GLhalfNV);
-    GLAPI void APIENTRY glTexCoord2hvNV(const GLhalfNV *);
-    GLAPI void APIENTRY glTexCoord3hNV(GLhalfNV, GLhalfNV, GLhalfNV);
-    GLAPI void APIENTRY glTexCoord3hvNV(const GLhalfNV *);
-    GLAPI void APIENTRY glTexCoord4hNV(GLhalfNV, GLhalfNV, GLhalfNV, GLhalfNV);
-    GLAPI void APIENTRY glTexCoord4hvNV(const GLhalfNV *);
-    GLAPI void APIENTRY glMultiTexCoord1hNV(GLenum, GLhalfNV);
-    GLAPI void APIENTRY glMultiTexCoord1hvNV(GLenum, const GLhalfNV *);
-    GLAPI void APIENTRY glMultiTexCoord2hNV(GLenum, GLhalfNV, GLhalfNV);
-    GLAPI void APIENTRY glMultiTexCoord2hvNV(GLenum, const GLhalfNV *);
-    GLAPI void APIENTRY glMultiTexCoord3hNV(GLenum, GLhalfNV, GLhalfNV, GLhalfNV);
-    GLAPI void APIENTRY glMultiTexCoord3hvNV(GLenum, const GLhalfNV *);
-    GLAPI void APIENTRY glMultiTexCoord4hNV(GLenum, GLhalfNV, GLhalfNV, GLhalfNV, GLhalfNV);
-    GLAPI void APIENTRY glMultiTexCoord4hvNV(GLenum, const GLhalfNV *);
-    GLAPI void APIENTRY glFogCoordhNV(GLhalfNV);
-    GLAPI void APIENTRY glFogCoordhvNV(const GLhalfNV *);
-    GLAPI void APIENTRY glSecondaryColor3hNV(GLhalfNV, GLhalfNV, GLhalfNV);
-    GLAPI void APIENTRY glSecondaryColor3hvNV(const GLhalfNV *);
-    GLAPI void APIENTRY glVertexWeighthNV(GLhalfNV);
-    GLAPI void APIENTRY glVertexWeighthvNV(const GLhalfNV *);
-    GLAPI void APIENTRY glVertexAttrib1hNV(GLuint, GLhalfNV);
-    GLAPI void APIENTRY glVertexAttrib1hvNV(GLuint, const GLhalfNV *);
-    GLAPI void APIENTRY glVertexAttrib2hNV(GLuint, GLhalfNV, GLhalfNV);
-    GLAPI void APIENTRY glVertexAttrib2hvNV(GLuint, const GLhalfNV *);
-    GLAPI void APIENTRY glVertexAttrib3hNV(GLuint, GLhalfNV, GLhalfNV, GLhalfNV);
-    GLAPI void APIENTRY glVertexAttrib3hvNV(GLuint, const GLhalfNV *);
-    GLAPI void APIENTRY glVertexAttrib4hNV(GLuint, GLhalfNV, GLhalfNV, GLhalfNV, GLhalfNV);
-    GLAPI void APIENTRY glVertexAttrib4hvNV(GLuint, const GLhalfNV *);
-    GLAPI void APIENTRY glVertexAttribs1hvNV(GLuint, GLsizei, const GLhalfNV *);
-    GLAPI void APIENTRY glVertexAttribs2hvNV(GLuint, GLsizei, const GLhalfNV *);
-    GLAPI void APIENTRY glVertexAttribs3hvNV(GLuint, GLsizei, const GLhalfNV *);
-    GLAPI void APIENTRY glVertexAttribs4hvNV(GLuint, GLsizei, const GLhalfNV *);
+    GLAPI void APIENTRY glVertex2hNV(GLhalfNV x, GLhalfNV y);
+    GLAPI void APIENTRY glVertex2hvNV(const GLhalfNV *v);
+    GLAPI void APIENTRY glVertex3hNV(GLhalfNV x, GLhalfNV y, GLhalfNV z);
+    GLAPI void APIENTRY glVertex3hvNV(const GLhalfNV *v);
+    GLAPI void APIENTRY glVertex4hNV(GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w);
+    GLAPI void APIENTRY glVertex4hvNV(const GLhalfNV *v);
+    GLAPI void APIENTRY glNormal3hNV(GLhalfNV nx, GLhalfNV ny, GLhalfNV nz);
+    GLAPI void APIENTRY glNormal3hvNV(const GLhalfNV *v);
+    GLAPI void APIENTRY glColor3hNV(GLhalfNV red, GLhalfNV green, GLhalfNV blue);
+    GLAPI void APIENTRY glColor3hvNV(const GLhalfNV *v);
+    GLAPI void APIENTRY glColor4hNV(GLhalfNV red, GLhalfNV green, GLhalfNV blue, GLhalfNV alpha);
+    GLAPI void APIENTRY glColor4hvNV(const GLhalfNV *v);
+    GLAPI void APIENTRY glTexCoord1hNV(GLhalfNV s);
+    GLAPI void APIENTRY glTexCoord1hvNV(const GLhalfNV *v);
+    GLAPI void APIENTRY glTexCoord2hNV(GLhalfNV s, GLhalfNV t);
+    GLAPI void APIENTRY glTexCoord2hvNV(const GLhalfNV *v);
+    GLAPI void APIENTRY glTexCoord3hNV(GLhalfNV s, GLhalfNV t, GLhalfNV r);
+    GLAPI void APIENTRY glTexCoord3hvNV(const GLhalfNV *v);
+    GLAPI void APIENTRY glTexCoord4hNV(GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q);
+    GLAPI void APIENTRY glTexCoord4hvNV(const GLhalfNV *v);
+    GLAPI void APIENTRY glMultiTexCoord1hNV(GLenum target, GLhalfNV s);
+    GLAPI void APIENTRY glMultiTexCoord1hvNV(GLenum target, const GLhalfNV *v);
+    GLAPI void APIENTRY glMultiTexCoord2hNV(GLenum target, GLhalfNV s, GLhalfNV t);
+    GLAPI void APIENTRY glMultiTexCoord2hvNV(GLenum target, const GLhalfNV *v);
+    GLAPI void APIENTRY glMultiTexCoord3hNV(GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r);
+    GLAPI void APIENTRY glMultiTexCoord3hvNV(GLenum target, const GLhalfNV *v);
+    GLAPI void APIENTRY glMultiTexCoord4hNV(GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q);
+    GLAPI void APIENTRY glMultiTexCoord4hvNV(GLenum target, const GLhalfNV *v);
+    GLAPI void APIENTRY glFogCoordhNV(GLhalfNV fog);
+    GLAPI void APIENTRY glFogCoordhvNV(const GLhalfNV *fog);
+    GLAPI void APIENTRY glSecondaryColor3hNV(GLhalfNV red, GLhalfNV green, GLhalfNV blue);
+    GLAPI void APIENTRY glSecondaryColor3hvNV(const GLhalfNV *v);
+    GLAPI void APIENTRY glVertexWeighthNV(GLhalfNV weight);
+    GLAPI void APIENTRY glVertexWeighthvNV(const GLhalfNV *weight);
+    GLAPI void APIENTRY glVertexAttrib1hNV(GLuint index, GLhalfNV x);
+    GLAPI void APIENTRY glVertexAttrib1hvNV(GLuint index, const GLhalfNV *v);
+    GLAPI void APIENTRY glVertexAttrib2hNV(GLuint index, GLhalfNV x, GLhalfNV y);
+    GLAPI void APIENTRY glVertexAttrib2hvNV(GLuint index, const GLhalfNV *v);
+    GLAPI void APIENTRY glVertexAttrib3hNV(GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z);
+    GLAPI void APIENTRY glVertexAttrib3hvNV(GLuint index, const GLhalfNV *v);
+    GLAPI void APIENTRY glVertexAttrib4hNV(GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w);
+    GLAPI void APIENTRY glVertexAttrib4hvNV(GLuint index, const GLhalfNV *v);
+    GLAPI void APIENTRY glVertexAttribs1hvNV(GLuint index, GLsizei n, const GLhalfNV *v);
+    GLAPI void APIENTRY glVertexAttribs2hvNV(GLuint index, GLsizei n, const GLhalfNV *v);
+    GLAPI void APIENTRY glVertexAttribs3hvNV(GLuint index, GLsizei n, const GLhalfNV *v);
+    GLAPI void APIENTRY glVertexAttribs4hvNV(GLuint index, GLsizei n, const GLhalfNV *v);
 #endif /* GL_GLEXT_PROTOTYPES */
     typedef void (APIENTRYP PFNGLVERTEX2HNVPROC)(GLhalfNV x, GLhalfNV y);
     typedef void (APIENTRYP PFNGLVERTEX2HVNVPROC)(const GLhalfNV *v);
@@ -5819,8 +10028,8 @@
 #ifndef GL_NV_pixel_data_range
 #define GL_NV_pixel_data_range 1
 #ifdef GL_GLEXT_PROTOTYPES
-    GLAPI void APIENTRY glPixelDataRangeNV(GLenum, GLsizei, GLvoid *);
-    GLAPI void APIENTRY glFlushPixelDataRangeNV(GLenum);
+    GLAPI void APIENTRY glPixelDataRangeNV(GLenum target, GLsizei length, GLvoid *pointer);
+    GLAPI void APIENTRY glFlushPixelDataRangeNV(GLenum target);
 #endif /* GL_GLEXT_PROTOTYPES */
     typedef void (APIENTRYP PFNGLPIXELDATARANGENVPROC)(GLenum target, GLsizei length, GLvoid *pointer);
     typedef void (APIENTRYP PFNGLFLUSHPIXELDATARANGENVPROC)(GLenum target);
@@ -5830,7 +10039,7 @@
 #define GL_NV_primitive_restart 1
 #ifdef GL_GLEXT_PROTOTYPES
     GLAPI void APIENTRY glPrimitiveRestartNV(void);
-    GLAPI void APIENTRY glPrimitiveRestartIndexNV(GLuint);
+    GLAPI void APIENTRY glPrimitiveRestartIndexNV(GLuint index);
 #endif /* GL_GLEXT_PROTOTYPES */
     typedef void (APIENTRYP PFNGLPRIMITIVERESTARTNVPROC)(void);
     typedef void (APIENTRYP PFNGLPRIMITIVERESTARTINDEXNVPROC)(GLuint index);
@@ -5847,8 +10056,8 @@
 #ifndef GL_ATI_map_object_buffer
 #define GL_ATI_map_object_buffer 1
 #ifdef GL_GLEXT_PROTOTYPES
-    GLAPI GLvoid* APIENTRY glMapObjectBufferATI(GLuint);
-    GLAPI void APIENTRY glUnmapObjectBufferATI(GLuint);
+    GLAPI GLvoid* APIENTRY glMapObjectBufferATI(GLuint buffer);
+    GLAPI void APIENTRY glUnmapObjectBufferATI(GLuint buffer);
 #endif /* GL_GLEXT_PROTOTYPES */
     typedef GLvoid* (APIENTRYP PFNGLMAPOBJECTBUFFERATIPROC)(GLuint buffer);
     typedef void (APIENTRYP PFNGLUNMAPOBJECTBUFFERATIPROC)(GLuint buffer);
@@ -5857,8 +10066,8 @@
 #ifndef GL_ATI_separate_stencil
 #define GL_ATI_separate_stencil 1
 #ifdef GL_GLEXT_PROTOTYPES
-    GLAPI void APIENTRY glStencilOpSeparateATI(GLenum, GLenum, GLenum, GLenum);
-    GLAPI void APIENTRY glStencilFuncSeparateATI(GLenum, GLenum, GLint, GLuint);
+    GLAPI void APIENTRY glStencilOpSeparateATI(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass);
+    GLAPI void APIENTRY glStencilFuncSeparateATI(GLenum frontfunc, GLenum backfunc, GLint ref, GLuint mask);
 #endif /* GL_GLEXT_PROTOTYPES */
     typedef void (APIENTRYP PFNGLSTENCILOPSEPARATEATIPROC)(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass);
     typedef void (APIENTRYP PFNGLSTENCILFUNCSEPARATEATIPROC)(GLenum frontfunc, GLenum backfunc, GLint ref, GLuint mask);
@@ -5867,19 +10076,23 @@
 #ifndef GL_ATI_vertex_attrib_array_object
 #define GL_ATI_vertex_attrib_array_object 1
 #ifdef GL_GLEXT_PROTOTYPES
-    GLAPI void APIENTRY glVertexAttribArrayObjectATI(GLuint, GLint, GLenum, GLboolean, GLsizei, GLuint, GLuint);
-    GLAPI void APIENTRY glGetVertexAttribArrayObjectfvATI(GLuint, GLenum, GLfloat *);
-    GLAPI void APIENTRY glGetVertexAttribArrayObjectivATI(GLuint, GLenum, GLint *);
+    GLAPI void APIENTRY glVertexAttribArrayObjectATI(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLuint buffer, GLuint offset);
+    GLAPI void APIENTRY glGetVertexAttribArrayObjectfvATI(GLuint index, GLenum pname, GLfloat *params);
+    GLAPI void APIENTRY glGetVertexAttribArrayObjectivATI(GLuint index, GLenum pname, GLint *params);
 #endif /* GL_GLEXT_PROTOTYPES */
     typedef void (APIENTRYP PFNGLVERTEXATTRIBARRAYOBJECTATIPROC)(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLuint buffer, GLuint offset);
     typedef void (APIENTRYP PFNGLGETVERTEXATTRIBARRAYOBJECTFVATIPROC)(GLuint index, GLenum pname, GLfloat *params);
     typedef void (APIENTRYP PFNGLGETVERTEXATTRIBARRAYOBJECTIVATIPROC)(GLuint index, GLenum pname, GLint *params);
 #endif
 
+#ifndef GL_OES_read_format
+#define GL_OES_read_format 1
+#endif
+
 #ifndef GL_EXT_depth_bounds_test
 #define GL_EXT_depth_bounds_test 1
 #ifdef GL_GLEXT_PROTOTYPES
-    GLAPI void APIENTRY glDepthBoundsEXT(GLclampd, GLclampd);
+    GLAPI void APIENTRY glDepthBoundsEXT(GLclampd zmin, GLclampd zmax);
 #endif /* GL_GLEXT_PROTOTYPES */
     typedef void (APIENTRYP PFNGLDEPTHBOUNDSEXTPROC)(GLclampd zmin, GLclampd zmax);
 #endif
@@ -5891,7 +10104,7 @@
 #ifndef GL_EXT_blend_equation_separate
 #define GL_EXT_blend_equation_separate 1
 #ifdef GL_GLEXT_PROTOTYPES
-    GLAPI void APIENTRY glBlendEquationSeparateEXT(GLenum, GLenum);
+    GLAPI void APIENTRY glBlendEquationSeparateEXT(GLenum modeRGB, GLenum modeAlpha);
 #endif /* GL_GLEXT_PROTOTYPES */
     typedef void (APIENTRYP PFNGLBLENDEQUATIONSEPARATEEXTPROC)(GLenum modeRGB, GLenum modeAlpha);
 #endif
@@ -5904,14 +10117,1675 @@
 #define GL_MESA_ycbcr_texture 1
 #endif
 
-#ifndef GL_EXT_depth_bounds_test
-#define GL_EXT_depth_bounds_test 1
-#ifdef GL_GLEXT_PROTOTYPES
-    GLAPI void APIENTRY glDepthBoundsEXT(GLclampd, GLclampd);
-#endif /* GL_GLEXT_PROTOTYPES */
-    typedef void (APIENTRY * PFNGLDEPTHBOUNDSEXTPROC)(GLclampd zmin, GLclampd zmax);
+#ifndef GL_EXT_pixel_buffer_object
+#define GL_EXT_pixel_buffer_object 1
 #endif
 
+#ifndef GL_NV_fragment_program_option
+#define GL_NV_fragment_program_option 1
+#endif
+
+#ifndef GL_NV_fragment_program2
+#define GL_NV_fragment_program2 1
+#endif
+
+#ifndef GL_NV_vertex_program2_option
+#define GL_NV_vertex_program2_option 1
+#endif
+
+#ifndef GL_NV_vertex_program3
+#define GL_NV_vertex_program3 1
+#endif
+
+#ifndef GL_EXT_framebuffer_object
+#define GL_EXT_framebuffer_object 1
+#ifdef GL_GLEXT_PROTOTYPES
+    GLAPI GLboolean APIENTRY glIsRenderbufferEXT(GLuint renderbuffer);
+    GLAPI void APIENTRY glBindRenderbufferEXT(GLenum target, GLuint renderbuffer);
+    GLAPI void APIENTRY glDeleteRenderbuffersEXT(GLsizei n, const GLuint *renderbuffers);
+    GLAPI void APIENTRY glGenRenderbuffersEXT(GLsizei n, GLuint *renderbuffers);
+    GLAPI void APIENTRY glRenderbufferStorageEXT(GLenum target, GLenum internalformat, GLsizei width, GLsizei height);
+    GLAPI void APIENTRY glGetRenderbufferParameterivEXT(GLenum target, GLenum pname, GLint *params);
+    GLAPI GLboolean APIENTRY glIsFramebufferEXT(GLuint framebuffer);
+    GLAPI void APIENTRY glBindFramebufferEXT(GLenum target, GLuint framebuffer);
+    GLAPI void APIENTRY glDeleteFramebuffersEXT(GLsizei n, const GLuint *framebuffers);
+    GLAPI void APIENTRY glGenFramebuffersEXT(GLsizei n, GLuint *framebuffers);
+    GLAPI GLenum APIENTRY glCheckFramebufferStatusEXT(GLenum target);
+    GLAPI void APIENTRY glFramebufferTexture1DEXT(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
+    GLAPI void APIENTRY glFramebufferTexture2DEXT(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
+    GLAPI void APIENTRY glFramebufferTexture3DEXT(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);
+    GLAPI void APIENTRY glFramebufferRenderbufferEXT(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
+    GLAPI void APIENTRY glGetFramebufferAttachmentParameterivEXT(GLenum target, GLenum attachment, GLenum pname, GLint *params);
+    GLAPI void APIENTRY glGenerateMipmapEXT(GLenum target);
+#endif /* GL_GLEXT_PROTOTYPES */
+    typedef GLboolean(APIENTRYP PFNGLISRENDERBUFFEREXTPROC)(GLuint renderbuffer);
+    typedef void (APIENTRYP PFNGLBINDRENDERBUFFEREXTPROC)(GLenum target, GLuint renderbuffer);
+    typedef void (APIENTRYP PFNGLDELETERENDERBUFFERSEXTPROC)(GLsizei n, const GLuint *renderbuffers);
+    typedef void (APIENTRYP PFNGLGENRENDERBUFFERSEXTPROC)(GLsizei n, GLuint *renderbuffers);
+    typedef void (APIENTRYP PFNGLRENDERBUFFERSTORAGEEXTPROC)(GLenum target, GLenum internalformat, GLsizei width, GLsizei height);
+    typedef void (APIENTRYP PFNGLGETRENDERBUFFERPARAMETERIVEXTPROC)(GLenum target, GLenum pname, GLint *params);
+    typedef GLboolean(APIENTRYP PFNGLISFRAMEBUFFEREXTPROC)(GLuint framebuffer);
+    typedef void (APIENTRYP PFNGLBINDFRAMEBUFFEREXTPROC)(GLenum target, GLuint framebuffer);
+    typedef void (APIENTRYP PFNGLDELETEFRAMEBUFFERSEXTPROC)(GLsizei n, const GLuint *framebuffers);
+    typedef void (APIENTRYP PFNGLGENFRAMEBUFFERSEXTPROC)(GLsizei n, GLuint *framebuffers);
+    typedef GLenum(APIENTRYP PFNGLCHECKFRAMEBUFFERSTATUSEXTPROC)(GLenum target);
+    typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTURE1DEXTPROC)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
+    typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTURE2DEXTPROC)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
+    typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTURE3DEXTPROC)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);
+    typedef void (APIENTRYP PFNGLFRAMEBUFFERRENDERBUFFEREXTPROC)(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
+    typedef void (APIENTRYP PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC)(GLenum target, GLenum attachment, GLenum pname, GLint *params);
+    typedef void (APIENTRYP PFNGLGENERATEMIPMAPEXTPROC)(GLenum target);
+#endif
+
+#ifndef GL_GREMEDY_string_marker
+#define GL_GREMEDY_string_marker 1
+#ifdef GL_GLEXT_PROTOTYPES
+    GLAPI void APIENTRY glStringMarkerGREMEDY(GLsizei len, const GLvoid *string);
+#endif /* GL_GLEXT_PROTOTYPES */
+    typedef void (APIENTRYP PFNGLSTRINGMARKERGREMEDYPROC)(GLsizei len, const GLvoid *string);
+#endif
+
+#ifndef GL_EXT_packed_depth_stencil
+#define GL_EXT_packed_depth_stencil 1
+#endif
+
+#ifndef GL_EXT_stencil_clear_tag
+#define GL_EXT_stencil_clear_tag 1
+#ifdef GL_GLEXT_PROTOTYPES
+    GLAPI void APIENTRY glStencilClearTagEXT(GLsizei stencilTagBits, GLuint stencilClearTag);
+#endif /* GL_GLEXT_PROTOTYPES */
+    typedef void (APIENTRYP PFNGLSTENCILCLEARTAGEXTPROC)(GLsizei stencilTagBits, GLuint stencilClearTag);
+#endif
+
+#ifndef GL_EXT_texture_sRGB
+#define GL_EXT_texture_sRGB 1
+#endif
+
+#ifndef GL_EXT_framebuffer_blit
+#define GL_EXT_framebuffer_blit 1
+#ifdef GL_GLEXT_PROTOTYPES
+    GLAPI void APIENTRY glBlitFramebufferEXT(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
+#endif /* GL_GLEXT_PROTOTYPES */
+    typedef void (APIENTRYP PFNGLBLITFRAMEBUFFEREXTPROC)(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
+#endif
+
+#ifndef GL_EXT_framebuffer_multisample
+#define GL_EXT_framebuffer_multisample 1
+#ifdef GL_GLEXT_PROTOTYPES
+    GLAPI void APIENTRY glRenderbufferStorageMultisampleEXT(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
+#endif /* GL_GLEXT_PROTOTYPES */
+    typedef void (APIENTRYP PFNGLRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
+#endif
+
+#ifndef GL_MESAX_texture_stack
+#define GL_MESAX_texture_stack 1
+#endif
+
+#ifndef GL_EXT_timer_query
+#define GL_EXT_timer_query 1
+#ifdef GL_GLEXT_PROTOTYPES
+    GLAPI void APIENTRY glGetQueryObjecti64vEXT(GLuint id, GLenum pname, GLint64EXT *params);
+    GLAPI void APIENTRY glGetQueryObjectui64vEXT(GLuint id, GLenum pname, GLuint64EXT *params);
+#endif /* GL_GLEXT_PROTOTYPES */
+    typedef void (APIENTRYP PFNGLGETQUERYOBJECTI64VEXTPROC)(GLuint id, GLenum pname, GLint64EXT *params);
+    typedef void (APIENTRYP PFNGLGETQUERYOBJECTUI64VEXTPROC)(GLuint id, GLenum pname, GLuint64EXT *params);
+#endif
+
+#ifndef GL_EXT_gpu_program_parameters
+#define GL_EXT_gpu_program_parameters 1
+#ifdef GL_GLEXT_PROTOTYPES
+    GLAPI void APIENTRY glProgramEnvParameters4fvEXT(GLenum target, GLuint index, GLsizei count, const GLfloat *params);
+    GLAPI void APIENTRY glProgramLocalParameters4fvEXT(GLenum target, GLuint index, GLsizei count, const GLfloat *params);
+#endif /* GL_GLEXT_PROTOTYPES */
+    typedef void (APIENTRYP PFNGLPROGRAMENVPARAMETERS4FVEXTPROC)(GLenum target, GLuint index, GLsizei count, const GLfloat *params);
+    typedef void (APIENTRYP PFNGLPROGRAMLOCALPARAMETERS4FVEXTPROC)(GLenum target, GLuint index, GLsizei count, const GLfloat *params);
+#endif
+
+#ifndef GL_APPLE_flush_buffer_range
+#define GL_APPLE_flush_buffer_range 1
+#ifdef GL_GLEXT_PROTOTYPES
+    GLAPI void APIENTRY glBufferParameteriAPPLE(GLenum target, GLenum pname, GLint param);
+    GLAPI void APIENTRY glFlushMappedBufferRangeAPPLE(GLenum target, GLintptr offset, GLsizeiptr size);
+#endif /* GL_GLEXT_PROTOTYPES */
+    typedef void (APIENTRYP PFNGLBUFFERPARAMETERIAPPLEPROC)(GLenum target, GLenum pname, GLint param);
+    typedef void (APIENTRYP PFNGLFLUSHMAPPEDBUFFERRANGEAPPLEPROC)(GLenum target, GLintptr offset, GLsizeiptr size);
+#endif
+
+#ifndef GL_NV_gpu_program4
+#define GL_NV_gpu_program4 1
+#ifdef GL_GLEXT_PROTOTYPES
+    GLAPI void APIENTRY glProgramLocalParameterI4iNV(GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w);
+    GLAPI void APIENTRY glProgramLocalParameterI4ivNV(GLenum target, GLuint index, const GLint *params);
+    GLAPI void APIENTRY glProgramLocalParametersI4ivNV(GLenum target, GLuint index, GLsizei count, const GLint *params);
+    GLAPI void APIENTRY glProgramLocalParameterI4uiNV(GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
+    GLAPI void APIENTRY glProgramLocalParameterI4uivNV(GLenum target, GLuint index, const GLuint *params);
+    GLAPI void APIENTRY glProgramLocalParametersI4uivNV(GLenum target, GLuint index, GLsizei count, const GLuint *params);
+    GLAPI void APIENTRY glProgramEnvParameterI4iNV(GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w);
+    GLAPI void APIENTRY glProgramEnvParameterI4ivNV(GLenum target, GLuint index, const GLint *params);
+    GLAPI void APIENTRY glProgramEnvParametersI4ivNV(GLenum target, GLuint index, GLsizei count, const GLint *params);
+    GLAPI void APIENTRY glProgramEnvParameterI4uiNV(GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
+    GLAPI void APIENTRY glProgramEnvParameterI4uivNV(GLenum target, GLuint index, const GLuint *params);
+    GLAPI void APIENTRY glProgramEnvParametersI4uivNV(GLenum target, GLuint index, GLsizei count, const GLuint *params);
+    GLAPI void APIENTRY glGetProgramLocalParameterIivNV(GLenum target, GLuint index, GLint *params);
+    GLAPI void APIENTRY glGetProgramLocalParameterIuivNV(GLenum target, GLuint index, GLuint *params);
+    GLAPI void APIENTRY glGetProgramEnvParameterIivNV(GLenum target, GLuint index, GLint *params);
+    GLAPI void APIENTRY glGetProgramEnvParameterIuivNV(GLenum target, GLuint index, GLuint *params);
+#endif /* GL_GLEXT_PROTOTYPES */
+    typedef void (APIENTRYP PFNGLPROGRAMLOCALPARAMETERI4INVPROC)(GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w);
+    typedef void (APIENTRYP PFNGLPROGRAMLOCALPARAMETERI4IVNVPROC)(GLenum target, GLuint index, const GLint *params);
+    typedef void (APIENTRYP PFNGLPROGRAMLOCALPARAMETERSI4IVNVPROC)(GLenum target, GLuint index, GLsizei count, const GLint *params);
+    typedef void (APIENTRYP PFNGLPROGRAMLOCALPARAMETERI4UINVPROC)(GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
+    typedef void (APIENTRYP PFNGLPROGRAMLOCALPARAMETERI4UIVNVPROC)(GLenum target, GLuint index, const GLuint *params);
+    typedef void (APIENTRYP PFNGLPROGRAMLOCALPARAMETERSI4UIVNVPROC)(GLenum target, GLuint index, GLsizei count, const GLuint *params);
+    typedef void (APIENTRYP PFNGLPROGRAMENVPARAMETERI4INVPROC)(GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w);
+    typedef void (APIENTRYP PFNGLPROGRAMENVPARAMETERI4IVNVPROC)(GLenum target, GLuint index, const GLint *params);
+    typedef void (APIENTRYP PFNGLPROGRAMENVPARAMETERSI4IVNVPROC)(GLenum target, GLuint index, GLsizei count, const GLint *params);
+    typedef void (APIENTRYP PFNGLPROGRAMENVPARAMETERI4UINVPROC)(GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
+    typedef void (APIENTRYP PFNGLPROGRAMENVPARAMETERI4UIVNVPROC)(GLenum target, GLuint index, const GLuint *params);
+    typedef void (APIENTRYP PFNGLPROGRAMENVPARAMETERSI4UIVNVPROC)(GLenum target, GLuint index, GLsizei count, const GLuint *params);
+    typedef void (APIENTRYP PFNGLGETPROGRAMLOCALPARAMETERIIVNVPROC)(GLenum target, GLuint index, GLint *params);
+    typedef void (APIENTRYP PFNGLGETPROGRAMLOCALPARAMETERIUIVNVPROC)(GLenum target, GLuint index, GLuint *params);
+    typedef void (APIENTRYP PFNGLGETPROGRAMENVPARAMETERIIVNVPROC)(GLenum target, GLuint index, GLint *params);
+    typedef void (APIENTRYP PFNGLGETPROGRAMENVPARAMETERIUIVNVPROC)(GLenum target, GLuint index, GLuint *params);
+#endif
+
+#ifndef GL_NV_geometry_program4
+#define GL_NV_geometry_program4 1
+#ifdef GL_GLEXT_PROTOTYPES
+    GLAPI void APIENTRY glProgramVertexLimitNV(GLenum target, GLint limit);
+    GLAPI void APIENTRY glFramebufferTextureEXT(GLenum target, GLenum attachment, GLuint texture, GLint level);
+    GLAPI void APIENTRY glFramebufferTextureLayerEXT(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);
+    GLAPI void APIENTRY glFramebufferTextureFaceEXT(GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face);
+#endif /* GL_GLEXT_PROTOTYPES */
+    typedef void (APIENTRYP PFNGLPROGRAMVERTEXLIMITNVPROC)(GLenum target, GLint limit);
+    typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTUREEXTPROC)(GLenum target, GLenum attachment, GLuint texture, GLint level);
+    typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTURELAYEREXTPROC)(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);
+    typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTUREFACEEXTPROC)(GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face);
+#endif
+
+#ifndef GL_EXT_geometry_shader4
+#define GL_EXT_geometry_shader4 1
+#ifdef GL_GLEXT_PROTOTYPES
+    GLAPI void APIENTRY glProgramParameteriEXT(GLuint program, GLenum pname, GLint value);
+#endif /* GL_GLEXT_PROTOTYPES */
+    typedef void (APIENTRYP PFNGLPROGRAMPARAMETERIEXTPROC)(GLuint program, GLenum pname, GLint value);
+#endif
+
+#ifndef GL_NV_vertex_program4
+#define GL_NV_vertex_program4 1
+#ifdef GL_GLEXT_PROTOTYPES
+    GLAPI void APIENTRY glVertexAttribI1iEXT(GLuint index, GLint x);
+    GLAPI void APIENTRY glVertexAttribI2iEXT(GLuint index, GLint x, GLint y);
+    GLAPI void APIENTRY glVertexAttribI3iEXT(GLuint index, GLint x, GLint y, GLint z);
+    GLAPI void APIENTRY glVertexAttribI4iEXT(GLuint index, GLint x, GLint y, GLint z, GLint w);
+    GLAPI void APIENTRY glVertexAttribI1uiEXT(GLuint index, GLuint x);
+    GLAPI void APIENTRY glVertexAttribI2uiEXT(GLuint index, GLuint x, GLuint y);
+    GLAPI void APIENTRY glVertexAttribI3uiEXT(GLuint index, GLuint x, GLuint y, GLuint z);
+    GLAPI void APIENTRY glVertexAttribI4uiEXT(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
+    GLAPI void APIENTRY glVertexAttribI1ivEXT(GLuint index, const GLint *v);
+    GLAPI void APIENTRY glVertexAttribI2ivEXT(GLuint index, const GLint *v);
+    GLAPI void APIENTRY glVertexAttribI3ivEXT(GLuint index, const GLint *v);
+    GLAPI void APIENTRY glVertexAttribI4ivEXT(GLuint index, const GLint *v);
+    GLAPI void APIENTRY glVertexAttribI1uivEXT(GLuint index, const GLuint *v);
+    GLAPI void APIENTRY glVertexAttribI2uivEXT(GLuint index, const GLuint *v);
+    GLAPI void APIENTRY glVertexAttribI3uivEXT(GLuint index, const GLuint *v);
+    GLAPI void APIENTRY glVertexAttribI4uivEXT(GLuint index, const GLuint *v);
+    GLAPI void APIENTRY glVertexAttribI4bvEXT(GLuint index, const GLbyte *v);
+    GLAPI void APIENTRY glVertexAttribI4svEXT(GLuint index, const GLshort *v);
+    GLAPI void APIENTRY glVertexAttribI4ubvEXT(GLuint index, const GLubyte *v);
+    GLAPI void APIENTRY glVertexAttribI4usvEXT(GLuint index, const GLushort *v);
+    GLAPI void APIENTRY glVertexAttribIPointerEXT(GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
+    GLAPI void APIENTRY glGetVertexAttribIivEXT(GLuint index, GLenum pname, GLint *params);
+    GLAPI void APIENTRY glGetVertexAttribIuivEXT(GLuint index, GLenum pname, GLuint *params);
+#endif /* GL_GLEXT_PROTOTYPES */
+    typedef void (APIENTRYP PFNGLVERTEXATTRIBI1IEXTPROC)(GLuint index, GLint x);
+    typedef void (APIENTRYP PFNGLVERTEXATTRIBI2IEXTPROC)(GLuint index, GLint x, GLint y);
+    typedef void (APIENTRYP PFNGLVERTEXATTRIBI3IEXTPROC)(GLuint index, GLint x, GLint y, GLint z);
+    typedef void (APIENTRYP PFNGLVERTEXATTRIBI4IEXTPROC)(GLuint index, GLint x, GLint y, GLint z, GLint w);
+    typedef void (APIENTRYP PFNGLVERTEXATTRIBI1UIEXTPROC)(GLuint index, GLuint x);
+    typedef void (APIENTRYP PFNGLVERTEXATTRIBI2UIEXTPROC)(GLuint index, GLuint x, GLuint y);
+    typedef void (APIENTRYP PFNGLVERTEXATTRIBI3UIEXTPROC)(GLuint index, GLuint x, GLuint y, GLuint z);
+    typedef void (APIENTRYP PFNGLVERTEXATTRIBI4UIEXTPROC)(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
+    typedef void (APIENTRYP PFNGLVERTEXATTRIBI1IVEXTPROC)(GLuint index, const GLint *v);
+    typedef void (APIENTRYP PFNGLVERTEXATTRIBI2IVEXTPROC)(GLuint index, const GLint *v);
+    typedef void (APIENTRYP PFNGLVERTEXATTRIBI3IVEXTPROC)(GLuint index, const GLint *v);
+    typedef void (APIENTRYP PFNGLVERTEXATTRIBI4IVEXTPROC)(GLuint index, const GLint *v);
+    typedef void (APIENTRYP PFNGLVERTEXATTRIBI1UIVEXTPROC)(GLuint index, const GLuint *v);
+    typedef void (APIENTRYP PFNGLVERTEXATTRIBI2UIVEXTPROC)(GLuint index, const GLuint *v);
+    typedef void (APIENTRYP PFNGLVERTEXATTRIBI3UIVEXTPROC)(GLuint index, const GLuint *v);
+    typedef void (APIENTRYP PFNGLVERTEXATTRIBI4UIVEXTPROC)(GLuint index, const GLuint *v);
+    typedef void (APIENTRYP PFNGLVERTEXATTRIBI4BVEXTPROC)(GLuint index, const GLbyte *v);
+    typedef void (APIENTRYP PFNGLVERTEXATTRIBI4SVEXTPROC)(GLuint index, const GLshort *v);
+    typedef void (APIENTRYP PFNGLVERTEXATTRIBI4UBVEXTPROC)(GLuint index, const GLubyte *v);
+    typedef void (APIENTRYP PFNGLVERTEXATTRIBI4USVEXTPROC)(GLuint index, const GLushort *v);
+    typedef void (APIENTRYP PFNGLVERTEXATTRIBIPOINTEREXTPROC)(GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
+    typedef void (APIENTRYP PFNGLGETVERTEXATTRIBIIVEXTPROC)(GLuint index, GLenum pname, GLint *params);
+    typedef void (APIENTRYP PFNGLGETVERTEXATTRIBIUIVEXTPROC)(GLuint index, GLenum pname, GLuint *params);
+#endif
+
+#ifndef GL_EXT_gpu_shader4
+#define GL_EXT_gpu_shader4 1
+#ifdef GL_GLEXT_PROTOTYPES
+    GLAPI void APIENTRY glGetUniformuivEXT(GLuint program, GLint location, GLuint *params);
+    GLAPI void APIENTRY glBindFragDataLocationEXT(GLuint program, GLuint color, const GLchar *name);
+    GLAPI GLint APIENTRY glGetFragDataLocationEXT(GLuint program, const GLchar *name);
+    GLAPI void APIENTRY glUniform1uiEXT(GLint location, GLuint v0);
+    GLAPI void APIENTRY glUniform2uiEXT(GLint location, GLuint v0, GLuint v1);
+    GLAPI void APIENTRY glUniform3uiEXT(GLint location, GLuint v0, GLuint v1, GLuint v2);
+    GLAPI void APIENTRY glUniform4uiEXT(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
+    GLAPI void APIENTRY glUniform1uivEXT(GLint location, GLsizei count, const GLuint *value);
+    GLAPI void APIENTRY glUniform2uivEXT(GLint location, GLsizei count, const GLuint *value);
+    GLAPI void APIENTRY glUniform3uivEXT(GLint location, GLsizei count, const GLuint *value);
+    GLAPI void APIENTRY glUniform4uivEXT(GLint location, GLsizei count, const GLuint *value);
+#endif /* GL_GLEXT_PROTOTYPES */
+    typedef void (APIENTRYP PFNGLGETUNIFORMUIVEXTPROC)(GLuint program, GLint location, GLuint *params);
+    typedef void (APIENTRYP PFNGLBINDFRAGDATALOCATIONEXTPROC)(GLuint program, GLuint color, const GLchar *name);
+    typedef GLint(APIENTRYP PFNGLGETFRAGDATALOCATIONEXTPROC)(GLuint program, const GLchar *name);
+    typedef void (APIENTRYP PFNGLUNIFORM1UIEXTPROC)(GLint location, GLuint v0);
+    typedef void (APIENTRYP PFNGLUNIFORM2UIEXTPROC)(GLint location, GLuint v0, GLuint v1);
+    typedef void (APIENTRYP PFNGLUNIFORM3UIEXTPROC)(GLint location, GLuint v0, GLuint v1, GLuint v2);
+    typedef void (APIENTRYP PFNGLUNIFORM4UIEXTPROC)(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
+    typedef void (APIENTRYP PFNGLUNIFORM1UIVEXTPROC)(GLint location, GLsizei count, const GLuint *value);
+    typedef void (APIENTRYP PFNGLUNIFORM2UIVEXTPROC)(GLint location, GLsizei count, const GLuint *value);
+    typedef void (APIENTRYP PFNGLUNIFORM3UIVEXTPROC)(GLint location, GLsizei count, const GLuint *value);
+    typedef void (APIENTRYP PFNGLUNIFORM4UIVEXTPROC)(GLint location, GLsizei count, const GLuint *value);
+#endif
+
+#ifndef GL_EXT_draw_instanced
+#define GL_EXT_draw_instanced 1
+#ifdef GL_GLEXT_PROTOTYPES
+    GLAPI void APIENTRY glDrawArraysInstancedEXT(GLenum mode, GLint start, GLsizei count, GLsizei primcount);
+    GLAPI void APIENTRY glDrawElementsInstancedEXT(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount);
+#endif /* GL_GLEXT_PROTOTYPES */
+    typedef void (APIENTRYP PFNGLDRAWARRAYSINSTANCEDEXTPROC)(GLenum mode, GLint start, GLsizei count, GLsizei primcount);
+    typedef void (APIENTRYP PFNGLDRAWELEMENTSINSTANCEDEXTPROC)(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount);
+#endif
+
+#ifndef GL_EXT_packed_float
+#define GL_EXT_packed_float 1
+#endif
+
+#ifndef GL_EXT_texture_array
+#define GL_EXT_texture_array 1
+#endif
+
+#ifndef GL_EXT_texture_buffer_object
+#define GL_EXT_texture_buffer_object 1
+#ifdef GL_GLEXT_PROTOTYPES
+    GLAPI void APIENTRY glTexBufferEXT(GLenum target, GLenum internalformat, GLuint buffer);
+#endif /* GL_GLEXT_PROTOTYPES */
+    typedef void (APIENTRYP PFNGLTEXBUFFEREXTPROC)(GLenum target, GLenum internalformat, GLuint buffer);
+#endif
+
+#ifndef GL_EXT_texture_compression_latc
+#define GL_EXT_texture_compression_latc 1
+#endif
+
+#ifndef GL_EXT_texture_compression_rgtc
+#define GL_EXT_texture_compression_rgtc 1
+#endif
+
+#ifndef GL_EXT_texture_shared_exponent
+#define GL_EXT_texture_shared_exponent 1
+#endif
+
+#ifndef GL_NV_depth_buffer_float
+#define GL_NV_depth_buffer_float 1
+#ifdef GL_GLEXT_PROTOTYPES
+    GLAPI void APIENTRY glDepthRangedNV(GLdouble zNear, GLdouble zFar);
+    GLAPI void APIENTRY glClearDepthdNV(GLdouble depth);
+    GLAPI void APIENTRY glDepthBoundsdNV(GLdouble zmin, GLdouble zmax);
+#endif /* GL_GLEXT_PROTOTYPES */
+    typedef void (APIENTRYP PFNGLDEPTHRANGEDNVPROC)(GLdouble zNear, GLdouble zFar);
+    typedef void (APIENTRYP PFNGLCLEARDEPTHDNVPROC)(GLdouble depth);
+    typedef void (APIENTRYP PFNGLDEPTHBOUNDSDNVPROC)(GLdouble zmin, GLdouble zmax);
+#endif
+
+#ifndef GL_NV_fragment_program4
+#define GL_NV_fragment_program4 1
+#endif
+
+#ifndef GL_NV_framebuffer_multisample_coverage
+#define GL_NV_framebuffer_multisample_coverage 1
+#ifdef GL_GLEXT_PROTOTYPES
+    GLAPI void APIENTRY glRenderbufferStorageMultisampleCoverageNV(GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height);
+#endif /* GL_GLEXT_PROTOTYPES */
+    typedef void (APIENTRYP PFNGLRENDERBUFFERSTORAGEMULTISAMPLECOVERAGENVPROC)(GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height);
+#endif
+
+#ifndef GL_EXT_framebuffer_sRGB
+#define GL_EXT_framebuffer_sRGB 1
+#endif
+
+#ifndef GL_NV_geometry_shader4
+#define GL_NV_geometry_shader4 1
+#endif
+
+#ifndef GL_NV_parameter_buffer_object
+#define GL_NV_parameter_buffer_object 1
+#ifdef GL_GLEXT_PROTOTYPES
+    GLAPI void APIENTRY glProgramBufferParametersfvNV(GLenum target, GLuint buffer, GLuint index, GLsizei count, const GLfloat *params);
+    GLAPI void APIENTRY glProgramBufferParametersIivNV(GLenum target, GLuint buffer, GLuint index, GLsizei count, const GLint *params);
+    GLAPI void APIENTRY glProgramBufferParametersIuivNV(GLenum target, GLuint buffer, GLuint index, GLsizei count, const GLuint *params);
+#endif /* GL_GLEXT_PROTOTYPES */
+    typedef void (APIENTRYP PFNGLPROGRAMBUFFERPARAMETERSFVNVPROC)(GLenum target, GLuint buffer, GLuint index, GLsizei count, const GLfloat *params);
+    typedef void (APIENTRYP PFNGLPROGRAMBUFFERPARAMETERSIIVNVPROC)(GLenum target, GLuint buffer, GLuint index, GLsizei count, const GLint *params);
+    typedef void (APIENTRYP PFNGLPROGRAMBUFFERPARAMETERSIUIVNVPROC)(GLenum target, GLuint buffer, GLuint index, GLsizei count, const GLuint *params);
+#endif
+
+#ifndef GL_EXT_draw_buffers2
+#define GL_EXT_draw_buffers2 1
+#ifdef GL_GLEXT_PROTOTYPES
+    GLAPI void APIENTRY glColorMaskIndexedEXT(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a);
+    GLAPI void APIENTRY glGetBooleanIndexedvEXT(GLenum target, GLuint index, GLboolean *data);
+    GLAPI void APIENTRY glGetIntegerIndexedvEXT(GLenum target, GLuint index, GLint *data);
+    GLAPI void APIENTRY glEnableIndexedEXT(GLenum target, GLuint index);
+    GLAPI void APIENTRY glDisableIndexedEXT(GLenum target, GLuint index);
+    GLAPI GLboolean APIENTRY glIsEnabledIndexedEXT(GLenum target, GLuint index);
+#endif /* GL_GLEXT_PROTOTYPES */
+    typedef void (APIENTRYP PFNGLCOLORMASKINDEXEDEXTPROC)(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a);
+    typedef void (APIENTRYP PFNGLGETBOOLEANINDEXEDVEXTPROC)(GLenum target, GLuint index, GLboolean *data);
+    typedef void (APIENTRYP PFNGLGETINTEGERINDEXEDVEXTPROC)(GLenum target, GLuint index, GLint *data);
+    typedef void (APIENTRYP PFNGLENABLEINDEXEDEXTPROC)(GLenum target, GLuint index);
+    typedef void (APIENTRYP PFNGLDISABLEINDEXEDEXTPROC)(GLenum target, GLuint index);
+    typedef GLboolean(APIENTRYP PFNGLISENABLEDINDEXEDEXTPROC)(GLenum target, GLuint index);
+#endif
+
+#ifndef GL_NV_transform_feedback
+#define GL_NV_transform_feedback 1
+#ifdef GL_GLEXT_PROTOTYPES
+    GLAPI void APIENTRY glBeginTransformFeedbackNV(GLenum primitiveMode);
+    GLAPI void APIENTRY glEndTransformFeedbackNV(void);
+    GLAPI void APIENTRY glTransformFeedbackAttribsNV(GLuint count, const GLint *attribs, GLenum bufferMode);
+    GLAPI void APIENTRY glBindBufferRangeNV(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
+    GLAPI void APIENTRY glBindBufferOffsetNV(GLenum target, GLuint index, GLuint buffer, GLintptr offset);
+    GLAPI void APIENTRY glBindBufferBaseNV(GLenum target, GLuint index, GLuint buffer);
+    GLAPI void APIENTRY glTransformFeedbackVaryingsNV(GLuint program, GLsizei count, const GLint *locations, GLenum bufferMode);
+    GLAPI void APIENTRY glActiveVaryingNV(GLuint program, const GLchar *name);
+    GLAPI GLint APIENTRY glGetVaryingLocationNV(GLuint program, const GLchar *name);
+    GLAPI void APIENTRY glGetActiveVaryingNV(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name);
+    GLAPI void APIENTRY glGetTransformFeedbackVaryingNV(GLuint program, GLuint index, GLint *location);
+    GLAPI void APIENTRY glTransformFeedbackStreamAttribsNV(GLsizei count, const GLint *attribs, GLsizei nbuffers, const GLint *bufstreams, GLenum bufferMode);
+#endif /* GL_GLEXT_PROTOTYPES */
+    typedef void (APIENTRYP PFNGLBEGINTRANSFORMFEEDBACKNVPROC)(GLenum primitiveMode);
+    typedef void (APIENTRYP PFNGLENDTRANSFORMFEEDBACKNVPROC)(void);
+    typedef void (APIENTRYP PFNGLTRANSFORMFEEDBACKATTRIBSNVPROC)(GLuint count, const GLint *attribs, GLenum bufferMode);
+    typedef void (APIENTRYP PFNGLBINDBUFFERRANGENVPROC)(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
+    typedef void (APIENTRYP PFNGLBINDBUFFEROFFSETNVPROC)(GLenum target, GLuint index, GLuint buffer, GLintptr offset);
+    typedef void (APIENTRYP PFNGLBINDBUFFERBASENVPROC)(GLenum target, GLuint index, GLuint buffer);
+    typedef void (APIENTRYP PFNGLTRANSFORMFEEDBACKVARYINGSNVPROC)(GLuint program, GLsizei count, const GLint *locations, GLenum bufferMode);
+    typedef void (APIENTRYP PFNGLACTIVEVARYINGNVPROC)(GLuint program, const GLchar *name);
+    typedef GLint(APIENTRYP PFNGLGETVARYINGLOCATIONNVPROC)(GLuint program, const GLchar *name);
+    typedef void (APIENTRYP PFNGLGETACTIVEVARYINGNVPROC)(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name);
+    typedef void (APIENTRYP PFNGLGETTRANSFORMFEEDBACKVARYINGNVPROC)(GLuint program, GLuint index, GLint *location);
+    typedef void (APIENTRYP PFNGLTRANSFORMFEEDBACKSTREAMATTRIBSNVPROC)(GLsizei count, const GLint *attribs, GLsizei nbuffers, const GLint *bufstreams, GLenum bufferMode);
+#endif
+
+#ifndef GL_EXT_bindable_uniform
+#define GL_EXT_bindable_uniform 1
+#ifdef GL_GLEXT_PROTOTYPES
+    GLAPI void APIENTRY glUniformBufferEXT(GLuint program, GLint location, GLuint buffer);
+    GLAPI GLint APIENTRY glGetUniformBufferSizeEXT(GLuint program, GLint location);
+    GLAPI GLintptr APIENTRY glGetUniformOffsetEXT(GLuint program, GLint location);
+#endif /* GL_GLEXT_PROTOTYPES */
+    typedef void (APIENTRYP PFNGLUNIFORMBUFFEREXTPROC)(GLuint program, GLint location, GLuint buffer);
+    typedef GLint(APIENTRYP PFNGLGETUNIFORMBUFFERSIZEEXTPROC)(GLuint program, GLint location);
+    typedef GLintptr(APIENTRYP PFNGLGETUNIFORMOFFSETEXTPROC)(GLuint program, GLint location);
+#endif
+
+#ifndef GL_EXT_texture_integer
+#define GL_EXT_texture_integer 1
+#ifdef GL_GLEXT_PROTOTYPES
+    GLAPI void APIENTRY glTexParameterIivEXT(GLenum target, GLenum pname, const GLint *params);
+    GLAPI void APIENTRY glTexParameterIuivEXT(GLenum target, GLenum pname, const GLuint *params);
+    GLAPI void APIENTRY glGetTexParameterIivEXT(GLenum target, GLenum pname, GLint *params);
+    GLAPI void APIENTRY glGetTexParameterIuivEXT(GLenum target, GLenum pname, GLuint *params);
+    GLAPI void APIENTRY glClearColorIiEXT(GLint red, GLint green, GLint blue, GLint alpha);
+    GLAPI void APIENTRY glClearColorIuiEXT(GLuint red, GLuint green, GLuint blue, GLuint alpha);
+#endif /* GL_GLEXT_PROTOTYPES */
+    typedef void (APIENTRYP PFNGLTEXPARAMETERIIVEXTPROC)(GLenum target, GLenum pname, const GLint *params);
+    typedef void (APIENTRYP PFNGLTEXPARAMETERIUIVEXTPROC)(GLenum target, GLenum pname, const GLuint *params);
+    typedef void (APIENTRYP PFNGLGETTEXPARAMETERIIVEXTPROC)(GLenum target, GLenum pname, GLint *params);
+    typedef void (APIENTRYP PFNGLGETTEXPARAMETERIUIVEXTPROC)(GLenum target, GLenum pname, GLuint *params);
+    typedef void (APIENTRYP PFNGLCLEARCOLORIIEXTPROC)(GLint red, GLint green, GLint blue, GLint alpha);
+    typedef void (APIENTRYP PFNGLCLEARCOLORIUIEXTPROC)(GLuint red, GLuint green, GLuint blue, GLuint alpha);
+#endif
+
+#ifndef GL_GREMEDY_frame_terminator
+#define GL_GREMEDY_frame_terminator 1
+#ifdef GL_GLEXT_PROTOTYPES
+    GLAPI void APIENTRY glFrameTerminatorGREMEDY(void);
+#endif /* GL_GLEXT_PROTOTYPES */
+    typedef void (APIENTRYP PFNGLFRAMETERMINATORGREMEDYPROC)(void);
+#endif
+
+#ifndef GL_NV_conditional_render
+#define GL_NV_conditional_render 1
+#ifdef GL_GLEXT_PROTOTYPES
+    GLAPI void APIENTRY glBeginConditionalRenderNV(GLuint id, GLenum mode);
+    GLAPI void APIENTRY glEndConditionalRenderNV(void);
+#endif /* GL_GLEXT_PROTOTYPES */
+    typedef void (APIENTRYP PFNGLBEGINCONDITIONALRENDERNVPROC)(GLuint id, GLenum mode);
+    typedef void (APIENTRYP PFNGLENDCONDITIONALRENDERNVPROC)(void);
+#endif
+
+#ifndef GL_NV_present_video
+#define GL_NV_present_video 1
+#ifdef GL_GLEXT_PROTOTYPES
+    GLAPI void APIENTRY glPresentFrameKeyedNV(GLuint video_slot, GLuint64EXT minPresentTime, GLuint beginPresentTimeId, GLuint presentDurationId, GLenum type, GLenum target0, GLuint fill0, GLuint key0, GLenum target1, GLuint fill1, GLuint key1);
+    GLAPI void APIENTRY glPresentFrameDualFillNV(GLuint video_slot, GLuint64EXT minPresentTime, GLuint beginPresentTimeId, GLuint presentDurationId, GLenum type, GLenum target0, GLuint fill0, GLenum target1, GLuint fill1, GLenum target2, GLuint fill2, GLenum target3, GLuint fill3);
+    GLAPI void APIENTRY glGetVideoivNV(GLuint video_slot, GLenum pname, GLint *params);
+    GLAPI void APIENTRY glGetVideouivNV(GLuint video_slot, GLenum pname, GLuint *params);
+    GLAPI void APIENTRY glGetVideoi64vNV(GLuint video_slot, GLenum pname, GLint64EXT *params);
+    GLAPI void APIENTRY glGetVideoui64vNV(GLuint video_slot, GLenum pname, GLuint64EXT *params);
+#endif /* GL_GLEXT_PROTOTYPES */
+    typedef void (APIENTRYP PFNGLPRESENTFRAMEKEYEDNVPROC)(GLuint video_slot, GLuint64EXT minPresentTime, GLuint beginPresentTimeId, GLuint presentDurationId, GLenum type, GLenum target0, GLuint fill0, GLuint key0, GLenum target1, GLuint fill1, GLuint key1);
+    typedef void (APIENTRYP PFNGLPRESENTFRAMEDUALFILLNVPROC)(GLuint video_slot, GLuint64EXT minPresentTime, GLuint beginPresentTimeId, GLuint presentDurationId, GLenum type, GLenum target0, GLuint fill0, GLenum target1, GLuint fill1, GLenum target2, GLuint fill2, GLenum target3, GLuint fill3);
+    typedef void (APIENTRYP PFNGLGETVIDEOIVNVPROC)(GLuint video_slot, GLenum pname, GLint *params);
+    typedef void (APIENTRYP PFNGLGETVIDEOUIVNVPROC)(GLuint video_slot, GLenum pname, GLuint *params);
+    typedef void (APIENTRYP PFNGLGETVIDEOI64VNVPROC)(GLuint video_slot, GLenum pname, GLint64EXT *params);
+    typedef void (APIENTRYP PFNGLGETVIDEOUI64VNVPROC)(GLuint video_slot, GLenum pname, GLuint64EXT *params);
+#endif
+
+#ifndef GL_EXT_transform_feedback
+#define GL_EXT_transform_feedback 1
+#ifdef GL_GLEXT_PROTOTYPES
+    GLAPI void APIENTRY glBeginTransformFeedbackEXT(GLenum primitiveMode);
+    GLAPI void APIENTRY glEndTransformFeedbackEXT(void);
+    GLAPI void APIENTRY glBindBufferRangeEXT(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
+    GLAPI void APIENTRY glBindBufferOffsetEXT(GLenum target, GLuint index, GLuint buffer, GLintptr offset);
+    GLAPI void APIENTRY glBindBufferBaseEXT(GLenum target, GLuint index, GLuint buffer);
+    GLAPI void APIENTRY glTransformFeedbackVaryingsEXT(GLuint program, GLsizei count, const GLchar* *varyings, GLenum bufferMode);
+    GLAPI void APIENTRY glGetTransformFeedbackVaryingEXT(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name);
+#endif /* GL_GLEXT_PROTOTYPES */
+    typedef void (APIENTRYP PFNGLBEGINTRANSFORMFEEDBACKEXTPROC)(GLenum primitiveMode);
+    typedef void (APIENTRYP PFNGLENDTRANSFORMFEEDBACKEXTPROC)(void);
+    typedef void (APIENTRYP PFNGLBINDBUFFERRANGEEXTPROC)(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
+    typedef void (APIENTRYP PFNGLBINDBUFFEROFFSETEXTPROC)(GLenum target, GLuint index, GLuint buffer, GLintptr offset);
+    typedef void (APIENTRYP PFNGLBINDBUFFERBASEEXTPROC)(GLenum target, GLuint index, GLuint buffer);
+    typedef void (APIENTRYP PFNGLTRANSFORMFEEDBACKVARYINGSEXTPROC)(GLuint program, GLsizei count, const GLchar* *varyings, GLenum bufferMode);
+    typedef void (APIENTRYP PFNGLGETTRANSFORMFEEDBACKVARYINGEXTPROC)(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name);
+#endif
+
+#ifndef GL_EXT_direct_state_access
+#define GL_EXT_direct_state_access 1
+#ifdef GL_GLEXT_PROTOTYPES
+    GLAPI void APIENTRY glClientAttribDefaultEXT(GLbitfield mask);
+    GLAPI void APIENTRY glPushClientAttribDefaultEXT(GLbitfield mask);
+    GLAPI void APIENTRY glMatrixLoadfEXT(GLenum mode, const GLfloat *m);
+    GLAPI void APIENTRY glMatrixLoaddEXT(GLenum mode, const GLdouble *m);
+    GLAPI void APIENTRY glMatrixMultfEXT(GLenum mode, const GLfloat *m);
+    GLAPI void APIENTRY glMatrixMultdEXT(GLenum mode, const GLdouble *m);
+    GLAPI void APIENTRY glMatrixLoadIdentityEXT(GLenum mode);
+    GLAPI void APIENTRY glMatrixRotatefEXT(GLenum mode, GLfloat angle, GLfloat x, GLfloat y, GLfloat z);
+    GLAPI void APIENTRY glMatrixRotatedEXT(GLenum mode, GLdouble angle, GLdouble x, GLdouble y, GLdouble z);
+    GLAPI void APIENTRY glMatrixScalefEXT(GLenum mode, GLfloat x, GLfloat y, GLfloat z);
+    GLAPI void APIENTRY glMatrixScaledEXT(GLenum mode, GLdouble x, GLdouble y, GLdouble z);
+    GLAPI void APIENTRY glMatrixTranslatefEXT(GLenum mode, GLfloat x, GLfloat y, GLfloat z);
+    GLAPI void APIENTRY glMatrixTranslatedEXT(GLenum mode, GLdouble x, GLdouble y, GLdouble z);
+    GLAPI void APIENTRY glMatrixFrustumEXT(GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
+    GLAPI void APIENTRY glMatrixOrthoEXT(GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
+    GLAPI void APIENTRY glMatrixPopEXT(GLenum mode);
+    GLAPI void APIENTRY glMatrixPushEXT(GLenum mode);
+    GLAPI void APIENTRY glMatrixLoadTransposefEXT(GLenum mode, const GLfloat *m);
+    GLAPI void APIENTRY glMatrixLoadTransposedEXT(GLenum mode, const GLdouble *m);
+    GLAPI void APIENTRY glMatrixMultTransposefEXT(GLenum mode, const GLfloat *m);
+    GLAPI void APIENTRY glMatrixMultTransposedEXT(GLenum mode, const GLdouble *m);
+    GLAPI void APIENTRY glTextureParameterfEXT(GLuint texture, GLenum target, GLenum pname, GLfloat param);
+    GLAPI void APIENTRY glTextureParameterfvEXT(GLuint texture, GLenum target, GLenum pname, const GLfloat *params);
+    GLAPI void APIENTRY glTextureParameteriEXT(GLuint texture, GLenum target, GLenum pname, GLint param);
+    GLAPI void APIENTRY glTextureParameterivEXT(GLuint texture, GLenum target, GLenum pname, const GLint *params);
+    GLAPI void APIENTRY glTextureImage1DEXT(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
+    GLAPI void APIENTRY glTextureImage2DEXT(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
+    GLAPI void APIENTRY glTextureSubImage1DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels);
+    GLAPI void APIENTRY glTextureSubImage2DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels);
+    GLAPI void APIENTRY glCopyTextureImage1DEXT(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
+    GLAPI void APIENTRY glCopyTextureImage2DEXT(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
+    GLAPI void APIENTRY glCopyTextureSubImage1DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
+    GLAPI void APIENTRY glCopyTextureSubImage2DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
+    GLAPI void APIENTRY glGetTextureImageEXT(GLuint texture, GLenum target, GLint level, GLenum format, GLenum type, GLvoid *pixels);
+    GLAPI void APIENTRY glGetTextureParameterfvEXT(GLuint texture, GLenum target, GLenum pname, GLfloat *params);
+    GLAPI void APIENTRY glGetTextureParameterivEXT(GLuint texture, GLenum target, GLenum pname, GLint *params);
+    GLAPI void APIENTRY glGetTextureLevelParameterfvEXT(GLuint texture, GLenum target, GLint level, GLenum pname, GLfloat *params);
+    GLAPI void APIENTRY glGetTextureLevelParameterivEXT(GLuint texture, GLenum target, GLint level, GLenum pname, GLint *params);
+    GLAPI void APIENTRY glTextureImage3DEXT(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
+    GLAPI void APIENTRY glTextureSubImage3DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels);
+    GLAPI void APIENTRY glCopyTextureSubImage3DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
+    GLAPI void APIENTRY glMultiTexParameterfEXT(GLenum texunit, GLenum target, GLenum pname, GLfloat param);
+    GLAPI void APIENTRY glMultiTexParameterfvEXT(GLenum texunit, GLenum target, GLenum pname, const GLfloat *params);
+    GLAPI void APIENTRY glMultiTexParameteriEXT(GLenum texunit, GLenum target, GLenum pname, GLint param);
+    GLAPI void APIENTRY glMultiTexParameterivEXT(GLenum texunit, GLenum target, GLenum pname, const GLint *params);
+    GLAPI void APIENTRY glMultiTexImage1DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
+    GLAPI void APIENTRY glMultiTexImage2DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
+    GLAPI void APIENTRY glMultiTexSubImage1DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels);
+    GLAPI void APIENTRY glMultiTexSubImage2DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels);
+    GLAPI void APIENTRY glCopyMultiTexImage1DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
+    GLAPI void APIENTRY glCopyMultiTexImage2DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
+    GLAPI void APIENTRY glCopyMultiTexSubImage1DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
+    GLAPI void APIENTRY glCopyMultiTexSubImage2DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
+    GLAPI void APIENTRY glGetMultiTexImageEXT(GLenum texunit, GLenum target, GLint level, GLenum format, GLenum type, GLvoid *pixels);
+    GLAPI void APIENTRY glGetMultiTexParameterfvEXT(GLenum texunit, GLenum target, GLenum pname, GLfloat *params);
+    GLAPI void APIENTRY glGetMultiTexParameterivEXT(GLenum texunit, GLenum target, GLenum pname, GLint *params);
+    GLAPI void APIENTRY glGetMultiTexLevelParameterfvEXT(GLenum texunit, GLenum target, GLint level, GLenum pname, GLfloat *params);
+    GLAPI void APIENTRY glGetMultiTexLevelParameterivEXT(GLenum texunit, GLenum target, GLint level, GLenum pname, GLint *params);
+    GLAPI void APIENTRY glMultiTexImage3DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
+    GLAPI void APIENTRY glMultiTexSubImage3DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels);
+    GLAPI void APIENTRY glCopyMultiTexSubImage3DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
+    GLAPI void APIENTRY glBindMultiTextureEXT(GLenum texunit, GLenum target, GLuint texture);
+    GLAPI void APIENTRY glEnableClientStateIndexedEXT(GLenum array, GLuint index);
+    GLAPI void APIENTRY glDisableClientStateIndexedEXT(GLenum array, GLuint index);
+    GLAPI void APIENTRY glMultiTexCoordPointerEXT(GLenum texunit, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
+    GLAPI void APIENTRY glMultiTexEnvfEXT(GLenum texunit, GLenum target, GLenum pname, GLfloat param);
+    GLAPI void APIENTRY glMultiTexEnvfvEXT(GLenum texunit, GLenum target, GLenum pname, const GLfloat *params);
+    GLAPI void APIENTRY glMultiTexEnviEXT(GLenum texunit, GLenum target, GLenum pname, GLint param);
+    GLAPI void APIENTRY glMultiTexEnvivEXT(GLenum texunit, GLenum target, GLenum pname, const GLint *params);
+    GLAPI void APIENTRY glMultiTexGendEXT(GLenum texunit, GLenum coord, GLenum pname, GLdouble param);
+    GLAPI void APIENTRY glMultiTexGendvEXT(GLenum texunit, GLenum coord, GLenum pname, const GLdouble *params);
+    GLAPI void APIENTRY glMultiTexGenfEXT(GLenum texunit, GLenum coord, GLenum pname, GLfloat param);
+    GLAPI void APIENTRY glMultiTexGenfvEXT(GLenum texunit, GLenum coord, GLenum pname, const GLfloat *params);
+    GLAPI void APIENTRY glMultiTexGeniEXT(GLenum texunit, GLenum coord, GLenum pname, GLint param);
+    GLAPI void APIENTRY glMultiTexGenivEXT(GLenum texunit, GLenum coord, GLenum pname, const GLint *params);
+    GLAPI void APIENTRY glGetMultiTexEnvfvEXT(GLenum texunit, GLenum target, GLenum pname, GLfloat *params);
+    GLAPI void APIENTRY glGetMultiTexEnvivEXT(GLenum texunit, GLenum target, GLenum pname, GLint *params);
+    GLAPI void APIENTRY glGetMultiTexGendvEXT(GLenum texunit, GLenum coord, GLenum pname, GLdouble *params);
+    GLAPI void APIENTRY glGetMultiTexGenfvEXT(GLenum texunit, GLenum coord, GLenum pname, GLfloat *params);
+    GLAPI void APIENTRY glGetMultiTexGenivEXT(GLenum texunit, GLenum coord, GLenum pname, GLint *params);
+    GLAPI void APIENTRY glGetFloatIndexedvEXT(GLenum target, GLuint index, GLfloat *data);
+    GLAPI void APIENTRY glGetDoubleIndexedvEXT(GLenum target, GLuint index, GLdouble *data);
+    GLAPI void APIENTRY glGetPointerIndexedvEXT(GLenum target, GLuint index, GLvoid* *data);
+    GLAPI void APIENTRY glCompressedTextureImage3DEXT(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *bits);
+    GLAPI void APIENTRY glCompressedTextureImage2DEXT(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *bits);
+    GLAPI void APIENTRY glCompressedTextureImage1DEXT(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *bits);
+    GLAPI void APIENTRY glCompressedTextureSubImage3DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *bits);
+    GLAPI void APIENTRY glCompressedTextureSubImage2DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *bits);
+    GLAPI void APIENTRY glCompressedTextureSubImage1DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *bits);
+    GLAPI void APIENTRY glGetCompressedTextureImageEXT(GLuint texture, GLenum target, GLint lod, GLvoid *img);
+    GLAPI void APIENTRY glCompressedMultiTexImage3DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *bits);
+    GLAPI void APIENTRY glCompressedMultiTexImage2DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *bits);
+    GLAPI void APIENTRY glCompressedMultiTexImage1DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *bits);
+    GLAPI void APIENTRY glCompressedMultiTexSubImage3DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *bits);
+    GLAPI void APIENTRY glCompressedMultiTexSubImage2DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *bits);
+    GLAPI void APIENTRY glCompressedMultiTexSubImage1DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *bits);
+    GLAPI void APIENTRY glGetCompressedMultiTexImageEXT(GLenum texunit, GLenum target, GLint lod, GLvoid *img);
+    GLAPI void APIENTRY glNamedProgramStringEXT(GLuint program, GLenum target, GLenum format, GLsizei len, const GLvoid *string);
+    GLAPI void APIENTRY glNamedProgramLocalParameter4dEXT(GLuint program, GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
+    GLAPI void APIENTRY glNamedProgramLocalParameter4dvEXT(GLuint program, GLenum target, GLuint index, const GLdouble *params);
+    GLAPI void APIENTRY glNamedProgramLocalParameter4fEXT(GLuint program, GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
+    GLAPI void APIENTRY glNamedProgramLocalParameter4fvEXT(GLuint program, GLenum target, GLuint index, const GLfloat *params);
+    GLAPI void APIENTRY glGetNamedProgramLocalParameterdvEXT(GLuint program, GLenum target, GLuint index, GLdouble *params);
+    GLAPI void APIENTRY glGetNamedProgramLocalParameterfvEXT(GLuint program, GLenum target, GLuint index, GLfloat *params);
+    GLAPI void APIENTRY glGetNamedProgramivEXT(GLuint program, GLenum target, GLenum pname, GLint *params);
+    GLAPI void APIENTRY glGetNamedProgramStringEXT(GLuint program, GLenum target, GLenum pname, GLvoid *string);
+    GLAPI void APIENTRY glNamedProgramLocalParameters4fvEXT(GLuint program, GLenum target, GLuint index, GLsizei count, const GLfloat *params);
+    GLAPI void APIENTRY glNamedProgramLocalParameterI4iEXT(GLuint program, GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w);
+    GLAPI void APIENTRY glNamedProgramLocalParameterI4ivEXT(GLuint program, GLenum target, GLuint index, const GLint *params);
+    GLAPI void APIENTRY glNamedProgramLocalParametersI4ivEXT(GLuint program, GLenum target, GLuint index, GLsizei count, const GLint *params);
+    GLAPI void APIENTRY glNamedProgramLocalParameterI4uiEXT(GLuint program, GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
+    GLAPI void APIENTRY glNamedProgramLocalParameterI4uivEXT(GLuint program, GLenum target, GLuint index, const GLuint *params);
+    GLAPI void APIENTRY glNamedProgramLocalParametersI4uivEXT(GLuint program, GLenum target, GLuint index, GLsizei count, const GLuint *params);
+    GLAPI void APIENTRY glGetNamedProgramLocalParameterIivEXT(GLuint program, GLenum target, GLuint index, GLint *params);
+    GLAPI void APIENTRY glGetNamedProgramLocalParameterIuivEXT(GLuint program, GLenum target, GLuint index, GLuint *params);
+    GLAPI void APIENTRY glTextureParameterIivEXT(GLuint texture, GLenum target, GLenum pname, const GLint *params);
+    GLAPI void APIENTRY glTextureParameterIuivEXT(GLuint texture, GLenum target, GLenum pname, const GLuint *params);
+    GLAPI void APIENTRY glGetTextureParameterIivEXT(GLuint texture, GLenum target, GLenum pname, GLint *params);
+    GLAPI void APIENTRY glGetTextureParameterIuivEXT(GLuint texture, GLenum target, GLenum pname, GLuint *params);
+    GLAPI void APIENTRY glMultiTexParameterIivEXT(GLenum texunit, GLenum target, GLenum pname, const GLint *params);
+    GLAPI void APIENTRY glMultiTexParameterIuivEXT(GLenum texunit, GLenum target, GLenum pname, const GLuint *params);
+    GLAPI void APIENTRY glGetMultiTexParameterIivEXT(GLenum texunit, GLenum target, GLenum pname, GLint *params);
+    GLAPI void APIENTRY glGetMultiTexParameterIuivEXT(GLenum texunit, GLenum target, GLenum pname, GLuint *params);
+    GLAPI void APIENTRY glProgramUniform1fEXT(GLuint program, GLint location, GLfloat v0);
+    GLAPI void APIENTRY glProgramUniform2fEXT(GLuint program, GLint location, GLfloat v0, GLfloat v1);
+    GLAPI void APIENTRY glProgramUniform3fEXT(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
+    GLAPI void APIENTRY glProgramUniform4fEXT(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
+    GLAPI void APIENTRY glProgramUniform1iEXT(GLuint program, GLint location, GLint v0);
+    GLAPI void APIENTRY glProgramUniform2iEXT(GLuint program, GLint location, GLint v0, GLint v1);
+    GLAPI void APIENTRY glProgramUniform3iEXT(GLuint program, GLint location, GLint v0, GLint v1, GLint v2);
+    GLAPI void APIENTRY glProgramUniform4iEXT(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
+    GLAPI void APIENTRY glProgramUniform1fvEXT(GLuint program, GLint location, GLsizei count, const GLfloat *value);
+    GLAPI void APIENTRY glProgramUniform2fvEXT(GLuint program, GLint location, GLsizei count, const GLfloat *value);
+    GLAPI void APIENTRY glProgramUniform3fvEXT(GLuint program, GLint location, GLsizei count, const GLfloat *value);
+    GLAPI void APIENTRY glProgramUniform4fvEXT(GLuint program, GLint location, GLsizei count, const GLfloat *value);
+    GLAPI void APIENTRY glProgramUniform1ivEXT(GLuint program, GLint location, GLsizei count, const GLint *value);
+    GLAPI void APIENTRY glProgramUniform2ivEXT(GLuint program, GLint location, GLsizei count, const GLint *value);
+    GLAPI void APIENTRY glProgramUniform3ivEXT(GLuint program, GLint location, GLsizei count, const GLint *value);
+    GLAPI void APIENTRY glProgramUniform4ivEXT(GLuint program, GLint location, GLsizei count, const GLint *value);
+    GLAPI void APIENTRY glProgramUniformMatrix2fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
+    GLAPI void APIENTRY glProgramUniformMatrix3fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
+    GLAPI void APIENTRY glProgramUniformMatrix4fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
+    GLAPI void APIENTRY glProgramUniformMatrix2x3fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
+    GLAPI void APIENTRY glProgramUniformMatrix3x2fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
+    GLAPI void APIENTRY glProgramUniformMatrix2x4fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
+    GLAPI void APIENTRY glProgramUniformMatrix4x2fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
+    GLAPI void APIENTRY glProgramUniformMatrix3x4fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
+    GLAPI void APIENTRY glProgramUniformMatrix4x3fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
+    GLAPI void APIENTRY glProgramUniform1uiEXT(GLuint program, GLint location, GLuint v0);
+    GLAPI void APIENTRY glProgramUniform2uiEXT(GLuint program, GLint location, GLuint v0, GLuint v1);
+    GLAPI void APIENTRY glProgramUniform3uiEXT(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2);
+    GLAPI void APIENTRY glProgramUniform4uiEXT(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
+    GLAPI void APIENTRY glProgramUniform1uivEXT(GLuint program, GLint location, GLsizei count, const GLuint *value);
+    GLAPI void APIENTRY glProgramUniform2uivEXT(GLuint program, GLint location, GLsizei count, const GLuint *value);
+    GLAPI void APIENTRY glProgramUniform3uivEXT(GLuint program, GLint location, GLsizei count, const GLuint *value);
+    GLAPI void APIENTRY glProgramUniform4uivEXT(GLuint program, GLint location, GLsizei count, const GLuint *value);
+    GLAPI void APIENTRY glNamedBufferDataEXT(GLuint buffer, GLsizeiptr size, const GLvoid *data, GLenum usage);
+    GLAPI void APIENTRY glNamedBufferSubDataEXT(GLuint buffer, GLintptr offset, GLsizeiptr size, const GLvoid *data);
+    GLAPI GLvoid* APIENTRY glMapNamedBufferEXT(GLuint buffer, GLenum access);
+    GLAPI GLboolean APIENTRY glUnmapNamedBufferEXT(GLuint buffer);
+    GLAPI GLvoid* APIENTRY glMapNamedBufferRangeEXT(GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access);
+    GLAPI void APIENTRY glFlushMappedNamedBufferRangeEXT(GLuint buffer, GLintptr offset, GLsizeiptr length);
+    GLAPI void APIENTRY glNamedCopyBufferSubDataEXT(GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
+    GLAPI void APIENTRY glGetNamedBufferParameterivEXT(GLuint buffer, GLenum pname, GLint *params);
+    GLAPI void APIENTRY glGetNamedBufferPointervEXT(GLuint buffer, GLenum pname, GLvoid* *params);
+    GLAPI void APIENTRY glGetNamedBufferSubDataEXT(GLuint buffer, GLintptr offset, GLsizeiptr size, GLvoid *data);
+    GLAPI void APIENTRY glTextureBufferEXT(GLuint texture, GLenum target, GLenum internalformat, GLuint buffer);
+    GLAPI void APIENTRY glMultiTexBufferEXT(GLenum texunit, GLenum target, GLenum internalformat, GLuint buffer);
+    GLAPI void APIENTRY glNamedRenderbufferStorageEXT(GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height);
+    GLAPI void APIENTRY glGetNamedRenderbufferParameterivEXT(GLuint renderbuffer, GLenum pname, GLint *params);
+    GLAPI GLenum APIENTRY glCheckNamedFramebufferStatusEXT(GLuint framebuffer, GLenum target);
+    GLAPI void APIENTRY glNamedFramebufferTexture1DEXT(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
+    GLAPI void APIENTRY glNamedFramebufferTexture2DEXT(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
+    GLAPI void APIENTRY glNamedFramebufferTexture3DEXT(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);
+    GLAPI void APIENTRY glNamedFramebufferRenderbufferEXT(GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
+    GLAPI void APIENTRY glGetNamedFramebufferAttachmentParameterivEXT(GLuint framebuffer, GLenum attachment, GLenum pname, GLint *params);
+    GLAPI void APIENTRY glGenerateTextureMipmapEXT(GLuint texture, GLenum target);
+    GLAPI void APIENTRY glGenerateMultiTexMipmapEXT(GLenum texunit, GLenum target);
+    GLAPI void APIENTRY glFramebufferDrawBufferEXT(GLuint framebuffer, GLenum mode);
+    GLAPI void APIENTRY glFramebufferDrawBuffersEXT(GLuint framebuffer, GLsizei n, const GLenum *bufs);
+    GLAPI void APIENTRY glFramebufferReadBufferEXT(GLuint framebuffer, GLenum mode);
+    GLAPI void APIENTRY glGetFramebufferParameterivEXT(GLuint framebuffer, GLenum pname, GLint *params);
+    GLAPI void APIENTRY glNamedRenderbufferStorageMultisampleEXT(GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
+    GLAPI void APIENTRY glNamedRenderbufferStorageMultisampleCoverageEXT(GLuint renderbuffer, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height);
+    GLAPI void APIENTRY glNamedFramebufferTextureEXT(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level);
+    GLAPI void APIENTRY glNamedFramebufferTextureLayerEXT(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer);
+    GLAPI void APIENTRY glNamedFramebufferTextureFaceEXT(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLenum face);
+    GLAPI void APIENTRY glTextureRenderbufferEXT(GLuint texture, GLenum target, GLuint renderbuffer);
+    GLAPI void APIENTRY glMultiTexRenderbufferEXT(GLenum texunit, GLenum target, GLuint renderbuffer);
+    GLAPI void APIENTRY glProgramUniform1dEXT(GLuint program, GLint location, GLdouble x);
+    GLAPI void APIENTRY glProgramUniform2dEXT(GLuint program, GLint location, GLdouble x, GLdouble y);
+    GLAPI void APIENTRY glProgramUniform3dEXT(GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z);
+    GLAPI void APIENTRY glProgramUniform4dEXT(GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
+    GLAPI void APIENTRY glProgramUniform1dvEXT(GLuint program, GLint location, GLsizei count, const GLdouble *value);
+    GLAPI void APIENTRY glProgramUniform2dvEXT(GLuint program, GLint location, GLsizei count, const GLdouble *value);
+    GLAPI void APIENTRY glProgramUniform3dvEXT(GLuint program, GLint location, GLsizei count, const GLdouble *value);
+    GLAPI void APIENTRY glProgramUniform4dvEXT(GLuint program, GLint location, GLsizei count, const GLdouble *value);
+    GLAPI void APIENTRY glProgramUniformMatrix2dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
+    GLAPI void APIENTRY glProgramUniformMatrix3dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
+    GLAPI void APIENTRY glProgramUniformMatrix4dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
+    GLAPI void APIENTRY glProgramUniformMatrix2x3dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
+    GLAPI void APIENTRY glProgramUniformMatrix2x4dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
+    GLAPI void APIENTRY glProgramUniformMatrix3x2dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
+    GLAPI void APIENTRY glProgramUniformMatrix3x4dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
+    GLAPI void APIENTRY glProgramUniformMatrix4x2dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
+    GLAPI void APIENTRY glProgramUniformMatrix4x3dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
+#endif /* GL_GLEXT_PROTOTYPES */
+    typedef void (APIENTRYP PFNGLCLIENTATTRIBDEFAULTEXTPROC)(GLbitfield mask);
+    typedef void (APIENTRYP PFNGLPUSHCLIENTATTRIBDEFAULTEXTPROC)(GLbitfield mask);
+    typedef void (APIENTRYP PFNGLMATRIXLOADFEXTPROC)(GLenum mode, const GLfloat *m);
+    typedef void (APIENTRYP PFNGLMATRIXLOADDEXTPROC)(GLenum mode, const GLdouble *m);
+    typedef void (APIENTRYP PFNGLMATRIXMULTFEXTPROC)(GLenum mode, const GLfloat *m);
+    typedef void (APIENTRYP PFNGLMATRIXMULTDEXTPROC)(GLenum mode, const GLdouble *m);
+    typedef void (APIENTRYP PFNGLMATRIXLOADIDENTITYEXTPROC)(GLenum mode);
+    typedef void (APIENTRYP PFNGLMATRIXROTATEFEXTPROC)(GLenum mode, GLfloat angle, GLfloat x, GLfloat y, GLfloat z);
+    typedef void (APIENTRYP PFNGLMATRIXROTATEDEXTPROC)(GLenum mode, GLdouble angle, GLdouble x, GLdouble y, GLdouble z);
+    typedef void (APIENTRYP PFNGLMATRIXSCALEFEXTPROC)(GLenum mode, GLfloat x, GLfloat y, GLfloat z);
+    typedef void (APIENTRYP PFNGLMATRIXSCALEDEXTPROC)(GLenum mode, GLdouble x, GLdouble y, GLdouble z);
+    typedef void (APIENTRYP PFNGLMATRIXTRANSLATEFEXTPROC)(GLenum mode, GLfloat x, GLfloat y, GLfloat z);
+    typedef void (APIENTRYP PFNGLMATRIXTRANSLATEDEXTPROC)(GLenum mode, GLdouble x, GLdouble y, GLdouble z);
+    typedef void (APIENTRYP PFNGLMATRIXFRUSTUMEXTPROC)(GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
+    typedef void (APIENTRYP PFNGLMATRIXORTHOEXTPROC)(GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
+    typedef void (APIENTRYP PFNGLMATRIXPOPEXTPROC)(GLenum mode);
+    typedef void (APIENTRYP PFNGLMATRIXPUSHEXTPROC)(GLenum mode);
+    typedef void (APIENTRYP PFNGLMATRIXLOADTRANSPOSEFEXTPROC)(GLenum mode, const GLfloat *m);
+    typedef void (APIENTRYP PFNGLMATRIXLOADTRANSPOSEDEXTPROC)(GLenum mode, const GLdouble *m);
+    typedef void (APIENTRYP PFNGLMATRIXMULTTRANSPOSEFEXTPROC)(GLenum mode, const GLfloat *m);
+    typedef void (APIENTRYP PFNGLMATRIXMULTTRANSPOSEDEXTPROC)(GLenum mode, const GLdouble *m);
+    typedef void (APIENTRYP PFNGLTEXTUREPARAMETERFEXTPROC)(GLuint texture, GLenum target, GLenum pname, GLfloat param);
+    typedef void (APIENTRYP PFNGLTEXTUREPARAMETERFVEXTPROC)(GLuint texture, GLenum target, GLenum pname, const GLfloat *params);
+    typedef void (APIENTRYP PFNGLTEXTUREPARAMETERIEXTPROC)(GLuint texture, GLenum target, GLenum pname, GLint param);
+    typedef void (APIENTRYP PFNGLTEXTUREPARAMETERIVEXTPROC)(GLuint texture, GLenum target, GLenum pname, const GLint *params);
+    typedef void (APIENTRYP PFNGLTEXTUREIMAGE1DEXTPROC)(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
+    typedef void (APIENTRYP PFNGLTEXTUREIMAGE2DEXTPROC)(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
+    typedef void (APIENTRYP PFNGLTEXTURESUBIMAGE1DEXTPROC)(GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels);
+    typedef void (APIENTRYP PFNGLTEXTURESUBIMAGE2DEXTPROC)(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels);
+    typedef void (APIENTRYP PFNGLCOPYTEXTUREIMAGE1DEXTPROC)(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
+    typedef void (APIENTRYP PFNGLCOPYTEXTUREIMAGE2DEXTPROC)(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
+    typedef void (APIENTRYP PFNGLCOPYTEXTURESUBIMAGE1DEXTPROC)(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
+    typedef void (APIENTRYP PFNGLCOPYTEXTURESUBIMAGE2DEXTPROC)(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
+    typedef void (APIENTRYP PFNGLGETTEXTUREIMAGEEXTPROC)(GLuint texture, GLenum target, GLint level, GLenum format, GLenum type, GLvoid *pixels);
+    typedef void (APIENTRYP PFNGLGETTEXTUREPARAMETERFVEXTPROC)(GLuint texture, GLenum target, GLenum pname, GLfloat *params);
+    typedef void (APIENTRYP PFNGLGETTEXTUREPARAMETERIVEXTPROC)(GLuint texture, GLenum target, GLenum pname, GLint *params);
+    typedef void (APIENTRYP PFNGLGETTEXTURELEVELPARAMETERFVEXTPROC)(GLuint texture, GLenum target, GLint level, GLenum pname, GLfloat *params);
+    typedef void (APIENTRYP PFNGLGETTEXTURELEVELPARAMETERIVEXTPROC)(GLuint texture, GLenum target, GLint level, GLenum pname, GLint *params);
+    typedef void (APIENTRYP PFNGLTEXTUREIMAGE3DEXTPROC)(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
+    typedef void (APIENTRYP PFNGLTEXTURESUBIMAGE3DEXTPROC)(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels);
+    typedef void (APIENTRYP PFNGLCOPYTEXTURESUBIMAGE3DEXTPROC)(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
+    typedef void (APIENTRYP PFNGLMULTITEXPARAMETERFEXTPROC)(GLenum texunit, GLenum target, GLenum pname, GLfloat param);
+    typedef void (APIENTRYP PFNGLMULTITEXPARAMETERFVEXTPROC)(GLenum texunit, GLenum target, GLenum pname, const GLfloat *params);
+    typedef void (APIENTRYP PFNGLMULTITEXPARAMETERIEXTPROC)(GLenum texunit, GLenum target, GLenum pname, GLint param);
+    typedef void (APIENTRYP PFNGLMULTITEXPARAMETERIVEXTPROC)(GLenum texunit, GLenum target, GLenum pname, const GLint *params);
+    typedef void (APIENTRYP PFNGLMULTITEXIMAGE1DEXTPROC)(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
+    typedef void (APIENTRYP PFNGLMULTITEXIMAGE2DEXTPROC)(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
+    typedef void (APIENTRYP PFNGLMULTITEXSUBIMAGE1DEXTPROC)(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels);
+    typedef void (APIENTRYP PFNGLMULTITEXSUBIMAGE2DEXTPROC)(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels);
+    typedef void (APIENTRYP PFNGLCOPYMULTITEXIMAGE1DEXTPROC)(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
+    typedef void (APIENTRYP PFNGLCOPYMULTITEXIMAGE2DEXTPROC)(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
+    typedef void (APIENTRYP PFNGLCOPYMULTITEXSUBIMAGE1DEXTPROC)(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
+    typedef void (APIENTRYP PFNGLCOPYMULTITEXSUBIMAGE2DEXTPROC)(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
+    typedef void (APIENTRYP PFNGLGETMULTITEXIMAGEEXTPROC)(GLenum texunit, GLenum target, GLint level, GLenum format, GLenum type, GLvoid *pixels);
+    typedef void (APIENTRYP PFNGLGETMULTITEXPARAMETERFVEXTPROC)(GLenum texunit, GLenum target, GLenum pname, GLfloat *params);
+    typedef void (APIENTRYP PFNGLGETMULTITEXPARAMETERIVEXTPROC)(GLenum texunit, GLenum target, GLenum pname, GLint *params);
+    typedef void (APIENTRYP PFNGLGETMULTITEXLEVELPARAMETERFVEXTPROC)(GLenum texunit, GLenum target, GLint level, GLenum pname, GLfloat *params);
+    typedef void (APIENTRYP PFNGLGETMULTITEXLEVELPARAMETERIVEXTPROC)(GLenum texunit, GLenum target, GLint level, GLenum pname, GLint *params);
+    typedef void (APIENTRYP PFNGLMULTITEXIMAGE3DEXTPROC)(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
+    typedef void (APIENTRYP PFNGLMULTITEXSUBIMAGE3DEXTPROC)(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels);
+    typedef void (APIENTRYP PFNGLCOPYMULTITEXSUBIMAGE3DEXTPROC)(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
+    typedef void (APIENTRYP PFNGLBINDMULTITEXTUREEXTPROC)(GLenum texunit, GLenum target, GLuint texture);
+    typedef void (APIENTRYP PFNGLENABLECLIENTSTATEINDEXEDEXTPROC)(GLenum array, GLuint index);
+    typedef void (APIENTRYP PFNGLDISABLECLIENTSTATEINDEXEDEXTPROC)(GLenum array, GLuint index);
+    typedef void (APIENTRYP PFNGLMULTITEXCOORDPOINTEREXTPROC)(GLenum texunit, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
+    typedef void (APIENTRYP PFNGLMULTITEXENVFEXTPROC)(GLenum texunit, GLenum target, GLenum pname, GLfloat param);
+    typedef void (APIENTRYP PFNGLMULTITEXENVFVEXTPROC)(GLenum texunit, GLenum target, GLenum pname, const GLfloat *params);
+    typedef void (APIENTRYP PFNGLMULTITEXENVIEXTPROC)(GLenum texunit, GLenum target, GLenum pname, GLint param);
+    typedef void (APIENTRYP PFNGLMULTITEXENVIVEXTPROC)(GLenum texunit, GLenum target, GLenum pname, const GLint *params);
+    typedef void (APIENTRYP PFNGLMULTITEXGENDEXTPROC)(GLenum texunit, GLenum coord, GLenum pname, GLdouble param);
+    typedef void (APIENTRYP PFNGLMULTITEXGENDVEXTPROC)(GLenum texunit, GLenum coord, GLenum pname, const GLdouble *params);
+    typedef void (APIENTRYP PFNGLMULTITEXGENFEXTPROC)(GLenum texunit, GLenum coord, GLenum pname, GLfloat param);
+    typedef void (APIENTRYP PFNGLMULTITEXGENFVEXTPROC)(GLenum texunit, GLenum coord, GLenum pname, const GLfloat *params);
+    typedef void (APIENTRYP PFNGLMULTITEXGENIEXTPROC)(GLenum texunit, GLenum coord, GLenum pname, GLint param);
+    typedef void (APIENTRYP PFNGLMULTITEXGENIVEXTPROC)(GLenum texunit, GLenum coord, GLenum pname, const GLint *params);
+    typedef void (APIENTRYP PFNGLGETMULTITEXENVFVEXTPROC)(GLenum texunit, GLenum target, GLenum pname, GLfloat *params);
+    typedef void (APIENTRYP PFNGLGETMULTITEXENVIVEXTPROC)(GLenum texunit, GLenum target, GLenum pname, GLint *params);
+    typedef void (APIENTRYP PFNGLGETMULTITEXGENDVEXTPROC)(GLenum texunit, GLenum coord, GLenum pname, GLdouble *params);
+    typedef void (APIENTRYP PFNGLGETMULTITEXGENFVEXTPROC)(GLenum texunit, GLenum coord, GLenum pname, GLfloat *params);
+    typedef void (APIENTRYP PFNGLGETMULTITEXGENIVEXTPROC)(GLenum texunit, GLenum coord, GLenum pname, GLint *params);
+    typedef void (APIENTRYP PFNGLGETFLOATINDEXEDVEXTPROC)(GLenum target, GLuint index, GLfloat *data);
+    typedef void (APIENTRYP PFNGLGETDOUBLEINDEXEDVEXTPROC)(GLenum target, GLuint index, GLdouble *data);
+    typedef void (APIENTRYP PFNGLGETPOINTERINDEXEDVEXTPROC)(GLenum target, GLuint index, GLvoid* *data);
+    typedef void (APIENTRYP PFNGLCOMPRESSEDTEXTUREIMAGE3DEXTPROC)(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *bits);
+    typedef void (APIENTRYP PFNGLCOMPRESSEDTEXTUREIMAGE2DEXTPROC)(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *bits);
+    typedef void (APIENTRYP PFNGLCOMPRESSEDTEXTUREIMAGE1DEXTPROC)(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *bits);
+    typedef void (APIENTRYP PFNGLCOMPRESSEDTEXTURESUBIMAGE3DEXTPROC)(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *bits);
+    typedef void (APIENTRYP PFNGLCOMPRESSEDTEXTURESUBIMAGE2DEXTPROC)(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *bits);
+    typedef void (APIENTRYP PFNGLCOMPRESSEDTEXTURESUBIMAGE1DEXTPROC)(GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *bits);
+    typedef void (APIENTRYP PFNGLGETCOMPRESSEDTEXTUREIMAGEEXTPROC)(GLuint texture, GLenum target, GLint lod, GLvoid *img);
+    typedef void (APIENTRYP PFNGLCOMPRESSEDMULTITEXIMAGE3DEXTPROC)(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *bits);
+    typedef void (APIENTRYP PFNGLCOMPRESSEDMULTITEXIMAGE2DEXTPROC)(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *bits);
+    typedef void (APIENTRYP PFNGLCOMPRESSEDMULTITEXIMAGE1DEXTPROC)(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *bits);
+    typedef void (APIENTRYP PFNGLCOMPRESSEDMULTITEXSUBIMAGE3DEXTPROC)(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *bits);
+    typedef void (APIENTRYP PFNGLCOMPRESSEDMULTITEXSUBIMAGE2DEXTPROC)(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *bits);
+    typedef void (APIENTRYP PFNGLCOMPRESSEDMULTITEXSUBIMAGE1DEXTPROC)(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *bits);
+    typedef void (APIENTRYP PFNGLGETCOMPRESSEDMULTITEXIMAGEEXTPROC)(GLenum texunit, GLenum target, GLint lod, GLvoid *img);
+    typedef void (APIENTRYP PFNGLNAMEDPROGRAMSTRINGEXTPROC)(GLuint program, GLenum target, GLenum format, GLsizei len, const GLvoid *string);
+    typedef void (APIENTRYP PFNGLNAMEDPROGRAMLOCALPARAMETER4DEXTPROC)(GLuint program, GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
+    typedef void (APIENTRYP PFNGLNAMEDPROGRAMLOCALPARAMETER4DVEXTPROC)(GLuint program, GLenum target, GLuint index, const GLdouble *params);
+    typedef void (APIENTRYP PFNGLNAMEDPROGRAMLOCALPARAMETER4FEXTPROC)(GLuint program, GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
+    typedef void (APIENTRYP PFNGLNAMEDPROGRAMLOCALPARAMETER4FVEXTPROC)(GLuint program, GLenum target, GLuint index, const GLfloat *params);
+    typedef void (APIENTRYP PFNGLGETNAMEDPROGRAMLOCALPARAMETERDVEXTPROC)(GLuint program, GLenum target, GLuint index, GLdouble *params);
+    typedef void (APIENTRYP PFNGLGETNAMEDPROGRAMLOCALPARAMETERFVEXTPROC)(GLuint program, GLenum target, GLuint index, GLfloat *params);
+    typedef void (APIENTRYP PFNGLGETNAMEDPROGRAMIVEXTPROC)(GLuint program, GLenum target, GLenum pname, GLint *params);
+    typedef void (APIENTRYP PFNGLGETNAMEDPROGRAMSTRINGEXTPROC)(GLuint program, GLenum target, GLenum pname, GLvoid *string);
+    typedef void (APIENTRYP PFNGLNAMEDPROGRAMLOCALPARAMETERS4FVEXTPROC)(GLuint program, GLenum target, GLuint index, GLsizei count, const GLfloat *params);
+    typedef void (APIENTRYP PFNGLNAMEDPROGRAMLOCALPARAMETERI4IEXTPROC)(GLuint program, GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w);
+    typedef void (APIENTRYP PFNGLNAMEDPROGRAMLOCALPARAMETERI4IVEXTPROC)(GLuint program, GLenum target, GLuint index, const GLint *params);
+    typedef void (APIENTRYP PFNGLNAMEDPROGRAMLOCALPARAMETERSI4IVEXTPROC)(GLuint program, GLenum target, GLuint index, GLsizei count, const GLint *params);
+    typedef void (APIENTRYP PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIEXTPROC)(GLuint program, GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
+    typedef void (APIENTRYP PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIVEXTPROC)(GLuint program, GLenum target, GLuint index, const GLuint *params);
+    typedef void (APIENTRYP PFNGLNAMEDPROGRAMLOCALPARAMETERSI4UIVEXTPROC)(GLuint program, GLenum target, GLuint index, GLsizei count, const GLuint *params);
+    typedef void (APIENTRYP PFNGLGETNAMEDPROGRAMLOCALPARAMETERIIVEXTPROC)(GLuint program, GLenum target, GLuint index, GLint *params);
+    typedef void (APIENTRYP PFNGLGETNAMEDPROGRAMLOCALPARAMETERIUIVEXTPROC)(GLuint program, GLenum target, GLuint index, GLuint *params);
+    typedef void (APIENTRYP PFNGLTEXTUREPARAMETERIIVEXTPROC)(GLuint texture, GLenum target, GLenum pname, const GLint *params);
+    typedef void (APIENTRYP PFNGLTEXTUREPARAMETERIUIVEXTPROC)(GLuint texture, GLenum target, GLenum pname, const GLuint *params);
+    typedef void (APIENTRYP PFNGLGETTEXTUREPARAMETERIIVEXTPROC)(GLuint texture, GLenum target, GLenum pname, GLint *params);
+    typedef void (APIENTRYP PFNGLGETTEXTUREPARAMETERIUIVEXTPROC)(GLuint texture, GLenum target, GLenum pname, GLuint *params);
+    typedef void (APIENTRYP PFNGLMULTITEXPARAMETERIIVEXTPROC)(GLenum texunit, GLenum target, GLenum pname, const GLint *params);
+    typedef void (APIENTRYP PFNGLMULTITEXPARAMETERIUIVEXTPROC)(GLenum texunit, GLenum target, GLenum pname, const GLuint *params);
+    typedef void (APIENTRYP PFNGLGETMULTITEXPARAMETERIIVEXTPROC)(GLenum texunit, GLenum target, GLenum pname, GLint *params);
+    typedef void (APIENTRYP PFNGLGETMULTITEXPARAMETERIUIVEXTPROC)(GLenum texunit, GLenum target, GLenum pname, GLuint *params);
+    typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1FEXTPROC)(GLuint program, GLint location, GLfloat v0);
+    typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2FEXTPROC)(GLuint program, GLint location, GLfloat v0, GLfloat v1);
+    typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3FEXTPROC)(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
+    typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4FEXTPROC)(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
+    typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1IEXTPROC)(GLuint program, GLint location, GLint v0);
+    typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2IEXTPROC)(GLuint program, GLint location, GLint v0, GLint v1);
+    typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3IEXTPROC)(GLuint program, GLint location, GLint v0, GLint v1, GLint v2);
+    typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4IEXTPROC)(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
+    typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1FVEXTPROC)(GLuint program, GLint location, GLsizei count, const GLfloat *value);
+    typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2FVEXTPROC)(GLuint program, GLint location, GLsizei count, const GLfloat *value);
+    typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3FVEXTPROC)(GLuint program, GLint location, GLsizei count, const GLfloat *value);
+    typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4FVEXTPROC)(GLuint program, GLint location, GLsizei count, const GLfloat *value);
+    typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1IVEXTPROC)(GLuint program, GLint location, GLsizei count, const GLint *value);
+    typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2IVEXTPROC)(GLuint program, GLint location, GLsizei count, const GLint *value);
+    typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3IVEXTPROC)(GLuint program, GLint location, GLsizei count, const GLint *value);
+    typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4IVEXTPROC)(GLuint program, GLint location, GLsizei count, const GLint *value);
+    typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX2FVEXTPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
+    typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX3FVEXTPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
+    typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX4FVEXTPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
+    typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX2X3FVEXTPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
+    typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX3X2FVEXTPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
+    typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX2X4FVEXTPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
+    typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX4X2FVEXTPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
+    typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX3X4FVEXTPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
+    typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX4X3FVEXTPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
+    typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1UIEXTPROC)(GLuint program, GLint location, GLuint v0);
+    typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2UIEXTPROC)(GLuint program, GLint location, GLuint v0, GLuint v1);
+    typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3UIEXTPROC)(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2);
+    typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4UIEXTPROC)(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
+    typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1UIVEXTPROC)(GLuint program, GLint location, GLsizei count, const GLuint *value);
+    typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2UIVEXTPROC)(GLuint program, GLint location, GLsizei count, const GLuint *value);
+    typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3UIVEXTPROC)(GLuint program, GLint location, GLsizei count, const GLuint *value);
+    typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4UIVEXTPROC)(GLuint program, GLint location, GLsizei count, const GLuint *value);
+    typedef void (APIENTRYP PFNGLNAMEDBUFFERDATAEXTPROC)(GLuint buffer, GLsizeiptr size, const GLvoid *data, GLenum usage);
+    typedef void (APIENTRYP PFNGLNAMEDBUFFERSUBDATAEXTPROC)(GLuint buffer, GLintptr offset, GLsizeiptr size, const GLvoid *data);
+    typedef GLvoid* (APIENTRYP PFNGLMAPNAMEDBUFFEREXTPROC)(GLuint buffer, GLenum access);
+    typedef GLboolean(APIENTRYP PFNGLUNMAPNAMEDBUFFEREXTPROC)(GLuint buffer);
+    typedef GLvoid* (APIENTRYP PFNGLMAPNAMEDBUFFERRANGEEXTPROC)(GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access);
+    typedef void (APIENTRYP PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEEXTPROC)(GLuint buffer, GLintptr offset, GLsizeiptr length);
+    typedef void (APIENTRYP PFNGLNAMEDCOPYBUFFERSUBDATAEXTPROC)(GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
+    typedef void (APIENTRYP PFNGLGETNAMEDBUFFERPARAMETERIVEXTPROC)(GLuint buffer, GLenum pname, GLint *params);
+    typedef void (APIENTRYP PFNGLGETNAMEDBUFFERPOINTERVEXTPROC)(GLuint buffer, GLenum pname, GLvoid* *params);
+    typedef void (APIENTRYP PFNGLGETNAMEDBUFFERSUBDATAEXTPROC)(GLuint buffer, GLintptr offset, GLsizeiptr size, GLvoid *data);
+    typedef void (APIENTRYP PFNGLTEXTUREBUFFEREXTPROC)(GLuint texture, GLenum target, GLenum internalformat, GLuint buffer);
+    typedef void (APIENTRYP PFNGLMULTITEXBUFFEREXTPROC)(GLenum texunit, GLenum target, GLenum internalformat, GLuint buffer);
+    typedef void (APIENTRYP PFNGLNAMEDRENDERBUFFERSTORAGEEXTPROC)(GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height);
+    typedef void (APIENTRYP PFNGLGETNAMEDRENDERBUFFERPARAMETERIVEXTPROC)(GLuint renderbuffer, GLenum pname, GLint *params);
+    typedef GLenum(APIENTRYP PFNGLCHECKNAMEDFRAMEBUFFERSTATUSEXTPROC)(GLuint framebuffer, GLenum target);
+    typedef void (APIENTRYP PFNGLNAMEDFRAMEBUFFERTEXTURE1DEXTPROC)(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
+    typedef void (APIENTRYP PFNGLNAMEDFRAMEBUFFERTEXTURE2DEXTPROC)(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
+    typedef void (APIENTRYP PFNGLNAMEDFRAMEBUFFERTEXTURE3DEXTPROC)(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);
+    typedef void (APIENTRYP PFNGLNAMEDFRAMEBUFFERRENDERBUFFEREXTPROC)(GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
+    typedef void (APIENTRYP PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC)(GLuint framebuffer, GLenum attachment, GLenum pname, GLint *params);
+    typedef void (APIENTRYP PFNGLGENERATETEXTUREMIPMAPEXTPROC)(GLuint texture, GLenum target);
+    typedef void (APIENTRYP PFNGLGENERATEMULTITEXMIPMAPEXTPROC)(GLenum texunit, GLenum target);
+    typedef void (APIENTRYP PFNGLFRAMEBUFFERDRAWBUFFEREXTPROC)(GLuint framebuffer, GLenum mode);
+    typedef void (APIENTRYP PFNGLFRAMEBUFFERDRAWBUFFERSEXTPROC)(GLuint framebuffer, GLsizei n, const GLenum *bufs);
+    typedef void (APIENTRYP PFNGLFRAMEBUFFERREADBUFFEREXTPROC)(GLuint framebuffer, GLenum mode);
+    typedef void (APIENTRYP PFNGLGETFRAMEBUFFERPARAMETERIVEXTPROC)(GLuint framebuffer, GLenum pname, GLint *params);
+    typedef void (APIENTRYP PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC)(GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
+    typedef void (APIENTRYP PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLECOVERAGEEXTPROC)(GLuint renderbuffer, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height);
+    typedef void (APIENTRYP PFNGLNAMEDFRAMEBUFFERTEXTUREEXTPROC)(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level);
+    typedef void (APIENTRYP PFNGLNAMEDFRAMEBUFFERTEXTURELAYEREXTPROC)(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer);
+    typedef void (APIENTRYP PFNGLNAMEDFRAMEBUFFERTEXTUREFACEEXTPROC)(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLenum face);
+    typedef void (APIENTRYP PFNGLTEXTURERENDERBUFFEREXTPROC)(GLuint texture, GLenum target, GLuint renderbuffer);
+    typedef void (APIENTRYP PFNGLMULTITEXRENDERBUFFEREXTPROC)(GLenum texunit, GLenum target, GLuint renderbuffer);
+    typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1DEXTPROC)(GLuint program, GLint location, GLdouble x);
+    typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2DEXTPROC)(GLuint program, GLint location, GLdouble x, GLdouble y);
+    typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3DEXTPROC)(GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z);
+    typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4DEXTPROC)(GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
+    typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1DVEXTPROC)(GLuint program, GLint location, GLsizei count, const GLdouble *value);
+    typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2DVEXTPROC)(GLuint program, GLint location, GLsizei count, const GLdouble *value);
+    typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3DVEXTPROC)(GLuint program, GLint location, GLsizei count, const GLdouble *value);
+    typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4DVEXTPROC)(GLuint program, GLint location, GLsizei count, const GLdouble *value);
+    typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX2DVEXTPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
+    typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX3DVEXTPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
+    typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX4DVEXTPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
+    typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX2X3DVEXTPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
+    typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX2X4DVEXTPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
+    typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX3X2DVEXTPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
+    typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX3X4DVEXTPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
+    typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX4X2DVEXTPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
+    typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX4X3DVEXTPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
+#endif
+
+#ifndef GL_EXT_vertex_array_bgra
+#define GL_EXT_vertex_array_bgra 1
+#endif
+
+#ifndef GL_EXT_texture_swizzle
+#define GL_EXT_texture_swizzle 1
+#endif
+
+#ifndef GL_NV_explicit_multisample
+#define GL_NV_explicit_multisample 1
+#ifdef GL_GLEXT_PROTOTYPES
+    GLAPI void APIENTRY glGetMultisamplefvNV(GLenum pname, GLuint index, GLfloat *val);
+    GLAPI void APIENTRY glSampleMaskIndexedNV(GLuint index, GLbitfield mask);
+    GLAPI void APIENTRY glTexRenderbufferNV(GLenum target, GLuint renderbuffer);
+#endif /* GL_GLEXT_PROTOTYPES */
+    typedef void (APIENTRYP PFNGLGETMULTISAMPLEFVNVPROC)(GLenum pname, GLuint index, GLfloat *val);
+    typedef void (APIENTRYP PFNGLSAMPLEMASKINDEXEDNVPROC)(GLuint index, GLbitfield mask);
+    typedef void (APIENTRYP PFNGLTEXRENDERBUFFERNVPROC)(GLenum target, GLuint renderbuffer);
+#endif
+
+#ifndef GL_NV_transform_feedback2
+#define GL_NV_transform_feedback2 1
+#ifdef GL_GLEXT_PROTOTYPES
+    GLAPI void APIENTRY glBindTransformFeedbackNV(GLenum target, GLuint id);
+    GLAPI void APIENTRY glDeleteTransformFeedbacksNV(GLsizei n, const GLuint *ids);
+    GLAPI void APIENTRY glGenTransformFeedbacksNV(GLsizei n, GLuint *ids);
+    GLAPI GLboolean APIENTRY glIsTransformFeedbackNV(GLuint id);
+    GLAPI void APIENTRY glPauseTransformFeedbackNV(void);
+    GLAPI void APIENTRY glResumeTransformFeedbackNV(void);
+    GLAPI void APIENTRY glDrawTransformFeedbackNV(GLenum mode, GLuint id);
+#endif /* GL_GLEXT_PROTOTYPES */
+    typedef void (APIENTRYP PFNGLBINDTRANSFORMFEEDBACKNVPROC)(GLenum target, GLuint id);
+    typedef void (APIENTRYP PFNGLDELETETRANSFORMFEEDBACKSNVPROC)(GLsizei n, const GLuint *ids);
+    typedef void (APIENTRYP PFNGLGENTRANSFORMFEEDBACKSNVPROC)(GLsizei n, GLuint *ids);
+    typedef GLboolean(APIENTRYP PFNGLISTRANSFORMFEEDBACKNVPROC)(GLuint id);
+    typedef void (APIENTRYP PFNGLPAUSETRANSFORMFEEDBACKNVPROC)(void);
+    typedef void (APIENTRYP PFNGLRESUMETRANSFORMFEEDBACKNVPROC)(void);
+    typedef void (APIENTRYP PFNGLDRAWTRANSFORMFEEDBACKNVPROC)(GLenum mode, GLuint id);
+#endif
+
+#ifndef GL_ATI_meminfo
+#define GL_ATI_meminfo 1
+#endif
+
+#ifndef GL_AMD_performance_monitor
+#define GL_AMD_performance_monitor 1
+#ifdef GL_GLEXT_PROTOTYPES
+    GLAPI void APIENTRY glGetPerfMonitorGroupsAMD(GLint *numGroups, GLsizei groupsSize, GLuint *groups);
+    GLAPI void APIENTRY glGetPerfMonitorCountersAMD(GLuint group, GLint *numCounters, GLint *maxActiveCounters, GLsizei counterSize, GLuint *counters);
+    GLAPI void APIENTRY glGetPerfMonitorGroupStringAMD(GLuint group, GLsizei bufSize, GLsizei *length, GLchar *groupString);
+    GLAPI void APIENTRY glGetPerfMonitorCounterStringAMD(GLuint group, GLuint counter, GLsizei bufSize, GLsizei *length, GLchar *counterString);
+    GLAPI void APIENTRY glGetPerfMonitorCounterInfoAMD(GLuint group, GLuint counter, GLenum pname, GLvoid *data);
+    GLAPI void APIENTRY glGenPerfMonitorsAMD(GLsizei n, GLuint *monitors);
+    GLAPI void APIENTRY glDeletePerfMonitorsAMD(GLsizei n, GLuint *monitors);
+    GLAPI void APIENTRY glSelectPerfMonitorCountersAMD(GLuint monitor, GLboolean enable, GLuint group, GLint numCounters, GLuint *counterList);
+    GLAPI void APIENTRY glBeginPerfMonitorAMD(GLuint monitor);
+    GLAPI void APIENTRY glEndPerfMonitorAMD(GLuint monitor);
+    GLAPI void APIENTRY glGetPerfMonitorCounterDataAMD(GLuint monitor, GLenum pname, GLsizei dataSize, GLuint *data, GLint *bytesWritten);
+#endif /* GL_GLEXT_PROTOTYPES */
+    typedef void (APIENTRYP PFNGLGETPERFMONITORGROUPSAMDPROC)(GLint *numGroups, GLsizei groupsSize, GLuint *groups);
+    typedef void (APIENTRYP PFNGLGETPERFMONITORCOUNTERSAMDPROC)(GLuint group, GLint *numCounters, GLint *maxActiveCounters, GLsizei counterSize, GLuint *counters);
+    typedef void (APIENTRYP PFNGLGETPERFMONITORGROUPSTRINGAMDPROC)(GLuint group, GLsizei bufSize, GLsizei *length, GLchar *groupString);
+    typedef void (APIENTRYP PFNGLGETPERFMONITORCOUNTERSTRINGAMDPROC)(GLuint group, GLuint counter, GLsizei bufSize, GLsizei *length, GLchar *counterString);
+    typedef void (APIENTRYP PFNGLGETPERFMONITORCOUNTERINFOAMDPROC)(GLuint group, GLuint counter, GLenum pname, GLvoid *data);
+    typedef void (APIENTRYP PFNGLGENPERFMONITORSAMDPROC)(GLsizei n, GLuint *monitors);
+    typedef void (APIENTRYP PFNGLDELETEPERFMONITORSAMDPROC)(GLsizei n, GLuint *monitors);
+    typedef void (APIENTRYP PFNGLSELECTPERFMONITORCOUNTERSAMDPROC)(GLuint monitor, GLboolean enable, GLuint group, GLint numCounters, GLuint *counterList);
+    typedef void (APIENTRYP PFNGLBEGINPERFMONITORAMDPROC)(GLuint monitor);
+    typedef void (APIENTRYP PFNGLENDPERFMONITORAMDPROC)(GLuint monitor);
+    typedef void (APIENTRYP PFNGLGETPERFMONITORCOUNTERDATAAMDPROC)(GLuint monitor, GLenum pname, GLsizei dataSize, GLuint *data, GLint *bytesWritten);
+#endif
+
+#ifndef GL_AMD_texture_texture4
+#define GL_AMD_texture_texture4 1
+#endif
+
+#ifndef GL_AMD_vertex_shader_tesselator
+#define GL_AMD_vertex_shader_tesselator 1
+#ifdef GL_GLEXT_PROTOTYPES
+    GLAPI void APIENTRY glTessellationFactorAMD(GLfloat factor);
+    GLAPI void APIENTRY glTessellationModeAMD(GLenum mode);
+#endif /* GL_GLEXT_PROTOTYPES */
+    typedef void (APIENTRYP PFNGLTESSELLATIONFACTORAMDPROC)(GLfloat factor);
+    typedef void (APIENTRYP PFNGLTESSELLATIONMODEAMDPROC)(GLenum mode);
+#endif
+
+#ifndef GL_EXT_provoking_vertex
+#define GL_EXT_provoking_vertex 1
+#ifdef GL_GLEXT_PROTOTYPES
+    GLAPI void APIENTRY glProvokingVertexEXT(GLenum mode);
+#endif /* GL_GLEXT_PROTOTYPES */
+    typedef void (APIENTRYP PFNGLPROVOKINGVERTEXEXTPROC)(GLenum mode);
+#endif
+
+#ifndef GL_EXT_texture_snorm
+#define GL_EXT_texture_snorm 1
+#endif
+
+#ifndef GL_AMD_draw_buffers_blend
+#define GL_AMD_draw_buffers_blend 1
+#ifdef GL_GLEXT_PROTOTYPES
+    GLAPI void APIENTRY glBlendFuncIndexedAMD(GLuint buf, GLenum src, GLenum dst);
+    GLAPI void APIENTRY glBlendFuncSeparateIndexedAMD(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
+    GLAPI void APIENTRY glBlendEquationIndexedAMD(GLuint buf, GLenum mode);
+    GLAPI void APIENTRY glBlendEquationSeparateIndexedAMD(GLuint buf, GLenum modeRGB, GLenum modeAlpha);
+#endif /* GL_GLEXT_PROTOTYPES */
+    typedef void (APIENTRYP PFNGLBLENDFUNCINDEXEDAMDPROC)(GLuint buf, GLenum src, GLenum dst);
+    typedef void (APIENTRYP PFNGLBLENDFUNCSEPARATEINDEXEDAMDPROC)(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
+    typedef void (APIENTRYP PFNGLBLENDEQUATIONINDEXEDAMDPROC)(GLuint buf, GLenum mode);
+    typedef void (APIENTRYP PFNGLBLENDEQUATIONSEPARATEINDEXEDAMDPROC)(GLuint buf, GLenum modeRGB, GLenum modeAlpha);
+#endif
+
+#ifndef GL_APPLE_texture_range
+#define GL_APPLE_texture_range 1
+#ifdef GL_GLEXT_PROTOTYPES
+    GLAPI void APIENTRY glTextureRangeAPPLE(GLenum target, GLsizei length, const GLvoid *pointer);
+    GLAPI void APIENTRY glGetTexParameterPointervAPPLE(GLenum target, GLenum pname, GLvoid* *params);
+#endif /* GL_GLEXT_PROTOTYPES */
+    typedef void (APIENTRYP PFNGLTEXTURERANGEAPPLEPROC)(GLenum target, GLsizei length, const GLvoid *pointer);
+    typedef void (APIENTRYP PFNGLGETTEXPARAMETERPOINTERVAPPLEPROC)(GLenum target, GLenum pname, GLvoid* *params);
+#endif
+
+#ifndef GL_APPLE_float_pixels
+#define GL_APPLE_float_pixels 1
+#endif
+
+#ifndef GL_APPLE_vertex_program_evaluators
+#define GL_APPLE_vertex_program_evaluators 1
+#ifdef GL_GLEXT_PROTOTYPES
+    GLAPI void APIENTRY glEnableVertexAttribAPPLE(GLuint index, GLenum pname);
+    GLAPI void APIENTRY glDisableVertexAttribAPPLE(GLuint index, GLenum pname);
+    GLAPI GLboolean APIENTRY glIsVertexAttribEnabledAPPLE(GLuint index, GLenum pname);
+    GLAPI void APIENTRY glMapVertexAttrib1dAPPLE(GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *points);
+    GLAPI void APIENTRY glMapVertexAttrib1fAPPLE(GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *points);
+    GLAPI void APIENTRY glMapVertexAttrib2dAPPLE(GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble *points);
+    GLAPI void APIENTRY glMapVertexAttrib2fAPPLE(GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat *points);
+#endif /* GL_GLEXT_PROTOTYPES */
+    typedef void (APIENTRYP PFNGLENABLEVERTEXATTRIBAPPLEPROC)(GLuint index, GLenum pname);
+    typedef void (APIENTRYP PFNGLDISABLEVERTEXATTRIBAPPLEPROC)(GLuint index, GLenum pname);
+    typedef GLboolean(APIENTRYP PFNGLISVERTEXATTRIBENABLEDAPPLEPROC)(GLuint index, GLenum pname);
+    typedef void (APIENTRYP PFNGLMAPVERTEXATTRIB1DAPPLEPROC)(GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *points);
+    typedef void (APIENTRYP PFNGLMAPVERTEXATTRIB1FAPPLEPROC)(GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *points);
+    typedef void (APIENTRYP PFNGLMAPVERTEXATTRIB2DAPPLEPROC)(GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble *points);
+    typedef void (APIENTRYP PFNGLMAPVERTEXATTRIB2FAPPLEPROC)(GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat *points);
+#endif
+
+#ifndef GL_APPLE_aux_depth_stencil
+#define GL_APPLE_aux_depth_stencil 1
+#endif
+
+#ifndef GL_APPLE_object_purgeable
+#define GL_APPLE_object_purgeable 1
+#ifdef GL_GLEXT_PROTOTYPES
+    GLAPI GLenum APIENTRY glObjectPurgeableAPPLE(GLenum objectType, GLuint name, GLenum option);
+    GLAPI GLenum APIENTRY glObjectUnpurgeableAPPLE(GLenum objectType, GLuint name, GLenum option);
+    GLAPI void APIENTRY glGetObjectParameterivAPPLE(GLenum objectType, GLuint name, GLenum pname, GLint *params);
+#endif /* GL_GLEXT_PROTOTYPES */
+    typedef GLenum(APIENTRYP PFNGLOBJECTPURGEABLEAPPLEPROC)(GLenum objectType, GLuint name, GLenum option);
+    typedef GLenum(APIENTRYP PFNGLOBJECTUNPURGEABLEAPPLEPROC)(GLenum objectType, GLuint name, GLenum option);
+    typedef void (APIENTRYP PFNGLGETOBJECTPARAMETERIVAPPLEPROC)(GLenum objectType, GLuint name, GLenum pname, GLint *params);
+#endif
+
+#ifndef GL_APPLE_row_bytes
+#define GL_APPLE_row_bytes 1
+#endif
+
+#ifndef GL_APPLE_rgb_422
+#define GL_APPLE_rgb_422 1
+#endif
+
+#ifndef GL_NV_video_capture
+#define GL_NV_video_capture 1
+#ifdef GL_GLEXT_PROTOTYPES
+    GLAPI void APIENTRY glBeginVideoCaptureNV(GLuint video_capture_slot);
+    GLAPI void APIENTRY glBindVideoCaptureStreamBufferNV(GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLintptrARB offset);
+    GLAPI void APIENTRY glBindVideoCaptureStreamTextureNV(GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLenum target, GLuint texture);
+    GLAPI void APIENTRY glEndVideoCaptureNV(GLuint video_capture_slot);
+    GLAPI void APIENTRY glGetVideoCaptureivNV(GLuint video_capture_slot, GLenum pname, GLint *params);
+    GLAPI void APIENTRY glGetVideoCaptureStreamivNV(GLuint video_capture_slot, GLuint stream, GLenum pname, GLint *params);
+    GLAPI void APIENTRY glGetVideoCaptureStreamfvNV(GLuint video_capture_slot, GLuint stream, GLenum pname, GLfloat *params);
+    GLAPI void APIENTRY glGetVideoCaptureStreamdvNV(GLuint video_capture_slot, GLuint stream, GLenum pname, GLdouble *params);
+    GLAPI GLenum APIENTRY glVideoCaptureNV(GLuint video_capture_slot, GLuint *sequence_num, GLuint64EXT *capture_time);
+    GLAPI void APIENTRY glVideoCaptureStreamParameterivNV(GLuint video_capture_slot, GLuint stream, GLenum pname, const GLint *params);
+    GLAPI void APIENTRY glVideoCaptureStreamParameterfvNV(GLuint video_capture_slot, GLuint stream, GLenum pname, const GLfloat *params);
+    GLAPI void APIENTRY glVideoCaptureStreamParameterdvNV(GLuint video_capture_slot, GLuint stream, GLenum pname, const GLdouble *params);
+#endif /* GL_GLEXT_PROTOTYPES */
+    typedef void (APIENTRYP PFNGLBEGINVIDEOCAPTURENVPROC)(GLuint video_capture_slot);
+    typedef void (APIENTRYP PFNGLBINDVIDEOCAPTURESTREAMBUFFERNVPROC)(GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLintptrARB offset);
+    typedef void (APIENTRYP PFNGLBINDVIDEOCAPTURESTREAMTEXTURENVPROC)(GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLenum target, GLuint texture);
+    typedef void (APIENTRYP PFNGLENDVIDEOCAPTURENVPROC)(GLuint video_capture_slot);
+    typedef void (APIENTRYP PFNGLGETVIDEOCAPTUREIVNVPROC)(GLuint video_capture_slot, GLenum pname, GLint *params);
+    typedef void (APIENTRYP PFNGLGETVIDEOCAPTURESTREAMIVNVPROC)(GLuint video_capture_slot, GLuint stream, GLenum pname, GLint *params);
+    typedef void (APIENTRYP PFNGLGETVIDEOCAPTURESTREAMFVNVPROC)(GLuint video_capture_slot, GLuint stream, GLenum pname, GLfloat *params);
+    typedef void (APIENTRYP PFNGLGETVIDEOCAPTURESTREAMDVNVPROC)(GLuint video_capture_slot, GLuint stream, GLenum pname, GLdouble *params);
+    typedef GLenum(APIENTRYP PFNGLVIDEOCAPTURENVPROC)(GLuint video_capture_slot, GLuint *sequence_num, GLuint64EXT *capture_time);
+    typedef void (APIENTRYP PFNGLVIDEOCAPTURESTREAMPARAMETERIVNVPROC)(GLuint video_capture_slot, GLuint stream, GLenum pname, const GLint *params);
+    typedef void (APIENTRYP PFNGLVIDEOCAPTURESTREAMPARAMETERFVNVPROC)(GLuint video_capture_slot, GLuint stream, GLenum pname, const GLfloat *params);
+    typedef void (APIENTRYP PFNGLVIDEOCAPTURESTREAMPARAMETERDVNVPROC)(GLuint video_capture_slot, GLuint stream, GLenum pname, const GLdouble *params);
+#endif
+
+#ifndef GL_NV_copy_image
+#define GL_NV_copy_image 1
+#ifdef GL_GLEXT_PROTOTYPES
+    GLAPI void APIENTRY glCopyImageSubDataNV(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth);
+#endif /* GL_GLEXT_PROTOTYPES */
+    typedef void (APIENTRYP PFNGLCOPYIMAGESUBDATANVPROC)(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth);
+#endif
+
+#ifndef GL_EXT_separate_shader_objects
+#define GL_EXT_separate_shader_objects 1
+#ifdef GL_GLEXT_PROTOTYPES
+    GLAPI void APIENTRY glUseShaderProgramEXT(GLenum type, GLuint program);
+    GLAPI void APIENTRY glActiveProgramEXT(GLuint program);
+    GLAPI GLuint APIENTRY glCreateShaderProgramEXT(GLenum type, const GLchar *string);
+#endif /* GL_GLEXT_PROTOTYPES */
+    typedef void (APIENTRYP PFNGLUSESHADERPROGRAMEXTPROC)(GLenum type, GLuint program);
+    typedef void (APIENTRYP PFNGLACTIVEPROGRAMEXTPROC)(GLuint program);
+    typedef GLuint(APIENTRYP PFNGLCREATESHADERPROGRAMEXTPROC)(GLenum type, const GLchar *string);
+#endif
+
+#ifndef GL_NV_parameter_buffer_object2
+#define GL_NV_parameter_buffer_object2 1
+#endif
+
+#ifndef GL_NV_shader_buffer_load
+#define GL_NV_shader_buffer_load 1
+#ifdef GL_GLEXT_PROTOTYPES
+    GLAPI void APIENTRY glMakeBufferResidentNV(GLenum target, GLenum access);
+    GLAPI void APIENTRY glMakeBufferNonResidentNV(GLenum target);
+    GLAPI GLboolean APIENTRY glIsBufferResidentNV(GLenum target);
+    GLAPI void APIENTRY glMakeNamedBufferResidentNV(GLuint buffer, GLenum access);
+    GLAPI void APIENTRY glMakeNamedBufferNonResidentNV(GLuint buffer);
+    GLAPI GLboolean APIENTRY glIsNamedBufferResidentNV(GLuint buffer);
+    GLAPI void APIENTRY glGetBufferParameterui64vNV(GLenum target, GLenum pname, GLuint64EXT *params);
+    GLAPI void APIENTRY glGetNamedBufferParameterui64vNV(GLuint buffer, GLenum pname, GLuint64EXT *params);
+    GLAPI void APIENTRY glGetIntegerui64vNV(GLenum value, GLuint64EXT *result);
+    GLAPI void APIENTRY glUniformui64NV(GLint location, GLuint64EXT value);
+    GLAPI void APIENTRY glUniformui64vNV(GLint location, GLsizei count, const GLuint64EXT *value);
+    GLAPI void APIENTRY glGetUniformui64vNV(GLuint program, GLint location, GLuint64EXT *params);
+    GLAPI void APIENTRY glProgramUniformui64NV(GLuint program, GLint location, GLuint64EXT value);
+    GLAPI void APIENTRY glProgramUniformui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64EXT *value);
+#endif /* GL_GLEXT_PROTOTYPES */
+    typedef void (APIENTRYP PFNGLMAKEBUFFERRESIDENTNVPROC)(GLenum target, GLenum access);
+    typedef void (APIENTRYP PFNGLMAKEBUFFERNONRESIDENTNVPROC)(GLenum target);
+    typedef GLboolean(APIENTRYP PFNGLISBUFFERRESIDENTNVPROC)(GLenum target);
+    typedef void (APIENTRYP PFNGLMAKENAMEDBUFFERRESIDENTNVPROC)(GLuint buffer, GLenum access);
+    typedef void (APIENTRYP PFNGLMAKENAMEDBUFFERNONRESIDENTNVPROC)(GLuint buffer);
+    typedef GLboolean(APIENTRYP PFNGLISNAMEDBUFFERRESIDENTNVPROC)(GLuint buffer);
+    typedef void (APIENTRYP PFNGLGETBUFFERPARAMETERUI64VNVPROC)(GLenum target, GLenum pname, GLuint64EXT *params);
+    typedef void (APIENTRYP PFNGLGETNAMEDBUFFERPARAMETERUI64VNVPROC)(GLuint buffer, GLenum pname, GLuint64EXT *params);
+    typedef void (APIENTRYP PFNGLGETINTEGERUI64VNVPROC)(GLenum value, GLuint64EXT *result);
+    typedef void (APIENTRYP PFNGLUNIFORMUI64NVPROC)(GLint location, GLuint64EXT value);
+    typedef void (APIENTRYP PFNGLUNIFORMUI64VNVPROC)(GLint location, GLsizei count, const GLuint64EXT *value);
+    typedef void (APIENTRYP PFNGLGETUNIFORMUI64VNVPROC)(GLuint program, GLint location, GLuint64EXT *params);
+    typedef void (APIENTRYP PFNGLPROGRAMUNIFORMUI64NVPROC)(GLuint program, GLint location, GLuint64EXT value);
+    typedef void (APIENTRYP PFNGLPROGRAMUNIFORMUI64VNVPROC)(GLuint program, GLint location, GLsizei count, const GLuint64EXT *value);
+#endif
+
+#ifndef GL_NV_vertex_buffer_unified_memory
+#define GL_NV_vertex_buffer_unified_memory 1
+#ifdef GL_GLEXT_PROTOTYPES
+    GLAPI void APIENTRY glBufferAddressRangeNV(GLenum pname, GLuint index, GLuint64EXT address, GLsizeiptr length);
+    GLAPI void APIENTRY glVertexFormatNV(GLint size, GLenum type, GLsizei stride);
+    GLAPI void APIENTRY glNormalFormatNV(GLenum type, GLsizei stride);
+    GLAPI void APIENTRY glColorFormatNV(GLint size, GLenum type, GLsizei stride);
+    GLAPI void APIENTRY glIndexFormatNV(GLenum type, GLsizei stride);
+    GLAPI void APIENTRY glTexCoordFormatNV(GLint size, GLenum type, GLsizei stride);
+    GLAPI void APIENTRY glEdgeFlagFormatNV(GLsizei stride);
+    GLAPI void APIENTRY glSecondaryColorFormatNV(GLint size, GLenum type, GLsizei stride);
+    GLAPI void APIENTRY glFogCoordFormatNV(GLenum type, GLsizei stride);
+    GLAPI void APIENTRY glVertexAttribFormatNV(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride);
+    GLAPI void APIENTRY glVertexAttribIFormatNV(GLuint index, GLint size, GLenum type, GLsizei stride);
+    GLAPI void APIENTRY glGetIntegerui64i_vNV(GLenum value, GLuint index, GLuint64EXT *result);
+#endif /* GL_GLEXT_PROTOTYPES */
+    typedef void (APIENTRYP PFNGLBUFFERADDRESSRANGENVPROC)(GLenum pname, GLuint index, GLuint64EXT address, GLsizeiptr length);
+    typedef void (APIENTRYP PFNGLVERTEXFORMATNVPROC)(GLint size, GLenum type, GLsizei stride);
+    typedef void (APIENTRYP PFNGLNORMALFORMATNVPROC)(GLenum type, GLsizei stride);
+    typedef void (APIENTRYP PFNGLCOLORFORMATNVPROC)(GLint size, GLenum type, GLsizei stride);
+    typedef void (APIENTRYP PFNGLINDEXFORMATNVPROC)(GLenum type, GLsizei stride);
+    typedef void (APIENTRYP PFNGLTEXCOORDFORMATNVPROC)(GLint size, GLenum type, GLsizei stride);
+    typedef void (APIENTRYP PFNGLEDGEFLAGFORMATNVPROC)(GLsizei stride);
+    typedef void (APIENTRYP PFNGLSECONDARYCOLORFORMATNVPROC)(GLint size, GLenum type, GLsizei stride);
+    typedef void (APIENTRYP PFNGLFOGCOORDFORMATNVPROC)(GLenum type, GLsizei stride);
+    typedef void (APIENTRYP PFNGLVERTEXATTRIBFORMATNVPROC)(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride);
+    typedef void (APIENTRYP PFNGLVERTEXATTRIBIFORMATNVPROC)(GLuint index, GLint size, GLenum type, GLsizei stride);
+    typedef void (APIENTRYP PFNGLGETINTEGERUI64I_VNVPROC)(GLenum value, GLuint index, GLuint64EXT *result);
+#endif
+
+#ifndef GL_NV_texture_barrier
+#define GL_NV_texture_barrier 1
+#ifdef GL_GLEXT_PROTOTYPES
+    GLAPI void APIENTRY glTextureBarrierNV(void);
+#endif /* GL_GLEXT_PROTOTYPES */
+    typedef void (APIENTRYP PFNGLTEXTUREBARRIERNVPROC)(void);
+#endif
+
+#ifndef GL_AMD_shader_stencil_export
+#define GL_AMD_shader_stencil_export 1
+#endif
+
+#ifndef GL_AMD_seamless_cubemap_per_texture
+#define GL_AMD_seamless_cubemap_per_texture 1
+#endif
+
+#ifndef GL_AMD_conservative_depth
+#define GL_AMD_conservative_depth 1
+#endif
+
+#ifndef GL_EXT_shader_image_load_store
+#define GL_EXT_shader_image_load_store 1
+#ifdef GL_GLEXT_PROTOTYPES
+    GLAPI void APIENTRY glBindImageTextureEXT(GLuint index, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLint format);
+    GLAPI void APIENTRY glMemoryBarrierEXT(GLbitfield barriers);
+#endif /* GL_GLEXT_PROTOTYPES */
+    typedef void (APIENTRYP PFNGLBINDIMAGETEXTUREEXTPROC)(GLuint index, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLint format);
+    typedef void (APIENTRYP PFNGLMEMORYBARRIEREXTPROC)(GLbitfield barriers);
+#endif
+
+#ifndef GL_EXT_vertex_attrib_64bit
+#define GL_EXT_vertex_attrib_64bit 1
+#ifdef GL_GLEXT_PROTOTYPES
+    GLAPI void APIENTRY glVertexAttribL1dEXT(GLuint index, GLdouble x);
+    GLAPI void APIENTRY glVertexAttribL2dEXT(GLuint index, GLdouble x, GLdouble y);
+    GLAPI void APIENTRY glVertexAttribL3dEXT(GLuint index, GLdouble x, GLdouble y, GLdouble z);
+    GLAPI void APIENTRY glVertexAttribL4dEXT(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
+    GLAPI void APIENTRY glVertexAttribL1dvEXT(GLuint index, const GLdouble *v);
+    GLAPI void APIENTRY glVertexAttribL2dvEXT(GLuint index, const GLdouble *v);
+    GLAPI void APIENTRY glVertexAttribL3dvEXT(GLuint index, const GLdouble *v);
+    GLAPI void APIENTRY glVertexAttribL4dvEXT(GLuint index, const GLdouble *v);
+    GLAPI void APIENTRY glVertexAttribLPointerEXT(GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
+    GLAPI void APIENTRY glGetVertexAttribLdvEXT(GLuint index, GLenum pname, GLdouble *params);
+    GLAPI void APIENTRY glVertexArrayVertexAttribLOffsetEXT(GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset);
+#endif /* GL_GLEXT_PROTOTYPES */
+    typedef void (APIENTRYP PFNGLVERTEXATTRIBL1DEXTPROC)(GLuint index, GLdouble x);
+    typedef void (APIENTRYP PFNGLVERTEXATTRIBL2DEXTPROC)(GLuint index, GLdouble x, GLdouble y);
+    typedef void (APIENTRYP PFNGLVERTEXATTRIBL3DEXTPROC)(GLuint index, GLdouble x, GLdouble y, GLdouble z);
+    typedef void (APIENTRYP PFNGLVERTEXATTRIBL4DEXTPROC)(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
+    typedef void (APIENTRYP PFNGLVERTEXATTRIBL1DVEXTPROC)(GLuint index, const GLdouble *v);
+    typedef void (APIENTRYP PFNGLVERTEXATTRIBL2DVEXTPROC)(GLuint index, const GLdouble *v);
+    typedef void (APIENTRYP PFNGLVERTEXATTRIBL3DVEXTPROC)(GLuint index, const GLdouble *v);
+    typedef void (APIENTRYP PFNGLVERTEXATTRIBL4DVEXTPROC)(GLuint index, const GLdouble *v);
+    typedef void (APIENTRYP PFNGLVERTEXATTRIBLPOINTEREXTPROC)(GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
+    typedef void (APIENTRYP PFNGLGETVERTEXATTRIBLDVEXTPROC)(GLuint index, GLenum pname, GLdouble *params);
+    typedef void (APIENTRYP PFNGLVERTEXARRAYVERTEXATTRIBLOFFSETEXTPROC)(GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset);
+#endif
+
+#ifndef GL_NV_gpu_program5
+#define GL_NV_gpu_program5 1
+#ifdef GL_GLEXT_PROTOTYPES
+    GLAPI void APIENTRY glProgramSubroutineParametersuivNV(GLenum target, GLsizei count, const GLuint *params);
+    GLAPI void APIENTRY glGetProgramSubroutineParameteruivNV(GLenum target, GLuint index, GLuint *param);
+#endif /* GL_GLEXT_PROTOTYPES */
+    typedef void (APIENTRYP PFNGLPROGRAMSUBROUTINEPARAMETERSUIVNVPROC)(GLenum target, GLsizei count, const GLuint *params);
+    typedef void (APIENTRYP PFNGLGETPROGRAMSUBROUTINEPARAMETERUIVNVPROC)(GLenum target, GLuint index, GLuint *param);
+#endif
+
+#ifndef GL_NV_gpu_shader5
+#define GL_NV_gpu_shader5 1
+#ifdef GL_GLEXT_PROTOTYPES
+    GLAPI void APIENTRY glUniform1i64NV(GLint location, GLint64EXT x);
+    GLAPI void APIENTRY glUniform2i64NV(GLint location, GLint64EXT x, GLint64EXT y);
+    GLAPI void APIENTRY glUniform3i64NV(GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z);
+    GLAPI void APIENTRY glUniform4i64NV(GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w);
+    GLAPI void APIENTRY glUniform1i64vNV(GLint location, GLsizei count, const GLint64EXT *value);
+    GLAPI void APIENTRY glUniform2i64vNV(GLint location, GLsizei count, const GLint64EXT *value);
+    GLAPI void APIENTRY glUniform3i64vNV(GLint location, GLsizei count, const GLint64EXT *value);
+    GLAPI void APIENTRY glUniform4i64vNV(GLint location, GLsizei count, const GLint64EXT *value);
+    GLAPI void APIENTRY glUniform1ui64NV(GLint location, GLuint64EXT x);
+    GLAPI void APIENTRY glUniform2ui64NV(GLint location, GLuint64EXT x, GLuint64EXT y);
+    GLAPI void APIENTRY glUniform3ui64NV(GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z);
+    GLAPI void APIENTRY glUniform4ui64NV(GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w);
+    GLAPI void APIENTRY glUniform1ui64vNV(GLint location, GLsizei count, const GLuint64EXT *value);
+    GLAPI void APIENTRY glUniform2ui64vNV(GLint location, GLsizei count, const GLuint64EXT *value);
+    GLAPI void APIENTRY glUniform3ui64vNV(GLint location, GLsizei count, const GLuint64EXT *value);
+    GLAPI void APIENTRY glUniform4ui64vNV(GLint location, GLsizei count, const GLuint64EXT *value);
+    GLAPI void APIENTRY glGetUniformi64vNV(GLuint program, GLint location, GLint64EXT *params);
+    GLAPI void APIENTRY glProgramUniform1i64NV(GLuint program, GLint location, GLint64EXT x);
+    GLAPI void APIENTRY glProgramUniform2i64NV(GLuint program, GLint location, GLint64EXT x, GLint64EXT y);
+    GLAPI void APIENTRY glProgramUniform3i64NV(GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z);
+    GLAPI void APIENTRY glProgramUniform4i64NV(GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w);
+    GLAPI void APIENTRY glProgramUniform1i64vNV(GLuint program, GLint location, GLsizei count, const GLint64EXT *value);
+    GLAPI void APIENTRY glProgramUniform2i64vNV(GLuint program, GLint location, GLsizei count, const GLint64EXT *value);
+    GLAPI void APIENTRY glProgramUniform3i64vNV(GLuint program, GLint location, GLsizei count, const GLint64EXT *value);
+    GLAPI void APIENTRY glProgramUniform4i64vNV(GLuint program, GLint location, GLsizei count, const GLint64EXT *value);
+    GLAPI void APIENTRY glProgramUniform1ui64NV(GLuint program, GLint location, GLuint64EXT x);
+    GLAPI void APIENTRY glProgramUniform2ui64NV(GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y);
+    GLAPI void APIENTRY glProgramUniform3ui64NV(GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z);
+    GLAPI void APIENTRY glProgramUniform4ui64NV(GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w);
+    GLAPI void APIENTRY glProgramUniform1ui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64EXT *value);
+    GLAPI void APIENTRY glProgramUniform2ui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64EXT *value);
+    GLAPI void APIENTRY glProgramUniform3ui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64EXT *value);
+    GLAPI void APIENTRY glProgramUniform4ui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64EXT *value);
+#endif /* GL_GLEXT_PROTOTYPES */
+    typedef void (APIENTRYP PFNGLUNIFORM1I64NVPROC)(GLint location, GLint64EXT x);
+    typedef void (APIENTRYP PFNGLUNIFORM2I64NVPROC)(GLint location, GLint64EXT x, GLint64EXT y);
+    typedef void (APIENTRYP PFNGLUNIFORM3I64NVPROC)(GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z);
+    typedef void (APIENTRYP PFNGLUNIFORM4I64NVPROC)(GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w);
+    typedef void (APIENTRYP PFNGLUNIFORM1I64VNVPROC)(GLint location, GLsizei count, const GLint64EXT *value);
+    typedef void (APIENTRYP PFNGLUNIFORM2I64VNVPROC)(GLint location, GLsizei count, const GLint64EXT *value);
+    typedef void (APIENTRYP PFNGLUNIFORM3I64VNVPROC)(GLint location, GLsizei count, const GLint64EXT *value);
+    typedef void (APIENTRYP PFNGLUNIFORM4I64VNVPROC)(GLint location, GLsizei count, const GLint64EXT *value);
+    typedef void (APIENTRYP PFNGLUNIFORM1UI64NVPROC)(GLint location, GLuint64EXT x);
+    typedef void (APIENTRYP PFNGLUNIFORM2UI64NVPROC)(GLint location, GLuint64EXT x, GLuint64EXT y);
+    typedef void (APIENTRYP PFNGLUNIFORM3UI64NVPROC)(GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z);
+    typedef void (APIENTRYP PFNGLUNIFORM4UI64NVPROC)(GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w);
+    typedef void (APIENTRYP PFNGLUNIFORM1UI64VNVPROC)(GLint location, GLsizei count, const GLuint64EXT *value);
+    typedef void (APIENTRYP PFNGLUNIFORM2UI64VNVPROC)(GLint location, GLsizei count, const GLuint64EXT *value);
+    typedef void (APIENTRYP PFNGLUNIFORM3UI64VNVPROC)(GLint location, GLsizei count, const GLuint64EXT *value);
+    typedef void (APIENTRYP PFNGLUNIFORM4UI64VNVPROC)(GLint location, GLsizei count, const GLuint64EXT *value);
+    typedef void (APIENTRYP PFNGLGETUNIFORMI64VNVPROC)(GLuint program, GLint location, GLint64EXT *params);
+    typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1I64NVPROC)(GLuint program, GLint location, GLint64EXT x);
+    typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2I64NVPROC)(GLuint program, GLint location, GLint64EXT x, GLint64EXT y);
+    typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3I64NVPROC)(GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z);
+    typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4I64NVPROC)(GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w);
+    typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1I64VNVPROC)(GLuint program, GLint location, GLsizei count, const GLint64EXT *value);
+    typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2I64VNVPROC)(GLuint program, GLint location, GLsizei count, const GLint64EXT *value);
+    typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3I64VNVPROC)(GLuint program, GLint location, GLsizei count, const GLint64EXT *value);
+    typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4I64VNVPROC)(GLuint program, GLint location, GLsizei count, const GLint64EXT *value);
+    typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1UI64NVPROC)(GLuint program, GLint location, GLuint64EXT x);
+    typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2UI64NVPROC)(GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y);
+    typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3UI64NVPROC)(GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z);
+    typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4UI64NVPROC)(GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w);
+    typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1UI64VNVPROC)(GLuint program, GLint location, GLsizei count, const GLuint64EXT *value);
+    typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2UI64VNVPROC)(GLuint program, GLint location, GLsizei count, const GLuint64EXT *value);
+    typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3UI64VNVPROC)(GLuint program, GLint location, GLsizei count, const GLuint64EXT *value);
+    typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4UI64VNVPROC)(GLuint program, GLint location, GLsizei count, const GLuint64EXT *value);
+#endif
+
+#ifndef GL_NV_shader_buffer_store
+#define GL_NV_shader_buffer_store 1
+#endif
+
+#ifndef GL_NV_tessellation_program5
+#define GL_NV_tessellation_program5 1
+#endif
+
+#ifndef GL_NV_vertex_attrib_integer_64bit
+#define GL_NV_vertex_attrib_integer_64bit 1
+#ifdef GL_GLEXT_PROTOTYPES
+    GLAPI void APIENTRY glVertexAttribL1i64NV(GLuint index, GLint64EXT x);
+    GLAPI void APIENTRY glVertexAttribL2i64NV(GLuint index, GLint64EXT x, GLint64EXT y);
+    GLAPI void APIENTRY glVertexAttribL3i64NV(GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z);
+    GLAPI void APIENTRY glVertexAttribL4i64NV(GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w);
+    GLAPI void APIENTRY glVertexAttribL1i64vNV(GLuint index, const GLint64EXT *v);
+    GLAPI void APIENTRY glVertexAttribL2i64vNV(GLuint index, const GLint64EXT *v);
+    GLAPI void APIENTRY glVertexAttribL3i64vNV(GLuint index, const GLint64EXT *v);
+    GLAPI void APIENTRY glVertexAttribL4i64vNV(GLuint index, const GLint64EXT *v);
+    GLAPI void APIENTRY glVertexAttribL1ui64NV(GLuint index, GLuint64EXT x);
+    GLAPI void APIENTRY glVertexAttribL2ui64NV(GLuint index, GLuint64EXT x, GLuint64EXT y);
+    GLAPI void APIENTRY glVertexAttribL3ui64NV(GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z);
+    GLAPI void APIENTRY glVertexAttribL4ui64NV(GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w);
+    GLAPI void APIENTRY glVertexAttribL1ui64vNV(GLuint index, const GLuint64EXT *v);
+    GLAPI void APIENTRY glVertexAttribL2ui64vNV(GLuint index, const GLuint64EXT *v);
+    GLAPI void APIENTRY glVertexAttribL3ui64vNV(GLuint index, const GLuint64EXT *v);
+    GLAPI void APIENTRY glVertexAttribL4ui64vNV(GLuint index, const GLuint64EXT *v);
+    GLAPI void APIENTRY glGetVertexAttribLi64vNV(GLuint index, GLenum pname, GLint64EXT *params);
+    GLAPI void APIENTRY glGetVertexAttribLui64vNV(GLuint index, GLenum pname, GLuint64EXT *params);
+    GLAPI void APIENTRY glVertexAttribLFormatNV(GLuint index, GLint size, GLenum type, GLsizei stride);
+#endif /* GL_GLEXT_PROTOTYPES */
+    typedef void (APIENTRYP PFNGLVERTEXATTRIBL1I64NVPROC)(GLuint index, GLint64EXT x);
+    typedef void (APIENTRYP PFNGLVERTEXATTRIBL2I64NVPROC)(GLuint index, GLint64EXT x, GLint64EXT y);
+    typedef void (APIENTRYP PFNGLVERTEXATTRIBL3I64NVPROC)(GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z);
+    typedef void (APIENTRYP PFNGLVERTEXATTRIBL4I64NVPROC)(GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w);
+    typedef void (APIENTRYP PFNGLVERTEXATTRIBL1I64VNVPROC)(GLuint index, const GLint64EXT *v);
+    typedef void (APIENTRYP PFNGLVERTEXATTRIBL2I64VNVPROC)(GLuint index, const GLint64EXT *v);
+    typedef void (APIENTRYP PFNGLVERTEXATTRIBL3I64VNVPROC)(GLuint index, const GLint64EXT *v);
+    typedef void (APIENTRYP PFNGLVERTEXATTRIBL4I64VNVPROC)(GLuint index, const GLint64EXT *v);
+    typedef void (APIENTRYP PFNGLVERTEXATTRIBL1UI64NVPROC)(GLuint index, GLuint64EXT x);
+    typedef void (APIENTRYP PFNGLVERTEXATTRIBL2UI64NVPROC)(GLuint index, GLuint64EXT x, GLuint64EXT y);
+    typedef void (APIENTRYP PFNGLVERTEXATTRIBL3UI64NVPROC)(GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z);
+    typedef void (APIENTRYP PFNGLVERTEXATTRIBL4UI64NVPROC)(GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w);
+    typedef void (APIENTRYP PFNGLVERTEXATTRIBL1UI64VNVPROC)(GLuint index, const GLuint64EXT *v);
+    typedef void (APIENTRYP PFNGLVERTEXATTRIBL2UI64VNVPROC)(GLuint index, const GLuint64EXT *v);
+    typedef void (APIENTRYP PFNGLVERTEXATTRIBL3UI64VNVPROC)(GLuint index, const GLuint64EXT *v);
+    typedef void (APIENTRYP PFNGLVERTEXATTRIBL4UI64VNVPROC)(GLuint index, const GLuint64EXT *v);
+    typedef void (APIENTRYP PFNGLGETVERTEXATTRIBLI64VNVPROC)(GLuint index, GLenum pname, GLint64EXT *params);
+    typedef void (APIENTRYP PFNGLGETVERTEXATTRIBLUI64VNVPROC)(GLuint index, GLenum pname, GLuint64EXT *params);
+    typedef void (APIENTRYP PFNGLVERTEXATTRIBLFORMATNVPROC)(GLuint index, GLint size, GLenum type, GLsizei stride);
+#endif
+
+#ifndef GL_NV_multisample_coverage
+#define GL_NV_multisample_coverage 1
+#endif
+
+#ifndef GL_AMD_name_gen_delete
+#define GL_AMD_name_gen_delete 1
+#ifdef GL_GLEXT_PROTOTYPES
+    GLAPI void APIENTRY glGenNamesAMD(GLenum identifier, GLuint num, GLuint *names);
+    GLAPI void APIENTRY glDeleteNamesAMD(GLenum identifier, GLuint num, const GLuint *names);
+    GLAPI GLboolean APIENTRY glIsNameAMD(GLenum identifier, GLuint name);
+#endif /* GL_GLEXT_PROTOTYPES */
+    typedef void (APIENTRYP PFNGLGENNAMESAMDPROC)(GLenum identifier, GLuint num, GLuint *names);
+    typedef void (APIENTRYP PFNGLDELETENAMESAMDPROC)(GLenum identifier, GLuint num, const GLuint *names);
+    typedef GLboolean(APIENTRYP PFNGLISNAMEAMDPROC)(GLenum identifier, GLuint name);
+#endif
+
+#ifndef GL_AMD_debug_output
+#define GL_AMD_debug_output 1
+#ifdef GL_GLEXT_PROTOTYPES
+    GLAPI void APIENTRY glDebugMessageEnableAMD(GLenum category, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled);
+    GLAPI void APIENTRY glDebugMessageInsertAMD(GLenum category, GLenum severity, GLuint id, GLsizei length, const GLchar *buf);
+    GLAPI void APIENTRY glDebugMessageCallbackAMD(GLDEBUGPROCAMD callback, GLvoid *userParam);
+    GLAPI GLuint APIENTRY glGetDebugMessageLogAMD(GLuint count, GLsizei bufsize, GLenum *categories, GLuint *severities, GLuint *ids, GLsizei *lengths, GLchar *message);
+#endif /* GL_GLEXT_PROTOTYPES */
+    typedef void (APIENTRYP PFNGLDEBUGMESSAGEENABLEAMDPROC)(GLenum category, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled);
+    typedef void (APIENTRYP PFNGLDEBUGMESSAGEINSERTAMDPROC)(GLenum category, GLenum severity, GLuint id, GLsizei length, const GLchar *buf);
+    typedef void (APIENTRYP PFNGLDEBUGMESSAGECALLBACKAMDPROC)(GLDEBUGPROCAMD callback, GLvoid *userParam);
+    typedef GLuint(APIENTRYP PFNGLGETDEBUGMESSAGELOGAMDPROC)(GLuint count, GLsizei bufsize, GLenum *categories, GLuint *severities, GLuint *ids, GLsizei *lengths, GLchar *message);
+#endif
+
+#ifndef GL_NV_vdpau_interop
+#define GL_NV_vdpau_interop 1
+#ifdef GL_GLEXT_PROTOTYPES
+    GLAPI void APIENTRY glVDPAUInitNV(const GLvoid *vdpDevice, const GLvoid *getProcAddress);
+    GLAPI void APIENTRY glVDPAUFiniNV(void);
+    GLAPI GLvdpauSurfaceNV APIENTRY glVDPAURegisterVideoSurfaceNV(GLvoid *vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint *textureNames);
+    GLAPI GLvdpauSurfaceNV APIENTRY glVDPAURegisterOutputSurfaceNV(GLvoid *vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint *textureNames);
+    GLAPI void APIENTRY glVDPAUIsSurfaceNV(GLvdpauSurfaceNV surface);
+    GLAPI void APIENTRY glVDPAUUnregisterSurfaceNV(GLvdpauSurfaceNV surface);
+    GLAPI void APIENTRY glVDPAUGetSurfaceivNV(GLvdpauSurfaceNV surface, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values);
+    GLAPI void APIENTRY glVDPAUSurfaceAccessNV(GLvdpauSurfaceNV surface, GLenum access);
+    GLAPI void APIENTRY glVDPAUMapSurfacesNV(GLsizei numSurfaces, const GLvdpauSurfaceNV *surfaces);
+    GLAPI void APIENTRY glVDPAUUnmapSurfacesNV(GLsizei numSurface, const GLvdpauSurfaceNV *surfaces);
+#endif /* GL_GLEXT_PROTOTYPES */
+    typedef void (APIENTRYP PFNGLVDPAUINITNVPROC)(const GLvoid *vdpDevice, const GLvoid *getProcAddress);
+    typedef void (APIENTRYP PFNGLVDPAUFININVPROC)(void);
+    typedef GLvdpauSurfaceNV(APIENTRYP PFNGLVDPAUREGISTERVIDEOSURFACENVPROC)(GLvoid *vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint *textureNames);
+    typedef GLvdpauSurfaceNV(APIENTRYP PFNGLVDPAUREGISTEROUTPUTSURFACENVPROC)(GLvoid *vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint *textureNames);
+    typedef void (APIENTRYP PFNGLVDPAUISSURFACENVPROC)(GLvdpauSurfaceNV surface);
+    typedef void (APIENTRYP PFNGLVDPAUUNREGISTERSURFACENVPROC)(GLvdpauSurfaceNV surface);
+    typedef void (APIENTRYP PFNGLVDPAUGETSURFACEIVNVPROC)(GLvdpauSurfaceNV surface, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values);
+    typedef void (APIENTRYP PFNGLVDPAUSURFACEACCESSNVPROC)(GLvdpauSurfaceNV surface, GLenum access);
+    typedef void (APIENTRYP PFNGLVDPAUMAPSURFACESNVPROC)(GLsizei numSurfaces, const GLvdpauSurfaceNV *surfaces);
+    typedef void (APIENTRYP PFNGLVDPAUUNMAPSURFACESNVPROC)(GLsizei numSurface, const GLvdpauSurfaceNV *surfaces);
+#endif
+
+#ifndef GL_AMD_transform_feedback3_lines_triangles
+#define GL_AMD_transform_feedback3_lines_triangles 1
+#endif
+
+#ifndef GL_AMD_depth_clamp_separate
+#define GL_AMD_depth_clamp_separate 1
+#endif
+
+#ifndef GL_EXT_texture_sRGB_decode
+#define GL_EXT_texture_sRGB_decode 1
+#endif
+
+#ifndef GL_NV_texture_multisample
+#define GL_NV_texture_multisample 1
+#ifdef GL_GLEXT_PROTOTYPES
+    GLAPI void APIENTRY glTexImage2DMultisampleCoverageNV(GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations);
+    GLAPI void APIENTRY glTexImage3DMultisampleCoverageNV(GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations);
+    GLAPI void APIENTRY glTextureImage2DMultisampleNV(GLuint texture, GLenum target, GLsizei samples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations);
+    GLAPI void APIENTRY glTextureImage3DMultisampleNV(GLuint texture, GLenum target, GLsizei samples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations);
+    GLAPI void APIENTRY glTextureImage2DMultisampleCoverageNV(GLuint texture, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations);
+    GLAPI void APIENTRY glTextureImage3DMultisampleCoverageNV(GLuint texture, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations);
+#endif /* GL_GLEXT_PROTOTYPES */
+    typedef void (APIENTRYP PFNGLTEXIMAGE2DMULTISAMPLECOVERAGENVPROC)(GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations);
+    typedef void (APIENTRYP PFNGLTEXIMAGE3DMULTISAMPLECOVERAGENVPROC)(GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations);
+    typedef void (APIENTRYP PFNGLTEXTUREIMAGE2DMULTISAMPLENVPROC)(GLuint texture, GLenum target, GLsizei samples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations);
+    typedef void (APIENTRYP PFNGLTEXTUREIMAGE3DMULTISAMPLENVPROC)(GLuint texture, GLenum target, GLsizei samples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations);
+    typedef void (APIENTRYP PFNGLTEXTUREIMAGE2DMULTISAMPLECOVERAGENVPROC)(GLuint texture, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations);
+    typedef void (APIENTRYP PFNGLTEXTUREIMAGE3DMULTISAMPLECOVERAGENVPROC)(GLuint texture, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations);
+#endif
+
+#ifndef GL_AMD_blend_minmax_factor
+#define GL_AMD_blend_minmax_factor 1
+#endif
+
+#ifndef GL_AMD_sample_positions
+#define GL_AMD_sample_positions 1
+#ifdef GL_GLEXT_PROTOTYPES
+    GLAPI void APIENTRY glSetMultisamplefvAMD(GLenum pname, GLuint index, const GLfloat *val);
+#endif /* GL_GLEXT_PROTOTYPES */
+    typedef void (APIENTRYP PFNGLSETMULTISAMPLEFVAMDPROC)(GLenum pname, GLuint index, const GLfloat *val);
+#endif
+
+#ifndef GL_EXT_x11_sync_object
+#define GL_EXT_x11_sync_object 1
+#ifdef GL_GLEXT_PROTOTYPES
+    GLAPI GLsync APIENTRY glImportSyncEXT(GLenum external_sync_type, GLintptr external_sync, GLbitfield flags);
+#endif /* GL_GLEXT_PROTOTYPES */
+    typedef GLsync(APIENTRYP PFNGLIMPORTSYNCEXTPROC)(GLenum external_sync_type, GLintptr external_sync, GLbitfield flags);
+#endif
+
+#ifndef GL_AMD_multi_draw_indirect
+#define GL_AMD_multi_draw_indirect 1
+#ifdef GL_GLEXT_PROTOTYPES
+    GLAPI void APIENTRY glMultiDrawArraysIndirectAMD(GLenum mode, const GLvoid *indirect, GLsizei primcount, GLsizei stride);
+    GLAPI void APIENTRY glMultiDrawElementsIndirectAMD(GLenum mode, GLenum type, const GLvoid *indirect, GLsizei primcount, GLsizei stride);
+#endif /* GL_GLEXT_PROTOTYPES */
+    typedef void (APIENTRYP PFNGLMULTIDRAWARRAYSINDIRECTAMDPROC)(GLenum mode, const GLvoid *indirect, GLsizei primcount, GLsizei stride);
+    typedef void (APIENTRYP PFNGLMULTIDRAWELEMENTSINDIRECTAMDPROC)(GLenum mode, GLenum type, const GLvoid *indirect, GLsizei primcount, GLsizei stride);
+#endif
+
+#ifndef GL_EXT_framebuffer_multisample_blit_scaled
+#define GL_EXT_framebuffer_multisample_blit_scaled 1
+#endif
+
+#ifndef GL_NV_path_rendering
+#define GL_NV_path_rendering 1
+#ifdef GL_GLEXT_PROTOTYPES
+    GLAPI GLuint APIENTRY glGenPathsNV(GLsizei range);
+    GLAPI void APIENTRY glDeletePathsNV(GLuint path, GLsizei range);
+    GLAPI GLboolean APIENTRY glIsPathNV(GLuint path);
+    GLAPI void APIENTRY glPathCommandsNV(GLuint path, GLsizei numCommands, const GLubyte *commands, GLsizei numCoords, GLenum coordType, const GLvoid *coords);
+    GLAPI void APIENTRY glPathCoordsNV(GLuint path, GLsizei numCoords, GLenum coordType, const GLvoid *coords);
+    GLAPI void APIENTRY glPathSubCommandsNV(GLuint path, GLsizei commandStart, GLsizei commandsToDelete, GLsizei numCommands, const GLubyte *commands, GLsizei numCoords, GLenum coordType, const GLvoid *coords);
+    GLAPI void APIENTRY glPathSubCoordsNV(GLuint path, GLsizei coordStart, GLsizei numCoords, GLenum coordType, const GLvoid *coords);
+    GLAPI void APIENTRY glPathStringNV(GLuint path, GLenum format, GLsizei length, const GLvoid *pathString);
+    GLAPI void APIENTRY glPathGlyphsNV(GLuint firstPathName, GLenum fontTarget, const GLvoid *fontName, GLbitfield fontStyle, GLsizei numGlyphs, GLenum type, const GLvoid *charcodes, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale);
+    GLAPI void APIENTRY glPathGlyphRangeNV(GLuint firstPathName, GLenum fontTarget, const GLvoid *fontName, GLbitfield fontStyle, GLuint firstGlyph, GLsizei numGlyphs, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale);
+    GLAPI void APIENTRY glWeightPathsNV(GLuint resultPath, GLsizei numPaths, const GLuint *paths, const GLfloat *weights);
+    GLAPI void APIENTRY glCopyPathNV(GLuint resultPath, GLuint srcPath);
+    GLAPI void APIENTRY glInterpolatePathsNV(GLuint resultPath, GLuint pathA, GLuint pathB, GLfloat weight);
+    GLAPI void APIENTRY glTransformPathNV(GLuint resultPath, GLuint srcPath, GLenum transformType, const GLfloat *transformValues);
+    GLAPI void APIENTRY glPathParameterivNV(GLuint path, GLenum pname, const GLint *value);
+    GLAPI void APIENTRY glPathParameteriNV(GLuint path, GLenum pname, GLint value);
+    GLAPI void APIENTRY glPathParameterfvNV(GLuint path, GLenum pname, const GLfloat *value);
+    GLAPI void APIENTRY glPathParameterfNV(GLuint path, GLenum pname, GLfloat value);
+    GLAPI void APIENTRY glPathDashArrayNV(GLuint path, GLsizei dashCount, const GLfloat *dashArray);
+    GLAPI void APIENTRY glPathStencilFuncNV(GLenum func, GLint ref, GLuint mask);
+    GLAPI void APIENTRY glPathStencilDepthOffsetNV(GLfloat factor, GLfloat units);
+    GLAPI void APIENTRY glStencilFillPathNV(GLuint path, GLenum fillMode, GLuint mask);
+    GLAPI void APIENTRY glStencilStrokePathNV(GLuint path, GLint reference, GLuint mask);
+    GLAPI void APIENTRY glStencilFillPathInstancedNV(GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum transformType, const GLfloat *transformValues);
+    GLAPI void APIENTRY glStencilStrokePathInstancedNV(GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLint reference, GLuint mask, GLenum transformType, const GLfloat *transformValues);
+    GLAPI void APIENTRY glPathCoverDepthFuncNV(GLenum func);
+    GLAPI void APIENTRY glPathColorGenNV(GLenum color, GLenum genMode, GLenum colorFormat, const GLfloat *coeffs);
+    GLAPI void APIENTRY glPathTexGenNV(GLenum texCoordSet, GLenum genMode, GLint components, const GLfloat *coeffs);
+    GLAPI void APIENTRY glPathFogGenNV(GLenum genMode);
+    GLAPI void APIENTRY glCoverFillPathNV(GLuint path, GLenum coverMode);
+    GLAPI void APIENTRY glCoverStrokePathNV(GLuint path, GLenum coverMode);
+    GLAPI void APIENTRY glCoverFillPathInstancedNV(GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues);
+    GLAPI void APIENTRY glCoverStrokePathInstancedNV(GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues);
+    GLAPI void APIENTRY glGetPathParameterivNV(GLuint path, GLenum pname, GLint *value);
+    GLAPI void APIENTRY glGetPathParameterfvNV(GLuint path, GLenum pname, GLfloat *value);
+    GLAPI void APIENTRY glGetPathCommandsNV(GLuint path, GLubyte *commands);
+    GLAPI void APIENTRY glGetPathCoordsNV(GLuint path, GLfloat *coords);
+    GLAPI void APIENTRY glGetPathDashArrayNV(GLuint path, GLfloat *dashArray);
+    GLAPI void APIENTRY glGetPathMetricsNV(GLbitfield metricQueryMask, GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLsizei stride, GLfloat *metrics);
+    GLAPI void APIENTRY glGetPathMetricRangeNV(GLbitfield metricQueryMask, GLuint firstPathName, GLsizei numPaths, GLsizei stride, GLfloat *metrics);
+    GLAPI void APIENTRY glGetPathSpacingNV(GLenum pathListMode, GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLfloat advanceScale, GLfloat kerningScale, GLenum transformType, GLfloat *returnedSpacing);
+    GLAPI void APIENTRY glGetPathColorGenivNV(GLenum color, GLenum pname, GLint *value);
+    GLAPI void APIENTRY glGetPathColorGenfvNV(GLenum color, GLenum pname, GLfloat *value);
+    GLAPI void APIENTRY glGetPathTexGenivNV(GLenum texCoordSet, GLenum pname, GLint *value);
+    GLAPI void APIENTRY glGetPathTexGenfvNV(GLenum texCoordSet, GLenum pname, GLfloat *value);
+    GLAPI GLboolean APIENTRY glIsPointInFillPathNV(GLuint path, GLuint mask, GLfloat x, GLfloat y);
+    GLAPI GLboolean APIENTRY glIsPointInStrokePathNV(GLuint path, GLfloat x, GLfloat y);
+    GLAPI GLfloat APIENTRY glGetPathLengthNV(GLuint path, GLsizei startSegment, GLsizei numSegments);
+    GLAPI GLboolean APIENTRY glPointAlongPathNV(GLuint path, GLsizei startSegment, GLsizei numSegments, GLfloat distance, GLfloat *x, GLfloat *y, GLfloat *tangentX, GLfloat *tangentY);
+#endif /* GL_GLEXT_PROTOTYPES */
+    typedef GLuint(APIENTRYP PFNGLGENPATHSNVPROC)(GLsizei range);
+    typedef void (APIENTRYP PFNGLDELETEPATHSNVPROC)(GLuint path, GLsizei range);
+    typedef GLboolean(APIENTRYP PFNGLISPATHNVPROC)(GLuint path);
+    typedef void (APIENTRYP PFNGLPATHCOMMANDSNVPROC)(GLuint path, GLsizei numCommands, const GLubyte *commands, GLsizei numCoords, GLenum coordType, const GLvoid *coords);
+    typedef void (APIENTRYP PFNGLPATHCOORDSNVPROC)(GLuint path, GLsizei numCoords, GLenum coordType, const GLvoid *coords);
+    typedef void (APIENTRYP PFNGLPATHSUBCOMMANDSNVPROC)(GLuint path, GLsizei commandStart, GLsizei commandsToDelete, GLsizei numCommands, const GLubyte *commands, GLsizei numCoords, GLenum coordType, const GLvoid *coords);
+    typedef void (APIENTRYP PFNGLPATHSUBCOORDSNVPROC)(GLuint path, GLsizei coordStart, GLsizei numCoords, GLenum coordType, const GLvoid *coords);
+    typedef void (APIENTRYP PFNGLPATHSTRINGNVPROC)(GLuint path, GLenum format, GLsizei length, const GLvoid *pathString);
+    typedef void (APIENTRYP PFNGLPATHGLYPHSNVPROC)(GLuint firstPathName, GLenum fontTarget, const GLvoid *fontName, GLbitfield fontStyle, GLsizei numGlyphs, GLenum type, const GLvoid *charcodes, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale);
+    typedef void (APIENTRYP PFNGLPATHGLYPHRANGENVPROC)(GLuint firstPathName, GLenum fontTarget, const GLvoid *fontName, GLbitfield fontStyle, GLuint firstGlyph, GLsizei numGlyphs, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale);
+    typedef void (APIENTRYP PFNGLWEIGHTPATHSNVPROC)(GLuint resultPath, GLsizei numPaths, const GLuint *paths, const GLfloat *weights);
+    typedef void (APIENTRYP PFNGLCOPYPATHNVPROC)(GLuint resultPath, GLuint srcPath);
+    typedef void (APIENTRYP PFNGLINTERPOLATEPATHSNVPROC)(GLuint resultPath, GLuint pathA, GLuint pathB, GLfloat weight);
+    typedef void (APIENTRYP PFNGLTRANSFORMPATHNVPROC)(GLuint resultPath, GLuint srcPath, GLenum transformType, const GLfloat *transformValues);
+    typedef void (APIENTRYP PFNGLPATHPARAMETERIVNVPROC)(GLuint path, GLenum pname, const GLint *value);
+    typedef void (APIENTRYP PFNGLPATHPARAMETERINVPROC)(GLuint path, GLenum pname, GLint value);
+    typedef void (APIENTRYP PFNGLPATHPARAMETERFVNVPROC)(GLuint path, GLenum pname, const GLfloat *value);
+    typedef void (APIENTRYP PFNGLPATHPARAMETERFNVPROC)(GLuint path, GLenum pname, GLfloat value);
+    typedef void (APIENTRYP PFNGLPATHDASHARRAYNVPROC)(GLuint path, GLsizei dashCount, const GLfloat *dashArray);
+    typedef void (APIENTRYP PFNGLPATHSTENCILFUNCNVPROC)(GLenum func, GLint ref, GLuint mask);
+    typedef void (APIENTRYP PFNGLPATHSTENCILDEPTHOFFSETNVPROC)(GLfloat factor, GLfloat units);
+    typedef void (APIENTRYP PFNGLSTENCILFILLPATHNVPROC)(GLuint path, GLenum fillMode, GLuint mask);
+    typedef void (APIENTRYP PFNGLSTENCILSTROKEPATHNVPROC)(GLuint path, GLint reference, GLuint mask);
+    typedef void (APIENTRYP PFNGLSTENCILFILLPATHINSTANCEDNVPROC)(GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum transformType, const GLfloat *transformValues);
+    typedef void (APIENTRYP PFNGLSTENCILSTROKEPATHINSTANCEDNVPROC)(GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLint reference, GLuint mask, GLenum transformType, const GLfloat *transformValues);
+    typedef void (APIENTRYP PFNGLPATHCOVERDEPTHFUNCNVPROC)(GLenum func);
+    typedef void (APIENTRYP PFNGLPATHCOLORGENNVPROC)(GLenum color, GLenum genMode, GLenum colorFormat, const GLfloat *coeffs);
+    typedef void (APIENTRYP PFNGLPATHTEXGENNVPROC)(GLenum texCoordSet, GLenum genMode, GLint components, const GLfloat *coeffs);
+    typedef void (APIENTRYP PFNGLPATHFOGGENNVPROC)(GLenum genMode);
+    typedef void (APIENTRYP PFNGLCOVERFILLPATHNVPROC)(GLuint path, GLenum coverMode);
+    typedef void (APIENTRYP PFNGLCOVERSTROKEPATHNVPROC)(GLuint path, GLenum coverMode);
+    typedef void (APIENTRYP PFNGLCOVERFILLPATHINSTANCEDNVPROC)(GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues);
+    typedef void (APIENTRYP PFNGLCOVERSTROKEPATHINSTANCEDNVPROC)(GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues);
+    typedef void (APIENTRYP PFNGLGETPATHPARAMETERIVNVPROC)(GLuint path, GLenum pname, GLint *value);
+    typedef void (APIENTRYP PFNGLGETPATHPARAMETERFVNVPROC)(GLuint path, GLenum pname, GLfloat *value);
+    typedef void (APIENTRYP PFNGLGETPATHCOMMANDSNVPROC)(GLuint path, GLubyte *commands);
+    typedef void (APIENTRYP PFNGLGETPATHCOORDSNVPROC)(GLuint path, GLfloat *coords);
+    typedef void (APIENTRYP PFNGLGETPATHDASHARRAYNVPROC)(GLuint path, GLfloat *dashArray);
+    typedef void (APIENTRYP PFNGLGETPATHMETRICSNVPROC)(GLbitfield metricQueryMask, GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLsizei stride, GLfloat *metrics);
+    typedef void (APIENTRYP PFNGLGETPATHMETRICRANGENVPROC)(GLbitfield metricQueryMask, GLuint firstPathName, GLsizei numPaths, GLsizei stride, GLfloat *metrics);
+    typedef void (APIENTRYP PFNGLGETPATHSPACINGNVPROC)(GLenum pathListMode, GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLfloat advanceScale, GLfloat kerningScale, GLenum transformType, GLfloat *returnedSpacing);
+    typedef void (APIENTRYP PFNGLGETPATHCOLORGENIVNVPROC)(GLenum color, GLenum pname, GLint *value);
+    typedef void (APIENTRYP PFNGLGETPATHCOLORGENFVNVPROC)(GLenum color, GLenum pname, GLfloat *value);
+    typedef void (APIENTRYP PFNGLGETPATHTEXGENIVNVPROC)(GLenum texCoordSet, GLenum pname, GLint *value);
+    typedef void (APIENTRYP PFNGLGETPATHTEXGENFVNVPROC)(GLenum texCoordSet, GLenum pname, GLfloat *value);
+    typedef GLboolean(APIENTRYP PFNGLISPOINTINFILLPATHNVPROC)(GLuint path, GLuint mask, GLfloat x, GLfloat y);
+    typedef GLboolean(APIENTRYP PFNGLISPOINTINSTROKEPATHNVPROC)(GLuint path, GLfloat x, GLfloat y);
+    typedef GLfloat(APIENTRYP PFNGLGETPATHLENGTHNVPROC)(GLuint path, GLsizei startSegment, GLsizei numSegments);
+    typedef GLboolean(APIENTRYP PFNGLPOINTALONGPATHNVPROC)(GLuint path, GLsizei startSegment, GLsizei numSegments, GLfloat distance, GLfloat *x, GLfloat *y, GLfloat *tangentX, GLfloat *tangentY);
+#endif
+
+#ifndef GL_AMD_pinned_memory
+#define GL_AMD_pinned_memory 1
+#endif
+
+#ifndef GL_AMD_stencil_operation_extended
+#define GL_AMD_stencil_operation_extended 1
+#ifdef GL_GLEXT_PROTOTYPES
+    GLAPI void APIENTRY glStencilOpValueAMD(GLenum face, GLuint value);
+#endif /* GL_GLEXT_PROTOTYPES */
+    typedef void (APIENTRYP PFNGLSTENCILOPVALUEAMDPROC)(GLenum face, GLuint value);
+#endif
+
+#ifndef GL_AMD_vertex_shader_viewport_index
+#define GL_AMD_vertex_shader_viewport_index 1
+#endif
+
+#ifndef GL_AMD_vertex_shader_layer
+#define GL_AMD_vertex_shader_layer 1
+#endif
+
+#ifndef GL_NV_bindless_texture
+#define GL_NV_bindless_texture 1
+#ifdef GL_GLEXT_PROTOTYPES
+    GLAPI GLuint64 APIENTRY glGetTextureHandleNV(GLuint texture);
+    GLAPI GLuint64 APIENTRY glGetTextureSamplerHandleNV(GLuint texture, GLuint sampler);
+    GLAPI void APIENTRY glMakeTextureHandleResidentNV(GLuint64 handle);
+    GLAPI void APIENTRY glMakeTextureHandleNonResidentNV(GLuint64 handle);
+    GLAPI GLuint64 APIENTRY glGetImageHandleNV(GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format);
+    GLAPI void APIENTRY glMakeImageHandleResidentNV(GLuint64 handle, GLenum access);
+    GLAPI void APIENTRY glMakeImageHandleNonResidentNV(GLuint64 handle);
+    GLAPI void APIENTRY glUniformHandleui64NV(GLint location, GLuint64 value);
+    GLAPI void APIENTRY glUniformHandleui64vNV(GLint location, GLsizei count, const GLuint64 *value);
+    GLAPI void APIENTRY glProgramUniformHandleui64NV(GLuint program, GLint location, GLuint64 value);
+    GLAPI void APIENTRY glProgramUniformHandleui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64 *values);
+    GLAPI GLboolean APIENTRY glIsTextureHandleResidentNV(GLuint64 handle);
+    GLAPI GLboolean APIENTRY glIsImageHandleResidentNV(GLuint64 handle);
+#endif /* GL_GLEXT_PROTOTYPES */
+    typedef GLuint64(APIENTRYP PFNGLGETTEXTUREHANDLENVPROC)(GLuint texture);
+    typedef GLuint64(APIENTRYP PFNGLGETTEXTURESAMPLERHANDLENVPROC)(GLuint texture, GLuint sampler);
+    typedef void (APIENTRYP PFNGLMAKETEXTUREHANDLERESIDENTNVPROC)(GLuint64 handle);
+    typedef void (APIENTRYP PFNGLMAKETEXTUREHANDLENONRESIDENTNVPROC)(GLuint64 handle);
+    typedef GLuint64(APIENTRYP PFNGLGETIMAGEHANDLENVPROC)(GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format);
+    typedef void (APIENTRYP PFNGLMAKEIMAGEHANDLERESIDENTNVPROC)(GLuint64 handle, GLenum access);
+    typedef void (APIENTRYP PFNGLMAKEIMAGEHANDLENONRESIDENTNVPROC)(GLuint64 handle);
+    typedef void (APIENTRYP PFNGLUNIFORMHANDLEUI64NVPROC)(GLint location, GLuint64 value);
+    typedef void (APIENTRYP PFNGLUNIFORMHANDLEUI64VNVPROC)(GLint location, GLsizei count, const GLuint64 *value);
+    typedef void (APIENTRYP PFNGLPROGRAMUNIFORMHANDLEUI64NVPROC)(GLuint program, GLint location, GLuint64 value);
+    typedef void (APIENTRYP PFNGLPROGRAMUNIFORMHANDLEUI64VNVPROC)(GLuint program, GLint location, GLsizei count, const GLuint64 *values);
+    typedef GLboolean(APIENTRYP PFNGLISTEXTUREHANDLERESIDENTNVPROC)(GLuint64 handle);
+    typedef GLboolean(APIENTRYP PFNGLISIMAGEHANDLERESIDENTNVPROC)(GLuint64 handle);
+#endif
+
+#ifndef GL_NV_shader_atomic_float
+#define GL_NV_shader_atomic_float 1
+#endif
+
+
 #ifdef __cplusplus
 }
 #endif
diff -NEaurb neo/renderer/jpeg-6/jcapimin.c neo/renderer/jpeg-6/jcapimin.c
--- neo/renderer/jpeg-6/jcapimin.c	2011-12-26 04:15:38 +0000
+++ neo/renderer/jpeg-6/jcapimin.c	1970-01-01 00:00:00 +0000
@@ -1,228 +0,0 @@
-/*
- * jcapimin.c
- *
- * Copyright (C) 1994-1995, Thomas G. Lane.
- * This file is part of the Independent JPEG Group's software.
- * For conditions of distribution and use, see the accompanying README file.
- *
- * This file contains application interface code for the compression half
- * of the JPEG library.  These are the "minimum" API routines that may be
- * needed in either the normal full-compression case or the transcoding-only
- * case.
- *
- * Most of the routines intended to be called directly by an application
- * are in this file or in jcapistd.c.  But also see jcparam.c for
- * parameter-setup helper routines, jcomapi.c for routines shared by
- * compression and decompression, and jctrans.c for the transcoding case.
- */
-
-#define JPEG_INTERNALS
-#include "jinclude.h"
-#include "jpeglib.h"
-
-
-/*
- * Initialization of a JPEG compression object.
- * The error manager must already be set up (in case memory manager fails).
- */
-
-GLOBAL void
-jpeg_create_compress (j_compress_ptr cinfo)
-{
-  int i;
-
-  /* For debugging purposes, zero the whole master structure.
-   * But error manager pointer is already there, so save and restore it.
-   */
-  {
-    struct jpeg_error_mgr * err = cinfo->err;
-    MEMZERO(cinfo, SIZEOF(struct jpeg_compress_struct));
-    cinfo->err = err;
-  }
-  cinfo->is_decompressor = FALSE;
-
-  /* Initialize a memory manager instance for this object */
-  jinit_memory_mgr((j_common_ptr) cinfo);
-
-  /* Zero out pointers to permanent structures. */
-  cinfo->progress = NULL;
-  cinfo->dest = NULL;
-
-  cinfo->comp_info = NULL;
-
-  for (i = 0; i < NUM_QUANT_TBLS; i++)
-    cinfo->quant_tbl_ptrs[i] = NULL;
-
-  for (i = 0; i < NUM_HUFF_TBLS; i++) {
-    cinfo->dc_huff_tbl_ptrs[i] = NULL;
-    cinfo->ac_huff_tbl_ptrs[i] = NULL;
-  }
-
-  cinfo->input_gamma = 1.0;	/* in case application forgets */
-
-  /* OK, I'm ready */
-  cinfo->global_state = CSTATE_START;
-}
-
-
-/*
- * Destruction of a JPEG compression object
- */
-
-GLOBAL void
-jpeg_destroy_compress (j_compress_ptr cinfo)
-{
-  jpeg_destroy((j_common_ptr) cinfo); /* use common routine */
-}
-
-
-/*
- * Abort processing of a JPEG compression operation,
- * but don't destroy the object itself.
- */
-
-GLOBAL void
-jpeg_abort_compress (j_compress_ptr cinfo)
-{
-  jpeg_abort((j_common_ptr) cinfo); /* use common routine */
-}
-
-
-/*
- * Forcibly suppress or un-suppress all quantization and Huffman tables.
- * Marks all currently defined tables as already written (if suppress)
- * or not written (if !suppress).  This will control whether they get emitted
- * by a subsequent jpeg_start_compress call.
- *
- * This routine is exported for use by applications that want to produce
- * abbreviated JPEG datastreams.  It logically belongs in jcparam.c, but
- * since it is called by jpeg_start_compress, we put it here --- otherwise
- * jcparam.o would be linked whether the application used it or not.
- */
-
-GLOBAL void
-jpeg_suppress_tables (j_compress_ptr cinfo, boolean suppress)
-{
-  int i;
-  JQUANT_TBL * qtbl;
-  JHUFF_TBL * htbl;
-
-  for (i = 0; i < NUM_QUANT_TBLS; i++) {
-    if ((qtbl = cinfo->quant_tbl_ptrs[i]) != NULL)
-      qtbl->sent_table = suppress;
-  }
-
-  for (i = 0; i < NUM_HUFF_TBLS; i++) {
-    if ((htbl = cinfo->dc_huff_tbl_ptrs[i]) != NULL)
-      htbl->sent_table = suppress;
-    if ((htbl = cinfo->ac_huff_tbl_ptrs[i]) != NULL)
-      htbl->sent_table = suppress;
-  }
-}
-
-
-/*
- * Finish JPEG compression.
- *
- * If a multipass operating mode was selected, this may do a great deal of
- * work including most of the actual output.
- */
-
-GLOBAL void
-jpeg_finish_compress (j_compress_ptr cinfo)
-{
-  JDIMENSION iMCU_row;
-
-  if (cinfo->global_state == CSTATE_SCANNING ||
-      cinfo->global_state == CSTATE_RAW_OK) {
-    /* Terminate first pass */
-    if (cinfo->next_scanline < cinfo->image_height)
-      ERREXIT(cinfo, JERR_TOO_LITTLE_DATA);
-    (*cinfo->master->finish_pass) (cinfo);
-  } else if (cinfo->global_state != CSTATE_WRCOEFS)
-    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
-  /* Perform any remaining passes */
-  while (! cinfo->master->is_last_pass) {
-    (*cinfo->master->prepare_for_pass) (cinfo);
-    for (iMCU_row = 0; iMCU_row < cinfo->total_iMCU_rows; iMCU_row++) {
-      if (cinfo->progress != NULL) {
-	cinfo->progress->pass_counter = (long) iMCU_row;
-	cinfo->progress->pass_limit = (long) cinfo->total_iMCU_rows;
-	(*cinfo->progress->progress_monitor) ((j_common_ptr) cinfo);
-      }
-      /* We bypass the main controller and invoke coef controller directly;
-       * all work is being done from the coefficient buffer.
-       */
-      if (! (*cinfo->coef->compress_data) (cinfo, (JSAMPIMAGE) NULL))
-	ERREXIT(cinfo, JERR_CANT_SUSPEND);
-    }
-    (*cinfo->master->finish_pass) (cinfo);
-  }
-  /* Write EOI, do final cleanup */
-  (*cinfo->marker->write_file_trailer) (cinfo);
-  (*cinfo->dest->term_destination) (cinfo);
-  /* We can use jpeg_abort to release memory and reset global_state */
-  jpeg_abort((j_common_ptr) cinfo);
-}
-
-
-/*
- * Write a special marker.
- * This is only recommended for writing COM or APPn markers.
- * Must be called after jpeg_start_compress() and before
- * first call to jpeg_write_scanlines() or jpeg_write_raw_data().
- */
-
-GLOBAL void
-jpeg_write_marker (j_compress_ptr cinfo, int marker,
-		   const JOCTET *dataptr, unsigned int datalen)
-{
-  if (cinfo->next_scanline != 0 ||
-      (cinfo->global_state != CSTATE_SCANNING &&
-       cinfo->global_state != CSTATE_RAW_OK &&
-       cinfo->global_state != CSTATE_WRCOEFS))
-    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
-
-  (*cinfo->marker->write_any_marker) (cinfo, marker, dataptr, datalen);
-}
-
-
-/*
- * Alternate compression function: just write an abbreviated table file.
- * Before calling this, all parameters and a data destination must be set up.
- *
- * To produce a pair of files containing abbreviated tables and abbreviated
- * image data, one would proceed as follows:
- *
- *		initialize JPEG object
- *		set JPEG parameters
- *		set destination to table file
- *		jpeg_write_tables(cinfo);
- *		set destination to image file
- *		jpeg_start_compress(cinfo, FALSE);
- *		write data...
- *		jpeg_finish_compress(cinfo);
- *
- * jpeg_write_tables has the side effect of marking all tables written
- * (same as jpeg_suppress_tables(..., TRUE)).  Thus a subsequent start_compress
- * will not re-emit the tables unless it is passed write_all_tables=TRUE.
- */
-
-GLOBAL void
-jpeg_write_tables (j_compress_ptr cinfo)
-{
-  if (cinfo->global_state != CSTATE_START)
-    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
-
-  /* (Re)initialize error mgr and destination modules */
-  (*cinfo->err->reset_error_mgr) ((j_common_ptr) cinfo);
-  (*cinfo->dest->init_destination) (cinfo);
-  /* Initialize the marker writer ... bit of a crock to do it here. */
-  jinit_marker_writer(cinfo);
-  /* Write them tables! */
-  (*cinfo->marker->write_tables_only) (cinfo);
-  /* And clean up. */
-  (*cinfo->dest->term_destination) (cinfo);
-  /* We can use jpeg_abort to release memory. */
-  jpeg_abort((j_common_ptr) cinfo);
-}
diff -NEaurb neo/renderer/jpeg-6/jcapistd.c neo/renderer/jpeg-6/jcapistd.c
--- neo/renderer/jpeg-6/jcapistd.c	2011-12-26 04:15:38 +0000
+++ neo/renderer/jpeg-6/jcapistd.c	1970-01-01 00:00:00 +0000
@@ -1,161 +0,0 @@
-/*
- * jcapistd.c
- *
- * Copyright (C) 1994-1995, Thomas G. Lane.
- * This file is part of the Independent JPEG Group's software.
- * For conditions of distribution and use, see the accompanying README file.
- *
- * This file contains application interface code for the compression half
- * of the JPEG library.  These are the "standard" API routines that are
- * used in the normal full-compression case.  They are not used by a
- * transcoding-only application.  Note that if an application links in
- * jpeg_start_compress, it will end up linking in the entire compressor.
- * We thus must separate this file from jcapimin.c to avoid linking the
- * whole compression library into a transcoder.
- */
-
-#define JPEG_INTERNALS
-#include "jinclude.h"
-#include "jpeglib.h"
-
-
-/*
- * Compression initialization.
- * Before calling this, all parameters and a data destination must be set up.
- *
- * We require a write_all_tables parameter as a failsafe check when writing
- * multiple datastreams from the same compression object.  Since prior runs
- * will have left all the tables marked sent_table=TRUE, a subsequent run
- * would emit an abbreviated stream (no tables) by default.  This may be what
- * is wanted, but for safety's sake it should not be the default behavior:
- * programmers should have to make a deliberate choice to emit abbreviated
- * images.  Therefore the documentation and examples should encourage people
- * to pass write_all_tables=TRUE; then it will take active thought to do the
- * wrong thing.
- */
-
-GLOBAL void
-jpeg_start_compress (j_compress_ptr cinfo, boolean write_all_tables)
-{
-  if (cinfo->global_state != CSTATE_START)
-    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
-
-  if (write_all_tables)
-    jpeg_suppress_tables(cinfo, FALSE);	/* mark all tables to be written */
-
-  /* (Re)initialize error mgr and destination modules */
-  (*cinfo->err->reset_error_mgr) ((j_common_ptr) cinfo);
-  (*cinfo->dest->init_destination) (cinfo);
-  /* Perform master selection of active modules */
-  jinit_compress_master(cinfo);
-  /* Set up for the first pass */
-  (*cinfo->master->prepare_for_pass) (cinfo);
-  /* Ready for application to drive first pass through jpeg_write_scanlines
-   * or jpeg_write_raw_data.
-   */
-  cinfo->next_scanline = 0;
-  cinfo->global_state = (cinfo->raw_data_in ? CSTATE_RAW_OK : CSTATE_SCANNING);
-}
-
-
-/*
- * Write some scanlines of data to the JPEG compressor.
- *
- * The return value will be the number of lines actually written.
- * This should be less than the supplied num_lines only in case that
- * the data destination module has requested suspension of the compressor,
- * or if more than image_height scanlines are passed in.
- *
- * Note: we warn about excess calls to jpeg_write_scanlines() since
- * this likely signals an application programmer error.  However,
- * excess scanlines passed in the last valid call are *silently* ignored,
- * so that the application need not adjust num_lines for end-of-image
- * when using a multiple-scanline buffer.
- */
-
-GLOBAL JDIMENSION
-jpeg_write_scanlines (j_compress_ptr cinfo, JSAMPARRAY scanlines,
-		      JDIMENSION num_lines)
-{
-  JDIMENSION row_ctr, rows_left;
-
-  if (cinfo->global_state != CSTATE_SCANNING)
-    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
-  if (cinfo->next_scanline >= cinfo->image_height)
-    WARNMS(cinfo, JWRN_TOO_MUCH_DATA);
-
-  /* Call progress monitor hook if present */
-  if (cinfo->progress != NULL) {
-    cinfo->progress->pass_counter = (long) cinfo->next_scanline;
-    cinfo->progress->pass_limit = (long) cinfo->image_height;
-    (*cinfo->progress->progress_monitor) ((j_common_ptr) cinfo);
-  }
-
-  /* Give master control module another chance if this is first call to
-   * jpeg_write_scanlines.  This lets output of the frame/scan headers be
-   * delayed so that application can write COM, etc, markers between
-   * jpeg_start_compress and jpeg_write_scanlines.
-   */
-  if (cinfo->master->call_pass_startup)
-    (*cinfo->master->pass_startup) (cinfo);
-
-  /* Ignore any extra scanlines at bottom of image. */
-  rows_left = cinfo->image_height - cinfo->next_scanline;
-  if (num_lines > rows_left)
-    num_lines = rows_left;
-
-  row_ctr = 0;
-  (*cinfo->main->process_data) (cinfo, scanlines, &row_ctr, num_lines);
-  cinfo->next_scanline += row_ctr;
-  return row_ctr;
-}
-
-
-/*
- * Alternate entry point to write raw data.
- * Processes exactly one iMCU row per call, unless suspended.
- */
-
-GLOBAL JDIMENSION
-jpeg_write_raw_data (j_compress_ptr cinfo, JSAMPIMAGE data,
-		     JDIMENSION num_lines)
-{
-  JDIMENSION lines_per_iMCU_row;
-
-  if (cinfo->global_state != CSTATE_RAW_OK)
-    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
-  if (cinfo->next_scanline >= cinfo->image_height) {
-    WARNMS(cinfo, JWRN_TOO_MUCH_DATA);
-    return 0;
-  }
-
-  /* Call progress monitor hook if present */
-  if (cinfo->progress != NULL) {
-    cinfo->progress->pass_counter = (long) cinfo->next_scanline;
-    cinfo->progress->pass_limit = (long) cinfo->image_height;
-    (*cinfo->progress->progress_monitor) ((j_common_ptr) cinfo);
-  }
-
-  /* Give master control module another chance if this is first call to
-   * jpeg_write_raw_data.  This lets output of the frame/scan headers be
-   * delayed so that application can write COM, etc, markers between
-   * jpeg_start_compress and jpeg_write_raw_data.
-   */
-  if (cinfo->master->call_pass_startup)
-    (*cinfo->master->pass_startup) (cinfo);
-
-  /* Verify that at least one iMCU row has been passed. */
-  lines_per_iMCU_row = cinfo->max_v_samp_factor * DCTSIZE;
-  if (num_lines < lines_per_iMCU_row)
-    ERREXIT(cinfo, JERR_BUFFER_SIZE);
-
-  /* Directly compress the row. */
-  if (! (*cinfo->coef->compress_data) (cinfo, data)) {
-    /* If compressor did not consume the whole row, suspend processing. */
-    return 0;
-  }
-
-  /* OK, we processed one iMCU row. */
-  cinfo->next_scanline += lines_per_iMCU_row;
-  return lines_per_iMCU_row;
-}
diff -NEaurb neo/renderer/jpeg-6/jccoefct.c neo/renderer/jpeg-6/jccoefct.c
--- neo/renderer/jpeg-6/jccoefct.c	2011-12-26 04:15:38 +0000
+++ neo/renderer/jpeg-6/jccoefct.c	1970-01-01 00:00:00 +0000
@@ -1,448 +0,0 @@
-/*
- * jccoefct.c
- *
- * Copyright (C) 1994-1995, Thomas G. Lane.
- * This file is part of the Independent JPEG Group's software.
- * For conditions of distribution and use, see the accompanying README file.
- *
- * This file contains the coefficient buffer controller for compression.
- * This controller is the top level of the JPEG compressor proper.
- * The coefficient buffer lies between forward-DCT and entropy encoding steps.
- */
-
-#define JPEG_INTERNALS
-#include "jinclude.h"
-#include "jpeglib.h"
-
-
-/* We use a full-image coefficient buffer when doing Huffman optimization,
- * and also for writing multiple-scan JPEG files.  In all cases, the DCT
- * step is run during the first pass, and subsequent passes need only read
- * the buffered coefficients.
- */
-#ifdef ENTROPY_OPT_SUPPORTED
-#define FULL_COEF_BUFFER_SUPPORTED
-#else
-#ifdef C_MULTISCAN_FILES_SUPPORTED
-#define FULL_COEF_BUFFER_SUPPORTED
-#endif
-#endif
-
-
-/* Private buffer controller object */
-
-typedef struct {
-  struct jpeg_c_coef_controller pub; /* public fields */
-
-  JDIMENSION iMCU_row_num;	/* iMCU row # within image */
-  JDIMENSION mcu_ctr;		/* counts MCUs processed in current row */
-  int MCU_vert_offset;		/* counts MCU rows within iMCU row */
-  int MCU_rows_per_iMCU_row;	/* number of such rows needed */
-
-  /* For single-pass compression, it's sufficient to buffer just one MCU
-   * (although this may prove a bit slow in practice).  We allocate a
-   * workspace of C_MAX_BLOCKS_IN_MCU coefficient blocks, and reuse it for each
-   * MCU constructed and sent.  (On 80x86, the workspace is FAR even though
-   * it's not really very big; this is to keep the module interfaces unchanged
-   * when a large coefficient buffer is necessary.)
-   * In multi-pass modes, this array points to the current MCU's blocks
-   * within the virtual arrays.
-   */
-  JBLOCKROW MCU_buffer[C_MAX_BLOCKS_IN_MCU];
-
-  /* In multi-pass modes, we need a virtual block array for each component. */
-  jvirt_barray_ptr whole_image[MAX_COMPONENTS];
-} my_coef_controller;
-
-typedef my_coef_controller * my_coef_ptr;
-
-
-/* Forward declarations */
-METHODDEF boolean compress_data
-    JPP((j_compress_ptr cinfo, JSAMPIMAGE input_buf));
-#ifdef FULL_COEF_BUFFER_SUPPORTED
-METHODDEF boolean compress_first_pass
-    JPP((j_compress_ptr cinfo, JSAMPIMAGE input_buf));
-METHODDEF boolean compress_output
-    JPP((j_compress_ptr cinfo, JSAMPIMAGE input_buf));
-#endif
-
-
-LOCAL void
-start_iMCU_row (j_compress_ptr cinfo)
-/* Reset within-iMCU-row counters for a new row */
-{
-  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
-
-  /* In an interleaved scan, an MCU row is the same as an iMCU row.
-   * In a noninterleaved scan, an iMCU row has v_samp_factor MCU rows.
-   * But at the bottom of the image, process only what's left.
-   */
-  if (cinfo->comps_in_scan > 1) {
-    coef->MCU_rows_per_iMCU_row = 1;
-  } else {
-    if (coef->iMCU_row_num < (cinfo->total_iMCU_rows-1))
-      coef->MCU_rows_per_iMCU_row = cinfo->cur_comp_info[0]->v_samp_factor;
-    else
-      coef->MCU_rows_per_iMCU_row = cinfo->cur_comp_info[0]->last_row_height;
-  }
-
-  coef->mcu_ctr = 0;
-  coef->MCU_vert_offset = 0;
-}
-
-
-/*
- * Initialize for a processing pass.
- */
-
-METHODDEF void
-start_pass_coef (j_compress_ptr cinfo, J_BUF_MODE pass_mode)
-{
-  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
-
-  coef->iMCU_row_num = 0;
-  start_iMCU_row(cinfo);
-
-  switch (pass_mode) {
-  case JBUF_PASS_THRU:
-    if (coef->whole_image[0] != NULL)
-      ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
-    coef->pub.compress_data = compress_data;
-    break;
-#ifdef FULL_COEF_BUFFER_SUPPORTED
-  case JBUF_SAVE_AND_PASS:
-    if (coef->whole_image[0] == NULL)
-      ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
-    coef->pub.compress_data = compress_first_pass;
-    break;
-  case JBUF_CRANK_DEST:
-    if (coef->whole_image[0] == NULL)
-      ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
-    coef->pub.compress_data = compress_output;
-    break;
-#endif
-  default:
-    ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
-    break;
-  }
-}
-
-
-/*
- * Process some data in the single-pass case.
- * We process the equivalent of one fully interleaved MCU row ("iMCU" row)
- * per call, ie, v_samp_factor block rows for each component in the image.
- * Returns TRUE if the iMCU row is completed, FALSE if suspended.
- *
- * NB: input_buf contains a plane for each component in image.
- * For single pass, this is the same as the components in the scan.
- */
-
-METHODDEF boolean
-compress_data (j_compress_ptr cinfo, JSAMPIMAGE input_buf)
-{
-  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
-  JDIMENSION MCU_col_num;	/* index of current MCU within row */
-  JDIMENSION last_MCU_col = cinfo->MCUs_per_row - 1;
-  JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
-  int blkn, bi, ci, yindex, yoffset, blockcnt;
-  JDIMENSION ypos, xpos;
-  jpeg_component_info *compptr;
-
-  /* Loop to write as much as one whole iMCU row */
-  for (yoffset = coef->MCU_vert_offset; yoffset < coef->MCU_rows_per_iMCU_row;
-       yoffset++) {
-    for (MCU_col_num = coef->mcu_ctr; MCU_col_num <= last_MCU_col;
-	 MCU_col_num++) {
-      /* Determine where data comes from in input_buf and do the DCT thing.
-       * Each call on forward_DCT processes a horizontal row of DCT blocks
-       * as wide as an MCU; we rely on having allocated the MCU_buffer[] blocks
-       * sequentially.  Dummy blocks at the right or bottom edge are filled in
-       * specially.  The data in them does not matter for image reconstruction,
-       * so we fill them with values that will encode to the smallest amount of
-       * data, viz: all zeroes in the AC entries, DC entries equal to previous
-       * block's DC value.  (Thanks to Thomas Kinsman for this idea.)
-       */
-      blkn = 0;
-      for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
-	compptr = cinfo->cur_comp_info[ci];
-	blockcnt = (MCU_col_num < last_MCU_col) ? compptr->MCU_width
-						: compptr->last_col_width;
-	xpos = MCU_col_num * compptr->MCU_sample_width;
-	ypos = yoffset * DCTSIZE; /* ypos == (yoffset+yindex) * DCTSIZE */
-	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
-	  if (coef->iMCU_row_num < last_iMCU_row ||
-	      yoffset+yindex < compptr->last_row_height) {
-	    (*cinfo->fdct->forward_DCT) (cinfo, compptr,
-					 input_buf[ci], coef->MCU_buffer[blkn],
-					 ypos, xpos, (JDIMENSION) blockcnt);
-	    if (blockcnt < compptr->MCU_width) {
-	      /* Create some dummy blocks at the right edge of the image. */
-	      jzero_far((void FAR *) coef->MCU_buffer[blkn + blockcnt],
-			(compptr->MCU_width - blockcnt) * SIZEOF(JBLOCK));
-	      for (bi = blockcnt; bi < compptr->MCU_width; bi++) {
-		coef->MCU_buffer[blkn+bi][0][0] = coef->MCU_buffer[blkn+bi-1][0][0];
-	      }
-	    }
-	  } else {
-	    /* Create a row of dummy blocks at the bottom of the image. */
-	    jzero_far((void FAR *) coef->MCU_buffer[blkn],
-		      compptr->MCU_width * SIZEOF(JBLOCK));
-	    for (bi = 0; bi < compptr->MCU_width; bi++) {
-	      coef->MCU_buffer[blkn+bi][0][0] = coef->MCU_buffer[blkn-1][0][0];
-	    }
-	  }
-	  blkn += compptr->MCU_width;
-	  ypos += DCTSIZE;
-	}
-      }
-      /* Try to write the MCU.  In event of a suspension failure, we will
-       * re-DCT the MCU on restart (a bit inefficient, could be fixed...)
-       */
-      if (! (*cinfo->entropy->encode_mcu) (cinfo, coef->MCU_buffer)) {
-	/* Suspension forced; update state counters and exit */
-	coef->MCU_vert_offset = yoffset;
-	coef->mcu_ctr = MCU_col_num;
-	return FALSE;
-      }
-    }
-    /* Completed an MCU row, but perhaps not an iMCU row */
-    coef->mcu_ctr = 0;
-  }
-  /* Completed the iMCU row, advance counters for next one */
-  coef->iMCU_row_num++;
-  start_iMCU_row(cinfo);
-  return TRUE;
-}
-
-
-#ifdef FULL_COEF_BUFFER_SUPPORTED
-
-/*
- * Process some data in the first pass of a multi-pass case.
- * We process the equivalent of one fully interleaved MCU row ("iMCU" row)
- * per call, ie, v_samp_factor block rows for each component in the image.
- * This amount of data is read from the source buffer, DCT'd and quantized,
- * and saved into the virtual arrays.  We also generate suitable dummy blocks
- * as needed at the right and lower edges.  (The dummy blocks are constructed
- * in the virtual arrays, which have been padded appropriately.)  This makes
- * it possible for subsequent passes not to worry about real vs. dummy blocks.
- *
- * We must also emit the data to the entropy encoder.  This is conveniently
- * done by calling compress_output() after we've loaded the current strip
- * of the virtual arrays.
- *
- * NB: input_buf contains a plane for each component in image.  All
- * components are DCT'd and loaded into the virtual arrays in this pass.
- * However, it may be that only a subset of the components are emitted to
- * the entropy encoder during this first pass; be careful about looking
- * at the scan-dependent variables (MCU dimensions, etc).
- */
-
-METHODDEF boolean
-compress_first_pass (j_compress_ptr cinfo, JSAMPIMAGE input_buf)
-{
-  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
-  JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
-  JDIMENSION blocks_across, MCUs_across, MCUindex;
-  int bi, ci, h_samp_factor, block_row, block_rows, ndummy;
-  JCOEF lastDC;
-  jpeg_component_info *compptr;
-  JBLOCKARRAY buffer;
-  JBLOCKROW thisblockrow, lastblockrow;
-
-  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
-       ci++, compptr++) {
-    /* Align the virtual buffer for this component. */
-    buffer = (*cinfo->mem->access_virt_barray)
-      ((j_common_ptr) cinfo, coef->whole_image[ci],
-       coef->iMCU_row_num * compptr->v_samp_factor,
-       (JDIMENSION) compptr->v_samp_factor, TRUE);
-    /* Count non-dummy DCT block rows in this iMCU row. */
-    if (coef->iMCU_row_num < last_iMCU_row)
-      block_rows = compptr->v_samp_factor;
-    else {
-      /* NB: can't use last_row_height here, since may not be set! */
-      block_rows = (int) (compptr->height_in_blocks % compptr->v_samp_factor);
-      if (block_rows == 0) block_rows = compptr->v_samp_factor;
-    }
-    blocks_across = compptr->width_in_blocks;
-    h_samp_factor = compptr->h_samp_factor;
-    /* Count number of dummy blocks to be added at the right margin. */
-    ndummy = (int) (blocks_across % h_samp_factor);
-    if (ndummy > 0)
-      ndummy = h_samp_factor - ndummy;
-    /* Perform DCT for all non-dummy blocks in this iMCU row.  Each call
-     * on forward_DCT processes a complete horizontal row of DCT blocks.
-     */
-    for (block_row = 0; block_row < block_rows; block_row++) {
-      thisblockrow = buffer[block_row];
-      (*cinfo->fdct->forward_DCT) (cinfo, compptr,
-				   input_buf[ci], thisblockrow,
-				   (JDIMENSION) (block_row * DCTSIZE),
-				   (JDIMENSION) 0, blocks_across);
-      if (ndummy > 0) {
-	/* Create dummy blocks at the right edge of the image. */
-	thisblockrow += blocks_across; /* => first dummy block */
-	jzero_far((void FAR *) thisblockrow, ndummy * SIZEOF(JBLOCK));
-	lastDC = thisblockrow[-1][0];
-	for (bi = 0; bi < ndummy; bi++) {
-	  thisblockrow[bi][0] = lastDC;
-	}
-      }
-    }
-    /* If at end of image, create dummy block rows as needed.
-     * The tricky part here is that within each MCU, we want the DC values
-     * of the dummy blocks to match the last real block's DC value.
-     * This squeezes a few more bytes out of the resulting file...
-     */
-    if (coef->iMCU_row_num == last_iMCU_row) {
-      blocks_across += ndummy;	/* include lower right corner */
-      MCUs_across = blocks_across / h_samp_factor;
-      for (block_row = block_rows; block_row < compptr->v_samp_factor;
-	   block_row++) {
-	thisblockrow = buffer[block_row];
-	lastblockrow = buffer[block_row-1];
-	jzero_far((void FAR *) thisblockrow,
-		  (size_t) (blocks_across * SIZEOF(JBLOCK)));
-	for (MCUindex = 0; MCUindex < MCUs_across; MCUindex++) {
-	  lastDC = lastblockrow[h_samp_factor-1][0];
-	  for (bi = 0; bi < h_samp_factor; bi++) {
-	    thisblockrow[bi][0] = lastDC;
-	  }
-	  thisblockrow += h_samp_factor; /* advance to next MCU in row */
-	  lastblockrow += h_samp_factor;
-	}
-      }
-    }
-  }
-  /* NB: compress_output will increment iMCU_row_num if successful.
-   * A suspension return will result in redoing all the work above next time.
-   */
-
-  /* Emit data to the entropy encoder, sharing code with subsequent passes */
-  return compress_output(cinfo, input_buf);
-}
-
-
-/*
- * Process some data in subsequent passes of a multi-pass case.
- * We process the equivalent of one fully interleaved MCU row ("iMCU" row)
- * per call, ie, v_samp_factor block rows for each component in the scan.
- * The data is obtained from the virtual arrays and fed to the entropy coder.
- * Returns TRUE if the iMCU row is completed, FALSE if suspended.
- *
- * NB: input_buf is ignored; it is likely to be a NULL pointer.
- */
-
-METHODDEF boolean
-compress_output (j_compress_ptr cinfo, JSAMPIMAGE input_buf)
-{
-  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
-  JDIMENSION MCU_col_num;	/* index of current MCU within row */
-  int blkn, ci, xindex, yindex, yoffset;
-  JDIMENSION start_col;
-  JBLOCKARRAY buffer[MAX_COMPS_IN_SCAN];
-  JBLOCKROW buffer_ptr;
-  jpeg_component_info *compptr;
-
-  /* Align the virtual buffers for the components used in this scan.
-   * NB: during first pass, this is safe only because the buffers will
-   * already be aligned properly, so jmemmgr.c won't need to do any I/O.
-   */
-  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
-    compptr = cinfo->cur_comp_info[ci];
-    buffer[ci] = (*cinfo->mem->access_virt_barray)
-      ((j_common_ptr) cinfo, coef->whole_image[compptr->component_index],
-       coef->iMCU_row_num * compptr->v_samp_factor,
-       (JDIMENSION) compptr->v_samp_factor, FALSE);
-  }
-
-  /* Loop to process one whole iMCU row */
-  for (yoffset = coef->MCU_vert_offset; yoffset < coef->MCU_rows_per_iMCU_row;
-       yoffset++) {
-    for (MCU_col_num = coef->mcu_ctr; MCU_col_num < cinfo->MCUs_per_row;
-	 MCU_col_num++) {
-      /* Construct list of pointers to DCT blocks belonging to this MCU */
-      blkn = 0;			/* index of current DCT block within MCU */
-      for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
-	compptr = cinfo->cur_comp_info[ci];
-	start_col = MCU_col_num * compptr->MCU_width;
-	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
-	  buffer_ptr = buffer[ci][yindex+yoffset] + start_col;
-	  for (xindex = 0; xindex < compptr->MCU_width; xindex++) {
-	    coef->MCU_buffer[blkn++] = buffer_ptr++;
-	  }
-	}
-      }
-      /* Try to write the MCU. */
-      if (! (*cinfo->entropy->encode_mcu) (cinfo, coef->MCU_buffer)) {
-	/* Suspension forced; update state counters and exit */
-	coef->MCU_vert_offset = yoffset;
-	coef->mcu_ctr = MCU_col_num;
-	return FALSE;
-      }
-    }
-    /* Completed an MCU row, but perhaps not an iMCU row */
-    coef->mcu_ctr = 0;
-  }
-  /* Completed the iMCU row, advance counters for next one */
-  coef->iMCU_row_num++;
-  start_iMCU_row(cinfo);
-  return TRUE;
-}
-
-#endif /* FULL_COEF_BUFFER_SUPPORTED */
-
-
-/*
- * Initialize coefficient buffer controller.
- */
-
-GLOBAL void
-jinit_c_coef_controller (j_compress_ptr cinfo, boolean need_full_buffer)
-{
-  my_coef_ptr coef;
-
-  coef = (my_coef_ptr)
-    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
-				SIZEOF(my_coef_controller));
-  cinfo->coef = (struct jpeg_c_coef_controller *) coef;
-  coef->pub.start_pass = start_pass_coef;
-
-  /* Create the coefficient buffer. */
-  if (need_full_buffer) {
-#ifdef FULL_COEF_BUFFER_SUPPORTED
-    /* Allocate a full-image virtual array for each component, */
-    /* padded to a multiple of samp_factor DCT blocks in each direction. */
-    int ci;
-    jpeg_component_info *compptr;
-
-    for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
-	 ci++, compptr++) {
-      coef->whole_image[ci] = (*cinfo->mem->request_virt_barray)
-	((j_common_ptr) cinfo, JPOOL_IMAGE, FALSE,
-	 (JDIMENSION) jround_up((long) compptr->width_in_blocks,
-				(long) compptr->h_samp_factor),
-	 (JDIMENSION) jround_up((long) compptr->height_in_blocks,
-				(long) compptr->v_samp_factor),
-	 (JDIMENSION) compptr->v_samp_factor);
-    }
-#else
-    ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
-#endif
-  } else {
-    /* We only need a single-MCU buffer. */
-    JBLOCKROW buffer;
-    int i;
-
-    buffer = (JBLOCKROW)
-      (*cinfo->mem->alloc_large) ((j_common_ptr) cinfo, JPOOL_IMAGE,
-				  C_MAX_BLOCKS_IN_MCU * SIZEOF(JBLOCK));
-    for (i = 0; i < C_MAX_BLOCKS_IN_MCU; i++) {
-      coef->MCU_buffer[i] = buffer + i;
-    }
-    coef->whole_image[0] = NULL; /* flag for no virtual arrays */
-  }
-}
diff -NEaurb neo/renderer/jpeg-6/jccolor.c neo/renderer/jpeg-6/jccolor.c
--- neo/renderer/jpeg-6/jccolor.c	2011-12-26 04:15:38 +0000
+++ neo/renderer/jpeg-6/jccolor.c	1970-01-01 00:00:00 +0000
@@ -1,459 +0,0 @@
-/*
- * jccolor.c
- *
- * Copyright (C) 1991-1994, Thomas G. Lane.
- * This file is part of the Independent JPEG Group's software.
- * For conditions of distribution and use, see the accompanying README file.
- *
- * This file contains input colorspace conversion routines.
- */
-
-#define JPEG_INTERNALS
-#include "jinclude.h"
-#include "jpeglib.h"
-
-
-/* Private subobject */
-
-typedef struct {
-  struct jpeg_color_converter pub; /* public fields */
-
-  /* Private state for RGB->YCC conversion */
-  INT32 * rgb_ycc_tab;		/* => table for RGB to YCbCr conversion */
-} my_color_converter;
-
-typedef my_color_converter * my_cconvert_ptr;
-
-
-/**************** RGB -> YCbCr conversion: most common case **************/
-
-/*
- * YCbCr is defined per CCIR 601-1, except that Cb and Cr are
- * normalized to the range 0..MAXJSAMPLE rather than -0.5 .. 0.5.
- * The conversion equations to be implemented are therefore
- *	Y  =  0.29900 * R + 0.58700 * G + 0.11400 * B
- *	Cb = -0.16874 * R - 0.33126 * G + 0.50000 * B  + CENTERJSAMPLE
- *	Cr =  0.50000 * R - 0.41869 * G - 0.08131 * B  + CENTERJSAMPLE
- * (These numbers are derived from TIFF 6.0 section 21, dated 3-June-92.)
- * Note: older versions of the IJG code used a zero offset of MAXJSAMPLE/2,
- * rather than CENTERJSAMPLE, for Cb and Cr.  This gave equal positive and
- * negative swings for Cb/Cr, but meant that grayscale values (Cb=Cr=0)
- * were not represented exactly.  Now we sacrifice exact representation of
- * maximum red and maximum blue in order to get exact grayscales.
- *
- * To avoid floating-point arithmetic, we represent the fractional constants
- * as integers scaled up by 2^16 (about 4 digits precision); we have to divide
- * the products by 2^16, with appropriate rounding, to get the correct answer.
- *
- * For even more speed, we avoid doing any multiplications in the inner loop
- * by precalculating the constants times R,G,B for all possible values.
- * For 8-bit JSAMPLEs this is very reasonable (only 256 entries per table);
- * for 12-bit samples it is still acceptable.  It's not very reasonable for
- * 16-bit samples, but if you want lossless storage you shouldn't be changing
- * colorspace anyway.
- * The CENTERJSAMPLE offsets and the rounding fudge-factor of 0.5 are included
- * in the tables to save adding them separately in the inner loop.
- */
-
-#define SCALEBITS	16	/* speediest right-shift on some machines */
-#define CBCR_OFFSET	((INT32) CENTERJSAMPLE << SCALEBITS)
-#define ONE_HALF	((INT32) 1 << (SCALEBITS-1))
-#define FIX(x)		((INT32) ((x) * (1L<<SCALEBITS) + 0.5))
-
-/* We allocate one big table and divide it up into eight parts, instead of
- * doing eight alloc_small requests.  This lets us use a single table base
- * address, which can be held in a register in the inner loops on many
- * machines (more than can hold all eight addresses, anyway).
- */
-
-#define R_Y_OFF		0			/* offset to R => Y section */
-#define G_Y_OFF		(1*(MAXJSAMPLE+1))	/* offset to G => Y section */
-#define B_Y_OFF		(2*(MAXJSAMPLE+1))	/* etc. */
-#define R_CB_OFF	(3*(MAXJSAMPLE+1))
-#define G_CB_OFF	(4*(MAXJSAMPLE+1))
-#define B_CB_OFF	(5*(MAXJSAMPLE+1))
-#define R_CR_OFF	B_CB_OFF		/* B=>Cb, R=>Cr are the same */
-#define G_CR_OFF	(6*(MAXJSAMPLE+1))
-#define B_CR_OFF	(7*(MAXJSAMPLE+1))
-#define TABLE_SIZE	(8*(MAXJSAMPLE+1))
-
-
-/*
- * Initialize for RGB->YCC colorspace conversion.
- */
-
-METHODDEF void
-rgb_ycc_start (j_compress_ptr cinfo)
-{
-  my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
-  INT32 * rgb_ycc_tab;
-  INT32 i;
-
-  /* Allocate and fill in the conversion tables. */
-  cconvert->rgb_ycc_tab = rgb_ycc_tab = (INT32 *)
-    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
-				(TABLE_SIZE * SIZEOF(INT32)));
-
-  for (i = 0; i <= MAXJSAMPLE; i++) {
-    rgb_ycc_tab[i+R_Y_OFF] = FIX(0.29900) * i;
-    rgb_ycc_tab[i+G_Y_OFF] = FIX(0.58700) * i;
-    rgb_ycc_tab[i+B_Y_OFF] = FIX(0.11400) * i     + ONE_HALF;
-    rgb_ycc_tab[i+R_CB_OFF] = (-FIX(0.16874)) * i;
-    rgb_ycc_tab[i+G_CB_OFF] = (-FIX(0.33126)) * i;
-    /* We use a rounding fudge-factor of 0.5-epsilon for Cb and Cr.
-     * This ensures that the maximum output will round to MAXJSAMPLE
-     * not MAXJSAMPLE+1, and thus that we don't have to range-limit.
-     */
-    rgb_ycc_tab[i+B_CB_OFF] = FIX(0.50000) * i    + CBCR_OFFSET + ONE_HALF-1;
-/*  B=>Cb and R=>Cr tables are the same
-    rgb_ycc_tab[i+R_CR_OFF] = FIX(0.50000) * i    + CBCR_OFFSET + ONE_HALF-1;
-*/
-    rgb_ycc_tab[i+G_CR_OFF] = (-FIX(0.41869)) * i;
-    rgb_ycc_tab[i+B_CR_OFF] = (-FIX(0.08131)) * i;
-  }
-}
-
-
-/*
- * Convert some rows of samples to the JPEG colorspace.
- *
- * Note that we change from the application's interleaved-pixel format
- * to our internal noninterleaved, one-plane-per-component format.
- * The input buffer is therefore three times as wide as the output buffer.
- *
- * A starting row offset is provided only for the output buffer.  The caller
- * can easily adjust the passed input_buf value to accommodate any row
- * offset required on that side.
- */
-
-METHODDEF void
-rgb_ycc_convert (j_compress_ptr cinfo,
-		 JSAMPARRAY input_buf, JSAMPIMAGE output_buf,
-		 JDIMENSION output_row, int num_rows)
-{
-  my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
-  register int r, g, b;
-  register INT32 * ctab = cconvert->rgb_ycc_tab;
-  register JSAMPROW inptr;
-  register JSAMPROW outptr0, outptr1, outptr2;
-  register JDIMENSION col;
-  JDIMENSION num_cols = cinfo->image_width;
-
-  while (--num_rows >= 0) {
-    inptr = *input_buf++;
-    outptr0 = output_buf[0][output_row];
-    outptr1 = output_buf[1][output_row];
-    outptr2 = output_buf[2][output_row];
-    output_row++;
-    for (col = 0; col < num_cols; col++) {
-      r = GETJSAMPLE(inptr[RGB_RED]);
-      g = GETJSAMPLE(inptr[RGB_GREEN]);
-      b = GETJSAMPLE(inptr[RGB_BLUE]);
-      inptr += RGB_PIXELSIZE;
-      /* If the inputs are 0..MAXJSAMPLE, the outputs of these equations
-       * must be too; we do not need an explicit range-limiting operation.
-       * Hence the value being shifted is never negative, and we don't
-       * need the general RIGHT_SHIFT macro.
-       */
-      /* Y */
-      outptr0[col] = (JSAMPLE)
-		((ctab[r+R_Y_OFF] + ctab[g+G_Y_OFF] + ctab[b+B_Y_OFF])
-		 >> SCALEBITS);
-      /* Cb */
-      outptr1[col] = (JSAMPLE)
-		((ctab[r+R_CB_OFF] + ctab[g+G_CB_OFF] + ctab[b+B_CB_OFF])
-		 >> SCALEBITS);
-      /* Cr */
-      outptr2[col] = (JSAMPLE)
-		((ctab[r+R_CR_OFF] + ctab[g+G_CR_OFF] + ctab[b+B_CR_OFF])
-		 >> SCALEBITS);
-    }
-  }
-}
-
-
-/**************** Cases other than RGB -> YCbCr **************/
-
-
-/*
- * Convert some rows of samples to the JPEG colorspace.
- * This version handles RGB->grayscale conversion, which is the same
- * as the RGB->Y portion of RGB->YCbCr.
- * We assume rgb_ycc_start has been called (we only use the Y tables).
- */
-
-METHODDEF void
-rgb_gray_convert (j_compress_ptr cinfo,
-		  JSAMPARRAY input_buf, JSAMPIMAGE output_buf,
-		  JDIMENSION output_row, int num_rows)
-{
-  my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
-  register int r, g, b;
-  register INT32 * ctab = cconvert->rgb_ycc_tab;
-  register JSAMPROW inptr;
-  register JSAMPROW outptr;
-  register JDIMENSION col;
-  JDIMENSION num_cols = cinfo->image_width;
-
-  while (--num_rows >= 0) {
-    inptr = *input_buf++;
-    outptr = output_buf[0][output_row];
-    output_row++;
-    for (col = 0; col < num_cols; col++) {
-      r = GETJSAMPLE(inptr[RGB_RED]);
-      g = GETJSAMPLE(inptr[RGB_GREEN]);
-      b = GETJSAMPLE(inptr[RGB_BLUE]);
-      inptr += RGB_PIXELSIZE;
-      /* Y */
-      outptr[col] = (JSAMPLE)
-		((ctab[r+R_Y_OFF] + ctab[g+G_Y_OFF] + ctab[b+B_Y_OFF])
-		 >> SCALEBITS);
-    }
-  }
-}
-
-
-/*
- * Convert some rows of samples to the JPEG colorspace.
- * This version handles Adobe-style CMYK->YCCK conversion,
- * where we convert R=1-C, G=1-M, and B=1-Y to YCbCr using the same
- * conversion as above, while passing K (black) unchanged.
- * We assume rgb_ycc_start has been called.
- */
-
-METHODDEF void
-cmyk_ycck_convert (j_compress_ptr cinfo,
-		   JSAMPARRAY input_buf, JSAMPIMAGE output_buf,
-		   JDIMENSION output_row, int num_rows)
-{
-  my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
-  register int r, g, b;
-  register INT32 * ctab = cconvert->rgb_ycc_tab;
-  register JSAMPROW inptr;
-  register JSAMPROW outptr0, outptr1, outptr2, outptr3;
-  register JDIMENSION col;
-  JDIMENSION num_cols = cinfo->image_width;
-
-  while (--num_rows >= 0) {
-    inptr = *input_buf++;
-    outptr0 = output_buf[0][output_row];
-    outptr1 = output_buf[1][output_row];
-    outptr2 = output_buf[2][output_row];
-    outptr3 = output_buf[3][output_row];
-    output_row++;
-    for (col = 0; col < num_cols; col++) {
-      r = MAXJSAMPLE - GETJSAMPLE(inptr[0]);
-      g = MAXJSAMPLE - GETJSAMPLE(inptr[1]);
-      b = MAXJSAMPLE - GETJSAMPLE(inptr[2]);
-      /* K passes through as-is */
-      outptr3[col] = inptr[3];	/* don't need GETJSAMPLE here */
-      inptr += 4;
-      /* If the inputs are 0..MAXJSAMPLE, the outputs of these equations
-       * must be too; we do not need an explicit range-limiting operation.
-       * Hence the value being shifted is never negative, and we don't
-       * need the general RIGHT_SHIFT macro.
-       */
-      /* Y */
-      outptr0[col] = (JSAMPLE)
-		((ctab[r+R_Y_OFF] + ctab[g+G_Y_OFF] + ctab[b+B_Y_OFF])
-		 >> SCALEBITS);
-      /* Cb */
-      outptr1[col] = (JSAMPLE)
-		((ctab[r+R_CB_OFF] + ctab[g+G_CB_OFF] + ctab[b+B_CB_OFF])
-		 >> SCALEBITS);
-      /* Cr */
-      outptr2[col] = (JSAMPLE)
-		((ctab[r+R_CR_OFF] + ctab[g+G_CR_OFF] + ctab[b+B_CR_OFF])
-		 >> SCALEBITS);
-    }
-  }
-}
-
-
-/*
- * Convert some rows of samples to the JPEG colorspace.
- * This version handles grayscale output with no conversion.
- * The source can be either plain grayscale or YCbCr (since Y == gray).
- */
-
-METHODDEF void
-grayscale_convert (j_compress_ptr cinfo,
-		   JSAMPARRAY input_buf, JSAMPIMAGE output_buf,
-		   JDIMENSION output_row, int num_rows)
-{
-  register JSAMPROW inptr;
-  register JSAMPROW outptr;
-  register JDIMENSION col;
-  JDIMENSION num_cols = cinfo->image_width;
-  int instride = cinfo->input_components;
-
-  while (--num_rows >= 0) {
-    inptr = *input_buf++;
-    outptr = output_buf[0][output_row];
-    output_row++;
-    for (col = 0; col < num_cols; col++) {
-      outptr[col] = inptr[0];	/* don't need GETJSAMPLE() here */
-      inptr += instride;
-    }
-  }
-}
-
-
-/*
- * Convert some rows of samples to the JPEG colorspace.
- * This version handles multi-component colorspaces without conversion.
- * We assume input_components == num_components.
- */
-
-METHODDEF void
-null_convert (j_compress_ptr cinfo,
-	      JSAMPARRAY input_buf, JSAMPIMAGE output_buf,
-	      JDIMENSION output_row, int num_rows)
-{
-  register JSAMPROW inptr;
-  register JSAMPROW outptr;
-  register JDIMENSION col;
-  register int ci;
-  int nc = cinfo->num_components;
-  JDIMENSION num_cols = cinfo->image_width;
-
-  while (--num_rows >= 0) {
-    /* It seems fastest to make a separate pass for each component. */
-    for (ci = 0; ci < nc; ci++) {
-      inptr = *input_buf;
-      outptr = output_buf[ci][output_row];
-      for (col = 0; col < num_cols; col++) {
-	outptr[col] = inptr[ci]; /* don't need GETJSAMPLE() here */
-	inptr += nc;
-      }
-    }
-    input_buf++;
-    output_row++;
-  }
-}
-
-
-/*
- * Empty method for start_pass.
- */
-
-METHODDEF void
-null_method (j_compress_ptr cinfo)
-{
-  /* no work needed */
-}
-
-
-/*
- * Module initialization routine for input colorspace conversion.
- */
-
-GLOBAL void
-jinit_color_converter (j_compress_ptr cinfo)
-{
-  my_cconvert_ptr cconvert;
-
-  cconvert = (my_cconvert_ptr)
-    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
-				SIZEOF(my_color_converter));
-  cinfo->cconvert = (struct jpeg_color_converter *) cconvert;
-  /* set start_pass to null method until we find out differently */
-  cconvert->pub.start_pass = null_method;
-
-  /* Make sure input_components agrees with in_color_space */
-  switch (cinfo->in_color_space) {
-  case JCS_GRAYSCALE:
-    if (cinfo->input_components != 1)
-      ERREXIT(cinfo, JERR_BAD_IN_COLORSPACE);
-    break;
-
-  case JCS_RGB:
-#if RGB_PIXELSIZE != 3
-    if (cinfo->input_components != RGB_PIXELSIZE)
-      ERREXIT(cinfo, JERR_BAD_IN_COLORSPACE);
-    break;
-#endif /* else share code with YCbCr */
-
-  case JCS_YCbCr:
-    if (cinfo->input_components != 3)
-      ERREXIT(cinfo, JERR_BAD_IN_COLORSPACE);
-    break;
-
-  case JCS_CMYK:
-  case JCS_YCCK:
-    if (cinfo->input_components != 4)
-      ERREXIT(cinfo, JERR_BAD_IN_COLORSPACE);
-    break;
-
-  default:			/* JCS_UNKNOWN can be anything */
-    if (cinfo->input_components < 1)
-      ERREXIT(cinfo, JERR_BAD_IN_COLORSPACE);
-    break;
-  }
-
-  /* Check num_components, set conversion method based on requested space */
-  switch (cinfo->jpeg_color_space) {
-  case JCS_GRAYSCALE:
-    if (cinfo->num_components != 1)
-      ERREXIT(cinfo, JERR_BAD_J_COLORSPACE);
-    if (cinfo->in_color_space == JCS_GRAYSCALE)
-      cconvert->pub.color_convert = grayscale_convert;
-    else if (cinfo->in_color_space == JCS_RGB) {
-      cconvert->pub.start_pass = rgb_ycc_start;
-      cconvert->pub.color_convert = rgb_gray_convert;
-    } else if (cinfo->in_color_space == JCS_YCbCr)
-      cconvert->pub.color_convert = grayscale_convert;
-    else
-      ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
-    break;
-
-  case JCS_RGB:
-    if (cinfo->num_components != 3)
-      ERREXIT(cinfo, JERR_BAD_J_COLORSPACE);
-    if (cinfo->in_color_space == JCS_RGB && RGB_PIXELSIZE == 3)
-      cconvert->pub.color_convert = null_convert;
-    else
-      ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
-    break;
-
-  case JCS_YCbCr:
-    if (cinfo->num_components != 3)
-      ERREXIT(cinfo, JERR_BAD_J_COLORSPACE);
-    if (cinfo->in_color_space == JCS_RGB) {
-      cconvert->pub.start_pass = rgb_ycc_start;
-      cconvert->pub.color_convert = rgb_ycc_convert;
-    } else if (cinfo->in_color_space == JCS_YCbCr)
-      cconvert->pub.color_convert = null_convert;
-    else
-      ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
-    break;
-
-  case JCS_CMYK:
-    if (cinfo->num_components != 4)
-      ERREXIT(cinfo, JERR_BAD_J_COLORSPACE);
-    if (cinfo->in_color_space == JCS_CMYK)
-      cconvert->pub.color_convert = null_convert;
-    else
-      ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
-    break;
-
-  case JCS_YCCK:
-    if (cinfo->num_components != 4)
-      ERREXIT(cinfo, JERR_BAD_J_COLORSPACE);
-    if (cinfo->in_color_space == JCS_CMYK) {
-      cconvert->pub.start_pass = rgb_ycc_start;
-      cconvert->pub.color_convert = cmyk_ycck_convert;
-    } else if (cinfo->in_color_space == JCS_YCCK)
-      cconvert->pub.color_convert = null_convert;
-    else
-      ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
-    break;
-
-  default:			/* allow null conversion of JCS_UNKNOWN */
-    if (cinfo->jpeg_color_space != cinfo->in_color_space ||
-	cinfo->num_components != cinfo->input_components)
-      ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
-    cconvert->pub.color_convert = null_convert;
-    break;
-  }
-}
diff -NEaurb neo/renderer/jpeg-6/jcdctmgr.c neo/renderer/jpeg-6/jcdctmgr.c
--- neo/renderer/jpeg-6/jcdctmgr.c	2011-12-26 04:15:38 +0000
+++ neo/renderer/jpeg-6/jcdctmgr.c	1970-01-01 00:00:00 +0000
@@ -1,388 +0,0 @@
-/*
- * jcdctmgr.c
- *
- * Copyright (C) 1994-1995, Thomas G. Lane.
- * This file is part of the Independent JPEG Group's software.
- * For conditions of distribution and use, see the accompanying README file.
- *
- * This file contains the forward-DCT management logic.
- * This code selects a particular DCT implementation to be used,
- * and it performs related housekeeping chores including coefficient
- * quantization.
- */
-
-#define JPEG_INTERNALS
-#include "jinclude.h"
-#include "jpeglib.h"
-#include "jdct.h"		/* Private declarations for DCT subsystem */
-
-
-/* Private subobject for this module */
-
-typedef struct {
-  struct jpeg_forward_dct pub;	/* public fields */
-
-  /* Pointer to the DCT routine actually in use */
-  forward_DCT_method_ptr do_dct;
-
-  /* The actual post-DCT divisors --- not identical to the quant table
-   * entries, because of scaling (especially for an unnormalized DCT).
-   * Each table is given in normal array order; note that this must
-   * be converted from the zigzag order of the quantization tables.
-   */
-  DCTELEM * divisors[NUM_QUANT_TBLS];
-
-#ifdef DCT_FLOAT_SUPPORTED
-  /* Same as above for the floating-point case. */
-  float_DCT_method_ptr do_float_dct;
-  FAST_FLOAT * float_divisors[NUM_QUANT_TBLS];
-#endif
-} my_fdct_controller;
-
-typedef my_fdct_controller * my_fdct_ptr;
-
-
-/*
- * Initialize for a processing pass.
- * Verify that all referenced Q-tables are present, and set up
- * the divisor table for each one.
- * In the current implementation, DCT of all components is done during
- * the first pass, even if only some components will be output in the
- * first scan.  Hence all components should be examined here.
- */
-
-METHODDEF void
-start_pass_fdctmgr (j_compress_ptr cinfo)
-{
-  my_fdct_ptr fdct = (my_fdct_ptr) cinfo->fdct;
-  int ci, qtblno, i;
-  jpeg_component_info *compptr;
-  JQUANT_TBL * qtbl;
-  //DCTELEM * dtbl;
-
-  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
-       ci++, compptr++) {
-    qtblno = compptr->quant_tbl_no;
-    /* Make sure specified quantization table is present */
-    if (qtblno < 0 || qtblno >= NUM_QUANT_TBLS ||
-	cinfo->quant_tbl_ptrs[qtblno] == NULL)
-      ERREXIT1(cinfo, JERR_NO_QUANT_TABLE, qtblno);
-    qtbl = cinfo->quant_tbl_ptrs[qtblno];
-    /* Compute divisors for this quant table */
-    /* We may do this more than once for same table, but it's not a big deal */
-    switch (cinfo->dct_method) {
-#ifdef DCT_ISLOW_SUPPORTED
-    case JDCT_ISLOW:
-      /* For LL&M IDCT method, divisors are equal to raw quantization
-       * coefficients multiplied by 8 (to counteract scaling).
-       */
-      if (fdct->divisors[qtblno] == NULL) {
-	fdct->divisors[qtblno] = (DCTELEM *)
-	  (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
-				      DCTSIZE2 * SIZEOF(DCTELEM));
-      }
-      dtbl = fdct->divisors[qtblno];
-      for (i = 0; i < DCTSIZE2; i++) {
-	dtbl[i] = ((DCTELEM) qtbl->quantval[jpeg_zigzag_order[i]]) << 3;
-      }
-      break;
-#endif
-#ifdef DCT_IFAST_SUPPORTED
-    case JDCT_IFAST:
-      {
-	/* For AA&N IDCT method, divisors are equal to quantization
-	 * coefficients scaled by scalefactor[row]*scalefactor[col], where
-	 *   scalefactor[0] = 1
-	 *   scalefactor[k] = cos(k*PI/16) * sqrt(2)    for k=1..7
-	 * We apply a further scale factor of 8.
-	 */
-#define CONST_BITS 14
-	static const INT16 aanscales[DCTSIZE2] = {
-	  /* precomputed values scaled up by 14 bits: in natural order */
-	  16384, 22725, 21407, 19266, 16384, 12873,  8867,  4520,
-	  22725, 31521, 29692, 26722, 22725, 17855, 12299,  6270,
-	  21407, 29692, 27969, 25172, 21407, 16819, 11585,  5906,
-	  19266, 26722, 25172, 22654, 19266, 15137, 10426,  5315,
-	  16384, 22725, 21407, 19266, 16384, 12873,  8867,  4520,
-	  12873, 17855, 16819, 15137, 12873, 10114,  6967,  3552,
-	   8867, 12299, 11585, 10426,  8867,  6967,  4799,  2446,
-	   4520,  6270,  5906,  5315,  4520,  3552,  2446,  1247
-	};
-	SHIFT_TEMPS
-
-	if (fdct->divisors[qtblno] == NULL) {
-	  fdct->divisors[qtblno] = (DCTELEM *)
-	    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
-					DCTSIZE2 * SIZEOF(DCTELEM));
-	}
-	dtbl = fdct->divisors[qtblno];
-	for (i = 0; i < DCTSIZE2; i++) {
-	  dtbl[i] = (DCTELEM)
-	    DESCALE(MULTIPLY16V16((INT32) qtbl->quantval[jpeg_zigzag_order[i]],
-				  (INT32) aanscales[i]),
-		    CONST_BITS-3);
-	}
-      }
-      break;
-#endif
-#ifdef DCT_FLOAT_SUPPORTED
-    case JDCT_FLOAT:
-      {
-	/* For float AA&N IDCT method, divisors are equal to quantization
-	 * coefficients scaled by scalefactor[row]*scalefactor[col], where
-	 *   scalefactor[0] = 1
-	 *   scalefactor[k] = cos(k*PI/16) * sqrt(2)    for k=1..7
-	 * We apply a further scale factor of 8.
-	 * What's actually stored is 1/divisor so that the inner loop can
-	 * use a multiplication rather than a division.
-	 */
-	FAST_FLOAT * fdtbl;
-	int row, col;
-	static const double aanscalefactor[DCTSIZE] = {
-	  1.0, 1.387039845, 1.306562965, 1.175875602,
-	  1.0, 0.785694958, 0.541196100, 0.275899379
-	};
-
-	if (fdct->float_divisors[qtblno] == NULL) {
-	  fdct->float_divisors[qtblno] = (FAST_FLOAT *)
-	    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
-					DCTSIZE2 * SIZEOF(FAST_FLOAT));
-	}
-	fdtbl = fdct->float_divisors[qtblno];
-	i = 0;
-	for (row = 0; row < DCTSIZE; row++) {
-	  for (col = 0; col < DCTSIZE; col++) {
-	    fdtbl[i] = (FAST_FLOAT)
-	      (1.0 / (((double) qtbl->quantval[jpeg_zigzag_order[i]] *
-		       aanscalefactor[row] * aanscalefactor[col] * 8.0)));
-	    i++;
-	  }
-	}
-      }
-      break;
-#endif
-    default:
-      ERREXIT(cinfo, JERR_NOT_COMPILED);
-      break;
-    }
-  }
-}
-
-
-/*
- * Perform forward DCT on one or more blocks of a component.
- *
- * The input samples are taken from the sample_data[] array starting at
- * position start_row/start_col, and moving to the right for any additional
- * blocks. The quantized coefficients are returned in coef_blocks[].
- */
-
-METHODDEF void
-forward_DCT (j_compress_ptr cinfo, jpeg_component_info * compptr,
-	     JSAMPARRAY sample_data, JBLOCKROW coef_blocks,
-	     JDIMENSION start_row, JDIMENSION start_col,
-	     JDIMENSION num_blocks)
-/* This version is used for integer DCT implementations. */
-{
-  /* This routine is heavily used, so it's worth coding it tightly. */
-  my_fdct_ptr fdct = (my_fdct_ptr) cinfo->fdct;
-  forward_DCT_method_ptr do_dct = fdct->do_dct;
-  DCTELEM * divisors = fdct->divisors[compptr->quant_tbl_no];
-  DCTELEM workspace[DCTSIZE2];	/* work area for FDCT subroutine */
-  JDIMENSION bi;
-
-  sample_data += start_row;	/* fold in the vertical offset once */
-
-  for (bi = 0; bi < num_blocks; bi++, start_col += DCTSIZE) {
-    /* Load data into workspace, applying unsigned->signed conversion */
-    { register DCTELEM *workspaceptr;
-      register JSAMPROW elemptr;
-      register int elemr;
-
-      workspaceptr = workspace;
-      for (elemr = 0; elemr < DCTSIZE; elemr++) {
-	elemptr = sample_data[elemr] + start_col;
-#if DCTSIZE == 8		/* unroll the inner loop */
-	*workspaceptr++ = GETJSAMPLE(*elemptr++) - CENTERJSAMPLE;
-	*workspaceptr++ = GETJSAMPLE(*elemptr++) - CENTERJSAMPLE;
-	*workspaceptr++ = GETJSAMPLE(*elemptr++) - CENTERJSAMPLE;
-	*workspaceptr++ = GETJSAMPLE(*elemptr++) - CENTERJSAMPLE;
-	*workspaceptr++ = GETJSAMPLE(*elemptr++) - CENTERJSAMPLE;
-	*workspaceptr++ = GETJSAMPLE(*elemptr++) - CENTERJSAMPLE;
-	*workspaceptr++ = GETJSAMPLE(*elemptr++) - CENTERJSAMPLE;
-	*workspaceptr++ = GETJSAMPLE(*elemptr++) - CENTERJSAMPLE;
-#else
-	{ register int elemc;
-	  for (elemc = DCTSIZE; elemc > 0; elemc--) {
-	    *workspaceptr++ = GETJSAMPLE(*elemptr++) - CENTERJSAMPLE;
-	  }
-	}
-#endif
-      }
-    }
-
-    /* Perform the DCT */
-    (*do_dct) (workspace);
-
-    /* Quantize/descale the coefficients, and store into coef_blocks[] */
-    { register DCTELEM temp, qval;
-      register int i;
-      register JCOEFPTR output_ptr = coef_blocks[bi];
-
-      for (i = 0; i < DCTSIZE2; i++) {
-	qval = divisors[i];
-	temp = workspace[i];
-	/* Divide the coefficient value by qval, ensuring proper rounding.
-	 * Since C does not specify the direction of rounding for negative
-	 * quotients, we have to force the dividend positive for portability.
-	 *
-	 * In most files, at least half of the output values will be zero
-	 * (at default quantization settings, more like three-quarters...)
-	 * so we should ensure that this case is fast.  On many machines,
-	 * a comparison is enough cheaper than a divide to make a special test
-	 * a win.  Since both inputs will be nonnegative, we need only test
-	 * for a < b to discover whether a/b is 0.
-	 * If your machine's division is fast enough, define FAST_DIVIDE.
-	 */
-#ifdef FAST_DIVIDE
-#define DIVIDE_BY(a,b)	a /= b
-#else
-#define DIVIDE_BY(a,b)	if (a >= b) a /= b; else a = 0
-#endif
-	if (temp < 0) {
-	  temp = -temp;
-	  temp += qval>>1;	/* for rounding */
-	  DIVIDE_BY(temp, qval);
-	  temp = -temp;
-	} else {
-	  temp += qval>>1;	/* for rounding */
-	  DIVIDE_BY(temp, qval);
-	}
-	output_ptr[i] = (JCOEF) temp;
-      }
-    }
-  }
-}
-
-
-#ifdef DCT_FLOAT_SUPPORTED
-
-METHODDEF void
-forward_DCT_float (j_compress_ptr cinfo, jpeg_component_info * compptr,
-		   JSAMPARRAY sample_data, JBLOCKROW coef_blocks,
-		   JDIMENSION start_row, JDIMENSION start_col,
-		   JDIMENSION num_blocks)
-/* This version is used for floating-point DCT implementations. */
-{
-  /* This routine is heavily used, so it's worth coding it tightly. */
-  my_fdct_ptr fdct = (my_fdct_ptr) cinfo->fdct;
-  float_DCT_method_ptr do_dct = fdct->do_float_dct;
-  FAST_FLOAT * divisors = fdct->float_divisors[compptr->quant_tbl_no];
-  FAST_FLOAT workspace[DCTSIZE2]; /* work area for FDCT subroutine */
-  JDIMENSION bi;
-
-  sample_data += start_row;	/* fold in the vertical offset once */
-
-  for (bi = 0; bi < num_blocks; bi++, start_col += DCTSIZE) {
-    /* Load data into workspace, applying unsigned->signed conversion */
-    { register FAST_FLOAT *workspaceptr;
-      register JSAMPROW elemptr;
-      register int elemr;
-
-      workspaceptr = workspace;
-      for (elemr = 0; elemr < DCTSIZE; elemr++) {
-	elemptr = sample_data[elemr] + start_col;
-#if DCTSIZE == 8		/* unroll the inner loop */
-	*workspaceptr++ = (FAST_FLOAT)(GETJSAMPLE(*elemptr++) - CENTERJSAMPLE);
-	*workspaceptr++ = (FAST_FLOAT)(GETJSAMPLE(*elemptr++) - CENTERJSAMPLE);
-	*workspaceptr++ = (FAST_FLOAT)(GETJSAMPLE(*elemptr++) - CENTERJSAMPLE);
-	*workspaceptr++ = (FAST_FLOAT)(GETJSAMPLE(*elemptr++) - CENTERJSAMPLE);
-	*workspaceptr++ = (FAST_FLOAT)(GETJSAMPLE(*elemptr++) - CENTERJSAMPLE);
-	*workspaceptr++ = (FAST_FLOAT)(GETJSAMPLE(*elemptr++) - CENTERJSAMPLE);
-	*workspaceptr++ = (FAST_FLOAT)(GETJSAMPLE(*elemptr++) - CENTERJSAMPLE);
-	*workspaceptr++ = (FAST_FLOAT)(GETJSAMPLE(*elemptr++) - CENTERJSAMPLE);
-#else
-	{ register int elemc;
-	  for (elemc = DCTSIZE; elemc > 0; elemc--) {
-	    *workspaceptr++ = (FAST_FLOAT)
-	      (GETJSAMPLE(*elemptr++) - CENTERJSAMPLE);
-	  }
-	}
-#endif
-      }
-    }
-
-    /* Perform the DCT */
-    (*do_dct) (workspace);
-
-    /* Quantize/descale the coefficients, and store into coef_blocks[] */
-    { register FAST_FLOAT temp;
-      register int i;
-      register JCOEFPTR output_ptr = coef_blocks[bi];
-
-      for (i = 0; i < DCTSIZE2; i++) {
-	/* Apply the quantization and scaling factor */
-	temp = workspace[i] * divisors[i];
-	/* Round to nearest integer.
-	 * Since C does not specify the direction of rounding for negative
-	 * quotients, we have to force the dividend positive for portability.
-	 * The maximum coefficient size is +-16K (for 12-bit data), so this
-	 * code should work for either 16-bit or 32-bit ints.
-	 */
-	output_ptr[i] = (JCOEF) ((int) (temp + (FAST_FLOAT) 16384.5) - 16384);
-      }
-    }
-  }
-}
-
-#endif /* DCT_FLOAT_SUPPORTED */
-
-
-/*
- * Initialize FDCT manager.
- */
-
-GLOBAL void
-jinit_forward_dct (j_compress_ptr cinfo)
-{
-  my_fdct_ptr fdct;
-  int i;
-
-  fdct = (my_fdct_ptr)
-    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
-				SIZEOF(my_fdct_controller));
-  cinfo->fdct = (struct jpeg_forward_dct *) fdct;
-  fdct->pub.start_pass = start_pass_fdctmgr;
-
-  switch (cinfo->dct_method) {
-#ifdef DCT_ISLOW_SUPPORTED
-  case JDCT_ISLOW:
-    fdct->pub.forward_DCT = forward_DCT;
-    fdct->do_dct = jpeg_fdct_islow;
-    break;
-#endif
-#ifdef DCT_IFAST_SUPPORTED
-  case JDCT_IFAST:
-    fdct->pub.forward_DCT = forward_DCT;
-    fdct->do_dct = jpeg_fdct_ifast;
-    break;
-#endif
-#ifdef DCT_FLOAT_SUPPORTED
-  case JDCT_FLOAT:
-    fdct->pub.forward_DCT = forward_DCT_float;
-    fdct->do_float_dct = jpeg_fdct_float;
-    break;
-#endif
-  default:
-    ERREXIT(cinfo, JERR_NOT_COMPILED);
-    break;
-  }
-
-  /* Mark divisor tables unallocated */
-  for (i = 0; i < NUM_QUANT_TBLS; i++) {
-    fdct->divisors[i] = NULL;
-#ifdef DCT_FLOAT_SUPPORTED
-    fdct->float_divisors[i] = NULL;
-#endif
-  }
-}
diff -NEaurb neo/renderer/jpeg-6/jchuff.c neo/renderer/jpeg-6/jchuff.c
--- neo/renderer/jpeg-6/jchuff.c	2011-12-26 04:15:38 +0000
+++ neo/renderer/jpeg-6/jchuff.c	1970-01-01 00:00:00 +0000
@@ -1,846 +0,0 @@
-/*
- * jchuff.c
- *
- * Copyright (C) 1991-1995, Thomas G. Lane.
- * This file is part of the Independent JPEG Group's software.
- * For conditions of distribution and use, see the accompanying README file.
- *
- * This file contains Huffman entropy encoding routines.
- *
- * Much of the complexity here has to do with supporting output suspension.
- * If the data destination module demands suspension, we want to be able to
- * back up to the start of the current MCU.  To do this, we copy state
- * variables into local working storage, and update them back to the
- * permanent JPEG objects only upon successful completion of an MCU.
- */
-
-#define JPEG_INTERNALS
-#include "jinclude.h"
-#include "jpeglib.h"
-#include "jchuff.h"		/* Declarations shared with jcphuff.c */
-
-
-/* Expanded entropy encoder object for Huffman encoding.
- *
- * The savable_state subrecord contains fields that change within an MCU,
- * but must not be updated permanently until we complete the MCU.
- */
-
-typedef struct {
-  INT32 put_buffer;		/* current bit-accumulation buffer */
-  int put_bits;			/* # of bits now in it */
-  int last_dc_val[MAX_COMPS_IN_SCAN]; /* last DC coef for each component */
-} savable_state;
-
-/* This macro is to work around compilers with missing or broken
- * structure assignment.  You'll need to fix this code if you have
- * such a compiler and you change MAX_COMPS_IN_SCAN.
- */
-
-#ifndef NO_STRUCT_ASSIGN
-#define ASSIGN_STATE(dest,src)  ((dest) = (src))
-#else
-#if MAX_COMPS_IN_SCAN == 4
-#define ASSIGN_STATE(dest,src)  \
-	((dest).put_buffer = (src).put_buffer, \
-	 (dest).put_bits = (src).put_bits, \
-	 (dest).last_dc_val[0] = (src).last_dc_val[0], \
-	 (dest).last_dc_val[1] = (src).last_dc_val[1], \
-	 (dest).last_dc_val[2] = (src).last_dc_val[2], \
-	 (dest).last_dc_val[3] = (src).last_dc_val[3])
-#endif
-#endif
-
-
-typedef struct {
-  struct jpeg_entropy_encoder pub; /* public fields */
-
-  savable_state saved;		/* Bit buffer & DC state at start of MCU */
-
-  /* These fields are NOT loaded into local working state. */
-  unsigned int restarts_to_go;	/* MCUs left in this restart interval */
-  int next_restart_num;		/* next restart number to write (0-7) */
-
-  /* Pointers to derived tables (these workspaces have image lifespan) */
-  c_derived_tbl * dc_derived_tbls[NUM_HUFF_TBLS];
-  c_derived_tbl * ac_derived_tbls[NUM_HUFF_TBLS];
-
-#ifdef ENTROPY_OPT_SUPPORTED	/* Statistics tables for optimization */
-  long * dc_count_ptrs[NUM_HUFF_TBLS];
-  long * ac_count_ptrs[NUM_HUFF_TBLS];
-#endif
-} huff_entropy_encoder;
-
-typedef huff_entropy_encoder * huff_entropy_ptr;
-
-/* Working state while writing an MCU.
- * This struct contains all the fields that are needed by subroutines.
- */
-
-typedef struct {
-  JOCTET * next_output_byte;	/* => next byte to write in buffer */
-  size_t free_in_buffer;	/* # of byte spaces remaining in buffer */
-  savable_state cur;		/* Current bit buffer & DC state */
-  j_compress_ptr cinfo;		/* dump_buffer needs access to this */
-} working_state;
-
-
-/* Forward declarations */
-METHODDEF boolean encode_mcu_huff JPP((j_compress_ptr cinfo,
-				       JBLOCKROW *MCU_data));
-METHODDEF void finish_pass_huff JPP((j_compress_ptr cinfo));
-#ifdef ENTROPY_OPT_SUPPORTED
-METHODDEF boolean encode_mcu_gather JPP((j_compress_ptr cinfo,
-					 JBLOCKROW *MCU_data));
-METHODDEF void finish_pass_gather JPP((j_compress_ptr cinfo));
-#endif
-
-
-/*
- * Initialize for a Huffman-compressed scan.
- * If gather_statistics is TRUE, we do not output anything during the scan,
- * just count the Huffman symbols used and generate Huffman code tables.
- */
-
-METHODDEF void
-start_pass_huff (j_compress_ptr cinfo, boolean gather_statistics)
-{
-  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
-  int ci, dctbl, actbl;
-  jpeg_component_info * compptr;
-
-  if (gather_statistics) {
-#ifdef ENTROPY_OPT_SUPPORTED
-    entropy->pub.encode_mcu = encode_mcu_gather;
-    entropy->pub.finish_pass = finish_pass_gather;
-#else
-    ERREXIT(cinfo, JERR_NOT_COMPILED);
-#endif
-  } else {
-    entropy->pub.encode_mcu = encode_mcu_huff;
-    entropy->pub.finish_pass = finish_pass_huff;
-  }
-
-  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
-    compptr = cinfo->cur_comp_info[ci];
-    dctbl = compptr->dc_tbl_no;
-    actbl = compptr->ac_tbl_no;
-    /* Make sure requested tables are present */
-    /* (In gather mode, tables need not be allocated yet) */
-    if (dctbl < 0 || dctbl >= NUM_HUFF_TBLS ||
-	(cinfo->dc_huff_tbl_ptrs[dctbl] == NULL && !gather_statistics))
-      ERREXIT1(cinfo, JERR_NO_HUFF_TABLE, dctbl);
-    if (actbl < 0 || actbl >= NUM_HUFF_TBLS ||
-	(cinfo->ac_huff_tbl_ptrs[actbl] == NULL && !gather_statistics))
-      ERREXIT1(cinfo, JERR_NO_HUFF_TABLE, actbl);
-    if (gather_statistics) {
-#ifdef ENTROPY_OPT_SUPPORTED
-      /* Allocate and zero the statistics tables */
-      /* Note that jpeg_gen_optimal_table expects 257 entries in each table! */
-      if (entropy->dc_count_ptrs[dctbl] == NULL)
-	entropy->dc_count_ptrs[dctbl] = (long *)
-	  (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
-				      257 * SIZEOF(long));
-      MEMZERO(entropy->dc_count_ptrs[dctbl], 257 * SIZEOF(long));
-      if (entropy->ac_count_ptrs[actbl] == NULL)
-	entropy->ac_count_ptrs[actbl] = (long *)
-	  (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
-				      257 * SIZEOF(long));
-      MEMZERO(entropy->ac_count_ptrs[actbl], 257 * SIZEOF(long));
-#endif
-    } else {
-      /* Compute derived values for Huffman tables */
-      /* We may do this more than once for a table, but it's not expensive */
-      jpeg_make_c_derived_tbl(cinfo, cinfo->dc_huff_tbl_ptrs[dctbl],
-			      & entropy->dc_derived_tbls[dctbl]);
-      jpeg_make_c_derived_tbl(cinfo, cinfo->ac_huff_tbl_ptrs[actbl],
-			      & entropy->ac_derived_tbls[actbl]);
-    }
-    /* Initialize DC predictions to 0 */
-    entropy->saved.last_dc_val[ci] = 0;
-  }
-
-  /* Initialize bit buffer to empty */
-  entropy->saved.put_buffer = 0;
-  entropy->saved.put_bits = 0;
-
-  /* Initialize restart stuff */
-  entropy->restarts_to_go = cinfo->restart_interval;
-  entropy->next_restart_num = 0;
-}
-
-
-/*
- * Compute the derived values for a Huffman table.
- * Note this is also used by jcphuff.c.
- */
-
-GLOBAL void
-jpeg_make_c_derived_tbl (j_compress_ptr cinfo, JHUFF_TBL * htbl,
-			 c_derived_tbl ** pdtbl)
-{
-  c_derived_tbl *dtbl;
-  int p, i, l, lastp, si;
-  char huffsize[257];
-  unsigned int huffcode[257];
-  unsigned int code;
-
-  /* Allocate a workspace if we haven't already done so. */
-  if (*pdtbl == NULL)
-    *pdtbl = (c_derived_tbl *)
-      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
-				  SIZEOF(c_derived_tbl));
-  dtbl = *pdtbl;
-  
-  /* Figure C.1: make table of Huffman code length for each symbol */
-  /* Note that this is in code-length order. */
-
-  p = 0;
-  for (l = 1; l <= 16; l++) {
-    for (i = 1; i <= (int) htbl->bits[l]; i++)
-      huffsize[p++] = (char) l;
-  }
-  huffsize[p] = 0;
-  lastp = p;
-  
-  /* Figure C.2: generate the codes themselves */
-  /* Note that this is in code-length order. */
-  
-  code = 0;
-  si = huffsize[0];
-  p = 0;
-  while (huffsize[p]) {
-    while (((int) huffsize[p]) == si) {
-      huffcode[p++] = code;
-      code++;
-    }
-    code <<= 1;
-    si++;
-  }
-  
-  /* Figure C.3: generate encoding tables */
-  /* These are code and size indexed by symbol value */
-
-  /* Set any codeless symbols to have code length 0;
-   * this allows emit_bits to detect any attempt to emit such symbols.
-   */
-  MEMZERO(dtbl->ehufsi, SIZEOF(dtbl->ehufsi));
-
-  for (p = 0; p < lastp; p++) {
-    dtbl->ehufco[htbl->huffval[p]] = huffcode[p];
-    dtbl->ehufsi[htbl->huffval[p]] = huffsize[p];
-  }
-}
-
-
-/* Outputting bytes to the file */
-
-/* Emit a byte, taking 'action' if must suspend. */
-#define emit_byte(state,val,action)  \
-	{ *(state)->next_output_byte++ = (JOCTET) (val);  \
-	  if (--(state)->free_in_buffer == 0)  \
-	    if (! dump_buffer(state))  \
-	      { action; } }
-
-
-LOCAL boolean
-dump_buffer (working_state * state)
-/* Empty the output buffer; return TRUE if successful, FALSE if must suspend */
-{
-  struct jpeg_destination_mgr * dest = state->cinfo->dest;
-
-  if (! (*dest->empty_output_buffer) (state->cinfo))
-    return FALSE;
-  /* After a successful buffer dump, must reset buffer pointers */
-  state->next_output_byte = dest->next_output_byte;
-  state->free_in_buffer = dest->free_in_buffer;
-  return TRUE;
-}
-
-
-/* Outputting bits to the file */
-
-/* Only the right 24 bits of put_buffer are used; the valid bits are
- * left-justified in this part.  At most 16 bits can be passed to emit_bits
- * in one call, and we never retain more than 7 bits in put_buffer
- * between calls, so 24 bits are sufficient.
- */
-
-INLINE
-LOCAL boolean
-emit_bits (working_state * state, unsigned int code, int size)
-/* Emit some bits; return TRUE if successful, FALSE if must suspend */
-{
-  /* This routine is heavily used, so it's worth coding tightly. */
-  register INT32 put_buffer = (INT32) code;
-  register int put_bits = state->cur.put_bits;
-
-  /* if size is 0, caller used an invalid Huffman table entry */
-  if (size == 0)
-    ERREXIT(state->cinfo, JERR_HUFF_MISSING_CODE);
-
-  put_buffer &= (((INT32) 1)<<size) - 1; /* mask off any extra bits in code */
-  
-  put_bits += size;		/* new number of bits in buffer */
-  
-  put_buffer <<= 24 - put_bits; /* align incoming bits */
-
-  put_buffer |= state->cur.put_buffer; /* and merge with old buffer contents */
-  
-  while (put_bits >= 8) {
-    int c = (int) ((put_buffer >> 16) & 0xFF);
-    
-    emit_byte(state, c, return FALSE);
-    if (c == 0xFF) {		/* need to stuff a zero byte? */
-      emit_byte(state, 0, return FALSE);
-    }
-    put_buffer <<= 8;
-    put_bits -= 8;
-  }
-
-  state->cur.put_buffer = put_buffer; /* update state variables */
-  state->cur.put_bits = put_bits;
-
-  return TRUE;
-}
-
-
-LOCAL boolean
-flush_bits (working_state * state)
-{
-  if (! emit_bits(state, 0x7F, 7)) /* fill any partial byte with ones */
-    return FALSE;
-  state->cur.put_buffer = 0;	/* and reset bit-buffer to empty */
-  state->cur.put_bits = 0;
-  return TRUE;
-}
-
-
-/* Encode a single block's worth of coefficients */
-
-LOCAL boolean
-encode_one_block (working_state * state, JCOEFPTR block, int last_dc_val,
-		  c_derived_tbl *dctbl, c_derived_tbl *actbl)
-{
-  register int temp, temp2;
-  register int nbits;
-  register int k, r, i;
-  
-  /* Encode the DC coefficient difference per section F.1.2.1 */
-  
-  temp = temp2 = block[0] - last_dc_val;
-
-  if (temp < 0) {
-    temp = -temp;		/* temp is abs value of input */
-    /* For a negative input, want temp2 = bitwise complement of abs(input) */
-    /* This code assumes we are on a two's complement machine */
-    temp2--;
-  }
-  
-  /* Find the number of bits needed for the magnitude of the coefficient */
-  nbits = 0;
-  while (temp) {
-    nbits++;
-    temp >>= 1;
-  }
-  
-  /* Emit the Huffman-coded symbol for the number of bits */
-  if (! emit_bits(state, dctbl->ehufco[nbits], dctbl->ehufsi[nbits]))
-    return FALSE;
-
-  /* Emit that number of bits of the value, if positive, */
-  /* or the complement of its magnitude, if negative. */
-  if (nbits)			/* emit_bits rejects calls with size 0 */
-    if (! emit_bits(state, (unsigned int) temp2, nbits))
-      return FALSE;
-
-  /* Encode the AC coefficients per section F.1.2.2 */
-  
-  r = 0;			/* r = run length of zeros */
-  
-  for (k = 1; k < DCTSIZE2; k++) {
-    if ((temp = block[jpeg_natural_order[k]]) == 0) {
-      r++;
-    } else {
-      /* if run length > 15, must emit special run-length-16 codes (0xF0) */
-      while (r > 15) {
-	if (! emit_bits(state, actbl->ehufco[0xF0], actbl->ehufsi[0xF0]))
-	  return FALSE;
-	r -= 16;
-      }
-
-      temp2 = temp;
-      if (temp < 0) {
-	temp = -temp;		/* temp is abs value of input */
-	/* This code assumes we are on a two's complement machine */
-	temp2--;
-      }
-      
-      /* Find the number of bits needed for the magnitude of the coefficient */
-      nbits = 1;		/* there must be at least one 1 bit */
-      while ((temp >>= 1))
-	nbits++;
-      
-      /* Emit Huffman symbol for run length / number of bits */
-      i = (r << 4) + nbits;
-      if (! emit_bits(state, actbl->ehufco[i], actbl->ehufsi[i]))
-	return FALSE;
-
-      /* Emit that number of bits of the value, if positive, */
-      /* or the complement of its magnitude, if negative. */
-      if (! emit_bits(state, (unsigned int) temp2, nbits))
-	return FALSE;
-      
-      r = 0;
-    }
-  }
-
-  /* If the last coef(s) were zero, emit an end-of-block code */
-  if (r > 0)
-    if (! emit_bits(state, actbl->ehufco[0], actbl->ehufsi[0]))
-      return FALSE;
-
-  return TRUE;
-}
-
-
-/*
- * Emit a restart marker & resynchronize predictions.
- */
-
-LOCAL boolean
-emit_restart (working_state * state, int restart_num)
-{
-  int ci;
-
-  if (! flush_bits(state))
-    return FALSE;
-
-  emit_byte(state, 0xFF, return FALSE);
-  emit_byte(state, JPEG_RST0 + restart_num, return FALSE);
-
-  /* Re-initialize DC predictions to 0 */
-  for (ci = 0; ci < state->cinfo->comps_in_scan; ci++)
-    state->cur.last_dc_val[ci] = 0;
-
-  /* The restart counter is not updated until we successfully write the MCU. */
-
-  return TRUE;
-}
-
-
-/*
- * Encode and output one MCU's worth of Huffman-compressed coefficients.
- */
-
-METHODDEF boolean
-encode_mcu_huff (j_compress_ptr cinfo, JBLOCKROW *MCU_data)
-{
-  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
-  working_state state;
-  int blkn, ci;
-  jpeg_component_info * compptr;
-
-  /* Load up working state */
-  state.next_output_byte = cinfo->dest->next_output_byte;
-  state.free_in_buffer = cinfo->dest->free_in_buffer;
-  ASSIGN_STATE(state.cur, entropy->saved);
-  state.cinfo = cinfo;
-
-  /* Emit restart marker if needed */
-  if (cinfo->restart_interval) {
-    if (entropy->restarts_to_go == 0)
-      if (! emit_restart(&state, entropy->next_restart_num))
-	return FALSE;
-  }
-
-  /* Encode the MCU data blocks */
-  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
-    ci = cinfo->MCU_membership[blkn];
-    compptr = cinfo->cur_comp_info[ci];
-    if (! encode_one_block(&state,
-			   MCU_data[blkn][0], state.cur.last_dc_val[ci],
-			   entropy->dc_derived_tbls[compptr->dc_tbl_no],
-			   entropy->ac_derived_tbls[compptr->ac_tbl_no]))
-      return FALSE;
-    /* Update last_dc_val */
-    state.cur.last_dc_val[ci] = MCU_data[blkn][0][0];
-  }
-
-  /* Completed MCU, so update state */
-  cinfo->dest->next_output_byte = state.next_output_byte;
-  cinfo->dest->free_in_buffer = state.free_in_buffer;
-  ASSIGN_STATE(entropy->saved, state.cur);
-
-  /* Update restart-interval state too */
-  if (cinfo->restart_interval) {
-    if (entropy->restarts_to_go == 0) {
-      entropy->restarts_to_go = cinfo->restart_interval;
-      entropy->next_restart_num++;
-      entropy->next_restart_num &= 7;
-    }
-    entropy->restarts_to_go--;
-  }
-
-  return TRUE;
-}
-
-
-/*
- * Finish up at the end of a Huffman-compressed scan.
- */
-
-METHODDEF void
-finish_pass_huff (j_compress_ptr cinfo)
-{
-  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
-  working_state state;
-
-  /* Load up working state ... flush_bits needs it */
-  state.next_output_byte = cinfo->dest->next_output_byte;
-  state.free_in_buffer = cinfo->dest->free_in_buffer;
-  ASSIGN_STATE(state.cur, entropy->saved);
-  state.cinfo = cinfo;
-
-  /* Flush out the last data */
-  if (! flush_bits(&state))
-    ERREXIT(cinfo, JERR_CANT_SUSPEND);
-
-  /* Update state */
-  cinfo->dest->next_output_byte = state.next_output_byte;
-  cinfo->dest->free_in_buffer = state.free_in_buffer;
-  ASSIGN_STATE(entropy->saved, state.cur);
-}
-
-
-/*
- * Huffman coding optimization.
- *
- * This actually is optimization, in the sense that we find the best possible
- * Huffman table(s) for the given data.  We first scan the supplied data and
- * count the number of uses of each symbol that is to be Huffman-coded.
- * (This process must agree with the code above.)  Then we build an
- * optimal Huffman coding tree for the observed counts.
- *
- * The JPEG standard requires Huffman codes to be no more than 16 bits long.
- * If some symbols have a very small but nonzero probability, the Huffman tree
- * must be adjusted to meet the code length restriction.  We currently use
- * the adjustment method suggested in the JPEG spec.  This method is *not*
- * optimal; it may not choose the best possible limited-length code.  But
- * since the symbols involved are infrequently used, it's not clear that
- * going to extra trouble is worthwhile.
- */
-
-#ifdef ENTROPY_OPT_SUPPORTED
-
-
-/* Process a single block's worth of coefficients */
-
-LOCAL void
-htest_one_block (JCOEFPTR block, int last_dc_val,
-		 long dc_counts[], long ac_counts[])
-{
-  register int temp;
-  register int nbits;
-  register int k, r;
-  
-  /* Encode the DC coefficient difference per section F.1.2.1 */
-  
-  temp = block[0] - last_dc_val;
-  if (temp < 0)
-    temp = -temp;
-  
-  /* Find the number of bits needed for the magnitude of the coefficient */
-  nbits = 0;
-  while (temp) {
-    nbits++;
-    temp >>= 1;
-  }
-
-  /* Count the Huffman symbol for the number of bits */
-  dc_counts[nbits]++;
-  
-  /* Encode the AC coefficients per section F.1.2.2 */
-  
-  r = 0;			/* r = run length of zeros */
-  
-  for (k = 1; k < DCTSIZE2; k++) {
-    if ((temp = block[jpeg_natural_order[k]]) == 0) {
-      r++;
-    } else {
-      /* if run length > 15, must emit special run-length-16 codes (0xF0) */
-      while (r > 15) {
-	ac_counts[0xF0]++;
-	r -= 16;
-      }
-      
-      /* Find the number of bits needed for the magnitude of the coefficient */
-      if (temp < 0)
-	temp = -temp;
-      
-      /* Find the number of bits needed for the magnitude of the coefficient */
-      nbits = 1;		/* there must be at least one 1 bit */
-      while ((temp >>= 1))
-	nbits++;
-      
-      /* Count Huffman symbol for run length / number of bits */
-      ac_counts[(r << 4) + nbits]++;
-      
-      r = 0;
-    }
-  }
-
-  /* If the last coef(s) were zero, emit an end-of-block code */
-  if (r > 0)
-    ac_counts[0]++;
-}
-
-
-/*
- * Trial-encode one MCU's worth of Huffman-compressed coefficients.
- * No data is actually output, so no suspension return is possible.
- */
-
-METHODDEF boolean
-encode_mcu_gather (j_compress_ptr cinfo, JBLOCKROW *MCU_data)
-{
-  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
-  int blkn, ci;
-  jpeg_component_info * compptr;
-
-  /* Take care of restart intervals if needed */
-  if (cinfo->restart_interval) {
-    if (entropy->restarts_to_go == 0) {
-      /* Re-initialize DC predictions to 0 */
-      for (ci = 0; ci < cinfo->comps_in_scan; ci++)
-	entropy->saved.last_dc_val[ci] = 0;
-      /* Update restart state */
-      entropy->restarts_to_go = cinfo->restart_interval;
-    }
-    entropy->restarts_to_go--;
-  }
-
-  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
-    ci = cinfo->MCU_membership[blkn];
-    compptr = cinfo->cur_comp_info[ci];
-    htest_one_block(MCU_data[blkn][0], entropy->saved.last_dc_val[ci],
-		    entropy->dc_count_ptrs[compptr->dc_tbl_no],
-		    entropy->ac_count_ptrs[compptr->ac_tbl_no]);
-    entropy->saved.last_dc_val[ci] = MCU_data[blkn][0][0];
-  }
-
-  return TRUE;
-}
-
-
-/*
- * Generate the optimal coding for the given counts, fill htbl.
- * Note this is also used by jcphuff.c.
- */
-
-GLOBAL void
-jpeg_gen_optimal_table (j_compress_ptr cinfo, JHUFF_TBL * htbl, long freq[])
-{
-#define MAX_CLEN 32		/* assumed maximum initial code length */
-  UINT8 bits[MAX_CLEN+1];	/* bits[k] = # of symbols with code length k */
-  int codesize[257];		/* codesize[k] = code length of symbol k */
-  int others[257];		/* next symbol in current branch of tree */
-  int c1, c2;
-  int p, i, j;
-  long v;
-
-  /* This algorithm is explained in section K.2 of the JPEG standard */
-
-  MEMZERO(bits, SIZEOF(bits));
-  MEMZERO(codesize, SIZEOF(codesize));
-  for (i = 0; i < 257; i++)
-    others[i] = -1;		/* init links to empty */
-  
-  freq[256] = 1;		/* make sure there is a nonzero count */
-  /* Including the pseudo-symbol 256 in the Huffman procedure guarantees
-   * that no real symbol is given code-value of all ones, because 256
-   * will be placed in the largest codeword category.
-   */
-
-  /* Huffman's basic algorithm to assign optimal code lengths to symbols */
-
-  for (;;) {
-    /* Find the smallest nonzero frequency, set c1 = its symbol */
-    /* In case of ties, take the larger symbol number */
-    c1 = -1;
-    v = 1000000000L;
-    for (i = 0; i <= 256; i++) {
-      if (freq[i] && freq[i] <= v) {
-	v = freq[i];
-	c1 = i;
-      }
-    }
-
-    /* Find the next smallest nonzero frequency, set c2 = its symbol */
-    /* In case of ties, take the larger symbol number */
-    c2 = -1;
-    v = 1000000000L;
-    for (i = 0; i <= 256; i++) {
-      if (freq[i] && freq[i] <= v && i != c1) {
-	v = freq[i];
-	c2 = i;
-      }
-    }
-
-    /* Done if we've merged everything into one frequency */
-    if (c2 < 0)
-      break;
-    
-    /* Else merge the two counts/trees */
-    freq[c1] += freq[c2];
-    freq[c2] = 0;
-
-    /* Increment the codesize of everything in c1's tree branch */
-    codesize[c1]++;
-    while (others[c1] >= 0) {
-      c1 = others[c1];
-      codesize[c1]++;
-    }
-    
-    others[c1] = c2;		/* chain c2 onto c1's tree branch */
-    
-    /* Increment the codesize of everything in c2's tree branch */
-    codesize[c2]++;
-    while (others[c2] >= 0) {
-      c2 = others[c2];
-      codesize[c2]++;
-    }
-  }
-
-  /* Now count the number of symbols of each code length */
-  for (i = 0; i <= 256; i++) {
-    if (codesize[i]) {
-      /* The JPEG standard seems to think that this can't happen, */
-      /* but I'm paranoid... */
-      if (codesize[i] > MAX_CLEN)
-	ERREXIT(cinfo, JERR_HUFF_CLEN_OVERFLOW);
-
-      bits[codesize[i]]++;
-    }
-  }
-
-  /* JPEG doesn't allow symbols with code lengths over 16 bits, so if the pure
-   * Huffman procedure assigned any such lengths, we must adjust the coding.
-   * Here is what the JPEG spec says about how this next bit works:
-   * Since symbols are paired for the longest Huffman code, the symbols are
-   * removed from this length category two at a time.  The prefix for the pair
-   * (which is one bit shorter) is allocated to one of the pair; then,
-   * skipping the BITS entry for that prefix length, a code word from the next
-   * shortest nonzero BITS entry is converted into a prefix for two code words
-   * one bit longer.
-   */
-  
-  for (i = MAX_CLEN; i > 16; i--) {
-    while (bits[i] > 0) {
-      j = i - 2;		/* find length of new prefix to be used */
-      while (bits[j] == 0)
-	j--;
-      
-      bits[i] -= 2;		/* remove two symbols */
-      bits[i-1]++;		/* one goes in this length */
-      bits[j+1] += 2;		/* two new symbols in this length */
-      bits[j]--;		/* symbol of this length is now a prefix */
-    }
-  }
-
-  /* Remove the count for the pseudo-symbol 256 from the largest codelength */
-  while (bits[i] == 0)		/* find largest codelength still in use */
-    i--;
-  bits[i]--;
-  
-  /* Return final symbol counts (only for lengths 0..16) */
-  MEMCOPY(htbl->bits, bits, SIZEOF(htbl->bits));
-  
-  /* Return a list of the symbols sorted by code length */
-  /* It's not real clear to me why we don't need to consider the codelength
-   * changes made above, but the JPEG spec seems to think this works.
-   */
-  p = 0;
-  for (i = 1; i <= MAX_CLEN; i++) {
-    for (j = 0; j <= 255; j++) {
-      if (codesize[j] == i) {
-	htbl->huffval[p] = (UINT8) j;
-	p++;
-      }
-    }
-  }
-
-  /* Set sent_table FALSE so updated table will be written to JPEG file. */
-  htbl->sent_table = FALSE;
-}
-
-
-/*
- * Finish up a statistics-gathering pass and create the new Huffman tables.
- */
-
-METHODDEF void
-finish_pass_gather (j_compress_ptr cinfo)
-{
-  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
-  int ci, dctbl, actbl;
-  jpeg_component_info * compptr;
-  JHUFF_TBL **htblptr;
-  boolean did_dc[NUM_HUFF_TBLS];
-  boolean did_ac[NUM_HUFF_TBLS];
-
-  /* It's important not to apply jpeg_gen_optimal_table more than once
-   * per table, because it clobbers the input frequency counts!
-   */
-  MEMZERO(did_dc, SIZEOF(did_dc));
-  MEMZERO(did_ac, SIZEOF(did_ac));
-
-  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
-    compptr = cinfo->cur_comp_info[ci];
-    dctbl = compptr->dc_tbl_no;
-    actbl = compptr->ac_tbl_no;
-    if (! did_dc[dctbl]) {
-      htblptr = & cinfo->dc_huff_tbl_ptrs[dctbl];
-      if (*htblptr == NULL)
-	*htblptr = jpeg_alloc_huff_table((j_common_ptr) cinfo);
-      jpeg_gen_optimal_table(cinfo, *htblptr, entropy->dc_count_ptrs[dctbl]);
-      did_dc[dctbl] = TRUE;
-    }
-    if (! did_ac[actbl]) {
-      htblptr = & cinfo->ac_huff_tbl_ptrs[actbl];
-      if (*htblptr == NULL)
-	*htblptr = jpeg_alloc_huff_table((j_common_ptr) cinfo);
-      jpeg_gen_optimal_table(cinfo, *htblptr, entropy->ac_count_ptrs[actbl]);
-      did_ac[actbl] = TRUE;
-    }
-  }
-}
-
-
-#endif /* ENTROPY_OPT_SUPPORTED */
-
-
-/*
- * Module initialization routine for Huffman entropy encoding.
- */
-
-GLOBAL void
-jinit_huff_encoder (j_compress_ptr cinfo)
-{
-  huff_entropy_ptr entropy;
-  int i;
-
-  entropy = (huff_entropy_ptr)
-    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
-				SIZEOF(huff_entropy_encoder));
-  cinfo->entropy = (struct jpeg_entropy_encoder *) entropy;
-  entropy->pub.start_pass = start_pass_huff;
-
-  /* Mark tables unallocated */
-  for (i = 0; i < NUM_HUFF_TBLS; i++) {
-    entropy->dc_derived_tbls[i] = entropy->ac_derived_tbls[i] = NULL;
-#ifdef ENTROPY_OPT_SUPPORTED
-    entropy->dc_count_ptrs[i] = entropy->ac_count_ptrs[i] = NULL;
-#endif
-  }
-}
diff -NEaurb neo/renderer/jpeg-6/jchuff.h neo/renderer/jpeg-6/jchuff.h
--- neo/renderer/jpeg-6/jchuff.h	2013-08-14 01:47:52 +0000
+++ neo/renderer/jpeg-6/jchuff.h	1970-01-01 00:00:00 +0000
@@ -1,35 +0,0 @@
-/*
- * jchuff.h
- *
- * Copyright (C) 1991-1995, Thomas G. Lane.
- * This file is part of the Independent JPEG Group's software.
- * For conditions of distribution and use, see the accompanying README file.
- *
- * This file contains declarations for Huffman entropy encoding routines
- * that are shared between the sequential encoder (jchuff.c) and the
- * progressive encoder (jcphuff.c).  No other modules need to see these.
- */
-
-/* Derived data constructed for each Huffman table */
-
-typedef struct
-{
-    unsigned int ehufco[256];	/* code for each symbol */
-    char ehufsi[256];		/* length of code for each symbol */
-    /* If no code has been allocated for a symbol S, ehufsi[S] contains 0 */
-} c_derived_tbl;
-
-/* Short forms of external names for systems with brain-damaged linkers. */
-
-#ifdef NEED_SHORT_EXTERNAL_NAMES
-#define jpeg_make_c_derived_tbl	jMkCDerived
-#define jpeg_gen_optimal_table	jGenOptTbl
-#endif /* NEED_SHORT_EXTERNAL_NAMES */
-
-/* Expand a Huffman table definition into the derived format */
-EXTERN void jpeg_make_c_derived_tbl JPP((j_compress_ptr cinfo,
-                                        JHUFF_TBL * htbl, c_derived_tbl ** pdtbl));
-
-/* Generate an optimal table definition given the specified counts */
-EXTERN void jpeg_gen_optimal_table JPP((j_compress_ptr cinfo,
-                                        JHUFF_TBL * htbl, long freq[]));
diff -NEaurb neo/renderer/jpeg-6/jcinit.c neo/renderer/jpeg-6/jcinit.c
--- neo/renderer/jpeg-6/jcinit.c	2011-12-26 04:15:38 +0000
+++ neo/renderer/jpeg-6/jcinit.c	1970-01-01 00:00:00 +0000
@@ -1,72 +0,0 @@
-/*
- * jcinit.c
- *
- * Copyright (C) 1991-1995, Thomas G. Lane.
- * This file is part of the Independent JPEG Group's software.
- * For conditions of distribution and use, see the accompanying README file.
- *
- * This file contains initialization logic for the JPEG compressor.
- * This routine is in charge of selecting the modules to be executed and
- * making an initialization call to each one.
- *
- * Logically, this code belongs in jcmaster.c.  It's split out because
- * linking this routine implies linking the entire compression library.
- * For a transcoding-only application, we want to be able to use jcmaster.c
- * without linking in the whole library.
- */
-
-#define JPEG_INTERNALS
-#include "jinclude.h"
-#include "jpeglib.h"
-
-
-/*
- * Master selection of compression modules.
- * This is done once at the start of processing an image.  We determine
- * which modules will be used and give them appropriate initialization calls.
- */
-
-GLOBAL void
-jinit_compress_master (j_compress_ptr cinfo)
-{
-  /* Initialize master control (includes parameter checking/processing) */
-  jinit_c_master_control(cinfo, FALSE /* full compression */);
-
-  /* Preprocessing */
-  if (! cinfo->raw_data_in) {
-    jinit_color_converter(cinfo);
-    jinit_downsampler(cinfo);
-    jinit_c_prep_controller(cinfo, FALSE /* never need full buffer here */);
-  }
-  /* Forward DCT */
-  jinit_forward_dct(cinfo);
-  /* Entropy encoding: either Huffman or arithmetic coding. */
-  if (cinfo->arith_code) {
-    ERREXIT(cinfo, JERR_ARITH_NOTIMPL);
-  } else {
-    if (cinfo->progressive_mode) {
-#ifdef C_PROGRESSIVE_SUPPORTED
-      jinit_phuff_encoder(cinfo);
-#else
-      ERREXIT(cinfo, JERR_NOT_COMPILED);
-#endif
-    } else
-      jinit_huff_encoder(cinfo);
-  }
-
-  /* Need a full-image coefficient buffer in any multi-pass mode. */
-  jinit_c_coef_controller(cinfo,
-			  (cinfo->num_scans > 1 || cinfo->optimize_coding));
-  jinit_c_main_controller(cinfo, FALSE /* never need full buffer here */);
-
-  jinit_marker_writer(cinfo);
-
-  /* We can now tell the memory manager to allocate virtual arrays. */
-  (*cinfo->mem->realize_virt_arrays) ((j_common_ptr) cinfo);
-
-  /* Write the datastream header (SOI) immediately.
-   * Frame and scan headers are postponed till later.
-   * This lets application insert special markers after the SOI.
-   */
-  (*cinfo->marker->write_file_header) (cinfo);
-}
diff -NEaurb neo/renderer/jpeg-6/jcmainct.c neo/renderer/jpeg-6/jcmainct.c
--- neo/renderer/jpeg-6/jcmainct.c	2011-12-26 04:15:38 +0000
+++ neo/renderer/jpeg-6/jcmainct.c	1970-01-01 00:00:00 +0000
@@ -1,293 +0,0 @@
-/*
- * jcmainct.c
- *
- * Copyright (C) 1994-1995, Thomas G. Lane.
- * This file is part of the Independent JPEG Group's software.
- * For conditions of distribution and use, see the accompanying README file.
- *
- * This file contains the main buffer controller for compression.
- * The main buffer lies between the pre-processor and the JPEG
- * compressor proper; it holds downsampled data in the JPEG colorspace.
- */
-
-#define JPEG_INTERNALS
-#include "jinclude.h"
-#include "jpeglib.h"
-
-
-/* Note: currently, there is no operating mode in which a full-image buffer
- * is needed at this step.  If there were, that mode could not be used with
- * "raw data" input, since this module is bypassed in that case.  However,
- * we've left the code here for possible use in special applications.
- */
-#undef FULL_MAIN_BUFFER_SUPPORTED
-
-
-/* Private buffer controller object */
-
-typedef struct {
-  struct jpeg_c_main_controller pub; /* public fields */
-
-  JDIMENSION cur_iMCU_row;	/* number of current iMCU row */
-  JDIMENSION rowgroup_ctr;	/* counts row groups received in iMCU row */
-  boolean suspended;		/* remember if we suspended output */
-  J_BUF_MODE pass_mode;		/* current operating mode */
-
-  /* If using just a strip buffer, this points to the entire set of buffers
-   * (we allocate one for each component).  In the full-image case, this
-   * points to the currently accessible strips of the virtual arrays.
-   */
-  JSAMPARRAY buffer[MAX_COMPONENTS];
-
-#ifdef FULL_MAIN_BUFFER_SUPPORTED
-  /* If using full-image storage, this array holds pointers to virtual-array
-   * control blocks for each component.  Unused if not full-image storage.
-   */
-  jvirt_sarray_ptr whole_image[MAX_COMPONENTS];
-#endif
-} my_main_controller;
-
-typedef my_main_controller * my_main_ptr;
-
-
-/* Forward declarations */
-METHODDEF void process_data_simple_main
-	JPP((j_compress_ptr cinfo, JSAMPARRAY input_buf,
-	     JDIMENSION *in_row_ctr, JDIMENSION in_rows_avail));
-#ifdef FULL_MAIN_BUFFER_SUPPORTED
-METHODDEF void process_data_buffer_main
-	JPP((j_compress_ptr cinfo, JSAMPARRAY input_buf,
-	     JDIMENSION *in_row_ctr, JDIMENSION in_rows_avail));
-#endif
-
-
-/*
- * Initialize for a processing pass.
- */
-
-METHODDEF void
-start_pass_main (j_compress_ptr cinfo, J_BUF_MODE pass_mode)
-{
-  my_main_ptr main = (my_main_ptr) cinfo->main;
-
-  /* Do nothing in raw-data mode. */
-  if (cinfo->raw_data_in)
-    return;
-
-  main->cur_iMCU_row = 0;	/* initialize counters */
-  main->rowgroup_ctr = 0;
-  main->suspended = FALSE;
-  main->pass_mode = pass_mode;	/* save mode for use by process_data */
-
-  switch (pass_mode) {
-  case JBUF_PASS_THRU:
-#ifdef FULL_MAIN_BUFFER_SUPPORTED
-    if (main->whole_image[0] != NULL)
-      ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
-#endif
-    main->pub.process_data = process_data_simple_main;
-    break;
-#ifdef FULL_MAIN_BUFFER_SUPPORTED
-  case JBUF_SAVE_SOURCE:
-  case JBUF_CRANK_DEST:
-  case JBUF_SAVE_AND_PASS:
-    if (main->whole_image[0] == NULL)
-      ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
-    main->pub.process_data = process_data_buffer_main;
-    break;
-#endif
-  default:
-    ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
-    break;
-  }
-}
-
-
-/*
- * Process some data.
- * This routine handles the simple pass-through mode,
- * where we have only a strip buffer.
- */
-
-METHODDEF void
-process_data_simple_main (j_compress_ptr cinfo,
-			  JSAMPARRAY input_buf, JDIMENSION *in_row_ctr,
-			  JDIMENSION in_rows_avail)
-{
-  my_main_ptr main = (my_main_ptr) cinfo->main;
-
-  while (main->cur_iMCU_row < cinfo->total_iMCU_rows) {
-    /* Read input data if we haven't filled the main buffer yet */
-    if (main->rowgroup_ctr < DCTSIZE)
-      (*cinfo->prep->pre_process_data) (cinfo,
-					input_buf, in_row_ctr, in_rows_avail,
-					main->buffer, &main->rowgroup_ctr,
-					(JDIMENSION) DCTSIZE);
-
-    /* If we don't have a full iMCU row buffered, return to application for
-     * more data.  Note that preprocessor will always pad to fill the iMCU row
-     * at the bottom of the image.
-     */
-    if (main->rowgroup_ctr != DCTSIZE)
-      return;
-
-    /* Send the completed row to the compressor */
-    if (! (*cinfo->coef->compress_data) (cinfo, main->buffer)) {
-      /* If compressor did not consume the whole row, then we must need to
-       * suspend processing and return to the application.  In this situation
-       * we pretend we didn't yet consume the last input row; otherwise, if
-       * it happened to be the last row of the image, the application would
-       * think we were done.
-       */
-      if (! main->suspended) {
-	(*in_row_ctr)--;
-	main->suspended = TRUE;
-      }
-      return;
-    }
-    /* We did finish the row.  Undo our little suspension hack if a previous
-     * call suspended; then mark the main buffer empty.
-     */
-    if (main->suspended) {
-      (*in_row_ctr)++;
-      main->suspended = FALSE;
-    }
-    main->rowgroup_ctr = 0;
-    main->cur_iMCU_row++;
-  }
-}
-
-
-#ifdef FULL_MAIN_BUFFER_SUPPORTED
-
-/*
- * Process some data.
- * This routine handles all of the modes that use a full-size buffer.
- */
-
-METHODDEF void
-process_data_buffer_main (j_compress_ptr cinfo,
-			  JSAMPARRAY input_buf, JDIMENSION *in_row_ctr,
-			  JDIMENSION in_rows_avail)
-{
-  my_main_ptr main = (my_main_ptr) cinfo->main;
-  int ci;
-  jpeg_component_info *compptr;
-  boolean writing = (main->pass_mode != JBUF_CRANK_DEST);
-
-  while (main->cur_iMCU_row < cinfo->total_iMCU_rows) {
-    /* Realign the virtual buffers if at the start of an iMCU row. */
-    if (main->rowgroup_ctr == 0) {
-      for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
-	   ci++, compptr++) {
-	main->buffer[ci] = (*cinfo->mem->access_virt_sarray)
-	  ((j_common_ptr) cinfo, main->whole_image[ci],
-	   main->cur_iMCU_row * (compptr->v_samp_factor * DCTSIZE),
-	   (JDIMENSION) (compptr->v_samp_factor * DCTSIZE), writing);
-      }
-      /* In a read pass, pretend we just read some source data. */
-      if (! writing) {
-	*in_row_ctr += cinfo->max_v_samp_factor * DCTSIZE;
-	main->rowgroup_ctr = DCTSIZE;
-      }
-    }
-
-    /* If a write pass, read input data until the current iMCU row is full. */
-    /* Note: preprocessor will pad if necessary to fill the last iMCU row. */
-    if (writing) {
-      (*cinfo->prep->pre_process_data) (cinfo,
-					input_buf, in_row_ctr, in_rows_avail,
-					main->buffer, &main->rowgroup_ctr,
-					(JDIMENSION) DCTSIZE);
-      /* Return to application if we need more data to fill the iMCU row. */
-      if (main->rowgroup_ctr < DCTSIZE)
-	return;
-    }
-
-    /* Emit data, unless this is a sink-only pass. */
-    if (main->pass_mode != JBUF_SAVE_SOURCE) {
-      if (! (*cinfo->coef->compress_data) (cinfo, main->buffer)) {
-	/* If compressor did not consume the whole row, then we must need to
-	 * suspend processing and return to the application.  In this situation
-	 * we pretend we didn't yet consume the last input row; otherwise, if
-	 * it happened to be the last row of the image, the application would
-	 * think we were done.
-	 */
-	if (! main->suspended) {
-	  (*in_row_ctr)--;
-	  main->suspended = TRUE;
-	}
-	return;
-      }
-      /* We did finish the row.  Undo our little suspension hack if a previous
-       * call suspended; then mark the main buffer empty.
-       */
-      if (main->suspended) {
-	(*in_row_ctr)++;
-	main->suspended = FALSE;
-      }
-    }
-
-    /* If get here, we are done with this iMCU row.  Mark buffer empty. */
-    main->rowgroup_ctr = 0;
-    main->cur_iMCU_row++;
-  }
-}
-
-#endif /* FULL_MAIN_BUFFER_SUPPORTED */
-
-
-/*
- * Initialize main buffer controller.
- */
-
-GLOBAL void
-jinit_c_main_controller (j_compress_ptr cinfo, boolean need_full_buffer)
-{
-  my_main_ptr main;
-  int ci;
-  jpeg_component_info *compptr;
-
-  main = (my_main_ptr)
-    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
-				SIZEOF(my_main_controller));
-  cinfo->main = (struct jpeg_c_main_controller *) main;
-  main->pub.start_pass = start_pass_main;
-
-  /* We don't need to create a buffer in raw-data mode. */
-  if (cinfo->raw_data_in)
-    return;
-
-  /* Create the buffer.  It holds downsampled data, so each component
-   * may be of a different size.
-   */
-  if (need_full_buffer) {
-#ifdef FULL_MAIN_BUFFER_SUPPORTED
-    /* Allocate a full-image virtual array for each component */
-    /* Note we pad the bottom to a multiple of the iMCU height */
-    for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
-	 ci++, compptr++) {
-      main->whole_image[ci] = (*cinfo->mem->request_virt_sarray)
-	((j_common_ptr) cinfo, JPOOL_IMAGE, FALSE,
-	 compptr->width_in_blocks * DCTSIZE,
-	 (JDIMENSION) jround_up((long) compptr->height_in_blocks,
-				(long) compptr->v_samp_factor) * DCTSIZE,
-	 (JDIMENSION) (compptr->v_samp_factor * DCTSIZE));
-    }
-#else
-    ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
-#endif
-  } else {
-#ifdef FULL_MAIN_BUFFER_SUPPORTED
-    main->whole_image[0] = NULL; /* flag for no virtual arrays */
-#endif
-    /* Allocate a strip buffer for each component */
-    for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
-	 ci++, compptr++) {
-      main->buffer[ci] = (*cinfo->mem->alloc_sarray)
-	((j_common_ptr) cinfo, JPOOL_IMAGE,
-	 compptr->width_in_blocks * DCTSIZE,
-	 (JDIMENSION) (compptr->v_samp_factor * DCTSIZE));
-    }
-  }
-}
diff -NEaurb neo/renderer/jpeg-6/jcmarker.c neo/renderer/jpeg-6/jcmarker.c
--- neo/renderer/jpeg-6/jcmarker.c	2011-12-26 04:15:38 +0000
+++ neo/renderer/jpeg-6/jcmarker.c	1970-01-01 00:00:00 +0000
@@ -1,639 +0,0 @@
-/*
- * jcmarker.c
- *
- * Copyright (C) 1991-1995, Thomas G. Lane.
- * This file is part of the Independent JPEG Group's software.
- * For conditions of distribution and use, see the accompanying README file.
- *
- * This file contains routines to write JPEG datastream markers.
- */
-
-#define JPEG_INTERNALS
-#include "jinclude.h"
-#include "jpeglib.h"
-
-
-typedef enum {			/* JPEG marker codes */
-  M_SOF0  = 0xc0,
-  M_SOF1  = 0xc1,
-  M_SOF2  = 0xc2,
-  M_SOF3  = 0xc3,
-  
-  M_SOF5  = 0xc5,
-  M_SOF6  = 0xc6,
-  M_SOF7  = 0xc7,
-  
-  M_JPG   = 0xc8,
-  M_SOF9  = 0xc9,
-  M_SOF10 = 0xca,
-  M_SOF11 = 0xcb,
-  
-  M_SOF13 = 0xcd,
-  M_SOF14 = 0xce,
-  M_SOF15 = 0xcf,
-  
-  M_DHT   = 0xc4,
-  
-  M_DAC   = 0xcc,
-  
-  M_RST0  = 0xd0,
-  M_RST1  = 0xd1,
-  M_RST2  = 0xd2,
-  M_RST3  = 0xd3,
-  M_RST4  = 0xd4,
-  M_RST5  = 0xd5,
-  M_RST6  = 0xd6,
-  M_RST7  = 0xd7,
-  
-  M_SOI   = 0xd8,
-  M_EOI   = 0xd9,
-  M_SOS   = 0xda,
-  M_DQT   = 0xdb,
-  M_DNL   = 0xdc,
-  M_DRI   = 0xdd,
-  M_DHP   = 0xde,
-  M_EXP   = 0xdf,
-  
-  M_APP0  = 0xe0,
-  M_APP1  = 0xe1,
-  M_APP2  = 0xe2,
-  M_APP3  = 0xe3,
-  M_APP4  = 0xe4,
-  M_APP5  = 0xe5,
-  M_APP6  = 0xe6,
-  M_APP7  = 0xe7,
-  M_APP8  = 0xe8,
-  M_APP9  = 0xe9,
-  M_APP10 = 0xea,
-  M_APP11 = 0xeb,
-  M_APP12 = 0xec,
-  M_APP13 = 0xed,
-  M_APP14 = 0xee,
-  M_APP15 = 0xef,
-  
-  M_JPG0  = 0xf0,
-  M_JPG13 = 0xfd,
-  M_COM   = 0xfe,
-  
-  M_TEM   = 0x01,
-  
-  M_ERROR = 0x100
-} JPEG_MARKER;
-
-
-/*
- * Basic output routines.
- *
- * Note that we do not support suspension while writing a marker.
- * Therefore, an application using suspension must ensure that there is
- * enough buffer space for the initial markers (typ. 600-700 bytes) before
- * calling jpeg_start_compress, and enough space to write the trailing EOI
- * (a few bytes) before calling jpeg_finish_compress.  Multipass compression
- * modes are not supported at all with suspension, so those two are the only
- * points where markers will be written.
- */
-
-LOCAL void
-emit_byte (j_compress_ptr cinfo, int val)
-/* Emit a byte */
-{
-  struct jpeg_destination_mgr * dest = cinfo->dest;
-
-  *(dest->next_output_byte)++ = (JOCTET) val;
-  if (--dest->free_in_buffer == 0) {
-    if (! (*dest->empty_output_buffer) (cinfo))
-      ERREXIT(cinfo, JERR_CANT_SUSPEND);
-  }
-}
-
-
-LOCAL void
-emit_marker (j_compress_ptr cinfo, JPEG_MARKER mark)
-/* Emit a marker code */
-{
-  emit_byte(cinfo, 0xFF);
-  emit_byte(cinfo, (int) mark);
-}
-
-
-LOCAL void
-emit_2bytes (j_compress_ptr cinfo, int value)
-/* Emit a 2-byte integer; these are always MSB first in JPEG files */
-{
-  emit_byte(cinfo, (value >> 8) & 0xFF);
-  emit_byte(cinfo, value & 0xFF);
-}
-
-
-/*
- * Routines to write specific marker types.
- */
-
-LOCAL int
-emit_dqt (j_compress_ptr cinfo, int index)
-/* Emit a DQT marker */
-/* Returns the precision used (0 = 8bits, 1 = 16bits) for baseline checking */
-{
-  JQUANT_TBL * qtbl = cinfo->quant_tbl_ptrs[index];
-  int prec;
-  int i;
-
-  if (qtbl == NULL)
-    ERREXIT1(cinfo, JERR_NO_QUANT_TABLE, index);
-
-  prec = 0;
-  for (i = 0; i < DCTSIZE2; i++) {
-    if (qtbl->quantval[i] > 255)
-      prec = 1;
-  }
-
-  if (! qtbl->sent_table) {
-    emit_marker(cinfo, M_DQT);
-
-    emit_2bytes(cinfo, prec ? DCTSIZE2*2 + 1 + 2 : DCTSIZE2 + 1 + 2);
-
-    emit_byte(cinfo, index + (prec<<4));
-
-    for (i = 0; i < DCTSIZE2; i++) {
-      if (prec)
-	emit_byte(cinfo, qtbl->quantval[i] >> 8);
-      emit_byte(cinfo, qtbl->quantval[i] & 0xFF);
-    }
-
-    qtbl->sent_table = TRUE;
-  }
-
-  return prec;
-}
-
-
-LOCAL void
-emit_dht (j_compress_ptr cinfo, int index, boolean is_ac)
-/* Emit a DHT marker */
-{
-  JHUFF_TBL * htbl;
-  int length, i;
-  
-  if (is_ac) {
-    htbl = cinfo->ac_huff_tbl_ptrs[index];
-    index += 0x10;		/* output index has AC bit set */
-  } else {
-    htbl = cinfo->dc_huff_tbl_ptrs[index];
-  }
-
-  if (htbl == NULL)
-    ERREXIT1(cinfo, JERR_NO_HUFF_TABLE, index);
-  
-  if (! htbl->sent_table) {
-    emit_marker(cinfo, M_DHT);
-    
-    length = 0;
-    for (i = 1; i <= 16; i++)
-      length += htbl->bits[i];
-    
-    emit_2bytes(cinfo, length + 2 + 1 + 16);
-    emit_byte(cinfo, index);
-    
-    for (i = 1; i <= 16; i++)
-      emit_byte(cinfo, htbl->bits[i]);
-    
-    for (i = 0; i < length; i++)
-      emit_byte(cinfo, htbl->huffval[i]);
-    
-    htbl->sent_table = TRUE;
-  }
-}
-
-
-LOCAL void
-emit_dac (j_compress_ptr cinfo)
-/* Emit a DAC marker */
-/* Since the useful info is so small, we want to emit all the tables in */
-/* one DAC marker.  Therefore this routine does its own scan of the table. */
-{
-#ifdef C_ARITH_CODING_SUPPORTED
-  char dc_in_use[NUM_ARITH_TBLS];
-  char ac_in_use[NUM_ARITH_TBLS];
-  int length, i;
-  jpeg_component_info *compptr;
-  
-  for (i = 0; i < NUM_ARITH_TBLS; i++)
-    dc_in_use[i] = ac_in_use[i] = 0;
-  
-  for (i = 0; i < cinfo->comps_in_scan; i++) {
-    compptr = cinfo->cur_comp_info[i];
-    dc_in_use[compptr->dc_tbl_no] = 1;
-    ac_in_use[compptr->ac_tbl_no] = 1;
-  }
-  
-  length = 0;
-  for (i = 0; i < NUM_ARITH_TBLS; i++)
-    length += dc_in_use[i] + ac_in_use[i];
-  
-  emit_marker(cinfo, M_DAC);
-  
-  emit_2bytes(cinfo, length*2 + 2);
-  
-  for (i = 0; i < NUM_ARITH_TBLS; i++) {
-    if (dc_in_use[i]) {
-      emit_byte(cinfo, i);
-      emit_byte(cinfo, cinfo->arith_dc_L[i] + (cinfo->arith_dc_U[i]<<4));
-    }
-    if (ac_in_use[i]) {
-      emit_byte(cinfo, i + 0x10);
-      emit_byte(cinfo, cinfo->arith_ac_K[i]);
-    }
-  }
-#endif /* C_ARITH_CODING_SUPPORTED */
-}
-
-
-LOCAL void
-emit_dri (j_compress_ptr cinfo)
-/* Emit a DRI marker */
-{
-  emit_marker(cinfo, M_DRI);
-  
-  emit_2bytes(cinfo, 4);	/* fixed length */
-
-  emit_2bytes(cinfo, (int) cinfo->restart_interval);
-}
-
-
-LOCAL void
-emit_sof (j_compress_ptr cinfo, JPEG_MARKER code)
-/* Emit a SOF marker */
-{
-  int ci;
-  jpeg_component_info *compptr;
-  
-  emit_marker(cinfo, code);
-  
-  emit_2bytes(cinfo, 3 * cinfo->num_components + 2 + 5 + 1); /* length */
-
-  /* Make sure image isn't bigger than SOF field can handle */
-  if ((long) cinfo->image_height > 65535L ||
-      (long) cinfo->image_width > 65535L)
-    ERREXIT1(cinfo, JERR_IMAGE_TOO_BIG, (unsigned int) 65535);
-
-  emit_byte(cinfo, cinfo->data_precision);
-  emit_2bytes(cinfo, (int) cinfo->image_height);
-  emit_2bytes(cinfo, (int) cinfo->image_width);
-
-  emit_byte(cinfo, cinfo->num_components);
-
-  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
-       ci++, compptr++) {
-    emit_byte(cinfo, compptr->component_id);
-    emit_byte(cinfo, (compptr->h_samp_factor << 4) + compptr->v_samp_factor);
-    emit_byte(cinfo, compptr->quant_tbl_no);
-  }
-}
-
-
-LOCAL void
-emit_sos (j_compress_ptr cinfo)
-/* Emit a SOS marker */
-{
-  int i, td, ta;
-  jpeg_component_info *compptr;
-  
-  emit_marker(cinfo, M_SOS);
-  
-  emit_2bytes(cinfo, 2 * cinfo->comps_in_scan + 2 + 1 + 3); /* length */
-  
-  emit_byte(cinfo, cinfo->comps_in_scan);
-  
-  for (i = 0; i < cinfo->comps_in_scan; i++) {
-    compptr = cinfo->cur_comp_info[i];
-    emit_byte(cinfo, compptr->component_id);
-    td = compptr->dc_tbl_no;
-    ta = compptr->ac_tbl_no;
-    if (cinfo->progressive_mode) {
-      /* Progressive mode: only DC or only AC tables are used in one scan;
-       * furthermore, Huffman coding of DC refinement uses no table at all.
-       * We emit 0 for unused field(s); this is recommended by the P&M text
-       * but does not seem to be specified in the standard.
-       */
-      if (cinfo->Ss == 0) {
-	ta = 0;			/* DC scan */
-	if (cinfo->Ah != 0 && !cinfo->arith_code)
-	  td = 0;		/* no DC table either */
-      } else {
-	td = 0;			/* AC scan */
-      }
-    }
-    emit_byte(cinfo, (td << 4) + ta);
-  }
-
-  emit_byte(cinfo, cinfo->Ss);
-  emit_byte(cinfo, cinfo->Se);
-  emit_byte(cinfo, (cinfo->Ah << 4) + cinfo->Al);
-}
-
-
-LOCAL void
-emit_jfif_app0 (j_compress_ptr cinfo)
-/* Emit a JFIF-compliant APP0 marker */
-{
-  /*
-   * Length of APP0 block	(2 bytes)
-   * Block ID			(4 bytes - ASCII "JFIF")
-   * Zero byte			(1 byte to terminate the ID string)
-   * Version Major, Minor	(2 bytes - 0x01, 0x01)
-   * Units			(1 byte - 0x00 = none, 0x01 = inch, 0x02 = cm)
-   * Xdpu			(2 bytes - dots per unit horizontal)
-   * Ydpu			(2 bytes - dots per unit vertical)
-   * Thumbnail X size		(1 byte)
-   * Thumbnail Y size		(1 byte)
-   */
-  
-  emit_marker(cinfo, M_APP0);
-  
-  emit_2bytes(cinfo, 2 + 4 + 1 + 2 + 1 + 2 + 2 + 1 + 1); /* length */
-
-  emit_byte(cinfo, 0x4A);	/* Identifier: ASCII "JFIF" */
-  emit_byte(cinfo, 0x46);
-  emit_byte(cinfo, 0x49);
-  emit_byte(cinfo, 0x46);
-  emit_byte(cinfo, 0);
-  /* We currently emit version code 1.01 since we use no 1.02 features.
-   * This may avoid complaints from some older decoders.
-   */
-  emit_byte(cinfo, 1);		/* Major version */
-  emit_byte(cinfo, 1);		/* Minor version */
-  emit_byte(cinfo, cinfo->density_unit); /* Pixel size information */
-  emit_2bytes(cinfo, (int) cinfo->X_density);
-  emit_2bytes(cinfo, (int) cinfo->Y_density);
-  emit_byte(cinfo, 0);		/* No thumbnail image */
-  emit_byte(cinfo, 0);
-}
-
-
-LOCAL void
-emit_adobe_app14 (j_compress_ptr cinfo)
-/* Emit an Adobe APP14 marker */
-{
-  /*
-   * Length of APP14 block	(2 bytes)
-   * Block ID			(5 bytes - ASCII "Adobe")
-   * Version Number		(2 bytes - currently 100)
-   * Flags0			(2 bytes - currently 0)
-   * Flags1			(2 bytes - currently 0)
-   * Color transform		(1 byte)
-   *
-   * Although Adobe TN 5116 mentions Version = 101, all the Adobe files
-   * now in circulation seem to use Version = 100, so that's what we write.
-   *
-   * We write the color transform byte as 1 if the JPEG color space is
-   * YCbCr, 2 if it's YCCK, 0 otherwise.  Adobe's definition has to do with
-   * whether the encoder performed a transformation, which is pretty useless.
-   */
-  
-  emit_marker(cinfo, M_APP14);
-  
-  emit_2bytes(cinfo, 2 + 5 + 2 + 2 + 2 + 1); /* length */
-
-  emit_byte(cinfo, 0x41);	/* Identifier: ASCII "Adobe" */
-  emit_byte(cinfo, 0x64);
-  emit_byte(cinfo, 0x6F);
-  emit_byte(cinfo, 0x62);
-  emit_byte(cinfo, 0x65);
-  emit_2bytes(cinfo, 100);	/* Version */
-  emit_2bytes(cinfo, 0);	/* Flags0 */
-  emit_2bytes(cinfo, 0);	/* Flags1 */
-  switch (cinfo->jpeg_color_space) {
-  case JCS_YCbCr:
-    emit_byte(cinfo, 1);	/* Color transform = 1 */
-    break;
-  case JCS_YCCK:
-    emit_byte(cinfo, 2);	/* Color transform = 2 */
-    break;
-  default:
-    emit_byte(cinfo, 0);	/* Color transform = 0 */
-    break;
-  }
-}
-
-
-/*
- * This routine is exported for possible use by applications.
- * The intended use is to emit COM or APPn markers after calling
- * jpeg_start_compress() and before the first jpeg_write_scanlines() call
- * (hence, after write_file_header but before write_frame_header).
- * Other uses are not guaranteed to produce desirable results.
- */
-
-METHODDEF void
-write_any_marker (j_compress_ptr cinfo, int marker,
-		  const JOCTET *dataptr, unsigned int datalen)
-/* Emit an arbitrary marker with parameters */
-{
-  if (datalen <= (unsigned int) 65533) { /* safety check */
-    emit_marker(cinfo, (JPEG_MARKER) marker);
-  
-    emit_2bytes(cinfo, (int) (datalen + 2)); /* total length */
-
-    while (datalen--) {
-      emit_byte(cinfo, *dataptr);
-      dataptr++;
-    }
-  }
-}
-
-
-/*
- * Write datastream header.
- * This consists of an SOI and optional APPn markers.
- * We recommend use of the JFIF marker, but not the Adobe marker,
- * when using YCbCr or grayscale data.  The JFIF marker should NOT
- * be used for any other JPEG colorspace.  The Adobe marker is helpful
- * to distinguish RGB, CMYK, and YCCK colorspaces.
- * Note that an application can write additional header markers after
- * jpeg_start_compress returns.
- */
-
-METHODDEF void
-write_file_header (j_compress_ptr cinfo)
-{
-  emit_marker(cinfo, M_SOI);	/* first the SOI */
-
-  if (cinfo->write_JFIF_header)	/* next an optional JFIF APP0 */
-    emit_jfif_app0(cinfo);
-  if (cinfo->write_Adobe_marker) /* next an optional Adobe APP14 */
-    emit_adobe_app14(cinfo);
-}
-
-
-/*
- * Write frame header.
- * This consists of DQT and SOFn markers.
- * Note that we do not emit the SOF until we have emitted the DQT(s).
- * This avoids compatibility problems with incorrect implementations that
- * try to error-check the quant table numbers as soon as they see the SOF.
- */
-
-METHODDEF void
-write_frame_header (j_compress_ptr cinfo)
-{
-  int ci, prec;
-  boolean is_baseline;
-  jpeg_component_info *compptr;
-  
-  /* Emit DQT for each quantization table.
-   * Note that emit_dqt() suppresses any duplicate tables.
-   */
-  prec = 0;
-  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
-       ci++, compptr++) {
-    prec += emit_dqt(cinfo, compptr->quant_tbl_no);
-  }
-  /* now prec is nonzero iff there are any 16-bit quant tables. */
-
-  /* Check for a non-baseline specification.
-   * Note we assume that Huffman table numbers won't be changed later.
-   */
-  if (cinfo->arith_code || cinfo->progressive_mode ||
-      cinfo->data_precision != 8) {
-    is_baseline = FALSE;
-  } else {
-    is_baseline = TRUE;
-    for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
-	 ci++, compptr++) {
-      if (compptr->dc_tbl_no > 1 || compptr->ac_tbl_no > 1)
-	is_baseline = FALSE;
-    }
-    if (prec && is_baseline) {
-      is_baseline = FALSE;
-      /* If it's baseline except for quantizer size, warn the user */
-      TRACEMS(cinfo, 0, JTRC_16BIT_TABLES);
-    }
-  }
-
-  /* Emit the proper SOF marker */
-  if (cinfo->arith_code) {
-    emit_sof(cinfo, M_SOF9);	/* SOF code for arithmetic coding */
-  } else {
-    if (cinfo->progressive_mode)
-      emit_sof(cinfo, M_SOF2);	/* SOF code for progressive Huffman */
-    else if (is_baseline)
-      emit_sof(cinfo, M_SOF0);	/* SOF code for baseline implementation */
-    else
-      emit_sof(cinfo, M_SOF1);	/* SOF code for non-baseline Huffman file */
-  }
-}
-
-
-/*
- * Write scan header.
- * This consists of DHT or DAC markers, optional DRI, and SOS.
- * Compressed data will be written following the SOS.
- */
-
-METHODDEF void
-write_scan_header (j_compress_ptr cinfo)
-{
-  int i;
-  jpeg_component_info *compptr;
-
-  if (cinfo->arith_code) {
-    /* Emit arith conditioning info.  We may have some duplication
-     * if the file has multiple scans, but it's so small it's hardly
-     * worth worrying about.
-     */
-    emit_dac(cinfo);
-  } else {
-    /* Emit Huffman tables.
-     * Note that emit_dht() suppresses any duplicate tables.
-     */
-    for (i = 0; i < cinfo->comps_in_scan; i++) {
-      compptr = cinfo->cur_comp_info[i];
-      if (cinfo->progressive_mode) {
-	/* Progressive mode: only DC or only AC tables are used in one scan */
-	if (cinfo->Ss == 0) {
-	  if (cinfo->Ah == 0)	/* DC needs no table for refinement scan */
-	    emit_dht(cinfo, compptr->dc_tbl_no, FALSE);
-	} else {
-	  emit_dht(cinfo, compptr->ac_tbl_no, TRUE);
-	}
-      } else {
-	/* Sequential mode: need both DC and AC tables */
-	emit_dht(cinfo, compptr->dc_tbl_no, FALSE);
-	emit_dht(cinfo, compptr->ac_tbl_no, TRUE);
-      }
-    }
-  }
-
-  /* Emit DRI if required --- note that DRI value could change for each scan.
-   * If it doesn't, a tiny amount of space is wasted in multiple-scan files.
-   * We assume DRI will never be nonzero for one scan and zero for a later one.
-   */
-  if (cinfo->restart_interval)
-    emit_dri(cinfo);
-
-  emit_sos(cinfo);
-}
-
-
-/*
- * Write datastream trailer.
- */
-
-METHODDEF void
-write_file_trailer (j_compress_ptr cinfo)
-{
-  emit_marker(cinfo, M_EOI);
-}
-
-
-/*
- * Write an abbreviated table-specification datastream.
- * This consists of SOI, DQT and DHT tables, and EOI.
- * Any table that is defined and not marked sent_table = TRUE will be
- * emitted.  Note that all tables will be marked sent_table = TRUE at exit.
- */
-
-METHODDEF void
-write_tables_only (j_compress_ptr cinfo)
-{
-  int i;
-
-  emit_marker(cinfo, M_SOI);
-
-  for (i = 0; i < NUM_QUANT_TBLS; i++) {
-    if (cinfo->quant_tbl_ptrs[i] != NULL)
-      (void) emit_dqt(cinfo, i);
-  }
-
-  if (! cinfo->arith_code) {
-    for (i = 0; i < NUM_HUFF_TBLS; i++) {
-      if (cinfo->dc_huff_tbl_ptrs[i] != NULL)
-	emit_dht(cinfo, i, FALSE);
-      if (cinfo->ac_huff_tbl_ptrs[i] != NULL)
-	emit_dht(cinfo, i, TRUE);
-    }
-  }
-
-  emit_marker(cinfo, M_EOI);
-}
-
-
-/*
- * Initialize the marker writer module.
- */
-
-GLOBAL void
-jinit_marker_writer (j_compress_ptr cinfo)
-{
-  /* Create the subobject */
-  cinfo->marker = (struct jpeg_marker_writer *)
-    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
-				SIZEOF(struct jpeg_marker_writer));
-  /* Initialize method pointers */
-  cinfo->marker->write_any_marker = write_any_marker;
-  cinfo->marker->write_file_header = write_file_header;
-  cinfo->marker->write_frame_header = write_frame_header;
-  cinfo->marker->write_scan_header = write_scan_header;
-  cinfo->marker->write_file_trailer = write_file_trailer;
-  cinfo->marker->write_tables_only = write_tables_only;
-}
diff -NEaurb neo/renderer/jpeg-6/jcmaster.c neo/renderer/jpeg-6/jcmaster.c
--- neo/renderer/jpeg-6/jcmaster.c	2011-12-26 04:15:38 +0000
+++ neo/renderer/jpeg-6/jcmaster.c	1970-01-01 00:00:00 +0000
@@ -1,578 +0,0 @@
-/*
- * jcmaster.c
- *
- * Copyright (C) 1991-1995, Thomas G. Lane.
- * This file is part of the Independent JPEG Group's software.
- * For conditions of distribution and use, see the accompanying README file.
- *
- * This file contains master control logic for the JPEG compressor.
- * These routines are concerned with parameter validation, initial setup,
- * and inter-pass control (determining the number of passes and the work 
- * to be done in each pass).
- */
-
-#define JPEG_INTERNALS
-#include "jinclude.h"
-#include "jpeglib.h"
-
-
-/* Private state */
-
-typedef enum {
-	main_pass,		/* input data, also do first output step */
-	huff_opt_pass,		/* Huffman code optimization pass */
-	output_pass		/* data output pass */
-} c_pass_type;
-
-typedef struct {
-  struct jpeg_comp_master pub;	/* public fields */
-
-  c_pass_type pass_type;	/* the type of the current pass */
-
-  int pass_number;		/* # of passes completed */
-  int total_passes;		/* total # of passes needed */
-
-  int scan_number;		/* current index in scan_info[] */
-} my_comp_master;
-
-typedef my_comp_master * my_master_ptr;
-
-
-/*
- * Support routines that do various essential calculations.
- */
-
-LOCAL void
-initial_setup (j_compress_ptr cinfo)
-/* Do computations that are needed before master selection phase */
-{
-  int ci;
-  jpeg_component_info *compptr;
-  long samplesperrow;
-  JDIMENSION jd_samplesperrow;
-
-  /* Sanity check on image dimensions */
-  if (cinfo->image_height <= 0 || cinfo->image_width <= 0
-      || cinfo->num_components <= 0 || cinfo->input_components <= 0)
-    ERREXIT(cinfo, JERR_EMPTY_IMAGE);
-
-  /* Make sure image isn't bigger than I can handle */
-  if ((long) cinfo->image_height > (long) JPEG_MAX_DIMENSION ||
-      (long) cinfo->image_width > (long) JPEG_MAX_DIMENSION)
-    ERREXIT1(cinfo, JERR_IMAGE_TOO_BIG, (unsigned int) JPEG_MAX_DIMENSION);
-
-  /* Width of an input scanline must be representable as JDIMENSION. */
-  samplesperrow = (long) cinfo->image_width * (long) cinfo->input_components;
-  jd_samplesperrow = (JDIMENSION) samplesperrow;
-  if ((long) jd_samplesperrow != samplesperrow)
-    ERREXIT(cinfo, JERR_WIDTH_OVERFLOW);
-
-  /* For now, precision must match compiled-in value... */
-  if (cinfo->data_precision != BITS_IN_JSAMPLE)
-    ERREXIT1(cinfo, JERR_BAD_PRECISION, cinfo->data_precision);
-
-  /* Check that number of components won't exceed internal array sizes */
-  if (cinfo->num_components > MAX_COMPONENTS)
-    ERREXIT2(cinfo, JERR_COMPONENT_COUNT, cinfo->num_components,
-	     MAX_COMPONENTS);
-
-  /* Compute maximum sampling factors; check factor validity */
-  cinfo->max_h_samp_factor = 1;
-  cinfo->max_v_samp_factor = 1;
-  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
-       ci++, compptr++) {
-    if (compptr->h_samp_factor<=0 || compptr->h_samp_factor>MAX_SAMP_FACTOR ||
-	compptr->v_samp_factor<=0 || compptr->v_samp_factor>MAX_SAMP_FACTOR)
-      ERREXIT(cinfo, JERR_BAD_SAMPLING);
-    cinfo->max_h_samp_factor = MAX(cinfo->max_h_samp_factor,
-				   compptr->h_samp_factor);
-    cinfo->max_v_samp_factor = MAX(cinfo->max_v_samp_factor,
-				   compptr->v_samp_factor);
-  }
-
-  /* Compute dimensions of components */
-  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
-       ci++, compptr++) {
-    /* Fill in the correct component_index value; don't rely on application */
-    compptr->component_index = ci;
-    /* For compression, we never do DCT scaling. */
-    compptr->DCT_scaled_size = DCTSIZE;
-    /* Size in DCT blocks */
-    compptr->width_in_blocks = (JDIMENSION)
-      jdiv_round_up((long) cinfo->image_width * (long) compptr->h_samp_factor,
-		    (long) (cinfo->max_h_samp_factor * DCTSIZE));
-    compptr->height_in_blocks = (JDIMENSION)
-      jdiv_round_up((long) cinfo->image_height * (long) compptr->v_samp_factor,
-		    (long) (cinfo->max_v_samp_factor * DCTSIZE));
-    /* Size in samples */
-    compptr->downsampled_width = (JDIMENSION)
-      jdiv_round_up((long) cinfo->image_width * (long) compptr->h_samp_factor,
-		    (long) cinfo->max_h_samp_factor);
-    compptr->downsampled_height = (JDIMENSION)
-      jdiv_round_up((long) cinfo->image_height * (long) compptr->v_samp_factor,
-		    (long) cinfo->max_v_samp_factor);
-    /* Mark component needed (this flag isn't actually used for compression) */
-    compptr->component_needed = TRUE;
-  }
-
-  /* Compute number of fully interleaved MCU rows (number of times that
-   * main controller will call coefficient controller).
-   */
-  cinfo->total_iMCU_rows = (JDIMENSION)
-    jdiv_round_up((long) cinfo->image_height,
-		  (long) (cinfo->max_v_samp_factor*DCTSIZE));
-}
-
-
-#ifdef C_MULTISCAN_FILES_SUPPORTED
-
-LOCAL void
-validate_script (j_compress_ptr cinfo)
-/* Verify that the scan script in cinfo->scan_info[] is valid; also
- * determine whether it uses progressive JPEG, and set cinfo->progressive_mode.
- */
-{
-  const jpeg_scan_info * scanptr;
-  int scanno, ncomps, ci, coefi, thisi;
-  int Ss, Se, Ah, Al;
-  boolean component_sent[MAX_COMPONENTS];
-#ifdef C_PROGRESSIVE_SUPPORTED
-  int * last_bitpos_ptr;
-  int last_bitpos[MAX_COMPONENTS][DCTSIZE2];
-  /* -1 until that coefficient has been seen; then last Al for it */
-#endif
-
-  if (cinfo->num_scans <= 0)
-    ERREXIT1(cinfo, JERR_BAD_SCAN_SCRIPT, 0);
-
-  /* For sequential JPEG, all scans must have Ss=0, Se=DCTSIZE2-1;
-   * for progressive JPEG, no scan can have this.
-   */
-  scanptr = cinfo->scan_info;
-  if (scanptr->Ss != 0 || scanptr->Se != DCTSIZE2-1) {
-#ifdef C_PROGRESSIVE_SUPPORTED
-    cinfo->progressive_mode = TRUE;
-    last_bitpos_ptr = & last_bitpos[0][0];
-    for (ci = 0; ci < cinfo->num_components; ci++) 
-      for (coefi = 0; coefi < DCTSIZE2; coefi++)
-	*last_bitpos_ptr++ = -1;
-#else
-    ERREXIT(cinfo, JERR_NOT_COMPILED);
-#endif
-  } else {
-    cinfo->progressive_mode = FALSE;
-    for (ci = 0; ci < cinfo->num_components; ci++) 
-      component_sent[ci] = FALSE;
-  }
-
-  for (scanno = 1; scanno <= cinfo->num_scans; scanptr++, scanno++) {
-    /* Validate component indexes */
-    ncomps = scanptr->comps_in_scan;
-    if (ncomps <= 0 || ncomps > MAX_COMPS_IN_SCAN)
-      ERREXIT2(cinfo, JERR_COMPONENT_COUNT, ncomps, MAX_COMPS_IN_SCAN);
-    for (ci = 0; ci < ncomps; ci++) {
-      thisi = scanptr->component_index[ci];
-      if (thisi < 0 || thisi >= cinfo->num_components)
-	ERREXIT1(cinfo, JERR_BAD_SCAN_SCRIPT, scanno);
-      /* Components must appear in SOF order within each scan */
-      if (ci > 0 && thisi <= scanptr->component_index[ci-1])
-	ERREXIT1(cinfo, JERR_BAD_SCAN_SCRIPT, scanno);
-    }
-    /* Validate progression parameters */
-    Ss = scanptr->Ss;
-    Se = scanptr->Se;
-    Ah = scanptr->Ah;
-    Al = scanptr->Al;
-    if (cinfo->progressive_mode) {
-#ifdef C_PROGRESSIVE_SUPPORTED
-      if (Ss < 0 || Ss >= DCTSIZE2 || Se < Ss || Se >= DCTSIZE2 ||
-	  Ah < 0 || Ah > 13 || Al < 0 || Al > 13)
-	ERREXIT1(cinfo, JERR_BAD_PROG_SCRIPT, scanno);
-      if (Ss == 0) {
-	if (Se != 0)		/* DC and AC together not OK */
-	  ERREXIT1(cinfo, JERR_BAD_PROG_SCRIPT, scanno);
-      } else {
-	if (ncomps != 1)	/* AC scans must be for only one component */
-	  ERREXIT1(cinfo, JERR_BAD_PROG_SCRIPT, scanno);
-      }
-      for (ci = 0; ci < ncomps; ci++) {
-	last_bitpos_ptr = & last_bitpos[scanptr->component_index[ci]][0];
-	if (Ss != 0 && last_bitpos_ptr[0] < 0) /* AC without prior DC scan */
-	  ERREXIT1(cinfo, JERR_BAD_PROG_SCRIPT, scanno);
-	for (coefi = Ss; coefi <= Se; coefi++) {
-	  if (last_bitpos_ptr[coefi] < 0) {
-	    /* first scan of this coefficient */
-	    if (Ah != 0)
-	      ERREXIT1(cinfo, JERR_BAD_PROG_SCRIPT, scanno);
-	  } else {
-	    /* not first scan */
-	    if (Ah != last_bitpos_ptr[coefi] || Al != Ah-1)
-	      ERREXIT1(cinfo, JERR_BAD_PROG_SCRIPT, scanno);
-	  }
-	  last_bitpos_ptr[coefi] = Al;
-	}
-      }
-#endif
-    } else {
-      /* For sequential JPEG, all progression parameters must be these: */
-      if (Ss != 0 || Se != DCTSIZE2-1 || Ah != 0 || Al != 0)
-	ERREXIT1(cinfo, JERR_BAD_PROG_SCRIPT, scanno);
-      /* Make sure components are not sent twice */
-      for (ci = 0; ci < ncomps; ci++) {
-	thisi = scanptr->component_index[ci];
-	if (component_sent[thisi])
-	  ERREXIT1(cinfo, JERR_BAD_SCAN_SCRIPT, scanno);
-	component_sent[thisi] = TRUE;
-      }
-    }
-  }
-
-  /* Now verify that everything got sent. */
-  if (cinfo->progressive_mode) {
-#ifdef C_PROGRESSIVE_SUPPORTED
-    /* For progressive mode, we only check that at least some DC data
-     * got sent for each component; the spec does not require that all bits
-     * of all coefficients be transmitted.  Would it be wiser to enforce
-     * transmission of all coefficient bits??
-     */
-    for (ci = 0; ci < cinfo->num_components; ci++) {
-      if (last_bitpos[ci][0] < 0)
-	ERREXIT(cinfo, JERR_MISSING_DATA);
-    }
-#endif
-  } else {
-    for (ci = 0; ci < cinfo->num_components; ci++) {
-      if (! component_sent[ci])
-	ERREXIT(cinfo, JERR_MISSING_DATA);
-    }
-  }
-}
-
-#endif /* C_MULTISCAN_FILES_SUPPORTED */
-
-
-LOCAL void
-select_scan_parameters (j_compress_ptr cinfo)
-/* Set up the scan parameters for the current scan */
-{
-  int ci;
-
-#ifdef C_MULTISCAN_FILES_SUPPORTED
-  if (cinfo->scan_info != NULL) {
-    /* Prepare for current scan --- the script is already validated */
-    my_master_ptr master = (my_master_ptr) cinfo->master;
-    const jpeg_scan_info * scanptr = cinfo->scan_info + master->scan_number;
-
-    cinfo->comps_in_scan = scanptr->comps_in_scan;
-    for (ci = 0; ci < scanptr->comps_in_scan; ci++) {
-      cinfo->cur_comp_info[ci] =
-	&cinfo->comp_info[scanptr->component_index[ci]];
-    }
-    cinfo->Ss = scanptr->Ss;
-    cinfo->Se = scanptr->Se;
-    cinfo->Ah = scanptr->Ah;
-    cinfo->Al = scanptr->Al;
-  }
-  else
-#endif
-  {
-    /* Prepare for single sequential-JPEG scan containing all components */
-    if (cinfo->num_components > MAX_COMPS_IN_SCAN)
-      ERREXIT2(cinfo, JERR_COMPONENT_COUNT, cinfo->num_components,
-	       MAX_COMPS_IN_SCAN);
-    cinfo->comps_in_scan = cinfo->num_components;
-    for (ci = 0; ci < cinfo->num_components; ci++) {
-      cinfo->cur_comp_info[ci] = &cinfo->comp_info[ci];
-    }
-    cinfo->Ss = 0;
-    cinfo->Se = DCTSIZE2-1;
-    cinfo->Ah = 0;
-    cinfo->Al = 0;
-  }
-}
-
-
-LOCAL void
-per_scan_setup (j_compress_ptr cinfo)
-/* Do computations that are needed before processing a JPEG scan */
-/* cinfo->comps_in_scan and cinfo->cur_comp_info[] are already set */
-{
-  int ci, mcublks, tmp;
-  jpeg_component_info *compptr;
-  
-  if (cinfo->comps_in_scan == 1) {
-    
-    /* Noninterleaved (single-component) scan */
-    compptr = cinfo->cur_comp_info[0];
-    
-    /* Overall image size in MCUs */
-    cinfo->MCUs_per_row = compptr->width_in_blocks;
-    cinfo->MCU_rows_in_scan = compptr->height_in_blocks;
-    
-    /* For noninterleaved scan, always one block per MCU */
-    compptr->MCU_width = 1;
-    compptr->MCU_height = 1;
-    compptr->MCU_blocks = 1;
-    compptr->MCU_sample_width = DCTSIZE;
-    compptr->last_col_width = 1;
-    /* For noninterleaved scans, it is convenient to define last_row_height
-     * as the number of block rows present in the last iMCU row.
-     */
-    tmp = (int) (compptr->height_in_blocks % compptr->v_samp_factor);
-    if (tmp == 0) tmp = compptr->v_samp_factor;
-    compptr->last_row_height = tmp;
-    
-    /* Prepare array describing MCU composition */
-    cinfo->blocks_in_MCU = 1;
-    cinfo->MCU_membership[0] = 0;
-    
-  } else {
-    
-    /* Interleaved (multi-component) scan */
-    if (cinfo->comps_in_scan <= 0 || cinfo->comps_in_scan > MAX_COMPS_IN_SCAN)
-      ERREXIT2(cinfo, JERR_COMPONENT_COUNT, cinfo->comps_in_scan,
-	       MAX_COMPS_IN_SCAN);
-    
-    /* Overall image size in MCUs */
-    cinfo->MCUs_per_row = (JDIMENSION)
-      jdiv_round_up((long) cinfo->image_width,
-		    (long) (cinfo->max_h_samp_factor*DCTSIZE));
-    cinfo->MCU_rows_in_scan = (JDIMENSION)
-      jdiv_round_up((long) cinfo->image_height,
-		    (long) (cinfo->max_v_samp_factor*DCTSIZE));
-    
-    cinfo->blocks_in_MCU = 0;
-    
-    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
-      compptr = cinfo->cur_comp_info[ci];
-      /* Sampling factors give # of blocks of component in each MCU */
-      compptr->MCU_width = compptr->h_samp_factor;
-      compptr->MCU_height = compptr->v_samp_factor;
-      compptr->MCU_blocks = compptr->MCU_width * compptr->MCU_height;
-      compptr->MCU_sample_width = compptr->MCU_width * DCTSIZE;
-      /* Figure number of non-dummy blocks in last MCU column & row */
-      tmp = (int) (compptr->width_in_blocks % compptr->MCU_width);
-      if (tmp == 0) tmp = compptr->MCU_width;
-      compptr->last_col_width = tmp;
-      tmp = (int) (compptr->height_in_blocks % compptr->MCU_height);
-      if (tmp == 0) tmp = compptr->MCU_height;
-      compptr->last_row_height = tmp;
-      /* Prepare array describing MCU composition */
-      mcublks = compptr->MCU_blocks;
-      if (cinfo->blocks_in_MCU + mcublks > C_MAX_BLOCKS_IN_MCU)
-	ERREXIT(cinfo, JERR_BAD_MCU_SIZE);
-      while (mcublks-- > 0) {
-	cinfo->MCU_membership[cinfo->blocks_in_MCU++] = ci;
-      }
-    }
-    
-  }
-
-  /* Convert restart specified in rows to actual MCU count. */
-  /* Note that count must fit in 16 bits, so we provide limiting. */
-  if (cinfo->restart_in_rows > 0) {
-    long nominal = (long) cinfo->restart_in_rows * (long) cinfo->MCUs_per_row;
-    cinfo->restart_interval = (unsigned int) MIN(nominal, 65535L);
-  }
-}
-
-
-/*
- * Per-pass setup.
- * This is called at the beginning of each pass.  We determine which modules
- * will be active during this pass and give them appropriate start_pass calls.
- * We also set is_last_pass to indicate whether any more passes will be
- * required.
- */
-
-METHODDEF void
-prepare_for_pass (j_compress_ptr cinfo)
-{
-  my_master_ptr master = (my_master_ptr) cinfo->master;
-
-  switch (master->pass_type) {
-  case main_pass:
-    /* Initial pass: will collect input data, and do either Huffman
-     * optimization or data output for the first scan.
-     */
-    select_scan_parameters(cinfo);
-    per_scan_setup(cinfo);
-    if (! cinfo->raw_data_in) {
-      (*cinfo->cconvert->start_pass) (cinfo);
-      (*cinfo->downsample->start_pass) (cinfo);
-      (*cinfo->prep->start_pass) (cinfo, JBUF_PASS_THRU);
-    }
-    (*cinfo->fdct->start_pass) (cinfo);
-    (*cinfo->entropy->start_pass) (cinfo, cinfo->optimize_coding);
-    (*cinfo->coef->start_pass) (cinfo,
-				(master->total_passes > 1 ?
-				 JBUF_SAVE_AND_PASS : JBUF_PASS_THRU));
-    (*cinfo->main->start_pass) (cinfo, JBUF_PASS_THRU);
-    if (cinfo->optimize_coding) {
-      /* No immediate data output; postpone writing frame/scan headers */
-      master->pub.call_pass_startup = FALSE;
-    } else {
-      /* Will write frame/scan headers at first jpeg_write_scanlines call */
-      master->pub.call_pass_startup = TRUE;
-    }
-    break;
-#ifdef ENTROPY_OPT_SUPPORTED
-  case huff_opt_pass:
-    /* Do Huffman optimization for a scan after the first one. */
-    select_scan_parameters(cinfo);
-    per_scan_setup(cinfo);
-    if (cinfo->Ss != 0 || cinfo->Ah == 0 || cinfo->arith_code) {
-      (*cinfo->entropy->start_pass) (cinfo, TRUE);
-      (*cinfo->coef->start_pass) (cinfo, JBUF_CRANK_DEST);
-      master->pub.call_pass_startup = FALSE;
-      break;
-    }
-    /* Special case: Huffman DC refinement scans need no Huffman table
-     * and therefore we can skip the optimization pass for them.
-     */
-    master->pass_type = output_pass;
-    master->pass_number++;
-    /*FALLTHROUGH*/
-#endif
-  case output_pass:
-    /* Do a data-output pass. */
-    /* We need not repeat per-scan setup if prior optimization pass did it. */
-    if (! cinfo->optimize_coding) {
-      select_scan_parameters(cinfo);
-      per_scan_setup(cinfo);
-    }
-    (*cinfo->entropy->start_pass) (cinfo, FALSE);
-    (*cinfo->coef->start_pass) (cinfo, JBUF_CRANK_DEST);
-    /* We emit frame/scan headers now */
-    if (master->scan_number == 0)
-      (*cinfo->marker->write_frame_header) (cinfo);
-    (*cinfo->marker->write_scan_header) (cinfo);
-    master->pub.call_pass_startup = FALSE;
-    break;
-  default:
-    ERREXIT(cinfo, JERR_NOT_COMPILED);
-  }
-
-  master->pub.is_last_pass = (master->pass_number == master->total_passes-1);
-
-  /* Set up progress monitor's pass info if present */
-  if (cinfo->progress != NULL) {
-    cinfo->progress->completed_passes = master->pass_number;
-    cinfo->progress->total_passes = master->total_passes;
-  }
-}
-
-
-/*
- * Special start-of-pass hook.
- * This is called by jpeg_write_scanlines if call_pass_startup is TRUE.
- * In single-pass processing, we need this hook because we don't want to
- * write frame/scan headers during jpeg_start_compress; we want to let the
- * application write COM markers etc. between jpeg_start_compress and the
- * jpeg_write_scanlines loop.
- * In multi-pass processing, this routine is not used.
- */
-
-METHODDEF void
-pass_startup (j_compress_ptr cinfo)
-{
-  cinfo->master->call_pass_startup = FALSE; /* reset flag so call only once */
-
-  (*cinfo->marker->write_frame_header) (cinfo);
-  (*cinfo->marker->write_scan_header) (cinfo);
-}
-
-
-/*
- * Finish up at end of pass.
- */
-
-METHODDEF void
-finish_pass_master (j_compress_ptr cinfo)
-{
-  my_master_ptr master = (my_master_ptr) cinfo->master;
-
-  /* The entropy coder always needs an end-of-pass call,
-   * either to analyze statistics or to flush its output buffer.
-   */
-  (*cinfo->entropy->finish_pass) (cinfo);
-
-  /* Update state for next pass */
-  switch (master->pass_type) {
-  case main_pass:
-    /* next pass is either output of scan 0 (after optimization)
-     * or output of scan 1 (if no optimization).
-     */
-    master->pass_type = output_pass;
-    if (! cinfo->optimize_coding)
-      master->scan_number++;
-    break;
-  case huff_opt_pass:
-    /* next pass is always output of current scan */
-    master->pass_type = output_pass;
-    break;
-  case output_pass:
-    /* next pass is either optimization or output of next scan */
-    if (cinfo->optimize_coding)
-      master->pass_type = huff_opt_pass;
-    master->scan_number++;
-    break;
-  }
-
-  master->pass_number++;
-}
-
-
-/*
- * Initialize master compression control.
- */
-
-GLOBAL void
-jinit_c_master_control (j_compress_ptr cinfo, boolean transcode_only)
-{
-  my_master_ptr master;
-
-  master = (my_master_ptr)
-      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
-				  SIZEOF(my_comp_master));
-  cinfo->master = (struct jpeg_comp_master *) master;
-  master->pub.prepare_for_pass = prepare_for_pass;
-  master->pub.pass_startup = pass_startup;
-  master->pub.finish_pass = finish_pass_master;
-  master->pub.is_last_pass = FALSE;
-
-  /* Validate parameters, determine derived values */
-  initial_setup(cinfo);
-
-  if (cinfo->scan_info != NULL) {
-#ifdef C_MULTISCAN_FILES_SUPPORTED
-    validate_script(cinfo);
-#else
-    ERREXIT(cinfo, JERR_NOT_COMPILED);
-#endif
-  } else {
-    cinfo->progressive_mode = FALSE;
-    cinfo->num_scans = 1;
-  }
-
-  if (cinfo->progressive_mode)	/*  TEMPORARY HACK ??? */
-    cinfo->optimize_coding = TRUE; /* assume default tables no good for progressive mode */
-
-  /* Initialize my private state */
-  if (transcode_only) {
-    /* no main pass in transcoding */
-    if (cinfo->optimize_coding)
-      master->pass_type = huff_opt_pass;
-    else
-      master->pass_type = output_pass;
-  } else {
-    /* for normal compression, first pass is always this type: */
-    master->pass_type = main_pass;
-  }
-  master->scan_number = 0;
-  master->pass_number = 0;
-  if (cinfo->optimize_coding)
-    master->total_passes = cinfo->num_scans * 2;
-  else
-    master->total_passes = cinfo->num_scans;
-}
diff -NEaurb neo/renderer/jpeg-6/jcomapi.c neo/renderer/jpeg-6/jcomapi.c
--- neo/renderer/jpeg-6/jcomapi.c	2011-12-26 04:15:38 +0000
+++ neo/renderer/jpeg-6/jcomapi.c	1970-01-01 00:00:00 +0000
@@ -1,94 +0,0 @@
-/*
- * jcomapi.c
- *
- * Copyright (C) 1994, Thomas G. Lane.
- * This file is part of the Independent JPEG Group's software.
- * For conditions of distribution and use, see the accompanying README file.
- *
- * This file contains application interface routines that are used for both
- * compression and decompression.
- */
-
-#define JPEG_INTERNALS
-#include "jinclude.h"
-#include "jpeglib.h"
-
-
-/*
- * Abort processing of a JPEG compression or decompression operation,
- * but don't destroy the object itself.
- *
- * For this, we merely clean up all the nonpermanent memory pools.
- * Note that temp files (virtual arrays) are not allowed to belong to
- * the permanent pool, so we will be able to close all temp files here.
- * Closing a data source or destination, if necessary, is the application's
- * responsibility.
- */
-
-GLOBAL void
-jpeg_abort (j_common_ptr cinfo)
-{
-  int pool;
-
-  /* Releasing pools in reverse order might help avoid fragmentation
-   * with some (brain-damaged) malloc libraries.
-   */
-  for (pool = JPOOL_NUMPOOLS-1; pool > JPOOL_PERMANENT; pool--) {
-    (*cinfo->mem->free_pool) (cinfo, pool);
-  }
-
-  /* Reset overall state for possible reuse of object */
-  cinfo->global_state = (cinfo->is_decompressor ? DSTATE_START : CSTATE_START);
-}
-
-
-/*
- * Destruction of a JPEG object.
- *
- * Everything gets deallocated except the master jpeg_compress_struct itself
- * and the error manager struct.  Both of these are supplied by the application
- * and must be freed, if necessary, by the application.  (Often they are on
- * the stack and so don't need to be freed anyway.)
- * Closing a data source or destination, if necessary, is the application's
- * responsibility.
- */
-
-GLOBAL void
-jpeg_destroy (j_common_ptr cinfo)
-{
-  /* We need only tell the memory manager to release everything. */
-  /* NB: mem pointer is NULL if memory mgr failed to initialize. */
-  if (cinfo->mem != NULL)
-    (*cinfo->mem->self_destruct) (cinfo);
-  cinfo->mem = NULL;		/* be safe if jpeg_destroy is called twice */
-  cinfo->global_state = 0;	/* mark it destroyed */
-}
-
-
-/*
- * Convenience routines for allocating quantization and Huffman tables.
- * (Would jutils.c be a more reasonable place to put these?)
- */
-
-GLOBAL JQUANT_TBL *
-jpeg_alloc_quant_table (j_common_ptr cinfo)
-{
-  JQUANT_TBL *tbl;
-
-  tbl = (JQUANT_TBL *)
-    (*cinfo->mem->alloc_small) (cinfo, JPOOL_PERMANENT, SIZEOF(JQUANT_TBL));
-  tbl->sent_table = FALSE;	/* make sure this is false in any new table */
-  return tbl;
-}
-
-
-GLOBAL JHUFF_TBL *
-jpeg_alloc_huff_table (j_common_ptr cinfo)
-{
-  JHUFF_TBL *tbl;
-
-  tbl = (JHUFF_TBL *)
-    (*cinfo->mem->alloc_small) (cinfo, JPOOL_PERMANENT, SIZEOF(JHUFF_TBL));
-  tbl->sent_table = FALSE;	/* make sure this is false in any new table */
-  return tbl;
-}
diff -NEaurb neo/renderer/jpeg-6/jconfig.h neo/renderer/jpeg-6/jconfig.h
--- neo/renderer/jpeg-6/jconfig.h	2013-08-14 01:47:52 +0000
+++ neo/renderer/jpeg-6/jconfig.h	1970-01-01 00:00:00 +0000
@@ -1,41 +0,0 @@
-/* jconfig.wat --- jconfig.h for Watcom C/C++ on MS-DOS or OS/2. */
-/* see jconfig.doc for explanations */
-
-#define HAVE_PROTOTYPES
-#define HAVE_UNSIGNED_CHAR
-#define HAVE_UNSIGNED_SHORT
-/* #define void char */
-/* #define const */
-#define CHAR_IS_UNSIGNED
-#define HAVE_STDDEF_H
-#define HAVE_STDLIB_H
-#undef NEED_BSD_STRINGS
-#undef NEED_SYS_TYPES_H
-#undef NEED_FAR_POINTERS	/* Watcom uses flat 32-bit addressing */
-#undef NEED_SHORT_EXTERNAL_NAMES
-#undef INCOMPLETE_TYPES_BROKEN
-
-#define JDCT_DEFAULT  JDCT_FLOAT
-#define JDCT_FASTEST  JDCT_FLOAT
-
-#ifdef JPEG_INTERNALS
-
-#undef RIGHT_SHIFT_IS_UNSIGNED
-
-#endif /* JPEG_INTERNALS */
-
-#ifdef JPEG_CJPEG_DJPEG
-
-#define BMP_SUPPORTED		/* BMP image file format */
-#define GIF_SUPPORTED		/* GIF image file format */
-#define PPM_SUPPORTED		/* PBMPLUS PPM/PGM image file format */
-#undef RLE_SUPPORTED		/* Utah RLE image file format */
-#define TARGA_SUPPORTED		/* Targa image file format */
-
-#undef TWO_FILE_COMMANDLINE	/* optional */
-#define USE_SETMODE		/* Needed to make one-file style work in Watcom */
-#undef NEED_SIGNAL_CATCHER	/* Define this if you use jmemname.c */
-#undef DONT_USE_B_MODE
-#undef PROGRESS_REPORT		/* optional */
-
-#endif /* JPEG_CJPEG_DJPEG */
diff -NEaurb neo/renderer/jpeg-6/jcparam.c neo/renderer/jpeg-6/jcparam.c
--- neo/renderer/jpeg-6/jcparam.c	2011-12-26 04:15:38 +0000
+++ neo/renderer/jpeg-6/jcparam.c	1970-01-01 00:00:00 +0000
@@ -1,575 +0,0 @@
-/*
- * jcparam.c
- *
- * Copyright (C) 1991-1995, Thomas G. Lane.
- * This file is part of the Independent JPEG Group's software.
- * For conditions of distribution and use, see the accompanying README file.
- *
- * This file contains optional default-setting code for the JPEG compressor.
- * Applications do not have to use this file, but those that don't use it
- * must know a lot more about the innards of the JPEG code.
- */
-
-#define JPEG_INTERNALS
-#include "jinclude.h"
-#include "jpeglib.h"
-
-
-/*
- * Quantization table setup routines
- */
-
-GLOBAL void
-jpeg_add_quant_table (j_compress_ptr cinfo, int which_tbl,
-		      const unsigned int *basic_table,
-		      int scale_factor, boolean force_baseline)
-/* Define a quantization table equal to the basic_table times
- * a scale factor (given as a percentage).
- * If force_baseline is TRUE, the computed quantization table entries
- * are limited to 1..255 for JPEG baseline compatibility.
- */
-{
-  JQUANT_TBL ** qtblptr = & cinfo->quant_tbl_ptrs[which_tbl];
-  int i;
-  long temp;
-
-  /* Safety check to ensure start_compress not called yet. */
-  if (cinfo->global_state != CSTATE_START)
-    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
-
-  if (*qtblptr == NULL)
-    *qtblptr = jpeg_alloc_quant_table((j_common_ptr) cinfo);
-
-  for (i = 0; i < DCTSIZE2; i++) {
-    temp = ((long) basic_table[i] * scale_factor + 50L) / 100L;
-    /* limit the values to the valid range */
-    if (temp <= 0L) temp = 1L;
-    if (temp > 32767L) temp = 32767L; /* max quantizer needed for 12 bits */
-    if (force_baseline && temp > 255L)
-      temp = 255L;		/* limit to baseline range if requested */
-    (*qtblptr)->quantval[i] = (UINT16) temp;
-  }
-
-  /* Initialize sent_table FALSE so table will be written to JPEG file. */
-  (*qtblptr)->sent_table = FALSE;
-}
-
-
-GLOBAL void
-jpeg_set_linear_quality (j_compress_ptr cinfo, int scale_factor,
-			 boolean force_baseline)
-/* Set or change the 'quality' (quantization) setting, using default tables
- * and a straight percentage-scaling quality scale.  In most cases it's better
- * to use jpeg_set_quality (below); this entry point is provided for
- * applications that insist on a linear percentage scaling.
- */
-{
-  /* This is the sample quantization table given in the JPEG spec section K.1,
-   * but expressed in zigzag order (as are all of our quant. tables).
-   * The spec says that the values given produce "good" quality, and
-   * when divided by 2, "very good" quality.
-   */
-  static const unsigned int std_luminance_quant_tbl[DCTSIZE2] = {
-    16,  11,  12,  14,  12,  10,  16,  14,
-    13,  14,  18,  17,  16,  19,  24,  40,
-    26,  24,  22,  22,  24,  49,  35,  37,
-    29,  40,  58,  51,  61,  60,  57,  51,
-    56,  55,  64,  72,  92,  78,  64,  68,
-    87,  69,  55,  56,  80, 109,  81,  87,
-    95,  98, 103, 104, 103,  62,  77, 113,
-    121, 112, 100, 120,  92, 101, 103,  99
-    };
-  static const unsigned int std_chrominance_quant_tbl[DCTSIZE2] = {
-    17,  18,  18,  24,  21,  24,  47,  26,
-    26,  47,  99,  66,  56,  66,  99,  99,
-    99,  99,  99,  99,  99,  99,  99,  99,
-    99,  99,  99,  99,  99,  99,  99,  99,
-    99,  99,  99,  99,  99,  99,  99,  99,
-    99,  99,  99,  99,  99,  99,  99,  99,
-    99,  99,  99,  99,  99,  99,  99,  99,
-    99,  99,  99,  99,  99,  99,  99,  99
-    };
-
-  /* Set up two quantization tables using the specified scaling */
-  jpeg_add_quant_table(cinfo, 0, std_luminance_quant_tbl,
-		       scale_factor, force_baseline);
-  jpeg_add_quant_table(cinfo, 1, std_chrominance_quant_tbl,
-		       scale_factor, force_baseline);
-}
-
-
-GLOBAL int
-jpeg_quality_scaling (int quality)
-/* Convert a user-specified quality rating to a percentage scaling factor
- * for an underlying quantization table, using our recommended scaling curve.
- * The input 'quality' factor should be 0 (terrible) to 100 (very good).
- */
-{
-  /* Safety limit on quality factor.  Convert 0 to 1 to avoid zero divide. */
-  if (quality <= 0) quality = 1;
-  if (quality > 100) quality = 100;
-
-  /* The basic table is used as-is (scaling 100) for a quality of 50.
-   * Qualities 50..100 are converted to scaling percentage 200 - 2*Q;
-   * note that at Q=100 the scaling is 0, which will cause j_add_quant_table
-   * to make all the table entries 1 (hence, no quantization loss).
-   * Qualities 1..50 are converted to scaling percentage 5000/Q.
-   */
-  if (quality < 50)
-    quality = 5000 / quality;
-  else
-    quality = 200 - quality*2;
-
-  return quality;
-}
-
-
-GLOBAL void
-jpeg_set_quality (j_compress_ptr cinfo, int quality, boolean force_baseline)
-/* Set or change the 'quality' (quantization) setting, using default tables.
- * This is the standard quality-adjusting entry point for typical user
- * interfaces; only those who want detailed control over quantization tables
- * would use the preceding three routines directly.
- */
-{
-  /* Convert user 0-100 rating to percentage scaling */
-  quality = jpeg_quality_scaling(quality);
-
-  /* Set up standard quality tables */
-  jpeg_set_linear_quality(cinfo, quality, force_baseline);
-}
-
-
-/*
- * Huffman table setup routines
- */
-
-LOCAL void
-add_huff_table (j_compress_ptr cinfo,
-		JHUFF_TBL **htblptr, const UINT8 *bits, const UINT8 *val)
-/* Define a Huffman table */
-{
-  if (*htblptr == NULL)
-    *htblptr = jpeg_alloc_huff_table((j_common_ptr) cinfo);
-  
-  MEMCOPY((*htblptr)->bits, bits, SIZEOF((*htblptr)->bits));
-  MEMCOPY((*htblptr)->huffval, val, SIZEOF((*htblptr)->huffval));
-
-  /* Initialize sent_table FALSE so table will be written to JPEG file. */
-  (*htblptr)->sent_table = FALSE;
-}
-
-
-LOCAL void
-std_huff_tables (j_compress_ptr cinfo)
-/* Set up the standard Huffman tables (cf. JPEG standard section K.3) */
-/* IMPORTANT: these are only valid for 8-bit data precision! */
-{
-  static const UINT8 bits_dc_luminance[17] =
-    { /* 0-base */ 0, 0, 1, 5, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0 };
-  static const UINT8 val_dc_luminance[] =
-    { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11 };
-  
-  static const UINT8 bits_dc_chrominance[17] =
-    { /* 0-base */ 0, 0, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0 };
-  static const UINT8 val_dc_chrominance[] =
-    { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11 };
-  
-  static const UINT8 bits_ac_luminance[17] =
-    { /* 0-base */ 0, 0, 2, 1, 3, 3, 2, 4, 3, 5, 5, 4, 4, 0, 0, 1, 0x7d };
-  static const UINT8 val_ac_luminance[] =
-    { 0x01, 0x02, 0x03, 0x00, 0x04, 0x11, 0x05, 0x12,
-      0x21, 0x31, 0x41, 0x06, 0x13, 0x51, 0x61, 0x07,
-      0x22, 0x71, 0x14, 0x32, 0x81, 0x91, 0xa1, 0x08,
-      0x23, 0x42, 0xb1, 0xc1, 0x15, 0x52, 0xd1, 0xf0,
-      0x24, 0x33, 0x62, 0x72, 0x82, 0x09, 0x0a, 0x16,
-      0x17, 0x18, 0x19, 0x1a, 0x25, 0x26, 0x27, 0x28,
-      0x29, 0x2a, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39,
-      0x3a, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49,
-      0x4a, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59,
-      0x5a, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69,
-      0x6a, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79,
-      0x7a, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89,
-      0x8a, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98,
-      0x99, 0x9a, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7,
-      0xa8, 0xa9, 0xaa, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6,
-      0xb7, 0xb8, 0xb9, 0xba, 0xc2, 0xc3, 0xc4, 0xc5,
-      0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xd2, 0xd3, 0xd4,
-      0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xe1, 0xe2,
-      0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea,
-      0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8,
-      0xf9, 0xfa };
-  
-  static const UINT8 bits_ac_chrominance[17] =
-    { /* 0-base */ 0, 0, 2, 1, 2, 4, 4, 3, 4, 7, 5, 4, 4, 0, 1, 2, 0x77 };
-  static const UINT8 val_ac_chrominance[] =
-    { 0x00, 0x01, 0x02, 0x03, 0x11, 0x04, 0x05, 0x21,
-      0x31, 0x06, 0x12, 0x41, 0x51, 0x07, 0x61, 0x71,
-      0x13, 0x22, 0x32, 0x81, 0x08, 0x14, 0x42, 0x91,
-      0xa1, 0xb1, 0xc1, 0x09, 0x23, 0x33, 0x52, 0xf0,
-      0x15, 0x62, 0x72, 0xd1, 0x0a, 0x16, 0x24, 0x34,
-      0xe1, 0x25, 0xf1, 0x17, 0x18, 0x19, 0x1a, 0x26,
-      0x27, 0x28, 0x29, 0x2a, 0x35, 0x36, 0x37, 0x38,
-      0x39, 0x3a, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48,
-      0x49, 0x4a, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58,
-      0x59, 0x5a, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68,
-      0x69, 0x6a, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78,
-      0x79, 0x7a, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87,
-      0x88, 0x89, 0x8a, 0x92, 0x93, 0x94, 0x95, 0x96,
-      0x97, 0x98, 0x99, 0x9a, 0xa2, 0xa3, 0xa4, 0xa5,
-      0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xb2, 0xb3, 0xb4,
-      0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xc2, 0xc3,
-      0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xd2,
-      0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda,
-      0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9,
-      0xea, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8,
-      0xf9, 0xfa };
-  
-  add_huff_table(cinfo, &cinfo->dc_huff_tbl_ptrs[0],
-		 bits_dc_luminance, val_dc_luminance);
-  add_huff_table(cinfo, &cinfo->ac_huff_tbl_ptrs[0],
-		 bits_ac_luminance, val_ac_luminance);
-  add_huff_table(cinfo, &cinfo->dc_huff_tbl_ptrs[1],
-		 bits_dc_chrominance, val_dc_chrominance);
-  add_huff_table(cinfo, &cinfo->ac_huff_tbl_ptrs[1],
-		 bits_ac_chrominance, val_ac_chrominance);
-}
-
-
-/*
- * Default parameter setup for compression.
- *
- * Applications that don't choose to use this routine must do their
- * own setup of all these parameters.  Alternately, you can call this
- * to establish defaults and then alter parameters selectively.  This
- * is the recommended approach since, if we add any new parameters,
- * your code will still work (they'll be set to reasonable defaults).
- */
-
-GLOBAL void
-jpeg_set_defaults (j_compress_ptr cinfo)
-{
-  int i;
-
-  /* Safety check to ensure start_compress not called yet. */
-  if (cinfo->global_state != CSTATE_START)
-    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
-
-  /* Allocate comp_info array large enough for maximum component count.
-   * Array is made permanent in case application wants to compress
-   * multiple images at same param settings.
-   */
-  if (cinfo->comp_info == NULL)
-    cinfo->comp_info = (jpeg_component_info *)
-      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
-				  MAX_COMPONENTS * SIZEOF(jpeg_component_info));
-
-  /* Initialize everything not dependent on the color space */
-
-  cinfo->data_precision = BITS_IN_JSAMPLE;
-  /* Set up two quantization tables using default quality of 75 */
-  jpeg_set_quality(cinfo, 75, TRUE);
-  /* Set up two Huffman tables */
-  std_huff_tables(cinfo);
-
-  /* Initialize default arithmetic coding conditioning */
-  for (i = 0; i < NUM_ARITH_TBLS; i++) {
-    cinfo->arith_dc_L[i] = 0;
-    cinfo->arith_dc_U[i] = 1;
-    cinfo->arith_ac_K[i] = 5;
-  }
-
-  /* Default is no multiple-scan output */
-  cinfo->scan_info = NULL;
-  cinfo->num_scans = 0;
-
-  /* Expect normal source image, not raw downsampled data */
-  cinfo->raw_data_in = FALSE;
-
-  /* Use Huffman coding, not arithmetic coding, by default */
-  cinfo->arith_code = FALSE;
-
-  /* By default, don't do extra passes to optimize entropy coding */
-  cinfo->optimize_coding = FALSE;
-  /* The standard Huffman tables are only valid for 8-bit data precision.
-   * If the precision is higher, force optimization on so that usable
-   * tables will be computed.  This test can be removed if default tables
-   * are supplied that are valid for the desired precision.
-   */
-  if (cinfo->data_precision > 8)
-    cinfo->optimize_coding = TRUE;
-
-  /* By default, use the simpler non-cosited sampling alignment */
-  cinfo->CCIR601_sampling = FALSE;
-
-  /* No input smoothing */
-  cinfo->smoothing_factor = 0;
-
-  /* DCT algorithm preference */
-  cinfo->dct_method = JDCT_DEFAULT;
-
-  /* No restart markers */
-  cinfo->restart_interval = 0;
-  cinfo->restart_in_rows = 0;
-
-  /* Fill in default JFIF marker parameters.  Note that whether the marker
-   * will actually be written is determined by jpeg_set_colorspace.
-   */
-  cinfo->density_unit = 0;	/* Pixel size is unknown by default */
-  cinfo->X_density = 1;		/* Pixel aspect ratio is square by default */
-  cinfo->Y_density = 1;
-
-  /* Choose JPEG colorspace based on input space, set defaults accordingly */
-
-  jpeg_default_colorspace(cinfo);
-}
-
-
-/*
- * Select an appropriate JPEG colorspace for in_color_space.
- */
-
-GLOBAL void
-jpeg_default_colorspace (j_compress_ptr cinfo)
-{
-  switch (cinfo->in_color_space) {
-  case JCS_GRAYSCALE:
-    jpeg_set_colorspace(cinfo, JCS_GRAYSCALE);
-    break;
-  case JCS_RGB:
-    jpeg_set_colorspace(cinfo, JCS_YCbCr);
-    break;
-  case JCS_YCbCr:
-    jpeg_set_colorspace(cinfo, JCS_YCbCr);
-    break;
-  case JCS_CMYK:
-    jpeg_set_colorspace(cinfo, JCS_CMYK); /* By default, no translation */
-    break;
-  case JCS_YCCK:
-    jpeg_set_colorspace(cinfo, JCS_YCCK);
-    break;
-  case JCS_UNKNOWN:
-    jpeg_set_colorspace(cinfo, JCS_UNKNOWN);
-    break;
-  default:
-    ERREXIT(cinfo, JERR_BAD_IN_COLORSPACE);
-  }
-}
-
-
-/*
- * Set the JPEG colorspace, and choose colorspace-dependent default values.
- */
-
-GLOBAL void
-jpeg_set_colorspace (j_compress_ptr cinfo, J_COLOR_SPACE colorspace)
-{
-  jpeg_component_info * compptr;
-  int ci;
-
-#define SET_COMP(index,id,hsamp,vsamp,quant,dctbl,actbl)  \
-  (compptr = &cinfo->comp_info[index], \
-   compptr->component_id = (id), \
-   compptr->h_samp_factor = (hsamp), \
-   compptr->v_samp_factor = (vsamp), \
-   compptr->quant_tbl_no = (quant), \
-   compptr->dc_tbl_no = (dctbl), \
-   compptr->ac_tbl_no = (actbl) )
-
-  /* Safety check to ensure start_compress not called yet. */
-  if (cinfo->global_state != CSTATE_START)
-    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
-
-  /* For all colorspaces, we use Q and Huff tables 0 for luminance components,
-   * tables 1 for chrominance components.
-   */
-
-  cinfo->jpeg_color_space = colorspace;
-
-  cinfo->write_JFIF_header = FALSE; /* No marker for non-JFIF colorspaces */
-  cinfo->write_Adobe_marker = FALSE; /* write no Adobe marker by default */
-
-  switch (colorspace) {
-  case JCS_GRAYSCALE:
-    cinfo->write_JFIF_header = TRUE; /* Write a JFIF marker */
-    cinfo->num_components = 1;
-    /* JFIF specifies component ID 1 */
-    SET_COMP(0, 1, 1,1, 0, 0,0);
-    break;
-  case JCS_RGB:
-    cinfo->write_Adobe_marker = TRUE; /* write Adobe marker to flag RGB */
-    cinfo->num_components = 3;
-    SET_COMP(0, 0x52 /* 'R' */, 1,1, 0, 0,0);
-    SET_COMP(1, 0x47 /* 'G' */, 1,1, 0, 0,0);
-    SET_COMP(2, 0x42 /* 'B' */, 1,1, 0, 0,0);
-    break;
-  case JCS_YCbCr:
-    cinfo->write_JFIF_header = TRUE; /* Write a JFIF marker */
-    cinfo->num_components = 3;
-    /* JFIF specifies component IDs 1,2,3 */
-    /* We default to 2x2 subsamples of chrominance */
-    SET_COMP(0, 1, 2,2, 0, 0,0);
-    SET_COMP(1, 2, 1,1, 1, 1,1);
-    SET_COMP(2, 3, 1,1, 1, 1,1);
-    break;
-  case JCS_CMYK:
-    cinfo->write_Adobe_marker = TRUE; /* write Adobe marker to flag CMYK */
-    cinfo->num_components = 4;
-    SET_COMP(0, 0x43 /* 'C' */, 1,1, 0, 0,0);
-    SET_COMP(1, 0x4D /* 'M' */, 1,1, 0, 0,0);
-    SET_COMP(2, 0x59 /* 'Y' */, 1,1, 0, 0,0);
-    SET_COMP(3, 0x4B /* 'K' */, 1,1, 0, 0,0);
-    break;
-  case JCS_YCCK:
-    cinfo->write_Adobe_marker = TRUE; /* write Adobe marker to flag YCCK */
-    cinfo->num_components = 4;
-    SET_COMP(0, 1, 2,2, 0, 0,0);
-    SET_COMP(1, 2, 1,1, 1, 1,1);
-    SET_COMP(2, 3, 1,1, 1, 1,1);
-    SET_COMP(3, 4, 2,2, 0, 0,0);
-    break;
-  case JCS_UNKNOWN:
-    cinfo->num_components = cinfo->input_components;
-    if (cinfo->num_components < 1 || cinfo->num_components > MAX_COMPONENTS)
-      ERREXIT2(cinfo, JERR_COMPONENT_COUNT, cinfo->num_components,
-	       MAX_COMPONENTS);
-    for (ci = 0; ci < cinfo->num_components; ci++) {
-      SET_COMP(ci, ci, 1,1, 0, 0,0);
-    }
-    break;
-  default:
-    ERREXIT(cinfo, JERR_BAD_J_COLORSPACE);
-  }
-}
-
-
-#ifdef C_PROGRESSIVE_SUPPORTED
-
-LOCAL jpeg_scan_info *
-fill_a_scan (jpeg_scan_info * scanptr, int ci,
-	     int Ss, int Se, int Ah, int Al)
-/* Support routine: generate one scan for specified component */
-{
-  scanptr->comps_in_scan = 1;
-  scanptr->component_index[0] = ci;
-  scanptr->Ss = Ss;
-  scanptr->Se = Se;
-  scanptr->Ah = Ah;
-  scanptr->Al = Al;
-  scanptr++;
-  return scanptr;
-}
-
-LOCAL jpeg_scan_info *
-fill_scans (jpeg_scan_info * scanptr, int ncomps,
-	    int Ss, int Se, int Ah, int Al)
-/* Support routine: generate one scan for each component */
-{
-  int ci;
-
-  for (ci = 0; ci < ncomps; ci++) {
-    scanptr->comps_in_scan = 1;
-    scanptr->component_index[0] = ci;
-    scanptr->Ss = Ss;
-    scanptr->Se = Se;
-    scanptr->Ah = Ah;
-    scanptr->Al = Al;
-    scanptr++;
-  }
-  return scanptr;
-}
-
-LOCAL jpeg_scan_info *
-fill_dc_scans (jpeg_scan_info * scanptr, int ncomps, int Ah, int Al)
-/* Support routine: generate interleaved DC scan if possible, else N scans */
-{
-  int ci;
-
-  if (ncomps <= MAX_COMPS_IN_SCAN) {
-    /* Single interleaved DC scan */
-    scanptr->comps_in_scan = ncomps;
-    for (ci = 0; ci < ncomps; ci++)
-      scanptr->component_index[ci] = ci;
-    scanptr->Ss = scanptr->Se = 0;
-    scanptr->Ah = Ah;
-    scanptr->Al = Al;
-    scanptr++;
-  } else {
-    /* Noninterleaved DC scan for each component */
-    scanptr = fill_scans(scanptr, ncomps, 0, 0, Ah, Al);
-  }
-  return scanptr;
-}
-
-
-/*
- * Create a recommended progressive-JPEG script.
- * cinfo->num_components and cinfo->jpeg_color_space must be correct.
- */
-
-GLOBAL void
-jpeg_simple_progression (j_compress_ptr cinfo)
-{
-  int ncomps = cinfo->num_components;
-  int nscans;
-  jpeg_scan_info * scanptr;
-
-  /* Safety check to ensure start_compress not called yet. */
-  if (cinfo->global_state != CSTATE_START)
-    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
-
-  /* Figure space needed for script.  Calculation must match code below! */
-  if (ncomps == 3 && cinfo->jpeg_color_space == JCS_YCbCr) {
-    /* Custom script for YCbCr color images. */
-    nscans = 10;
-  } else {
-    /* All-purpose script for other color spaces. */
-    if (ncomps > MAX_COMPS_IN_SCAN)
-      nscans = 6 * ncomps;	/* 2 DC + 4 AC scans per component */
-    else
-      nscans = 2 + 4 * ncomps;	/* 2 DC scans; 4 AC scans per component */
-  }
-
-  /* Allocate space for script. */
-  /* We use permanent pool just in case application re-uses script. */
-  scanptr = (jpeg_scan_info *)
-    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
-				nscans * SIZEOF(jpeg_scan_info));
-  cinfo->scan_info = scanptr;
-  cinfo->num_scans = nscans;
-
-  if (ncomps == 3 && cinfo->jpeg_color_space == JCS_YCbCr) {
-    /* Custom script for YCbCr color images. */
-    /* Initial DC scan */
-    scanptr = fill_dc_scans(scanptr, ncomps, 0, 1);
-    /* Initial AC scan: get some luma data out in a hurry */
-    scanptr = fill_a_scan(scanptr, 0, 1, 5, 0, 2);
-    /* Chroma data is too small to be worth expending many scans on */
-    scanptr = fill_a_scan(scanptr, 2, 1, 63, 0, 1);
-    scanptr = fill_a_scan(scanptr, 1, 1, 63, 0, 1);
-    /* Complete spectral selection for luma AC */
-    scanptr = fill_a_scan(scanptr, 0, 6, 63, 0, 2);
-    /* Refine next bit of luma AC */
-    scanptr = fill_a_scan(scanptr, 0, 1, 63, 2, 1);
-    /* Finish DC successive approximation */
-    scanptr = fill_dc_scans(scanptr, ncomps, 1, 0);
-    /* Finish AC successive approximation */
-    scanptr = fill_a_scan(scanptr, 2, 1, 63, 1, 0);
-    scanptr = fill_a_scan(scanptr, 1, 1, 63, 1, 0);
-    /* Luma bottom bit comes last since it's usually largest scan */
-    scanptr = fill_a_scan(scanptr, 0, 1, 63, 1, 0);
-  } else {
-    /* All-purpose script for other color spaces. */
-    /* Successive approximation first pass */
-    scanptr = fill_dc_scans(scanptr, ncomps, 0, 1);
-    scanptr = fill_scans(scanptr, ncomps, 1, 5, 0, 2);
-    scanptr = fill_scans(scanptr, ncomps, 6, 63, 0, 2);
-    /* Successive approximation second pass */
-    scanptr = fill_scans(scanptr, ncomps, 1, 63, 2, 1);
-    /* Successive approximation final pass */
-    scanptr = fill_dc_scans(scanptr, ncomps, 1, 0);
-    scanptr = fill_scans(scanptr, ncomps, 1, 63, 1, 0);
-  }
-}
-
-#endif /* C_PROGRESSIVE_SUPPORTED */
diff -NEaurb neo/renderer/jpeg-6/jcphuff.c neo/renderer/jpeg-6/jcphuff.c
--- neo/renderer/jpeg-6/jcphuff.c	2011-12-26 04:15:38 +0000
+++ neo/renderer/jpeg-6/jcphuff.c	1970-01-01 00:00:00 +0000
@@ -1,829 +0,0 @@
-/*
- * jcphuff.c
- *
- * Copyright (C) 1995, Thomas G. Lane.
- * This file is part of the Independent JPEG Group's software.
- * For conditions of distribution and use, see the accompanying README file.
- *
- * This file contains Huffman entropy encoding routines for progressive JPEG.
- *
- * We do not support output suspension in this module, since the library
- * currently does not allow multiple-scan files to be written with output
- * suspension.
- */
-
-#define JPEG_INTERNALS
-#include "jinclude.h"
-#include "jpeglib.h"
-#include "jchuff.h"		/* Declarations shared with jchuff.c */
-
-#ifdef C_PROGRESSIVE_SUPPORTED
-
-/* Expanded entropy encoder object for progressive Huffman encoding. */
-
-typedef struct {
-  struct jpeg_entropy_encoder pub; /* public fields */
-
-  /* Mode flag: TRUE for optimization, FALSE for actual data output */
-  boolean gather_statistics;
-
-  /* Bit-level coding status.
-   * next_output_byte/free_in_buffer are local copies of cinfo->dest fields.
-   */
-  JOCTET * next_output_byte;	/* => next byte to write in buffer */
-  size_t free_in_buffer;	/* # of byte spaces remaining in buffer */
-  INT32 put_buffer;		/* current bit-accumulation buffer */
-  int put_bits;			/* # of bits now in it */
-  j_compress_ptr cinfo;		/* link to cinfo (needed for dump_buffer) */
-
-  /* Coding status for DC components */
-  int last_dc_val[MAX_COMPS_IN_SCAN]; /* last DC coef for each component */
-
-  /* Coding status for AC components */
-  int ac_tbl_no;		/* the table number of the single component */
-  unsigned int EOBRUN;		/* run length of EOBs */
-  unsigned int BE;		/* # of buffered correction bits before MCU */
-  char * bit_buffer;		/* buffer for correction bits (1 per char) */
-  /* packing correction bits tightly would save some space but cost time... */
-
-  unsigned int restarts_to_go;	/* MCUs left in this restart interval */
-  int next_restart_num;		/* next restart number to write (0-7) */
-
-  /* Pointers to derived tables (these workspaces have image lifespan).
-   * Since any one scan codes only DC or only AC, we only need one set
-   * of tables, not one for DC and one for AC.
-   */
-  c_derived_tbl * derived_tbls[NUM_HUFF_TBLS];
-
-  /* Statistics tables for optimization; again, one set is enough */
-  long * count_ptrs[NUM_HUFF_TBLS];
-} phuff_entropy_encoder;
-
-typedef phuff_entropy_encoder * phuff_entropy_ptr;
-
-/* MAX_CORR_BITS is the number of bits the AC refinement correction-bit
- * buffer can hold.  Larger sizes may slightly improve compression, but
- * 1000 is already well into the realm of overkill.
- * The minimum safe size is 64 bits.
- */
-
-#define MAX_CORR_BITS  1000	/* Max # of correction bits I can buffer */
-
-/* IRIGHT_SHIFT is like RIGHT_SHIFT, but works on int rather than INT32.
- * We assume that int right shift is unsigned if INT32 right shift is,
- * which should be safe.
- */
-
-#ifdef RIGHT_SHIFT_IS_UNSIGNED
-#define ISHIFT_TEMPS	int ishift_temp;
-#define IRIGHT_SHIFT(x,shft)  \
-	((ishift_temp = (x)) < 0 ? \
-	 (ishift_temp >> (shft)) | ((~0) << (16-(shft))) : \
-	 (ishift_temp >> (shft)))
-#else
-#define ISHIFT_TEMPS
-#define IRIGHT_SHIFT(x,shft)	((x) >> (shft))
-#endif
-
-/* Forward declarations */
-METHODDEF boolean encode_mcu_DC_first JPP((j_compress_ptr cinfo,
-					   JBLOCKROW *MCU_data));
-METHODDEF boolean encode_mcu_AC_first JPP((j_compress_ptr cinfo,
-					   JBLOCKROW *MCU_data));
-METHODDEF boolean encode_mcu_DC_refine JPP((j_compress_ptr cinfo,
-					    JBLOCKROW *MCU_data));
-METHODDEF boolean encode_mcu_AC_refine JPP((j_compress_ptr cinfo,
-					    JBLOCKROW *MCU_data));
-METHODDEF void finish_pass_phuff JPP((j_compress_ptr cinfo));
-METHODDEF void finish_pass_gather_phuff JPP((j_compress_ptr cinfo));
-
-
-/*
- * Initialize for a Huffman-compressed scan using progressive JPEG.
- */
-
-METHODDEF void
-start_pass_phuff (j_compress_ptr cinfo, boolean gather_statistics)
-{  
-  phuff_entropy_ptr entropy = (phuff_entropy_ptr) cinfo->entropy;
-  boolean is_DC_band;
-  int ci, tbl;
-  jpeg_component_info * compptr;
-
-  entropy->cinfo = cinfo;
-  entropy->gather_statistics = gather_statistics;
-
-  is_DC_band = (cinfo->Ss == 0);
-
-  /* We assume jcmaster.c already validated the scan parameters. */
-
-  /* Select execution routines */
-  if (cinfo->Ah == 0) {
-    if (is_DC_band)
-      entropy->pub.encode_mcu = encode_mcu_DC_first;
-    else
-      entropy->pub.encode_mcu = encode_mcu_AC_first;
-  } else {
-    if (is_DC_band)
-      entropy->pub.encode_mcu = encode_mcu_DC_refine;
-    else {
-      entropy->pub.encode_mcu = encode_mcu_AC_refine;
-      /* AC refinement needs a correction bit buffer */
-      if (entropy->bit_buffer == NULL)
-	entropy->bit_buffer = (char *)
-	  (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
-				      MAX_CORR_BITS * SIZEOF(char));
-    }
-  }
-  if (gather_statistics)
-    entropy->pub.finish_pass = finish_pass_gather_phuff;
-  else
-    entropy->pub.finish_pass = finish_pass_phuff;
-
-  /* Only DC coefficients may be interleaved, so cinfo->comps_in_scan = 1
-   * for AC coefficients.
-   */
-  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
-    compptr = cinfo->cur_comp_info[ci];
-    /* Initialize DC predictions to 0 */
-    entropy->last_dc_val[ci] = 0;
-    /* Make sure requested tables are present */
-    /* (In gather mode, tables need not be allocated yet) */
-    if (is_DC_band) {
-      if (cinfo->Ah != 0)	/* DC refinement needs no table */
-	continue;
-      tbl = compptr->dc_tbl_no;
-      if (tbl < 0 || tbl >= NUM_HUFF_TBLS ||
-	  (cinfo->dc_huff_tbl_ptrs[tbl] == NULL && !gather_statistics))
-	ERREXIT1(cinfo,JERR_NO_HUFF_TABLE, tbl);
-    } else {
-      entropy->ac_tbl_no = tbl = compptr->ac_tbl_no;
-      if (tbl < 0 || tbl >= NUM_HUFF_TBLS ||
-          (cinfo->ac_huff_tbl_ptrs[tbl] == NULL && !gather_statistics))
-        ERREXIT1(cinfo,JERR_NO_HUFF_TABLE, tbl);
-    }
-    if (gather_statistics) {
-      /* Allocate and zero the statistics tables */
-      /* Note that jpeg_gen_optimal_table expects 257 entries in each table! */
-      if (entropy->count_ptrs[tbl] == NULL)
-	entropy->count_ptrs[tbl] = (long *)
-	  (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
-				      257 * SIZEOF(long));
-      MEMZERO(entropy->count_ptrs[tbl], 257 * SIZEOF(long));
-    } else {
-      /* Compute derived values for Huffman tables */
-      /* We may do this more than once for a table, but it's not expensive */
-      if (is_DC_band)
-        jpeg_make_c_derived_tbl(cinfo, cinfo->dc_huff_tbl_ptrs[tbl],
-				& entropy->derived_tbls[tbl]);
-      else
-        jpeg_make_c_derived_tbl(cinfo, cinfo->ac_huff_tbl_ptrs[tbl],
-				& entropy->derived_tbls[tbl]);
-    }
-  }
-
-  /* Initialize AC stuff */
-  entropy->EOBRUN = 0;
-  entropy->BE = 0;
-
-  /* Initialize bit buffer to empty */
-  entropy->put_buffer = 0;
-  entropy->put_bits = 0;
-
-  /* Initialize restart stuff */
-  entropy->restarts_to_go = cinfo->restart_interval;
-  entropy->next_restart_num = 0;
-}
-
-
-/* Outputting bytes to the file.
- * NB: these must be called only when actually outputting,
- * that is, entropy->gather_statistics == FALSE.
- */
-
-/* Emit a byte */
-#define emit_byte(entropy,val)  \
-	{ *(entropy)->next_output_byte++ = (JOCTET) (val);  \
-	  if (--(entropy)->free_in_buffer == 0)  \
-	    dump_buffer(entropy); }
-
-
-LOCAL void
-dump_buffer (phuff_entropy_ptr entropy)
-/* Empty the output buffer; we do not support suspension in this module. */
-{
-  struct jpeg_destination_mgr * dest = entropy->cinfo->dest;
-
-  if (! (*dest->empty_output_buffer) (entropy->cinfo))
-    ERREXIT(entropy->cinfo, JERR_CANT_SUSPEND);
-  /* After a successful buffer dump, must reset buffer pointers */
-  entropy->next_output_byte = dest->next_output_byte;
-  entropy->free_in_buffer = dest->free_in_buffer;
-}
-
-
-/* Outputting bits to the file */
-
-/* Only the right 24 bits of put_buffer are used; the valid bits are
- * left-justified in this part.  At most 16 bits can be passed to emit_bits
- * in one call, and we never retain more than 7 bits in put_buffer
- * between calls, so 24 bits are sufficient.
- */
-
-INLINE
-LOCAL void
-emit_bits (phuff_entropy_ptr entropy, unsigned int code, int size)
-/* Emit some bits, unless we are in gather mode */
-{
-  /* This routine is heavily used, so it's worth coding tightly. */
-  register INT32 put_buffer = (INT32) code;
-  register int put_bits = entropy->put_bits;
-
-  /* if size is 0, caller used an invalid Huffman table entry */
-  if (size == 0)
-    ERREXIT(entropy->cinfo, JERR_HUFF_MISSING_CODE);
-
-  if (entropy->gather_statistics)
-    return;			/* do nothing if we're only getting stats */
-
-  put_buffer &= (((INT32) 1)<<size) - 1; /* mask off any extra bits in code */
-  
-  put_bits += size;		/* new number of bits in buffer */
-  
-  put_buffer <<= 24 - put_bits; /* align incoming bits */
-
-  put_buffer |= entropy->put_buffer; /* and merge with old buffer contents */
-
-  while (put_bits >= 8) {
-    int c = (int) ((put_buffer >> 16) & 0xFF);
-    
-    emit_byte(entropy, c);
-    if (c == 0xFF) {		/* need to stuff a zero byte? */
-      emit_byte(entropy, 0);
-    }
-    put_buffer <<= 8;
-    put_bits -= 8;
-  }
-
-  entropy->put_buffer = put_buffer; /* update variables */
-  entropy->put_bits = put_bits;
-}
-
-
-LOCAL void
-flush_bits (phuff_entropy_ptr entropy)
-{
-  emit_bits(entropy, 0x7F, 7); /* fill any partial byte with ones */
-  entropy->put_buffer = 0;     /* and reset bit-buffer to empty */
-  entropy->put_bits = 0;
-}
-
-
-/*
- * Emit (or just count) a Huffman symbol.
- */
-
-INLINE
-LOCAL void
-emit_symbol (phuff_entropy_ptr entropy, int tbl_no, int symbol)
-{
-  if (entropy->gather_statistics)
-    entropy->count_ptrs[tbl_no][symbol]++;
-  else {
-    c_derived_tbl * tbl = entropy->derived_tbls[tbl_no];
-    emit_bits(entropy, tbl->ehufco[symbol], tbl->ehufsi[symbol]);
-  }
-}
-
-
-/*
- * Emit bits from a correction bit buffer.
- */
-
-LOCAL void
-emit_buffered_bits (phuff_entropy_ptr entropy, char * bufstart,
-		    unsigned int nbits)
-{
-  if (entropy->gather_statistics)
-    return;			/* no real work */
-
-  while (nbits > 0) {
-    emit_bits(entropy, (unsigned int) (*bufstart), 1);
-    bufstart++;
-    nbits--;
-  }
-}
-
-
-/*
- * Emit any pending EOBRUN symbol.
- */
-
-LOCAL void
-emit_eobrun (phuff_entropy_ptr entropy)
-{
-  register int temp, nbits;
-
-  if (entropy->EOBRUN > 0) {	/* if there is any pending EOBRUN */
-    temp = entropy->EOBRUN;
-    nbits = 0;
-    while ((temp >>= 1))
-      nbits++;
-
-    emit_symbol(entropy, entropy->ac_tbl_no, nbits << 4);
-    if (nbits)
-      emit_bits(entropy, entropy->EOBRUN, nbits);
-
-    entropy->EOBRUN = 0;
-
-    /* Emit any buffered correction bits */
-    emit_buffered_bits(entropy, entropy->bit_buffer, entropy->BE);
-    entropy->BE = 0;
-  }
-}
-
-
-/*
- * Emit a restart marker & resynchronize predictions.
- */
-
-LOCAL void
-emit_restart (phuff_entropy_ptr entropy, int restart_num)
-{
-  int ci;
-
-  emit_eobrun(entropy);
-
-  if (! entropy->gather_statistics) {
-    flush_bits(entropy);
-    emit_byte(entropy, 0xFF);
-    emit_byte(entropy, JPEG_RST0 + restart_num);
-  }
-
-  if (entropy->cinfo->Ss == 0) {
-    /* Re-initialize DC predictions to 0 */
-    for (ci = 0; ci < entropy->cinfo->comps_in_scan; ci++)
-      entropy->last_dc_val[ci] = 0;
-  } else {
-    /* Re-initialize all AC-related fields to 0 */
-    entropy->EOBRUN = 0;
-    entropy->BE = 0;
-  }
-}
-
-
-/*
- * MCU encoding for DC initial scan (either spectral selection,
- * or first pass of successive approximation).
- */
-
-METHODDEF boolean
-encode_mcu_DC_first (j_compress_ptr cinfo, JBLOCKROW *MCU_data)
-{
-  phuff_entropy_ptr entropy = (phuff_entropy_ptr) cinfo->entropy;
-  register int temp, temp2;
-  register int nbits;
-  int blkn, ci;
-  int Al = cinfo->Al;
-  JBLOCKROW block;
-  jpeg_component_info * compptr;
-  ISHIFT_TEMPS
-
-  entropy->next_output_byte = cinfo->dest->next_output_byte;
-  entropy->free_in_buffer = cinfo->dest->free_in_buffer;
-
-  /* Emit restart marker if needed */
-  if (cinfo->restart_interval)
-    if (entropy->restarts_to_go == 0)
-      emit_restart(entropy, entropy->next_restart_num);
-
-  /* Encode the MCU data blocks */
-  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
-    block = MCU_data[blkn];
-    ci = cinfo->MCU_membership[blkn];
-    compptr = cinfo->cur_comp_info[ci];
-
-    /* Compute the DC value after the required point transform by Al.
-     * This is simply an arithmetic right shift.
-     */
-    temp2 = IRIGHT_SHIFT((int) ((*block)[0]), Al);
-
-    /* DC differences are figured on the point-transformed values. */
-    temp = temp2 - entropy->last_dc_val[ci];
-    entropy->last_dc_val[ci] = temp2;
-
-    /* Encode the DC coefficient difference per section G.1.2.1 */
-    temp2 = temp;
-    if (temp < 0) {
-      temp = -temp;		/* temp is abs value of input */
-      /* For a negative input, want temp2 = bitwise complement of abs(input) */
-      /* This code assumes we are on a two's complement machine */
-      temp2--;
-    }
-    
-    /* Find the number of bits needed for the magnitude of the coefficient */
-    nbits = 0;
-    while (temp) {
-      nbits++;
-      temp >>= 1;
-    }
-    
-    /* Count/emit the Huffman-coded symbol for the number of bits */
-    emit_symbol(entropy, compptr->dc_tbl_no, nbits);
-    
-    /* Emit that number of bits of the value, if positive, */
-    /* or the complement of its magnitude, if negative. */
-    if (nbits)			/* emit_bits rejects calls with size 0 */
-      emit_bits(entropy, (unsigned int) temp2, nbits);
-  }
-
-  cinfo->dest->next_output_byte = entropy->next_output_byte;
-  cinfo->dest->free_in_buffer = entropy->free_in_buffer;
-
-  /* Update restart-interval state too */
-  if (cinfo->restart_interval) {
-    if (entropy->restarts_to_go == 0) {
-      entropy->restarts_to_go = cinfo->restart_interval;
-      entropy->next_restart_num++;
-      entropy->next_restart_num &= 7;
-    }
-    entropy->restarts_to_go--;
-  }
-
-  return TRUE;
-}
-
-
-/*
- * MCU encoding for AC initial scan (either spectral selection,
- * or first pass of successive approximation).
- */
-
-METHODDEF boolean
-encode_mcu_AC_first (j_compress_ptr cinfo, JBLOCKROW *MCU_data)
-{
-  phuff_entropy_ptr entropy = (phuff_entropy_ptr) cinfo->entropy;
-  register int temp, temp2;
-  register int nbits;
-  register int r, k;
-  int Se = cinfo->Se;
-  int Al = cinfo->Al;
-  JBLOCKROW block;
-
-  entropy->next_output_byte = cinfo->dest->next_output_byte;
-  entropy->free_in_buffer = cinfo->dest->free_in_buffer;
-
-  /* Emit restart marker if needed */
-  if (cinfo->restart_interval)
-    if (entropy->restarts_to_go == 0)
-      emit_restart(entropy, entropy->next_restart_num);
-
-  /* Encode the MCU data block */
-  block = MCU_data[0];
-
-  /* Encode the AC coefficients per section G.1.2.2, fig. G.3 */
-  
-  r = 0;			/* r = run length of zeros */
-   
-  for (k = cinfo->Ss; k <= Se; k++) {
-    if ((temp = (*block)[jpeg_natural_order[k]]) == 0) {
-      r++;
-      continue;
-    }
-    /* We must apply the point transform by Al.  For AC coefficients this
-     * is an integer division with rounding towards 0.  To do this portably
-     * in C, we shift after obtaining the absolute value; so the code is
-     * interwoven with finding the abs value (temp) and output bits (temp2).
-     */
-    if (temp < 0) {
-      temp = -temp;		/* temp is abs value of input */
-      temp >>= Al;		/* apply the point transform */
-      /* For a negative coef, want temp2 = bitwise complement of abs(coef) */
-      temp2 = ~temp;
-    } else {
-      temp >>= Al;		/* apply the point transform */
-      temp2 = temp;
-    }
-    /* Watch out for case that nonzero coef is zero after point transform */
-    if (temp == 0) {
-      r++;
-      continue;
-    }
-
-    /* Emit any pending EOBRUN */
-    if (entropy->EOBRUN > 0)
-      emit_eobrun(entropy);
-    /* if run length > 15, must emit special run-length-16 codes (0xF0) */
-    while (r > 15) {
-      emit_symbol(entropy, entropy->ac_tbl_no, 0xF0);
-      r -= 16;
-    }
-
-    /* Find the number of bits needed for the magnitude of the coefficient */
-    nbits = 1;			/* there must be at least one 1 bit */
-    while ((temp >>= 1))
-      nbits++;
-
-    /* Count/emit Huffman symbol for run length / number of bits */
-    emit_symbol(entropy, entropy->ac_tbl_no, (r << 4) + nbits);
-
-    /* Emit that number of bits of the value, if positive, */
-    /* or the complement of its magnitude, if negative. */
-    emit_bits(entropy, (unsigned int) temp2, nbits);
-
-    r = 0;			/* reset zero run length */
-  }
-
-  if (r > 0) {			/* If there are trailing zeroes, */
-    entropy->EOBRUN++;		/* count an EOB */
-    if (entropy->EOBRUN == 0x7FFF)
-      emit_eobrun(entropy);	/* force it out to avoid overflow */
-  }
-
-  cinfo->dest->next_output_byte = entropy->next_output_byte;
-  cinfo->dest->free_in_buffer = entropy->free_in_buffer;
-
-  /* Update restart-interval state too */
-  if (cinfo->restart_interval) {
-    if (entropy->restarts_to_go == 0) {
-      entropy->restarts_to_go = cinfo->restart_interval;
-      entropy->next_restart_num++;
-      entropy->next_restart_num &= 7;
-    }
-    entropy->restarts_to_go--;
-  }
-
-  return TRUE;
-}
-
-
-/*
- * MCU encoding for DC successive approximation refinement scan.
- * Note: we assume such scans can be multi-component, although the spec
- * is not very clear on the point.
- */
-
-METHODDEF boolean
-encode_mcu_DC_refine (j_compress_ptr cinfo, JBLOCKROW *MCU_data)
-{
-  phuff_entropy_ptr entropy = (phuff_entropy_ptr) cinfo->entropy;
-  register int temp;
-  int blkn;
-  int Al = cinfo->Al;
-  JBLOCKROW block;
-
-  entropy->next_output_byte = cinfo->dest->next_output_byte;
-  entropy->free_in_buffer = cinfo->dest->free_in_buffer;
-
-  /* Emit restart marker if needed */
-  if (cinfo->restart_interval)
-    if (entropy->restarts_to_go == 0)
-      emit_restart(entropy, entropy->next_restart_num);
-
-  /* Encode the MCU data blocks */
-  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
-    block = MCU_data[blkn];
-
-    /* We simply emit the Al'th bit of the DC coefficient value. */
-    temp = (*block)[0];
-    emit_bits(entropy, (unsigned int) (temp >> Al), 1);
-  }
-
-  cinfo->dest->next_output_byte = entropy->next_output_byte;
-  cinfo->dest->free_in_buffer = entropy->free_in_buffer;
-
-  /* Update restart-interval state too */
-  if (cinfo->restart_interval) {
-    if (entropy->restarts_to_go == 0) {
-      entropy->restarts_to_go = cinfo->restart_interval;
-      entropy->next_restart_num++;
-      entropy->next_restart_num &= 7;
-    }
-    entropy->restarts_to_go--;
-  }
-
-  return TRUE;
-}
-
-
-/*
- * MCU encoding for AC successive approximation refinement scan.
- */
-
-METHODDEF boolean
-encode_mcu_AC_refine (j_compress_ptr cinfo, JBLOCKROW *MCU_data)
-{
-  phuff_entropy_ptr entropy = (phuff_entropy_ptr) cinfo->entropy;
-  register int temp;
-  register int r, k;
-  int EOB;
-  char *BR_buffer;
-  unsigned int BR;
-  int Se = cinfo->Se;
-  int Al = cinfo->Al;
-  JBLOCKROW block;
-  int absvalues[DCTSIZE2];
-
-  entropy->next_output_byte = cinfo->dest->next_output_byte;
-  entropy->free_in_buffer = cinfo->dest->free_in_buffer;
-
-  /* Emit restart marker if needed */
-  if (cinfo->restart_interval)
-    if (entropy->restarts_to_go == 0)
-      emit_restart(entropy, entropy->next_restart_num);
-
-  /* Encode the MCU data block */
-  block = MCU_data[0];
-
-  /* It is convenient to make a pre-pass to determine the transformed
-   * coefficients' absolute values and the EOB position.
-   */
-  EOB = 0;
-  for (k = cinfo->Ss; k <= Se; k++) {
-    temp = (*block)[jpeg_natural_order[k]];
-    /* We must apply the point transform by Al.  For AC coefficients this
-     * is an integer division with rounding towards 0.  To do this portably
-     * in C, we shift after obtaining the absolute value.
-     */
-    if (temp < 0)
-      temp = -temp;		/* temp is abs value of input */
-    temp >>= Al;		/* apply the point transform */
-    absvalues[k] = temp;	/* save abs value for main pass */
-    if (temp == 1)
-      EOB = k;			/* EOB = index of last newly-nonzero coef */
-  }
-
-  /* Encode the AC coefficients per section G.1.2.3, fig. G.7 */
-  
-  r = 0;			/* r = run length of zeros */
-  BR = 0;			/* BR = count of buffered bits added now */
-  BR_buffer = entropy->bit_buffer + entropy->BE; /* Append bits to buffer */
-
-  for (k = cinfo->Ss; k <= Se; k++) {
-    if ((temp = absvalues[k]) == 0) {
-      r++;
-      continue;
-    }
-
-    /* Emit any required ZRLs, but not if they can be folded into EOB */
-    while (r > 15 && k <= EOB) {
-      /* emit any pending EOBRUN and the BE correction bits */
-      emit_eobrun(entropy);
-      /* Emit ZRL */
-      emit_symbol(entropy, entropy->ac_tbl_no, 0xF0);
-      r -= 16;
-      /* Emit buffered correction bits that must be associated with ZRL */
-      emit_buffered_bits(entropy, BR_buffer, BR);
-      BR_buffer = entropy->bit_buffer; /* BE bits are gone now */
-      BR = 0;
-    }
-
-    /* If the coef was previously nonzero, it only needs a correction bit.
-     * NOTE: a straight translation of the spec's figure G.7 would suggest
-     * that we also need to test r > 15.  But if r > 15, we can only get here
-     * if k > EOB, which implies that this coefficient is not 1.
-     */
-    if (temp > 1) {
-      /* The correction bit is the next bit of the absolute value. */
-      BR_buffer[BR++] = (char) (temp & 1);
-      continue;
-    }
-
-    /* Emit any pending EOBRUN and the BE correction bits */
-    emit_eobrun(entropy);
-
-    /* Count/emit Huffman symbol for run length / number of bits */
-    emit_symbol(entropy, entropy->ac_tbl_no, (r << 4) + 1);
-
-    /* Emit output bit for newly-nonzero coef */
-    temp = ((*block)[jpeg_natural_order[k]] < 0) ? 0 : 1;
-    emit_bits(entropy, (unsigned int) temp, 1);
-
-    /* Emit buffered correction bits that must be associated with this code */
-    emit_buffered_bits(entropy, BR_buffer, BR);
-    BR_buffer = entropy->bit_buffer; /* BE bits are gone now */
-    BR = 0;
-    r = 0;			/* reset zero run length */
-  }
-
-  if (r > 0 || BR > 0) {	/* If there are trailing zeroes, */
-    entropy->EOBRUN++;		/* count an EOB */
-    entropy->BE += BR;		/* concat my correction bits to older ones */
-    /* We force out the EOB if we risk either:
-     * 1. overflow of the EOB counter;
-     * 2. overflow of the correction bit buffer during the next MCU.
-     */
-    if (entropy->EOBRUN == 0x7FFF || entropy->BE > (MAX_CORR_BITS-DCTSIZE2+1))
-      emit_eobrun(entropy);
-  }
-
-  cinfo->dest->next_output_byte = entropy->next_output_byte;
-  cinfo->dest->free_in_buffer = entropy->free_in_buffer;
-
-  /* Update restart-interval state too */
-  if (cinfo->restart_interval) {
-    if (entropy->restarts_to_go == 0) {
-      entropy->restarts_to_go = cinfo->restart_interval;
-      entropy->next_restart_num++;
-      entropy->next_restart_num &= 7;
-    }
-    entropy->restarts_to_go--;
-  }
-
-  return TRUE;
-}
-
-
-/*
- * Finish up at the end of a Huffman-compressed progressive scan.
- */
-
-METHODDEF void
-finish_pass_phuff (j_compress_ptr cinfo)
-{   
-  phuff_entropy_ptr entropy = (phuff_entropy_ptr) cinfo->entropy;
-
-  entropy->next_output_byte = cinfo->dest->next_output_byte;
-  entropy->free_in_buffer = cinfo->dest->free_in_buffer;
-
-  /* Flush out any buffered data */
-  emit_eobrun(entropy);
-  flush_bits(entropy);
-
-  cinfo->dest->next_output_byte = entropy->next_output_byte;
-  cinfo->dest->free_in_buffer = entropy->free_in_buffer;
-}
-
-
-/*
- * Finish up a statistics-gathering pass and create the new Huffman tables.
- */
-
-METHODDEF void
-finish_pass_gather_phuff (j_compress_ptr cinfo)
-{
-  phuff_entropy_ptr entropy = (phuff_entropy_ptr) cinfo->entropy;
-  boolean is_DC_band;
-  int ci, tbl;
-  jpeg_component_info * compptr;
-  JHUFF_TBL **htblptr;
-  boolean did[NUM_HUFF_TBLS];
-
-  /* Flush out buffered data (all we care about is counting the EOB symbol) */
-  emit_eobrun(entropy);
-
-  is_DC_band = (cinfo->Ss == 0);
-
-  /* It's important not to apply jpeg_gen_optimal_table more than once
-   * per table, because it clobbers the input frequency counts!
-   */
-  MEMZERO(did, SIZEOF(did));
-
-  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
-    compptr = cinfo->cur_comp_info[ci];
-    if (is_DC_band) {
-      if (cinfo->Ah != 0)	/* DC refinement needs no table */
-	continue;
-      tbl = compptr->dc_tbl_no;
-    } else {
-      tbl = compptr->ac_tbl_no;
-    }
-    if (! did[tbl]) {
-      if (is_DC_band)
-        htblptr = & cinfo->dc_huff_tbl_ptrs[tbl];
-      else
-        htblptr = & cinfo->ac_huff_tbl_ptrs[tbl];
-      if (*htblptr == NULL)
-        *htblptr = jpeg_alloc_huff_table((j_common_ptr) cinfo);
-      jpeg_gen_optimal_table(cinfo, *htblptr, entropy->count_ptrs[tbl]);
-      did[tbl] = TRUE;
-    }
-  }
-}
-
-
-/*
- * Module initialization routine for progressive Huffman entropy encoding.
- */
-
-GLOBAL void
-jinit_phuff_encoder (j_compress_ptr cinfo)
-{
-  phuff_entropy_ptr entropy;
-  int i;
-
-  entropy = (phuff_entropy_ptr)
-    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
-				SIZEOF(phuff_entropy_encoder));
-  cinfo->entropy = (struct jpeg_entropy_encoder *) entropy;
-  entropy->pub.start_pass = start_pass_phuff;
-
-  /* Mark tables unallocated */
-  for (i = 0; i < NUM_HUFF_TBLS; i++) {
-    entropy->derived_tbls[i] = NULL;
-    entropy->count_ptrs[i] = NULL;
-  }
-  entropy->bit_buffer = NULL;	/* needed only in AC refinement scan */
-}
-
-#endif /* C_PROGRESSIVE_SUPPORTED */
diff -NEaurb neo/renderer/jpeg-6/jcprepct.c neo/renderer/jpeg-6/jcprepct.c
--- neo/renderer/jpeg-6/jcprepct.c	2011-12-26 04:15:38 +0000
+++ neo/renderer/jpeg-6/jcprepct.c	1970-01-01 00:00:00 +0000
@@ -1,371 +0,0 @@
-/*
- * jcprepct.c
- *
- * Copyright (C) 1994, Thomas G. Lane.
- * This file is part of the Independent JPEG Group's software.
- * For conditions of distribution and use, see the accompanying README file.
- *
- * This file contains the compression preprocessing controller.
- * This controller manages the color conversion, downsampling,
- * and edge expansion steps.
- *
- * Most of the complexity here is associated with buffering input rows
- * as required by the downsampler.  See the comments at the head of
- * jcsample.c for the downsampler's needs.
- */
-
-#define JPEG_INTERNALS
-#include "jinclude.h"
-#include "jpeglib.h"
-
-
-/* At present, jcsample.c can request context rows only for smoothing.
- * In the future, we might also need context rows for CCIR601 sampling
- * or other more-complex downsampling procedures.  The code to support
- * context rows should be compiled only if needed.
- */
-#ifdef INPUT_SMOOTHING_SUPPORTED
-#define CONTEXT_ROWS_SUPPORTED
-#endif
-
-
-/*
- * For the simple (no-context-row) case, we just need to buffer one
- * row group's worth of pixels for the downsampling step.  At the bottom of
- * the image, we pad to a full row group by replicating the last pixel row.
- * The downsampler's last output row is then replicated if needed to pad
- * out to a full iMCU row.
- *
- * When providing context rows, we must buffer three row groups' worth of
- * pixels.  Three row groups are physically allocated, but the row pointer
- * arrays are made five row groups high, with the extra pointers above and
- * below "wrapping around" to point to the last and first real row groups.
- * This allows the downsampler to access the proper context rows.
- * At the top and bottom of the image, we create dummy context rows by
- * copying the first or last real pixel row.  This copying could be avoided
- * by pointer hacking as is done in jdmainct.c, but it doesn't seem worth the
- * trouble on the compression side.
- */
-
-
-/* Private buffer controller object */
-
-typedef struct {
-  struct jpeg_c_prep_controller pub; /* public fields */
-
-  /* Downsampling input buffer.  This buffer holds color-converted data
-   * until we have enough to do a downsample step.
-   */
-  JSAMPARRAY color_buf[MAX_COMPONENTS];
-
-  JDIMENSION rows_to_go;	/* counts rows remaining in source image */
-  int next_buf_row;		/* index of next row to store in color_buf */
-
-#ifdef CONTEXT_ROWS_SUPPORTED	/* only needed for context case */
-  int this_row_group;		/* starting row index of group to process */
-  int next_buf_stop;		/* downsample when we reach this index */
-#endif
-} my_prep_controller;
-
-typedef my_prep_controller * my_prep_ptr;
-
-
-/*
- * Initialize for a processing pass.
- */
-
-METHODDEF void
-start_pass_prep (j_compress_ptr cinfo, J_BUF_MODE pass_mode)
-{
-  my_prep_ptr prep = (my_prep_ptr) cinfo->prep;
-
-  if (pass_mode != JBUF_PASS_THRU)
-    ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
-
-  /* Initialize total-height counter for detecting bottom of image */
-  prep->rows_to_go = cinfo->image_height;
-  /* Mark the conversion buffer empty */
-  prep->next_buf_row = 0;
-#ifdef CONTEXT_ROWS_SUPPORTED
-  /* Preset additional state variables for context mode.
-   * These aren't used in non-context mode, so we needn't test which mode.
-   */
-  prep->this_row_group = 0;
-  /* Set next_buf_stop to stop after two row groups have been read in. */
-  prep->next_buf_stop = 2 * cinfo->max_v_samp_factor;
-#endif
-}
-
-
-/*
- * Expand an image vertically from height input_rows to height output_rows,
- * by duplicating the bottom row.
- */
-
-LOCAL void
-expand_bottom_edge (JSAMPARRAY image_data, JDIMENSION num_cols,
-		    int input_rows, int output_rows)
-{
-  register int row;
-
-  for (row = input_rows; row < output_rows; row++) {
-    jcopy_sample_rows(image_data, input_rows-1, image_data, row,
-		      1, num_cols);
-  }
-}
-
-
-/*
- * Process some data in the simple no-context case.
- *
- * Preprocessor output data is counted in "row groups".  A row group
- * is defined to be v_samp_factor sample rows of each component.
- * Downsampling will produce this much data from each max_v_samp_factor
- * input rows.
- */
-
-METHODDEF void
-pre_process_data (j_compress_ptr cinfo,
-		  JSAMPARRAY input_buf, JDIMENSION *in_row_ctr,
-		  JDIMENSION in_rows_avail,
-		  JSAMPIMAGE output_buf, JDIMENSION *out_row_group_ctr,
-		  JDIMENSION out_row_groups_avail)
-{
-  my_prep_ptr prep = (my_prep_ptr) cinfo->prep;
-  int numrows, ci;
-  JDIMENSION inrows;
-  jpeg_component_info * compptr;
-
-  while (*in_row_ctr < in_rows_avail &&
-	 *out_row_group_ctr < out_row_groups_avail) {
-    /* Do color conversion to fill the conversion buffer. */
-    inrows = in_rows_avail - *in_row_ctr;
-    numrows = cinfo->max_v_samp_factor - prep->next_buf_row;
-    numrows = (int) MIN((JDIMENSION) numrows, inrows);
-    (*cinfo->cconvert->color_convert) (cinfo, input_buf + *in_row_ctr,
-				       prep->color_buf,
-				       (JDIMENSION) prep->next_buf_row,
-				       numrows);
-    *in_row_ctr += numrows;
-    prep->next_buf_row += numrows;
-    prep->rows_to_go -= numrows;
-    /* If at bottom of image, pad to fill the conversion buffer. */
-    if (prep->rows_to_go == 0 &&
-	prep->next_buf_row < cinfo->max_v_samp_factor) {
-      for (ci = 0; ci < cinfo->num_components; ci++) {
-	expand_bottom_edge(prep->color_buf[ci], cinfo->image_width,
-			   prep->next_buf_row, cinfo->max_v_samp_factor);
-      }
-      prep->next_buf_row = cinfo->max_v_samp_factor;
-    }
-    /* If we've filled the conversion buffer, empty it. */
-    if (prep->next_buf_row == cinfo->max_v_samp_factor) {
-      (*cinfo->downsample->downsample) (cinfo,
-					prep->color_buf, (JDIMENSION) 0,
-					output_buf, *out_row_group_ctr);
-      prep->next_buf_row = 0;
-      (*out_row_group_ctr)++;
-    }
-    /* If at bottom of image, pad the output to a full iMCU height.
-     * Note we assume the caller is providing a one-iMCU-height output buffer!
-     */
-    if (prep->rows_to_go == 0 &&
-	*out_row_group_ctr < out_row_groups_avail) {
-      for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
-	   ci++, compptr++) {
-	expand_bottom_edge(output_buf[ci],
-			   compptr->width_in_blocks * DCTSIZE,
-			   (int) (*out_row_group_ctr * compptr->v_samp_factor),
-			   (int) (out_row_groups_avail * compptr->v_samp_factor));
-      }
-      *out_row_group_ctr = out_row_groups_avail;
-      break;			/* can exit outer loop without test */
-    }
-  }
-}
-
-
-#ifdef CONTEXT_ROWS_SUPPORTED
-
-/*
- * Process some data in the context case.
- */
-
-METHODDEF void
-pre_process_context (j_compress_ptr cinfo,
-		     JSAMPARRAY input_buf, JDIMENSION *in_row_ctr,
-		     JDIMENSION in_rows_avail,
-		     JSAMPIMAGE output_buf, JDIMENSION *out_row_group_ctr,
-		     JDIMENSION out_row_groups_avail)
-{
-  my_prep_ptr prep = (my_prep_ptr) cinfo->prep;
-  int numrows, ci;
-  int buf_height = cinfo->max_v_samp_factor * 3;
-  JDIMENSION inrows;
-  jpeg_component_info * compptr;
-
-  while (*out_row_group_ctr < out_row_groups_avail) {
-    if (*in_row_ctr < in_rows_avail) {
-      /* Do color conversion to fill the conversion buffer. */
-      inrows = in_rows_avail - *in_row_ctr;
-      numrows = prep->next_buf_stop - prep->next_buf_row;
-      numrows = (int) MIN((JDIMENSION) numrows, inrows);
-      (*cinfo->cconvert->color_convert) (cinfo, input_buf + *in_row_ctr,
-					 prep->color_buf,
-					 (JDIMENSION) prep->next_buf_row,
-					 numrows);
-      /* Pad at top of image, if first time through */
-      if (prep->rows_to_go == cinfo->image_height) {
-	for (ci = 0; ci < cinfo->num_components; ci++) {
-	  int row;
-	  for (row = 1; row <= cinfo->max_v_samp_factor; row++) {
-	    jcopy_sample_rows(prep->color_buf[ci], 0,
-			      prep->color_buf[ci], -row,
-			      1, cinfo->image_width);
-	  }
-	}
-      }
-      *in_row_ctr += numrows;
-      prep->next_buf_row += numrows;
-      prep->rows_to_go -= numrows;
-    } else {
-      /* Return for more data, unless we are at the bottom of the image. */
-      if (prep->rows_to_go != 0)
-	break;
-    }
-    /* If at bottom of image, pad to fill the conversion buffer. */
-    if (prep->rows_to_go == 0 &&
-	prep->next_buf_row < prep->next_buf_stop) {
-      for (ci = 0; ci < cinfo->num_components; ci++) {
-	expand_bottom_edge(prep->color_buf[ci], cinfo->image_width,
-			   prep->next_buf_row, prep->next_buf_stop);
-      }
-      prep->next_buf_row = prep->next_buf_stop;
-    }
-    /* If we've gotten enough data, downsample a row group. */
-    if (prep->next_buf_row == prep->next_buf_stop) {
-      (*cinfo->downsample->downsample) (cinfo,
-					prep->color_buf,
-					(JDIMENSION) prep->this_row_group,
-					output_buf, *out_row_group_ctr);
-      (*out_row_group_ctr)++;
-      /* Advance pointers with wraparound as necessary. */
-      prep->this_row_group += cinfo->max_v_samp_factor;
-      if (prep->this_row_group >= buf_height)
-	prep->this_row_group = 0;
-      if (prep->next_buf_row >= buf_height)
-	prep->next_buf_row = 0;
-      prep->next_buf_stop = prep->next_buf_row + cinfo->max_v_samp_factor;
-    }
-    /* If at bottom of image, pad the output to a full iMCU height.
-     * Note we assume the caller is providing a one-iMCU-height output buffer!
-     */
-    if (prep->rows_to_go == 0 &&
-	*out_row_group_ctr < out_row_groups_avail) {
-      for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
-	   ci++, compptr++) {
-	expand_bottom_edge(output_buf[ci],
-			   compptr->width_in_blocks * DCTSIZE,
-			   (int) (*out_row_group_ctr * compptr->v_samp_factor),
-			   (int) (out_row_groups_avail * compptr->v_samp_factor));
-      }
-      *out_row_group_ctr = out_row_groups_avail;
-      break;			/* can exit outer loop without test */
-    }
-  }
-}
-
-
-/*
- * Create the wrapped-around downsampling input buffer needed for context mode.
- */
-
-LOCAL void
-create_context_buffer (j_compress_ptr cinfo)
-{
-  my_prep_ptr prep = (my_prep_ptr) cinfo->prep;
-  int rgroup_height = cinfo->max_v_samp_factor;
-  int ci, i;
-  jpeg_component_info * compptr;
-  JSAMPARRAY true_buffer, fake_buffer;
-
-  /* Grab enough space for fake row pointers for all the components;
-   * we need five row groups' worth of pointers for each component.
-   */
-  fake_buffer = (JSAMPARRAY)
-    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
-				(cinfo->num_components * 5 * rgroup_height) *
-				SIZEOF(JSAMPROW));
-
-  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
-       ci++, compptr++) {
-    /* Allocate the actual buffer space (3 row groups) for this component.
-     * We make the buffer wide enough to allow the downsampler to edge-expand
-     * horizontally within the buffer, if it so chooses.
-     */
-    true_buffer = (*cinfo->mem->alloc_sarray)
-      ((j_common_ptr) cinfo, JPOOL_IMAGE,
-       (JDIMENSION) (((long) compptr->width_in_blocks * DCTSIZE *
-		      cinfo->max_h_samp_factor) / compptr->h_samp_factor),
-       (JDIMENSION) (3 * rgroup_height));
-    /* Copy true buffer row pointers into the middle of the fake row array */
-    MEMCOPY(fake_buffer + rgroup_height, true_buffer,
-	    3 * rgroup_height * SIZEOF(JSAMPROW));
-    /* Fill in the above and below wraparound pointers */
-    for (i = 0; i < rgroup_height; i++) {
-      fake_buffer[i] = true_buffer[2 * rgroup_height + i];
-      fake_buffer[4 * rgroup_height + i] = true_buffer[i];
-    }
-    prep->color_buf[ci] = fake_buffer + rgroup_height;
-    fake_buffer += 5 * rgroup_height; /* point to space for next component */
-  }
-}
-
-#endif /* CONTEXT_ROWS_SUPPORTED */
-
-
-/*
- * Initialize preprocessing controller.
- */
-
-GLOBAL void
-jinit_c_prep_controller (j_compress_ptr cinfo, boolean need_full_buffer)
-{
-  my_prep_ptr prep;
-  int ci;
-  jpeg_component_info * compptr;
-
-  if (need_full_buffer)		/* safety check */
-    ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
-
-  prep = (my_prep_ptr)
-    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
-				SIZEOF(my_prep_controller));
-  cinfo->prep = (struct jpeg_c_prep_controller *) prep;
-  prep->pub.start_pass = start_pass_prep;
-
-  /* Allocate the color conversion buffer.
-   * We make the buffer wide enough to allow the downsampler to edge-expand
-   * horizontally within the buffer, if it so chooses.
-   */
-  if (cinfo->downsample->need_context_rows) {
-    /* Set up to provide context rows */
-#ifdef CONTEXT_ROWS_SUPPORTED
-    prep->pub.pre_process_data = pre_process_context;
-    create_context_buffer(cinfo);
-#else
-    ERREXIT(cinfo, JERR_NOT_COMPILED);
-#endif
-  } else {
-    /* No context, just make it tall enough for one row group */
-    prep->pub.pre_process_data = pre_process_data;
-    for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
-	 ci++, compptr++) {
-      prep->color_buf[ci] = (*cinfo->mem->alloc_sarray)
-	((j_common_ptr) cinfo, JPOOL_IMAGE,
-	 (JDIMENSION) (((long) compptr->width_in_blocks * DCTSIZE *
-			cinfo->max_h_samp_factor) / compptr->h_samp_factor),
-	 (JDIMENSION) cinfo->max_v_samp_factor);
-    }
-  }
-}
diff -NEaurb neo/renderer/jpeg-6/jcsample.c neo/renderer/jpeg-6/jcsample.c
--- neo/renderer/jpeg-6/jcsample.c	2011-12-26 04:15:38 +0000
+++ neo/renderer/jpeg-6/jcsample.c	1970-01-01 00:00:00 +0000
@@ -1,519 +0,0 @@
-/*
- * jcsample.c
- *
- * Copyright (C) 1991-1994, Thomas G. Lane.
- * This file is part of the Independent JPEG Group's software.
- * For conditions of distribution and use, see the accompanying README file.
- *
- * This file contains downsampling routines.
- *
- * Downsampling input data is counted in "row groups".  A row group
- * is defined to be max_v_samp_factor pixel rows of each component,
- * from which the downsampler produces v_samp_factor sample rows.
- * A single row group is processed in each call to the downsampler module.
- *
- * The downsampler is responsible for edge-expansion of its output data
- * to fill an integral number of DCT blocks horizontally.  The source buffer
- * may be modified if it is helpful for this purpose (the source buffer is
- * allocated wide enough to correspond to the desired output width).
- * The caller (the prep controller) is responsible for vertical padding.
- *
- * The downsampler may request "context rows" by setting need_context_rows
- * during startup.  In this case, the input arrays will contain at least
- * one row group's worth of pixels above and below the passed-in data;
- * the caller will create dummy rows at image top and bottom by replicating
- * the first or last real pixel row.
- *
- * An excellent reference for image resampling is
- *   Digital Image Warping, George Wolberg, 1990.
- *   Pub. by IEEE Computer Society Press, Los Alamitos, CA. ISBN 0-8186-8944-7.
- *
- * The downsampling algorithm used here is a simple average of the source
- * pixels covered by the output pixel.  The hi-falutin sampling literature
- * refers to this as a "box filter".  In general the characteristics of a box
- * filter are not very good, but for the specific cases we normally use (1:1
- * and 2:1 ratios) the box is equivalent to a "triangle filter" which is not
- * nearly so bad.  If you intend to use other sampling ratios, you'd be well
- * advised to improve this code.
- *
- * A simple input-smoothing capability is provided.  This is mainly intended
- * for cleaning up color-dithered GIF input files (if you find it inadequate,
- * we suggest using an external filtering program such as pnmconvol).  When
- * enabled, each input pixel P is replaced by a weighted sum of itself and its
- * eight neighbors.  P's weight is 1-8*SF and each neighbor's weight is SF,
- * where SF = (smoothing_factor / 1024).
- * Currently, smoothing is only supported for 2h2v sampling factors.
- */
-
-#define JPEG_INTERNALS
-#include "jinclude.h"
-#include "jpeglib.h"
-
-
-/* Pointer to routine to downsample a single component */
-typedef JMETHOD(void, downsample1_ptr,
-		(j_compress_ptr cinfo, jpeg_component_info * compptr,
-		 JSAMPARRAY input_data, JSAMPARRAY output_data));
-
-/* Private subobject */
-
-typedef struct {
-  struct jpeg_downsampler pub;	/* public fields */
-
-  /* Downsampling method pointers, one per component */
-  downsample1_ptr methods[MAX_COMPONENTS];
-} my_downsampler;
-
-typedef my_downsampler * my_downsample_ptr;
-
-
-/*
- * Initialize for a downsampling pass.
- */
-
-METHODDEF void
-start_pass_downsample (j_compress_ptr cinfo)
-{
-  /* no work for now */
-}
-
-
-/*
- * Expand a component horizontally from width input_cols to width output_cols,
- * by duplicating the rightmost samples.
- */
-
-LOCAL void
-expand_right_edge (JSAMPARRAY image_data, int num_rows,
-		   JDIMENSION input_cols, JDIMENSION output_cols)
-{
-  register JSAMPROW ptr;
-  register JSAMPLE pixval;
-  register int count;
-  int row;
-  int numcols = (int) (output_cols - input_cols);
-
-  if (numcols > 0) {
-    for (row = 0; row < num_rows; row++) {
-      ptr = image_data[row] + input_cols;
-      pixval = ptr[-1];		/* don't need GETJSAMPLE() here */
-      for (count = numcols; count > 0; count--)
-	*ptr++ = pixval;
-    }
-  }
-}
-
-
-/*
- * Do downsampling for a whole row group (all components).
- *
- * In this version we simply downsample each component independently.
- */
-
-METHODDEF void
-sep_downsample (j_compress_ptr cinfo,
-		JSAMPIMAGE input_buf, JDIMENSION in_row_index,
-		JSAMPIMAGE output_buf, JDIMENSION out_row_group_index)
-{
-  my_downsample_ptr downsample = (my_downsample_ptr) cinfo->downsample;
-  int ci;
-  jpeg_component_info * compptr;
-  JSAMPARRAY in_ptr, out_ptr;
-
-  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
-       ci++, compptr++) {
-    in_ptr = input_buf[ci] + in_row_index;
-    out_ptr = output_buf[ci] + (out_row_group_index * compptr->v_samp_factor);
-    (*downsample->methods[ci]) (cinfo, compptr, in_ptr, out_ptr);
-  }
-}
-
-
-/*
- * Downsample pixel values of a single component.
- * One row group is processed per call.
- * This version handles arbitrary integral sampling ratios, without smoothing.
- * Note that this version is not actually used for customary sampling ratios.
- */
-
-METHODDEF void
-int_downsample (j_compress_ptr cinfo, jpeg_component_info * compptr,
-		JSAMPARRAY input_data, JSAMPARRAY output_data)
-{
-  int inrow, outrow, h_expand, v_expand, numpix, numpix2, h, v;
-  JDIMENSION outcol, outcol_h;	/* outcol_h == outcol*h_expand */
-  JDIMENSION output_cols = compptr->width_in_blocks * DCTSIZE;
-  JSAMPROW inptr, outptr;
-  INT32 outvalue;
-
-  h_expand = cinfo->max_h_samp_factor / compptr->h_samp_factor;
-  v_expand = cinfo->max_v_samp_factor / compptr->v_samp_factor;
-  numpix = h_expand * v_expand;
-  numpix2 = numpix/2;
-
-  /* Expand input data enough to let all the output samples be generated
-   * by the standard loop.  Special-casing padded output would be more
-   * efficient.
-   */
-  expand_right_edge(input_data, cinfo->max_v_samp_factor,
-		    cinfo->image_width, output_cols * h_expand);
-
-  inrow = 0;
-  for (outrow = 0; outrow < compptr->v_samp_factor; outrow++) {
-    outptr = output_data[outrow];
-    for (outcol = 0, outcol_h = 0; outcol < output_cols;
-	 outcol++, outcol_h += h_expand) {
-      outvalue = 0;
-      for (v = 0; v < v_expand; v++) {
-	inptr = input_data[inrow+v] + outcol_h;
-	for (h = 0; h < h_expand; h++) {
-	  outvalue += (INT32) GETJSAMPLE(*inptr++);
-	}
-      }
-      *outptr++ = (JSAMPLE) ((outvalue + numpix2) / numpix);
-    }
-    inrow += v_expand;
-  }
-}
-
-
-/*
- * Downsample pixel values of a single component.
- * This version handles the special case of a full-size component,
- * without smoothing.
- */
-
-METHODDEF void
-fullsize_downsample (j_compress_ptr cinfo, jpeg_component_info * compptr,
-		     JSAMPARRAY input_data, JSAMPARRAY output_data)
-{
-  /* Copy the data */
-  jcopy_sample_rows(input_data, 0, output_data, 0,
-		    cinfo->max_v_samp_factor, cinfo->image_width);
-  /* Edge-expand */
-  expand_right_edge(output_data, cinfo->max_v_samp_factor,
-		    cinfo->image_width, compptr->width_in_blocks * DCTSIZE);
-}
-
-
-/*
- * Downsample pixel values of a single component.
- * This version handles the common case of 2:1 horizontal and 1:1 vertical,
- * without smoothing.
- *
- * A note about the "bias" calculations: when rounding fractional values to
- * integer, we do not want to always round 0.5 up to the next integer.
- * If we did that, we'd introduce a noticeable bias towards larger values.
- * Instead, this code is arranged so that 0.5 will be rounded up or down at
- * alternate pixel locations (a simple ordered dither pattern).
- */
-
-METHODDEF void
-h2v1_downsample (j_compress_ptr cinfo, jpeg_component_info * compptr,
-		 JSAMPARRAY input_data, JSAMPARRAY output_data)
-{
-  int outrow;
-  JDIMENSION outcol;
-  JDIMENSION output_cols = compptr->width_in_blocks * DCTSIZE;
-  register JSAMPROW inptr, outptr;
-  register int bias;
-
-  /* Expand input data enough to let all the output samples be generated
-   * by the standard loop.  Special-casing padded output would be more
-   * efficient.
-   */
-  expand_right_edge(input_data, cinfo->max_v_samp_factor,
-		    cinfo->image_width, output_cols * 2);
-
-  for (outrow = 0; outrow < compptr->v_samp_factor; outrow++) {
-    outptr = output_data[outrow];
-    inptr = input_data[outrow];
-    bias = 0;			/* bias = 0,1,0,1,... for successive samples */
-    for (outcol = 0; outcol < output_cols; outcol++) {
-      *outptr++ = (JSAMPLE) ((GETJSAMPLE(*inptr) + GETJSAMPLE(inptr[1])
-			      + bias) >> 1);
-      bias ^= 1;		/* 0=>1, 1=>0 */
-      inptr += 2;
-    }
-  }
-}
-
-
-/*
- * Downsample pixel values of a single component.
- * This version handles the standard case of 2:1 horizontal and 2:1 vertical,
- * without smoothing.
- */
-
-METHODDEF void
-h2v2_downsample (j_compress_ptr cinfo, jpeg_component_info * compptr,
-		 JSAMPARRAY input_data, JSAMPARRAY output_data)
-{
-  int inrow, outrow;
-  JDIMENSION outcol;
-  JDIMENSION output_cols = compptr->width_in_blocks * DCTSIZE;
-  register JSAMPROW inptr0, inptr1, outptr;
-  register int bias;
-
-  /* Expand input data enough to let all the output samples be generated
-   * by the standard loop.  Special-casing padded output would be more
-   * efficient.
-   */
-  expand_right_edge(input_data, cinfo->max_v_samp_factor,
-		    cinfo->image_width, output_cols * 2);
-
-  inrow = 0;
-  for (outrow = 0; outrow < compptr->v_samp_factor; outrow++) {
-    outptr = output_data[outrow];
-    inptr0 = input_data[inrow];
-    inptr1 = input_data[inrow+1];
-    bias = 1;			/* bias = 1,2,1,2,... for successive samples */
-    for (outcol = 0; outcol < output_cols; outcol++) {
-      *outptr++ = (JSAMPLE) ((GETJSAMPLE(*inptr0) + GETJSAMPLE(inptr0[1]) +
-			      GETJSAMPLE(*inptr1) + GETJSAMPLE(inptr1[1])
-			      + bias) >> 2);
-      bias ^= 3;		/* 1=>2, 2=>1 */
-      inptr0 += 2; inptr1 += 2;
-    }
-    inrow += 2;
-  }
-}
-
-
-#ifdef INPUT_SMOOTHING_SUPPORTED
-
-/*
- * Downsample pixel values of a single component.
- * This version handles the standard case of 2:1 horizontal and 2:1 vertical,
- * with smoothing.  One row of context is required.
- */
-
-METHODDEF void
-h2v2_smooth_downsample (j_compress_ptr cinfo, jpeg_component_info * compptr,
-			JSAMPARRAY input_data, JSAMPARRAY output_data)
-{
-  int inrow, outrow;
-  JDIMENSION colctr;
-  JDIMENSION output_cols = compptr->width_in_blocks * DCTSIZE;
-  register JSAMPROW inptr0, inptr1, above_ptr, below_ptr, outptr;
-  INT32 membersum, neighsum, memberscale, neighscale;
-
-  /* Expand input data enough to let all the output samples be generated
-   * by the standard loop.  Special-casing padded output would be more
-   * efficient.
-   */
-  expand_right_edge(input_data - 1, cinfo->max_v_samp_factor + 2,
-		    cinfo->image_width, output_cols * 2);
-
-  /* We don't bother to form the individual "smoothed" input pixel values;
-   * we can directly compute the output which is the average of the four
-   * smoothed values.  Each of the four member pixels contributes a fraction
-   * (1-8*SF) to its own smoothed image and a fraction SF to each of the three
-   * other smoothed pixels, therefore a total fraction (1-5*SF)/4 to the final
-   * output.  The four corner-adjacent neighbor pixels contribute a fraction
-   * SF to just one smoothed pixel, or SF/4 to the final output; while the
-   * eight edge-adjacent neighbors contribute SF to each of two smoothed
-   * pixels, or SF/2 overall.  In order to use integer arithmetic, these
-   * factors are scaled by 2^16 = 65536.
-   * Also recall that SF = smoothing_factor / 1024.
-   */
-
-  memberscale = 16384 - cinfo->smoothing_factor * 80; /* scaled (1-5*SF)/4 */
-  neighscale = cinfo->smoothing_factor * 16; /* scaled SF/4 */
-
-  inrow = 0;
-  for (outrow = 0; outrow < compptr->v_samp_factor; outrow++) {
-    outptr = output_data[outrow];
-    inptr0 = input_data[inrow];
-    inptr1 = input_data[inrow+1];
-    above_ptr = input_data[inrow-1];
-    below_ptr = input_data[inrow+2];
-
-    /* Special case for first column: pretend column -1 is same as column 0 */
-    membersum = GETJSAMPLE(*inptr0) + GETJSAMPLE(inptr0[1]) +
-		GETJSAMPLE(*inptr1) + GETJSAMPLE(inptr1[1]);
-    neighsum = GETJSAMPLE(*above_ptr) + GETJSAMPLE(above_ptr[1]) +
-	       GETJSAMPLE(*below_ptr) + GETJSAMPLE(below_ptr[1]) +
-	       GETJSAMPLE(*inptr0) + GETJSAMPLE(inptr0[2]) +
-	       GETJSAMPLE(*inptr1) + GETJSAMPLE(inptr1[2]);
-    neighsum += neighsum;
-    neighsum += GETJSAMPLE(*above_ptr) + GETJSAMPLE(above_ptr[2]) +
-		GETJSAMPLE(*below_ptr) + GETJSAMPLE(below_ptr[2]);
-    membersum = membersum * memberscale + neighsum * neighscale;
-    *outptr++ = (JSAMPLE) ((membersum + 32768) >> 16);
-    inptr0 += 2; inptr1 += 2; above_ptr += 2; below_ptr += 2;
-
-    for (colctr = output_cols - 2; colctr > 0; colctr--) {
-      /* sum of pixels directly mapped to this output element */
-      membersum = GETJSAMPLE(*inptr0) + GETJSAMPLE(inptr0[1]) +
-		  GETJSAMPLE(*inptr1) + GETJSAMPLE(inptr1[1]);
-      /* sum of edge-neighbor pixels */
-      neighsum = GETJSAMPLE(*above_ptr) + GETJSAMPLE(above_ptr[1]) +
-		 GETJSAMPLE(*below_ptr) + GETJSAMPLE(below_ptr[1]) +
-		 GETJSAMPLE(inptr0[-1]) + GETJSAMPLE(inptr0[2]) +
-		 GETJSAMPLE(inptr1[-1]) + GETJSAMPLE(inptr1[2]);
-      /* The edge-neighbors count twice as much as corner-neighbors */
-      neighsum += neighsum;
-      /* Add in the corner-neighbors */
-      neighsum += GETJSAMPLE(above_ptr[-1]) + GETJSAMPLE(above_ptr[2]) +
-		  GETJSAMPLE(below_ptr[-1]) + GETJSAMPLE(below_ptr[2]);
-      /* form final output scaled up by 2^16 */
-      membersum = membersum * memberscale + neighsum * neighscale;
-      /* round, descale and output it */
-      *outptr++ = (JSAMPLE) ((membersum + 32768) >> 16);
-      inptr0 += 2; inptr1 += 2; above_ptr += 2; below_ptr += 2;
-    }
-
-    /* Special case for last column */
-    membersum = GETJSAMPLE(*inptr0) + GETJSAMPLE(inptr0[1]) +
-		GETJSAMPLE(*inptr1) + GETJSAMPLE(inptr1[1]);
-    neighsum = GETJSAMPLE(*above_ptr) + GETJSAMPLE(above_ptr[1]) +
-	       GETJSAMPLE(*below_ptr) + GETJSAMPLE(below_ptr[1]) +
-	       GETJSAMPLE(inptr0[-1]) + GETJSAMPLE(inptr0[1]) +
-	       GETJSAMPLE(inptr1[-1]) + GETJSAMPLE(inptr1[1]);
-    neighsum += neighsum;
-    neighsum += GETJSAMPLE(above_ptr[-1]) + GETJSAMPLE(above_ptr[1]) +
-		GETJSAMPLE(below_ptr[-1]) + GETJSAMPLE(below_ptr[1]);
-    membersum = membersum * memberscale + neighsum * neighscale;
-    *outptr = (JSAMPLE) ((membersum + 32768) >> 16);
-
-    inrow += 2;
-  }
-}
-
-
-/*
- * Downsample pixel values of a single component.
- * This version handles the special case of a full-size component,
- * with smoothing.  One row of context is required.
- */
-
-METHODDEF void
-fullsize_smooth_downsample (j_compress_ptr cinfo, jpeg_component_info *compptr,
-			    JSAMPARRAY input_data, JSAMPARRAY output_data)
-{
-  int outrow;
-  JDIMENSION colctr;
-  JDIMENSION output_cols = compptr->width_in_blocks * DCTSIZE;
-  register JSAMPROW inptr, above_ptr, below_ptr, outptr;
-  INT32 membersum, neighsum, memberscale, neighscale;
-  int colsum, lastcolsum, nextcolsum;
-
-  /* Expand input data enough to let all the output samples be generated
-   * by the standard loop.  Special-casing padded output would be more
-   * efficient.
-   */
-  expand_right_edge(input_data - 1, cinfo->max_v_samp_factor + 2,
-		    cinfo->image_width, output_cols);
-
-  /* Each of the eight neighbor pixels contributes a fraction SF to the
-   * smoothed pixel, while the main pixel contributes (1-8*SF).  In order
-   * to use integer arithmetic, these factors are multiplied by 2^16 = 65536.
-   * Also recall that SF = smoothing_factor / 1024.
-   */
-
-  memberscale = 65536L - cinfo->smoothing_factor * 512L; /* scaled 1-8*SF */
-  neighscale = cinfo->smoothing_factor * 64; /* scaled SF */
-
-  for (outrow = 0; outrow < compptr->v_samp_factor; outrow++) {
-    outptr = output_data[outrow];
-    inptr = input_data[outrow];
-    above_ptr = input_data[outrow-1];
-    below_ptr = input_data[outrow+1];
-
-    /* Special case for first column */
-    colsum = GETJSAMPLE(*above_ptr++) + GETJSAMPLE(*below_ptr++) +
-	     GETJSAMPLE(*inptr);
-    membersum = GETJSAMPLE(*inptr++);
-    nextcolsum = GETJSAMPLE(*above_ptr) + GETJSAMPLE(*below_ptr) +
-		 GETJSAMPLE(*inptr);
-    neighsum = colsum + (colsum - membersum) + nextcolsum;
-    membersum = membersum * memberscale + neighsum * neighscale;
-    *outptr++ = (JSAMPLE) ((membersum + 32768) >> 16);
-    lastcolsum = colsum; colsum = nextcolsum;
-
-    for (colctr = output_cols - 2; colctr > 0; colctr--) {
-      membersum = GETJSAMPLE(*inptr++);
-      above_ptr++; below_ptr++;
-      nextcolsum = GETJSAMPLE(*above_ptr) + GETJSAMPLE(*below_ptr) +
-		   GETJSAMPLE(*inptr);
-      neighsum = lastcolsum + (colsum - membersum) + nextcolsum;
-      membersum = membersum * memberscale + neighsum * neighscale;
-      *outptr++ = (JSAMPLE) ((membersum + 32768) >> 16);
-      lastcolsum = colsum; colsum = nextcolsum;
-    }
-
-    /* Special case for last column */
-    membersum = GETJSAMPLE(*inptr);
-    neighsum = lastcolsum + (colsum - membersum) + colsum;
-    membersum = membersum * memberscale + neighsum * neighscale;
-    *outptr = (JSAMPLE) ((membersum + 32768) >> 16);
-
-  }
-}
-
-#endif /* INPUT_SMOOTHING_SUPPORTED */
-
-
-/*
- * Module initialization routine for downsampling.
- * Note that we must select a routine for each component.
- */
-
-GLOBAL void
-jinit_downsampler (j_compress_ptr cinfo)
-{
-  my_downsample_ptr downsample;
-  int ci;
-  jpeg_component_info * compptr;
-  boolean smoothok = TRUE;
-
-  downsample = (my_downsample_ptr)
-    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
-				SIZEOF(my_downsampler));
-  cinfo->downsample = (struct jpeg_downsampler *) downsample;
-  downsample->pub.start_pass = start_pass_downsample;
-  downsample->pub.downsample = sep_downsample;
-  downsample->pub.need_context_rows = FALSE;
-
-  if (cinfo->CCIR601_sampling)
-    ERREXIT(cinfo, JERR_CCIR601_NOTIMPL);
-
-  /* Verify we can handle the sampling factors, and set up method pointers */
-  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
-       ci++, compptr++) {
-    if (compptr->h_samp_factor == cinfo->max_h_samp_factor &&
-	compptr->v_samp_factor == cinfo->max_v_samp_factor) {
-#ifdef INPUT_SMOOTHING_SUPPORTED
-      if (cinfo->smoothing_factor) {
-	downsample->methods[ci] = fullsize_smooth_downsample;
-	downsample->pub.need_context_rows = TRUE;
-      } else
-#endif
-	downsample->methods[ci] = fullsize_downsample;
-    } else if (compptr->h_samp_factor * 2 == cinfo->max_h_samp_factor &&
-	       compptr->v_samp_factor == cinfo->max_v_samp_factor) {
-      smoothok = FALSE;
-      downsample->methods[ci] = h2v1_downsample;
-    } else if (compptr->h_samp_factor * 2 == cinfo->max_h_samp_factor &&
-	       compptr->v_samp_factor * 2 == cinfo->max_v_samp_factor) {
-#ifdef INPUT_SMOOTHING_SUPPORTED
-      if (cinfo->smoothing_factor) {
-	downsample->methods[ci] = h2v2_smooth_downsample;
-	downsample->pub.need_context_rows = TRUE;
-      } else
-#endif
-	downsample->methods[ci] = h2v2_downsample;
-    } else if ((cinfo->max_h_samp_factor % compptr->h_samp_factor) == 0 &&
-	       (cinfo->max_v_samp_factor % compptr->v_samp_factor) == 0) {
-      smoothok = FALSE;
-      downsample->methods[ci] = int_downsample;
-    } else
-      ERREXIT(cinfo, JERR_FRACT_SAMPLE_NOTIMPL);
-  }
-
-#ifdef INPUT_SMOOTHING_SUPPORTED
-  if (cinfo->smoothing_factor && !smoothok)
-    TRACEMS(cinfo, 0, JTRC_SMOOTH_NOTIMPL);
-#endif
-}
diff -NEaurb neo/renderer/jpeg-6/jctrans.c neo/renderer/jpeg-6/jctrans.c
--- neo/renderer/jpeg-6/jctrans.c	2011-12-26 04:15:38 +0000
+++ neo/renderer/jpeg-6/jctrans.c	1970-01-01 00:00:00 +0000
@@ -1,371 +0,0 @@
-/*
- * jctrans.c
- *
- * Copyright (C) 1995, Thomas G. Lane.
- * This file is part of the Independent JPEG Group's software.
- * For conditions of distribution and use, see the accompanying README file.
- *
- * This file contains library routines for transcoding compression,
- * that is, writing raw DCT coefficient arrays to an output JPEG file.
- * The routines in jcapimin.c will also be needed by a transcoder.
- */
-
-#define JPEG_INTERNALS
-#include "jinclude.h"
-#include "jpeglib.h"
-
-
-/* Forward declarations */
-LOCAL void transencode_master_selection
-	JPP((j_compress_ptr cinfo, jvirt_barray_ptr * coef_arrays));
-LOCAL void transencode_coef_controller
-	JPP((j_compress_ptr cinfo, jvirt_barray_ptr * coef_arrays));
-
-
-/*
- * Compression initialization for writing raw-coefficient data.
- * Before calling this, all parameters and a data destination must be set up.
- * Call jpeg_finish_compress() to actually write the data.
- *
- * The number of passed virtual arrays must match cinfo->num_components.
- * Note that the virtual arrays need not be filled or even realized at
- * the time write_coefficients is called; indeed, if the virtual arrays
- * were requested from this compression object's memory manager, they
- * typically will be realized during this routine and filled afterwards.
- */
-
-GLOBAL void
-jpeg_write_coefficients (j_compress_ptr cinfo, jvirt_barray_ptr * coef_arrays)
-{
-  if (cinfo->global_state != CSTATE_START)
-    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
-  /* Mark all tables to be written */
-  jpeg_suppress_tables(cinfo, FALSE);
-  /* (Re)initialize error mgr and destination modules */
-  (*cinfo->err->reset_error_mgr) ((j_common_ptr) cinfo);
-  (*cinfo->dest->init_destination) (cinfo);
-  /* Perform master selection of active modules */
-  transencode_master_selection(cinfo, coef_arrays);
-  /* Wait for jpeg_finish_compress() call */
-  cinfo->next_scanline = 0;	/* so jpeg_write_marker works */
-  cinfo->global_state = CSTATE_WRCOEFS;
-}
-
-
-/*
- * Initialize the compression object with default parameters,
- * then copy from the source object all parameters needed for lossless
- * transcoding.  Parameters that can be varied without loss (such as
- * scan script and Huffman optimization) are left in their default states.
- */
-
-GLOBAL void
-jpeg_copy_critical_parameters (j_decompress_ptr srcinfo,
-			       j_compress_ptr dstinfo)
-{
-  JQUANT_TBL ** qtblptr;
-  jpeg_component_info *incomp, *outcomp;
-  JQUANT_TBL *c_quant, *slot_quant;
-  int tblno, ci, coefi;
-
-  /* Safety check to ensure start_compress not called yet. */
-  if (dstinfo->global_state != CSTATE_START)
-    ERREXIT1(dstinfo, JERR_BAD_STATE, dstinfo->global_state);
-  /* Copy fundamental image dimensions */
-  dstinfo->image_width = srcinfo->image_width;
-  dstinfo->image_height = srcinfo->image_height;
-  dstinfo->input_components = srcinfo->num_components;
-  dstinfo->in_color_space = srcinfo->jpeg_color_space;
-  /* Initialize all parameters to default values */
-  jpeg_set_defaults(dstinfo);
-  /* jpeg_set_defaults may choose wrong colorspace, eg YCbCr if input is RGB.
-   * Fix it to get the right header markers for the image colorspace.
-   */
-  jpeg_set_colorspace(dstinfo, srcinfo->jpeg_color_space);
-  dstinfo->data_precision = srcinfo->data_precision;
-  dstinfo->CCIR601_sampling = srcinfo->CCIR601_sampling;
-  /* Copy the source's quantization tables. */
-  for (tblno = 0; tblno < NUM_QUANT_TBLS; tblno++) {
-    if (srcinfo->quant_tbl_ptrs[tblno] != NULL) {
-      qtblptr = & dstinfo->quant_tbl_ptrs[tblno];
-      if (*qtblptr == NULL)
-	*qtblptr = jpeg_alloc_quant_table((j_common_ptr) dstinfo);
-      MEMCOPY((*qtblptr)->quantval,
-	      srcinfo->quant_tbl_ptrs[tblno]->quantval,
-	      SIZEOF((*qtblptr)->quantval));
-      (*qtblptr)->sent_table = FALSE;
-    }
-  }
-  /* Copy the source's per-component info.
-   * Note we assume jpeg_set_defaults has allocated the dest comp_info array.
-   */
-  dstinfo->num_components = srcinfo->num_components;
-  if (dstinfo->num_components < 1 || dstinfo->num_components > MAX_COMPONENTS)
-    ERREXIT2(dstinfo, JERR_COMPONENT_COUNT, dstinfo->num_components,
-	     MAX_COMPONENTS);
-  for (ci = 0, incomp = srcinfo->comp_info, outcomp = dstinfo->comp_info;
-       ci < dstinfo->num_components; ci++, incomp++, outcomp++) {
-    outcomp->component_id = incomp->component_id;
-    outcomp->h_samp_factor = incomp->h_samp_factor;
-    outcomp->v_samp_factor = incomp->v_samp_factor;
-    outcomp->quant_tbl_no = incomp->quant_tbl_no;
-    /* Make sure saved quantization table for component matches the qtable
-     * slot.  If not, the input file re-used this qtable slot.
-     * IJG encoder currently cannot duplicate this.
-     */
-    tblno = outcomp->quant_tbl_no;
-    if (tblno < 0 || tblno >= NUM_QUANT_TBLS ||
-	srcinfo->quant_tbl_ptrs[tblno] == NULL)
-      ERREXIT1(dstinfo, JERR_NO_QUANT_TABLE, tblno);
-    slot_quant = srcinfo->quant_tbl_ptrs[tblno];
-    c_quant = incomp->quant_table;
-    if (c_quant != NULL) {
-      for (coefi = 0; coefi < DCTSIZE2; coefi++) {
-	if (c_quant->quantval[coefi] != slot_quant->quantval[coefi])
-	  ERREXIT1(dstinfo, JERR_MISMATCHED_QUANT_TABLE, tblno);
-      }
-    }
-    /* Note: we do not copy the source's Huffman table assignments;
-     * instead we rely on jpeg_set_colorspace to have made a suitable choice.
-     */
-  }
-}
-
-
-/*
- * Master selection of compression modules for transcoding.
- * This substitutes for jcinit.c's initialization of the full compressor.
- */
-
-LOCAL void
-transencode_master_selection (j_compress_ptr cinfo,
-			      jvirt_barray_ptr * coef_arrays)
-{
-  /* Although we don't actually use input_components for transcoding,
-   * jcmaster.c's initial_setup will complain if input_components is 0.
-   */
-  cinfo->input_components = 1;
-  /* Initialize master control (includes parameter checking/processing) */
-  jinit_c_master_control(cinfo, TRUE /* transcode only */);
-
-  /* Entropy encoding: either Huffman or arithmetic coding. */
-  if (cinfo->arith_code) {
-    ERREXIT(cinfo, JERR_ARITH_NOTIMPL);
-  } else {
-    if (cinfo->progressive_mode) {
-#ifdef C_PROGRESSIVE_SUPPORTED
-      jinit_phuff_encoder(cinfo);
-#else
-      ERREXIT(cinfo, JERR_NOT_COMPILED);
-#endif
-    } else
-      jinit_huff_encoder(cinfo);
-  }
-
-  /* We need a special coefficient buffer controller. */
-  transencode_coef_controller(cinfo, coef_arrays);
-
-  jinit_marker_writer(cinfo);
-
-  /* We can now tell the memory manager to allocate virtual arrays. */
-  (*cinfo->mem->realize_virt_arrays) ((j_common_ptr) cinfo);
-
-  /* Write the datastream header (SOI) immediately.
-   * Frame and scan headers are postponed till later.
-   * This lets application insert special markers after the SOI.
-   */
-  (*cinfo->marker->write_file_header) (cinfo);
-}
-
-
-/*
- * The rest of this file is a special implementation of the coefficient
- * buffer controller.  This is similar to jccoefct.c, but it handles only
- * output from presupplied virtual arrays.  Furthermore, we generate any
- * dummy padding blocks on-the-fly rather than expecting them to be present
- * in the arrays.
- */
-
-/* Private buffer controller object */
-
-typedef struct {
-  struct jpeg_c_coef_controller pub; /* public fields */
-
-  JDIMENSION iMCU_row_num;	/* iMCU row # within image */
-  JDIMENSION mcu_ctr;		/* counts MCUs processed in current row */
-  int MCU_vert_offset;		/* counts MCU rows within iMCU row */
-  int MCU_rows_per_iMCU_row;	/* number of such rows needed */
-
-  /* Virtual block array for each component. */
-  jvirt_barray_ptr * whole_image;
-
-  /* Workspace for constructing dummy blocks at right/bottom edges. */
-  JBLOCKROW dummy_buffer[C_MAX_BLOCKS_IN_MCU];
-} my_coef_controller;
-
-typedef my_coef_controller * my_coef_ptr;
-
-
-LOCAL void
-start_iMCU_row (j_compress_ptr cinfo)
-/* Reset within-iMCU-row counters for a new row */
-{
-  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
-
-  /* In an interleaved scan, an MCU row is the same as an iMCU row.
-   * In a noninterleaved scan, an iMCU row has v_samp_factor MCU rows.
-   * But at the bottom of the image, process only what's left.
-   */
-  if (cinfo->comps_in_scan > 1) {
-    coef->MCU_rows_per_iMCU_row = 1;
-  } else {
-    if (coef->iMCU_row_num < (cinfo->total_iMCU_rows-1))
-      coef->MCU_rows_per_iMCU_row = cinfo->cur_comp_info[0]->v_samp_factor;
-    else
-      coef->MCU_rows_per_iMCU_row = cinfo->cur_comp_info[0]->last_row_height;
-  }
-
-  coef->mcu_ctr = 0;
-  coef->MCU_vert_offset = 0;
-}
-
-
-/*
- * Initialize for a processing pass.
- */
-
-METHODDEF void
-start_pass_coef (j_compress_ptr cinfo, J_BUF_MODE pass_mode)
-{
-  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
-
-  if (pass_mode != JBUF_CRANK_DEST)
-    ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
-
-  coef->iMCU_row_num = 0;
-  start_iMCU_row(cinfo);
-}
-
-
-/*
- * Process some data.
- * We process the equivalent of one fully interleaved MCU row ("iMCU" row)
- * per call, ie, v_samp_factor block rows for each component in the scan.
- * The data is obtained from the virtual arrays and fed to the entropy coder.
- * Returns TRUE if the iMCU row is completed, FALSE if suspended.
- *
- * NB: input_buf is ignored; it is likely to be a NULL pointer.
- */
-
-METHODDEF boolean
-compress_output (j_compress_ptr cinfo, JSAMPIMAGE input_buf)
-{
-  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
-  JDIMENSION MCU_col_num;	/* index of current MCU within row */
-  JDIMENSION last_MCU_col = cinfo->MCUs_per_row - 1;
-  JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
-  int blkn, ci, xindex, yindex, yoffset, blockcnt;
-  JDIMENSION start_col;
-  JBLOCKARRAY buffer[MAX_COMPS_IN_SCAN];
-  JBLOCKROW MCU_buffer[C_MAX_BLOCKS_IN_MCU];
-  JBLOCKROW buffer_ptr;
-  jpeg_component_info *compptr;
-
-  /* Align the virtual buffers for the components used in this scan. */
-  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
-    compptr = cinfo->cur_comp_info[ci];
-    buffer[ci] = (*cinfo->mem->access_virt_barray)
-      ((j_common_ptr) cinfo, coef->whole_image[compptr->component_index],
-       coef->iMCU_row_num * compptr->v_samp_factor,
-       (JDIMENSION) compptr->v_samp_factor, FALSE);
-  }
-
-  /* Loop to process one whole iMCU row */
-  for (yoffset = coef->MCU_vert_offset; yoffset < coef->MCU_rows_per_iMCU_row;
-       yoffset++) {
-    for (MCU_col_num = coef->mcu_ctr; MCU_col_num < cinfo->MCUs_per_row;
-	 MCU_col_num++) {
-      /* Construct list of pointers to DCT blocks belonging to this MCU */
-      blkn = 0;			/* index of current DCT block within MCU */
-      for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
-	compptr = cinfo->cur_comp_info[ci];
-	start_col = MCU_col_num * compptr->MCU_width;
-	blockcnt = (MCU_col_num < last_MCU_col) ? compptr->MCU_width
-						: compptr->last_col_width;
-	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
-	  if (coef->iMCU_row_num < last_iMCU_row ||
-	      yindex+yoffset < compptr->last_row_height) {
-	    /* Fill in pointers to real blocks in this row */
-	    buffer_ptr = buffer[ci][yindex+yoffset] + start_col;
-	    for (xindex = 0; xindex < blockcnt; xindex++)
-	      MCU_buffer[blkn++] = buffer_ptr++;
-	  } else {
-	    /* At bottom of image, need a whole row of dummy blocks */
-	    xindex = 0;
-	  }
-	  /* Fill in any dummy blocks needed in this row.
-	   * Dummy blocks are filled in the same way as in jccoefct.c:
-	   * all zeroes in the AC entries, DC entries equal to previous
-	   * block's DC value.  The init routine has already zeroed the
-	   * AC entries, so we need only set the DC entries correctly.
-	   */
-	  for (; xindex < compptr->MCU_width; xindex++) {
-	    MCU_buffer[blkn] = coef->dummy_buffer[blkn];
-	    MCU_buffer[blkn][0][0] = MCU_buffer[blkn-1][0][0];
-	    blkn++;
-	  }
-	}
-      }
-      /* Try to write the MCU. */
-      if (! (*cinfo->entropy->encode_mcu) (cinfo, MCU_buffer)) {
-	/* Suspension forced; update state counters and exit */
-	coef->MCU_vert_offset = yoffset;
-	coef->mcu_ctr = MCU_col_num;
-	return FALSE;
-      }
-    }
-    /* Completed an MCU row, but perhaps not an iMCU row */
-    coef->mcu_ctr = 0;
-  }
-  /* Completed the iMCU row, advance counters for next one */
-  coef->iMCU_row_num++;
-  start_iMCU_row(cinfo);
-  return TRUE;
-}
-
-
-/*
- * Initialize coefficient buffer controller.
- *
- * Each passed coefficient array must be the right size for that
- * coefficient: width_in_blocks wide and height_in_blocks high,
- * with unitheight at least v_samp_factor.
- */
-
-LOCAL void
-transencode_coef_controller (j_compress_ptr cinfo,
-			     jvirt_barray_ptr * coef_arrays)
-{
-  my_coef_ptr coef;
-  JBLOCKROW buffer;
-  int i;
-
-  coef = (my_coef_ptr)
-    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
-				SIZEOF(my_coef_controller));
-  cinfo->coef = (struct jpeg_c_coef_controller *) coef;
-  coef->pub.start_pass = start_pass_coef;
-  coef->pub.compress_data = compress_output;
-
-  /* Save pointer to virtual arrays */
-  coef->whole_image = coef_arrays;
-
-  /* Allocate and pre-zero space for dummy DCT blocks. */
-  buffer = (JBLOCKROW)
-    (*cinfo->mem->alloc_large) ((j_common_ptr) cinfo, JPOOL_IMAGE,
-				C_MAX_BLOCKS_IN_MCU * SIZEOF(JBLOCK));
-  jzero_far((void FAR *) buffer, C_MAX_BLOCKS_IN_MCU * SIZEOF(JBLOCK));
-  for (i = 0; i < C_MAX_BLOCKS_IN_MCU; i++) {
-    coef->dummy_buffer[i] = buffer + i;
-  }
-}
diff -NEaurb neo/renderer/jpeg-6/jdapimin.c neo/renderer/jpeg-6/jdapimin.c
--- neo/renderer/jpeg-6/jdapimin.c	2011-12-26 04:15:38 +0000
+++ neo/renderer/jpeg-6/jdapimin.c	1970-01-01 00:00:00 +0000
@@ -1,398 +0,0 @@
-/*
- * jdapimin.c
- *
- * Copyright (C) 1994-1995, Thomas G. Lane.
- * This file is part of the Independent JPEG Group's software.
- * For conditions of distribution and use, see the accompanying README file.
- *
- * This file contains application interface code for the decompression half
- * of the JPEG library.  These are the "minimum" API routines that may be
- * needed in either the normal full-decompression case or the
- * transcoding-only case.
- *
- * Most of the routines intended to be called directly by an application
- * are in this file or in jdapistd.c.  But also see jcomapi.c for routines
- * shared by compression and decompression, and jdtrans.c for the transcoding
- * case.
- */
-
-#define JPEG_INTERNALS
-#include "jinclude.h"
-#include "jpeglib.h"
-
-
-/*
- * Initialization of a JPEG decompression object.
- * The error manager must already be set up (in case memory manager fails).
- */
-
-GLOBAL void
-jpeg_create_decompress (j_decompress_ptr cinfo)
-{
-  int i;
-
-  /* For debugging purposes, zero the whole master structure.
-   * But error manager pointer is already there, so save and restore it.
-   */
-  {
-    struct jpeg_error_mgr * err = cinfo->err;
-    MEMZERO(cinfo, SIZEOF(struct jpeg_decompress_struct));
-    cinfo->err = err;
-  }
-  cinfo->is_decompressor = TRUE;
-
-  /* Initialize a memory manager instance for this object */
-  jinit_memory_mgr((j_common_ptr) cinfo);
-
-  /* Zero out pointers to permanent structures. */
-  cinfo->progress = NULL;
-  cinfo->src = NULL;
-
-  for (i = 0; i < NUM_QUANT_TBLS; i++)
-    cinfo->quant_tbl_ptrs[i] = NULL;
-
-  for (i = 0; i < NUM_HUFF_TBLS; i++) {
-    cinfo->dc_huff_tbl_ptrs[i] = NULL;
-    cinfo->ac_huff_tbl_ptrs[i] = NULL;
-  }
-
-  /* Initialize marker processor so application can override methods
-   * for COM, APPn markers before calling jpeg_read_header.
-   */
-  jinit_marker_reader(cinfo);
-
-  /* And initialize the overall input controller. */
-  jinit_input_controller(cinfo);
-
-  /* OK, I'm ready */
-  cinfo->global_state = DSTATE_START;
-}
-
-
-/*
- * Destruction of a JPEG decompression object
- */
-
-GLOBAL void
-jpeg_destroy_decompress (j_decompress_ptr cinfo)
-{
-  jpeg_destroy((j_common_ptr) cinfo); /* use common routine */
-}
-
-
-/*
- * Abort processing of a JPEG decompression operation,
- * but don't destroy the object itself.
- */
-
-GLOBAL void
-jpeg_abort_decompress (j_decompress_ptr cinfo)
-{
-  jpeg_abort((j_common_ptr) cinfo); /* use common routine */
-}
-
-
-/*
- * Install a special processing method for COM or APPn markers.
- */
-
-GLOBAL void
-jpeg_set_marker_processor (j_decompress_ptr cinfo, int marker_code,
-			   jpeg_marker_parser_method routine)
-{
-  if (marker_code == JPEG_COM)
-    cinfo->marker->process_COM = routine;
-  else if (marker_code >= JPEG_APP0 && marker_code <= JPEG_APP0+15)
-    cinfo->marker->process_APPn[marker_code-JPEG_APP0] = routine;
-  else
-    ERREXIT1(cinfo, JERR_UNKNOWN_MARKER, marker_code);
-}
-
-
-/*
- * Set default decompression parameters.
- */
-
-LOCAL void
-default_decompress_parms (j_decompress_ptr cinfo)
-{
-  /* Guess the input colorspace, and set output colorspace accordingly. */
-  /* (Wish JPEG committee had provided a real way to specify this...) */
-  /* Note application may override our guesses. */
-  switch (cinfo->num_components) {
-  case 1:
-    cinfo->jpeg_color_space = JCS_GRAYSCALE;
-    cinfo->out_color_space = JCS_GRAYSCALE;
-    break;
-    
-  case 3:
-    if (cinfo->saw_JFIF_marker) {
-      cinfo->jpeg_color_space = JCS_YCbCr; /* JFIF implies YCbCr */
-    } else if (cinfo->saw_Adobe_marker) {
-      switch (cinfo->Adobe_transform) {
-      case 0:
-	cinfo->jpeg_color_space = JCS_RGB;
-	break;
-      case 1:
-	cinfo->jpeg_color_space = JCS_YCbCr;
-	break;
-      default:
-	WARNMS1(cinfo, JWRN_ADOBE_XFORM, cinfo->Adobe_transform);
-	cinfo->jpeg_color_space = JCS_YCbCr; /* assume it's YCbCr */
-	break;
-      }
-    } else {
-      /* Saw no special markers, try to guess from the component IDs */
-      int cid0 = cinfo->comp_info[0].component_id;
-      int cid1 = cinfo->comp_info[1].component_id;
-      int cid2 = cinfo->comp_info[2].component_id;
-
-      if (cid0 == 1 && cid1 == 2 && cid2 == 3)
-	cinfo->jpeg_color_space = JCS_YCbCr; /* assume JFIF w/out marker */
-      else if (cid0 == 82 && cid1 == 71 && cid2 == 66)
-	cinfo->jpeg_color_space = JCS_RGB; /* ASCII 'R', 'G', 'B' */
-      else {
-	TRACEMS3(cinfo, 1, JTRC_UNKNOWN_IDS, cid0, cid1, cid2);
-	cinfo->jpeg_color_space = JCS_YCbCr; /* assume it's YCbCr */
-      }
-    }
-    /* Always guess RGB is proper output colorspace. */
-    cinfo->out_color_space = JCS_RGB;
-    break;
-    
-  case 4:
-    if (cinfo->saw_Adobe_marker) {
-      switch (cinfo->Adobe_transform) {
-      case 0:
-	cinfo->jpeg_color_space = JCS_CMYK;
-	break;
-      case 2:
-	cinfo->jpeg_color_space = JCS_YCCK;
-	break;
-      default:
-	WARNMS1(cinfo, JWRN_ADOBE_XFORM, cinfo->Adobe_transform);
-	cinfo->jpeg_color_space = JCS_YCCK; /* assume it's YCCK */
-	break;
-      }
-    } else {
-      /* No special markers, assume straight CMYK. */
-      cinfo->jpeg_color_space = JCS_CMYK;
-    }
-    cinfo->out_color_space = JCS_CMYK;
-    break;
-    
-  default:
-    cinfo->jpeg_color_space = JCS_UNKNOWN;
-    cinfo->out_color_space = JCS_UNKNOWN;
-    break;
-  }
-
-  /* Set defaults for other decompression parameters. */
-  cinfo->scale_num = 1;		/* 1:1 scaling */
-  cinfo->scale_denom = 1;
-  cinfo->output_gamma = 1.0;
-  cinfo->buffered_image = FALSE;
-  cinfo->raw_data_out = FALSE;
-  cinfo->dct_method = JDCT_DEFAULT;
-  cinfo->do_fancy_upsampling = TRUE;
-  cinfo->do_block_smoothing = TRUE;
-  cinfo->quantize_colors = FALSE;
-  /* We set these in case application only sets quantize_colors. */
-  cinfo->dither_mode = JDITHER_FS;
-#ifdef QUANT_2PASS_SUPPORTED
-  cinfo->two_pass_quantize = TRUE;
-#else
-  cinfo->two_pass_quantize = FALSE;
-#endif
-  cinfo->desired_number_of_colors = 256;
-  cinfo->colormap = NULL;
-  /* Initialize for no mode change in buffered-image mode. */
-  cinfo->enable_1pass_quant = FALSE;
-  cinfo->enable_external_quant = FALSE;
-  cinfo->enable_2pass_quant = FALSE;
-}
-
-
-/*
- * Decompression startup: read start of JPEG datastream to see what's there.
- * Need only initialize JPEG object and supply a data source before calling.
- *
- * This routine will read as far as the first SOS marker (ie, actual start of
- * compressed data), and will save all tables and parameters in the JPEG
- * object.  It will also initialize the decompression parameters to default
- * values, and finally return JPEG_HEADER_OK.  On return, the application may
- * adjust the decompression parameters and then call jpeg_start_decompress.
- * (Or, if the application only wanted to determine the image parameters,
- * the data need not be decompressed.  In that case, call jpeg_abort or
- * jpeg_destroy to release any temporary space.)
- * If an abbreviated (tables only) datastream is presented, the routine will
- * return JPEG_HEADER_TABLES_ONLY upon reaching EOI.  The application may then
- * re-use the JPEG object to read the abbreviated image datastream(s).
- * It is unnecessary (but OK) to call jpeg_abort in this case.
- * The JPEG_SUSPENDED return code only occurs if the data source module
- * requests suspension of the decompressor.  In this case the application
- * should load more source data and then re-call jpeg_read_header to resume
- * processing.
- * If a non-suspending data source is used and require_image is TRUE, then the
- * return code need not be inspected since only JPEG_HEADER_OK is possible.
- *
- * This routine is now just a front end to jpeg_consume_input, with some
- * extra error checking.
- */
-
-GLOBAL int
-jpeg_read_header (j_decompress_ptr cinfo, boolean require_image)
-{
-  int retcode;
-
-  if (cinfo->global_state != DSTATE_START &&
-      cinfo->global_state != DSTATE_INHEADER)
-    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
-
-  retcode = jpeg_consume_input(cinfo);
-
-  switch (retcode) {
-  case JPEG_REACHED_SOS:
-    retcode = JPEG_HEADER_OK;
-    break;
-  case JPEG_REACHED_EOI:
-    if (require_image)		/* Complain if application wanted an image */
-      ERREXIT(cinfo, JERR_NO_IMAGE);
-    /* Reset to start state; it would be safer to require the application to
-     * call jpeg_abort, but we can't change it now for compatibility reasons.
-     * A side effect is to free any temporary memory (there shouldn't be any).
-     */
-    jpeg_abort((j_common_ptr) cinfo); /* sets state = DSTATE_START */
-    retcode = JPEG_HEADER_TABLES_ONLY;
-    break;
-  case JPEG_SUSPENDED:
-    /* no work */
-    break;
-  }
-
-  return retcode;
-}
-
-
-/*
- * Consume data in advance of what the decompressor requires.
- * This can be called at any time once the decompressor object has
- * been created and a data source has been set up.
- *
- * This routine is essentially a state machine that handles a couple
- * of critical state-transition actions, namely initial setup and
- * transition from header scanning to ready-for-start_decompress.
- * All the actual input is done via the input controller's consume_input
- * method.
- */
-
-GLOBAL int
-jpeg_consume_input (j_decompress_ptr cinfo)
-{
-  int retcode = JPEG_SUSPENDED;
-
-  /* NB: every possible DSTATE value should be listed in this switch */
-  switch (cinfo->global_state) {
-  case DSTATE_START:
-    /* Start-of-datastream actions: reset appropriate modules */
-    (*cinfo->inputctl->reset_input_controller) (cinfo);
-    /* Initialize application's data source module */
-    (*cinfo->src->init_source) (cinfo);
-    cinfo->global_state = DSTATE_INHEADER;
-    /*FALLTHROUGH*/
-  case DSTATE_INHEADER:
-    retcode = (*cinfo->inputctl->consume_input) (cinfo);
-    if (retcode == JPEG_REACHED_SOS) { /* Found SOS, prepare to decompress */
-      /* Set up default parameters based on header data */
-      default_decompress_parms(cinfo);
-      /* Set global state: ready for start_decompress */
-      cinfo->global_state = DSTATE_READY;
-    }
-    break;
-  case DSTATE_READY:
-    /* Can't advance past first SOS until start_decompress is called */
-    retcode = JPEG_REACHED_SOS;
-    break;
-  case DSTATE_PRELOAD:
-  case DSTATE_PRESCAN:
-  case DSTATE_SCANNING:
-  case DSTATE_RAW_OK:
-  case DSTATE_BUFIMAGE:
-  case DSTATE_BUFPOST:
-  case DSTATE_STOPPING:
-    retcode = (*cinfo->inputctl->consume_input) (cinfo);
-    break;
-  default:
-    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
-  }
-  return retcode;
-}
-
-
-/*
- * Have we finished reading the input file?
- */
-
-GLOBAL boolean
-jpeg_input_complete (j_decompress_ptr cinfo)
-{
-  /* Check for valid jpeg object */
-  if (cinfo->global_state < DSTATE_START ||
-      cinfo->global_state > DSTATE_STOPPING)
-    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
-  return cinfo->inputctl->eoi_reached;
-}
-
-
-/*
- * Is there more than one scan?
- */
-
-GLOBAL boolean
-jpeg_has_multiple_scans (j_decompress_ptr cinfo)
-{
-  /* Only valid after jpeg_read_header completes */
-  if (cinfo->global_state < DSTATE_READY ||
-      cinfo->global_state > DSTATE_STOPPING)
-    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
-  return cinfo->inputctl->has_multiple_scans;
-}
-
-
-/*
- * Finish JPEG decompression.
- *
- * This will normally just verify the file trailer and release temp storage.
- *
- * Returns FALSE if suspended.  The return value need be inspected only if
- * a suspending data source is used.
- */
-
-GLOBAL boolean
-jpeg_finish_decompress (j_decompress_ptr cinfo)
-{
-  if ((cinfo->global_state == DSTATE_SCANNING ||
-       cinfo->global_state == DSTATE_RAW_OK) && ! cinfo->buffered_image) {
-    /* Terminate final pass of non-buffered mode */
-    if (cinfo->output_scanline < cinfo->output_height)
-      ERREXIT(cinfo, JERR_TOO_LITTLE_DATA);
-    (*cinfo->master->finish_output_pass) (cinfo);
-    cinfo->global_state = DSTATE_STOPPING;
-  } else if (cinfo->global_state == DSTATE_BUFIMAGE) {
-    /* Finishing after a buffered-image operation */
-    cinfo->global_state = DSTATE_STOPPING;
-  } else if (cinfo->global_state != DSTATE_STOPPING) {
-    /* STOPPING = repeat call after a suspension, anything else is error */
-    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
-  }
-  /* Read until EOI */
-  while (! cinfo->inputctl->eoi_reached) {
-    if ((*cinfo->inputctl->consume_input) (cinfo) == JPEG_SUSPENDED)
-      return FALSE;		/* Suspend, come back later */
-  }
-  /* Do final cleanup */
-  (*cinfo->src->term_source) (cinfo);
-  /* We can use jpeg_abort to release memory and reset global_state */
-  jpeg_abort((j_common_ptr) cinfo);
-  return TRUE;
-}
diff -NEaurb neo/renderer/jpeg-6/jdapistd.c neo/renderer/jpeg-6/jdapistd.c
--- neo/renderer/jpeg-6/jdapistd.c	2011-12-26 04:15:38 +0000
+++ neo/renderer/jpeg-6/jdapistd.c	1970-01-01 00:00:00 +0000
@@ -1,275 +0,0 @@
-/*
- * jdapistd.c
- *
- * Copyright (C) 1994-1995, Thomas G. Lane.
- * This file is part of the Independent JPEG Group's software.
- * For conditions of distribution and use, see the accompanying README file.
- *
- * This file contains application interface code for the decompression half
- * of the JPEG library.  These are the "standard" API routines that are
- * used in the normal full-decompression case.  They are not used by a
- * transcoding-only application.  Note that if an application links in
- * jpeg_start_decompress, it will end up linking in the entire decompressor.
- * We thus must separate this file from jdapimin.c to avoid linking the
- * whole decompression library into a transcoder.
- */
-
-#define JPEG_INTERNALS
-#include "jinclude.h"
-#include "jpeglib.h"
-
-
-/* Forward declarations */
-LOCAL boolean output_pass_setup JPP((j_decompress_ptr cinfo));
-
-
-/*
- * Decompression initialization.
- * jpeg_read_header must be completed before calling this.
- *
- * If a multipass operating mode was selected, this will do all but the
- * last pass, and thus may take a great deal of time.
- *
- * Returns FALSE if suspended.  The return value need be inspected only if
- * a suspending data source is used.
- */
-
-GLOBAL boolean
-jpeg_start_decompress (j_decompress_ptr cinfo)
-{
-  if (cinfo->global_state == DSTATE_READY) {
-    /* First call: initialize master control, select active modules */
-    jinit_master_decompress(cinfo);
-    if (cinfo->buffered_image) {
-      /* No more work here; expecting jpeg_start_output next */
-      cinfo->global_state = DSTATE_BUFIMAGE;
-      return TRUE;
-    }
-    cinfo->global_state = DSTATE_PRELOAD;
-  }
-  if (cinfo->global_state == DSTATE_PRELOAD) {
-    /* If file has multiple scans, absorb them all into the coef buffer */
-    if (cinfo->inputctl->has_multiple_scans) {
-#ifdef D_MULTISCAN_FILES_SUPPORTED
-      for (;;) {
-	int retcode;
-	/* Call progress monitor hook if present */
-	if (cinfo->progress != NULL)
-	  (*cinfo->progress->progress_monitor) ((j_common_ptr) cinfo);
-	/* Absorb some more input */
-	retcode = (*cinfo->inputctl->consume_input) (cinfo);
-	if (retcode == JPEG_SUSPENDED)
-	  return FALSE;
-	if (retcode == JPEG_REACHED_EOI)
-	  break;
-	/* Advance progress counter if appropriate */
-	if (cinfo->progress != NULL &&
-	    (retcode == JPEG_ROW_COMPLETED || retcode == JPEG_REACHED_SOS)) {
-	  if (++cinfo->progress->pass_counter >= cinfo->progress->pass_limit) {
-	    /* jdmaster underestimated number of scans; ratchet up one scan */
-	    cinfo->progress->pass_limit += (long) cinfo->total_iMCU_rows;
-	  }
-	}
-      }
-#else
-      ERREXIT(cinfo, JERR_NOT_COMPILED);
-#endif /* D_MULTISCAN_FILES_SUPPORTED */
-    }
-    cinfo->output_scan_number = cinfo->input_scan_number;
-  } else if (cinfo->global_state != DSTATE_PRESCAN)
-    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
-  /* Perform any dummy output passes, and set up for the final pass */
-  return output_pass_setup(cinfo);
-}
-
-
-/*
- * Set up for an output pass, and perform any dummy pass(es) needed.
- * Common subroutine for jpeg_start_decompress and jpeg_start_output.
- * Entry: global_state = DSTATE_PRESCAN only if previously suspended.
- * Exit: If done, returns TRUE and sets global_state for proper output mode.
- *       If suspended, returns FALSE and sets global_state = DSTATE_PRESCAN.
- */
-
-LOCAL boolean
-output_pass_setup (j_decompress_ptr cinfo)
-{
-  if (cinfo->global_state != DSTATE_PRESCAN) {
-    /* First call: do pass setup */
-    (*cinfo->master->prepare_for_output_pass) (cinfo);
-    cinfo->output_scanline = 0;
-    cinfo->global_state = DSTATE_PRESCAN;
-  }
-  /* Loop over any required dummy passes */
-  while (cinfo->master->is_dummy_pass) {
-#ifdef QUANT_2PASS_SUPPORTED
-    /* Crank through the dummy pass */
-    while (cinfo->output_scanline < cinfo->output_height) {
-      JDIMENSION last_scanline;
-      /* Call progress monitor hook if present */
-      if (cinfo->progress != NULL) {
-	cinfo->progress->pass_counter = (long) cinfo->output_scanline;
-	cinfo->progress->pass_limit = (long) cinfo->output_height;
-	(*cinfo->progress->progress_monitor) ((j_common_ptr) cinfo);
-      }
-      /* Process some data */
-      last_scanline = cinfo->output_scanline;
-      (*cinfo->main->process_data) (cinfo, (JSAMPARRAY) NULL,
-				    &cinfo->output_scanline, (JDIMENSION) 0);
-      if (cinfo->output_scanline == last_scanline)
-	return FALSE;		/* No progress made, must suspend */
-    }
-    /* Finish up dummy pass, and set up for another one */
-    (*cinfo->master->finish_output_pass) (cinfo);
-    (*cinfo->master->prepare_for_output_pass) (cinfo);
-    cinfo->output_scanline = 0;
-#else
-    ERREXIT(cinfo, JERR_NOT_COMPILED);
-#endif /* QUANT_2PASS_SUPPORTED */
-  }
-  /* Ready for application to drive output pass through
-   * jpeg_read_scanlines or jpeg_read_raw_data.
-   */
-  cinfo->global_state = cinfo->raw_data_out ? DSTATE_RAW_OK : DSTATE_SCANNING;
-  return TRUE;
-}
-
-
-/*
- * Read some scanlines of data from the JPEG decompressor.
- *
- * The return value will be the number of lines actually read.
- * This may be less than the number requested in several cases,
- * including bottom of image, data source suspension, and operating
- * modes that emit multiple scanlines at a time.
- *
- * Note: we warn about excess calls to jpeg_read_scanlines() since
- * this likely signals an application programmer error.  However,
- * an oversize buffer (max_lines > scanlines remaining) is not an error.
- */
-
-GLOBAL JDIMENSION
-jpeg_read_scanlines (j_decompress_ptr cinfo, JSAMPARRAY scanlines,
-		     JDIMENSION max_lines)
-{
-  JDIMENSION row_ctr;
-
-  if (cinfo->global_state != DSTATE_SCANNING)
-    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
-  if (cinfo->output_scanline >= cinfo->output_height) {
-    WARNMS(cinfo, JWRN_TOO_MUCH_DATA);
-    return 0;
-  }
-
-  /* Call progress monitor hook if present */
-  if (cinfo->progress != NULL) {
-    cinfo->progress->pass_counter = (long) cinfo->output_scanline;
-    cinfo->progress->pass_limit = (long) cinfo->output_height;
-    (*cinfo->progress->progress_monitor) ((j_common_ptr) cinfo);
-  }
-
-  /* Process some data */
-  row_ctr = 0;
-  (*cinfo->main->process_data) (cinfo, scanlines, &row_ctr, max_lines);
-  cinfo->output_scanline += row_ctr;
-  return row_ctr;
-}
-
-
-/*
- * Alternate entry point to read raw data.
- * Processes exactly one iMCU row per call, unless suspended.
- */
-
-GLOBAL JDIMENSION
-jpeg_read_raw_data (j_decompress_ptr cinfo, JSAMPIMAGE data,
-		    JDIMENSION max_lines)
-{
-  JDIMENSION lines_per_iMCU_row;
-
-  if (cinfo->global_state != DSTATE_RAW_OK)
-    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
-  if (cinfo->output_scanline >= cinfo->output_height) {
-    WARNMS(cinfo, JWRN_TOO_MUCH_DATA);
-    return 0;
-  }
-
-  /* Call progress monitor hook if present */
-  if (cinfo->progress != NULL) {
-    cinfo->progress->pass_counter = (long) cinfo->output_scanline;
-    cinfo->progress->pass_limit = (long) cinfo->output_height;
-    (*cinfo->progress->progress_monitor) ((j_common_ptr) cinfo);
-  }
-
-  /* Verify that at least one iMCU row can be returned. */
-  lines_per_iMCU_row = cinfo->max_v_samp_factor * cinfo->min_DCT_scaled_size;
-  if (max_lines < lines_per_iMCU_row)
-    ERREXIT(cinfo, JERR_BUFFER_SIZE);
-
-  /* Decompress directly into user's buffer. */
-  if (! (*cinfo->coef->decompress_data) (cinfo, data))
-    return 0;			/* suspension forced, can do nothing more */
-
-  /* OK, we processed one iMCU row. */
-  cinfo->output_scanline += lines_per_iMCU_row;
-  return lines_per_iMCU_row;
-}
-
-
-/* Additional entry points for buffered-image mode. */
-
-#ifdef D_MULTISCAN_FILES_SUPPORTED
-
-/*
- * Initialize for an output pass in buffered-image mode.
- */
-
-GLOBAL boolean
-jpeg_start_output (j_decompress_ptr cinfo, int scan_number)
-{
-  if (cinfo->global_state != DSTATE_BUFIMAGE &&
-      cinfo->global_state != DSTATE_PRESCAN)
-    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
-  /* Limit scan number to valid range */
-  if (scan_number <= 0)
-    scan_number = 1;
-  if (cinfo->inputctl->eoi_reached &&
-      scan_number > cinfo->input_scan_number)
-    scan_number = cinfo->input_scan_number;
-  cinfo->output_scan_number = scan_number;
-  /* Perform any dummy output passes, and set up for the real pass */
-  return output_pass_setup(cinfo);
-}
-
-
-/*
- * Finish up after an output pass in buffered-image mode.
- *
- * Returns FALSE if suspended.  The return value need be inspected only if
- * a suspending data source is used.
- */
-
-GLOBAL boolean
-jpeg_finish_output (j_decompress_ptr cinfo)
-{
-  if ((cinfo->global_state == DSTATE_SCANNING ||
-       cinfo->global_state == DSTATE_RAW_OK) && cinfo->buffered_image) {
-    /* Terminate this pass. */
-    /* We do not require the whole pass to have been completed. */
-    (*cinfo->master->finish_output_pass) (cinfo);
-    cinfo->global_state = DSTATE_BUFPOST;
-  } else if (cinfo->global_state != DSTATE_BUFPOST) {
-    /* BUFPOST = repeat call after a suspension, anything else is error */
-    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
-  }
-  /* Read markers looking for SOS or EOI */
-  while (cinfo->input_scan_number <= cinfo->output_scan_number &&
-	 ! cinfo->inputctl->eoi_reached) {
-    if ((*cinfo->inputctl->consume_input) (cinfo) == JPEG_SUSPENDED)
-      return FALSE;		/* Suspend, come back later */
-  }
-  cinfo->global_state = DSTATE_BUFIMAGE;
-  return TRUE;
-}
-
-#endif /* D_MULTISCAN_FILES_SUPPORTED */
diff -NEaurb neo/renderer/jpeg-6/jdatadst.c neo/renderer/jpeg-6/jdatadst.c
--- neo/renderer/jpeg-6/jdatadst.c	2011-12-26 04:15:38 +0000
+++ neo/renderer/jpeg-6/jdatadst.c	1970-01-01 00:00:00 +0000
@@ -1,151 +0,0 @@
-/*
- * jdatadst.c
- *
- * Copyright (C) 1994, Thomas G. Lane.
- * This file is part of the Independent JPEG Group's software.
- * For conditions of distribution and use, see the accompanying README file.
- *
- * This file contains compression data destination routines for the case of
- * emitting JPEG data to a file (or any stdio stream).  While these routines
- * are sufficient for most applications, some will want to use a different
- * destination manager.
- * IMPORTANT: we assume that fwrite() will correctly transcribe an array of
- * JOCTETs into 8-bit-wide elements on external storage.  If char is wider
- * than 8 bits on your machine, you may need to do some tweaking.
- */
-
-/* this is not a core library module, so it doesn't define JPEG_INTERNALS */
-#include "jinclude.h"
-#include "jpeglib.h"
-#include "jerror.h"
-
-
-/* Expanded data destination object for stdio output */
-
-typedef struct {
-  struct jpeg_destination_mgr pub; /* public fields */
-
-  FILE * outfile;		/* target stream */
-  JOCTET * buffer;		/* start of buffer */
-} my_destination_mgr;
-
-typedef my_destination_mgr * my_dest_ptr;
-
-#define OUTPUT_BUF_SIZE  4096	/* choose an efficiently fwrite'able size */
-
-
-/*
- * Initialize destination --- called by jpeg_start_compress
- * before any data is actually written.
- */
-
-METHODDEF void
-init_destination (j_compress_ptr cinfo)
-{
-  my_dest_ptr dest = (my_dest_ptr) cinfo->dest;
-
-  /* Allocate the output buffer --- it will be released when done with image */
-  dest->buffer = (JOCTET *)
-      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
-				  OUTPUT_BUF_SIZE * SIZEOF(JOCTET));
-
-  dest->pub.next_output_byte = dest->buffer;
-  dest->pub.free_in_buffer = OUTPUT_BUF_SIZE;
-}
-
-
-/*
- * Empty the output buffer --- called whenever buffer fills up.
- *
- * In typical applications, this should write the entire output buffer
- * (ignoring the current state of next_output_byte & free_in_buffer),
- * reset the pointer & count to the start of the buffer, and return TRUE
- * indicating that the buffer has been dumped.
- *
- * In applications that need to be able to suspend compression due to output
- * overrun, a FALSE return indicates that the buffer cannot be emptied now.
- * In this situation, the compressor will return to its caller (possibly with
- * an indication that it has not accepted all the supplied scanlines).  The
- * application should resume compression after it has made more room in the
- * output buffer.  Note that there are substantial restrictions on the use of
- * suspension --- see the documentation.
- *
- * When suspending, the compressor will back up to a convenient restart point
- * (typically the start of the current MCU). next_output_byte & free_in_buffer
- * indicate where the restart point will be if the current call returns FALSE.
- * Data beyond this point will be regenerated after resumption, so do not
- * write it out when emptying the buffer externally.
- */
-
-METHODDEF boolean
-empty_output_buffer (j_compress_ptr cinfo)
-{
-  my_dest_ptr dest = (my_dest_ptr) cinfo->dest;
-
-  if (JFWRITE(dest->outfile, dest->buffer, OUTPUT_BUF_SIZE) !=
-      (size_t) OUTPUT_BUF_SIZE)
-    ERREXIT(cinfo, JERR_FILE_WRITE);
-
-  dest->pub.next_output_byte = dest->buffer;
-  dest->pub.free_in_buffer = OUTPUT_BUF_SIZE;
-
-  return TRUE;
-}
-
-
-/*
- * Terminate destination --- called by jpeg_finish_compress
- * after all data has been written.  Usually needs to flush buffer.
- *
- * NB: *not* called by jpeg_abort or jpeg_destroy; surrounding
- * application must deal with any cleanup that should happen even
- * for error exit.
- */
-
-METHODDEF void
-term_destination (j_compress_ptr cinfo)
-{
-  my_dest_ptr dest = (my_dest_ptr) cinfo->dest;
-  size_t datacount = OUTPUT_BUF_SIZE - dest->pub.free_in_buffer;
-
-  /* Write any data remaining in the buffer */
-  if (datacount > 0) {
-    if (JFWRITE(dest->outfile, dest->buffer, datacount) != datacount)
-      ERREXIT(cinfo, JERR_FILE_WRITE);
-  }
-  fflush(dest->outfile);
-  /* Make sure we wrote the output file OK */
-  if (ferror(dest->outfile))
-    ERREXIT(cinfo, JERR_FILE_WRITE);
-}
-
-
-/*
- * Prepare for output to a stdio stream.
- * The caller must have already opened the stream, and is responsible
- * for closing it after finishing compression.
- */
-
-GLOBAL void
-jpeg_stdio_dest (j_compress_ptr cinfo, FILE * outfile)
-{
-  my_dest_ptr dest;
-
-  /* The destination object is made permanent so that multiple JPEG images
-   * can be written to the same file without re-executing jpeg_stdio_dest.
-   * This makes it dangerous to use this manager and a different destination
-   * manager serially with the same JPEG object, because their private object
-   * sizes may be different.  Caveat programmer.
-   */
-  if (cinfo->dest == NULL) {	/* first time for this JPEG object? */
-    cinfo->dest = (struct jpeg_destination_mgr *)
-      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
-				  SIZEOF(my_destination_mgr));
-  }
-
-  dest = (my_dest_ptr) cinfo->dest;
-  dest->pub.init_destination = init_destination;
-  dest->pub.empty_output_buffer = empty_output_buffer;
-  dest->pub.term_destination = term_destination;
-  dest->outfile = outfile;
-}
diff -NEaurb neo/renderer/jpeg-6/jdatasrc.c neo/renderer/jpeg-6/jdatasrc.c
--- neo/renderer/jpeg-6/jdatasrc.c	2011-12-26 04:15:38 +0000
+++ neo/renderer/jpeg-6/jdatasrc.c	1970-01-01 00:00:00 +0000
@@ -1,204 +0,0 @@
-/*
- * jdatasrc.c
- *
- * Copyright (C) 1994, Thomas G. Lane.
- * This file is part of the Independent JPEG Group's software.
- * For conditions of distribution and use, see the accompanying README file.
- *
- * This file contains decompression data source routines for the case of
- * reading JPEG data from a file (or any stdio stream).  While these routines
- * are sufficient for most applications, some will want to use a different
- * source manager.
- * IMPORTANT: we assume that fread() will correctly transcribe an array of
- * JOCTETs from 8-bit-wide elements on external storage.  If char is wider
- * than 8 bits on your machine, you may need to do some tweaking.
- */
-
-
-/* this is not a core library module, so it doesn't define JPEG_INTERNALS */
-#include "jinclude.h"
-#include "jpeglib.h"
-#include "jerror.h"
-
-
-/* Expanded data source object for stdio input */
-
-typedef struct {
-  struct jpeg_source_mgr pub;	/* public fields */
-
-  unsigned char *infile;		/* source stream */
-  JOCTET * buffer;		/* start of buffer */
-  boolean start_of_file;	/* have we gotten any data yet? */
-} my_source_mgr;
-
-typedef my_source_mgr * my_src_ptr;
-
-#define INPUT_BUF_SIZE  4096	/* choose an efficiently fread'able size */
-
-
-/*
- * Initialize source --- called by jpeg_read_header
- * before any data is actually read.
- */
-
-METHODDEF void
-init_source (j_decompress_ptr cinfo)
-{
-  my_src_ptr src = (my_src_ptr) cinfo->src;
-
-  /* We reset the empty-input-file flag for each image,
-   * but we don't clear the input buffer.
-   * This is correct behavior for reading a series of images from one source.
-   */
-  src->start_of_file = TRUE;
-}
-
-
-/*
- * Fill the input buffer --- called whenever buffer is emptied.
- *
- * In typical applications, this should read fresh data into the buffer
- * (ignoring the current state of next_input_byte & bytes_in_buffer),
- * reset the pointer & count to the start of the buffer, and return TRUE
- * indicating that the buffer has been reloaded.  It is not necessary to
- * fill the buffer entirely, only to obtain at least one more byte.
- *
- * There is no such thing as an EOF return.  If the end of the file has been
- * reached, the routine has a choice of ERREXIT() or inserting fake data into
- * the buffer.  In most cases, generating a warning message and inserting a
- * fake EOI marker is the best course of action --- this will allow the
- * decompressor to output however much of the image is there.  However,
- * the resulting error message is misleading if the real problem is an empty
- * input file, so we handle that case specially.
- *
- * In applications that need to be able to suspend compression due to input
- * not being available yet, a FALSE return indicates that no more data can be
- * obtained right now, but more may be forthcoming later.  In this situation,
- * the decompressor will return to its caller (with an indication of the
- * number of scanlines it has read, if any).  The application should resume
- * decompression after it has loaded more data into the input buffer.  Note
- * that there are substantial restrictions on the use of suspension --- see
- * the documentation.
- *
- * When suspending, the decompressor will back up to a convenient restart point
- * (typically the start of the current MCU). next_input_byte & bytes_in_buffer
- * indicate where the restart point will be if the current call returns FALSE.
- * Data beyond this point must be rescanned after resumption, so move it to
- * the front of the buffer rather than discarding it.
- */
-
-METHODDEF boolean
-fill_input_buffer (j_decompress_ptr cinfo)
-{
-  my_src_ptr src = (my_src_ptr) cinfo->src;
-
-  memcpy( src->buffer, src->infile, INPUT_BUF_SIZE );
-
-  src->infile += INPUT_BUF_SIZE;
-
-  src->pub.next_input_byte = src->buffer;
-  src->pub.bytes_in_buffer = INPUT_BUF_SIZE;
-  src->start_of_file = FALSE;
-
-  return TRUE;
-}
-
-
-/*
- * Skip data --- used to skip over a potentially large amount of
- * uninteresting data (such as an APPn marker).
- *
- * Writers of suspendable-input applications must note that skip_input_data
- * is not granted the right to give a suspension return.  If the skip extends
- * beyond the data currently in the buffer, the buffer can be marked empty so
- * that the next read will cause a fill_input_buffer call that can suspend.
- * Arranging for additional bytes to be discarded before reloading the input
- * buffer is the application writer's problem.
- */
-
-METHODDEF void
-skip_input_data (j_decompress_ptr cinfo, long num_bytes)
-{
-  my_src_ptr src = (my_src_ptr) cinfo->src;
-
-  /* Just a dumb implementation for now.  Could use fseek() except
-   * it doesn't work on pipes.  Not clear that being smart is worth
-   * any trouble anyway --- large skips are infrequent.
-   */
-  if (num_bytes > 0) {
-    while (num_bytes > (long) src->pub.bytes_in_buffer) {
-      num_bytes -= (long) src->pub.bytes_in_buffer;
-      (void) fill_input_buffer(cinfo);
-      /* note we assume that fill_input_buffer will never return FALSE,
-       * so suspension need not be handled.
-       */
-    }
-    src->pub.next_input_byte += (size_t) num_bytes;
-    src->pub.bytes_in_buffer -= (size_t) num_bytes;
-  }
-}
-
-
-/*
- * An additional method that can be provided by data source modules is the
- * resync_to_restart method for error recovery in the presence of RST markers.
- * For the moment, this source module just uses the default resync method
- * provided by the JPEG library.  That method assumes that no backtracking
- * is possible.
- */
-
-
-/*
- * Terminate source --- called by jpeg_finish_decompress
- * after all data has been read.  Often a no-op.
- *
- * NB: *not* called by jpeg_abort or jpeg_destroy; surrounding
- * application must deal with any cleanup that should happen even
- * for error exit.
- */
-
-METHODDEF void
-term_source (j_decompress_ptr cinfo)
-{
-  /* no work necessary here */
-}
-
-
-/*
- * Prepare for input from a stdio stream.
- * The caller must have already opened the stream, and is responsible
- * for closing it after finishing decompression.
- */
-
-GLOBAL void
-jpeg_stdio_src (j_decompress_ptr cinfo, unsigned char *infile)
-{
-  my_src_ptr src;
-
-  /* The source object and input buffer are made permanent so that a series
-   * of JPEG images can be read from the same file by calling jpeg_stdio_src
-   * only before the first one.  (If we discarded the buffer at the end of
-   * one image, we'd likely lose the start of the next one.)
-   * This makes it unsafe to use this manager and a different source
-   * manager serially with the same JPEG object.  Caveat programmer.
-   */
-  if (cinfo->src == NULL) {	/* first time for this JPEG object? */
-    cinfo->src = (struct jpeg_source_mgr *)
-      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
-				  SIZEOF(my_source_mgr));
-    src = (my_src_ptr) cinfo->src;
-    src->buffer = (JOCTET *)
-      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
-				  INPUT_BUF_SIZE * SIZEOF(JOCTET));
-  }
-
-  src = (my_src_ptr) cinfo->src;
-  src->pub.init_source = init_source;
-  src->pub.fill_input_buffer = fill_input_buffer;
-  src->pub.skip_input_data = skip_input_data;
-  src->pub.resync_to_restart = jpeg_resync_to_restart; /* use default method */
-  src->pub.term_source = term_source;
-  src->infile = infile;
-  src->pub.bytes_in_buffer = 0; /* forces fill_input_buffer on first read */
-  src->pub.next_input_byte = NULL; /* until buffer loaded */
-}
diff -NEaurb neo/renderer/jpeg-6/jdcoefct.c neo/renderer/jpeg-6/jdcoefct.c
--- neo/renderer/jpeg-6/jdcoefct.c	2011-12-26 04:15:38 +0000
+++ neo/renderer/jpeg-6/jdcoefct.c	1970-01-01 00:00:00 +0000
@@ -1,725 +0,0 @@
-/*
- * jdcoefct.c
- *
- * Copyright (C) 1994-1995, Thomas G. Lane.
- * This file is part of the Independent JPEG Group's software.
- * For conditions of distribution and use, see the accompanying README file.
- *
- * This file contains the coefficient buffer controller for decompression.
- * This controller is the top level of the JPEG decompressor proper.
- * The coefficient buffer lies between entropy decoding and inverse-DCT steps.
- *
- * In buffered-image mode, this controller is the interface between
- * input-oriented processing and output-oriented processing.
- * Also, the input side (only) is used when reading a file for transcoding.
- */
-
-#define JPEG_INTERNALS
-#include "jinclude.h"
-#include "jpeglib.h"
-
-/* Block smoothing is only applicable for progressive JPEG, so: */
-#ifndef D_PROGRESSIVE_SUPPORTED
-#undef BLOCK_SMOOTHING_SUPPORTED
-#endif
-
-/* Private buffer controller object */
-
-typedef struct {
-  struct jpeg_d_coef_controller pub; /* public fields */
-
-  /* These variables keep track of the current location of the input side. */
-  /* cinfo->input_iMCU_row is also used for this. */
-  JDIMENSION MCU_ctr;		/* counts MCUs processed in current row */
-  int MCU_vert_offset;		/* counts MCU rows within iMCU row */
-  int MCU_rows_per_iMCU_row;	/* number of such rows needed */
-
-  /* The output side's location is represented by cinfo->output_iMCU_row. */
-
-  /* In single-pass modes, it's sufficient to buffer just one MCU.
-   * We allocate a workspace of D_MAX_BLOCKS_IN_MCU coefficient blocks,
-   * and let the entropy decoder write into that workspace each time.
-   * (On 80x86, the workspace is FAR even though it's not really very big;
-   * this is to keep the module interfaces unchanged when a large coefficient
-   * buffer is necessary.)
-   * In multi-pass modes, this array points to the current MCU's blocks
-   * within the virtual arrays; it is used only by the input side.
-   */
-  JBLOCKROW MCU_buffer[D_MAX_BLOCKS_IN_MCU];
-
-#ifdef D_MULTISCAN_FILES_SUPPORTED
-  /* In multi-pass modes, we need a virtual block array for each component. */
-  jvirt_barray_ptr whole_image[MAX_COMPONENTS];
-#endif
-
-#ifdef BLOCK_SMOOTHING_SUPPORTED
-  /* When doing block smoothing, we latch coefficient Al values here */
-  int * coef_bits_latch;
-#define SAVED_COEFS  6		/* we save coef_bits[0..5] */
-#endif
-} my_coef_controller;
-
-typedef my_coef_controller * my_coef_ptr;
-
-/* Forward declarations */
-METHODDEF int decompress_onepass
-	JPP((j_decompress_ptr cinfo, JSAMPIMAGE output_buf));
-#ifdef D_MULTISCAN_FILES_SUPPORTED
-METHODDEF int decompress_data
-	JPP((j_decompress_ptr cinfo, JSAMPIMAGE output_buf));
-#endif
-#ifdef BLOCK_SMOOTHING_SUPPORTED
-LOCAL boolean smoothing_ok JPP((j_decompress_ptr cinfo));
-METHODDEF int decompress_smooth_data
-	JPP((j_decompress_ptr cinfo, JSAMPIMAGE output_buf));
-#endif
-
-
-LOCAL void
-start_iMCU_row (j_decompress_ptr cinfo)
-/* Reset within-iMCU-row counters for a new row (input side) */
-{
-  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
-
-  /* In an interleaved scan, an MCU row is the same as an iMCU row.
-   * In a noninterleaved scan, an iMCU row has v_samp_factor MCU rows.
-   * But at the bottom of the image, process only what's left.
-   */
-  if (cinfo->comps_in_scan > 1) {
-    coef->MCU_rows_per_iMCU_row = 1;
-  } else {
-    if (cinfo->input_iMCU_row < (cinfo->total_iMCU_rows-1))
-      coef->MCU_rows_per_iMCU_row = cinfo->cur_comp_info[0]->v_samp_factor;
-    else
-      coef->MCU_rows_per_iMCU_row = cinfo->cur_comp_info[0]->last_row_height;
-  }
-
-  coef->MCU_ctr = 0;
-  coef->MCU_vert_offset = 0;
-}
-
-
-/*
- * Initialize for an input processing pass.
- */
-
-METHODDEF void
-start_input_pass (j_decompress_ptr cinfo)
-{
-  cinfo->input_iMCU_row = 0;
-  start_iMCU_row(cinfo);
-}
-
-
-/*
- * Initialize for an output processing pass.
- */
-
-METHODDEF void
-start_output_pass (j_decompress_ptr cinfo)
-{
-#ifdef BLOCK_SMOOTHING_SUPPORTED
-  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
-
-  /* If multipass, check to see whether to use block smoothing on this pass */
-  if (coef->pub.coef_arrays != NULL) {
-    if (cinfo->do_block_smoothing && smoothing_ok(cinfo))
-      coef->pub.decompress_data = decompress_smooth_data;
-    else
-      coef->pub.decompress_data = decompress_data;
-  }
-#endif
-  cinfo->output_iMCU_row = 0;
-}
-
-
-/*
- * Decompress and return some data in the single-pass case.
- * Always attempts to emit one fully interleaved MCU row ("iMCU" row).
- * Input and output must run in lockstep since we have only a one-MCU buffer.
- * Return value is JPEG_ROW_COMPLETED, JPEG_SCAN_COMPLETED, or JPEG_SUSPENDED.
- *
- * NB: output_buf contains a plane for each component in image.
- * For single pass, this is the same as the components in the scan.
- */
-
-METHODDEF int
-decompress_onepass (j_decompress_ptr cinfo, JSAMPIMAGE output_buf)
-{
-  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
-  JDIMENSION MCU_col_num;	/* index of current MCU within row */
-  JDIMENSION last_MCU_col = cinfo->MCUs_per_row - 1;
-  JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
-  int blkn, ci, xindex, yindex, yoffset, useful_width;
-  JSAMPARRAY output_ptr;
-  JDIMENSION start_col, output_col;
-  jpeg_component_info *compptr;
-  inverse_DCT_method_ptr inverse_DCT;
-
-  /* Loop to process as much as one whole iMCU row */
-  for (yoffset = coef->MCU_vert_offset; yoffset < coef->MCU_rows_per_iMCU_row;
-       yoffset++) {
-    for (MCU_col_num = coef->MCU_ctr; MCU_col_num <= last_MCU_col;
-	 MCU_col_num++) {
-      /* Try to fetch an MCU.  Entropy decoder expects buffer to be zeroed. */
-      jzero_far((void FAR *) coef->MCU_buffer[0],
-		(size_t) (cinfo->blocks_in_MCU * SIZEOF(JBLOCK)));
-      if (! (*cinfo->entropy->decode_mcu) (cinfo, coef->MCU_buffer)) {
-	/* Suspension forced; update state counters and exit */
-	coef->MCU_vert_offset = yoffset;
-	coef->MCU_ctr = MCU_col_num;
-	return JPEG_SUSPENDED;
-      }
-      /* Determine where data should go in output_buf and do the IDCT thing.
-       * We skip dummy blocks at the right and bottom edges (but blkn gets
-       * incremented past them!).  Note the inner loop relies on having
-       * allocated the MCU_buffer[] blocks sequentially.
-       */
-      blkn = 0;			/* index of current DCT block within MCU */
-      for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
-	compptr = cinfo->cur_comp_info[ci];
-	/* Don't bother to IDCT an uninteresting component. */
-	if (! compptr->component_needed) {
-	  blkn += compptr->MCU_blocks;
-	  continue;
-	}
-	inverse_DCT = cinfo->idct->inverse_DCT[compptr->component_index];
-	useful_width = (MCU_col_num < last_MCU_col) ? compptr->MCU_width
-						    : compptr->last_col_width;
-	output_ptr = output_buf[ci] + yoffset * compptr->DCT_scaled_size;
-	start_col = MCU_col_num * compptr->MCU_sample_width;
-	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
-	  if (cinfo->input_iMCU_row < last_iMCU_row ||
-	      yoffset+yindex < compptr->last_row_height) {
-	    output_col = start_col;
-	    for (xindex = 0; xindex < useful_width; xindex++) {
-	      (*inverse_DCT) (cinfo, compptr,
-			      (JCOEFPTR) coef->MCU_buffer[blkn+xindex],
-			      output_ptr, output_col);
-	      output_col += compptr->DCT_scaled_size;
-	    }
-	  }
-	  blkn += compptr->MCU_width;
-	  output_ptr += compptr->DCT_scaled_size;
-	}
-      }
-    }
-    /* Completed an MCU row, but perhaps not an iMCU row */
-    coef->MCU_ctr = 0;
-  }
-  /* Completed the iMCU row, advance counters for next one */
-  cinfo->output_iMCU_row++;
-  if (++(cinfo->input_iMCU_row) < cinfo->total_iMCU_rows) {
-    start_iMCU_row(cinfo);
-    return JPEG_ROW_COMPLETED;
-  }
-  /* Completed the scan */
-  (*cinfo->inputctl->finish_input_pass) (cinfo);
-  return JPEG_SCAN_COMPLETED;
-}
-
-
-/*
- * Dummy consume-input routine for single-pass operation.
- */
-
-METHODDEF int
-dummy_consume_data (j_decompress_ptr cinfo)
-{
-  return JPEG_SUSPENDED;	/* Always indicate nothing was done */
-}
-
-
-#ifdef D_MULTISCAN_FILES_SUPPORTED
-
-/*
- * Consume input data and store it in the full-image coefficient buffer.
- * We read as much as one fully interleaved MCU row ("iMCU" row) per call,
- * ie, v_samp_factor block rows for each component in the scan.
- * Return value is JPEG_ROW_COMPLETED, JPEG_SCAN_COMPLETED, or JPEG_SUSPENDED.
- */
-
-METHODDEF int
-consume_data (j_decompress_ptr cinfo)
-{
-  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
-  JDIMENSION MCU_col_num;	/* index of current MCU within row */
-  int blkn, ci, xindex, yindex, yoffset;
-  JDIMENSION start_col;
-  JBLOCKARRAY buffer[MAX_COMPS_IN_SCAN];
-  JBLOCKROW buffer_ptr;
-  jpeg_component_info *compptr;
-
-  /* Align the virtual buffers for the components used in this scan. */
-  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
-    compptr = cinfo->cur_comp_info[ci];
-    buffer[ci] = (*cinfo->mem->access_virt_barray)
-      ((j_common_ptr) cinfo, coef->whole_image[compptr->component_index],
-       cinfo->input_iMCU_row * compptr->v_samp_factor,
-       (JDIMENSION) compptr->v_samp_factor, TRUE);
-    /* Note: entropy decoder expects buffer to be zeroed,
-     * but this is handled automatically by the memory manager
-     * because we requested a pre-zeroed array.
-     */
-  }
-
-  /* Loop to process one whole iMCU row */
-  for (yoffset = coef->MCU_vert_offset; yoffset < coef->MCU_rows_per_iMCU_row;
-       yoffset++) {
-    for (MCU_col_num = coef->MCU_ctr; MCU_col_num < cinfo->MCUs_per_row;
-	 MCU_col_num++) {
-      /* Construct list of pointers to DCT blocks belonging to this MCU */
-      blkn = 0;			/* index of current DCT block within MCU */
-      for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
-	compptr = cinfo->cur_comp_info[ci];
-	start_col = MCU_col_num * compptr->MCU_width;
-	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
-	  buffer_ptr = buffer[ci][yindex+yoffset] + start_col;
-	  for (xindex = 0; xindex < compptr->MCU_width; xindex++) {
-	    coef->MCU_buffer[blkn++] = buffer_ptr++;
-	  }
-	}
-      }
-      /* Try to fetch the MCU. */
-      if (! (*cinfo->entropy->decode_mcu) (cinfo, coef->MCU_buffer)) {
-	/* Suspension forced; update state counters and exit */
-	coef->MCU_vert_offset = yoffset;
-	coef->MCU_ctr = MCU_col_num;
-	return JPEG_SUSPENDED;
-      }
-    }
-    /* Completed an MCU row, but perhaps not an iMCU row */
-    coef->MCU_ctr = 0;
-  }
-  /* Completed the iMCU row, advance counters for next one */
-  if (++(cinfo->input_iMCU_row) < cinfo->total_iMCU_rows) {
-    start_iMCU_row(cinfo);
-    return JPEG_ROW_COMPLETED;
-  }
-  /* Completed the scan */
-  (*cinfo->inputctl->finish_input_pass) (cinfo);
-  return JPEG_SCAN_COMPLETED;
-}
-
-
-/*
- * Decompress and return some data in the multi-pass case.
- * Always attempts to emit one fully interleaved MCU row ("iMCU" row).
- * Return value is JPEG_ROW_COMPLETED, JPEG_SCAN_COMPLETED, or JPEG_SUSPENDED.
- *
- * NB: output_buf contains a plane for each component in image.
- */
-
-METHODDEF int
-decompress_data (j_decompress_ptr cinfo, JSAMPIMAGE output_buf)
-{
-  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
-  JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
-  JDIMENSION block_num;
-  int ci, block_row, block_rows;
-  JBLOCKARRAY buffer;
-  JBLOCKROW buffer_ptr;
-  JSAMPARRAY output_ptr;
-  JDIMENSION output_col;
-  jpeg_component_info *compptr;
-  inverse_DCT_method_ptr inverse_DCT;
-
-  /* Force some input to be done if we are getting ahead of the input. */
-  while (cinfo->input_scan_number < cinfo->output_scan_number ||
-	 (cinfo->input_scan_number == cinfo->output_scan_number &&
-	  cinfo->input_iMCU_row <= cinfo->output_iMCU_row)) {
-    if ((*cinfo->inputctl->consume_input)(cinfo) == JPEG_SUSPENDED)
-      return JPEG_SUSPENDED;
-  }
-
-  /* OK, output from the virtual arrays. */
-  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
-       ci++, compptr++) {
-    /* Don't bother to IDCT an uninteresting component. */
-    if (! compptr->component_needed)
-      continue;
-    /* Align the virtual buffer for this component. */
-    buffer = (*cinfo->mem->access_virt_barray)
-      ((j_common_ptr) cinfo, coef->whole_image[ci],
-       cinfo->output_iMCU_row * compptr->v_samp_factor,
-       (JDIMENSION) compptr->v_samp_factor, FALSE);
-    /* Count non-dummy DCT block rows in this iMCU row. */
-    if (cinfo->output_iMCU_row < last_iMCU_row)
-      block_rows = compptr->v_samp_factor;
-    else {
-      /* NB: can't use last_row_height here; it is input-side-dependent! */
-      block_rows = (int) (compptr->height_in_blocks % compptr->v_samp_factor);
-      if (block_rows == 0) block_rows = compptr->v_samp_factor;
-    }
-    inverse_DCT = cinfo->idct->inverse_DCT[ci];
-    output_ptr = output_buf[ci];
-    /* Loop over all DCT blocks to be processed. */
-    for (block_row = 0; block_row < block_rows; block_row++) {
-      buffer_ptr = buffer[block_row];
-      output_col = 0;
-      for (block_num = 0; block_num < compptr->width_in_blocks; block_num++) {
-	(*inverse_DCT) (cinfo, compptr, (JCOEFPTR) buffer_ptr,
-			output_ptr, output_col);
-	buffer_ptr++;
-	output_col += compptr->DCT_scaled_size;
-      }
-      output_ptr += compptr->DCT_scaled_size;
-    }
-  }
-
-  if (++(cinfo->output_iMCU_row) < cinfo->total_iMCU_rows)
-    return JPEG_ROW_COMPLETED;
-  return JPEG_SCAN_COMPLETED;
-}
-
-#endif /* D_MULTISCAN_FILES_SUPPORTED */
-
-
-#ifdef BLOCK_SMOOTHING_SUPPORTED
-
-/*
- * This code applies interblock smoothing as described by section K.8
- * of the JPEG standard: the first 5 AC coefficients are estimated from
- * the DC values of a DCT block and its 8 neighboring blocks.
- * We apply smoothing only for progressive JPEG decoding, and only if
- * the coefficients it can estimate are not yet known to full precision.
- */
-
-/*
- * Determine whether block smoothing is applicable and safe.
- * We also latch the current states of the coef_bits[] entries for the
- * AC coefficients; otherwise, if the input side of the decompressor
- * advances into a new scan, we might think the coefficients are known
- * more accurately than they really are.
- */
-
-LOCAL boolean
-smoothing_ok (j_decompress_ptr cinfo)
-{
-  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
-  boolean smoothing_useful = FALSE;
-  int ci, coefi;
-  jpeg_component_info *compptr;
-  JQUANT_TBL * qtable;
-  int * coef_bits;
-  int * coef_bits_latch;
-
-  if (! cinfo->progressive_mode || cinfo->coef_bits == NULL)
-    return FALSE;
-
-  /* Allocate latch area if not already done */
-  if (coef->coef_bits_latch == NULL)
-    coef->coef_bits_latch = (int *)
-      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
-				  cinfo->num_components *
-				  (SAVED_COEFS * SIZEOF(int)));
-  coef_bits_latch = coef->coef_bits_latch;
-
-  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
-       ci++, compptr++) {
-    /* All components' quantization values must already be latched. */
-    if ((qtable = compptr->quant_table) == NULL)
-      return FALSE;
-    /* Verify DC & first 5 AC quantizers are nonzero to avoid zero-divide. */
-    for (coefi = 0; coefi <= 5; coefi++) {
-      if (qtable->quantval[coefi] == 0)
-	return FALSE;
-    }
-    /* DC values must be at least partly known for all components. */
-    coef_bits = cinfo->coef_bits[ci];
-    if (coef_bits[0] < 0)
-      return FALSE;
-    /* Block smoothing is helpful if some AC coefficients remain inaccurate. */
-    for (coefi = 1; coefi <= 5; coefi++) {
-      coef_bits_latch[coefi] = coef_bits[coefi];
-      if (coef_bits[coefi] != 0)
-	smoothing_useful = TRUE;
-    }
-    coef_bits_latch += SAVED_COEFS;
-  }
-
-  return smoothing_useful;
-}
-
-
-/*
- * Variant of decompress_data for use when doing block smoothing.
- */
-
-METHODDEF int
-decompress_smooth_data (j_decompress_ptr cinfo, JSAMPIMAGE output_buf)
-{
-  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
-  JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
-  JDIMENSION block_num, last_block_column;
-  int ci, block_row, block_rows, access_rows;
-  JBLOCKARRAY buffer;
-  JBLOCKROW buffer_ptr, prev_block_row, next_block_row;
-  JSAMPARRAY output_ptr;
-  JDIMENSION output_col;
-  jpeg_component_info *compptr;
-  inverse_DCT_method_ptr inverse_DCT;
-  boolean first_row, last_row;
-  JBLOCK workspace;
-  int *coef_bits;
-  JQUANT_TBL *quanttbl;
-  INT32 Q00,Q01,Q02,Q10,Q11,Q20, num;
-  int DC1,DC2,DC3,DC4,DC5,DC6,DC7,DC8,DC9;
-  int Al, pred;
-
-  /* Force some input to be done if we are getting ahead of the input. */
-  while (cinfo->input_scan_number <= cinfo->output_scan_number &&
-	 ! cinfo->inputctl->eoi_reached) {
-    if (cinfo->input_scan_number == cinfo->output_scan_number) {
-      /* If input is working on current scan, we ordinarily want it to
-       * have completed the current row.  But if input scan is DC,
-       * we want it to keep one row ahead so that next block row's DC
-       * values are up to date.
-       */
-      JDIMENSION delta = (cinfo->Ss == 0) ? 1 : 0;
-      if (cinfo->input_iMCU_row > cinfo->output_iMCU_row+delta)
-	break;
-    }
-    if ((*cinfo->inputctl->consume_input)(cinfo) == JPEG_SUSPENDED)
-      return JPEG_SUSPENDED;
-  }
-
-  /* OK, output from the virtual arrays. */
-  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
-       ci++, compptr++) {
-    /* Don't bother to IDCT an uninteresting component. */
-    if (! compptr->component_needed)
-      continue;
-    /* Count non-dummy DCT block rows in this iMCU row. */
-    if (cinfo->output_iMCU_row < last_iMCU_row) {
-      block_rows = compptr->v_samp_factor;
-      access_rows = block_rows * 2; /* this and next iMCU row */
-      last_row = FALSE;
-    } else {
-      /* NB: can't use last_row_height here; it is input-side-dependent! */
-      block_rows = (int) (compptr->height_in_blocks % compptr->v_samp_factor);
-      if (block_rows == 0) block_rows = compptr->v_samp_factor;
-      access_rows = block_rows; /* this iMCU row only */
-      last_row = TRUE;
-    }
-    /* Align the virtual buffer for this component. */
-    if (cinfo->output_iMCU_row > 0) {
-      access_rows += compptr->v_samp_factor; /* prior iMCU row too */
-      buffer = (*cinfo->mem->access_virt_barray)
-	((j_common_ptr) cinfo, coef->whole_image[ci],
-	 (cinfo->output_iMCU_row - 1) * compptr->v_samp_factor,
-	 (JDIMENSION) access_rows, FALSE);
-      buffer += compptr->v_samp_factor;	/* point to current iMCU row */
-      first_row = FALSE;
-    } else {
-      buffer = (*cinfo->mem->access_virt_barray)
-	((j_common_ptr) cinfo, coef->whole_image[ci],
-	 (JDIMENSION) 0, (JDIMENSION) access_rows, FALSE);
-      first_row = TRUE;
-    }
-    /* Fetch component-dependent info */
-    coef_bits = coef->coef_bits_latch + (ci * SAVED_COEFS);
-    quanttbl = compptr->quant_table;
-    Q00 = quanttbl->quantval[0];
-    Q01 = quanttbl->quantval[1];
-    Q10 = quanttbl->quantval[2];
-    Q20 = quanttbl->quantval[3];
-    Q11 = quanttbl->quantval[4];
-    Q02 = quanttbl->quantval[5];
-    inverse_DCT = cinfo->idct->inverse_DCT[ci];
-    output_ptr = output_buf[ci];
-    /* Loop over all DCT blocks to be processed. */
-    for (block_row = 0; block_row < block_rows; block_row++) {
-      buffer_ptr = buffer[block_row];
-      if (first_row && block_row == 0)
-	prev_block_row = buffer_ptr;
-      else
-	prev_block_row = buffer[block_row-1];
-      if (last_row && block_row == block_rows-1)
-	next_block_row = buffer_ptr;
-      else
-	next_block_row = buffer[block_row+1];
-      /* We fetch the surrounding DC values using a sliding-register approach.
-       * Initialize all nine here so as to do the right thing on narrow pics.
-       */
-      DC1 = DC2 = DC3 = (int) prev_block_row[0][0];
-      DC4 = DC5 = DC6 = (int) buffer_ptr[0][0];
-      DC7 = DC8 = DC9 = (int) next_block_row[0][0];
-      output_col = 0;
-      last_block_column = compptr->width_in_blocks - 1;
-      for (block_num = 0; block_num <= last_block_column; block_num++) {
-	/* Fetch current DCT block into workspace so we can modify it. */
-	jcopy_block_row(buffer_ptr, (JBLOCKROW) workspace, (JDIMENSION) 1);
-	/* Update DC values */
-	if (block_num < last_block_column) {
-	  DC3 = (int) prev_block_row[1][0];
-	  DC6 = (int) buffer_ptr[1][0];
-	  DC9 = (int) next_block_row[1][0];
-	}
-	/* Compute coefficient estimates per K.8.
-	 * An estimate is applied only if coefficient is still zero,
-	 * and is not known to be fully accurate.
-	 */
-	/* AC01 */
-	if ((Al=coef_bits[1]) != 0 && workspace[1] == 0) {
-	  num = 36 * Q00 * (DC4 - DC6);
-	  if (num >= 0) {
-	    pred = (int) (((Q01<<7) + num) / (Q01<<8));
-	    if (Al > 0 && pred >= (1<<Al))
-	      pred = (1<<Al)-1;
-	  } else {
-	    pred = (int) (((Q01<<7) - num) / (Q01<<8));
-	    if (Al > 0 && pred >= (1<<Al))
-	      pred = (1<<Al)-1;
-	    pred = -pred;
-	  }
-	  workspace[1] = (JCOEF) pred;
-	}
-	/* AC10 */
-	if ((Al=coef_bits[2]) != 0 && workspace[8] == 0) {
-	  num = 36 * Q00 * (DC2 - DC8);
-	  if (num >= 0) {
-	    pred = (int) (((Q10<<7) + num) / (Q10<<8));
-	    if (Al > 0 && pred >= (1<<Al))
-	      pred = (1<<Al)-1;
-	  } else {
-	    pred = (int) (((Q10<<7) - num) / (Q10<<8));
-	    if (Al > 0 && pred >= (1<<Al))
-	      pred = (1<<Al)-1;
-	    pred = -pred;
-	  }
-	  workspace[8] = (JCOEF) pred;
-	}
-	/* AC20 */
-	if ((Al=coef_bits[3]) != 0 && workspace[16] == 0) {
-	  num = 9 * Q00 * (DC2 + DC8 - 2*DC5);
-	  if (num >= 0) {
-	    pred = (int) (((Q20<<7) + num) / (Q20<<8));
-	    if (Al > 0 && pred >= (1<<Al))
-	      pred = (1<<Al)-1;
-	  } else {
-	    pred = (int) (((Q20<<7) - num) / (Q20<<8));
-	    if (Al > 0 && pred >= (1<<Al))
-	      pred = (1<<Al)-1;
-	    pred = -pred;
-	  }
-	  workspace[16] = (JCOEF) pred;
-	}
-	/* AC11 */
-	if ((Al=coef_bits[4]) != 0 && workspace[9] == 0) {
-	  num = 5 * Q00 * (DC1 - DC3 - DC7 + DC9);
-	  if (num >= 0) {
-	    pred = (int) (((Q11<<7) + num) / (Q11<<8));
-	    if (Al > 0 && pred >= (1<<Al))
-	      pred = (1<<Al)-1;
-	  } else {
-	    pred = (int) (((Q11<<7) - num) / (Q11<<8));
-	    if (Al > 0 && pred >= (1<<Al))
-	      pred = (1<<Al)-1;
-	    pred = -pred;
-	  }
-	  workspace[9] = (JCOEF) pred;
-	}
-	/* AC02 */
-	if ((Al=coef_bits[5]) != 0 && workspace[2] == 0) {
-	  num = 9 * Q00 * (DC4 + DC6 - 2*DC5);
-	  if (num >= 0) {
-	    pred = (int) (((Q02<<7) + num) / (Q02<<8));
-	    if (Al > 0 && pred >= (1<<Al))
-	      pred = (1<<Al)-1;
-	  } else {
-	    pred = (int) (((Q02<<7) - num) / (Q02<<8));
-	    if (Al > 0 && pred >= (1<<Al))
-	      pred = (1<<Al)-1;
-	    pred = -pred;
-	  }
-	  workspace[2] = (JCOEF) pred;
-	}
-	/* OK, do the IDCT */
-	(*inverse_DCT) (cinfo, compptr, (JCOEFPTR) workspace,
-			output_ptr, output_col);
-	/* Advance for next column */
-	DC1 = DC2; DC2 = DC3;
-	DC4 = DC5; DC5 = DC6;
-	DC7 = DC8; DC8 = DC9;
-	buffer_ptr++, prev_block_row++, next_block_row++;
-	output_col += compptr->DCT_scaled_size;
-      }
-      output_ptr += compptr->DCT_scaled_size;
-    }
-  }
-
-  if (++(cinfo->output_iMCU_row) < cinfo->total_iMCU_rows)
-    return JPEG_ROW_COMPLETED;
-  return JPEG_SCAN_COMPLETED;
-}
-
-#endif /* BLOCK_SMOOTHING_SUPPORTED */
-
-
-/*
- * Initialize coefficient buffer controller.
- */
-
-GLOBAL void
-jinit_d_coef_controller (j_decompress_ptr cinfo, boolean need_full_buffer)
-{
-  my_coef_ptr coef;
-
-  coef = (my_coef_ptr)
-    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
-				SIZEOF(my_coef_controller));
-  cinfo->coef = (struct jpeg_d_coef_controller *) coef;
-  coef->pub.start_input_pass = start_input_pass;
-  coef->pub.start_output_pass = start_output_pass;
-#ifdef BLOCK_SMOOTHING_SUPPORTED
-  coef->coef_bits_latch = NULL;
-#endif
-
-  /* Create the coefficient buffer. */
-  if (need_full_buffer) {
-#ifdef D_MULTISCAN_FILES_SUPPORTED
-    /* Allocate a full-image virtual array for each component, */
-    /* padded to a multiple of samp_factor DCT blocks in each direction. */
-    /* Note we ask for a pre-zeroed array. */
-    int ci, access_rows;
-    jpeg_component_info *compptr;
-
-    for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
-	 ci++, compptr++) {
-      access_rows = compptr->v_samp_factor;
-#ifdef BLOCK_SMOOTHING_SUPPORTED
-      /* If block smoothing could be used, need a bigger window */
-      if (cinfo->progressive_mode)
-	access_rows *= 3;
-#endif
-      coef->whole_image[ci] = (*cinfo->mem->request_virt_barray)
-	((j_common_ptr) cinfo, JPOOL_IMAGE, TRUE,
-	 (JDIMENSION) jround_up((long) compptr->width_in_blocks,
-				(long) compptr->h_samp_factor),
-	 (JDIMENSION) jround_up((long) compptr->height_in_blocks,
-				(long) compptr->v_samp_factor),
-	 (JDIMENSION) access_rows);
-    }
-    coef->pub.consume_data = consume_data;
-    coef->pub.decompress_data = decompress_data;
-    coef->pub.coef_arrays = coef->whole_image; /* link to virtual arrays */
-#else
-    ERREXIT(cinfo, JERR_NOT_COMPILED);
-#endif
-  } else {
-    /* We only need a single-MCU buffer. */
-    JBLOCKROW buffer;
-    int i;
-
-    buffer = (JBLOCKROW)
-      (*cinfo->mem->alloc_large) ((j_common_ptr) cinfo, JPOOL_IMAGE,
-				  D_MAX_BLOCKS_IN_MCU * SIZEOF(JBLOCK));
-    for (i = 0; i < D_MAX_BLOCKS_IN_MCU; i++) {
-      coef->MCU_buffer[i] = buffer + i;
-    }
-    coef->pub.consume_data = dummy_consume_data;
-    coef->pub.decompress_data = decompress_onepass;
-    coef->pub.coef_arrays = NULL; /* flag for no virtual arrays */
-  }
-}
diff -NEaurb neo/renderer/jpeg-6/jdcolor.c neo/renderer/jpeg-6/jdcolor.c
--- neo/renderer/jpeg-6/jdcolor.c	2011-12-26 04:15:38 +0000
+++ neo/renderer/jpeg-6/jdcolor.c	1970-01-01 00:00:00 +0000
@@ -1,367 +0,0 @@
-/*
- * jdcolor.c
- *
- * Copyright (C) 1991-1995, Thomas G. Lane.
- * This file is part of the Independent JPEG Group's software.
- * For conditions of distribution and use, see the accompanying README file.
- *
- * This file contains output colorspace conversion routines.
- */
-
-#define JPEG_INTERNALS
-#include "jinclude.h"
-#include "jpeglib.h"
-
-
-/* Private subobject */
-
-typedef struct {
-  struct jpeg_color_deconverter pub; /* public fields */
-
-  /* Private state for YCC->RGB conversion */
-  int * Cr_r_tab;		/* => table for Cr to R conversion */
-  int * Cb_b_tab;		/* => table for Cb to B conversion */
-  INT32 * Cr_g_tab;		/* => table for Cr to G conversion */
-  INT32 * Cb_g_tab;		/* => table for Cb to G conversion */
-} my_color_deconverter;
-
-typedef my_color_deconverter * my_cconvert_ptr;
-
-
-/**************** YCbCr -> RGB conversion: most common case **************/
-
-/*
- * YCbCr is defined per CCIR 601-1, except that Cb and Cr are
- * normalized to the range 0..MAXJSAMPLE rather than -0.5 .. 0.5.
- * The conversion equations to be implemented are therefore
- *	R = Y                + 1.40200 * Cr
- *	G = Y - 0.34414 * Cb - 0.71414 * Cr
- *	B = Y + 1.77200 * Cb
- * where Cb and Cr represent the incoming values less CENTERJSAMPLE.
- * (These numbers are derived from TIFF 6.0 section 21, dated 3-June-92.)
- *
- * To avoid floating-point arithmetic, we represent the fractional constants
- * as integers scaled up by 2^16 (about 4 digits precision); we have to divide
- * the products by 2^16, with appropriate rounding, to get the correct answer.
- * Notice that Y, being an integral input, does not contribute any fraction
- * so it need not participate in the rounding.
- *
- * For even more speed, we avoid doing any multiplications in the inner loop
- * by precalculating the constants times Cb and Cr for all possible values.
- * For 8-bit JSAMPLEs this is very reasonable (only 256 entries per table);
- * for 12-bit samples it is still acceptable.  It's not very reasonable for
- * 16-bit samples, but if you want lossless storage you shouldn't be changing
- * colorspace anyway.
- * The Cr=>R and Cb=>B values can be rounded to integers in advance; the
- * values for the G calculation are left scaled up, since we must add them
- * together before rounding.
- */
-
-#define SCALEBITS	16	/* speediest right-shift on some machines */
-#define ONE_HALF	((INT32) 1 << (SCALEBITS-1))
-#define FIX(x)		((INT32) ((x) * (1L<<SCALEBITS) + 0.5))
-
-
-/*
- * Initialize tables for YCC->RGB colorspace conversion.
- */
-
-LOCAL void
-build_ycc_rgb_table (j_decompress_ptr cinfo)
-{
-  my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
-  int i;
-  INT32 x;
-  SHIFT_TEMPS
-
-  cconvert->Cr_r_tab = (int *)
-    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
-				(MAXJSAMPLE+1) * SIZEOF(int));
-  cconvert->Cb_b_tab = (int *)
-    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
-				(MAXJSAMPLE+1) * SIZEOF(int));
-  cconvert->Cr_g_tab = (INT32 *)
-    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
-				(MAXJSAMPLE+1) * SIZEOF(INT32));
-  cconvert->Cb_g_tab = (INT32 *)
-    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
-				(MAXJSAMPLE+1) * SIZEOF(INT32));
-
-  for (i = 0, x = -CENTERJSAMPLE; i <= MAXJSAMPLE; i++, x++) {
-    /* i is the actual input pixel value, in the range 0..MAXJSAMPLE */
-    /* The Cb or Cr value we are thinking of is x = i - CENTERJSAMPLE */
-    /* Cr=>R value is nearest int to 1.40200 * x */
-    cconvert->Cr_r_tab[i] = (int)
-		    RIGHT_SHIFT(FIX(1.40200) * x + ONE_HALF, SCALEBITS);
-    /* Cb=>B value is nearest int to 1.77200 * x */
-    cconvert->Cb_b_tab[i] = (int)
-		    RIGHT_SHIFT(FIX(1.77200) * x + ONE_HALF, SCALEBITS);
-    /* Cr=>G value is scaled-up -0.71414 * x */
-    cconvert->Cr_g_tab[i] = (- FIX(0.71414)) * x;
-    /* Cb=>G value is scaled-up -0.34414 * x */
-    /* We also add in ONE_HALF so that need not do it in inner loop */
-    cconvert->Cb_g_tab[i] = (- FIX(0.34414)) * x + ONE_HALF;
-  }
-}
-
-
-/*
- * Convert some rows of samples to the output colorspace.
- *
- * Note that we change from noninterleaved, one-plane-per-component format
- * to interleaved-pixel format.  The output buffer is therefore three times
- * as wide as the input buffer.
- * A starting row offset is provided only for the input buffer.  The caller
- * can easily adjust the passed output_buf value to accommodate any row
- * offset required on that side.
- */
-
-METHODDEF void
-ycc_rgb_convert (j_decompress_ptr cinfo,
-		 JSAMPIMAGE input_buf, JDIMENSION input_row,
-		 JSAMPARRAY output_buf, int num_rows)
-{
-  my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
-  register int y, cb, cr;
-  register JSAMPROW outptr;
-  register JSAMPROW inptr0, inptr1, inptr2;
-  register JDIMENSION col;
-  JDIMENSION num_cols = cinfo->output_width;
-  /* copy these pointers into registers if possible */
-  register JSAMPLE * range_limit = cinfo->sample_range_limit;
-  register int * Crrtab = cconvert->Cr_r_tab;
-  register int * Cbbtab = cconvert->Cb_b_tab;
-  register INT32 * Crgtab = cconvert->Cr_g_tab;
-  register INT32 * Cbgtab = cconvert->Cb_g_tab;
-  SHIFT_TEMPS
-
-  while (--num_rows >= 0) {
-    inptr0 = input_buf[0][input_row];
-    inptr1 = input_buf[1][input_row];
-    inptr2 = input_buf[2][input_row];
-    input_row++;
-    outptr = *output_buf++;
-    for (col = 0; col < num_cols; col++) {
-      y  = GETJSAMPLE(inptr0[col]);
-      cb = GETJSAMPLE(inptr1[col]);
-      cr = GETJSAMPLE(inptr2[col]);
-      /* Range-limiting is essential due to noise introduced by DCT losses. */
-      outptr[RGB_RED] =   range_limit[y + Crrtab[cr]];
-      outptr[RGB_GREEN] = range_limit[y +
-			      ((int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr],
-						 SCALEBITS))];
-      outptr[RGB_BLUE] =  range_limit[y + Cbbtab[cb]];
-      outptr += RGB_PIXELSIZE;
-    }
-  }
-}
-
-
-/**************** Cases other than YCbCr -> RGB **************/
-
-
-/*
- * Color conversion for no colorspace change: just copy the data,
- * converting from separate-planes to interleaved representation.
- */
-
-METHODDEF void
-null_convert (j_decompress_ptr cinfo,
-	      JSAMPIMAGE input_buf, JDIMENSION input_row,
-	      JSAMPARRAY output_buf, int num_rows)
-{
-  register JSAMPROW inptr, outptr;
-  register JDIMENSION count;
-  register int num_components = cinfo->num_components;
-  JDIMENSION num_cols = cinfo->output_width;
-  int ci;
-
-  while (--num_rows >= 0) {
-    for (ci = 0; ci < num_components; ci++) {
-      inptr = input_buf[ci][input_row];
-      outptr = output_buf[0] + ci;
-      for (count = num_cols; count > 0; count--) {
-	*outptr = *inptr++;	/* needn't bother with GETJSAMPLE() here */
-	outptr += num_components;
-      }
-    }
-    input_row++;
-    output_buf++;
-  }
-}
-
-
-/*
- * Color conversion for grayscale: just copy the data.
- * This also works for YCbCr -> grayscale conversion, in which
- * we just copy the Y (luminance) component and ignore chrominance.
- */
-
-METHODDEF void
-grayscale_convert (j_decompress_ptr cinfo,
-		   JSAMPIMAGE input_buf, JDIMENSION input_row,
-		   JSAMPARRAY output_buf, int num_rows)
-{
-  jcopy_sample_rows(input_buf[0], (int) input_row, output_buf, 0,
-		    num_rows, cinfo->output_width);
-}
-
-
-/*
- * Adobe-style YCCK->CMYK conversion.
- * We convert YCbCr to R=1-C, G=1-M, and B=1-Y using the same
- * conversion as above, while passing K (black) unchanged.
- * We assume build_ycc_rgb_table has been called.
- */
-
-METHODDEF void
-ycck_cmyk_convert (j_decompress_ptr cinfo,
-		   JSAMPIMAGE input_buf, JDIMENSION input_row,
-		   JSAMPARRAY output_buf, int num_rows)
-{
-  my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
-  register int y, cb, cr;
-  register JSAMPROW outptr;
-  register JSAMPROW inptr0, inptr1, inptr2, inptr3;
-  register JDIMENSION col;
-  JDIMENSION num_cols = cinfo->output_width;
-  /* copy these pointers into registers if possible */
-  register JSAMPLE * range_limit = cinfo->sample_range_limit;
-  register int * Crrtab = cconvert->Cr_r_tab;
-  register int * Cbbtab = cconvert->Cb_b_tab;
-  register INT32 * Crgtab = cconvert->Cr_g_tab;
-  register INT32 * Cbgtab = cconvert->Cb_g_tab;
-  SHIFT_TEMPS
-
-  while (--num_rows >= 0) {
-    inptr0 = input_buf[0][input_row];
-    inptr1 = input_buf[1][input_row];
-    inptr2 = input_buf[2][input_row];
-    inptr3 = input_buf[3][input_row];
-    input_row++;
-    outptr = *output_buf++;
-    for (col = 0; col < num_cols; col++) {
-      y  = GETJSAMPLE(inptr0[col]);
-      cb = GETJSAMPLE(inptr1[col]);
-      cr = GETJSAMPLE(inptr2[col]);
-      /* Range-limiting is essential due to noise introduced by DCT losses. */
-      outptr[0] = range_limit[MAXJSAMPLE - (y + Crrtab[cr])];	/* red */
-      outptr[1] = range_limit[MAXJSAMPLE - (y +			/* green */
-			      ((int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr],
-						 SCALEBITS)))];
-      outptr[2] = range_limit[MAXJSAMPLE - (y + Cbbtab[cb])];	/* blue */
-      /* K passes through unchanged */
-      outptr[3] = inptr3[col];	/* don't need GETJSAMPLE here */
-      outptr += 4;
-    }
-  }
-}
-
-
-/*
- * Empty method for start_pass.
- */
-
-METHODDEF void
-start_pass_dcolor (j_decompress_ptr cinfo)
-{
-  /* no work needed */
-}
-
-
-/*
- * Module initialization routine for output colorspace conversion.
- */
-
-GLOBAL void
-jinit_color_deconverter (j_decompress_ptr cinfo)
-{
-  my_cconvert_ptr cconvert;
-  int ci;
-
-  cconvert = (my_cconvert_ptr)
-    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
-				SIZEOF(my_color_deconverter));
-  cinfo->cconvert = (struct jpeg_color_deconverter *) cconvert;
-  cconvert->pub.start_pass = start_pass_dcolor;
-
-  /* Make sure num_components agrees with jpeg_color_space */
-  switch (cinfo->jpeg_color_space) {
-  case JCS_GRAYSCALE:
-    if (cinfo->num_components != 1)
-      ERREXIT(cinfo, JERR_BAD_J_COLORSPACE);
-    break;
-
-  case JCS_RGB:
-  case JCS_YCbCr:
-    if (cinfo->num_components != 3)
-      ERREXIT(cinfo, JERR_BAD_J_COLORSPACE);
-    break;
-
-  case JCS_CMYK:
-  case JCS_YCCK:
-    if (cinfo->num_components != 4)
-      ERREXIT(cinfo, JERR_BAD_J_COLORSPACE);
-    break;
-
-  default:			/* JCS_UNKNOWN can be anything */
-    if (cinfo->num_components < 1)
-      ERREXIT(cinfo, JERR_BAD_J_COLORSPACE);
-    break;
-  }
-
-  /* Set out_color_components and conversion method based on requested space.
-   * Also clear the component_needed flags for any unused components,
-   * so that earlier pipeline stages can avoid useless computation.
-   */
-
-  switch (cinfo->out_color_space) {
-  case JCS_GRAYSCALE:
-    cinfo->out_color_components = 1;
-    if (cinfo->jpeg_color_space == JCS_GRAYSCALE ||
-	cinfo->jpeg_color_space == JCS_YCbCr) {
-      cconvert->pub.color_convert = grayscale_convert;
-      /* For color->grayscale conversion, only the Y (0) component is needed */
-      for (ci = 1; ci < cinfo->num_components; ci++)
-	cinfo->comp_info[ci].component_needed = FALSE;
-    } else
-      ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
-    break;
-
-  case JCS_RGB:
-    cinfo->out_color_components = RGB_PIXELSIZE;
-    if (cinfo->jpeg_color_space == JCS_YCbCr) {
-      cconvert->pub.color_convert = ycc_rgb_convert;
-      build_ycc_rgb_table(cinfo);
-    } else if (cinfo->jpeg_color_space == JCS_RGB && RGB_PIXELSIZE == 3) {
-      cconvert->pub.color_convert = null_convert;
-    } else
-      ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
-    break;
-
-  case JCS_CMYK:
-    cinfo->out_color_components = 4;
-    if (cinfo->jpeg_color_space == JCS_YCCK) {
-      cconvert->pub.color_convert = ycck_cmyk_convert;
-      build_ycc_rgb_table(cinfo);
-    } else if (cinfo->jpeg_color_space == JCS_CMYK) {
-      cconvert->pub.color_convert = null_convert;
-    } else
-      ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
-    break;
-
-  default:
-    /* Permit null conversion to same output space */
-    if (cinfo->out_color_space == cinfo->jpeg_color_space) {
-      cinfo->out_color_components = cinfo->num_components;
-      cconvert->pub.color_convert = null_convert;
-    } else			/* unsupported non-null conversion */
-      ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
-    break;
-  }
-
-  if (cinfo->quantize_colors)
-    cinfo->output_components = 1; /* single colormapped output component */
-  else
-    cinfo->output_components = cinfo->out_color_components;
-}
diff -NEaurb neo/renderer/jpeg-6/jdct.h neo/renderer/jpeg-6/jdct.h
--- neo/renderer/jpeg-6/jdct.h	2013-08-14 01:47:52 +0000
+++ neo/renderer/jpeg-6/jdct.h	1970-01-01 00:00:00 +0000
@@ -1,176 +0,0 @@
-/*
- * jdct.h
- *
- * Copyright (C) 1994, Thomas G. Lane.
- * This file is part of the Independent JPEG Group's software.
- * For conditions of distribution and use, see the accompanying README file.
- *
- * This include file contains common declarations for the forward and
- * inverse DCT modules.  These declarations are private to the DCT managers
- * (jcdctmgr.c, jddctmgr.c) and the individual DCT algorithms.
- * The individual DCT algorithms are kept in separate files to ease
- * machine-dependent tuning (e.g., assembly coding).
- */
-
-
-/*
- * A forward DCT routine is given a pointer to a work area of type DCTELEM[];
- * the DCT is to be performed in-place in that buffer.  Type DCTELEM is int
- * for 8-bit samples, INT32 for 12-bit samples.  (NOTE: Floating-point DCT
- * implementations use an array of type FAST_FLOAT, instead.)
- * The DCT inputs are expected to be signed (range +-CENTERJSAMPLE).
- * The DCT outputs are returned scaled up by a factor of 8; they therefore
- * have a range of +-8K for 8-bit data, +-128K for 12-bit data.  This
- * convention improves accuracy in integer implementations and saves some
- * work in floating-point ones.
- * Quantization of the output coefficients is done by jcdctmgr.c.
- */
-
-#if BITS_IN_JSAMPLE == 8
-typedef int DCTELEM;		/* 16 or 32 bits is fine */
-#else
-typedef INT32 DCTELEM;		/* must have 32 bits */
-#endif
-
-typedef JMETHOD(void, forward_DCT_method_ptr, (DCTELEM * data));
-typedef JMETHOD(void, float_DCT_method_ptr, (FAST_FLOAT * data));
-
-
-/*
- * An inverse DCT routine is given a pointer to the input JBLOCK and a pointer
- * to an output sample array.  The routine must dequantize the input data as
- * well as perform the IDCT; for dequantization, it uses the multiplier table
- * pointed to by compptr->dct_table.  The output data is to be placed into the
- * sample array starting at a specified column.  (Any row offset needed will
- * be applied to the array pointer before it is passed to the IDCT code.)
- * Note that the number of samples emitted by the IDCT routine is
- * DCT_scaled_size * DCT_scaled_size.
- */
-
-/* typedef inverse_DCT_method_ptr is declared in jpegint.h */
-
-/*
- * Each IDCT routine has its own ideas about the best dct_table element type.
- */
-
-typedef MULTIPLIER ISLOW_MULT_TYPE; /* short or int, whichever is faster */
-#if BITS_IN_JSAMPLE == 8
-typedef MULTIPLIER IFAST_MULT_TYPE; /* 16 bits is OK, use short if faster */
-#define IFAST_SCALE_BITS  2	/* fractional bits in scale factors */
-#else
-typedef INT32 IFAST_MULT_TYPE;	/* need 32 bits for scaled quantizers */
-#define IFAST_SCALE_BITS  13	/* fractional bits in scale factors */
-#endif
-typedef FAST_FLOAT FLOAT_MULT_TYPE; /* preferred floating type */
-
-
-/*
- * Each IDCT routine is responsible for range-limiting its results and
- * converting them to unsigned form (0..MAXJSAMPLE).  The raw outputs could
- * be quite far out of range if the input data is corrupt, so a bulletproof
- * range-limiting step is required.  We use a mask-and-table-lookup method
- * to do the combined operations quickly.  See the comments with
- * prepare_range_limit_table (in jdmaster.c) for more info.
- */
-
-#define IDCT_range_limit(cinfo)  ((cinfo)->sample_range_limit + CENTERJSAMPLE)
-
-#define RANGE_MASK  (MAXJSAMPLE * 4 + 3) /* 2 bits wider than legal samples */
-
-
-/* Short forms of external names for systems with brain-damaged linkers. */
-
-#ifdef NEED_SHORT_EXTERNAL_NAMES
-#define jpeg_fdct_islow		jFDislow
-#define jpeg_fdct_ifast		jFDifast
-#define jpeg_fdct_float		jFDfloat
-#define jpeg_idct_islow		jRDislow
-#define jpeg_idct_ifast		jRDifast
-#define jpeg_idct_float		jRDfloat
-#define jpeg_idct_4x4		jRD4x4
-#define jpeg_idct_2x2		jRD2x2
-#define jpeg_idct_1x1		jRD1x1
-#endif /* NEED_SHORT_EXTERNAL_NAMES */
-
-/* Extern declarations for the forward and inverse DCT routines. */
-
-EXTERN void jpeg_fdct_islow JPP((DCTELEM * data));
-EXTERN void jpeg_fdct_ifast JPP((DCTELEM * data));
-EXTERN void jpeg_fdct_float JPP((FAST_FLOAT * data));
-
-EXTERN void jpeg_idct_islow
-JPP((j_decompress_ptr cinfo, jpeg_component_info * compptr,
-     JCOEFPTR coef_block, JSAMPARRAY output_buf, JDIMENSION output_col));
-EXTERN void jpeg_idct_ifast
-JPP((j_decompress_ptr cinfo, jpeg_component_info * compptr,
-     JCOEFPTR coef_block, JSAMPARRAY output_buf, JDIMENSION output_col));
-EXTERN void jpeg_idct_float
-JPP((j_decompress_ptr cinfo, jpeg_component_info * compptr,
-     JCOEFPTR coef_block, JSAMPARRAY output_buf, JDIMENSION output_col));
-EXTERN void jpeg_idct_4x4
-JPP((j_decompress_ptr cinfo, jpeg_component_info * compptr,
-     JCOEFPTR coef_block, JSAMPARRAY output_buf, JDIMENSION output_col));
-EXTERN void jpeg_idct_2x2
-JPP((j_decompress_ptr cinfo, jpeg_component_info * compptr,
-     JCOEFPTR coef_block, JSAMPARRAY output_buf, JDIMENSION output_col));
-EXTERN void jpeg_idct_1x1
-JPP((j_decompress_ptr cinfo, jpeg_component_info * compptr,
-     JCOEFPTR coef_block, JSAMPARRAY output_buf, JDIMENSION output_col));
-
-
-/*
- * Macros for handling fixed-point arithmetic; these are used by many
- * but not all of the DCT/IDCT modules.
- *
- * All values are expected to be of type INT32.
- * Fractional constants are scaled left by CONST_BITS bits.
- * CONST_BITS is defined within each module using these macros,
- * and may differ from one module to the next.
- */
-
-#define ONE	((INT32) 1)
-#define CONST_SCALE (ONE << CONST_BITS)
-
-/* Convert a positive real constant to an integer scaled by CONST_SCALE.
- * Caution: some C compilers fail to reduce "FIX(constant)" at compile time,
- * thus causing a lot of useless floating-point operations at run time.
- */
-
-#define FIX(x)	((INT32) ((x) * CONST_SCALE + 0.5))
-
-/* Descale and correctly round an INT32 value that's scaled by N bits.
- * We assume RIGHT_SHIFT rounds towards minus infinity, so adding
- * the fudge factor is correct for either sign of X.
- */
-
-#define DESCALE(x,n)  RIGHT_SHIFT((x) + (ONE << ((n)-1)), n)
-
-/* Multiply an INT32 variable by an INT32 constant to yield an INT32 result.
- * This macro is used only when the two inputs will actually be no more than
- * 16 bits wide, so that a 16x16->32 bit multiply can be used instead of a
- * full 32x32 multiply.  This provides a useful speedup on many machines.
- * Unfortunately there is no way to specify a 16x16->32 multiply portably
- * in C, but some C compilers will do the right thing if you provide the
- * correct combination of casts.
- */
-
-#ifdef SHORTxSHORT_32		/* may work if 'int' is 32 bits */
-#define MULTIPLY16C16(var,const)  (((INT16) (var)) * ((INT16) (const)))
-#endif
-#ifdef SHORTxLCONST_32		/* known to work with Microsoft C 6.0 */
-#define MULTIPLY16C16(var,const)  (((INT16) (var)) * ((INT32) (const)))
-#endif
-
-#ifndef MULTIPLY16C16		/* default definition */
-#define MULTIPLY16C16(var,const)  ((var) * (const))
-#endif
-
-/* Same except both inputs are variables. */
-
-#ifdef SHORTxSHORT_32		/* may work if 'int' is 32 bits */
-#define MULTIPLY16V16(var1,var2)  (((INT16) (var1)) * ((INT16) (var2)))
-#endif
-
-#ifndef MULTIPLY16V16		/* default definition */
-#define MULTIPLY16V16(var1,var2)  ((var1) * (var2))
-#endif
diff -NEaurb neo/renderer/jpeg-6/jddctmgr.c neo/renderer/jpeg-6/jddctmgr.c
--- neo/renderer/jpeg-6/jddctmgr.c	2011-12-26 04:15:38 +0000
+++ neo/renderer/jpeg-6/jddctmgr.c	1970-01-01 00:00:00 +0000
@@ -1,270 +0,0 @@
-/*
- * jddctmgr.c
- *
- * Copyright (C) 1994-1995, Thomas G. Lane.
- * This file is part of the Independent JPEG Group's software.
- * For conditions of distribution and use, see the accompanying README file.
- *
- * This file contains the inverse-DCT management logic.
- * This code selects a particular IDCT implementation to be used,
- * and it performs related housekeeping chores.  No code in this file
- * is executed per IDCT step, only during output pass setup.
- *
- * Note that the IDCT routines are responsible for performing coefficient
- * dequantization as well as the IDCT proper.  This module sets up the
- * dequantization multiplier table needed by the IDCT routine.
- */
-
-#define JPEG_INTERNALS
-#include "jinclude.h"
-#include "jpeglib.h"
-#include "jdct.h"		/* Private declarations for DCT subsystem */
-
-
-/*
- * The decompressor input side (jdinput.c) saves away the appropriate
- * quantization table for each component at the start of the first scan
- * involving that component.  (This is necessary in order to correctly
- * decode files that reuse Q-table slots.)
- * When we are ready to make an output pass, the saved Q-table is converted
- * to a multiplier table that will actually be used by the IDCT routine.
- * The multiplier table contents are IDCT-method-dependent.  To support
- * application changes in IDCT method between scans, we can remake the
- * multiplier tables if necessary.
- * In buffered-image mode, the first output pass may occur before any data
- * has been seen for some components, and thus before their Q-tables have
- * been saved away.  To handle this case, multiplier tables are preset
- * to zeroes; the result of the IDCT will be a neutral gray level.
- */
-
-
-/* Private subobject for this module */
-
-typedef struct {
-  struct jpeg_inverse_dct pub;	/* public fields */
-
-  /* This array contains the IDCT method code that each multiplier table
-   * is currently set up for, or -1 if it's not yet set up.
-   * The actual multiplier tables are pointed to by dct_table in the
-   * per-component comp_info structures.
-   */
-  int cur_method[MAX_COMPONENTS];
-} my_idct_controller;
-
-typedef my_idct_controller * my_idct_ptr;
-
-
-/* Allocated multiplier tables: big enough for any supported variant */
-
-typedef union {
-  ISLOW_MULT_TYPE islow_array[DCTSIZE2];
-#ifdef DCT_IFAST_SUPPORTED
-  IFAST_MULT_TYPE ifast_array[DCTSIZE2];
-#endif
-#ifdef DCT_FLOAT_SUPPORTED
-  FLOAT_MULT_TYPE float_array[DCTSIZE2];
-#endif
-} multiplier_table;
-
-
-/* The current scaled-IDCT routines require ISLOW-style multiplier tables,
- * so be sure to compile that code if either ISLOW or SCALING is requested.
- */
-#ifdef DCT_ISLOW_SUPPORTED
-#define PROVIDE_ISLOW_TABLES
-#else
-#ifdef IDCT_SCALING_SUPPORTED
-#define PROVIDE_ISLOW_TABLES
-#endif
-#endif
-
-
-/*
- * Prepare for an output pass.
- * Here we select the proper IDCT routine for each component and build
- * a matching multiplier table.
- */
-
-METHODDEF void
-start_pass (j_decompress_ptr cinfo)
-{
-  my_idct_ptr idct = (my_idct_ptr) cinfo->idct;
-  int ci, i;
-  jpeg_component_info *compptr;
-  int method = 0;
-  inverse_DCT_method_ptr method_ptr = NULL;
-  JQUANT_TBL * qtbl;
-
-  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
-       ci++, compptr++) {
-    /* Select the proper IDCT routine for this component's scaling */
-    switch (compptr->DCT_scaled_size) {
-#ifdef IDCT_SCALING_SUPPORTED
-    case 1:
-      method_ptr = jpeg_idct_1x1;
-      method = JDCT_ISLOW;	/* jidctred uses islow-style table */
-      break;
-    case 2:
-      method_ptr = jpeg_idct_2x2;
-      method = JDCT_ISLOW;	/* jidctred uses islow-style table */
-      break;
-    case 4:
-      method_ptr = jpeg_idct_4x4;
-      method = JDCT_ISLOW;	/* jidctred uses islow-style table */
-      break;
-#endif
-    case DCTSIZE:
-      switch (cinfo->dct_method) {
-#ifdef DCT_ISLOW_SUPPORTED
-      case JDCT_ISLOW:
-	method_ptr = jpeg_idct_islow;
-	method = JDCT_ISLOW;
-	break;
-#endif
-#ifdef DCT_IFAST_SUPPORTED
-      case JDCT_IFAST:
-	method_ptr = jpeg_idct_ifast;
-	method = JDCT_IFAST;
-	break;
-#endif
-#ifdef DCT_FLOAT_SUPPORTED
-      case JDCT_FLOAT:
-	method_ptr = jpeg_idct_float;
-	method = JDCT_FLOAT;
-	break;
-#endif
-      default:
-	ERREXIT(cinfo, JERR_NOT_COMPILED);
-	break;
-      }
-      break;
-    default:
-      ERREXIT1(cinfo, JERR_BAD_DCTSIZE, compptr->DCT_scaled_size);
-      break;
-    }
-    idct->pub.inverse_DCT[ci] = method_ptr;
-    /* Create multiplier table from quant table.
-     * However, we can skip this if the component is uninteresting
-     * or if we already built the table.  Also, if no quant table
-     * has yet been saved for the component, we leave the
-     * multiplier table all-zero; we'll be reading zeroes from the
-     * coefficient controller's buffer anyway.
-     */
-    if (! compptr->component_needed || idct->cur_method[ci] == method)
-      continue;
-    qtbl = compptr->quant_table;
-    if (qtbl == NULL)		/* happens if no data yet for component */
-      continue;
-    idct->cur_method[ci] = method;
-    switch (method) {
-#ifdef PROVIDE_ISLOW_TABLES
-    case JDCT_ISLOW:
-      {
-	/* For LL&M IDCT method, multipliers are equal to raw quantization
-	 * coefficients, but are stored in natural order as ints.
-	 */
-	ISLOW_MULT_TYPE * ismtbl = (ISLOW_MULT_TYPE *) compptr->dct_table;
-	for (i = 0; i < DCTSIZE2; i++) {
-	  ismtbl[i] = (ISLOW_MULT_TYPE) qtbl->quantval[jpeg_zigzag_order[i]];
-	}
-      }
-      break;
-#endif
-#ifdef DCT_IFAST_SUPPORTED
-    case JDCT_IFAST:
-      {
-	/* For AA&N IDCT method, multipliers are equal to quantization
-	 * coefficients scaled by scalefactor[row]*scalefactor[col], where
-	 *   scalefactor[0] = 1
-	 *   scalefactor[k] = cos(k*PI/16) * sqrt(2)    for k=1..7
-	 * For integer operation, the multiplier table is to be scaled by
-	 * IFAST_SCALE_BITS.  The multipliers are stored in natural order.
-	 */
-	IFAST_MULT_TYPE * ifmtbl = (IFAST_MULT_TYPE *) compptr->dct_table;
-#define CONST_BITS 14
-	static const INT16 aanscales[DCTSIZE2] = {
-	  /* precomputed values scaled up by 14 bits */
-	  16384, 22725, 21407, 19266, 16384, 12873,  8867,  4520,
-	  22725, 31521, 29692, 26722, 22725, 17855, 12299,  6270,
-	  21407, 29692, 27969, 25172, 21407, 16819, 11585,  5906,
-	  19266, 26722, 25172, 22654, 19266, 15137, 10426,  5315,
-	  16384, 22725, 21407, 19266, 16384, 12873,  8867,  4520,
-	  12873, 17855, 16819, 15137, 12873, 10114,  6967,  3552,
-	   8867, 12299, 11585, 10426,  8867,  6967,  4799,  2446,
-	   4520,  6270,  5906,  5315,  4520,  3552,  2446,  1247
-	};
-	SHIFT_TEMPS
-
-	for (i = 0; i < DCTSIZE2; i++) {
-	  ifmtbl[i] = (IFAST_MULT_TYPE)
-	    DESCALE(MULTIPLY16V16((INT32) qtbl->quantval[jpeg_zigzag_order[i]],
-				  (INT32) aanscales[i]),
-		    CONST_BITS-IFAST_SCALE_BITS);
-	}
-      }
-      break;
-#endif
-#ifdef DCT_FLOAT_SUPPORTED
-    case JDCT_FLOAT:
-      {
-	/* For float AA&N IDCT method, multipliers are equal to quantization
-	 * coefficients scaled by scalefactor[row]*scalefactor[col], where
-	 *   scalefactor[0] = 1
-	 *   scalefactor[k] = cos(k*PI/16) * sqrt(2)    for k=1..7
-	 * The multipliers are stored in natural order.
-	 */
-	FLOAT_MULT_TYPE * fmtbl = (FLOAT_MULT_TYPE *) compptr->dct_table;
-	int row, col;
-	static const double aanscalefactor[DCTSIZE] = {
-	  1.0, 1.387039845, 1.306562965, 1.175875602,
-	  1.0, 0.785694958, 0.541196100, 0.275899379
-	};
-
-	i = 0;
-	for (row = 0; row < DCTSIZE; row++) {
-	  for (col = 0; col < DCTSIZE; col++) {
-	    fmtbl[i] = (FLOAT_MULT_TYPE)
-	      ((double) qtbl->quantval[jpeg_zigzag_order[i]] *
-	       aanscalefactor[row] * aanscalefactor[col]);
-	    i++;
-	  }
-	}
-      }
-      break;
-#endif
-    default:
-      ERREXIT(cinfo, JERR_NOT_COMPILED);
-      break;
-    }
-  }
-}
-
-
-/*
- * Initialize IDCT manager.
- */
-
-GLOBAL void
-jinit_inverse_dct (j_decompress_ptr cinfo)
-{
-  my_idct_ptr idct;
-  int ci;
-  jpeg_component_info *compptr;
-
-  idct = (my_idct_ptr)
-    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
-				SIZEOF(my_idct_controller));
-  cinfo->idct = (struct jpeg_inverse_dct *) idct;
-  idct->pub.start_pass = start_pass;
-
-  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
-       ci++, compptr++) {
-    /* Allocate and pre-zero a multiplier table for each component */
-    compptr->dct_table =
-      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
-				  SIZEOF(multiplier_table));
-    MEMZERO(compptr->dct_table, SIZEOF(multiplier_table));
-    /* Mark multiplier table not yet set up for any method */
-    idct->cur_method[ci] = -1;
-  }
-}
diff -NEaurb neo/renderer/jpeg-6/jdhuff.c neo/renderer/jpeg-6/jdhuff.c
--- neo/renderer/jpeg-6/jdhuff.c	2011-12-26 04:15:38 +0000
+++ neo/renderer/jpeg-6/jdhuff.c	1970-01-01 00:00:00 +0000
@@ -1,574 +0,0 @@
-/*
- * jdhuff.c
- *
- * Copyright (C) 1991-1995, Thomas G. Lane.
- * This file is part of the Independent JPEG Group's software.
- * For conditions of distribution and use, see the accompanying README file.
- *
- * This file contains Huffman entropy decoding routines.
- *
- * Much of the complexity here has to do with supporting input suspension.
- * If the data source module demands suspension, we want to be able to back
- * up to the start of the current MCU.  To do this, we copy state variables
- * into local working storage, and update them back to the permanent
- * storage only upon successful completion of an MCU.
- */
-
-#define JPEG_INTERNALS
-#include "jinclude.h"
-#include "jpeglib.h"
-#include "jdhuff.h"		/* Declarations shared with jdphuff.c */
-
-
-/*
- * Expanded entropy decoder object for Huffman decoding.
- *
- * The savable_state subrecord contains fields that change within an MCU,
- * but must not be updated permanently until we complete the MCU.
- */
-
-typedef struct {
-  int last_dc_val[MAX_COMPS_IN_SCAN]; /* last DC coef for each component */
-} savable_state;
-
-/* This macro is to work around compilers with missing or broken
- * structure assignment.  You'll need to fix this code if you have
- * such a compiler and you change MAX_COMPS_IN_SCAN.
- */
-
-#ifndef NO_STRUCT_ASSIGN
-#define ASSIGN_STATE(dest,src)  ((dest) = (src))
-#else
-#if MAX_COMPS_IN_SCAN == 4
-#define ASSIGN_STATE(dest,src)  \
-	((dest).last_dc_val[0] = (src).last_dc_val[0], \
-	 (dest).last_dc_val[1] = (src).last_dc_val[1], \
-	 (dest).last_dc_val[2] = (src).last_dc_val[2], \
-	 (dest).last_dc_val[3] = (src).last_dc_val[3])
-#endif
-#endif
-
-
-typedef struct {
-  struct jpeg_entropy_decoder pub; /* public fields */
-
-  /* These fields are loaded into local variables at start of each MCU.
-   * In case of suspension, we exit WITHOUT updating them.
-   */
-  bitread_perm_state bitstate;	/* Bit buffer at start of MCU */
-  savable_state saved;		/* Other state at start of MCU */
-
-  /* These fields are NOT loaded into local working state. */
-  unsigned int restarts_to_go;	/* MCUs left in this restart interval */
-
-  /* Pointers to derived tables (these workspaces have image lifespan) */
-  d_derived_tbl * dc_derived_tbls[NUM_HUFF_TBLS];
-  d_derived_tbl * ac_derived_tbls[NUM_HUFF_TBLS];
-} huff_entropy_decoder;
-
-typedef huff_entropy_decoder * huff_entropy_ptr;
-
-
-/*
- * Initialize for a Huffman-compressed scan.
- */
-
-METHODDEF void
-start_pass_huff_decoder (j_decompress_ptr cinfo)
-{
-  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
-  int ci, dctbl, actbl;
-  jpeg_component_info * compptr;
-
-  /* Check that the scan parameters Ss, Se, Ah/Al are OK for sequential JPEG.
-   * This ought to be an error condition, but we make it a warning because
-   * there are some baseline files out there with all zeroes in these bytes.
-   */
-  if (cinfo->Ss != 0 || cinfo->Se != DCTSIZE2-1 ||
-      cinfo->Ah != 0 || cinfo->Al != 0)
-    WARNMS(cinfo, JWRN_NOT_SEQUENTIAL);
-
-  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
-    compptr = cinfo->cur_comp_info[ci];
-    dctbl = compptr->dc_tbl_no;
-    actbl = compptr->ac_tbl_no;
-    /* Make sure requested tables are present */
-    if (dctbl < 0 || dctbl >= NUM_HUFF_TBLS ||
-	cinfo->dc_huff_tbl_ptrs[dctbl] == NULL)
-      ERREXIT1(cinfo, JERR_NO_HUFF_TABLE, dctbl);
-    if (actbl < 0 || actbl >= NUM_HUFF_TBLS ||
-	cinfo->ac_huff_tbl_ptrs[actbl] == NULL)
-      ERREXIT1(cinfo, JERR_NO_HUFF_TABLE, actbl);
-    /* Compute derived values for Huffman tables */
-    /* We may do this more than once for a table, but it's not expensive */
-    jpeg_make_d_derived_tbl(cinfo, cinfo->dc_huff_tbl_ptrs[dctbl],
-			    & entropy->dc_derived_tbls[dctbl]);
-    jpeg_make_d_derived_tbl(cinfo, cinfo->ac_huff_tbl_ptrs[actbl],
-			    & entropy->ac_derived_tbls[actbl]);
-    /* Initialize DC predictions to 0 */
-    entropy->saved.last_dc_val[ci] = 0;
-  }
-
-  /* Initialize bitread state variables */
-  entropy->bitstate.bits_left = 0;
-  entropy->bitstate.get_buffer = 0; /* unnecessary, but keeps Purify quiet */
-  entropy->bitstate.printed_eod = FALSE;
-
-  /* Initialize restart counter */
-  entropy->restarts_to_go = cinfo->restart_interval;
-}
-
-
-/*
- * Compute the derived values for a Huffman table.
- * Note this is also used by jdphuff.c.
- */
-
-GLOBAL void
-jpeg_make_d_derived_tbl (j_decompress_ptr cinfo, JHUFF_TBL * htbl,
-			 d_derived_tbl ** pdtbl)
-{
-  d_derived_tbl *dtbl;
-  int p, i, l, si;
-  int lookbits, ctr;
-  char huffsize[257];
-  unsigned int huffcode[257];
-  unsigned int code;
-
-  /* Allocate a workspace if we haven't already done so. */
-  if (*pdtbl == NULL)
-    *pdtbl = (d_derived_tbl *)
-      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
-				  SIZEOF(d_derived_tbl));
-  dtbl = *pdtbl;
-  dtbl->pub = htbl;		/* fill in back link */
-  
-  /* Figure C.1: make table of Huffman code length for each symbol */
-  /* Note that this is in code-length order. */
-
-  p = 0;
-  for (l = 1; l <= 16; l++) {
-    for (i = 1; i <= (int) htbl->bits[l]; i++)
-      huffsize[p++] = (char) l;
-  }
-  huffsize[p] = 0;
-  
-  /* Figure C.2: generate the codes themselves */
-  /* Note that this is in code-length order. */
-  
-  code = 0;
-  si = huffsize[0];
-  p = 0;
-  while (huffsize[p]) {
-    while (((int) huffsize[p]) == si) {
-      huffcode[p++] = code;
-      code++;
-    }
-    code <<= 1;
-    si++;
-  }
-
-  /* Figure F.15: generate decoding tables for bit-sequential decoding */
-
-  p = 0;
-  for (l = 1; l <= 16; l++) {
-    if (htbl->bits[l]) {
-      dtbl->valptr[l] = p; /* huffval[] index of 1st symbol of code length l */
-      dtbl->mincode[l] = huffcode[p]; /* minimum code of length l */
-      p += htbl->bits[l];
-      dtbl->maxcode[l] = huffcode[p-1]; /* maximum code of length l */
-    } else {
-      dtbl->maxcode[l] = -1;	/* -1 if no codes of this length */
-    }
-  }
-  dtbl->maxcode[17] = 0xFFFFFL; /* ensures jpeg_huff_decode terminates */
-
-  /* Compute lookahead tables to speed up decoding.
-   * First we set all the table entries to 0, indicating "too long";
-   * then we iterate through the Huffman codes that are short enough and
-   * fill in all the entries that correspond to bit sequences starting
-   * with that code.
-   */
-
-  MEMZERO(dtbl->look_nbits, SIZEOF(dtbl->look_nbits));
-
-  p = 0;
-  for (l = 1; l <= HUFF_LOOKAHEAD; l++) {
-    for (i = 1; i <= (int) htbl->bits[l]; i++, p++) {
-      /* l = current code's length, p = its index in huffcode[] & huffval[]. */
-      /* Generate left-justified code followed by all possible bit sequences */
-      lookbits = huffcode[p] << (HUFF_LOOKAHEAD-l);
-      for (ctr = 1 << (HUFF_LOOKAHEAD-l); ctr > 0; ctr--) {
-	dtbl->look_nbits[lookbits] = l;
-	dtbl->look_sym[lookbits] = htbl->huffval[p];
-	lookbits++;
-      }
-    }
-  }
-}
-
-
-/*
- * Out-of-line code for bit fetching (shared with jdphuff.c).
- * See jdhuff.h for info about usage.
- * Note: current values of get_buffer and bits_left are passed as parameters,
- * but are returned in the corresponding fields of the state struct.
- *
- * On most machines MIN_GET_BITS should be 25 to allow the full 32-bit width
- * of get_buffer to be used.  (On machines with wider words, an even larger
- * buffer could be used.)  However, on some machines 32-bit shifts are
- * quite slow and take time proportional to the number of places shifted.
- * (This is true with most PC compilers, for instance.)  In this case it may
- * be a win to set MIN_GET_BITS to the minimum value of 15.  This reduces the
- * average shift distance at the cost of more calls to jpeg_fill_bit_buffer.
- */
-
-#ifdef SLOW_SHIFT_32
-#define MIN_GET_BITS  15	/* minimum allowable value */
-#else
-#define MIN_GET_BITS  (BIT_BUF_SIZE-7)
-#endif
-
-
-GLOBAL boolean
-jpeg_fill_bit_buffer (bitread_working_state * state,
-		      register bit_buf_type get_buffer, register int bits_left,
-		      int nbits)
-/* Load up the bit buffer to a depth of at least nbits */
-{
-  /* Copy heavily used state fields into locals (hopefully registers) */
-  register const JOCTET * next_input_byte = state->next_input_byte;
-  register size_t bytes_in_buffer = state->bytes_in_buffer;
-  register int c;
-
-  /* Attempt to load at least MIN_GET_BITS bits into get_buffer. */
-  /* (It is assumed that no request will be for more than that many bits.) */
-
-  while (bits_left < MIN_GET_BITS) {
-    /* Attempt to read a byte */
-    if (state->unread_marker != 0)
-      goto no_more_data;	/* can't advance past a marker */
-
-    if (bytes_in_buffer == 0) {
-      if (! (*state->cinfo->src->fill_input_buffer) (state->cinfo))
-	return FALSE;
-      next_input_byte = state->cinfo->src->next_input_byte;
-      bytes_in_buffer = state->cinfo->src->bytes_in_buffer;
-    }
-    bytes_in_buffer--;
-    c = GETJOCTET(*next_input_byte++);
-
-    /* If it's 0xFF, check and discard stuffed zero byte */
-    if (c == 0xFF) {
-      do {
-	if (bytes_in_buffer == 0) {
-	  if (! (*state->cinfo->src->fill_input_buffer) (state->cinfo))
-	    return FALSE;
-	  next_input_byte = state->cinfo->src->next_input_byte;
-	  bytes_in_buffer = state->cinfo->src->bytes_in_buffer;
-	}
-	bytes_in_buffer--;
-	c = GETJOCTET(*next_input_byte++);
-      } while (c == 0xFF);
-
-      if (c == 0) {
-	/* Found FF/00, which represents an FF data byte */
-	c = 0xFF;
-      } else {
-	/* Oops, it's actually a marker indicating end of compressed data. */
-	/* Better put it back for use later */
-	state->unread_marker = c;
-
-      no_more_data:
-	/* There should be enough bits still left in the data segment; */
-	/* if so, just break out of the outer while loop. */
-	if (bits_left >= nbits)
-	  break;
-	/* Uh-oh.  Report corrupted data to user and stuff zeroes into
-	 * the data stream, so that we can produce some kind of image.
-	 * Note that this code will be repeated for each byte demanded
-	 * for the rest of the segment.  We use a nonvolatile flag to ensure
-	 * that only one warning message appears.
-	 */
-	if (! *(state->printed_eod_ptr)) {
-	  WARNMS(state->cinfo, JWRN_HIT_MARKER);
-	  *(state->printed_eod_ptr) = TRUE;
-	}
-	c = 0;			/* insert a zero byte into bit buffer */
-      }
-    }
-
-    /* OK, load c into get_buffer */
-    get_buffer = (get_buffer << 8) | c;
-    bits_left += 8;
-  }
-
-  /* Unload the local registers */
-  state->next_input_byte = next_input_byte;
-  state->bytes_in_buffer = bytes_in_buffer;
-  state->get_buffer = get_buffer;
-  state->bits_left = bits_left;
-
-  return TRUE;
-}
-
-
-/*
- * Out-of-line code for Huffman code decoding.
- * See jdhuff.h for info about usage.
- */
-
-GLOBAL int
-jpeg_huff_decode (bitread_working_state * state,
-		  register bit_buf_type get_buffer, register int bits_left,
-		  d_derived_tbl * htbl, int min_bits)
-{
-  register int l = min_bits;
-  register INT32 code;
-
-  /* HUFF_DECODE has determined that the code is at least min_bits */
-  /* bits long, so fetch that many bits in one swoop. */
-
-  CHECK_BIT_BUFFER(*state, l, return -1);
-  code = GET_BITS(l);
-
-  /* Collect the rest of the Huffman code one bit at a time. */
-  /* This is per Figure F.16 in the JPEG spec. */
-
-  while (code > htbl->maxcode[l]) {
-    code <<= 1;
-    CHECK_BIT_BUFFER(*state, 1, return -1);
-    code |= GET_BITS(1);
-    l++;
-  }
-
-  /* Unload the local registers */
-  state->get_buffer = get_buffer;
-  state->bits_left = bits_left;
-
-  /* With garbage input we may reach the sentinel value l = 17. */
-
-  if (l > 16) {
-    WARNMS(state->cinfo, JWRN_HUFF_BAD_CODE);
-    return 0;			/* fake a zero as the safest result */
-  }
-
-  return htbl->pub->huffval[ htbl->valptr[l] +
-			    ((int) (code - htbl->mincode[l])) ];
-}
-
-
-/*
- * Figure F.12: extend sign bit.
- * On some machines, a shift and add will be faster than a table lookup.
- */
-
-#ifdef AVOID_TABLES
-
-#define HUFF_EXTEND(x,s)  ((x) < (1<<((s)-1)) ? (x) + (((-1)<<(s)) + 1) : (x))
-
-#else
-
-#define HUFF_EXTEND(x,s)  ((x) < extend_test[s] ? (x) + extend_offset[s] : (x))
-
-static const int extend_test[16] =   /* entry n is 2**(n-1) */
-  { 0, 0x0001, 0x0002, 0x0004, 0x0008, 0x0010, 0x0020, 0x0040, 0x0080,
-    0x0100, 0x0200, 0x0400, 0x0800, 0x1000, 0x2000, 0x4000 };
-
-static const int extend_offset[16] = /* entry n is (-1 << n) + 1 */
-  { 0, ((-1)<<1) + 1, ((-1)<<2) + 1, ((-1)<<3) + 1, ((-1)<<4) + 1,
-    ((-1)<<5) + 1, ((-1)<<6) + 1, ((-1)<<7) + 1, ((-1)<<8) + 1,
-    ((-1)<<9) + 1, ((-1)<<10) + 1, ((-1)<<11) + 1, ((-1)<<12) + 1,
-    ((-1)<<13) + 1, ((-1)<<14) + 1, ((-1)<<15) + 1 };
-
-#endif /* AVOID_TABLES */
-
-
-/*
- * Check for a restart marker & resynchronize decoder.
- * Returns FALSE if must suspend.
- */
-
-LOCAL boolean
-process_restart (j_decompress_ptr cinfo)
-{
-  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
-  int ci;
-
-  /* Throw away any unused bits remaining in bit buffer; */
-  /* include any full bytes in next_marker's count of discarded bytes */
-  cinfo->marker->discarded_bytes += entropy->bitstate.bits_left / 8;
-  entropy->bitstate.bits_left = 0;
-
-  /* Advance past the RSTn marker */
-  if (! (*cinfo->marker->read_restart_marker) (cinfo))
-    return FALSE;
-
-  /* Re-initialize DC predictions to 0 */
-  for (ci = 0; ci < cinfo->comps_in_scan; ci++)
-    entropy->saved.last_dc_val[ci] = 0;
-
-  /* Reset restart counter */
-  entropy->restarts_to_go = cinfo->restart_interval;
-
-  /* Next segment can get another out-of-data warning */
-  entropy->bitstate.printed_eod = FALSE;
-
-  return TRUE;
-}
-
-
-/*
- * Decode and return one MCU's worth of Huffman-compressed coefficients.
- * The coefficients are reordered from zigzag order into natural array order,
- * but are not dequantized.
- *
- * The i'th block of the MCU is stored into the block pointed to by
- * MCU_data[i].  WE ASSUME THIS AREA HAS BEEN ZEROED BY THE CALLER.
- * (Wholesale zeroing is usually a little faster than retail...)
- *
- * Returns FALSE if data source requested suspension.  In that case no
- * changes have been made to permanent state.  (Exception: some output
- * coefficients may already have been assigned.  This is harmless for
- * this module, since we'll just re-assign them on the next call.)
- */
-
-METHODDEF boolean
-decode_mcu (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
-{
-  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
-  register int s, k, r;
-  int blkn, ci;
-  JBLOCKROW block;
-  BITREAD_STATE_VARS;
-  savable_state state;
-  d_derived_tbl * dctbl;
-  d_derived_tbl * actbl;
-  jpeg_component_info * compptr;
-
-  /* Process restart marker if needed; may have to suspend */
-  if (cinfo->restart_interval) {
-    if (entropy->restarts_to_go == 0)
-      if (! process_restart(cinfo))
-	return FALSE;
-  }
-
-  /* Load up working state */
-  BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
-  ASSIGN_STATE(state, entropy->saved);
-
-  /* Outer loop handles each block in the MCU */
-
-  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
-    block = MCU_data[blkn];
-    ci = cinfo->MCU_membership[blkn];
-    compptr = cinfo->cur_comp_info[ci];
-    dctbl = entropy->dc_derived_tbls[compptr->dc_tbl_no];
-    actbl = entropy->ac_derived_tbls[compptr->ac_tbl_no];
-
-    /* Decode a single block's worth of coefficients */
-
-    /* Section F.2.2.1: decode the DC coefficient difference */
-    HUFF_DECODE(s, br_state, dctbl, return FALSE, label1);
-    if (s) {
-      CHECK_BIT_BUFFER(br_state, s, return FALSE);
-      r = GET_BITS(s);
-      s = HUFF_EXTEND(r, s);
-    }
-
-    /* Shortcut if component's values are not interesting */
-    if (! compptr->component_needed)
-      goto skip_ACs;
-
-    /* Convert DC difference to actual value, update last_dc_val */
-    s += state.last_dc_val[ci];
-    state.last_dc_val[ci] = s;
-    /* Output the DC coefficient (assumes jpeg_natural_order[0] = 0) */
-    (*block)[0] = (JCOEF) s;
-
-    /* Do we need to decode the AC coefficients for this component? */
-    if (compptr->DCT_scaled_size > 1) {
-
-      /* Section F.2.2.2: decode the AC coefficients */
-      /* Since zeroes are skipped, output area must be cleared beforehand */
-      for (k = 1; k < DCTSIZE2; k++) {
-	HUFF_DECODE(s, br_state, actbl, return FALSE, label2);
-      
-	r = s >> 4;
-	s &= 15;
-      
-	if (s) {
-	  k += r;
-	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
-	  r = GET_BITS(s);
-	  s = HUFF_EXTEND(r, s);
-	  /* Output coefficient in natural (dezigzagged) order.
-	   * Note: the extra entries in jpeg_natural_order[] will save us
-	   * if k >= DCTSIZE2, which could happen if the data is corrupted.
-	   */
-	  (*block)[jpeg_natural_order[k]] = (JCOEF) s;
-	} else {
-	  if (r != 15)
-	    break;
-	  k += 15;
-	}
-      }
-
-    } else {
-skip_ACs:
-
-      /* Section F.2.2.2: decode the AC coefficients */
-      /* In this path we just discard the values */
-      for (k = 1; k < DCTSIZE2; k++) {
-	HUFF_DECODE(s, br_state, actbl, return FALSE, label3);
-      
-	r = s >> 4;
-	s &= 15;
-      
-	if (s) {
-	  k += r;
-	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
-	  DROP_BITS(s);
-	} else {
-	  if (r != 15)
-	    break;
-	  k += 15;
-	}
-      }
-
-    }
-  }
-
-  /* Completed MCU, so update state */
-  BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
-  ASSIGN_STATE(entropy->saved, state);
-
-  /* Account for restart interval (no-op if not using restarts) */
-  entropy->restarts_to_go--;
-
-  return TRUE;
-}
-
-
-/*
- * Module initialization routine for Huffman entropy decoding.
- */
-
-GLOBAL void
-jinit_huff_decoder (j_decompress_ptr cinfo)
-{
-  huff_entropy_ptr entropy;
-  int i;
-
-  entropy = (huff_entropy_ptr)
-    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
-				SIZEOF(huff_entropy_decoder));
-  cinfo->entropy = (struct jpeg_entropy_decoder *) entropy;
-  entropy->pub.start_pass = start_pass_huff_decoder;
-  entropy->pub.decode_mcu = decode_mcu;
-
-  /* Mark tables unallocated */
-  for (i = 0; i < NUM_HUFF_TBLS; i++) {
-    entropy->dc_derived_tbls[i] = entropy->ac_derived_tbls[i] = NULL;
-  }
-}
diff -NEaurb neo/renderer/jpeg-6/jdhuff.h neo/renderer/jpeg-6/jdhuff.h
--- neo/renderer/jpeg-6/jdhuff.h	2013-08-14 01:47:52 +0000
+++ neo/renderer/jpeg-6/jdhuff.h	1970-01-01 00:00:00 +0000
@@ -1,205 +0,0 @@
-/*
- * jdhuff.h
- *
- * Copyright (C) 1991-1995, Thomas G. Lane.
- * This file is part of the Independent JPEG Group's software.
- * For conditions of distribution and use, see the accompanying README file.
- *
- * This file contains declarations for Huffman entropy decoding routines
- * that are shared between the sequential decoder (jdhuff.c) and the
- * progressive decoder (jdphuff.c).  No other modules need to see these.
- */
-
-/* Short forms of external names for systems with brain-damaged linkers. */
-
-#ifdef NEED_SHORT_EXTERNAL_NAMES
-#define jpeg_make_d_derived_tbl	jMkDDerived
-#define jpeg_fill_bit_buffer	jFilBitBuf
-#define jpeg_huff_decode	jHufDecode
-#endif /* NEED_SHORT_EXTERNAL_NAMES */
-
-
-/* Derived data constructed for each Huffman table */
-
-#define HUFF_LOOKAHEAD	8	/* # of bits of lookahead */
-
-typedef struct
-{
-    /* Basic tables: (element [0] of each array is unused) */
-    INT32 mincode[17];		/* smallest code of length k */
-    INT32 maxcode[18];		/* largest code of length k (-1 if none) */
-    /* (maxcode[17] is a sentinel to ensure jpeg_huff_decode terminates) */
-    int valptr[17];		/* huffval[] index of 1st symbol of length k */
-
-    /* Link to public Huffman table (needed only in jpeg_huff_decode) */
-    JHUFF_TBL *pub;
-
-    /* Lookahead tables: indexed by the next HUFF_LOOKAHEAD bits of
-     * the input data stream.  If the next Huffman code is no more
-     * than HUFF_LOOKAHEAD bits long, we can obtain its length and
-     * the corresponding symbol directly from these tables.
-     */
-    int look_nbits[1<<HUFF_LOOKAHEAD]; /* # bits, or 0 if too long */
-    UINT8 look_sym[1<<HUFF_LOOKAHEAD]; /* symbol, or unused */
-} d_derived_tbl;
-
-/* Expand a Huffman table definition into the derived format */
-EXTERN void jpeg_make_d_derived_tbl JPP((j_decompress_ptr cinfo,
-                                        JHUFF_TBL * htbl, d_derived_tbl ** pdtbl));
-
-
-/*
- * Fetching the next N bits from the input stream is a time-critical operation
- * for the Huffman decoders.  We implement it with a combination of inline
- * macros and out-of-line subroutines.  Note that N (the number of bits
- * demanded at one time) never exceeds 15 for JPEG use.
- *
- * We read source bytes into get_buffer and dole out bits as needed.
- * If get_buffer already contains enough bits, they are fetched in-line
- * by the macros CHECK_BIT_BUFFER and GET_BITS.  When there aren't enough
- * bits, jpeg_fill_bit_buffer is called; it will attempt to fill get_buffer
- * as full as possible (not just to the number of bits needed; this
- * prefetching reduces the overhead cost of calling jpeg_fill_bit_buffer).
- * Note that jpeg_fill_bit_buffer may return FALSE to indicate suspension.
- * On TRUE return, jpeg_fill_bit_buffer guarantees that get_buffer contains
- * at least the requested number of bits --- dummy zeroes are inserted if
- * necessary.
- */
-
-typedef INT32 bit_buf_type;	/* type of bit-extraction buffer */
-#define BIT_BUF_SIZE  32	/* size of buffer in bits */
-
-/* If long is > 32 bits on your machine, and shifting/masking longs is
- * reasonably fast, making bit_buf_type be long and setting BIT_BUF_SIZE
- * appropriately should be a win.  Unfortunately we can't do this with
- * something like  #define BIT_BUF_SIZE (sizeof(bit_buf_type)*8)
- * because not all machines measure sizeof in 8-bit bytes.
- */
-
-typedef struct  		/* Bitreading state saved across MCUs */
-{
-    bit_buf_type get_buffer;	/* current bit-extraction buffer */
-    int bits_left;		/* # of unused bits in it */
-    boolean printed_eod;		/* flag to suppress multiple warning msgs */
-} bitread_perm_state;
-
-typedef struct  		/* Bitreading working state within an MCU */
-{
-    /* current data source state */
-    const JOCTET * next_input_byte; /* => next byte to read from source */
-    size_t bytes_in_buffer;	/* # of bytes remaining in source buffer */
-    int unread_marker;		/* nonzero if we have hit a marker */
-    /* bit input buffer --- note these values are kept in register variables,
-     * not in this struct, inside the inner loops.
-     */
-    bit_buf_type get_buffer;	/* current bit-extraction buffer */
-    int bits_left;		/* # of unused bits in it */
-    /* pointers needed by jpeg_fill_bit_buffer */
-    j_decompress_ptr cinfo;	/* back link to decompress master record */
-    boolean * printed_eod_ptr;	/* => flag in permanent state */
-} bitread_working_state;
-
-/* Macros to declare and load/save bitread local variables. */
-#define BITREAD_STATE_VARS  \
-	register bit_buf_type get_buffer;  \
-	register int bits_left;  \
-	bitread_working_state br_state
-
-#define BITREAD_LOAD_STATE(cinfop,permstate)  \
-	br_state.cinfo = cinfop; \
-	br_state.next_input_byte = cinfop->src->next_input_byte; \
-	br_state.bytes_in_buffer = cinfop->src->bytes_in_buffer; \
-	br_state.unread_marker = cinfop->unread_marker; \
-	get_buffer = permstate.get_buffer; \
-	bits_left = permstate.bits_left; \
-	br_state.printed_eod_ptr = & permstate.printed_eod
-
-#define BITREAD_SAVE_STATE(cinfop,permstate)  \
-	cinfop->src->next_input_byte = br_state.next_input_byte; \
-	cinfop->src->bytes_in_buffer = br_state.bytes_in_buffer; \
-	cinfop->unread_marker = br_state.unread_marker; \
-	permstate.get_buffer = get_buffer; \
-	permstate.bits_left = bits_left
-
-/*
- * These macros provide the in-line portion of bit fetching.
- * Use CHECK_BIT_BUFFER to ensure there are N bits in get_buffer
- * before using GET_BITS, PEEK_BITS, or DROP_BITS.
- * The variables get_buffer and bits_left are assumed to be locals,
- * but the state struct might not be (jpeg_huff_decode needs this).
- *	CHECK_BIT_BUFFER(state,n,action);
- *		Ensure there are N bits in get_buffer; if suspend, take action.
- *      val = GET_BITS(n);
- *		Fetch next N bits.
- *      val = PEEK_BITS(n);
- *		Fetch next N bits without removing them from the buffer.
- *	DROP_BITS(n);
- *		Discard next N bits.
- * The value N should be a simple variable, not an expression, because it
- * is evaluated multiple times.
- */
-
-#define CHECK_BIT_BUFFER(state,nbits,action) \
-	{ if (bits_left < (nbits)) {  \
-	    if (! jpeg_fill_bit_buffer(&(state),get_buffer,bits_left,nbits))  \
-	      { action; }  \
-	    get_buffer = (state).get_buffer; bits_left = (state).bits_left; } }
-
-#define GET_BITS(nbits) \
-	(((int) (get_buffer >> (bits_left -= (nbits)))) & ((1<<(nbits))-1))
-
-#define PEEK_BITS(nbits) \
-	(((int) (get_buffer >> (bits_left -  (nbits)))) & ((1<<(nbits))-1))
-
-#define DROP_BITS(nbits) \
-	(bits_left -= (nbits))
-
-/* Load up the bit buffer to a depth of at least nbits */
-EXTERN boolean jpeg_fill_bit_buffer JPP((bitread_working_state * state,
-                                        register bit_buf_type get_buffer, register int bits_left,
-                                        int nbits));
-
-
-/*
- * Code for extracting next Huffman-coded symbol from input bit stream.
- * Again, this is time-critical and we make the main paths be macros.
- *
- * We use a lookahead table to process codes of up to HUFF_LOOKAHEAD bits
- * without looping.  Usually, more than 95% of the Huffman codes will be 8
- * or fewer bits long.  The few overlength codes are handled with a loop,
- * which need not be inline code.
- *
- * Notes about the HUFF_DECODE macro:
- * 1. Near the end of the data segment, we may fail to get enough bits
- *    for a lookahead.  In that case, we do it the hard way.
- * 2. If the lookahead table contains no entry, the next code must be
- *    more than HUFF_LOOKAHEAD bits long.
- * 3. jpeg_huff_decode returns -1 if forced to suspend.
- */
-
-#define HUFF_DECODE(result,state,htbl,failaction,slowlabel) \
-{ register int nb, look; \
-  if (bits_left < HUFF_LOOKAHEAD) { \
-    if (! jpeg_fill_bit_buffer(&state,get_buffer,bits_left, 0)) {failaction;} \
-    get_buffer = state.get_buffer; bits_left = state.bits_left; \
-    if (bits_left < HUFF_LOOKAHEAD) { \
-      nb = 1; goto slowlabel; \
-    } \
-  } \
-  look = PEEK_BITS(HUFF_LOOKAHEAD); \
-  if ((nb = htbl->look_nbits[look]) != 0) { \
-    DROP_BITS(nb); \
-    result = htbl->look_sym[look]; \
-  } else { \
-    nb = HUFF_LOOKAHEAD+1; \
-slowlabel: \
-    if ((result=jpeg_huff_decode(&state,get_buffer,bits_left,htbl,nb)) < 0) \
-	{ failaction; } \
-    get_buffer = state.get_buffer; bits_left = state.bits_left; \
-  } \
-}
-
-/* Out-of-line case for Huffman code fetching */
-EXTERN int jpeg_huff_decode JPP((bitread_working_state * state,
-                                 register bit_buf_type get_buffer, register int bits_left,
-                                 d_derived_tbl * htbl, int min_bits));
diff -NEaurb neo/renderer/jpeg-6/jdinput.c neo/renderer/jpeg-6/jdinput.c
--- neo/renderer/jpeg-6/jdinput.c	2011-12-26 04:15:38 +0000
+++ neo/renderer/jpeg-6/jdinput.c	1970-01-01 00:00:00 +0000
@@ -1,381 +0,0 @@
-/*
- * jdinput.c
- *
- * Copyright (C) 1991-1995, Thomas G. Lane.
- * This file is part of the Independent JPEG Group's software.
- * For conditions of distribution and use, see the accompanying README file.
- *
- * This file contains input control logic for the JPEG decompressor.
- * These routines are concerned with controlling the decompressor's input
- * processing (marker reading and coefficient decoding).  The actual input
- * reading is done in jdmarker.c, jdhuff.c, and jdphuff.c.
- */
-
-#define JPEG_INTERNALS
-#include "jinclude.h"
-#include "jpeglib.h"
-
-
-/* Private state */
-
-typedef struct {
-  struct jpeg_input_controller pub; /* public fields */
-
-  boolean inheaders;		/* TRUE until first SOS is reached */
-} my_input_controller;
-
-typedef my_input_controller * my_inputctl_ptr;
-
-
-/* Forward declarations */
-METHODDEF int consume_markers JPP((j_decompress_ptr cinfo));
-
-
-/*
- * Routines to calculate various quantities related to the size of the image.
- */
-
-LOCAL void
-initial_setup (j_decompress_ptr cinfo)
-/* Called once, when first SOS marker is reached */
-{
-  int ci;
-  jpeg_component_info *compptr;
-
-  /* Make sure image isn't bigger than I can handle */
-  if ((long) cinfo->image_height > (long) JPEG_MAX_DIMENSION ||
-      (long) cinfo->image_width > (long) JPEG_MAX_DIMENSION)
-    ERREXIT1(cinfo, JERR_IMAGE_TOO_BIG, (unsigned int) JPEG_MAX_DIMENSION);
-
-  /* For now, precision must match compiled-in value... */
-  if (cinfo->data_precision != BITS_IN_JSAMPLE)
-    ERREXIT1(cinfo, JERR_BAD_PRECISION, cinfo->data_precision);
-
-  /* Check that number of components won't exceed internal array sizes */
-  if (cinfo->num_components > MAX_COMPONENTS)
-    ERREXIT2(cinfo, JERR_COMPONENT_COUNT, cinfo->num_components,
-	     MAX_COMPONENTS);
-
-  /* Compute maximum sampling factors; check factor validity */
-  cinfo->max_h_samp_factor = 1;
-  cinfo->max_v_samp_factor = 1;
-  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
-       ci++, compptr++) {
-    if (compptr->h_samp_factor<=0 || compptr->h_samp_factor>MAX_SAMP_FACTOR ||
-	compptr->v_samp_factor<=0 || compptr->v_samp_factor>MAX_SAMP_FACTOR)
-      ERREXIT(cinfo, JERR_BAD_SAMPLING);
-    cinfo->max_h_samp_factor = MAX(cinfo->max_h_samp_factor,
-				   compptr->h_samp_factor);
-    cinfo->max_v_samp_factor = MAX(cinfo->max_v_samp_factor,
-				   compptr->v_samp_factor);
-  }
-
-  /* We initialize DCT_scaled_size and min_DCT_scaled_size to DCTSIZE.
-   * In the full decompressor, this will be overridden by jdmaster.c;
-   * but in the transcoder, jdmaster.c is not used, so we must do it here.
-   */
-  cinfo->min_DCT_scaled_size = DCTSIZE;
-
-  /* Compute dimensions of components */
-  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
-       ci++, compptr++) {
-    compptr->DCT_scaled_size = DCTSIZE;
-    /* Size in DCT blocks */
-    compptr->width_in_blocks = (JDIMENSION)
-      jdiv_round_up((long) cinfo->image_width * (long) compptr->h_samp_factor,
-		    (long) (cinfo->max_h_samp_factor * DCTSIZE));
-    compptr->height_in_blocks = (JDIMENSION)
-      jdiv_round_up((long) cinfo->image_height * (long) compptr->v_samp_factor,
-		    (long) (cinfo->max_v_samp_factor * DCTSIZE));
-    /* downsampled_width and downsampled_height will also be overridden by
-     * jdmaster.c if we are doing full decompression.  The transcoder library
-     * doesn't use these values, but the calling application might.
-     */
-    /* Size in samples */
-    compptr->downsampled_width = (JDIMENSION)
-      jdiv_round_up((long) cinfo->image_width * (long) compptr->h_samp_factor,
-		    (long) cinfo->max_h_samp_factor);
-    compptr->downsampled_height = (JDIMENSION)
-      jdiv_round_up((long) cinfo->image_height * (long) compptr->v_samp_factor,
-		    (long) cinfo->max_v_samp_factor);
-    /* Mark component needed, until color conversion says otherwise */
-    compptr->component_needed = TRUE;
-    /* Mark no quantization table yet saved for component */
-    compptr->quant_table = NULL;
-  }
-
-  /* Compute number of fully interleaved MCU rows. */
-  cinfo->total_iMCU_rows = (JDIMENSION)
-    jdiv_round_up((long) cinfo->image_height,
-		  (long) (cinfo->max_v_samp_factor*DCTSIZE));
-
-  /* Decide whether file contains multiple scans */
-  if (cinfo->comps_in_scan < cinfo->num_components || cinfo->progressive_mode)
-    cinfo->inputctl->has_multiple_scans = TRUE;
-  else
-    cinfo->inputctl->has_multiple_scans = FALSE;
-}
-
-
-LOCAL void
-per_scan_setup (j_decompress_ptr cinfo)
-/* Do computations that are needed before processing a JPEG scan */
-/* cinfo->comps_in_scan and cinfo->cur_comp_info[] were set from SOS marker */
-{
-  int ci, mcublks, tmp;
-  jpeg_component_info *compptr;
-  
-  if (cinfo->comps_in_scan == 1) {
-    
-    /* Noninterleaved (single-component) scan */
-    compptr = cinfo->cur_comp_info[0];
-    
-    /* Overall image size in MCUs */
-    cinfo->MCUs_per_row = compptr->width_in_blocks;
-    cinfo->MCU_rows_in_scan = compptr->height_in_blocks;
-    
-    /* For noninterleaved scan, always one block per MCU */
-    compptr->MCU_width = 1;
-    compptr->MCU_height = 1;
-    compptr->MCU_blocks = 1;
-    compptr->MCU_sample_width = compptr->DCT_scaled_size;
-    compptr->last_col_width = 1;
-    /* For noninterleaved scans, it is convenient to define last_row_height
-     * as the number of block rows present in the last iMCU row.
-     */
-    tmp = (int) (compptr->height_in_blocks % compptr->v_samp_factor);
-    if (tmp == 0) tmp = compptr->v_samp_factor;
-    compptr->last_row_height = tmp;
-    
-    /* Prepare array describing MCU composition */
-    cinfo->blocks_in_MCU = 1;
-    cinfo->MCU_membership[0] = 0;
-    
-  } else {
-    
-    /* Interleaved (multi-component) scan */
-    if (cinfo->comps_in_scan <= 0 || cinfo->comps_in_scan > MAX_COMPS_IN_SCAN)
-      ERREXIT2(cinfo, JERR_COMPONENT_COUNT, cinfo->comps_in_scan,
-	       MAX_COMPS_IN_SCAN);
-    
-    /* Overall image size in MCUs */
-    cinfo->MCUs_per_row = (JDIMENSION)
-      jdiv_round_up((long) cinfo->image_width,
-		    (long) (cinfo->max_h_samp_factor*DCTSIZE));
-    cinfo->MCU_rows_in_scan = (JDIMENSION)
-      jdiv_round_up((long) cinfo->image_height,
-		    (long) (cinfo->max_v_samp_factor*DCTSIZE));
-    
-    cinfo->blocks_in_MCU = 0;
-    
-    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
-      compptr = cinfo->cur_comp_info[ci];
-      /* Sampling factors give # of blocks of component in each MCU */
-      compptr->MCU_width = compptr->h_samp_factor;
-      compptr->MCU_height = compptr->v_samp_factor;
-      compptr->MCU_blocks = compptr->MCU_width * compptr->MCU_height;
-      compptr->MCU_sample_width = compptr->MCU_width * compptr->DCT_scaled_size;
-      /* Figure number of non-dummy blocks in last MCU column & row */
-      tmp = (int) (compptr->width_in_blocks % compptr->MCU_width);
-      if (tmp == 0) tmp = compptr->MCU_width;
-      compptr->last_col_width = tmp;
-      tmp = (int) (compptr->height_in_blocks % compptr->MCU_height);
-      if (tmp == 0) tmp = compptr->MCU_height;
-      compptr->last_row_height = tmp;
-      /* Prepare array describing MCU composition */
-      mcublks = compptr->MCU_blocks;
-      if (cinfo->blocks_in_MCU + mcublks > D_MAX_BLOCKS_IN_MCU)
-	ERREXIT(cinfo, JERR_BAD_MCU_SIZE);
-      while (mcublks-- > 0) {
-	cinfo->MCU_membership[cinfo->blocks_in_MCU++] = ci;
-      }
-    }
-    
-  }
-}
-
-
-/*
- * Save away a copy of the Q-table referenced by each component present
- * in the current scan, unless already saved during a prior scan.
- *
- * In a multiple-scan JPEG file, the encoder could assign different components
- * the same Q-table slot number, but change table definitions between scans
- * so that each component uses a different Q-table.  (The IJG encoder is not
- * currently capable of doing this, but other encoders might.)  Since we want
- * to be able to dequantize all the components at the end of the file, this
- * means that we have to save away the table actually used for each component.
- * We do this by copying the table at the start of the first scan containing
- * the component.
- * The JPEG spec prohibits the encoder from changing the contents of a Q-table
- * slot between scans of a component using that slot.  If the encoder does so
- * anyway, this decoder will simply use the Q-table values that were current
- * at the start of the first scan for the component.
- *
- * The decompressor output side looks only at the saved quant tables,
- * not at the current Q-table slots.
- */
-
-LOCAL void
-latch_quant_tables (j_decompress_ptr cinfo)
-{
-  int ci, qtblno;
-  jpeg_component_info *compptr;
-  JQUANT_TBL * qtbl;
-
-  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
-    compptr = cinfo->cur_comp_info[ci];
-    /* No work if we already saved Q-table for this component */
-    if (compptr->quant_table != NULL)
-      continue;
-    /* Make sure specified quantization table is present */
-    qtblno = compptr->quant_tbl_no;
-    if (qtblno < 0 || qtblno >= NUM_QUANT_TBLS ||
-	cinfo->quant_tbl_ptrs[qtblno] == NULL)
-      ERREXIT1(cinfo, JERR_NO_QUANT_TABLE, qtblno);
-    /* OK, save away the quantization table */
-    qtbl = (JQUANT_TBL *)
-      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
-				  SIZEOF(JQUANT_TBL));
-    MEMCOPY(qtbl, cinfo->quant_tbl_ptrs[qtblno], SIZEOF(JQUANT_TBL));
-    compptr->quant_table = qtbl;
-  }
-}
-
-
-/*
- * Initialize the input modules to read a scan of compressed data.
- * The first call to this is done by jdmaster.c after initializing
- * the entire decompressor (during jpeg_start_decompress).
- * Subsequent calls come from consume_markers, below.
- */
-
-METHODDEF void
-start_input_pass (j_decompress_ptr cinfo)
-{
-  per_scan_setup(cinfo);
-  latch_quant_tables(cinfo);
-  (*cinfo->entropy->start_pass) (cinfo);
-  (*cinfo->coef->start_input_pass) (cinfo);
-  cinfo->inputctl->consume_input = cinfo->coef->consume_data;
-}
-
-
-/*
- * Finish up after inputting a compressed-data scan.
- * This is called by the coefficient controller after it's read all
- * the expected data of the scan.
- */
-
-METHODDEF void
-finish_input_pass (j_decompress_ptr cinfo)
-{
-  cinfo->inputctl->consume_input = consume_markers;
-}
-
-
-/*
- * Read JPEG markers before, between, or after compressed-data scans.
- * Change state as necessary when a new scan is reached.
- * Return value is JPEG_SUSPENDED, JPEG_REACHED_SOS, or JPEG_REACHED_EOI.
- *
- * The consume_input method pointer points either here or to the
- * coefficient controller's consume_data routine, depending on whether
- * we are reading a compressed data segment or inter-segment markers.
- */
-
-METHODDEF int
-consume_markers (j_decompress_ptr cinfo)
-{
-  my_inputctl_ptr inputctl = (my_inputctl_ptr) cinfo->inputctl;
-  int val;
-
-  if (inputctl->pub.eoi_reached) /* After hitting EOI, read no further */
-    return JPEG_REACHED_EOI;
-
-  val = (*cinfo->marker->read_markers) (cinfo);
-
-  switch (val) {
-  case JPEG_REACHED_SOS:	/* Found SOS */
-    if (inputctl->inheaders) {	/* 1st SOS */
-      initial_setup(cinfo);
-      inputctl->inheaders = FALSE;
-      /* Note: start_input_pass must be called by jdmaster.c
-       * before any more input can be consumed.  jdapi.c is
-       * responsible for enforcing this sequencing.
-       */
-    } else {			/* 2nd or later SOS marker */
-      if (! inputctl->pub.has_multiple_scans)
-	ERREXIT(cinfo, JERR_EOI_EXPECTED); /* Oops, I wasn't expecting this! */
-      start_input_pass(cinfo);
-    }
-    break;
-  case JPEG_REACHED_EOI:	/* Found EOI */
-    inputctl->pub.eoi_reached = TRUE;
-    if (inputctl->inheaders) {	/* Tables-only datastream, apparently */
-      if (cinfo->marker->saw_SOF)
-	ERREXIT(cinfo, JERR_SOF_NO_SOS);
-    } else {
-      /* Prevent infinite loop in coef ctlr's decompress_data routine
-       * if user set output_scan_number larger than number of scans.
-       */
-      if (cinfo->output_scan_number > cinfo->input_scan_number)
-	cinfo->output_scan_number = cinfo->input_scan_number;
-    }
-    break;
-  case JPEG_SUSPENDED:
-    break;
-  }
-
-  return val;
-}
-
-
-/*
- * Reset state to begin a fresh datastream.
- */
-
-METHODDEF void
-reset_input_controller (j_decompress_ptr cinfo)
-{
-  my_inputctl_ptr inputctl = (my_inputctl_ptr) cinfo->inputctl;
-
-  inputctl->pub.consume_input = consume_markers;
-  inputctl->pub.has_multiple_scans = FALSE; /* "unknown" would be better */
-  inputctl->pub.eoi_reached = FALSE;
-  inputctl->inheaders = TRUE;
-  /* Reset other modules */
-  (*cinfo->err->reset_error_mgr) ((j_common_ptr) cinfo);
-  (*cinfo->marker->reset_marker_reader) (cinfo);
-  /* Reset progression state -- would be cleaner if entropy decoder did this */
-  cinfo->coef_bits = NULL;
-}
-
-
-/*
- * Initialize the input controller module.
- * This is called only once, when the decompression object is created.
- */
-
-GLOBAL void
-jinit_input_controller (j_decompress_ptr cinfo)
-{
-  my_inputctl_ptr inputctl;
-
-  /* Create subobject in permanent pool */
-  inputctl = (my_inputctl_ptr)
-    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
-				SIZEOF(my_input_controller));
-  cinfo->inputctl = (struct jpeg_input_controller *) inputctl;
-  /* Initialize method pointers */
-  inputctl->pub.consume_input = consume_markers;
-  inputctl->pub.reset_input_controller = reset_input_controller;
-  inputctl->pub.start_input_pass = start_input_pass;
-  inputctl->pub.finish_input_pass = finish_input_pass;
-  /* Initialize state: can't use reset_input_controller since we don't
-   * want to try to reset other modules yet.
-   */
-  inputctl->pub.has_multiple_scans = FALSE; /* "unknown" would be better */
-  inputctl->pub.eoi_reached = FALSE;
-  inputctl->inheaders = TRUE;
-}
diff -NEaurb neo/renderer/jpeg-6/jdmainct.c neo/renderer/jpeg-6/jdmainct.c
--- neo/renderer/jpeg-6/jdmainct.c	2011-12-26 04:15:38 +0000
+++ neo/renderer/jpeg-6/jdmainct.c	1970-01-01 00:00:00 +0000
@@ -1,512 +0,0 @@
-/*
- * jdmainct.c
- *
- * Copyright (C) 1994-1995, Thomas G. Lane.
- * This file is part of the Independent JPEG Group's software.
- * For conditions of distribution and use, see the accompanying README file.
- *
- * This file contains the main buffer controller for decompression.
- * The main buffer lies between the JPEG decompressor proper and the
- * post-processor; it holds downsampled data in the JPEG colorspace.
- *
- * Note that this code is bypassed in raw-data mode, since the application
- * supplies the equivalent of the main buffer in that case.
- */
-
-#define JPEG_INTERNALS
-#include "jinclude.h"
-#include "jpeglib.h"
-
-
-/*
- * In the current system design, the main buffer need never be a full-image
- * buffer; any full-height buffers will be found inside the coefficient or
- * postprocessing controllers.  Nonetheless, the main controller is not
- * trivial.  Its responsibility is to provide context rows for upsampling/
- * rescaling, and doing this in an efficient fashion is a bit tricky.
- *
- * Postprocessor input data is counted in "row groups".  A row group
- * is defined to be (v_samp_factor * DCT_scaled_size / min_DCT_scaled_size)
- * sample rows of each component.  (We require DCT_scaled_size values to be
- * chosen such that these numbers are integers.  In practice DCT_scaled_size
- * values will likely be powers of two, so we actually have the stronger
- * condition that DCT_scaled_size / min_DCT_scaled_size is an integer.)
- * Upsampling will typically produce max_v_samp_factor pixel rows from each
- * row group (times any additional scale factor that the upsampler is
- * applying).
- *
- * The coefficient controller will deliver data to us one iMCU row at a time;
- * each iMCU row contains v_samp_factor * DCT_scaled_size sample rows, or
- * exactly min_DCT_scaled_size row groups.  (This amount of data corresponds
- * to one row of MCUs when the image is fully interleaved.)  Note that the
- * number of sample rows varies across components, but the number of row
- * groups does not.  Some garbage sample rows may be included in the last iMCU
- * row at the bottom of the image.
- *
- * Depending on the vertical scaling algorithm used, the upsampler may need
- * access to the sample row(s) above and below its current input row group.
- * The upsampler is required to set need_context_rows TRUE at global selection
- * time if so.  When need_context_rows is FALSE, this controller can simply
- * obtain one iMCU row at a time from the coefficient controller and dole it
- * out as row groups to the postprocessor.
- *
- * When need_context_rows is TRUE, this controller guarantees that the buffer
- * passed to postprocessing contains at least one row group's worth of samples
- * above and below the row group(s) being processed.  Note that the context
- * rows "above" the first passed row group appear at negative row offsets in
- * the passed buffer.  At the top and bottom of the image, the required
- * context rows are manufactured by duplicating the first or last real sample
- * row; this avoids having special cases in the upsampling inner loops.
- *
- * The amount of context is fixed at one row group just because that's a
- * convenient number for this controller to work with.  The existing
- * upsamplers really only need one sample row of context.  An upsampler
- * supporting arbitrary output rescaling might wish for more than one row
- * group of context when shrinking the image; tough, we don't handle that.
- * (This is justified by the assumption that downsizing will be handled mostly
- * by adjusting the DCT_scaled_size values, so that the actual scale factor at
- * the upsample step needn't be much less than one.)
- *
- * To provide the desired context, we have to retain the last two row groups
- * of one iMCU row while reading in the next iMCU row.  (The last row group
- * can't be processed until we have another row group for its below-context,
- * and so we have to save the next-to-last group too for its above-context.)
- * We could do this most simply by copying data around in our buffer, but
- * that'd be very slow.  We can avoid copying any data by creating a rather
- * strange pointer structure.  Here's how it works.  We allocate a workspace
- * consisting of M+2 row groups (where M = min_DCT_scaled_size is the number
- * of row groups per iMCU row).  We create two sets of redundant pointers to
- * the workspace.  Labeling the physical row groups 0 to M+1, the synthesized
- * pointer lists look like this:
- *                   M+1                          M-1
- * master pointer --> 0         master pointer --> 0
- *                    1                            1
- *                   ...                          ...
- *                   M-3                          M-3
- *                   M-2                           M
- *                   M-1                          M+1
- *                    M                           M-2
- *                   M+1                          M-1
- *                    0                            0
- * We read alternate iMCU rows using each master pointer; thus the last two
- * row groups of the previous iMCU row remain un-overwritten in the workspace.
- * The pointer lists are set up so that the required context rows appear to
- * be adjacent to the proper places when we pass the pointer lists to the
- * upsampler.
- *
- * The above pictures describe the normal state of the pointer lists.
- * At top and bottom of the image, we diddle the pointer lists to duplicate
- * the first or last sample row as necessary (this is cheaper than copying
- * sample rows around).
- *
- * This scheme breaks down if M < 2, ie, min_DCT_scaled_size is 1.  In that
- * situation each iMCU row provides only one row group so the buffering logic
- * must be different (eg, we must read two iMCU rows before we can emit the
- * first row group).  For now, we simply do not support providing context
- * rows when min_DCT_scaled_size is 1.  That combination seems unlikely to
- * be worth providing --- if someone wants a 1/8th-size preview, they probably
- * want it quick and dirty, so a context-free upsampler is sufficient.
- */
-
-
-/* Private buffer controller object */
-
-typedef struct {
-  struct jpeg_d_main_controller pub; /* public fields */
-
-  /* Pointer to allocated workspace (M or M+2 row groups). */
-  JSAMPARRAY buffer[MAX_COMPONENTS];
-
-  boolean buffer_full;		/* Have we gotten an iMCU row from decoder? */
-  JDIMENSION rowgroup_ctr;	/* counts row groups output to postprocessor */
-
-  /* Remaining fields are only used in the context case. */
-
-  /* These are the master pointers to the funny-order pointer lists. */
-  JSAMPIMAGE xbuffer[2];	/* pointers to weird pointer lists */
-
-  int whichptr;			/* indicates which pointer set is now in use */
-  int context_state;		/* process_data state machine status */
-  JDIMENSION rowgroups_avail;	/* row groups available to postprocessor */
-  JDIMENSION iMCU_row_ctr;	/* counts iMCU rows to detect image top/bot */
-} my_main_controller;
-
-typedef my_main_controller * my_main_ptr;
-
-/* context_state values: */
-#define CTX_PREPARE_FOR_IMCU	0	/* need to prepare for MCU row */
-#define CTX_PROCESS_IMCU	1	/* feeding iMCU to postprocessor */
-#define CTX_POSTPONED_ROW	2	/* feeding postponed row group */
-
-
-/* Forward declarations */
-METHODDEF void process_data_simple_main
-	JPP((j_decompress_ptr cinfo, JSAMPARRAY output_buf,
-	     JDIMENSION *out_row_ctr, JDIMENSION out_rows_avail));
-METHODDEF void process_data_context_main
-	JPP((j_decompress_ptr cinfo, JSAMPARRAY output_buf,
-	     JDIMENSION *out_row_ctr, JDIMENSION out_rows_avail));
-#ifdef QUANT_2PASS_SUPPORTED
-METHODDEF void process_data_crank_post
-	JPP((j_decompress_ptr cinfo, JSAMPARRAY output_buf,
-	     JDIMENSION *out_row_ctr, JDIMENSION out_rows_avail));
-#endif
-
-
-LOCAL void
-alloc_funny_pointers (j_decompress_ptr cinfo)
-/* Allocate space for the funny pointer lists.
- * This is done only once, not once per pass.
- */
-{
-  my_main_ptr main = (my_main_ptr) cinfo->main;
-  int ci, rgroup;
-  int M = cinfo->min_DCT_scaled_size;
-  jpeg_component_info *compptr;
-  JSAMPARRAY xbuf;
-
-  /* Get top-level space for component array pointers.
-   * We alloc both arrays with one call to save a few cycles.
-   */
-  main->xbuffer[0] = (JSAMPIMAGE)
-    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
-				cinfo->num_components * 2 * SIZEOF(JSAMPARRAY));
-  main->xbuffer[1] = main->xbuffer[0] + cinfo->num_components;
-
-  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
-       ci++, compptr++) {
-    rgroup = (compptr->v_samp_factor * compptr->DCT_scaled_size) /
-      cinfo->min_DCT_scaled_size; /* height of a row group of component */
-    /* Get space for pointer lists --- M+4 row groups in each list.
-     * We alloc both pointer lists with one call to save a few cycles.
-     */
-    xbuf = (JSAMPARRAY)
-      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
-				  2 * (rgroup * (M + 4)) * SIZEOF(JSAMPROW));
-    xbuf += rgroup;		/* want one row group at negative offsets */
-    main->xbuffer[0][ci] = xbuf;
-    xbuf += rgroup * (M + 4);
-    main->xbuffer[1][ci] = xbuf;
-  }
-}
-
-
-LOCAL void
-make_funny_pointers (j_decompress_ptr cinfo)
-/* Create the funny pointer lists discussed in the comments above.
- * The actual workspace is already allocated (in main->buffer),
- * and the space for the pointer lists is allocated too.
- * This routine just fills in the curiously ordered lists.
- * This will be repeated at the beginning of each pass.
- */
-{
-  my_main_ptr main = (my_main_ptr) cinfo->main;
-  int ci, i, rgroup;
-  int M = cinfo->min_DCT_scaled_size;
-  jpeg_component_info *compptr;
-  JSAMPARRAY buf, xbuf0, xbuf1;
-
-  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
-       ci++, compptr++) {
-    rgroup = (compptr->v_samp_factor * compptr->DCT_scaled_size) /
-      cinfo->min_DCT_scaled_size; /* height of a row group of component */
-    xbuf0 = main->xbuffer[0][ci];
-    xbuf1 = main->xbuffer[1][ci];
-    /* First copy the workspace pointers as-is */
-    buf = main->buffer[ci];
-    for (i = 0; i < rgroup * (M + 2); i++) {
-      xbuf0[i] = xbuf1[i] = buf[i];
-    }
-    /* In the second list, put the last four row groups in swapped order */
-    for (i = 0; i < rgroup * 2; i++) {
-      xbuf1[rgroup*(M-2) + i] = buf[rgroup*M + i];
-      xbuf1[rgroup*M + i] = buf[rgroup*(M-2) + i];
-    }
-    /* The wraparound pointers at top and bottom will be filled later
-     * (see set_wraparound_pointers, below).  Initially we want the "above"
-     * pointers to duplicate the first actual data line.  This only needs
-     * to happen in xbuffer[0].
-     */
-    for (i = 0; i < rgroup; i++) {
-      xbuf0[i - rgroup] = xbuf0[0];
-    }
-  }
-}
-
-
-LOCAL void
-set_wraparound_pointers (j_decompress_ptr cinfo)
-/* Set up the "wraparound" pointers at top and bottom of the pointer lists.
- * This changes the pointer list state from top-of-image to the normal state.
- */
-{
-  my_main_ptr main = (my_main_ptr) cinfo->main;
-  int ci, i, rgroup;
-  int M = cinfo->min_DCT_scaled_size;
-  jpeg_component_info *compptr;
-  JSAMPARRAY xbuf0, xbuf1;
-
-  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
-       ci++, compptr++) {
-    rgroup = (compptr->v_samp_factor * compptr->DCT_scaled_size) /
-      cinfo->min_DCT_scaled_size; /* height of a row group of component */
-    xbuf0 = main->xbuffer[0][ci];
-    xbuf1 = main->xbuffer[1][ci];
-    for (i = 0; i < rgroup; i++) {
-      xbuf0[i - rgroup] = xbuf0[rgroup*(M+1) + i];
-      xbuf1[i - rgroup] = xbuf1[rgroup*(M+1) + i];
-      xbuf0[rgroup*(M+2) + i] = xbuf0[i];
-      xbuf1[rgroup*(M+2) + i] = xbuf1[i];
-    }
-  }
-}
-
-
-LOCAL void
-set_bottom_pointers (j_decompress_ptr cinfo)
-/* Change the pointer lists to duplicate the last sample row at the bottom
- * of the image.  whichptr indicates which xbuffer holds the final iMCU row.
- * Also sets rowgroups_avail to indicate number of nondummy row groups in row.
- */
-{
-  my_main_ptr main = (my_main_ptr) cinfo->main;
-  int ci, i, rgroup, iMCUheight, rows_left;
-  jpeg_component_info *compptr;
-  JSAMPARRAY xbuf;
-
-  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
-       ci++, compptr++) {
-    /* Count sample rows in one iMCU row and in one row group */
-    iMCUheight = compptr->v_samp_factor * compptr->DCT_scaled_size;
-    rgroup = iMCUheight / cinfo->min_DCT_scaled_size;
-    /* Count nondummy sample rows remaining for this component */
-    rows_left = (int) (compptr->downsampled_height % (JDIMENSION) iMCUheight);
-    if (rows_left == 0) rows_left = iMCUheight;
-    /* Count nondummy row groups.  Should get same answer for each component,
-     * so we need only do it once.
-     */
-    if (ci == 0) {
-      main->rowgroups_avail = (JDIMENSION) ((rows_left-1) / rgroup + 1);
-    }
-    /* Duplicate the last real sample row rgroup*2 times; this pads out the
-     * last partial rowgroup and ensures at least one full rowgroup of context.
-     */
-    xbuf = main->xbuffer[main->whichptr][ci];
-    for (i = 0; i < rgroup * 2; i++) {
-      xbuf[rows_left + i] = xbuf[rows_left-1];
-    }
-  }
-}
-
-
-/*
- * Initialize for a processing pass.
- */
-
-METHODDEF void
-start_pass_main (j_decompress_ptr cinfo, J_BUF_MODE pass_mode)
-{
-  my_main_ptr main = (my_main_ptr) cinfo->main;
-
-  switch (pass_mode) {
-  case JBUF_PASS_THRU:
-    if (cinfo->upsample->need_context_rows) {
-      main->pub.process_data = process_data_context_main;
-      make_funny_pointers(cinfo); /* Create the xbuffer[] lists */
-      main->whichptr = 0;	/* Read first iMCU row into xbuffer[0] */
-      main->context_state = CTX_PREPARE_FOR_IMCU;
-      main->iMCU_row_ctr = 0;
-    } else {
-      /* Simple case with no context needed */
-      main->pub.process_data = process_data_simple_main;
-    }
-    main->buffer_full = FALSE;	/* Mark buffer empty */
-    main->rowgroup_ctr = 0;
-    break;
-#ifdef QUANT_2PASS_SUPPORTED
-  case JBUF_CRANK_DEST:
-    /* For last pass of 2-pass quantization, just crank the postprocessor */
-    main->pub.process_data = process_data_crank_post;
-    break;
-#endif
-  default:
-    ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
-    break;
-  }
-}
-
-
-/*
- * Process some data.
- * This handles the simple case where no context is required.
- */
-
-METHODDEF void
-process_data_simple_main (j_decompress_ptr cinfo,
-			  JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
-			  JDIMENSION out_rows_avail)
-{
-  my_main_ptr main = (my_main_ptr) cinfo->main;
-  JDIMENSION rowgroups_avail;
-
-  /* Read input data if we haven't filled the main buffer yet */
-  if (! main->buffer_full) {
-    if (! (*cinfo->coef->decompress_data) (cinfo, main->buffer))
-      return;			/* suspension forced, can do nothing more */
-    main->buffer_full = TRUE;	/* OK, we have an iMCU row to work with */
-  }
-
-  /* There are always min_DCT_scaled_size row groups in an iMCU row. */
-  rowgroups_avail = (JDIMENSION) cinfo->min_DCT_scaled_size;
-  /* Note: at the bottom of the image, we may pass extra garbage row groups
-   * to the postprocessor.  The postprocessor has to check for bottom
-   * of image anyway (at row resolution), so no point in us doing it too.
-   */
-
-  /* Feed the postprocessor */
-  (*cinfo->post->post_process_data) (cinfo, main->buffer,
-				     &main->rowgroup_ctr, rowgroups_avail,
-				     output_buf, out_row_ctr, out_rows_avail);
-
-  /* Has postprocessor consumed all the data yet? If so, mark buffer empty */
-  if (main->rowgroup_ctr >= rowgroups_avail) {
-    main->buffer_full = FALSE;
-    main->rowgroup_ctr = 0;
-  }
-}
-
-
-/*
- * Process some data.
- * This handles the case where context rows must be provided.
- */
-
-METHODDEF void
-process_data_context_main (j_decompress_ptr cinfo,
-			   JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
-			   JDIMENSION out_rows_avail)
-{
-  my_main_ptr main = (my_main_ptr) cinfo->main;
-
-  /* Read input data if we haven't filled the main buffer yet */
-  if (! main->buffer_full) {
-    if (! (*cinfo->coef->decompress_data) (cinfo,
-					   main->xbuffer[main->whichptr]))
-      return;			/* suspension forced, can do nothing more */
-    main->buffer_full = TRUE;	/* OK, we have an iMCU row to work with */
-    main->iMCU_row_ctr++;	/* count rows received */
-  }
-
-  /* Postprocessor typically will not swallow all the input data it is handed
-   * in one call (due to filling the output buffer first).  Must be prepared
-   * to exit and restart.  This switch lets us keep track of how far we got.
-   * Note that each case falls through to the next on successful completion.
-   */
-  switch (main->context_state) {
-  case CTX_POSTPONED_ROW:
-    /* Call postprocessor using previously set pointers for postponed row */
-    (*cinfo->post->post_process_data) (cinfo, main->xbuffer[main->whichptr],
-			&main->rowgroup_ctr, main->rowgroups_avail,
-			output_buf, out_row_ctr, out_rows_avail);
-    if (main->rowgroup_ctr < main->rowgroups_avail)
-      return;			/* Need to suspend */
-    main->context_state = CTX_PREPARE_FOR_IMCU;
-    if (*out_row_ctr >= out_rows_avail)
-      return;			/* Postprocessor exactly filled output buf */
-    /*FALLTHROUGH*/
-  case CTX_PREPARE_FOR_IMCU:
-    /* Prepare to process first M-1 row groups of this iMCU row */
-    main->rowgroup_ctr = 0;
-    main->rowgroups_avail = (JDIMENSION) (cinfo->min_DCT_scaled_size - 1);
-    /* Check for bottom of image: if so, tweak pointers to "duplicate"
-     * the last sample row, and adjust rowgroups_avail to ignore padding rows.
-     */
-    if (main->iMCU_row_ctr == cinfo->total_iMCU_rows)
-      set_bottom_pointers(cinfo);
-    main->context_state = CTX_PROCESS_IMCU;
-    /*FALLTHROUGH*/
-  case CTX_PROCESS_IMCU:
-    /* Call postprocessor using previously set pointers */
-    (*cinfo->post->post_process_data) (cinfo, main->xbuffer[main->whichptr],
-			&main->rowgroup_ctr, main->rowgroups_avail,
-			output_buf, out_row_ctr, out_rows_avail);
-    if (main->rowgroup_ctr < main->rowgroups_avail)
-      return;			/* Need to suspend */
-    /* After the first iMCU, change wraparound pointers to normal state */
-    if (main->iMCU_row_ctr == 1)
-      set_wraparound_pointers(cinfo);
-    /* Prepare to load new iMCU row using other xbuffer list */
-    main->whichptr ^= 1;	/* 0=>1 or 1=>0 */
-    main->buffer_full = FALSE;
-    /* Still need to process last row group of this iMCU row, */
-    /* which is saved at index M+1 of the other xbuffer */
-    main->rowgroup_ctr = (JDIMENSION) (cinfo->min_DCT_scaled_size + 1);
-    main->rowgroups_avail = (JDIMENSION) (cinfo->min_DCT_scaled_size + 2);
-    main->context_state = CTX_POSTPONED_ROW;
-  }
-}
-
-
-/*
- * Process some data.
- * Final pass of two-pass quantization: just call the postprocessor.
- * Source data will be the postprocessor controller's internal buffer.
- */
-
-#ifdef QUANT_2PASS_SUPPORTED
-
-METHODDEF void
-process_data_crank_post (j_decompress_ptr cinfo,
-			 JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
-			 JDIMENSION out_rows_avail)
-{
-  (*cinfo->post->post_process_data) (cinfo, (JSAMPIMAGE) NULL,
-				     (JDIMENSION *) NULL, (JDIMENSION) 0,
-				     output_buf, out_row_ctr, out_rows_avail);
-}
-
-#endif /* QUANT_2PASS_SUPPORTED */
-
-
-/*
- * Initialize main buffer controller.
- */
-
-GLOBAL void
-jinit_d_main_controller (j_decompress_ptr cinfo, boolean need_full_buffer)
-{
-  my_main_ptr main;
-  int ci, rgroup, ngroups;
-  jpeg_component_info *compptr;
-
-  main = (my_main_ptr)
-    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
-				SIZEOF(my_main_controller));
-  cinfo->main = (struct jpeg_d_main_controller *) main;
-  main->pub.start_pass = start_pass_main;
-
-  if (need_full_buffer)		/* shouldn't happen */
-    ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
-
-  /* Allocate the workspace.
-   * ngroups is the number of row groups we need.
-   */
-  if (cinfo->upsample->need_context_rows) {
-    if (cinfo->min_DCT_scaled_size < 2) /* unsupported, see comments above */
-      ERREXIT(cinfo, JERR_NOTIMPL);
-    alloc_funny_pointers(cinfo); /* Alloc space for xbuffer[] lists */
-    ngroups = cinfo->min_DCT_scaled_size + 2;
-  } else {
-    ngroups = cinfo->min_DCT_scaled_size;
-  }
-
-  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
-       ci++, compptr++) {
-    rgroup = (compptr->v_samp_factor * compptr->DCT_scaled_size) /
-      cinfo->min_DCT_scaled_size; /* height of a row group of component */
-    main->buffer[ci] = (*cinfo->mem->alloc_sarray)
-			((j_common_ptr) cinfo, JPOOL_IMAGE,
-			 compptr->width_in_blocks * compptr->DCT_scaled_size,
-			 (JDIMENSION) (rgroup * ngroups));
-  }
-}
diff -NEaurb neo/renderer/jpeg-6/jdmarker.c neo/renderer/jpeg-6/jdmarker.c
--- neo/renderer/jpeg-6/jdmarker.c	2011-12-26 04:15:38 +0000
+++ neo/renderer/jpeg-6/jdmarker.c	1970-01-01 00:00:00 +0000
@@ -1,1052 +0,0 @@
-/*
- * jdmarker.c
- *
- * Copyright (C) 1991-1995, Thomas G. Lane.
- * This file is part of the Independent JPEG Group's software.
- * For conditions of distribution and use, see the accompanying README file.
- *
- * This file contains routines to decode JPEG datastream markers.
- * Most of the complexity arises from our desire to support input
- * suspension: if not all of the data for a marker is available,
- * we must exit back to the application.  On resumption, we reprocess
- * the marker.
- */
-
-#define JPEG_INTERNALS
-#include "jinclude.h"
-#include "jpeglib.h"
-
-
-typedef enum {			/* JPEG marker codes */
-  M_SOF0  = 0xc0,
-  M_SOF1  = 0xc1,
-  M_SOF2  = 0xc2,
-  M_SOF3  = 0xc3,
-  
-  M_SOF5  = 0xc5,
-  M_SOF6  = 0xc6,
-  M_SOF7  = 0xc7,
-  
-  M_JPG   = 0xc8,
-  M_SOF9  = 0xc9,
-  M_SOF10 = 0xca,
-  M_SOF11 = 0xcb,
-  
-  M_SOF13 = 0xcd,
-  M_SOF14 = 0xce,
-  M_SOF15 = 0xcf,
-  
-  M_DHT   = 0xc4,
-  
-  M_DAC   = 0xcc,
-  
-  M_RST0  = 0xd0,
-  M_RST1  = 0xd1,
-  M_RST2  = 0xd2,
-  M_RST3  = 0xd3,
-  M_RST4  = 0xd4,
-  M_RST5  = 0xd5,
-  M_RST6  = 0xd6,
-  M_RST7  = 0xd7,
-  
-  M_SOI   = 0xd8,
-  M_EOI   = 0xd9,
-  M_SOS   = 0xda,
-  M_DQT   = 0xdb,
-  M_DNL   = 0xdc,
-  M_DRI   = 0xdd,
-  M_DHP   = 0xde,
-  M_EXP   = 0xdf,
-  
-  M_APP0  = 0xe0,
-  M_APP1  = 0xe1,
-  M_APP2  = 0xe2,
-  M_APP3  = 0xe3,
-  M_APP4  = 0xe4,
-  M_APP5  = 0xe5,
-  M_APP6  = 0xe6,
-  M_APP7  = 0xe7,
-  M_APP8  = 0xe8,
-  M_APP9  = 0xe9,
-  M_APP10 = 0xea,
-  M_APP11 = 0xeb,
-  M_APP12 = 0xec,
-  M_APP13 = 0xed,
-  M_APP14 = 0xee,
-  M_APP15 = 0xef,
-  
-  M_JPG0  = 0xf0,
-  M_JPG13 = 0xfd,
-  M_COM   = 0xfe,
-  
-  M_TEM   = 0x01,
-  
-  M_ERROR = 0x100
-} JPEG_MARKER;
-
-
-/*
- * Macros for fetching data from the data source module.
- *
- * At all times, cinfo->src->next_input_byte and ->bytes_in_buffer reflect
- * the current restart point; we update them only when we have reached a
- * suitable place to restart if a suspension occurs.
- */
-
-/* Declare and initialize local copies of input pointer/count */
-#define INPUT_VARS(cinfo)  \
-	struct jpeg_source_mgr * datasrc = (cinfo)->src;  \
-	const JOCTET * next_input_byte = datasrc->next_input_byte;  \
-	size_t bytes_in_buffer = datasrc->bytes_in_buffer
-
-/* Unload the local copies --- do this only at a restart boundary */
-#define INPUT_SYNC(cinfo)  \
-	( datasrc->next_input_byte = next_input_byte,  \
-	  datasrc->bytes_in_buffer = bytes_in_buffer )
-
-/* Reload the local copies --- seldom used except in MAKE_BYTE_AVAIL */
-#define INPUT_RELOAD(cinfo)  \
-	( next_input_byte = datasrc->next_input_byte,  \
-	  bytes_in_buffer = datasrc->bytes_in_buffer )
-
-/* Internal macro for INPUT_BYTE and INPUT_2BYTES: make a byte available.
- * Note we do *not* do INPUT_SYNC before calling fill_input_buffer,
- * but we must reload the local copies after a successful fill.
- */
-#define MAKE_BYTE_AVAIL(cinfo,action)  \
-	if (bytes_in_buffer == 0) {  \
-	  if (! (*datasrc->fill_input_buffer) (cinfo))  \
-	    { action; }  \
-	  INPUT_RELOAD(cinfo);  \
-	}  \
-	bytes_in_buffer--
-
-/* Read a byte into variable V.
- * If must suspend, take the specified action (typically "return FALSE").
- */
-#define INPUT_BYTE(cinfo,V,action)  \
-	MAKESTMT( MAKE_BYTE_AVAIL(cinfo,action); \
-		  V = GETJOCTET(*next_input_byte++); )
-
-/* As above, but read two bytes interpreted as an unsigned 16-bit integer.
- * V should be declared unsigned int or perhaps INT32.
- */
-#define INPUT_2BYTES(cinfo,V,action)  \
-	MAKESTMT( MAKE_BYTE_AVAIL(cinfo,action); \
-		  V = ((unsigned int) GETJOCTET(*next_input_byte++)) << 8; \
-		  MAKE_BYTE_AVAIL(cinfo,action); \
-		  V += GETJOCTET(*next_input_byte++); )
-
-
-/*
- * Routines to process JPEG markers.
- *
- * Entry condition: JPEG marker itself has been read and its code saved
- *   in cinfo->unread_marker; input restart point is just after the marker.
- *
- * Exit: if return TRUE, have read and processed any parameters, and have
- *   updated the restart point to point after the parameters.
- *   If return FALSE, was forced to suspend before reaching end of
- *   marker parameters; restart point has not been moved.  Same routine
- *   will be called again after application supplies more input data.
- *
- * This approach to suspension assumes that all of a marker's parameters can
- * fit into a single input bufferload.  This should hold for "normal"
- * markers.  Some COM/APPn markers might have large parameter segments,
- * but we use skip_input_data to get past those, and thereby put the problem
- * on the source manager's shoulders.
- *
- * Note that we don't bother to avoid duplicate trace messages if a
- * suspension occurs within marker parameters.  Other side effects
- * require more care.
- */
-
-
-LOCAL boolean
-get_soi (j_decompress_ptr cinfo)
-/* Process an SOI marker */
-{
-  int i;
-  
-  TRACEMS(cinfo, 1, JTRC_SOI);
-
-  if (cinfo->marker->saw_SOI)
-    ERREXIT(cinfo, JERR_SOI_DUPLICATE);
-
-  /* Reset all parameters that are defined to be reset by SOI */
-
-  for (i = 0; i < NUM_ARITH_TBLS; i++) {
-    cinfo->arith_dc_L[i] = 0;
-    cinfo->arith_dc_U[i] = 1;
-    cinfo->arith_ac_K[i] = 5;
-  }
-  cinfo->restart_interval = 0;
-
-  /* Set initial assumptions for colorspace etc */
-
-  cinfo->jpeg_color_space = JCS_UNKNOWN;
-  cinfo->CCIR601_sampling = FALSE; /* Assume non-CCIR sampling??? */
-
-  cinfo->saw_JFIF_marker = FALSE;
-  cinfo->density_unit = 0;	/* set default JFIF APP0 values */
-  cinfo->X_density = 1;
-  cinfo->Y_density = 1;
-  cinfo->saw_Adobe_marker = FALSE;
-  cinfo->Adobe_transform = 0;
-
-  cinfo->marker->saw_SOI = TRUE;
-
-  return TRUE;
-}
-
-
-LOCAL boolean
-get_sof (j_decompress_ptr cinfo, boolean is_prog, boolean is_arith)
-/* Process a SOFn marker */
-{
-  INT32 length;
-  int c, ci;
-  jpeg_component_info * compptr;
-  INPUT_VARS(cinfo);
-
-  cinfo->progressive_mode = is_prog;
-  cinfo->arith_code = is_arith;
-
-  INPUT_2BYTES(cinfo, length, return FALSE);
-
-  INPUT_BYTE(cinfo, cinfo->data_precision, return FALSE);
-  INPUT_2BYTES(cinfo, cinfo->image_height, return FALSE);
-  INPUT_2BYTES(cinfo, cinfo->image_width, return FALSE);
-  INPUT_BYTE(cinfo, cinfo->num_components, return FALSE);
-
-  length -= 8;
-
-  TRACEMS4(cinfo, 1, JTRC_SOF, cinfo->unread_marker,
-	   (int) cinfo->image_width, (int) cinfo->image_height,
-	   cinfo->num_components);
-
-  if (cinfo->marker->saw_SOF)
-    ERREXIT(cinfo, JERR_SOF_DUPLICATE);
-
-  /* We don't support files in which the image height is initially specified */
-  /* as 0 and is later redefined by DNL.  As long as we have to check that,  */
-  /* might as well have a general sanity check. */
-  if (cinfo->image_height <= 0 || cinfo->image_width <= 0
-      || cinfo->num_components <= 0)
-    ERREXIT(cinfo, JERR_EMPTY_IMAGE);
-
-  if (length != (cinfo->num_components * 3))
-    ERREXIT(cinfo, JERR_BAD_LENGTH);
-
-  if (cinfo->comp_info == NULL)	/* do only once, even if suspend */
-    cinfo->comp_info = (jpeg_component_info *) (*cinfo->mem->alloc_small)
-			((j_common_ptr) cinfo, JPOOL_IMAGE,
-			 cinfo->num_components * SIZEOF(jpeg_component_info));
-  
-  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
-       ci++, compptr++) {
-    compptr->component_index = ci;
-    INPUT_BYTE(cinfo, compptr->component_id, return FALSE);
-    INPUT_BYTE(cinfo, c, return FALSE);
-    compptr->h_samp_factor = (c >> 4) & 15;
-    compptr->v_samp_factor = (c     ) & 15;
-    INPUT_BYTE(cinfo, compptr->quant_tbl_no, return FALSE);
-
-    TRACEMS4(cinfo, 1, JTRC_SOF_COMPONENT,
-	     compptr->component_id, compptr->h_samp_factor,
-	     compptr->v_samp_factor, compptr->quant_tbl_no);
-  }
-
-  cinfo->marker->saw_SOF = TRUE;
-
-  INPUT_SYNC(cinfo);
-  return TRUE;
-}
-
-
-LOCAL boolean
-get_sos (j_decompress_ptr cinfo)
-/* Process a SOS marker */
-{
-  INT32 length;
-  int i, ci, n, c, cc;
-  jpeg_component_info * compptr;
-  INPUT_VARS(cinfo);
-
-  if (! cinfo->marker->saw_SOF)
-    ERREXIT(cinfo, JERR_SOS_NO_SOF);
-
-  INPUT_2BYTES(cinfo, length, return FALSE);
-
-  INPUT_BYTE(cinfo, n, return FALSE); /* Number of components */
-
-  if (length != (n * 2 + 6) || n < 1 || n > MAX_COMPS_IN_SCAN)
-    ERREXIT(cinfo, JERR_BAD_LENGTH);
-
-  TRACEMS1(cinfo, 1, JTRC_SOS, n);
-
-  cinfo->comps_in_scan = n;
-
-  /* Collect the component-spec parameters */
-
-  for (i = 0; i < n; i++) {
-    INPUT_BYTE(cinfo, cc, return FALSE);
-    INPUT_BYTE(cinfo, c, return FALSE);
-    
-    for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
-	 ci++, compptr++) {
-      if (cc == compptr->component_id)
-	goto id_found;
-    }
-
-    ERREXIT1(cinfo, JERR_BAD_COMPONENT_ID, cc);
-
-  id_found:
-
-    cinfo->cur_comp_info[i] = compptr;
-    compptr->dc_tbl_no = (c >> 4) & 15;
-    compptr->ac_tbl_no = (c     ) & 15;
-    
-    TRACEMS3(cinfo, 1, JTRC_SOS_COMPONENT, cc,
-	     compptr->dc_tbl_no, compptr->ac_tbl_no);
-  }
-
-  /* Collect the additional scan parameters Ss, Se, Ah/Al. */
-  INPUT_BYTE(cinfo, c, return FALSE);
-  cinfo->Ss = c;
-  INPUT_BYTE(cinfo, c, return FALSE);
-  cinfo->Se = c;
-  INPUT_BYTE(cinfo, c, return FALSE);
-  cinfo->Ah = (c >> 4) & 15;
-  cinfo->Al = (c     ) & 15;
-
-  TRACEMS4(cinfo, 1, JTRC_SOS_PARAMS, cinfo->Ss, cinfo->Se,
-	   cinfo->Ah, cinfo->Al);
-
-  /* Prepare to scan data & restart markers */
-  cinfo->marker->next_restart_num = 0;
-
-  /* Count another SOS marker */
-  cinfo->input_scan_number++;
-
-  INPUT_SYNC(cinfo);
-  return TRUE;
-}
-
-
-METHODDEF boolean
-get_app0 (j_decompress_ptr cinfo)
-/* Process an APP0 marker */
-{
-#define JFIF_LEN 14
-  INT32 length;
-  UINT8 b[JFIF_LEN];
-  int buffp;
-  INPUT_VARS(cinfo);
-
-  INPUT_2BYTES(cinfo, length, return FALSE);
-  length -= 2;
-
-  /* See if a JFIF APP0 marker is present */
-
-  if (length >= JFIF_LEN) {
-    for (buffp = 0; buffp < JFIF_LEN; buffp++)
-      INPUT_BYTE(cinfo, b[buffp], return FALSE);
-    length -= JFIF_LEN;
-
-    if (b[0]==0x4A && b[1]==0x46 && b[2]==0x49 && b[3]==0x46 && b[4]==0) {
-      /* Found JFIF APP0 marker: check version */
-      /* Major version must be 1, anything else signals an incompatible change.
-       * We used to treat this as an error, but now it's a nonfatal warning,
-       * because some bozo at Hijaak couldn't read the spec.
-       * Minor version should be 0..2, but process anyway if newer.
-       */
-      if (b[5] != 1)
-	WARNMS2(cinfo, JWRN_JFIF_MAJOR, b[5], b[6]);
-      else if (b[6] > 2)
-	TRACEMS2(cinfo, 1, JTRC_JFIF_MINOR, b[5], b[6]);
-      /* Save info */
-      cinfo->saw_JFIF_marker = TRUE;
-      cinfo->density_unit = b[7];
-      cinfo->X_density = (b[8] << 8) + b[9];
-      cinfo->Y_density = (b[10] << 8) + b[11];
-      TRACEMS3(cinfo, 1, JTRC_JFIF,
-	       cinfo->X_density, cinfo->Y_density, cinfo->density_unit);
-      if (b[12] | b[13])
-	TRACEMS2(cinfo, 1, JTRC_JFIF_THUMBNAIL, b[12], b[13]);
-      if (length != ((INT32) b[12] * (INT32) b[13] * (INT32) 3))
-	TRACEMS1(cinfo, 1, JTRC_JFIF_BADTHUMBNAILSIZE, (int) length);
-    } else {
-      /* Start of APP0 does not match "JFIF" */
-      TRACEMS1(cinfo, 1, JTRC_APP0, (int) length + JFIF_LEN);
-    }
-  } else {
-    /* Too short to be JFIF marker */
-    TRACEMS1(cinfo, 1, JTRC_APP0, (int) length);
-  }
-
-  INPUT_SYNC(cinfo);
-  if (length > 0)		/* skip any remaining data -- could be lots */
-    (*cinfo->src->skip_input_data) (cinfo, (long) length);
-
-  return TRUE;
-}
-
-
-METHODDEF boolean
-get_app14 (j_decompress_ptr cinfo)
-/* Process an APP14 marker */
-{
-#define ADOBE_LEN 12
-  INT32 length;
-  UINT8 b[ADOBE_LEN];
-  int buffp;
-  unsigned int version, flags0, flags1, transform;
-  INPUT_VARS(cinfo);
-
-  INPUT_2BYTES(cinfo, length, return FALSE);
-  length -= 2;
-
-  /* See if an Adobe APP14 marker is present */
-
-  if (length >= ADOBE_LEN) {
-    for (buffp = 0; buffp < ADOBE_LEN; buffp++)
-      INPUT_BYTE(cinfo, b[buffp], return FALSE);
-    length -= ADOBE_LEN;
-
-    if (b[0]==0x41 && b[1]==0x64 && b[2]==0x6F && b[3]==0x62 && b[4]==0x65) {
-      /* Found Adobe APP14 marker */
-      version = (b[5] << 8) + b[6];
-      flags0 = (b[7] << 8) + b[8];
-      flags1 = (b[9] << 8) + b[10];
-      transform = b[11];
-      TRACEMS4(cinfo, 1, JTRC_ADOBE, version, flags0, flags1, transform);
-      cinfo->saw_Adobe_marker = TRUE;
-      cinfo->Adobe_transform = (UINT8) transform;
-    } else {
-      /* Start of APP14 does not match "Adobe" */
-      TRACEMS1(cinfo, 1, JTRC_APP14, (int) length + ADOBE_LEN);
-    }
-  } else {
-    /* Too short to be Adobe marker */
-    TRACEMS1(cinfo, 1, JTRC_APP14, (int) length);
-  }
-
-  INPUT_SYNC(cinfo);
-  if (length > 0)		/* skip any remaining data -- could be lots */
-    (*cinfo->src->skip_input_data) (cinfo, (long) length);
-
-  return TRUE;
-}
-
-
-LOCAL boolean
-get_dac (j_decompress_ptr cinfo)
-/* Process a DAC marker */
-{
-  INT32 length;
-  int index, val;
-  INPUT_VARS(cinfo);
-
-  INPUT_2BYTES(cinfo, length, return FALSE);
-  length -= 2;
-  
-  while (length > 0) {
-    INPUT_BYTE(cinfo, index, return FALSE);
-    INPUT_BYTE(cinfo, val, return FALSE);
-
-    length -= 2;
-
-    TRACEMS2(cinfo, 1, JTRC_DAC, index, val);
-
-    if (index < 0 || index >= (2*NUM_ARITH_TBLS))
-      ERREXIT1(cinfo, JERR_DAC_INDEX, index);
-
-    if (index >= NUM_ARITH_TBLS) { /* define AC table */
-      cinfo->arith_ac_K[index-NUM_ARITH_TBLS] = (UINT8) val;
-    } else {			/* define DC table */
-      cinfo->arith_dc_L[index] = (UINT8) (val & 0x0F);
-      cinfo->arith_dc_U[index] = (UINT8) (val >> 4);
-      if (cinfo->arith_dc_L[index] > cinfo->arith_dc_U[index])
-	ERREXIT1(cinfo, JERR_DAC_VALUE, val);
-    }
-  }
-
-  INPUT_SYNC(cinfo);
-  return TRUE;
-}
-
-
-LOCAL boolean
-get_dht (j_decompress_ptr cinfo)
-/* Process a DHT marker */
-{
-  INT32 length;
-  UINT8 bits[17];
-  UINT8 huffval[256];
-  int i, index, count;
-  JHUFF_TBL **htblptr;
-  INPUT_VARS(cinfo);
-
-  INPUT_2BYTES(cinfo, length, return FALSE);
-  length -= 2;
-  
-  while (length > 0) {
-    INPUT_BYTE(cinfo, index, return FALSE);
-
-    TRACEMS1(cinfo, 1, JTRC_DHT, index);
-      
-    bits[0] = 0;
-    count = 0;
-    for (i = 1; i <= 16; i++) {
-      INPUT_BYTE(cinfo, bits[i], return FALSE);
-      count += bits[i];
-    }
-
-    length -= 1 + 16;
-
-    TRACEMS8(cinfo, 2, JTRC_HUFFBITS,
-	     bits[1], bits[2], bits[3], bits[4],
-	     bits[5], bits[6], bits[7], bits[8]);
-    TRACEMS8(cinfo, 2, JTRC_HUFFBITS,
-	     bits[9], bits[10], bits[11], bits[12],
-	     bits[13], bits[14], bits[15], bits[16]);
-
-    if (count > 256 || ((INT32) count) > length)
-      ERREXIT(cinfo, JERR_DHT_COUNTS);
-
-    for (i = 0; i < count; i++)
-      INPUT_BYTE(cinfo, huffval[i], return FALSE);
-
-    length -= count;
-
-    if (index & 0x10) {		/* AC table definition */
-      index -= 0x10;
-      htblptr = &cinfo->ac_huff_tbl_ptrs[index];
-    } else {			/* DC table definition */
-      htblptr = &cinfo->dc_huff_tbl_ptrs[index];
-    }
-
-    if (index < 0 || index >= NUM_HUFF_TBLS)
-      ERREXIT1(cinfo, JERR_DHT_INDEX, index);
-
-    if (*htblptr == NULL)
-      *htblptr = jpeg_alloc_huff_table((j_common_ptr) cinfo);
-  
-    MEMCOPY((*htblptr)->bits, bits, SIZEOF((*htblptr)->bits));
-    MEMCOPY((*htblptr)->huffval, huffval, SIZEOF((*htblptr)->huffval));
-  }
-
-  INPUT_SYNC(cinfo);
-  return TRUE;
-}
-
-
-LOCAL boolean
-get_dqt (j_decompress_ptr cinfo)
-/* Process a DQT marker */
-{
-  INT32 length;
-  int n, i, prec;
-  unsigned int tmp;
-  JQUANT_TBL *quant_ptr;
-  INPUT_VARS(cinfo);
-
-  INPUT_2BYTES(cinfo, length, return FALSE);
-  length -= 2;
-
-  while (length > 0) {
-    INPUT_BYTE(cinfo, n, return FALSE);
-    prec = n >> 4;
-    n &= 0x0F;
-
-    TRACEMS2(cinfo, 1, JTRC_DQT, n, prec);
-
-    if (n >= NUM_QUANT_TBLS)
-      ERREXIT1(cinfo, JERR_DQT_INDEX, n);
-      
-    if (cinfo->quant_tbl_ptrs[n] == NULL)
-      cinfo->quant_tbl_ptrs[n] = jpeg_alloc_quant_table((j_common_ptr) cinfo);
-    quant_ptr = cinfo->quant_tbl_ptrs[n];
-
-    for (i = 0; i < DCTSIZE2; i++) {
-      if (prec)
-	INPUT_2BYTES(cinfo, tmp, return FALSE);
-      else
-	INPUT_BYTE(cinfo, tmp, return FALSE);
-      quant_ptr->quantval[i] = (UINT16) tmp;
-    }
-
-    for (i = 0; i < DCTSIZE2; i += 8) {
-      TRACEMS8(cinfo, 2, JTRC_QUANTVALS,
-	       quant_ptr->quantval[i  ], quant_ptr->quantval[i+1],
-	       quant_ptr->quantval[i+2], quant_ptr->quantval[i+3],
-	       quant_ptr->quantval[i+4], quant_ptr->quantval[i+5],
-	       quant_ptr->quantval[i+6], quant_ptr->quantval[i+7]);
-    }
-
-    length -= DCTSIZE2+1;
-    if (prec) length -= DCTSIZE2;
-  }
-
-  INPUT_SYNC(cinfo);
-  return TRUE;
-}
-
-
-LOCAL boolean
-get_dri (j_decompress_ptr cinfo)
-/* Process a DRI marker */
-{
-  INT32 length;
-  unsigned int tmp;
-  INPUT_VARS(cinfo);
-
-  INPUT_2BYTES(cinfo, length, return FALSE);
-  
-  if (length != 4)
-    ERREXIT(cinfo, JERR_BAD_LENGTH);
-
-  INPUT_2BYTES(cinfo, tmp, return FALSE);
-
-  TRACEMS1(cinfo, 1, JTRC_DRI, tmp);
-
-  cinfo->restart_interval = tmp;
-
-  INPUT_SYNC(cinfo);
-  return TRUE;
-}
-
-
-METHODDEF boolean
-skip_variable (j_decompress_ptr cinfo)
-/* Skip over an unknown or uninteresting variable-length marker */
-{
-  INT32 length;
-  INPUT_VARS(cinfo);
-
-  INPUT_2BYTES(cinfo, length, return FALSE);
-  
-  TRACEMS2(cinfo, 1, JTRC_MISC_MARKER, cinfo->unread_marker, (int) length);
-
-  INPUT_SYNC(cinfo);		/* do before skip_input_data */
-  (*cinfo->src->skip_input_data) (cinfo, (long) length - 2L);
-
-  return TRUE;
-}
-
-
-/*
- * Find the next JPEG marker, save it in cinfo->unread_marker.
- * Returns FALSE if had to suspend before reaching a marker;
- * in that case cinfo->unread_marker is unchanged.
- *
- * Note that the result might not be a valid marker code,
- * but it will never be 0 or FF.
- */
-
-LOCAL boolean
-next_marker (j_decompress_ptr cinfo)
-{
-  int c;
-  INPUT_VARS(cinfo);
-
-  for (;;) {
-    INPUT_BYTE(cinfo, c, return FALSE);
-    /* Skip any non-FF bytes.
-     * This may look a bit inefficient, but it will not occur in a valid file.
-     * We sync after each discarded byte so that a suspending data source
-     * can discard the byte from its buffer.
-     */
-    while (c != 0xFF) {
-      cinfo->marker->discarded_bytes++;
-      INPUT_SYNC(cinfo);
-      INPUT_BYTE(cinfo, c, return FALSE);
-    }
-    /* This loop swallows any duplicate FF bytes.  Extra FFs are legal as
-     * pad bytes, so don't count them in discarded_bytes.  We assume there
-     * will not be so many consecutive FF bytes as to overflow a suspending
-     * data source's input buffer.
-     */
-    do {
-      INPUT_BYTE(cinfo, c, return FALSE);
-    } while (c == 0xFF);
-    if (c != 0)
-      break;			/* found a valid marker, exit loop */
-    /* Reach here if we found a stuffed-zero data sequence (FF/00).
-     * Discard it and loop back to try again.
-     */
-    cinfo->marker->discarded_bytes += 2;
-    INPUT_SYNC(cinfo);
-  }
-
-  if (cinfo->marker->discarded_bytes != 0) {
-    WARNMS2(cinfo, JWRN_EXTRANEOUS_DATA, cinfo->marker->discarded_bytes, c);
-    cinfo->marker->discarded_bytes = 0;
-  }
-
-  cinfo->unread_marker = c;
-
-  INPUT_SYNC(cinfo);
-  return TRUE;
-}
-
-
-LOCAL boolean
-first_marker (j_decompress_ptr cinfo)
-/* Like next_marker, but used to obtain the initial SOI marker. */
-/* For this marker, we do not allow preceding garbage or fill; otherwise,
- * we might well scan an entire input file before realizing it ain't JPEG.
- * If an application wants to process non-JFIF files, it must seek to the
- * SOI before calling the JPEG library.
- */
-{
-  int c, c2;
-  INPUT_VARS(cinfo);
-
-  INPUT_BYTE(cinfo, c, return FALSE);
-  INPUT_BYTE(cinfo, c2, return FALSE);
-  if (c != 0xFF || c2 != (int) M_SOI)
-    ERREXIT2(cinfo, JERR_NO_SOI, c, c2);
-
-  cinfo->unread_marker = c2;
-
-  INPUT_SYNC(cinfo);
-  return TRUE;
-}
-
-
-/*
- * Read markers until SOS or EOI.
- *
- * Returns same codes as are defined for jpeg_consume_input:
- * JPEG_SUSPENDED, JPEG_REACHED_SOS, or JPEG_REACHED_EOI.
- */
-
-METHODDEF int
-read_markers (j_decompress_ptr cinfo)
-{
-  /* Outer loop repeats once for each marker. */
-  for (;;) {
-    /* Collect the marker proper, unless we already did. */
-    /* NB: first_marker() enforces the requirement that SOI appear first. */
-    if (cinfo->unread_marker == 0) {
-      if (! cinfo->marker->saw_SOI) {
-	if (! first_marker(cinfo))
-	  return JPEG_SUSPENDED;
-      } else {
-	if (! next_marker(cinfo))
-	  return JPEG_SUSPENDED;
-      }
-    }
-    /* At this point cinfo->unread_marker contains the marker code and the
-     * input point is just past the marker proper, but before any parameters.
-     * A suspension will cause us to return with this state still true.
-     */
-    switch (cinfo->unread_marker) {
-    case M_SOI:
-      if (! get_soi(cinfo))
-	return JPEG_SUSPENDED;
-      break;
-
-    case M_SOF0:		/* Baseline */
-    case M_SOF1:		/* Extended sequential, Huffman */
-      if (! get_sof(cinfo, FALSE, FALSE))
-	return JPEG_SUSPENDED;
-      break;
-
-    case M_SOF2:		/* Progressive, Huffman */
-      if (! get_sof(cinfo, TRUE, FALSE))
-	return JPEG_SUSPENDED;
-      break;
-
-    case M_SOF9:		/* Extended sequential, arithmetic */
-      if (! get_sof(cinfo, FALSE, TRUE))
-	return JPEG_SUSPENDED;
-      break;
-
-    case M_SOF10:		/* Progressive, arithmetic */
-      if (! get_sof(cinfo, TRUE, TRUE))
-	return JPEG_SUSPENDED;
-      break;
-
-    /* Currently unsupported SOFn types */
-    case M_SOF3:		/* Lossless, Huffman */
-    case M_SOF5:		/* Differential sequential, Huffman */
-    case M_SOF6:		/* Differential progressive, Huffman */
-    case M_SOF7:		/* Differential lossless, Huffman */
-    case M_JPG:			/* Reserved for JPEG extensions */
-    case M_SOF11:		/* Lossless, arithmetic */
-    case M_SOF13:		/* Differential sequential, arithmetic */
-    case M_SOF14:		/* Differential progressive, arithmetic */
-    case M_SOF15:		/* Differential lossless, arithmetic */
-      ERREXIT1(cinfo, JERR_SOF_UNSUPPORTED, cinfo->unread_marker);
-      break;
-
-    case M_SOS:
-      if (! get_sos(cinfo))
-	return JPEG_SUSPENDED;
-      cinfo->unread_marker = 0;	/* processed the marker */
-      return JPEG_REACHED_SOS;
-    
-    case M_EOI:
-      TRACEMS(cinfo, 1, JTRC_EOI);
-      cinfo->unread_marker = 0;	/* processed the marker */
-      return JPEG_REACHED_EOI;
-      
-    case M_DAC:
-      if (! get_dac(cinfo))
-	return JPEG_SUSPENDED;
-      break;
-      
-    case M_DHT:
-      if (! get_dht(cinfo))
-	return JPEG_SUSPENDED;
-      break;
-      
-    case M_DQT:
-      if (! get_dqt(cinfo))
-	return JPEG_SUSPENDED;
-      break;
-      
-    case M_DRI:
-      if (! get_dri(cinfo))
-	return JPEG_SUSPENDED;
-      break;
-      
-    case M_APP0:
-    case M_APP1:
-    case M_APP2:
-    case M_APP3:
-    case M_APP4:
-    case M_APP5:
-    case M_APP6:
-    case M_APP7:
-    case M_APP8:
-    case M_APP9:
-    case M_APP10:
-    case M_APP11:
-    case M_APP12:
-    case M_APP13:
-    case M_APP14:
-    case M_APP15:
-      if (! (*cinfo->marker->process_APPn[cinfo->unread_marker - (int) M_APP0]) (cinfo))
-	return JPEG_SUSPENDED;
-      break;
-      
-    case M_COM:
-      if (! (*cinfo->marker->process_COM) (cinfo))
-	return JPEG_SUSPENDED;
-      break;
-
-    case M_RST0:		/* these are all parameterless */
-    case M_RST1:
-    case M_RST2:
-    case M_RST3:
-    case M_RST4:
-    case M_RST5:
-    case M_RST6:
-    case M_RST7:
-    case M_TEM:
-      TRACEMS1(cinfo, 1, JTRC_PARMLESS_MARKER, cinfo->unread_marker);
-      break;
-
-    case M_DNL:			/* Ignore DNL ... perhaps the wrong thing */
-      if (! skip_variable(cinfo))
-	return JPEG_SUSPENDED;
-      break;
-
-    default:			/* must be DHP, EXP, JPGn, or RESn */
-      /* For now, we treat the reserved markers as fatal errors since they are
-       * likely to be used to signal incompatible JPEG Part 3 extensions.
-       * Once the JPEG 3 version-number marker is well defined, this code
-       * ought to change!
-       */
-      ERREXIT1(cinfo, JERR_UNKNOWN_MARKER, cinfo->unread_marker);
-      break;
-    }
-    /* Successfully processed marker, so reset state variable */
-    cinfo->unread_marker = 0;
-  } /* end loop */
-}
-
-
-/*
- * Read a restart marker, which is expected to appear next in the datastream;
- * if the marker is not there, take appropriate recovery action.
- * Returns FALSE if suspension is required.
- *
- * This is called by the entropy decoder after it has read an appropriate
- * number of MCUs.  cinfo->unread_marker may be nonzero if the entropy decoder
- * has already read a marker from the data source.  Under normal conditions
- * cinfo->unread_marker will be reset to 0 before returning; if not reset,
- * it holds a marker which the decoder will be unable to read past.
- */
-
-METHODDEF boolean
-read_restart_marker (j_decompress_ptr cinfo)
-{
-  /* Obtain a marker unless we already did. */
-  /* Note that next_marker will complain if it skips any data. */
-  if (cinfo->unread_marker == 0) {
-    if (! next_marker(cinfo))
-      return FALSE;
-  }
-
-  if (cinfo->unread_marker ==
-      ((int) M_RST0 + cinfo->marker->next_restart_num)) {
-    /* Normal case --- swallow the marker and let entropy decoder continue */
-    TRACEMS1(cinfo, 2, JTRC_RST, cinfo->marker->next_restart_num);
-    cinfo->unread_marker = 0;
-  } else {
-    /* Uh-oh, the restart markers have been messed up. */
-    /* Let the data source manager determine how to resync. */
-    if (! (*cinfo->src->resync_to_restart) (cinfo,
-					    cinfo->marker->next_restart_num))
-      return FALSE;
-  }
-
-  /* Update next-restart state */
-  cinfo->marker->next_restart_num = (cinfo->marker->next_restart_num + 1) & 7;
-
-  return TRUE;
-}
-
-
-/*
- * This is the default resync_to_restart method for data source managers
- * to use if they don't have any better approach.  Some data source managers
- * may be able to back up, or may have additional knowledge about the data
- * which permits a more intelligent recovery strategy; such managers would
- * presumably supply their own resync method.
- *
- * read_restart_marker calls resync_to_restart if it finds a marker other than
- * the restart marker it was expecting.  (This code is *not* used unless
- * a nonzero restart interval has been declared.)  cinfo->unread_marker is
- * the marker code actually found (might be anything, except 0 or FF).
- * The desired restart marker number (0..7) is passed as a parameter.
- * This routine is supposed to apply whatever error recovery strategy seems
- * appropriate in order to position the input stream to the next data segment.
- * Note that cinfo->unread_marker is treated as a marker appearing before
- * the current data-source input point; usually it should be reset to zero
- * before returning.
- * Returns FALSE if suspension is required.
- *
- * This implementation is substantially constrained by wanting to treat the
- * input as a data stream; this means we can't back up.  Therefore, we have
- * only the following actions to work with:
- *   1. Simply discard the marker and let the entropy decoder resume at next
- *      byte of file.
- *   2. Read forward until we find another marker, discarding intervening
- *      data.  (In theory we could look ahead within the current bufferload,
- *      without having to discard data if we don't find the desired marker.
- *      This idea is not implemented here, in part because it makes behavior
- *      dependent on buffer size and chance buffer-boundary positions.)
- *   3. Leave the marker unread (by failing to zero cinfo->unread_marker).
- *      This will cause the entropy decoder to process an empty data segment,
- *      inserting dummy zeroes, and then we will reprocess the marker.
- *
- * #2 is appropriate if we think the desired marker lies ahead, while #3 is
- * appropriate if the found marker is a future restart marker (indicating
- * that we have missed the desired restart marker, probably because it got
- * corrupted).
- * We apply #2 or #3 if the found marker is a restart marker no more than
- * two counts behind or ahead of the expected one.  We also apply #2 if the
- * found marker is not a legal JPEG marker code (it's certainly bogus data).
- * If the found marker is a restart marker more than 2 counts away, we do #1
- * (too much risk that the marker is erroneous; with luck we will be able to
- * resync at some future point).
- * For any valid non-restart JPEG marker, we apply #3.  This keeps us from
- * overrunning the end of a scan.  An implementation limited to single-scan
- * files might find it better to apply #2 for markers other than EOI, since
- * any other marker would have to be bogus data in that case.
- */
-
-GLOBAL boolean
-jpeg_resync_to_restart (j_decompress_ptr cinfo, int desired)
-{
-  int marker = cinfo->unread_marker;
-  int action = 1;
-  
-  /* Always put up a warning. */
-  WARNMS2(cinfo, JWRN_MUST_RESYNC, marker, desired);
-  
-  /* Outer loop handles repeated decision after scanning forward. */
-  for (;;) {
-    if (marker < (int) M_SOF0)
-      action = 2;		/* invalid marker */
-    else if (marker < (int) M_RST0 || marker > (int) M_RST7)
-      action = 3;		/* valid non-restart marker */
-    else {
-      if (marker == ((int) M_RST0 + ((desired+1) & 7)) ||
-	  marker == ((int) M_RST0 + ((desired+2) & 7)))
-	action = 3;		/* one of the next two expected restarts */
-      else if (marker == ((int) M_RST0 + ((desired-1) & 7)) ||
-	       marker == ((int) M_RST0 + ((desired-2) & 7)))
-	action = 2;		/* a prior restart, so advance */
-      else
-	action = 1;		/* desired restart or too far away */
-    }
-    TRACEMS2(cinfo, 4, JTRC_RECOVERY_ACTION, marker, action);
-    switch (action) {
-    case 1:
-      /* Discard marker and let entropy decoder resume processing. */
-      cinfo->unread_marker = 0;
-      return TRUE;
-    case 2:
-      /* Scan to the next marker, and repeat the decision loop. */
-      if (! next_marker(cinfo))
-	return FALSE;
-      marker = cinfo->unread_marker;
-      break;
-    case 3:
-      /* Return without advancing past this marker. */
-      /* Entropy decoder will be forced to process an empty segment. */
-      return TRUE;
-    }
-  } /* end loop */
-}
-
-
-/*
- * Reset marker processing state to begin a fresh datastream.
- */
-
-METHODDEF void
-reset_marker_reader (j_decompress_ptr cinfo)
-{
-  cinfo->comp_info = NULL;		/* until allocated by get_sof */
-  cinfo->input_scan_number = 0;		/* no SOS seen yet */
-  cinfo->unread_marker = 0;		/* no pending marker */
-  cinfo->marker->saw_SOI = FALSE;	/* set internal state too */
-  cinfo->marker->saw_SOF = FALSE;
-  cinfo->marker->discarded_bytes = 0;
-}
-
-
-/*
- * Initialize the marker reader module.
- * This is called only once, when the decompression object is created.
- */
-
-GLOBAL void
-jinit_marker_reader (j_decompress_ptr cinfo)
-{
-  int i;
-
-  /* Create subobject in permanent pool */
-  cinfo->marker = (struct jpeg_marker_reader *)
-    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
-				SIZEOF(struct jpeg_marker_reader));
-  /* Initialize method pointers */
-  cinfo->marker->reset_marker_reader = reset_marker_reader;
-  cinfo->marker->read_markers = read_markers;
-  cinfo->marker->read_restart_marker = read_restart_marker;
-  cinfo->marker->process_COM = skip_variable;
-  for (i = 0; i < 16; i++)
-    cinfo->marker->process_APPn[i] = skip_variable;
-  cinfo->marker->process_APPn[0] = get_app0;
-  cinfo->marker->process_APPn[14] = get_app14;
-  /* Reset marker processing state */
-  reset_marker_reader(cinfo);
-}
diff -NEaurb neo/renderer/jpeg-6/jdmaster.c neo/renderer/jpeg-6/jdmaster.c
--- neo/renderer/jpeg-6/jdmaster.c	2011-12-26 04:15:38 +0000
+++ neo/renderer/jpeg-6/jdmaster.c	1970-01-01 00:00:00 +0000
@@ -1,557 +0,0 @@
-/*
- * jdmaster.c
- *
- * Copyright (C) 1991-1995, Thomas G. Lane.
- * This file is part of the Independent JPEG Group's software.
- * For conditions of distribution and use, see the accompanying README file.
- *
- * This file contains master control logic for the JPEG decompressor.
- * These routines are concerned with selecting the modules to be executed
- * and with determining the number of passes and the work to be done in each
- * pass.
- */
-
-#define JPEG_INTERNALS
-#include "jinclude.h"
-#include "jpeglib.h"
-
-
-/* Private state */
-
-typedef struct {
-  struct jpeg_decomp_master pub; /* public fields */
-
-  int pass_number;		/* # of passes completed */
-
-  boolean using_merged_upsample; /* TRUE if using merged upsample/cconvert */
-
-  /* Saved references to initialized quantizer modules,
-   * in case we need to switch modes.
-   */
-  struct jpeg_color_quantizer * quantizer_1pass;
-  struct jpeg_color_quantizer * quantizer_2pass;
-} my_decomp_master;
-
-typedef my_decomp_master * my_master_ptr;
-
-
-/*
- * Determine whether merged upsample/color conversion should be used.
- * CRUCIAL: this must match the actual capabilities of jdmerge.c!
- */
-
-LOCAL boolean
-use_merged_upsample (j_decompress_ptr cinfo)
-{
-#ifdef UPSAMPLE_MERGING_SUPPORTED
-  /* Merging is the equivalent of plain box-filter upsampling */
-  if (cinfo->do_fancy_upsampling || cinfo->CCIR601_sampling)
-    return FALSE;
-  /* jdmerge.c only supports YCC=>RGB color conversion */
-  if (cinfo->jpeg_color_space != JCS_YCbCr || cinfo->num_components != 3 ||
-      cinfo->out_color_space != JCS_RGB ||
-      cinfo->out_color_components != RGB_PIXELSIZE)
-    return FALSE;
-  /* and it only handles 2h1v or 2h2v sampling ratios */
-  if (cinfo->comp_info[0].h_samp_factor != 2 ||
-      cinfo->comp_info[1].h_samp_factor != 1 ||
-      cinfo->comp_info[2].h_samp_factor != 1 ||
-      cinfo->comp_info[0].v_samp_factor >  2 ||
-      cinfo->comp_info[1].v_samp_factor != 1 ||
-      cinfo->comp_info[2].v_samp_factor != 1)
-    return FALSE;
-  /* furthermore, it doesn't work if we've scaled the IDCTs differently */
-  if (cinfo->comp_info[0].DCT_scaled_size != cinfo->min_DCT_scaled_size ||
-      cinfo->comp_info[1].DCT_scaled_size != cinfo->min_DCT_scaled_size ||
-      cinfo->comp_info[2].DCT_scaled_size != cinfo->min_DCT_scaled_size)
-    return FALSE;
-  /* ??? also need to test for upsample-time rescaling, when & if supported */
-  return TRUE;			/* by golly, it'll work... */
-#else
-  return FALSE;
-#endif
-}
-
-
-/*
- * Compute output image dimensions and related values.
- * NOTE: this is exported for possible use by application.
- * Hence it mustn't do anything that can't be done twice.
- * Also note that it may be called before the master module is initialized!
- */
-
-GLOBAL void
-jpeg_calc_output_dimensions (j_decompress_ptr cinfo)
-/* Do computations that are needed before master selection phase */
-{
-#if 0	// JDC: commented out to remove warning
-  int ci;
-  jpeg_component_info *compptr;
-#endif
-
-  /* Prevent application from calling me at wrong times */
-  if (cinfo->global_state != DSTATE_READY)
-    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
-
-#ifdef IDCT_SCALING_SUPPORTED
-
-  /* Compute actual output image dimensions and DCT scaling choices. */
-  if (cinfo->scale_num * 8 <= cinfo->scale_denom) {
-    /* Provide 1/8 scaling */
-    cinfo->output_width = (JDIMENSION)
-      jdiv_round_up((long) cinfo->image_width, 8L);
-    cinfo->output_height = (JDIMENSION)
-      jdiv_round_up((long) cinfo->image_height, 8L);
-    cinfo->min_DCT_scaled_size = 1;
-  } else if (cinfo->scale_num * 4 <= cinfo->scale_denom) {
-    /* Provide 1/4 scaling */
-    cinfo->output_width = (JDIMENSION)
-      jdiv_round_up((long) cinfo->image_width, 4L);
-    cinfo->output_height = (JDIMENSION)
-      jdiv_round_up((long) cinfo->image_height, 4L);
-    cinfo->min_DCT_scaled_size = 2;
-  } else if (cinfo->scale_num * 2 <= cinfo->scale_denom) {
-    /* Provide 1/2 scaling */
-    cinfo->output_width = (JDIMENSION)
-      jdiv_round_up((long) cinfo->image_width, 2L);
-    cinfo->output_height = (JDIMENSION)
-      jdiv_round_up((long) cinfo->image_height, 2L);
-    cinfo->min_DCT_scaled_size = 4;
-  } else {
-    /* Provide 1/1 scaling */
-    cinfo->output_width = cinfo->image_width;
-    cinfo->output_height = cinfo->image_height;
-    cinfo->min_DCT_scaled_size = DCTSIZE;
-  }
-  /* In selecting the actual DCT scaling for each component, we try to
-   * scale up the chroma components via IDCT scaling rather than upsampling.
-   * This saves time if the upsampler gets to use 1:1 scaling.
-   * Note this code assumes that the supported DCT scalings are powers of 2.
-   */
-  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
-       ci++, compptr++) {
-    int ssize = cinfo->min_DCT_scaled_size;
-    while (ssize < DCTSIZE &&
-	   (compptr->h_samp_factor * ssize * 2 <=
-	    cinfo->max_h_samp_factor * cinfo->min_DCT_scaled_size) &&
-	   (compptr->v_samp_factor * ssize * 2 <=
-	    cinfo->max_v_samp_factor * cinfo->min_DCT_scaled_size)) {
-      ssize = ssize * 2;
-    }
-    compptr->DCT_scaled_size = ssize;
-  }
-
-  /* Recompute downsampled dimensions of components;
-   * application needs to know these if using raw downsampled data.
-   */
-  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
-       ci++, compptr++) {
-    /* Size in samples, after IDCT scaling */
-    compptr->downsampled_width = (JDIMENSION)
-      jdiv_round_up((long) cinfo->image_width *
-		    (long) (compptr->h_samp_factor * compptr->DCT_scaled_size),
-		    (long) (cinfo->max_h_samp_factor * DCTSIZE));
-    compptr->downsampled_height = (JDIMENSION)
-      jdiv_round_up((long) cinfo->image_height *
-		    (long) (compptr->v_samp_factor * compptr->DCT_scaled_size),
-		    (long) (cinfo->max_v_samp_factor * DCTSIZE));
-  }
-
-#else /* !IDCT_SCALING_SUPPORTED */
-
-  /* Hardwire it to "no scaling" */
-  cinfo->output_width = cinfo->image_width;
-  cinfo->output_height = cinfo->image_height;
-  /* jdinput.c has already initialized DCT_scaled_size to DCTSIZE,
-   * and has computed unscaled downsampled_width and downsampled_height.
-   */
-
-#endif /* IDCT_SCALING_SUPPORTED */
-
-  /* Report number of components in selected colorspace. */
-  /* Probably this should be in the color conversion module... */
-  switch (cinfo->out_color_space) {
-  case JCS_GRAYSCALE:
-    cinfo->out_color_components = 1;
-    break;
-  case JCS_RGB:
-#if RGB_PIXELSIZE != 3
-    cinfo->out_color_components = RGB_PIXELSIZE;
-    break;
-#endif /* else share code with YCbCr */
-  case JCS_YCbCr:
-    cinfo->out_color_components = 3;
-    break;
-  case JCS_CMYK:
-  case JCS_YCCK:
-    cinfo->out_color_components = 4;
-    break;
-  default:			/* else must be same colorspace as in file */
-    cinfo->out_color_components = cinfo->num_components;
-    break;
-  }
-  cinfo->output_components = (cinfo->quantize_colors ? 1 :
-			      cinfo->out_color_components);
-
-  /* See if upsampler will want to emit more than one row at a time */
-  if (use_merged_upsample(cinfo))
-    cinfo->rec_outbuf_height = cinfo->max_v_samp_factor;
-  else
-    cinfo->rec_outbuf_height = 1;
-}
-
-
-/*
- * Several decompression processes need to range-limit values to the range
- * 0..MAXJSAMPLE; the input value may fall somewhat outside this range
- * due to noise introduced by quantization, roundoff error, etc.  These
- * processes are inner loops and need to be as fast as possible.  On most
- * machines, particularly CPUs with pipelines or instruction prefetch,
- * a (subscript-check-less) C table lookup
- *		x = sample_range_limit[x];
- * is faster than explicit tests
- *		if (x < 0)  x = 0;
- *		else if (x > MAXJSAMPLE)  x = MAXJSAMPLE;
- * These processes all use a common table prepared by the routine below.
- *
- * For most steps we can mathematically guarantee that the initial value
- * of x is within MAXJSAMPLE+1 of the legal range, so a table running from
- * -(MAXJSAMPLE+1) to 2*MAXJSAMPLE+1 is sufficient.  But for the initial
- * limiting step (just after the IDCT), a wildly out-of-range value is 
- * possible if the input data is corrupt.  To avoid any chance of indexing
- * off the end of memory and getting a bad-pointer trap, we perform the
- * post-IDCT limiting thus:
- *		x = range_limit[x & MASK];
- * where MASK is 2 bits wider than legal sample data, ie 10 bits for 8-bit
- * samples.  Under normal circumstances this is more than enough range and
- * a correct output will be generated; with bogus input data the mask will
- * cause wraparound, and we will safely generate a bogus-but-in-range output.
- * For the post-IDCT step, we want to convert the data from signed to unsigned
- * representation by adding CENTERJSAMPLE at the same time that we limit it.
- * So the post-IDCT limiting table ends up looking like this:
- *   CENTERJSAMPLE,CENTERJSAMPLE+1,...,MAXJSAMPLE,
- *   MAXJSAMPLE (repeat 2*(MAXJSAMPLE+1)-CENTERJSAMPLE times),
- *   0          (repeat 2*(MAXJSAMPLE+1)-CENTERJSAMPLE times),
- *   0,1,...,CENTERJSAMPLE-1
- * Negative inputs select values from the upper half of the table after
- * masking.
- *
- * We can save some space by overlapping the start of the post-IDCT table
- * with the simpler range limiting table.  The post-IDCT table begins at
- * sample_range_limit + CENTERJSAMPLE.
- *
- * Note that the table is allocated in near data space on PCs; it's small
- * enough and used often enough to justify this.
- */
-
-LOCAL void
-prepare_range_limit_table (j_decompress_ptr cinfo)
-/* Allocate and fill in the sample_range_limit table */
-{
-  JSAMPLE * table;
-  int i;
-
-  table = (JSAMPLE *)
-    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
-		(5 * (MAXJSAMPLE+1) + CENTERJSAMPLE) * SIZEOF(JSAMPLE));
-  table += (MAXJSAMPLE+1);	/* allow negative subscripts of simple table */
-  cinfo->sample_range_limit = table;
-  /* First segment of "simple" table: limit[x] = 0 for x < 0 */
-  MEMZERO(table - (MAXJSAMPLE+1), (MAXJSAMPLE+1) * SIZEOF(JSAMPLE));
-  /* Main part of "simple" table: limit[x] = x */
-  for (i = 0; i <= MAXJSAMPLE; i++)
-    table[i] = (JSAMPLE) i;
-  table += CENTERJSAMPLE;	/* Point to where post-IDCT table starts */
-  /* End of simple table, rest of first half of post-IDCT table */
-  for (i = CENTERJSAMPLE; i < 2*(MAXJSAMPLE+1); i++)
-    table[i] = MAXJSAMPLE;
-  /* Second half of post-IDCT table */
-  MEMZERO(table + (2 * (MAXJSAMPLE+1)),
-	  (2 * (MAXJSAMPLE+1) - CENTERJSAMPLE) * SIZEOF(JSAMPLE));
-  MEMCOPY(table + (4 * (MAXJSAMPLE+1) - CENTERJSAMPLE),
-	  cinfo->sample_range_limit, CENTERJSAMPLE * SIZEOF(JSAMPLE));
-}
-
-
-/*
- * Master selection of decompression modules.
- * This is done once at jpeg_start_decompress time.  We determine
- * which modules will be used and give them appropriate initialization calls.
- * We also initialize the decompressor input side to begin consuming data.
- *
- * Since jpeg_read_header has finished, we know what is in the SOF
- * and (first) SOS markers.  We also have all the application parameter
- * settings.
- */
-
-LOCAL void
-master_selection (j_decompress_ptr cinfo)
-{
-  my_master_ptr master = (my_master_ptr) cinfo->master;
-  boolean use_c_buffer;
-  long samplesperrow;
-  JDIMENSION jd_samplesperrow;
-
-  /* Initialize dimensions and other stuff */
-  jpeg_calc_output_dimensions(cinfo);
-  prepare_range_limit_table(cinfo);
-
-  /* Width of an output scanline must be representable as JDIMENSION. */
-  samplesperrow = (long) cinfo->output_width * (long) cinfo->out_color_components;
-  jd_samplesperrow = (JDIMENSION) samplesperrow;
-  if ((long) jd_samplesperrow != samplesperrow)
-    ERREXIT(cinfo, JERR_WIDTH_OVERFLOW);
-
-  /* Initialize my private state */
-  master->pass_number = 0;
-  master->using_merged_upsample = use_merged_upsample(cinfo);
-
-  /* Color quantizer selection */
-  master->quantizer_1pass = NULL;
-  master->quantizer_2pass = NULL;
-  /* No mode changes if not using buffered-image mode. */
-  if (! cinfo->quantize_colors || ! cinfo->buffered_image) {
-    cinfo->enable_1pass_quant = FALSE;
-    cinfo->enable_external_quant = FALSE;
-    cinfo->enable_2pass_quant = FALSE;
-  }
-  if (cinfo->quantize_colors) {
-    if (cinfo->raw_data_out)
-      ERREXIT(cinfo, JERR_NOTIMPL);
-    /* 2-pass quantizer only works in 3-component color space. */
-    if (cinfo->out_color_components != 3) {
-      cinfo->enable_1pass_quant = TRUE;
-      cinfo->enable_external_quant = FALSE;
-      cinfo->enable_2pass_quant = FALSE;
-      cinfo->colormap = NULL;
-    } else if (cinfo->colormap != NULL) {
-      cinfo->enable_external_quant = TRUE;
-    } else if (cinfo->two_pass_quantize) {
-      cinfo->enable_2pass_quant = TRUE;
-    } else {
-      cinfo->enable_1pass_quant = TRUE;
-    }
-
-    if (cinfo->enable_1pass_quant) {
-#ifdef QUANT_1PASS_SUPPORTED
-      jinit_1pass_quantizer(cinfo);
-      master->quantizer_1pass = cinfo->cquantize;
-#else
-      ERREXIT(cinfo, JERR_NOT_COMPILED);
-#endif
-    }
-
-    /* We use the 2-pass code to map to external colormaps. */
-    if (cinfo->enable_2pass_quant || cinfo->enable_external_quant) {
-#ifdef QUANT_2PASS_SUPPORTED
-      jinit_2pass_quantizer(cinfo);
-      master->quantizer_2pass = cinfo->cquantize;
-#else
-      ERREXIT(cinfo, JERR_NOT_COMPILED);
-#endif
-    }
-    /* If both quantizers are initialized, the 2-pass one is left active;
-     * this is necessary for starting with quantization to an external map.
-     */
-  }
-
-  /* Post-processing: in particular, color conversion first */
-  if (! cinfo->raw_data_out) {
-    if (master->using_merged_upsample) {
-#ifdef UPSAMPLE_MERGING_SUPPORTED
-      jinit_merged_upsampler(cinfo); /* does color conversion too */
-#else
-      ERREXIT(cinfo, JERR_NOT_COMPILED);
-#endif
-    } else {
-      jinit_color_deconverter(cinfo);
-      jinit_upsampler(cinfo);
-    }
-    jinit_d_post_controller(cinfo, cinfo->enable_2pass_quant);
-  }
-  /* Inverse DCT */
-  jinit_inverse_dct(cinfo);
-  /* Entropy decoding: either Huffman or arithmetic coding. */
-  if (cinfo->arith_code) {
-    ERREXIT(cinfo, JERR_ARITH_NOTIMPL);
-  } else {
-    if (cinfo->progressive_mode) {
-#ifdef D_PROGRESSIVE_SUPPORTED
-      jinit_phuff_decoder(cinfo);
-#else
-      ERREXIT(cinfo, JERR_NOT_COMPILED);
-#endif
-    } else
-      jinit_huff_decoder(cinfo);
-  }
-
-  /* Initialize principal buffer controllers. */
-  use_c_buffer = cinfo->inputctl->has_multiple_scans || cinfo->buffered_image;
-  jinit_d_coef_controller(cinfo, use_c_buffer);
-
-  if (! cinfo->raw_data_out)
-    jinit_d_main_controller(cinfo, FALSE /* never need full buffer here */);
-
-  /* We can now tell the memory manager to allocate virtual arrays. */
-  (*cinfo->mem->realize_virt_arrays) ((j_common_ptr) cinfo);
-
-  /* Initialize input side of decompressor to consume first scan. */
-  (*cinfo->inputctl->start_input_pass) (cinfo);
-
-#ifdef D_MULTISCAN_FILES_SUPPORTED
-  /* If jpeg_start_decompress will read the whole file, initialize
-   * progress monitoring appropriately.  The input step is counted
-   * as one pass.
-   */
-  if (cinfo->progress != NULL && ! cinfo->buffered_image &&
-      cinfo->inputctl->has_multiple_scans) {
-    int nscans;
-    /* Estimate number of scans to set pass_limit. */
-    if (cinfo->progressive_mode) {
-      /* Arbitrarily estimate 2 interleaved DC scans + 3 AC scans/component. */
-      nscans = 2 + 3 * cinfo->num_components;
-    } else {
-      /* For a nonprogressive multiscan file, estimate 1 scan per component. */
-      nscans = cinfo->num_components;
-    }
-    cinfo->progress->pass_counter = 0L;
-    cinfo->progress->pass_limit = (long) cinfo->total_iMCU_rows * nscans;
-    cinfo->progress->completed_passes = 0;
-    cinfo->progress->total_passes = (cinfo->enable_2pass_quant ? 3 : 2);
-    /* Count the input pass as done */
-    master->pass_number++;
-  }
-#endif /* D_MULTISCAN_FILES_SUPPORTED */
-}
-
-
-/*
- * Per-pass setup.
- * This is called at the beginning of each output pass.  We determine which
- * modules will be active during this pass and give them appropriate
- * start_pass calls.  We also set is_dummy_pass to indicate whether this
- * is a "real" output pass or a dummy pass for color quantization.
- * (In the latter case, jdapi.c will crank the pass to completion.)
- */
-
-METHODDEF void
-prepare_for_output_pass (j_decompress_ptr cinfo)
-{
-  my_master_ptr master = (my_master_ptr) cinfo->master;
-
-  if (master->pub.is_dummy_pass) {
-#ifdef QUANT_2PASS_SUPPORTED
-    /* Final pass of 2-pass quantization */
-    master->pub.is_dummy_pass = FALSE;
-    (*cinfo->cquantize->start_pass) (cinfo, FALSE);
-    (*cinfo->post->start_pass) (cinfo, JBUF_CRANK_DEST);
-    (*cinfo->main->start_pass) (cinfo, JBUF_CRANK_DEST);
-#else
-    ERREXIT(cinfo, JERR_NOT_COMPILED);
-#endif /* QUANT_2PASS_SUPPORTED */
-  } else {
-    if (cinfo->quantize_colors && cinfo->colormap == NULL) {
-      /* Select new quantization method */
-      if (cinfo->two_pass_quantize && cinfo->enable_2pass_quant) {
-	cinfo->cquantize = master->quantizer_2pass;
-	master->pub.is_dummy_pass = TRUE;
-      } else if (cinfo->enable_1pass_quant) {
-	cinfo->cquantize = master->quantizer_1pass;
-      } else {
-	ERREXIT(cinfo, JERR_MODE_CHANGE);
-      }
-    }
-    (*cinfo->idct->start_pass) (cinfo);
-    (*cinfo->coef->start_output_pass) (cinfo);
-    if (! cinfo->raw_data_out) {
-      if (! master->using_merged_upsample)
-	(*cinfo->cconvert->start_pass) (cinfo);
-      (*cinfo->upsample->start_pass) (cinfo);
-      if (cinfo->quantize_colors)
-	(*cinfo->cquantize->start_pass) (cinfo, master->pub.is_dummy_pass);
-      (*cinfo->post->start_pass) (cinfo,
-	    (master->pub.is_dummy_pass ? JBUF_SAVE_AND_PASS : JBUF_PASS_THRU));
-      (*cinfo->main->start_pass) (cinfo, JBUF_PASS_THRU);
-    }
-  }
-
-  /* Set up progress monitor's pass info if present */
-  if (cinfo->progress != NULL) {
-    cinfo->progress->completed_passes = master->pass_number;
-    cinfo->progress->total_passes = master->pass_number +
-				    (master->pub.is_dummy_pass ? 2 : 1);
-    /* In buffered-image mode, we assume one more output pass if EOI not
-     * yet reached, but no more passes if EOI has been reached.
-     */
-    if (cinfo->buffered_image && ! cinfo->inputctl->eoi_reached) {
-      cinfo->progress->total_passes += (cinfo->enable_2pass_quant ? 2 : 1);
-    }
-  }
-}
-
-
-/*
- * Finish up at end of an output pass.
- */
-
-METHODDEF void
-finish_output_pass (j_decompress_ptr cinfo)
-{
-  my_master_ptr master = (my_master_ptr) cinfo->master;
-
-  if (cinfo->quantize_colors)
-    (*cinfo->cquantize->finish_pass) (cinfo);
-  master->pass_number++;
-}
-
-
-#ifdef D_MULTISCAN_FILES_SUPPORTED
-
-/*
- * Switch to a new external colormap between output passes.
- */
-
-GLOBAL void
-jpeg_new_colormap (j_decompress_ptr cinfo)
-{
-  my_master_ptr master = (my_master_ptr) cinfo->master;
-
-  /* Prevent application from calling me at wrong times */
-  if (cinfo->global_state != DSTATE_BUFIMAGE)
-    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
-
-  if (cinfo->quantize_colors && cinfo->enable_external_quant &&
-      cinfo->colormap != NULL) {
-    /* Select 2-pass quantizer for external colormap use */
-    cinfo->cquantize = master->quantizer_2pass;
-    /* Notify quantizer of colormap change */
-    (*cinfo->cquantize->new_color_map) (cinfo);
-    master->pub.is_dummy_pass = FALSE; /* just in case */
-  } else
-    ERREXIT(cinfo, JERR_MODE_CHANGE);
-}
-
-#endif /* D_MULTISCAN_FILES_SUPPORTED */
-
-
-/*
- * Initialize master decompression control and select active modules.
- * This is performed at the start of jpeg_start_decompress.
- */
-
-GLOBAL void
-jinit_master_decompress (j_decompress_ptr cinfo)
-{
-  my_master_ptr master;
-
-  master = (my_master_ptr)
-      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
-				  SIZEOF(my_decomp_master));
-  cinfo->master = (struct jpeg_decomp_master *) master;
-  master->pub.prepare_for_output_pass = prepare_for_output_pass;
-  master->pub.finish_output_pass = finish_output_pass;
-
-  master->pub.is_dummy_pass = FALSE;
-
-  master_selection(cinfo);
-}
diff -NEaurb neo/renderer/jpeg-6/jdmerge.c neo/renderer/jpeg-6/jdmerge.c
--- neo/renderer/jpeg-6/jdmerge.c	2011-12-26 04:15:38 +0000
+++ neo/renderer/jpeg-6/jdmerge.c	1970-01-01 00:00:00 +0000
@@ -1,400 +0,0 @@
-/*
- * jdmerge.c
- *
- * Copyright (C) 1994-1995, Thomas G. Lane.
- * This file is part of the Independent JPEG Group's software.
- * For conditions of distribution and use, see the accompanying README file.
- *
- * This file contains code for merged upsampling/color conversion.
- *
- * This file combines functions from jdsample.c and jdcolor.c;
- * read those files first to understand what's going on.
- *
- * When the chroma components are to be upsampled by simple replication
- * (ie, box filtering), we can save some work in color conversion by
- * calculating all the output pixels corresponding to a pair of chroma
- * samples at one time.  In the conversion equations
- *	R = Y           + K1 * Cr
- *	G = Y + K2 * Cb + K3 * Cr
- *	B = Y + K4 * Cb
- * only the Y term varies among the group of pixels corresponding to a pair
- * of chroma samples, so the rest of the terms can be calculated just once.
- * At typical sampling ratios, this eliminates half or three-quarters of the
- * multiplications needed for color conversion.
- *
- * This file currently provides implementations for the following cases:
- *	YCbCr => RGB color conversion only.
- *	Sampling ratios of 2h1v or 2h2v.
- *	No scaling needed at upsample time.
- *	Corner-aligned (non-CCIR601) sampling alignment.
- * Other special cases could be added, but in most applications these are
- * the only common cases.  (For uncommon cases we fall back on the more
- * general code in jdsample.c and jdcolor.c.)
- */
-
-#define JPEG_INTERNALS
-#include "jinclude.h"
-#include "jpeglib.h"
-
-#ifdef UPSAMPLE_MERGING_SUPPORTED
-
-
-/* Private subobject */
-
-typedef struct {
-  struct jpeg_upsampler pub;	/* public fields */
-
-  /* Pointer to routine to do actual upsampling/conversion of one row group */
-  JMETHOD(void, upmethod, (j_decompress_ptr cinfo,
-			   JSAMPIMAGE input_buf, JDIMENSION in_row_group_ctr,
-			   JSAMPARRAY output_buf));
-
-  /* Private state for YCC->RGB conversion */
-  int * Cr_r_tab;		/* => table for Cr to R conversion */
-  int * Cb_b_tab;		/* => table for Cb to B conversion */
-  INT32 * Cr_g_tab;		/* => table for Cr to G conversion */
-  INT32 * Cb_g_tab;		/* => table for Cb to G conversion */
-
-  /* For 2:1 vertical sampling, we produce two output rows at a time.
-   * We need a "spare" row buffer to hold the second output row if the
-   * application provides just a one-row buffer; we also use the spare
-   * to discard the dummy last row if the image height is odd.
-   */
-  JSAMPROW spare_row;
-  boolean spare_full;		/* T if spare buffer is occupied */
-
-  JDIMENSION out_row_width;	/* samples per output row */
-  JDIMENSION rows_to_go;	/* counts rows remaining in image */
-} my_upsampler;
-
-typedef my_upsampler * my_upsample_ptr;
-
-#define SCALEBITS	16	/* speediest right-shift on some machines */
-#define ONE_HALF	((INT32) 1 << (SCALEBITS-1))
-#define FIX(x)		((INT32) ((x) * (1L<<SCALEBITS) + 0.5))
-
-
-/*
- * Initialize tables for YCC->RGB colorspace conversion.
- * This is taken directly from jdcolor.c; see that file for more info.
- */
-
-LOCAL void
-build_ycc_rgb_table (j_decompress_ptr cinfo)
-{
-  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
-  int i;
-  INT32 x;
-  SHIFT_TEMPS
-
-  upsample->Cr_r_tab = (int *)
-    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
-				(MAXJSAMPLE+1) * SIZEOF(int));
-  upsample->Cb_b_tab = (int *)
-    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
-				(MAXJSAMPLE+1) * SIZEOF(int));
-  upsample->Cr_g_tab = (INT32 *)
-    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
-				(MAXJSAMPLE+1) * SIZEOF(INT32));
-  upsample->Cb_g_tab = (INT32 *)
-    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
-				(MAXJSAMPLE+1) * SIZEOF(INT32));
-
-  for (i = 0, x = -CENTERJSAMPLE; i <= MAXJSAMPLE; i++, x++) {
-    /* i is the actual input pixel value, in the range 0..MAXJSAMPLE */
-    /* The Cb or Cr value we are thinking of is x = i - CENTERJSAMPLE */
-    /* Cr=>R value is nearest int to 1.40200 * x */
-    upsample->Cr_r_tab[i] = (int)
-		    RIGHT_SHIFT(FIX(1.40200) * x + ONE_HALF, SCALEBITS);
-    /* Cb=>B value is nearest int to 1.77200 * x */
-    upsample->Cb_b_tab[i] = (int)
-		    RIGHT_SHIFT(FIX(1.77200) * x + ONE_HALF, SCALEBITS);
-    /* Cr=>G value is scaled-up -0.71414 * x */
-    upsample->Cr_g_tab[i] = (- FIX(0.71414)) * x;
-    /* Cb=>G value is scaled-up -0.34414 * x */
-    /* We also add in ONE_HALF so that need not do it in inner loop */
-    upsample->Cb_g_tab[i] = (- FIX(0.34414)) * x + ONE_HALF;
-  }
-}
-
-
-/*
- * Initialize for an upsampling pass.
- */
-
-METHODDEF void
-start_pass_merged_upsample (j_decompress_ptr cinfo)
-{
-  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
-
-  /* Mark the spare buffer empty */
-  upsample->spare_full = FALSE;
-  /* Initialize total-height counter for detecting bottom of image */
-  upsample->rows_to_go = cinfo->output_height;
-}
-
-
-/*
- * Control routine to do upsampling (and color conversion).
- *
- * The control routine just handles the row buffering considerations.
- */
-
-METHODDEF void
-merged_2v_upsample (j_decompress_ptr cinfo,
-		    JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr,
-		    JDIMENSION in_row_groups_avail,
-		    JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
-		    JDIMENSION out_rows_avail)
-/* 2:1 vertical sampling case: may need a spare row. */
-{
-  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
-  JSAMPROW work_ptrs[2];
-  JDIMENSION num_rows;		/* number of rows returned to caller */
-
-  if (upsample->spare_full) {
-    /* If we have a spare row saved from a previous cycle, just return it. */
-    jcopy_sample_rows(& upsample->spare_row, 0, output_buf + *out_row_ctr, 0,
-		      1, upsample->out_row_width);
-    num_rows = 1;
-    upsample->spare_full = FALSE;
-  } else {
-    /* Figure number of rows to return to caller. */
-    num_rows = 2;
-    /* Not more than the distance to the end of the image. */
-    if (num_rows > upsample->rows_to_go)
-      num_rows = upsample->rows_to_go;
-    /* And not more than what the client can accept: */
-    out_rows_avail -= *out_row_ctr;
-    if (num_rows > out_rows_avail)
-      num_rows = out_rows_avail;
-    /* Create output pointer array for upsampler. */
-    work_ptrs[0] = output_buf[*out_row_ctr];
-    if (num_rows > 1) {
-      work_ptrs[1] = output_buf[*out_row_ctr + 1];
-    } else {
-      work_ptrs[1] = upsample->spare_row;
-      upsample->spare_full = TRUE;
-    }
-    /* Now do the upsampling. */
-    (*upsample->upmethod) (cinfo, input_buf, *in_row_group_ctr, work_ptrs);
-  }
-
-  /* Adjust counts */
-  *out_row_ctr += num_rows;
-  upsample->rows_to_go -= num_rows;
-  /* When the buffer is emptied, declare this input row group consumed */
-  if (! upsample->spare_full)
-    (*in_row_group_ctr)++;
-}
-
-
-METHODDEF void
-merged_1v_upsample (j_decompress_ptr cinfo,
-		    JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr,
-		    JDIMENSION in_row_groups_avail,
-		    JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
-		    JDIMENSION out_rows_avail)
-/* 1:1 vertical sampling case: much easier, never need a spare row. */
-{
-  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
-
-  /* Just do the upsampling. */
-  (*upsample->upmethod) (cinfo, input_buf, *in_row_group_ctr,
-			 output_buf + *out_row_ctr);
-  /* Adjust counts */
-  (*out_row_ctr)++;
-  (*in_row_group_ctr)++;
-}
-
-
-/*
- * These are the routines invoked by the control routines to do
- * the actual upsampling/conversion.  One row group is processed per call.
- *
- * Note: since we may be writing directly into application-supplied buffers,
- * we have to be honest about the output width; we can't assume the buffer
- * has been rounded up to an even width.
- */
-
-
-/*
- * Upsample and color convert for the case of 2:1 horizontal and 1:1 vertical.
- */
-
-METHODDEF void
-h2v1_merged_upsample (j_decompress_ptr cinfo,
-		      JSAMPIMAGE input_buf, JDIMENSION in_row_group_ctr,
-		      JSAMPARRAY output_buf)
-{
-  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
-  register int y, cred, cgreen, cblue;
-  int cb, cr;
-  register JSAMPROW outptr;
-  JSAMPROW inptr0, inptr1, inptr2;
-  JDIMENSION col;
-  /* copy these pointers into registers if possible */
-  register JSAMPLE * range_limit = cinfo->sample_range_limit;
-  int * Crrtab = upsample->Cr_r_tab;
-  int * Cbbtab = upsample->Cb_b_tab;
-  INT32 * Crgtab = upsample->Cr_g_tab;
-  INT32 * Cbgtab = upsample->Cb_g_tab;
-  SHIFT_TEMPS
-
-  inptr0 = input_buf[0][in_row_group_ctr];
-  inptr1 = input_buf[1][in_row_group_ctr];
-  inptr2 = input_buf[2][in_row_group_ctr];
-  outptr = output_buf[0];
-  /* Loop for each pair of output pixels */
-  for (col = cinfo->output_width >> 1; col > 0; col--) {
-    /* Do the chroma part of the calculation */
-    cb = GETJSAMPLE(*inptr1++);
-    cr = GETJSAMPLE(*inptr2++);
-    cred = Crrtab[cr];
-    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
-    cblue = Cbbtab[cb];
-    /* Fetch 2 Y values and emit 2 pixels */
-    y  = GETJSAMPLE(*inptr0++);
-    outptr[RGB_RED] =   range_limit[y + cred];
-    outptr[RGB_GREEN] = range_limit[y + cgreen];
-    outptr[RGB_BLUE] =  range_limit[y + cblue];
-    outptr += RGB_PIXELSIZE;
-    y  = GETJSAMPLE(*inptr0++);
-    outptr[RGB_RED] =   range_limit[y + cred];
-    outptr[RGB_GREEN] = range_limit[y + cgreen];
-    outptr[RGB_BLUE] =  range_limit[y + cblue];
-    outptr += RGB_PIXELSIZE;
-  }
-  /* If image width is odd, do the last output column separately */
-  if (cinfo->output_width & 1) {
-    cb = GETJSAMPLE(*inptr1);
-    cr = GETJSAMPLE(*inptr2);
-    cred = Crrtab[cr];
-    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
-    cblue = Cbbtab[cb];
-    y  = GETJSAMPLE(*inptr0);
-    outptr[RGB_RED] =   range_limit[y + cred];
-    outptr[RGB_GREEN] = range_limit[y + cgreen];
-    outptr[RGB_BLUE] =  range_limit[y + cblue];
-  }
-}
-
-
-/*
- * Upsample and color convert for the case of 2:1 horizontal and 2:1 vertical.
- */
-
-METHODDEF void
-h2v2_merged_upsample (j_decompress_ptr cinfo,
-		      JSAMPIMAGE input_buf, JDIMENSION in_row_group_ctr,
-		      JSAMPARRAY output_buf)
-{
-  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
-  register int y, cred, cgreen, cblue;
-  int cb, cr;
-  register JSAMPROW outptr0, outptr1;
-  JSAMPROW inptr00, inptr01, inptr1, inptr2;
-  JDIMENSION col;
-  /* copy these pointers into registers if possible */
-  register JSAMPLE * range_limit = cinfo->sample_range_limit;
-  int * Crrtab = upsample->Cr_r_tab;
-  int * Cbbtab = upsample->Cb_b_tab;
-  INT32 * Crgtab = upsample->Cr_g_tab;
-  INT32 * Cbgtab = upsample->Cb_g_tab;
-  SHIFT_TEMPS
-
-  inptr00 = input_buf[0][in_row_group_ctr*2];
-  inptr01 = input_buf[0][in_row_group_ctr*2 + 1];
-  inptr1 = input_buf[1][in_row_group_ctr];
-  inptr2 = input_buf[2][in_row_group_ctr];
-  outptr0 = output_buf[0];
-  outptr1 = output_buf[1];
-  /* Loop for each group of output pixels */
-  for (col = cinfo->output_width >> 1; col > 0; col--) {
-    /* Do the chroma part of the calculation */
-    cb = GETJSAMPLE(*inptr1++);
-    cr = GETJSAMPLE(*inptr2++);
-    cred = Crrtab[cr];
-    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
-    cblue = Cbbtab[cb];
-    /* Fetch 4 Y values and emit 4 pixels */
-    y  = GETJSAMPLE(*inptr00++);
-    outptr0[RGB_RED] =   range_limit[y + cred];
-    outptr0[RGB_GREEN] = range_limit[y + cgreen];
-    outptr0[RGB_BLUE] =  range_limit[y + cblue];
-    outptr0 += RGB_PIXELSIZE;
-    y  = GETJSAMPLE(*inptr00++);
-    outptr0[RGB_RED] =   range_limit[y + cred];
-    outptr0[RGB_GREEN] = range_limit[y + cgreen];
-    outptr0[RGB_BLUE] =  range_limit[y + cblue];
-    outptr0 += RGB_PIXELSIZE;
-    y  = GETJSAMPLE(*inptr01++);
-    outptr1[RGB_RED] =   range_limit[y + cred];
-    outptr1[RGB_GREEN] = range_limit[y + cgreen];
-    outptr1[RGB_BLUE] =  range_limit[y + cblue];
-    outptr1 += RGB_PIXELSIZE;
-    y  = GETJSAMPLE(*inptr01++);
-    outptr1[RGB_RED] =   range_limit[y + cred];
-    outptr1[RGB_GREEN] = range_limit[y + cgreen];
-    outptr1[RGB_BLUE] =  range_limit[y + cblue];
-    outptr1 += RGB_PIXELSIZE;
-  }
-  /* If image width is odd, do the last output column separately */
-  if (cinfo->output_width & 1) {
-    cb = GETJSAMPLE(*inptr1);
-    cr = GETJSAMPLE(*inptr2);
-    cred = Crrtab[cr];
-    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
-    cblue = Cbbtab[cb];
-    y  = GETJSAMPLE(*inptr00);
-    outptr0[RGB_RED] =   range_limit[y + cred];
-    outptr0[RGB_GREEN] = range_limit[y + cgreen];
-    outptr0[RGB_BLUE] =  range_limit[y + cblue];
-    y  = GETJSAMPLE(*inptr01);
-    outptr1[RGB_RED] =   range_limit[y + cred];
-    outptr1[RGB_GREEN] = range_limit[y + cgreen];
-    outptr1[RGB_BLUE] =  range_limit[y + cblue];
-  }
-}
-
-
-/*
- * Module initialization routine for merged upsampling/color conversion.
- *
- * NB: this is called under the conditions determined by use_merged_upsample()
- * in jdmaster.c.  That routine MUST correspond to the actual capabilities
- * of this module; no safety checks are made here.
- */
-
-GLOBAL void
-jinit_merged_upsampler (j_decompress_ptr cinfo)
-{
-  my_upsample_ptr upsample;
-
-  upsample = (my_upsample_ptr)
-    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
-				SIZEOF(my_upsampler));
-  cinfo->upsample = (struct jpeg_upsampler *) upsample;
-  upsample->pub.start_pass = start_pass_merged_upsample;
-  upsample->pub.need_context_rows = FALSE;
-
-  upsample->out_row_width = cinfo->output_width * cinfo->out_color_components;
-
-  if (cinfo->max_v_samp_factor == 2) {
-    upsample->pub.upsample = merged_2v_upsample;
-    upsample->upmethod = h2v2_merged_upsample;
-    /* Allocate a spare row buffer */
-    upsample->spare_row = (JSAMPROW)
-      (*cinfo->mem->alloc_large) ((j_common_ptr) cinfo, JPOOL_IMAGE,
-		(size_t) (upsample->out_row_width * SIZEOF(JSAMPLE)));
-  } else {
-    upsample->pub.upsample = merged_1v_upsample;
-    upsample->upmethod = h2v1_merged_upsample;
-    /* No spare row needed */
-    upsample->spare_row = NULL;
-  }
-
-  build_ycc_rgb_table(cinfo);
-}
-
-#endif /* UPSAMPLE_MERGING_SUPPORTED */
diff -NEaurb neo/renderer/jpeg-6/jdphuff.c neo/renderer/jpeg-6/jdphuff.c
--- neo/renderer/jpeg-6/jdphuff.c	2011-12-26 04:15:38 +0000
+++ neo/renderer/jpeg-6/jdphuff.c	1970-01-01 00:00:00 +0000
@@ -1,642 +0,0 @@
-/*
- * jdphuff.c
- *
- * Copyright (C) 1995, Thomas G. Lane.
- * This file is part of the Independent JPEG Group's software.
- * For conditions of distribution and use, see the accompanying README file.
- *
- * This file contains Huffman entropy decoding routines for progressive JPEG.
- *
- * Much of the complexity here has to do with supporting input suspension.
- * If the data source module demands suspension, we want to be able to back
- * up to the start of the current MCU.  To do this, we copy state variables
- * into local working storage, and update them back to the permanent
- * storage only upon successful completion of an MCU.
- */
-
-#define JPEG_INTERNALS
-#include "jinclude.h"
-#include "jpeglib.h"
-#include "jdhuff.h"		/* Declarations shared with jdhuff.c */
-
-
-#ifdef D_PROGRESSIVE_SUPPORTED
-
-/*
- * Expanded entropy decoder object for progressive Huffman decoding.
- *
- * The savable_state subrecord contains fields that change within an MCU,
- * but must not be updated permanently until we complete the MCU.
- */
-
-typedef struct {
-  unsigned int EOBRUN;			/* remaining EOBs in EOBRUN */
-  int last_dc_val[MAX_COMPS_IN_SCAN];	/* last DC coef for each component */
-} savable_state;
-
-/* This macro is to work around compilers with missing or broken
- * structure assignment.  You'll need to fix this code if you have
- * such a compiler and you change MAX_COMPS_IN_SCAN.
- */
-
-#ifndef NO_STRUCT_ASSIGN
-#define ASSIGN_STATE(dest,src)  ((dest) = (src))
-#else
-#if MAX_COMPS_IN_SCAN == 4
-#define ASSIGN_STATE(dest,src)  \
-	((dest).EOBRUN = (src).EOBRUN, \
-	 (dest).last_dc_val[0] = (src).last_dc_val[0], \
-	 (dest).last_dc_val[1] = (src).last_dc_val[1], \
-	 (dest).last_dc_val[2] = (src).last_dc_val[2], \
-	 (dest).last_dc_val[3] = (src).last_dc_val[3])
-#endif
-#endif
-
-
-typedef struct {
-  struct jpeg_entropy_decoder pub; /* public fields */
-
-  /* These fields are loaded into local variables at start of each MCU.
-   * In case of suspension, we exit WITHOUT updating them.
-   */
-  bitread_perm_state bitstate;	/* Bit buffer at start of MCU */
-  savable_state saved;		/* Other state at start of MCU */
-
-  /* These fields are NOT loaded into local working state. */
-  unsigned int restarts_to_go;	/* MCUs left in this restart interval */
-
-  /* Pointers to derived tables (these workspaces have image lifespan) */
-  d_derived_tbl * derived_tbls[NUM_HUFF_TBLS];
-
-  d_derived_tbl * ac_derived_tbl; /* active table during an AC scan */
-} phuff_entropy_decoder;
-
-typedef phuff_entropy_decoder * phuff_entropy_ptr;
-
-/* Forward declarations */
-METHODDEF boolean decode_mcu_DC_first JPP((j_decompress_ptr cinfo,
-					   JBLOCKROW *MCU_data));
-METHODDEF boolean decode_mcu_AC_first JPP((j_decompress_ptr cinfo,
-					   JBLOCKROW *MCU_data));
-METHODDEF boolean decode_mcu_DC_refine JPP((j_decompress_ptr cinfo,
-					    JBLOCKROW *MCU_data));
-METHODDEF boolean decode_mcu_AC_refine JPP((j_decompress_ptr cinfo,
-					    JBLOCKROW *MCU_data));
-
-
-/*
- * Initialize for a Huffman-compressed scan.
- */
-
-METHODDEF void
-start_pass_phuff_decoder (j_decompress_ptr cinfo)
-{
-  phuff_entropy_ptr entropy = (phuff_entropy_ptr) cinfo->entropy;
-  boolean is_DC_band, bad;
-  int ci, coefi, tbl;
-  int *coef_bit_ptr;
-  jpeg_component_info * compptr;
-
-  is_DC_band = (cinfo->Ss == 0);
-
-  /* Validate scan parameters */
-  bad = FALSE;
-  if (is_DC_band) {
-    if (cinfo->Se != 0)
-      bad = TRUE;
-  } else {
-    /* need not check Ss/Se < 0 since they came from unsigned bytes */
-    if (cinfo->Ss > cinfo->Se || cinfo->Se >= DCTSIZE2)
-      bad = TRUE;
-    /* AC scans may have only one component */
-    if (cinfo->comps_in_scan != 1)
-      bad = TRUE;
-  }
-  if (cinfo->Ah != 0) {
-    /* Successive approximation refinement scan: must have Al = Ah-1. */
-    if (cinfo->Al != cinfo->Ah-1)
-      bad = TRUE;
-  }
-  if (cinfo->Al > 13)		/* need not check for < 0 */
-    bad = TRUE;
-  if (bad)
-    ERREXIT4(cinfo, JERR_BAD_PROGRESSION,
-	     cinfo->Ss, cinfo->Se, cinfo->Ah, cinfo->Al);
-  /* Update progression status, and verify that scan order is legal.
-   * Note that inter-scan inconsistencies are treated as warnings
-   * not fatal errors ... not clear if this is right way to behave.
-   */
-  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
-    int cindex = cinfo->cur_comp_info[ci]->component_index;
-    coef_bit_ptr = & cinfo->coef_bits[cindex][0];
-    if (!is_DC_band && coef_bit_ptr[0] < 0) /* AC without prior DC scan */
-      WARNMS2(cinfo, JWRN_BOGUS_PROGRESSION, cindex, 0);
-    for (coefi = cinfo->Ss; coefi <= cinfo->Se; coefi++) {
-      int expected = (coef_bit_ptr[coefi] < 0) ? 0 : coef_bit_ptr[coefi];
-      if (cinfo->Ah != expected)
-	WARNMS2(cinfo, JWRN_BOGUS_PROGRESSION, cindex, coefi);
-      coef_bit_ptr[coefi] = cinfo->Al;
-    }
-  }
-
-  /* Select MCU decoding routine */
-  if (cinfo->Ah == 0) {
-    if (is_DC_band)
-      entropy->pub.decode_mcu = decode_mcu_DC_first;
-    else
-      entropy->pub.decode_mcu = decode_mcu_AC_first;
-  } else {
-    if (is_DC_band)
-      entropy->pub.decode_mcu = decode_mcu_DC_refine;
-    else
-      entropy->pub.decode_mcu = decode_mcu_AC_refine;
-  }
-
-  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
-    compptr = cinfo->cur_comp_info[ci];
-    /* Make sure requested tables are present, and compute derived tables.
-     * We may build same derived table more than once, but it's not expensive.
-     */
-    if (is_DC_band) {
-      if (cinfo->Ah == 0) {	/* DC refinement needs no table */
-	tbl = compptr->dc_tbl_no;
-	if (tbl < 0 || tbl >= NUM_HUFF_TBLS ||
-	    cinfo->dc_huff_tbl_ptrs[tbl] == NULL)
-	  ERREXIT1(cinfo, JERR_NO_HUFF_TABLE, tbl);
-	jpeg_make_d_derived_tbl(cinfo, cinfo->dc_huff_tbl_ptrs[tbl],
-				& entropy->derived_tbls[tbl]);
-      }
-    } else {
-      tbl = compptr->ac_tbl_no;
-      if (tbl < 0 || tbl >= NUM_HUFF_TBLS ||
-          cinfo->ac_huff_tbl_ptrs[tbl] == NULL)
-        ERREXIT1(cinfo, JERR_NO_HUFF_TABLE, tbl);
-      jpeg_make_d_derived_tbl(cinfo, cinfo->ac_huff_tbl_ptrs[tbl],
-			      & entropy->derived_tbls[tbl]);
-      /* remember the single active table */
-      entropy->ac_derived_tbl = entropy->derived_tbls[tbl];
-    }
-    /* Initialize DC predictions to 0 */
-    entropy->saved.last_dc_val[ci] = 0;
-  }
-
-  /* Initialize bitread state variables */
-  entropy->bitstate.bits_left = 0;
-  entropy->bitstate.get_buffer = 0; /* unnecessary, but keeps Purify quiet */
-  entropy->bitstate.printed_eod = FALSE;
-
-  /* Initialize private state variables */
-  entropy->saved.EOBRUN = 0;
-
-  /* Initialize restart counter */
-  entropy->restarts_to_go = cinfo->restart_interval;
-}
-
-
-/*
- * Figure F.12: extend sign bit.
- * On some machines, a shift and add will be faster than a table lookup.
- */
-
-#ifdef AVOID_TABLES
-
-#define HUFF_EXTEND(x,s)  ((x) < (1<<((s)-1)) ? (x) + (((-1)<<(s)) + 1) : (x))
-
-#else
-
-#define HUFF_EXTEND(x,s)  ((x) < extend_test[s] ? (x) + extend_offset[s] : (x))
-
-static const int extend_test[16] =   /* entry n is 2**(n-1) */
-  { 0, 0x0001, 0x0002, 0x0004, 0x0008, 0x0010, 0x0020, 0x0040, 0x0080,
-    0x0100, 0x0200, 0x0400, 0x0800, 0x1000, 0x2000, 0x4000 };
-
-static const int extend_offset[16] = /* entry n is (-1 << n) + 1 */
-  { 0, ((-1)<<1) + 1, ((-1)<<2) + 1, ((-1)<<3) + 1, ((-1)<<4) + 1,
-    ((-1)<<5) + 1, ((-1)<<6) + 1, ((-1)<<7) + 1, ((-1)<<8) + 1,
-    ((-1)<<9) + 1, ((-1)<<10) + 1, ((-1)<<11) + 1, ((-1)<<12) + 1,
-    ((-1)<<13) + 1, ((-1)<<14) + 1, ((-1)<<15) + 1 };
-
-#endif /* AVOID_TABLES */
-
-
-/*
- * Check for a restart marker & resynchronize decoder.
- * Returns FALSE if must suspend.
- */
-
-LOCAL boolean
-process_restart (j_decompress_ptr cinfo)
-{
-  phuff_entropy_ptr entropy = (phuff_entropy_ptr) cinfo->entropy;
-  int ci;
-
-  /* Throw away any unused bits remaining in bit buffer; */
-  /* include any full bytes in next_marker's count of discarded bytes */
-  cinfo->marker->discarded_bytes += entropy->bitstate.bits_left / 8;
-  entropy->bitstate.bits_left = 0;
-
-  /* Advance past the RSTn marker */
-  if (! (*cinfo->marker->read_restart_marker) (cinfo))
-    return FALSE;
-
-  /* Re-initialize DC predictions to 0 */
-  for (ci = 0; ci < cinfo->comps_in_scan; ci++)
-    entropy->saved.last_dc_val[ci] = 0;
-  /* Re-init EOB run count, too */
-  entropy->saved.EOBRUN = 0;
-
-  /* Reset restart counter */
-  entropy->restarts_to_go = cinfo->restart_interval;
-
-  /* Next segment can get another out-of-data warning */
-  entropy->bitstate.printed_eod = FALSE;
-
-  return TRUE;
-}
-
-
-/*
- * Huffman MCU decoding.
- * Each of these routines decodes and returns one MCU's worth of
- * Huffman-compressed coefficients. 
- * The coefficients are reordered from zigzag order into natural array order,
- * but are not dequantized.
- *
- * The i'th block of the MCU is stored into the block pointed to by
- * MCU_data[i].  WE ASSUME THIS AREA IS INITIALLY ZEROED BY THE CALLER.
- *
- * We return FALSE if data source requested suspension.  In that case no
- * changes have been made to permanent state.  (Exception: some output
- * coefficients may already have been assigned.  This is harmless for
- * spectral selection, since we'll just re-assign them on the next call.
- * Successive approximation AC refinement has to be more careful, however.)
- */
-
-/*
- * MCU decoding for DC initial scan (either spectral selection,
- * or first pass of successive approximation).
- */
-
-METHODDEF boolean
-decode_mcu_DC_first (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
-{   
-  phuff_entropy_ptr entropy = (phuff_entropy_ptr) cinfo->entropy;
-  int Al = cinfo->Al;
-  register int s, r;
-  int blkn, ci;
-  JBLOCKROW block;
-  BITREAD_STATE_VARS;
-  savable_state state;
-  d_derived_tbl * tbl;
-  jpeg_component_info * compptr;
-
-  /* Process restart marker if needed; may have to suspend */
-  if (cinfo->restart_interval) {
-    if (entropy->restarts_to_go == 0)
-      if (! process_restart(cinfo))
-	return FALSE;
-  }
-
-  /* Load up working state */
-  BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
-  ASSIGN_STATE(state, entropy->saved);
-
-  /* Outer loop handles each block in the MCU */
-
-  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
-    block = MCU_data[blkn];
-    ci = cinfo->MCU_membership[blkn];
-    compptr = cinfo->cur_comp_info[ci];
-    tbl = entropy->derived_tbls[compptr->dc_tbl_no];
-
-    /* Decode a single block's worth of coefficients */
-
-    /* Section F.2.2.1: decode the DC coefficient difference */
-    HUFF_DECODE(s, br_state, tbl, return FALSE, label1);
-    if (s) {
-      CHECK_BIT_BUFFER(br_state, s, return FALSE);
-      r = GET_BITS(s);
-      s = HUFF_EXTEND(r, s);
-    }
-
-    /* Convert DC difference to actual value, update last_dc_val */
-    s += state.last_dc_val[ci];
-    state.last_dc_val[ci] = s;
-    /* Scale and output the DC coefficient (assumes jpeg_natural_order[0]=0) */
-    (*block)[0] = (JCOEF) (s << Al);
-  }
-
-  /* Completed MCU, so update state */
-  BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
-  ASSIGN_STATE(entropy->saved, state);
-
-  /* Account for restart interval (no-op if not using restarts) */
-  entropy->restarts_to_go--;
-
-  return TRUE;
-}
-
-
-/*
- * MCU decoding for AC initial scan (either spectral selection,
- * or first pass of successive approximation).
- */
-
-METHODDEF boolean
-decode_mcu_AC_first (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
-{   
-  phuff_entropy_ptr entropy = (phuff_entropy_ptr) cinfo->entropy;
-  int Se = cinfo->Se;
-  int Al = cinfo->Al;
-  register int s, k, r;
-  unsigned int EOBRUN;
-  JBLOCKROW block;
-  BITREAD_STATE_VARS;
-  d_derived_tbl * tbl;
-
-  /* Process restart marker if needed; may have to suspend */
-  if (cinfo->restart_interval) {
-    if (entropy->restarts_to_go == 0)
-      if (! process_restart(cinfo))
-	return FALSE;
-  }
-
-  /* Load up working state.
-   * We can avoid loading/saving bitread state if in an EOB run.
-   */
-  EOBRUN = entropy->saved.EOBRUN; /* only part of saved state we care about */
-
-  /* There is always only one block per MCU */
-
-  if (EOBRUN > 0)		/* if it's a band of zeroes... */
-    EOBRUN--;			/* ...process it now (we do nothing) */
-  else {
-    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
-    block = MCU_data[0];
-    tbl = entropy->ac_derived_tbl;
-
-    for (k = cinfo->Ss; k <= Se; k++) {
-      HUFF_DECODE(s, br_state, tbl, return FALSE, label2);
-      r = s >> 4;
-      s &= 15;
-      if (s) {
-        k += r;
-        CHECK_BIT_BUFFER(br_state, s, return FALSE);
-        r = GET_BITS(s);
-        s = HUFF_EXTEND(r, s);
-	/* Scale and output coefficient in natural (dezigzagged) order */
-        (*block)[jpeg_natural_order[k]] = (JCOEF) (s << Al);
-      } else {
-        if (r == 15) {		/* ZRL */
-          k += 15;		/* skip 15 zeroes in band */
-        } else {		/* EOBr, run length is 2^r + appended bits */
-          EOBRUN = 1 << r;
-          if (r) {		/* EOBr, r > 0 */
-	    CHECK_BIT_BUFFER(br_state, r, return FALSE);
-            r = GET_BITS(r);
-            EOBRUN += r;
-          }
-	  EOBRUN--;		/* this band is processed at this moment */
-	  break;		/* force end-of-band */
-	}
-      }
-    }
-
-    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
-  }
-
-  /* Completed MCU, so update state */
-  entropy->saved.EOBRUN = EOBRUN; /* only part of saved state we care about */
-
-  /* Account for restart interval (no-op if not using restarts) */
-  entropy->restarts_to_go--;
-
-  return TRUE;
-}
-
-
-/*
- * MCU decoding for DC successive approximation refinement scan.
- * Note: we assume such scans can be multi-component, although the spec
- * is not very clear on the point.
- */
-
-METHODDEF boolean
-decode_mcu_DC_refine (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
-{   
-  phuff_entropy_ptr entropy = (phuff_entropy_ptr) cinfo->entropy;
-  int p1 = 1 << cinfo->Al;	/* 1 in the bit position being coded */
-  int blkn;
-  JBLOCKROW block;
-  BITREAD_STATE_VARS;
-
-  /* Process restart marker if needed; may have to suspend */
-  if (cinfo->restart_interval) {
-    if (entropy->restarts_to_go == 0)
-      if (! process_restart(cinfo))
-	return FALSE;
-  }
-
-  /* Load up working state */
-  BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
-
-  /* Outer loop handles each block in the MCU */
-
-  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
-    block = MCU_data[blkn];
-
-    /* Encoded data is simply the next bit of the two's-complement DC value */
-    CHECK_BIT_BUFFER(br_state, 1, return FALSE);
-    if (GET_BITS(1))
-      (*block)[0] |= p1;
-    /* Note: since we use |=, repeating the assignment later is safe */
-  }
-
-  /* Completed MCU, so update state */
-  BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
-
-  /* Account for restart interval (no-op if not using restarts) */
-  entropy->restarts_to_go--;
-
-  return TRUE;
-}
-
-
-/*
- * MCU decoding for AC successive approximation refinement scan.
- */
-
-METHODDEF boolean
-decode_mcu_AC_refine (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
-{   
-  phuff_entropy_ptr entropy = (phuff_entropy_ptr) cinfo->entropy;
-  int Se = cinfo->Se;
-  int p1 = 1 << cinfo->Al;	/* 1 in the bit position being coded */
-  int m1 = (-1) << cinfo->Al;	/* -1 in the bit position being coded */
-  register int s, k, r;
-  unsigned int EOBRUN;
-  JBLOCKROW block;
-  JCOEFPTR thiscoef;
-  BITREAD_STATE_VARS;
-  d_derived_tbl * tbl;
-  int num_newnz;
-  int newnz_pos[DCTSIZE2];
-
-  /* Process restart marker if needed; may have to suspend */
-  if (cinfo->restart_interval) {
-    if (entropy->restarts_to_go == 0)
-      if (! process_restart(cinfo))
-	return FALSE;
-  }
-
-  /* Load up working state */
-  BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
-  EOBRUN = entropy->saved.EOBRUN; /* only part of saved state we care about */
-
-  /* There is always only one block per MCU */
-  block = MCU_data[0];
-  tbl = entropy->ac_derived_tbl;
-
-  /* If we are forced to suspend, we must undo the assignments to any newly
-   * nonzero coefficients in the block, because otherwise we'd get confused
-   * next time about which coefficients were already nonzero.
-   * But we need not undo addition of bits to already-nonzero coefficients;
-   * instead, we can test the current bit position to see if we already did it.
-   */
-  num_newnz = 0;
-
-  /* initialize coefficient loop counter to start of band */
-  k = cinfo->Ss;
-
-  if (EOBRUN == 0) {
-    for (; k <= Se; k++) {
-      HUFF_DECODE(s, br_state, tbl, goto undoit, label3);
-      r = s >> 4;
-      s &= 15;
-      if (s) {
-	if (s != 1)		/* size of new coef should always be 1 */
-	  WARNMS(cinfo, JWRN_HUFF_BAD_CODE);
-        CHECK_BIT_BUFFER(br_state, 1, goto undoit);
-        if (GET_BITS(1))
-	  s = p1;		/* newly nonzero coef is positive */
-	else
-	  s = m1;		/* newly nonzero coef is negative */
-      } else {
-	if (r != 15) {
-	  EOBRUN = 1 << r;	/* EOBr, run length is 2^r + appended bits */
-	  if (r) {
-	    CHECK_BIT_BUFFER(br_state, r, goto undoit);
-	    r = GET_BITS(r);
-	    EOBRUN += r;
-	  }
-	  break;		/* rest of block is handled by EOB logic */
-	}
-	/* note s = 0 for processing ZRL */
-      }
-      /* Advance over already-nonzero coefs and r still-zero coefs,
-       * appending correction bits to the nonzeroes.  A correction bit is 1
-       * if the absolute value of the coefficient must be increased.
-       */
-      do {
-	thiscoef = *block + jpeg_natural_order[k];
-	if (*thiscoef != 0) {
-	  CHECK_BIT_BUFFER(br_state, 1, goto undoit);
-	  if (GET_BITS(1)) {
-	    if ((*thiscoef & p1) == 0) { /* do nothing if already changed it */
-	      if (*thiscoef >= 0)
-		*thiscoef += p1;
-	      else
-		*thiscoef += m1;
-	    }
-	  }
-	} else {
-	  if (--r < 0)
-	    break;		/* reached target zero coefficient */
-	}
-	k++;
-      } while (k <= Se);
-      if (s) {
-	int pos = jpeg_natural_order[k];
-	/* Output newly nonzero coefficient */
-	(*block)[pos] = (JCOEF) s;
-	/* Remember its position in case we have to suspend */
-	newnz_pos[num_newnz++] = pos;
-      }
-    }
-  }
-
-  if (EOBRUN > 0) {
-    /* Scan any remaining coefficient positions after the end-of-band
-     * (the last newly nonzero coefficient, if any).  Append a correction
-     * bit to each already-nonzero coefficient.  A correction bit is 1
-     * if the absolute value of the coefficient must be increased.
-     */
-    for (; k <= Se; k++) {
-      thiscoef = *block + jpeg_natural_order[k];
-      if (*thiscoef != 0) {
-	CHECK_BIT_BUFFER(br_state, 1, goto undoit);
-	if (GET_BITS(1)) {
-	  if ((*thiscoef & p1) == 0) { /* do nothing if already changed it */
-	    if (*thiscoef >= 0)
-	      *thiscoef += p1;
-	    else
-	      *thiscoef += m1;
-	  }
-	}
-      }
-    }
-    /* Count one block completed in EOB run */
-    EOBRUN--;
-  }
-
-  /* Completed MCU, so update state */
-  BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
-  entropy->saved.EOBRUN = EOBRUN; /* only part of saved state we care about */
-
-  /* Account for restart interval (no-op if not using restarts) */
-  entropy->restarts_to_go--;
-
-  return TRUE;
-
-undoit:
-  /* Re-zero any output coefficients that we made newly nonzero */
-  while (num_newnz > 0)
-    (*block)[newnz_pos[--num_newnz]] = 0;
-
-  return FALSE;
-}
-
-
-/*
- * Module initialization routine for progressive Huffman entropy decoding.
- */
-
-GLOBAL void
-jinit_phuff_decoder (j_decompress_ptr cinfo)
-{
-  phuff_entropy_ptr entropy;
-  int *coef_bit_ptr;
-  int ci, i;
-
-  entropy = (phuff_entropy_ptr)
-    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
-				SIZEOF(phuff_entropy_decoder));
-  cinfo->entropy = (struct jpeg_entropy_decoder *) entropy;
-  entropy->pub.start_pass = start_pass_phuff_decoder;
-
-  /* Mark derived tables unallocated */
-  for (i = 0; i < NUM_HUFF_TBLS; i++) {
-    entropy->derived_tbls[i] = NULL;
-  }
-
-  /* Create progression status table */
-  cinfo->coef_bits = (int (*)[DCTSIZE2])
-    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
-				cinfo->num_components*DCTSIZE2*SIZEOF(int));
-  coef_bit_ptr = & cinfo->coef_bits[0][0];
-  for (ci = 0; ci < cinfo->num_components; ci++) 
-    for (i = 0; i < DCTSIZE2; i++)
-      *coef_bit_ptr++ = -1;
-}
-
-#endif /* D_PROGRESSIVE_SUPPORTED */
diff -NEaurb neo/renderer/jpeg-6/jdpostct.c neo/renderer/jpeg-6/jdpostct.c
--- neo/renderer/jpeg-6/jdpostct.c	2011-12-26 04:15:38 +0000
+++ neo/renderer/jpeg-6/jdpostct.c	1970-01-01 00:00:00 +0000
@@ -1,290 +0,0 @@
-/*
- * jdpostct.c
- *
- * Copyright (C) 1994-1995, Thomas G. Lane.
- * This file is part of the Independent JPEG Group's software.
- * For conditions of distribution and use, see the accompanying README file.
- *
- * This file contains the decompression postprocessing controller.
- * This controller manages the upsampling, color conversion, and color
- * quantization/reduction steps; specifically, it controls the buffering
- * between upsample/color conversion and color quantization/reduction.
- *
- * If no color quantization/reduction is required, then this module has no
- * work to do, and it just hands off to the upsample/color conversion code.
- * An integrated upsample/convert/quantize process would replace this module
- * entirely.
- */
-
-#define JPEG_INTERNALS
-#include "jinclude.h"
-#include "jpeglib.h"
-
-
-/* Private buffer controller object */
-
-typedef struct {
-  struct jpeg_d_post_controller pub; /* public fields */
-
-  /* Color quantization source buffer: this holds output data from
-   * the upsample/color conversion step to be passed to the quantizer.
-   * For two-pass color quantization, we need a full-image buffer;
-   * for one-pass operation, a strip buffer is sufficient.
-   */
-  jvirt_sarray_ptr whole_image;	/* virtual array, or NULL if one-pass */
-  JSAMPARRAY buffer;		/* strip buffer, or current strip of virtual */
-  JDIMENSION strip_height;	/* buffer size in rows */
-  /* for two-pass mode only: */
-  JDIMENSION starting_row;	/* row # of first row in current strip */
-  JDIMENSION next_row;		/* index of next row to fill/empty in strip */
-} my_post_controller;
-
-typedef my_post_controller * my_post_ptr;
-
-
-/* Forward declarations */
-METHODDEF void post_process_1pass
-	JPP((j_decompress_ptr cinfo,
-	     JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr,
-	     JDIMENSION in_row_groups_avail,
-	     JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
-	     JDIMENSION out_rows_avail));
-#ifdef QUANT_2PASS_SUPPORTED
-METHODDEF void post_process_prepass
-	JPP((j_decompress_ptr cinfo,
-	     JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr,
-	     JDIMENSION in_row_groups_avail,
-	     JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
-	     JDIMENSION out_rows_avail));
-METHODDEF void post_process_2pass
-	JPP((j_decompress_ptr cinfo,
-	     JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr,
-	     JDIMENSION in_row_groups_avail,
-	     JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
-	     JDIMENSION out_rows_avail));
-#endif
-
-
-/*
- * Initialize for a processing pass.
- */
-
-METHODDEF void
-start_pass_dpost (j_decompress_ptr cinfo, J_BUF_MODE pass_mode)
-{
-  my_post_ptr post = (my_post_ptr) cinfo->post;
-
-  switch (pass_mode) {
-  case JBUF_PASS_THRU:
-    if (cinfo->quantize_colors) {
-      /* Single-pass processing with color quantization. */
-      post->pub.post_process_data = post_process_1pass;
-      /* We could be doing buffered-image output before starting a 2-pass
-       * color quantization; in that case, jinit_d_post_controller did not
-       * allocate a strip buffer.  Use the virtual-array buffer as workspace.
-       */
-      if (post->buffer == NULL) {
-	post->buffer = (*cinfo->mem->access_virt_sarray)
-	  ((j_common_ptr) cinfo, post->whole_image,
-	   (JDIMENSION) 0, post->strip_height, TRUE);
-      }
-    } else {
-      /* For single-pass processing without color quantization,
-       * I have no work to do; just call the upsampler directly.
-       */
-      post->pub.post_process_data = cinfo->upsample->upsample;
-    }
-    break;
-#ifdef QUANT_2PASS_SUPPORTED
-  case JBUF_SAVE_AND_PASS:
-    /* First pass of 2-pass quantization */
-    if (post->whole_image == NULL)
-      ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
-    post->pub.post_process_data = post_process_prepass;
-    break;
-  case JBUF_CRANK_DEST:
-    /* Second pass of 2-pass quantization */
-    if (post->whole_image == NULL)
-      ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
-    post->pub.post_process_data = post_process_2pass;
-    break;
-#endif /* QUANT_2PASS_SUPPORTED */
-  default:
-    ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
-    break;
-  }
-  post->starting_row = post->next_row = 0;
-}
-
-
-/*
- * Process some data in the one-pass (strip buffer) case.
- * This is used for color precision reduction as well as one-pass quantization.
- */
-
-METHODDEF void
-post_process_1pass (j_decompress_ptr cinfo,
-		    JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr,
-		    JDIMENSION in_row_groups_avail,
-		    JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
-		    JDIMENSION out_rows_avail)
-{
-  my_post_ptr post = (my_post_ptr) cinfo->post;
-  JDIMENSION num_rows, max_rows;
-
-  /* Fill the buffer, but not more than what we can dump out in one go. */
-  /* Note we rely on the upsampler to detect bottom of image. */
-  max_rows = out_rows_avail - *out_row_ctr;
-  if (max_rows > post->strip_height)
-    max_rows = post->strip_height;
-  num_rows = 0;
-  (*cinfo->upsample->upsample) (cinfo,
-		input_buf, in_row_group_ctr, in_row_groups_avail,
-		post->buffer, &num_rows, max_rows);
-  /* Quantize and emit data. */
-  (*cinfo->cquantize->color_quantize) (cinfo,
-		post->buffer, output_buf + *out_row_ctr, (int) num_rows);
-  *out_row_ctr += num_rows;
-}
-
-
-#ifdef QUANT_2PASS_SUPPORTED
-
-/*
- * Process some data in the first pass of 2-pass quantization.
- */
-
-METHODDEF void
-post_process_prepass (j_decompress_ptr cinfo,
-		      JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr,
-		      JDIMENSION in_row_groups_avail,
-		      JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
-		      JDIMENSION out_rows_avail)
-{
-  my_post_ptr post = (my_post_ptr) cinfo->post;
-  JDIMENSION old_next_row, num_rows;
-
-  /* Reposition virtual buffer if at start of strip. */
-  if (post->next_row == 0) {
-    post->buffer = (*cinfo->mem->access_virt_sarray)
-	((j_common_ptr) cinfo, post->whole_image,
-	 post->starting_row, post->strip_height, TRUE);
-  }
-
-  /* Upsample some data (up to a strip height's worth). */
-  old_next_row = post->next_row;
-  (*cinfo->upsample->upsample) (cinfo,
-		input_buf, in_row_group_ctr, in_row_groups_avail,
-		post->buffer, &post->next_row, post->strip_height);
-
-  /* Allow quantizer to scan new data.  No data is emitted, */
-  /* but we advance out_row_ctr so outer loop can tell when we're done. */
-  if (post->next_row > old_next_row) {
-    num_rows = post->next_row - old_next_row;
-    (*cinfo->cquantize->color_quantize) (cinfo, post->buffer + old_next_row,
-					 (JSAMPARRAY) NULL, (int) num_rows);
-    *out_row_ctr += num_rows;
-  }
-
-  /* Advance if we filled the strip. */
-  if (post->next_row >= post->strip_height) {
-    post->starting_row += post->strip_height;
-    post->next_row = 0;
-  }
-}
-
-
-/*
- * Process some data in the second pass of 2-pass quantization.
- */
-
-METHODDEF void
-post_process_2pass (j_decompress_ptr cinfo,
-		    JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr,
-		    JDIMENSION in_row_groups_avail,
-		    JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
-		    JDIMENSION out_rows_avail)
-{
-  my_post_ptr post = (my_post_ptr) cinfo->post;
-  JDIMENSION num_rows, max_rows;
-
-  /* Reposition virtual buffer if at start of strip. */
-  if (post->next_row == 0) {
-    post->buffer = (*cinfo->mem->access_virt_sarray)
-	((j_common_ptr) cinfo, post->whole_image,
-	 post->starting_row, post->strip_height, FALSE);
-  }
-
-  /* Determine number of rows to emit. */
-  num_rows = post->strip_height - post->next_row; /* available in strip */
-  max_rows = out_rows_avail - *out_row_ctr; /* available in output area */
-  if (num_rows > max_rows)
-    num_rows = max_rows;
-  /* We have to check bottom of image here, can't depend on upsampler. */
-  max_rows = cinfo->output_height - post->starting_row;
-  if (num_rows > max_rows)
-    num_rows = max_rows;
-
-  /* Quantize and emit data. */
-  (*cinfo->cquantize->color_quantize) (cinfo,
-		post->buffer + post->next_row, output_buf + *out_row_ctr,
-		(int) num_rows);
-  *out_row_ctr += num_rows;
-
-  /* Advance if we filled the strip. */
-  post->next_row += num_rows;
-  if (post->next_row >= post->strip_height) {
-    post->starting_row += post->strip_height;
-    post->next_row = 0;
-  }
-}
-
-#endif /* QUANT_2PASS_SUPPORTED */
-
-
-/*
- * Initialize postprocessing controller.
- */
-
-GLOBAL void
-jinit_d_post_controller (j_decompress_ptr cinfo, boolean need_full_buffer)
-{
-  my_post_ptr post;
-
-  post = (my_post_ptr)
-    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
-				SIZEOF(my_post_controller));
-  cinfo->post = (struct jpeg_d_post_controller *) post;
-  post->pub.start_pass = start_pass_dpost;
-  post->whole_image = NULL;	/* flag for no virtual arrays */
-  post->buffer = NULL;		/* flag for no strip buffer */
-
-  /* Create the quantization buffer, if needed */
-  if (cinfo->quantize_colors) {
-    /* The buffer strip height is max_v_samp_factor, which is typically
-     * an efficient number of rows for upsampling to return.
-     * (In the presence of output rescaling, we might want to be smarter?)
-     */
-    post->strip_height = (JDIMENSION) cinfo->max_v_samp_factor;
-    if (need_full_buffer) {
-      /* Two-pass color quantization: need full-image storage. */
-      /* We round up the number of rows to a multiple of the strip height. */
-#ifdef QUANT_2PASS_SUPPORTED
-      post->whole_image = (*cinfo->mem->request_virt_sarray)
-	((j_common_ptr) cinfo, JPOOL_IMAGE, FALSE,
-	 cinfo->output_width * cinfo->out_color_components,
-	 (JDIMENSION) jround_up((long) cinfo->output_height,
-				(long) post->strip_height),
-	 post->strip_height);
-#else
-      ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
-#endif /* QUANT_2PASS_SUPPORTED */
-    } else {
-      /* One-pass color quantization: just make a strip buffer. */
-      post->buffer = (*cinfo->mem->alloc_sarray)
-	((j_common_ptr) cinfo, JPOOL_IMAGE,
-	 cinfo->output_width * cinfo->out_color_components,
-	 post->strip_height);
-    }
-  }
-}
diff -NEaurb neo/renderer/jpeg-6/jdsample.c neo/renderer/jpeg-6/jdsample.c
--- neo/renderer/jpeg-6/jdsample.c	2011-12-26 04:15:38 +0000
+++ neo/renderer/jpeg-6/jdsample.c	1970-01-01 00:00:00 +0000
@@ -1,478 +0,0 @@
-/*
- * jdsample.c
- *
- * Copyright (C) 1991-1994, Thomas G. Lane.
- * This file is part of the Independent JPEG Group's software.
- * For conditions of distribution and use, see the accompanying README file.
- *
- * This file contains upsampling routines.
- *
- * Upsampling input data is counted in "row groups".  A row group
- * is defined to be (v_samp_factor * DCT_scaled_size / min_DCT_scaled_size)
- * sample rows of each component.  Upsampling will normally produce
- * max_v_samp_factor pixel rows from each row group (but this could vary
- * if the upsampler is applying a scale factor of its own).
- *
- * An excellent reference for image resampling is
- *   Digital Image Warping, George Wolberg, 1990.
- *   Pub. by IEEE Computer Society Press, Los Alamitos, CA. ISBN 0-8186-8944-7.
- */
-
-#define JPEG_INTERNALS
-#include "jinclude.h"
-#include "jpeglib.h"
-
-
-/* Pointer to routine to upsample a single component */
-typedef JMETHOD(void, upsample1_ptr,
-		(j_decompress_ptr cinfo, jpeg_component_info * compptr,
-		 JSAMPARRAY input_data, JSAMPARRAY * output_data_ptr));
-
-/* Private subobject */
-
-typedef struct {
-  struct jpeg_upsampler pub;	/* public fields */
-
-  /* Color conversion buffer.  When using separate upsampling and color
-   * conversion steps, this buffer holds one upsampled row group until it
-   * has been color converted and output.
-   * Note: we do not allocate any storage for component(s) which are full-size,
-   * ie do not need rescaling.  The corresponding entry of color_buf[] is
-   * simply set to point to the input data array, thereby avoiding copying.
-   */
-  JSAMPARRAY color_buf[MAX_COMPONENTS];
-
-  /* Per-component upsampling method pointers */
-  upsample1_ptr methods[MAX_COMPONENTS];
-
-  int next_row_out;		/* counts rows emitted from color_buf */
-  JDIMENSION rows_to_go;	/* counts rows remaining in image */
-
-  /* Height of an input row group for each component. */
-  int rowgroup_height[MAX_COMPONENTS];
-
-  /* These arrays save pixel expansion factors so that int_expand need not
-   * recompute them each time.  They are unused for other upsampling methods.
-   */
-  UINT8 h_expand[MAX_COMPONENTS];
-  UINT8 v_expand[MAX_COMPONENTS];
-} my_upsampler;
-
-typedef my_upsampler * my_upsample_ptr;
-
-
-/*
- * Initialize for an upsampling pass.
- */
-
-METHODDEF void
-start_pass_upsample (j_decompress_ptr cinfo)
-{
-  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
-
-  /* Mark the conversion buffer empty */
-  upsample->next_row_out = cinfo->max_v_samp_factor;
-  /* Initialize total-height counter for detecting bottom of image */
-  upsample->rows_to_go = cinfo->output_height;
-}
-
-
-/*
- * Control routine to do upsampling (and color conversion).
- *
- * In this version we upsample each component independently.
- * We upsample one row group into the conversion buffer, then apply
- * color conversion a row at a time.
- */
-
-METHODDEF void
-sep_upsample (j_decompress_ptr cinfo,
-	      JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr,
-	      JDIMENSION in_row_groups_avail,
-	      JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
-	      JDIMENSION out_rows_avail)
-{
-  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
-  int ci;
-  jpeg_component_info * compptr;
-  JDIMENSION num_rows;
-
-  /* Fill the conversion buffer, if it's empty */
-  if (upsample->next_row_out >= cinfo->max_v_samp_factor) {
-    for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
-	 ci++, compptr++) {
-      /* Invoke per-component upsample method.  Notice we pass a POINTER
-       * to color_buf[ci], so that fullsize_upsample can change it.
-       */
-      (*upsample->methods[ci]) (cinfo, compptr,
-	input_buf[ci] + (*in_row_group_ctr * upsample->rowgroup_height[ci]),
-	upsample->color_buf + ci);
-    }
-    upsample->next_row_out = 0;
-  }
-
-  /* Color-convert and emit rows */
-
-  /* How many we have in the buffer: */
-  num_rows = (JDIMENSION) (cinfo->max_v_samp_factor - upsample->next_row_out);
-  /* Not more than the distance to the end of the image.  Need this test
-   * in case the image height is not a multiple of max_v_samp_factor:
-   */
-  if (num_rows > upsample->rows_to_go) 
-    num_rows = upsample->rows_to_go;
-  /* And not more than what the client can accept: */
-  out_rows_avail -= *out_row_ctr;
-  if (num_rows > out_rows_avail)
-    num_rows = out_rows_avail;
-
-  (*cinfo->cconvert->color_convert) (cinfo, upsample->color_buf,
-				     (JDIMENSION) upsample->next_row_out,
-				     output_buf + *out_row_ctr,
-				     (int) num_rows);
-
-  /* Adjust counts */
-  *out_row_ctr += num_rows;
-  upsample->rows_to_go -= num_rows;
-  upsample->next_row_out += num_rows;
-  /* When the buffer is emptied, declare this input row group consumed */
-  if (upsample->next_row_out >= cinfo->max_v_samp_factor)
-    (*in_row_group_ctr)++;
-}
-
-
-/*
- * These are the routines invoked by sep_upsample to upsample pixel values
- * of a single component.  One row group is processed per call.
- */
-
-
-/*
- * For full-size components, we just make color_buf[ci] point at the
- * input buffer, and thus avoid copying any data.  Note that this is
- * safe only because sep_upsample doesn't declare the input row group
- * "consumed" until we are done color converting and emitting it.
- */
-
-METHODDEF void
-fullsize_upsample (j_decompress_ptr cinfo, jpeg_component_info * compptr,
-		   JSAMPARRAY input_data, JSAMPARRAY * output_data_ptr)
-{
-  *output_data_ptr = input_data;
-}
-
-
-/*
- * This is a no-op version used for "uninteresting" components.
- * These components will not be referenced by color conversion.
- */
-
-METHODDEF void
-noop_upsample (j_decompress_ptr cinfo, jpeg_component_info * compptr,
-	       JSAMPARRAY input_data, JSAMPARRAY * output_data_ptr)
-{
-  *output_data_ptr = NULL;	/* safety check */
-}
-
-
-/*
- * This version handles any integral sampling ratios.
- * This is not used for typical JPEG files, so it need not be fast.
- * Nor, for that matter, is it particularly accurate: the algorithm is
- * simple replication of the input pixel onto the corresponding output
- * pixels.  The hi-falutin sampling literature refers to this as a
- * "box filter".  A box filter tends to introduce visible artifacts,
- * so if you are actually going to use 3:1 or 4:1 sampling ratios
- * you would be well advised to improve this code.
- */
-
-METHODDEF void
-int_upsample (j_decompress_ptr cinfo, jpeg_component_info * compptr,
-	      JSAMPARRAY input_data, JSAMPARRAY * output_data_ptr)
-{
-  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
-  JSAMPARRAY output_data = *output_data_ptr;
-  register JSAMPROW inptr, outptr;
-  register JSAMPLE invalue;
-  register int h;
-  JSAMPROW outend;
-  int h_expand, v_expand;
-  int inrow, outrow;
-
-  h_expand = upsample->h_expand[compptr->component_index];
-  v_expand = upsample->v_expand[compptr->component_index];
-
-  inrow = outrow = 0;
-  while (outrow < cinfo->max_v_samp_factor) {
-    /* Generate one output row with proper horizontal expansion */
-    inptr = input_data[inrow];
-    outptr = output_data[outrow];
-    outend = outptr + cinfo->output_width;
-    while (outptr < outend) {
-      invalue = *inptr++;	/* don't need GETJSAMPLE() here */
-      for (h = h_expand; h > 0; h--) {
-	*outptr++ = invalue;
-      }
-    }
-    /* Generate any additional output rows by duplicating the first one */
-    if (v_expand > 1) {
-      jcopy_sample_rows(output_data, outrow, output_data, outrow+1,
-			v_expand-1, cinfo->output_width);
-    }
-    inrow++;
-    outrow += v_expand;
-  }
-}
-
-
-/*
- * Fast processing for the common case of 2:1 horizontal and 1:1 vertical.
- * It's still a box filter.
- */
-
-METHODDEF void
-h2v1_upsample (j_decompress_ptr cinfo, jpeg_component_info * compptr,
-	       JSAMPARRAY input_data, JSAMPARRAY * output_data_ptr)
-{
-  JSAMPARRAY output_data = *output_data_ptr;
-  register JSAMPROW inptr, outptr;
-  register JSAMPLE invalue;
-  JSAMPROW outend;
-  int inrow;
-
-  for (inrow = 0; inrow < cinfo->max_v_samp_factor; inrow++) {
-    inptr = input_data[inrow];
-    outptr = output_data[inrow];
-    outend = outptr + cinfo->output_width;
-    while (outptr < outend) {
-      invalue = *inptr++;	/* don't need GETJSAMPLE() here */
-      *outptr++ = invalue;
-      *outptr++ = invalue;
-    }
-  }
-}
-
-
-/*
- * Fast processing for the common case of 2:1 horizontal and 2:1 vertical.
- * It's still a box filter.
- */
-
-METHODDEF void
-h2v2_upsample (j_decompress_ptr cinfo, jpeg_component_info * compptr,
-	       JSAMPARRAY input_data, JSAMPARRAY * output_data_ptr)
-{
-  JSAMPARRAY output_data = *output_data_ptr;
-  register JSAMPROW inptr, outptr;
-  register JSAMPLE invalue;
-  JSAMPROW outend;
-  int inrow, outrow;
-
-  inrow = outrow = 0;
-  while (outrow < cinfo->max_v_samp_factor) {
-    inptr = input_data[inrow];
-    outptr = output_data[outrow];
-    outend = outptr + cinfo->output_width;
-    while (outptr < outend) {
-      invalue = *inptr++;	/* don't need GETJSAMPLE() here */
-      *outptr++ = invalue;
-      *outptr++ = invalue;
-    }
-    jcopy_sample_rows(output_data, outrow, output_data, outrow+1,
-		      1, cinfo->output_width);
-    inrow++;
-    outrow += 2;
-  }
-}
-
-
-/*
- * Fancy processing for the common case of 2:1 horizontal and 1:1 vertical.
- *
- * The upsampling algorithm is linear interpolation between pixel centers,
- * also known as a "triangle filter".  This is a good compromise between
- * speed and visual quality.  The centers of the output pixels are 1/4 and 3/4
- * of the way between input pixel centers.
- *
- * A note about the "bias" calculations: when rounding fractional values to
- * integer, we do not want to always round 0.5 up to the next integer.
- * If we did that, we'd introduce a noticeable bias towards larger values.
- * Instead, this code is arranged so that 0.5 will be rounded up or down at
- * alternate pixel locations (a simple ordered dither pattern).
- */
-
-METHODDEF void
-h2v1_fancy_upsample (j_decompress_ptr cinfo, jpeg_component_info * compptr,
-		     JSAMPARRAY input_data, JSAMPARRAY * output_data_ptr)
-{
-  JSAMPARRAY output_data = *output_data_ptr;
-  register JSAMPROW inptr, outptr;
-  register int invalue;
-  register JDIMENSION colctr;
-  int inrow;
-
-  for (inrow = 0; inrow < cinfo->max_v_samp_factor; inrow++) {
-    inptr = input_data[inrow];
-    outptr = output_data[inrow];
-    /* Special case for first column */
-    invalue = GETJSAMPLE(*inptr++);
-    *outptr++ = (JSAMPLE) invalue;
-    *outptr++ = (JSAMPLE) ((invalue * 3 + GETJSAMPLE(*inptr) + 2) >> 2);
-
-    for (colctr = compptr->downsampled_width - 2; colctr > 0; colctr--) {
-      /* General case: 3/4 * nearer pixel + 1/4 * further pixel */
-      invalue = GETJSAMPLE(*inptr++) * 3;
-      *outptr++ = (JSAMPLE) ((invalue + GETJSAMPLE(inptr[-2]) + 1) >> 2);
-      *outptr++ = (JSAMPLE) ((invalue + GETJSAMPLE(*inptr) + 2) >> 2);
-    }
-
-    /* Special case for last column */
-    invalue = GETJSAMPLE(*inptr);
-    *outptr++ = (JSAMPLE) ((invalue * 3 + GETJSAMPLE(inptr[-1]) + 1) >> 2);
-    *outptr++ = (JSAMPLE) invalue;
-  }
-}
-
-
-/*
- * Fancy processing for the common case of 2:1 horizontal and 2:1 vertical.
- * Again a triangle filter; see comments for h2v1 case, above.
- *
- * It is OK for us to reference the adjacent input rows because we demanded
- * context from the main buffer controller (see initialization code).
- */
-
-METHODDEF void
-h2v2_fancy_upsample (j_decompress_ptr cinfo, jpeg_component_info * compptr,
-		     JSAMPARRAY input_data, JSAMPARRAY * output_data_ptr)
-{
-  JSAMPARRAY output_data = *output_data_ptr;
-  register JSAMPROW inptr0, inptr1, outptr;
-#if BITS_IN_JSAMPLE == 8
-  register int thiscolsum, lastcolsum, nextcolsum;
-#else
-  register INT32 thiscolsum, lastcolsum, nextcolsum;
-#endif
-  register JDIMENSION colctr;
-  int inrow, outrow, v;
-
-  inrow = outrow = 0;
-  while (outrow < cinfo->max_v_samp_factor) {
-    for (v = 0; v < 2; v++) {
-      /* inptr0 points to nearest input row, inptr1 points to next nearest */
-      inptr0 = input_data[inrow];
-      if (v == 0)		/* next nearest is row above */
-	inptr1 = input_data[inrow-1];
-      else			/* next nearest is row below */
-	inptr1 = input_data[inrow+1];
-      outptr = output_data[outrow++];
-
-      /* Special case for first column */
-      thiscolsum = GETJSAMPLE(*inptr0++) * 3 + GETJSAMPLE(*inptr1++);
-      nextcolsum = GETJSAMPLE(*inptr0++) * 3 + GETJSAMPLE(*inptr1++);
-      *outptr++ = (JSAMPLE) ((thiscolsum * 4 + 8) >> 4);
-      *outptr++ = (JSAMPLE) ((thiscolsum * 3 + nextcolsum + 7) >> 4);
-      lastcolsum = thiscolsum; thiscolsum = nextcolsum;
-
-      for (colctr = compptr->downsampled_width - 2; colctr > 0; colctr--) {
-	/* General case: 3/4 * nearer pixel + 1/4 * further pixel in each */
-	/* dimension, thus 9/16, 3/16, 3/16, 1/16 overall */
-	nextcolsum = GETJSAMPLE(*inptr0++) * 3 + GETJSAMPLE(*inptr1++);
-	*outptr++ = (JSAMPLE) ((thiscolsum * 3 + lastcolsum + 8) >> 4);
-	*outptr++ = (JSAMPLE) ((thiscolsum * 3 + nextcolsum + 7) >> 4);
-	lastcolsum = thiscolsum; thiscolsum = nextcolsum;
-      }
-
-      /* Special case for last column */
-      *outptr++ = (JSAMPLE) ((thiscolsum * 3 + lastcolsum + 8) >> 4);
-      *outptr++ = (JSAMPLE) ((thiscolsum * 4 + 7) >> 4);
-    }
-    inrow++;
-  }
-}
-
-
-/*
- * Module initialization routine for upsampling.
- */
-
-GLOBAL void
-jinit_upsampler (j_decompress_ptr cinfo)
-{
-  my_upsample_ptr upsample;
-  int ci;
-  jpeg_component_info * compptr;
-  boolean need_buffer, do_fancy;
-  int h_in_group, v_in_group, h_out_group, v_out_group;
-
-  upsample = (my_upsample_ptr)
-    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
-				SIZEOF(my_upsampler));
-  cinfo->upsample = (struct jpeg_upsampler *) upsample;
-  upsample->pub.start_pass = start_pass_upsample;
-  upsample->pub.upsample = sep_upsample;
-  upsample->pub.need_context_rows = FALSE; /* until we find out differently */
-
-  if (cinfo->CCIR601_sampling)	/* this isn't supported */
-    ERREXIT(cinfo, JERR_CCIR601_NOTIMPL);
-
-  /* jdmainct.c doesn't support context rows when min_DCT_scaled_size = 1,
-   * so don't ask for it.
-   */
-  do_fancy = cinfo->do_fancy_upsampling && cinfo->min_DCT_scaled_size > 1;
-
-  /* Verify we can handle the sampling factors, select per-component methods,
-   * and create storage as needed.
-   */
-  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
-       ci++, compptr++) {
-    /* Compute size of an "input group" after IDCT scaling.  This many samples
-     * are to be converted to max_h_samp_factor * max_v_samp_factor pixels.
-     */
-    h_in_group = (compptr->h_samp_factor * compptr->DCT_scaled_size) /
-		 cinfo->min_DCT_scaled_size;
-    v_in_group = (compptr->v_samp_factor * compptr->DCT_scaled_size) /
-		 cinfo->min_DCT_scaled_size;
-    h_out_group = cinfo->max_h_samp_factor;
-    v_out_group = cinfo->max_v_samp_factor;
-    upsample->rowgroup_height[ci] = v_in_group; /* save for use later */
-    need_buffer = TRUE;
-    if (! compptr->component_needed) {
-      /* Don't bother to upsample an uninteresting component. */
-      upsample->methods[ci] = noop_upsample;
-      need_buffer = FALSE;
-    } else if (h_in_group == h_out_group && v_in_group == v_out_group) {
-      /* Fullsize components can be processed without any work. */
-      upsample->methods[ci] = fullsize_upsample;
-      need_buffer = FALSE;
-    } else if (h_in_group * 2 == h_out_group &&
-	       v_in_group == v_out_group) {
-      /* Special cases for 2h1v upsampling */
-      if (do_fancy && compptr->downsampled_width > 2)
-	upsample->methods[ci] = h2v1_fancy_upsample;
-      else
-	upsample->methods[ci] = h2v1_upsample;
-    } else if (h_in_group * 2 == h_out_group &&
-	       v_in_group * 2 == v_out_group) {
-      /* Special cases for 2h2v upsampling */
-      if (do_fancy && compptr->downsampled_width > 2) {
-	upsample->methods[ci] = h2v2_fancy_upsample;
-	upsample->pub.need_context_rows = TRUE;
-      } else
-	upsample->methods[ci] = h2v2_upsample;
-    } else if ((h_out_group % h_in_group) == 0 &&
-	       (v_out_group % v_in_group) == 0) {
-      /* Generic integral-factors upsampling method */
-      upsample->methods[ci] = int_upsample;
-      upsample->h_expand[ci] = (UINT8) (h_out_group / h_in_group);
-      upsample->v_expand[ci] = (UINT8) (v_out_group / v_in_group);
-    } else
-      ERREXIT(cinfo, JERR_FRACT_SAMPLE_NOTIMPL);
-    if (need_buffer) {
-      upsample->color_buf[ci] = (*cinfo->mem->alloc_sarray)
-	((j_common_ptr) cinfo, JPOOL_IMAGE,
-	 (JDIMENSION) jround_up((long) cinfo->output_width,
-				(long) cinfo->max_h_samp_factor),
-	 (JDIMENSION) cinfo->max_v_samp_factor);
-    }
-  }
-}
diff -NEaurb neo/renderer/jpeg-6/jdtrans.c neo/renderer/jpeg-6/jdtrans.c
--- neo/renderer/jpeg-6/jdtrans.c	2011-12-26 04:15:38 +0000
+++ neo/renderer/jpeg-6/jdtrans.c	1970-01-01 00:00:00 +0000
@@ -1,122 +0,0 @@
-/*
- * jdtrans.c
- *
- * Copyright (C) 1995, Thomas G. Lane.
- * This file is part of the Independent JPEG Group's software.
- * For conditions of distribution and use, see the accompanying README file.
- *
- * This file contains library routines for transcoding decompression,
- * that is, reading raw DCT coefficient arrays from an input JPEG file.
- * The routines in jdapimin.c will also be needed by a transcoder.
- */
-
-#define JPEG_INTERNALS
-#include "jinclude.h"
-#include "jpeglib.h"
-
-
-/* Forward declarations */
-LOCAL void transdecode_master_selection JPP((j_decompress_ptr cinfo));
-
-
-/*
- * Read the coefficient arrays from a JPEG file.
- * jpeg_read_header must be completed before calling this.
- *
- * The entire image is read into a set of virtual coefficient-block arrays,
- * one per component.  The return value is a pointer to the array of
- * virtual-array descriptors.  These can be manipulated directly via the
- * JPEG memory manager, or handed off to jpeg_write_coefficients().
- * To release the memory occupied by the virtual arrays, call
- * jpeg_finish_decompress() when done with the data.
- *
- * Returns NULL if suspended.  This case need be checked only if
- * a suspending data source is used.
- */
-
-GLOBAL jvirt_barray_ptr *
-jpeg_read_coefficients (j_decompress_ptr cinfo)
-{
-  if (cinfo->global_state == DSTATE_READY) {
-    /* First call: initialize active modules */
-    transdecode_master_selection(cinfo);
-    cinfo->global_state = DSTATE_RDCOEFS;
-  } else if (cinfo->global_state != DSTATE_RDCOEFS)
-    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
-  /* Absorb whole file into the coef buffer */
-  for (;;) {
-    int retcode;
-    /* Call progress monitor hook if present */
-    if (cinfo->progress != NULL)
-      (*cinfo->progress->progress_monitor) ((j_common_ptr) cinfo);
-    /* Absorb some more input */
-    retcode = (*cinfo->inputctl->consume_input) (cinfo);
-    if (retcode == JPEG_SUSPENDED)
-      return NULL;
-    if (retcode == JPEG_REACHED_EOI)
-      break;
-    /* Advance progress counter if appropriate */
-    if (cinfo->progress != NULL &&
-	(retcode == JPEG_ROW_COMPLETED || retcode == JPEG_REACHED_SOS)) {
-      if (++cinfo->progress->pass_counter >= cinfo->progress->pass_limit) {
-	/* startup underestimated number of scans; ratchet up one scan */
-	cinfo->progress->pass_limit += (long) cinfo->total_iMCU_rows;
-      }
-    }
-  }
-  /* Set state so that jpeg_finish_decompress does the right thing */
-  cinfo->global_state = DSTATE_STOPPING;
-  return cinfo->coef->coef_arrays;
-}
-
-
-/*
- * Master selection of decompression modules for transcoding.
- * This substitutes for jdmaster.c's initialization of the full decompressor.
- */
-
-LOCAL void
-transdecode_master_selection (j_decompress_ptr cinfo)
-{
-  /* Entropy decoding: either Huffman or arithmetic coding. */
-  if (cinfo->arith_code) {
-    ERREXIT(cinfo, JERR_ARITH_NOTIMPL);
-  } else {
-    if (cinfo->progressive_mode) {
-#ifdef D_PROGRESSIVE_SUPPORTED
-      jinit_phuff_decoder(cinfo);
-#else
-      ERREXIT(cinfo, JERR_NOT_COMPILED);
-#endif
-    } else
-      jinit_huff_decoder(cinfo);
-  }
-
-  /* Always get a full-image coefficient buffer. */
-  jinit_d_coef_controller(cinfo, TRUE);
-
-  /* We can now tell the memory manager to allocate virtual arrays. */
-  (*cinfo->mem->realize_virt_arrays) ((j_common_ptr) cinfo);
-
-  /* Initialize input side of decompressor to consume first scan. */
-  (*cinfo->inputctl->start_input_pass) (cinfo);
-
-  /* Initialize progress monitoring. */
-  if (cinfo->progress != NULL) {
-    int nscans;
-    /* Estimate number of scans to set pass_limit. */
-    if (cinfo->progressive_mode) {
-      /* Arbitrarily estimate 2 interleaved DC scans + 3 AC scans/component. */
-      nscans = 2 + 3 * cinfo->num_components;
-    } else if (cinfo->inputctl->has_multiple_scans) {
-      /* For a nonprogressive multiscan file, estimate 1 scan per component. */
-      nscans = cinfo->num_components;
-    } else {
-      nscans = 1;
-    }
-    cinfo->progress->pass_counter = 0L;
-    cinfo->progress->pass_limit = (long) cinfo->total_iMCU_rows * nscans;
-    cinfo->progress->completed_passes = 0;
-    cinfo->progress->total_passes = 1;
-  }
-}
diff -NEaurb neo/renderer/jpeg-6/jerror.c neo/renderer/jpeg-6/jerror.c
--- neo/renderer/jpeg-6/jerror.c	2011-12-26 04:15:38 +0000
+++ neo/renderer/jpeg-6/jerror.c	1970-01-01 00:00:00 +0000
@@ -1,234 +0,0 @@
-/*
- * jerror.c
- *
- * Copyright (C) 1991-1994, Thomas G. Lane.
- * This file is part of the Independent JPEG Group's software.
- * For conditions of distribution and use, see the accompanying README file.
- *
- * This file contains simple error-reporting and trace-message routines.
- * These are suitable for Unix-like systems and others where writing to
- * stderr is the right thing to do.  Many applications will want to replace
- * some or all of these routines.
- *
- * These routines are used by both the compression and decompression code.
- */
-
-/* this is not a core library module, so it doesn't define JPEG_INTERNALS */
-
-#include "jinclude.h"
-#include "jpeglib.h"
-#include "jversion.h"
-#include "jerror.h"
-
-extern	jpg_Error( const char *fmt, ... );
-extern	jpg_Printf( const char *fmt, ... );
-
-#ifndef EXIT_FAILURE		/* define exit() codes if not provided */
-#define EXIT_FAILURE  1
-#endif
-
-
-/*
- * Create the message string table.
- * We do this from the master message list in jerror.h by re-reading
- * jerror.h with a suitable definition for macro JMESSAGE.
- * The message table is made an external symbol just in case any applications
- * want to refer to it directly.
- */
-
-#ifdef NEED_SHORT_EXTERNAL_NAMES
-#define jpeg_std_message_table	jMsgTable
-#endif
-
-#define JMESSAGE(code,string)	string ,
-
-const char * const jpeg_std_message_table[] = {
-#include "jerror.h"
-  NULL
-};
-
-
-/*
- * Error exit handler: must not return to caller.
- *
- * Applications may override this if they want to get control back after
- * an error.  Typically one would longjmp somewhere instead of exiting.
- * The setjmp buffer can be made a private field within an expanded error
- * handler object.  Note that the info needed to generate an error message
- * is stored in the error object, so you can generate the message now or
- * later, at your convenience.
- * You should make sure that the JPEG object is cleaned up (with jpeg_abort
- * or jpeg_destroy) at some point.
- */
-
-METHODDEF void
-error_exit (j_common_ptr cinfo)
-{
-  char buffer[JMSG_LENGTH_MAX];
-
-  /* Create the message */
-  (*cinfo->err->format_message) (cinfo, buffer);
-
-  /* Let the memory manager delete any temp files before we die */
-  jpeg_destroy(cinfo);
-
-  jpg_Error( "%s\n", buffer );
-}
-
-
-/*
- * Actual output of an error or trace message.
- * Applications may override this method to send JPEG messages somewhere
- * other than stderr.
- */
-
-METHODDEF void
-output_message (j_common_ptr cinfo)
-{
-  char buffer[JMSG_LENGTH_MAX];
-
-  /* Create the message */
-  (*cinfo->err->format_message) (cinfo, buffer);
-
-  /* Send it to stderr, adding a newline */
-  jpg_Printf( "%s\n", buffer );
-}
-
-
-/*
- * Decide whether to emit a trace or warning message.
- * msg_level is one of:
- *   -1: recoverable corrupt-data warning, may want to abort.
- *    0: important advisory messages (always display to user).
- *    1: first level of tracing detail.
- *    2,3,...: successively more detailed tracing messages.
- * An application might override this method if it wanted to abort on warnings
- * or change the policy about which messages to display.
- */
-
-METHODDEF void
-emit_message (j_common_ptr cinfo, int msg_level)
-{
-  struct jpeg_error_mgr * err = cinfo->err;
-
-  if (msg_level < 0) {
-    /* It's a warning message.  Since corrupt files may generate many warnings,
-     * the policy implemented here is to show only the first warning,
-     * unless trace_level >= 3.
-     */
-    if (err->num_warnings == 0 || err->trace_level >= 3)
-      (*err->output_message) (cinfo);
-    /* Always count warnings in num_warnings. */
-    err->num_warnings++;
-  } else {
-    /* It's a trace message.  Show it if trace_level >= msg_level. */
-    if (err->trace_level >= msg_level)
-      (*err->output_message) (cinfo);
-  }
-}
-
-
-/*
- * Format a message string for the most recent JPEG error or message.
- * The message is stored into buffer, which should be at least JMSG_LENGTH_MAX
- * characters.  Note that no '\n' character is added to the string.
- * Few applications should need to override this method.
- */
-
-METHODDEF void
-format_message (j_common_ptr cinfo, char * buffer)
-{
-  struct jpeg_error_mgr * err = cinfo->err;
-  int msg_code = err->msg_code;
-  const char * msgtext = NULL;
-  const char * msgptr;
-  char ch;
-  boolean isstring;
-
-  /* Look up message string in proper table */
-  if (msg_code > 0 && msg_code <= err->last_jpeg_message) {
-    msgtext = err->jpeg_message_table[msg_code];
-  } else if (err->addon_message_table != NULL &&
-	     msg_code >= err->first_addon_message &&
-	     msg_code <= err->last_addon_message) {
-    msgtext = err->addon_message_table[msg_code - err->first_addon_message];
-  }
-
-  /* Defend against bogus message number */
-  if (msgtext == NULL) {
-    err->msg_parm.i[0] = msg_code;
-    msgtext = err->jpeg_message_table[0];
-  }
-
-  /* Check for string parameter, as indicated by %s in the message text */
-  isstring = FALSE;
-  msgptr = msgtext;
-  while ((ch = *msgptr++) != '\0') {
-    if (ch == '%') {
-      if (*msgptr == 's') isstring = TRUE;
-      break;
-    }
-  }
-
-  /* Format the message into the passed buffer */
-  if (isstring)
-    sprintf(buffer, msgtext, err->msg_parm.s);
-  else
-    sprintf(buffer, msgtext,
-	    err->msg_parm.i[0], err->msg_parm.i[1],
-	    err->msg_parm.i[2], err->msg_parm.i[3],
-	    err->msg_parm.i[4], err->msg_parm.i[5],
-	    err->msg_parm.i[6], err->msg_parm.i[7]);
-}
-
-
-/*
- * Reset error state variables at start of a new image.
- * This is called during compression startup to reset trace/error
- * processing to default state, without losing any application-specific
- * method pointers.  An application might possibly want to override
- * this method if it has additional error processing state.
- */
-
-METHODDEF void
-reset_error_mgr (j_common_ptr cinfo)
-{
-  cinfo->err->num_warnings = 0;
-  /* trace_level is not reset since it is an application-supplied parameter */
-  cinfo->err->msg_code = 0;	/* may be useful as a flag for "no error" */
-}
-
-
-/*
- * Fill in the standard error-handling methods in a jpeg_error_mgr object.
- * Typical call is:
- *	struct jpeg_compress_struct cinfo;
- *	struct jpeg_error_mgr err;
- *
- *	cinfo.err = jpeg_std_error(&err);
- * after which the application may override some of the methods.
- */
-
-GLOBAL struct jpeg_error_mgr *
-jpeg_std_error (struct jpeg_error_mgr * err)
-{
-  err->error_exit = error_exit;
-  err->emit_message = emit_message;
-  err->output_message = output_message;
-  err->format_message = format_message;
-  err->reset_error_mgr = reset_error_mgr;
-
-  err->trace_level = 0;		/* default = no tracing */
-  err->num_warnings = 0;	/* no warnings emitted yet */
-  err->msg_code = 0;		/* may be useful as a flag for "no error" */
-
-  /* Initialize message table pointers */
-  err->jpeg_message_table = jpeg_std_message_table;
-  err->last_jpeg_message = (int) JMSG_LASTMSGCODE - 1;
-
-  err->addon_message_table = NULL;
-  err->first_addon_message = 0;	/* for safety */
-  err->last_addon_message = 0;
-
-  return err;
-}
diff -NEaurb neo/renderer/jpeg-6/jerror.h neo/renderer/jpeg-6/jerror.h
--- neo/renderer/jpeg-6/jerror.h	2013-08-14 01:47:52 +0000
+++ neo/renderer/jpeg-6/jerror.h	1970-01-01 00:00:00 +0000
@@ -1,274 +0,0 @@
-/*
- * jerror.h
- *
- * Copyright (C) 1994-1995, Thomas G. Lane.
- * This file is part of the Independent JPEG Group's software.
- * For conditions of distribution and use, see the accompanying README file.
- *
- * This file defines the error and message codes for the JPEG library.
- * Edit this file to add new codes, or to translate the message strings to
- * some other language.
- * A set of error-reporting macros are defined too.  Some applications using
- * the JPEG library may wish to include this file to get the error codes
- * and/or the macros.
- */
-
-/*
- * To define the enum list of message codes, include this file without
- * defining macro JMESSAGE.  To create a message string table, include it
- * again with a suitable JMESSAGE definition (see jerror.c for an example).
- */
-#ifndef JMESSAGE
-#ifndef JERROR_H
-/* First time through, define the enum list */
-#define JMAKE_ENUM_LIST
-#else
-/* Repeated inclusions of this file are no-ops unless JMESSAGE is defined */
-#define JMESSAGE(code,string)
-#endif /* JERROR_H */
-#endif /* JMESSAGE */
-
-#ifdef JMAKE_ENUM_LIST
-
-typedef enum
-{
-
-#define JMESSAGE(code,string)	code ,
-
-#endif /* JMAKE_ENUM_LIST */
-
-    JMESSAGE(JMSG_NOMESSAGE, "Bogus message code %d") /* Must be first entry! */
-
-    /* For maintenance convenience, list is alphabetical by message code name */
-    JMESSAGE(JERR_ARITH_NOTIMPL,
-             "Sorry, there are legal restrictions on arithmetic coding")
-    JMESSAGE(JERR_BAD_ALIGN_TYPE, "ALIGN_TYPE is wrong, please fix")
-    JMESSAGE(JERR_BAD_ALLOC_CHUNK, "MAX_ALLOC_CHUNK is wrong, please fix")
-    JMESSAGE(JERR_BAD_BUFFER_MODE, "Bogus buffer control mode")
-    JMESSAGE(JERR_BAD_COMPONENT_ID, "Invalid component ID %d in SOS")
-    JMESSAGE(JERR_BAD_DCTSIZE, "IDCT output block size %d not supported")
-    JMESSAGE(JERR_BAD_IN_COLORSPACE, "Bogus input colorspace")
-    JMESSAGE(JERR_BAD_J_COLORSPACE, "Bogus JPEG colorspace")
-    JMESSAGE(JERR_BAD_LENGTH, "Bogus marker length")
-    JMESSAGE(JERR_BAD_MCU_SIZE, "Sampling factors too large for interleaved scan")
-    JMESSAGE(JERR_BAD_POOL_ID, "Invalid memory pool code %d")
-    JMESSAGE(JERR_BAD_PRECISION, "Unsupported JPEG data precision %d")
-    JMESSAGE(JERR_BAD_PROGRESSION,
-             "Invalid progressive parameters Ss=%d Se=%d Ah=%d Al=%d")
-    JMESSAGE(JERR_BAD_PROG_SCRIPT,
-             "Invalid progressive parameters at scan script entry %d")
-    JMESSAGE(JERR_BAD_SAMPLING, "Bogus sampling factors")
-    JMESSAGE(JERR_BAD_SCAN_SCRIPT, "Invalid scan script at entry %d")
-    JMESSAGE(JERR_BAD_STATE, "Improper call to JPEG library in state %d")
-    JMESSAGE(JERR_BAD_VIRTUAL_ACCESS, "Bogus virtual array access")
-    JMESSAGE(JERR_BUFFER_SIZE, "Buffer passed to JPEG library is too small")
-    JMESSAGE(JERR_CANT_SUSPEND, "Suspension not allowed here")
-    JMESSAGE(JERR_CCIR601_NOTIMPL, "CCIR601 sampling not implemented yet")
-    JMESSAGE(JERR_COMPONENT_COUNT, "Too many color components: %d, max %d")
-    JMESSAGE(JERR_CONVERSION_NOTIMPL, "Unsupported color conversion request")
-    JMESSAGE(JERR_DAC_INDEX, "Bogus DAC index %d")
-    JMESSAGE(JERR_DAC_VALUE, "Bogus DAC value 0x%x")
-    JMESSAGE(JERR_DHT_COUNTS, "Bogus DHT counts")
-    JMESSAGE(JERR_DHT_INDEX, "Bogus DHT index %d")
-    JMESSAGE(JERR_DQT_INDEX, "Bogus DQT index %d")
-    JMESSAGE(JERR_EMPTY_IMAGE, "Empty JPEG image (DNL not supported)")
-    JMESSAGE(JERR_EMS_READ, "Read from EMS failed")
-    JMESSAGE(JERR_EMS_WRITE, "Write to EMS failed")
-    JMESSAGE(JERR_EOI_EXPECTED, "Didn't expect more than one scan")
-    JMESSAGE(JERR_FILE_READ, "Input file read error")
-    JMESSAGE(JERR_FILE_WRITE, "Output file write error --- out of disk space?")
-    JMESSAGE(JERR_FRACT_SAMPLE_NOTIMPL, "Fractional sampling not implemented yet")
-    JMESSAGE(JERR_HUFF_CLEN_OVERFLOW, "Huffman code size table overflow")
-    JMESSAGE(JERR_HUFF_MISSING_CODE, "Missing Huffman code table entry")
-    JMESSAGE(JERR_IMAGE_TOO_BIG, "Maximum supported image dimension is %u pixels")
-    JMESSAGE(JERR_INPUT_EMPTY, "Empty input file")
-    JMESSAGE(JERR_INPUT_EOF, "Premature end of input file")
-    JMESSAGE(JERR_MISMATCHED_QUANT_TABLE,
-             "Cannot transcode due to multiple use of quantization table %d")
-    JMESSAGE(JERR_MISSING_DATA, "Scan script does not transmit all data")
-    JMESSAGE(JERR_MODE_CHANGE, "Invalid color quantization mode change")
-    JMESSAGE(JERR_NOTIMPL, "Not implemented yet")
-    JMESSAGE(JERR_NOT_COMPILED, "Requested feature was omitted at compile time")
-    JMESSAGE(JERR_NO_BACKING_STORE, "Backing store not supported")
-    JMESSAGE(JERR_NO_HUFF_TABLE, "Huffman table 0x%02x was not defined")
-    JMESSAGE(JERR_NO_IMAGE, "JPEG datastream contains no image")
-    JMESSAGE(JERR_NO_QUANT_TABLE, "Quantization table 0x%02x was not defined")
-    JMESSAGE(JERR_NO_SOI, "Not a JPEG file: starts with 0x%02x 0x%02x")
-    JMESSAGE(JERR_OUT_OF_MEMORY, "Insufficient memory (case %d)")
-    JMESSAGE(JERR_QUANT_COMPONENTS,
-             "Cannot quantize more than %d color components")
-    JMESSAGE(JERR_QUANT_FEW_COLORS, "Cannot quantize to fewer than %d colors")
-    JMESSAGE(JERR_QUANT_MANY_COLORS, "Cannot quantize to more than %d colors")
-    JMESSAGE(JERR_SOF_DUPLICATE, "Invalid JPEG file structure: two SOF markers")
-    JMESSAGE(JERR_SOF_NO_SOS, "Invalid JPEG file structure: missing SOS marker")
-    JMESSAGE(JERR_SOF_UNSUPPORTED, "Unsupported JPEG process: SOF type 0x%02x")
-    JMESSAGE(JERR_SOI_DUPLICATE, "Invalid JPEG file structure: two SOI markers")
-    JMESSAGE(JERR_SOS_NO_SOF, "Invalid JPEG file structure: SOS before SOF")
-    JMESSAGE(JERR_TFILE_CREATE, "Failed to create temporary file %s")
-    JMESSAGE(JERR_TFILE_READ, "Read failed on temporary file")
-    JMESSAGE(JERR_TFILE_SEEK, "Seek failed on temporary file")
-    JMESSAGE(JERR_TFILE_WRITE,
-             "Write failed on temporary file --- out of disk space?")
-    JMESSAGE(JERR_TOO_LITTLE_DATA, "Application transferred too few scanlines")
-    JMESSAGE(JERR_UNKNOWN_MARKER, "Unsupported marker type 0x%02x")
-    JMESSAGE(JERR_VIRTUAL_BUG, "Virtual array controller messed up")
-    JMESSAGE(JERR_WIDTH_OVERFLOW, "Image too wide for this implementation")
-    JMESSAGE(JERR_XMS_READ, "Read from XMS failed")
-    JMESSAGE(JERR_XMS_WRITE, "Write to XMS failed")
-    JMESSAGE(JMSG_COPYRIGHT, JCOPYRIGHT)
-    JMESSAGE(JMSG_VERSION, JVERSION)
-    JMESSAGE(JTRC_16BIT_TABLES,
-             "Caution: quantization tables are too coarse for baseline JPEG")
-    JMESSAGE(JTRC_ADOBE,
-             "Adobe APP14 marker: version %d, flags 0x%04x 0x%04x, transform %d")
-    JMESSAGE(JTRC_APP0, "Unknown APP0 marker (not JFIF), length %u")
-    JMESSAGE(JTRC_APP14, "Unknown APP14 marker (not Adobe), length %u")
-    JMESSAGE(JTRC_DAC, "Define Arithmetic Table 0x%02x: 0x%02x")
-    JMESSAGE(JTRC_DHT, "Define Huffman Table 0x%02x")
-    JMESSAGE(JTRC_DQT, "Define Quantization Table %d  precision %d")
-    JMESSAGE(JTRC_DRI, "Define Restart Interval %u")
-    JMESSAGE(JTRC_EMS_CLOSE, "Freed EMS handle %u")
-    JMESSAGE(JTRC_EMS_OPEN, "Obtained EMS handle %u")
-    JMESSAGE(JTRC_EOI, "End Of Image")
-    JMESSAGE(JTRC_HUFFBITS, "        %3d %3d %3d %3d %3d %3d %3d %3d")
-    JMESSAGE(JTRC_JFIF, "JFIF APP0 marker, density %dx%d  %d")
-    JMESSAGE(JTRC_JFIF_BADTHUMBNAILSIZE,
-             "Warning: thumbnail image size does not match data length %u")
-    JMESSAGE(JTRC_JFIF_MINOR, "Unknown JFIF minor revision number %d.%02d")
-    JMESSAGE(JTRC_JFIF_THUMBNAIL, "    with %d x %d thumbnail image")
-    JMESSAGE(JTRC_MISC_MARKER, "Skipping marker 0x%02x, length %u")
-    JMESSAGE(JTRC_PARMLESS_MARKER, "Unexpected marker 0x%02x")
-    JMESSAGE(JTRC_QUANTVALS, "        %4u %4u %4u %4u %4u %4u %4u %4u")
-    JMESSAGE(JTRC_QUANT_3_NCOLORS, "Quantizing to %d = %d*%d*%d colors")
-    JMESSAGE(JTRC_QUANT_NCOLORS, "Quantizing to %d colors")
-    JMESSAGE(JTRC_QUANT_SELECTED, "Selected %d colors for quantization")
-    JMESSAGE(JTRC_RECOVERY_ACTION, "At marker 0x%02x, recovery action %d")
-    JMESSAGE(JTRC_RST, "RST%d")
-    JMESSAGE(JTRC_SMOOTH_NOTIMPL,
-             "Smoothing not supported with nonstandard sampling ratios")
-    JMESSAGE(JTRC_SOF, "Start Of Frame 0x%02x: width=%u, height=%u, components=%d")
-    JMESSAGE(JTRC_SOF_COMPONENT, "    Component %d: %dhx%dv q=%d")
-    JMESSAGE(JTRC_SOI, "Start of Image")
-    JMESSAGE(JTRC_SOS, "Start Of Scan: %d components")
-    JMESSAGE(JTRC_SOS_COMPONENT, "    Component %d: dc=%d ac=%d")
-    JMESSAGE(JTRC_SOS_PARAMS, "  Ss=%d, Se=%d, Ah=%d, Al=%d")
-    JMESSAGE(JTRC_TFILE_CLOSE, "Closed temporary file %s")
-    JMESSAGE(JTRC_TFILE_OPEN, "Opened temporary file %s")
-    JMESSAGE(JTRC_UNKNOWN_IDS,
-             "Unrecognized component IDs %d %d %d, assuming YCbCr")
-    JMESSAGE(JTRC_XMS_CLOSE, "Freed XMS handle %u")
-    JMESSAGE(JTRC_XMS_OPEN, "Obtained XMS handle %u")
-    JMESSAGE(JWRN_ADOBE_XFORM, "Unknown Adobe color transform code %d")
-    JMESSAGE(JWRN_BOGUS_PROGRESSION,
-             "Inconsistent progression sequence for component %d coefficient %d")
-    JMESSAGE(JWRN_EXTRANEOUS_DATA,
-             "Corrupt JPEG data: %u extraneous bytes before marker 0x%02x")
-    JMESSAGE(JWRN_HIT_MARKER, "Corrupt JPEG data: premature end of data segment")
-    JMESSAGE(JWRN_HUFF_BAD_CODE, "Corrupt JPEG data: bad Huffman code")
-    JMESSAGE(JWRN_JFIF_MAJOR, "Warning: unknown JFIF revision number %d.%02d")
-    JMESSAGE(JWRN_JPEG_EOF, "Premature end of JPEG file")
-    JMESSAGE(JWRN_MUST_RESYNC,
-             "Corrupt JPEG data: found marker 0x%02x instead of RST%d")
-    JMESSAGE(JWRN_NOT_SEQUENTIAL, "Invalid SOS parameters for sequential JPEG")
-    JMESSAGE(JWRN_TOO_MUCH_DATA, "Application transferred too many scanlines")
-
-#ifdef JMAKE_ENUM_LIST
-
-    JMSG_LASTMSGCODE
-} J_MESSAGE_CODE;
-
-#undef JMAKE_ENUM_LIST
-#endif /* JMAKE_ENUM_LIST */
-
-/* Zap JMESSAGE macro so that future re-inclusions do nothing by default */
-#undef JMESSAGE
-
-
-#ifndef JERROR_H
-#define JERROR_H
-
-/* Macros to simplify using the error and trace message stuff */
-/* The first parameter is either type of cinfo pointer */
-
-/* Fatal errors (print message and exit) */
-#define ERREXIT(cinfo,code)  \
-  ((cinfo)->err->msg_code = (code), \
-   (*(cinfo)->err->error_exit) ((j_common_ptr) (cinfo)))
-#define ERREXIT1(cinfo,code,p1)  \
-  ((cinfo)->err->msg_code = (code), \
-   (cinfo)->err->msg_parm.i[0] = (p1), \
-   (*(cinfo)->err->error_exit) ((j_common_ptr) (cinfo)))
-#define ERREXIT2(cinfo,code,p1,p2)  \
-  ((cinfo)->err->msg_code = (code), \
-   (cinfo)->err->msg_parm.i[0] = (p1), \
-   (cinfo)->err->msg_parm.i[1] = (p2), \
-   (*(cinfo)->err->error_exit) ((j_common_ptr) (cinfo)))
-#define ERREXIT3(cinfo,code,p1,p2,p3)  \
-  ((cinfo)->err->msg_code = (code), \
-   (cinfo)->err->msg_parm.i[0] = (p1), \
-   (cinfo)->err->msg_parm.i[1] = (p2), \
-   (cinfo)->err->msg_parm.i[2] = (p3), \
-   (*(cinfo)->err->error_exit) ((j_common_ptr) (cinfo)))
-#define ERREXIT4(cinfo,code,p1,p2,p3,p4)  \
-  ((cinfo)->err->msg_code = (code), \
-   (cinfo)->err->msg_parm.i[0] = (p1), \
-   (cinfo)->err->msg_parm.i[1] = (p2), \
-   (cinfo)->err->msg_parm.i[2] = (p3), \
-   (cinfo)->err->msg_parm.i[3] = (p4), \
-   (*(cinfo)->err->error_exit) ((j_common_ptr) (cinfo)))
-#define ERREXITS(cinfo,code,str)  \
-  ((cinfo)->err->msg_code = (code), \
-   strncpy((cinfo)->err->msg_parm.s, (str), JMSG_STR_PARM_MAX), \
-   (*(cinfo)->err->error_exit) ((j_common_ptr) (cinfo)))
-
-#define MAKESTMT(stuff)		do { stuff } while (0)
-
-/* Nonfatal errors (we can keep going, but the data is probably corrupt) */
-#define WARNMS(cinfo,code)  \
-  ((cinfo)->err->msg_code = (code), \
-   (*(cinfo)->err->emit_message) ((j_common_ptr) (cinfo), -1))
-#define WARNMS1(cinfo,code,p1)  \
-  ((cinfo)->err->msg_code = (code), \
-   (cinfo)->err->msg_parm.i[0] = (p1), \
-   (*(cinfo)->err->emit_message) ((j_common_ptr) (cinfo), -1))
-#define WARNMS2(cinfo,code,p1,p2)  \
-  ((cinfo)->err->msg_code = (code), \
-   (cinfo)->err->msg_parm.i[0] = (p1), \
-   (cinfo)->err->msg_parm.i[1] = (p2), \
-   (*(cinfo)->err->emit_message) ((j_common_ptr) (cinfo), -1))
-
-/* Informational/debugging messages */
-#define TRACEMS(cinfo,lvl,code)  \
-  ((cinfo)->err->msg_code = (code), \
-   (*(cinfo)->err->emit_message) ((j_common_ptr) (cinfo), (lvl)))
-#define TRACEMS1(cinfo,lvl,code,p1)  \
-  ((cinfo)->err->msg_code = (code), \
-   (cinfo)->err->msg_parm.i[0] = (p1), \
-   (*(cinfo)->err->emit_message) ((j_common_ptr) (cinfo), (lvl)))
-#define TRACEMS2(cinfo,lvl,code,p1,p2)  \
-  ((cinfo)->err->msg_code = (code), \
-   (cinfo)->err->msg_parm.i[0] = (p1), \
-   (cinfo)->err->msg_parm.i[1] = (p2), \
-   (*(cinfo)->err->emit_message) ((j_common_ptr) (cinfo), (lvl)))
-#define TRACEMS3(cinfo,lvl,code,p1,p2,p3)  \
-  MAKESTMT(int * _mp = (cinfo)->err->msg_parm.i; \
-	   _mp[0] = (p1); _mp[1] = (p2); _mp[2] = (p3); \
-	   (cinfo)->err->msg_code = (code); \
-	   (*(cinfo)->err->emit_message) ((j_common_ptr) (cinfo), (lvl)); )
-#define TRACEMS4(cinfo,lvl,code,p1,p2,p3,p4)  \
-  MAKESTMT(int * _mp = (cinfo)->err->msg_parm.i; \
-	   _mp[0] = (p1); _mp[1] = (p2); _mp[2] = (p3); _mp[3] = (p4); \
-	   (cinfo)->err->msg_code = (code); \
-	   (*(cinfo)->err->emit_message) ((j_common_ptr) (cinfo), (lvl)); )
-#define TRACEMS8(cinfo,lvl,code,p1,p2,p3,p4,p5,p6,p7,p8)  \
-  MAKESTMT(int * _mp = (cinfo)->err->msg_parm.i; \
-	   _mp[0] = (p1); _mp[1] = (p2); _mp[2] = (p3); _mp[3] = (p4); \
-	   _mp[4] = (p5); _mp[5] = (p6); _mp[6] = (p7); _mp[7] = (p8); \
-	   (cinfo)->err->msg_code = (code); \
-	   (*(cinfo)->err->emit_message) ((j_common_ptr) (cinfo), (lvl)); )
-#define TRACEMSS(cinfo,lvl,code,str)  \
-  ((cinfo)->err->msg_code = (code), \
-   strncpy((cinfo)->err->msg_parm.s, (str), JMSG_STR_PARM_MAX), \
-   (*(cinfo)->err->emit_message) ((j_common_ptr) (cinfo), (lvl)))
-
-#endif /* JERROR_H */
diff -NEaurb neo/renderer/jpeg-6/jfdctflt.c neo/renderer/jpeg-6/jfdctflt.c
--- neo/renderer/jpeg-6/jfdctflt.c	2011-12-26 04:15:38 +0000
+++ neo/renderer/jpeg-6/jfdctflt.c	1970-01-01 00:00:00 +0000
@@ -1,168 +0,0 @@
-/*
- * jfdctflt.c
- *
- * Copyright (C) 1994, Thomas G. Lane.
- * This file is part of the Independent JPEG Group's software.
- * For conditions of distribution and use, see the accompanying README file.
- *
- * This file contains a floating-point implementation of the
- * forward DCT (Discrete Cosine Transform).
- *
- * This implementation should be more accurate than either of the integer
- * DCT implementations.  However, it may not give the same results on all
- * machines because of differences in roundoff behavior.  Speed will depend
- * on the hardware's floating point capacity.
- *
- * A 2-D DCT can be done by 1-D DCT on each row followed by 1-D DCT
- * on each column.  Direct algorithms are also available, but they are
- * much more complex and seem not to be any faster when reduced to code.
- *
- * This implementation is based on Arai, Agui, and Nakajima's algorithm for
- * scaled DCT.  Their original paper (Trans. IEICE E-71(11):1095) is in
- * Japanese, but the algorithm is described in the Pennebaker & Mitchell
- * JPEG textbook (see REFERENCES section in file README).  The following code
- * is based directly on figure 4-8 in P&M.
- * While an 8-point DCT cannot be done in less than 11 multiplies, it is
- * possible to arrange the computation so that many of the multiplies are
- * simple scalings of the final outputs.  These multiplies can then be
- * folded into the multiplications or divisions by the JPEG quantization
- * table entries.  The AA&N method leaves only 5 multiplies and 29 adds
- * to be done in the DCT itself.
- * The primary disadvantage of this method is that with a fixed-point
- * implementation, accuracy is lost due to imprecise representation of the
- * scaled quantization values.  However, that problem does not arise if
- * we use floating point arithmetic.
- */
-
-#define JPEG_INTERNALS
-#include "jinclude.h"
-#include "jpeglib.h"
-#include "jdct.h"		/* Private declarations for DCT subsystem */
-
-#ifdef DCT_FLOAT_SUPPORTED
-
-
-/*
- * This module is specialized to the case DCTSIZE = 8.
- */
-
-#if DCTSIZE != 8
-  Sorry, this code only copes with 8x8 DCTs. /* deliberate syntax err */
-#endif
-
-
-/*
- * Perform the forward DCT on one block of samples.
- */
-
-GLOBAL void
-jpeg_fdct_float (FAST_FLOAT * data)
-{
-  FAST_FLOAT tmp0, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, tmp7;
-  FAST_FLOAT tmp10, tmp11, tmp12, tmp13;
-  FAST_FLOAT z1, z2, z3, z4, z5, z11, z13;
-  FAST_FLOAT *dataptr;
-  int ctr;
-
-  /* Pass 1: process rows. */
-
-  dataptr = data;
-  for (ctr = DCTSIZE-1; ctr >= 0; ctr--) {
-    tmp0 = dataptr[0] + dataptr[7];
-    tmp7 = dataptr[0] - dataptr[7];
-    tmp1 = dataptr[1] + dataptr[6];
-    tmp6 = dataptr[1] - dataptr[6];
-    tmp2 = dataptr[2] + dataptr[5];
-    tmp5 = dataptr[2] - dataptr[5];
-    tmp3 = dataptr[3] + dataptr[4];
-    tmp4 = dataptr[3] - dataptr[4];
-    
-    /* Even part */
-    
-    tmp10 = tmp0 + tmp3;	/* phase 2 */
-    tmp13 = tmp0 - tmp3;
-    tmp11 = tmp1 + tmp2;
-    tmp12 = tmp1 - tmp2;
-    
-    dataptr[0] = tmp10 + tmp11; /* phase 3 */
-    dataptr[4] = tmp10 - tmp11;
-    
-    z1 = (tmp12 + tmp13) * ((FAST_FLOAT) 0.707106781); /* c4 */
-    dataptr[2] = tmp13 + z1;	/* phase 5 */
-    dataptr[6] = tmp13 - z1;
-    
-    /* Odd part */
-
-    tmp10 = tmp4 + tmp5;	/* phase 2 */
-    tmp11 = tmp5 + tmp6;
-    tmp12 = tmp6 + tmp7;
-
-    /* The rotator is modified from fig 4-8 to avoid extra negations. */
-    z5 = (tmp10 - tmp12) * ((FAST_FLOAT) 0.382683433); /* c6 */
-    z2 = ((FAST_FLOAT) 0.541196100) * tmp10 + z5; /* c2-c6 */
-    z4 = ((FAST_FLOAT) 1.306562965) * tmp12 + z5; /* c2+c6 */
-    z3 = tmp11 * ((FAST_FLOAT) 0.707106781); /* c4 */
-
-    z11 = tmp7 + z3;		/* phase 5 */
-    z13 = tmp7 - z3;
-
-    dataptr[5] = z13 + z2;	/* phase 6 */
-    dataptr[3] = z13 - z2;
-    dataptr[1] = z11 + z4;
-    dataptr[7] = z11 - z4;
-
-    dataptr += DCTSIZE;		/* advance pointer to next row */
-  }
-
-  /* Pass 2: process columns. */
-
-  dataptr = data;
-  for (ctr = DCTSIZE-1; ctr >= 0; ctr--) {
-    tmp0 = dataptr[DCTSIZE*0] + dataptr[DCTSIZE*7];
-    tmp7 = dataptr[DCTSIZE*0] - dataptr[DCTSIZE*7];
-    tmp1 = dataptr[DCTSIZE*1] + dataptr[DCTSIZE*6];
-    tmp6 = dataptr[DCTSIZE*1] - dataptr[DCTSIZE*6];
-    tmp2 = dataptr[DCTSIZE*2] + dataptr[DCTSIZE*5];
-    tmp5 = dataptr[DCTSIZE*2] - dataptr[DCTSIZE*5];
-    tmp3 = dataptr[DCTSIZE*3] + dataptr[DCTSIZE*4];
-    tmp4 = dataptr[DCTSIZE*3] - dataptr[DCTSIZE*4];
-    
-    /* Even part */
-    
-    tmp10 = tmp0 + tmp3;	/* phase 2 */
-    tmp13 = tmp0 - tmp3;
-    tmp11 = tmp1 + tmp2;
-    tmp12 = tmp1 - tmp2;
-    
-    dataptr[DCTSIZE*0] = tmp10 + tmp11; /* phase 3 */
-    dataptr[DCTSIZE*4] = tmp10 - tmp11;
-    
-    z1 = (tmp12 + tmp13) * ((FAST_FLOAT) 0.707106781); /* c4 */
-    dataptr[DCTSIZE*2] = tmp13 + z1; /* phase 5 */
-    dataptr[DCTSIZE*6] = tmp13 - z1;
-    
-    /* Odd part */
-
-    tmp10 = tmp4 + tmp5;	/* phase 2 */
-    tmp11 = tmp5 + tmp6;
-    tmp12 = tmp6 + tmp7;
-
-    /* The rotator is modified from fig 4-8 to avoid extra negations. */
-    z5 = (tmp10 - tmp12) * ((FAST_FLOAT) 0.382683433); /* c6 */
-    z2 = ((FAST_FLOAT) 0.541196100) * tmp10 + z5; /* c2-c6 */
-    z4 = ((FAST_FLOAT) 1.306562965) * tmp12 + z5; /* c2+c6 */
-    z3 = tmp11 * ((FAST_FLOAT) 0.707106781); /* c4 */
-
-    z11 = tmp7 + z3;		/* phase 5 */
-    z13 = tmp7 - z3;
-
-    dataptr[DCTSIZE*5] = z13 + z2; /* phase 6 */
-    dataptr[DCTSIZE*3] = z13 - z2;
-    dataptr[DCTSIZE*1] = z11 + z4;
-    dataptr[DCTSIZE*7] = z11 - z4;
-
-    dataptr++;			/* advance pointer to next column */
-  }
-}
-
-#endif /* DCT_FLOAT_SUPPORTED */
diff -NEaurb neo/renderer/jpeg-6/jfdctfst.c neo/renderer/jpeg-6/jfdctfst.c
--- neo/renderer/jpeg-6/jfdctfst.c	2011-12-26 04:15:38 +0000
+++ neo/renderer/jpeg-6/jfdctfst.c	1970-01-01 00:00:00 +0000
@@ -1,224 +0,0 @@
-/*
- * jfdctfst.c
- *
- * Copyright (C) 1994, Thomas G. Lane.
- * This file is part of the Independent JPEG Group's software.
- * For conditions of distribution and use, see the accompanying README file.
- *
- * This file contains a fast, not so accurate integer implementation of the
- * forward DCT (Discrete Cosine Transform).
- *
- * A 2-D DCT can be done by 1-D DCT on each row followed by 1-D DCT
- * on each column.  Direct algorithms are also available, but they are
- * much more complex and seem not to be any faster when reduced to code.
- *
- * This implementation is based on Arai, Agui, and Nakajima's algorithm for
- * scaled DCT.  Their original paper (Trans. IEICE E-71(11):1095) is in
- * Japanese, but the algorithm is described in the Pennebaker & Mitchell
- * JPEG textbook (see REFERENCES section in file README).  The following code
- * is based directly on figure 4-8 in P&M.
- * While an 8-point DCT cannot be done in less than 11 multiplies, it is
- * possible to arrange the computation so that many of the multiplies are
- * simple scalings of the final outputs.  These multiplies can then be
- * folded into the multiplications or divisions by the JPEG quantization
- * table entries.  The AA&N method leaves only 5 multiplies and 29 adds
- * to be done in the DCT itself.
- * The primary disadvantage of this method is that with fixed-point math,
- * accuracy is lost due to imprecise representation of the scaled
- * quantization values.  The smaller the quantization table entry, the less
- * precise the scaled value, so this implementation does worse with high-
- * quality-setting files than with low-quality ones.
- */
-
-#define JPEG_INTERNALS
-#include "jinclude.h"
-#include "jpeglib.h"
-#include "jdct.h"		/* Private declarations for DCT subsystem */
-
-#ifdef DCT_IFAST_SUPPORTED
-
-
-/*
- * This module is specialized to the case DCTSIZE = 8.
- */
-
-#if DCTSIZE != 8
-  Sorry, this code only copes with 8x8 DCTs. /* deliberate syntax err */
-#endif
-
-
-/* Scaling decisions are generally the same as in the LL&M algorithm;
- * see jfdctint.c for more details.  However, we choose to descale
- * (right shift) multiplication products as soon as they are formed,
- * rather than carrying additional fractional bits into subsequent additions.
- * This compromises accuracy slightly, but it lets us save a few shifts.
- * More importantly, 16-bit arithmetic is then adequate (for 8-bit samples)
- * everywhere except in the multiplications proper; this saves a good deal
- * of work on 16-bit-int machines.
- *
- * Again to save a few shifts, the intermediate results between pass 1 and
- * pass 2 are not upscaled, but are represented only to integral precision.
- *
- * A final compromise is to represent the multiplicative constants to only
- * 8 fractional bits, rather than 13.  This saves some shifting work on some
- * machines, and may also reduce the cost of multiplication (since there
- * are fewer one-bits in the constants).
- */
-
-#define CONST_BITS  8
-
-
-/* Some C compilers fail to reduce "FIX(constant)" at compile time, thus
- * causing a lot of useless floating-point operations at run time.
- * To get around this we use the following pre-calculated constants.
- * If you change CONST_BITS you may want to add appropriate values.
- * (With a reasonable C compiler, you can just rely on the FIX() macro...)
- */
-
-#if CONST_BITS == 8
-#define FIX_0_382683433  ((INT32)   98)		/* FIX(0.382683433) */
-#define FIX_0_541196100  ((INT32)  139)		/* FIX(0.541196100) */
-#define FIX_0_707106781  ((INT32)  181)		/* FIX(0.707106781) */
-#define FIX_1_306562965  ((INT32)  334)		/* FIX(1.306562965) */
-#else
-#define FIX_0_382683433  FIX(0.382683433)
-#define FIX_0_541196100  FIX(0.541196100)
-#define FIX_0_707106781  FIX(0.707106781)
-#define FIX_1_306562965  FIX(1.306562965)
-#endif
-
-
-/* We can gain a little more speed, with a further compromise in accuracy,
- * by omitting the addition in a descaling shift.  This yields an incorrectly
- * rounded result half the time...
- */
-
-#ifndef USE_ACCURATE_ROUNDING
-#undef DESCALE
-#define DESCALE(x,n)  RIGHT_SHIFT(x, n)
-#endif
-
-
-/* Multiply a DCTELEM variable by an INT32 constant, and immediately
- * descale to yield a DCTELEM result.
- */
-
-#define MULTIPLY(var,const)  ((DCTELEM) DESCALE((var) * (const), CONST_BITS))
-
-
-/*
- * Perform the forward DCT on one block of samples.
- */
-
-GLOBAL void
-jpeg_fdct_ifast (DCTELEM * data)
-{
-  DCTELEM tmp0, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, tmp7;
-  DCTELEM tmp10, tmp11, tmp12, tmp13;
-  DCTELEM z1, z2, z3, z4, z5, z11, z13;
-  DCTELEM *dataptr;
-  int ctr;
-  SHIFT_TEMPS
-
-  /* Pass 1: process rows. */
-
-  dataptr = data;
-  for (ctr = DCTSIZE-1; ctr >= 0; ctr--) {
-    tmp0 = dataptr[0] + dataptr[7];
-    tmp7 = dataptr[0] - dataptr[7];
-    tmp1 = dataptr[1] + dataptr[6];
-    tmp6 = dataptr[1] - dataptr[6];
-    tmp2 = dataptr[2] + dataptr[5];
-    tmp5 = dataptr[2] - dataptr[5];
-    tmp3 = dataptr[3] + dataptr[4];
-    tmp4 = dataptr[3] - dataptr[4];
-    
-    /* Even part */
-    
-    tmp10 = tmp0 + tmp3;	/* phase 2 */
-    tmp13 = tmp0 - tmp3;
-    tmp11 = tmp1 + tmp2;
-    tmp12 = tmp1 - tmp2;
-    
-    dataptr[0] = tmp10 + tmp11; /* phase 3 */
-    dataptr[4] = tmp10 - tmp11;
-    
-    z1 = MULTIPLY(tmp12 + tmp13, FIX_0_707106781); /* c4 */
-    dataptr[2] = tmp13 + z1;	/* phase 5 */
-    dataptr[6] = tmp13 - z1;
-    
-    /* Odd part */
-
-    tmp10 = tmp4 + tmp5;	/* phase 2 */
-    tmp11 = tmp5 + tmp6;
-    tmp12 = tmp6 + tmp7;
-
-    /* The rotator is modified from fig 4-8 to avoid extra negations. */
-    z5 = MULTIPLY(tmp10 - tmp12, FIX_0_382683433); /* c6 */
-    z2 = MULTIPLY(tmp10, FIX_0_541196100) + z5; /* c2-c6 */
-    z4 = MULTIPLY(tmp12, FIX_1_306562965) + z5; /* c2+c6 */
-    z3 = MULTIPLY(tmp11, FIX_0_707106781); /* c4 */
-
-    z11 = tmp7 + z3;		/* phase 5 */
-    z13 = tmp7 - z3;
-
-    dataptr[5] = z13 + z2;	/* phase 6 */
-    dataptr[3] = z13 - z2;
-    dataptr[1] = z11 + z4;
-    dataptr[7] = z11 - z4;
-
-    dataptr += DCTSIZE;		/* advance pointer to next row */
-  }
-
-  /* Pass 2: process columns. */
-
-  dataptr = data;
-  for (ctr = DCTSIZE-1; ctr >= 0; ctr--) {
-    tmp0 = dataptr[DCTSIZE*0] + dataptr[DCTSIZE*7];
-    tmp7 = dataptr[DCTSIZE*0] - dataptr[DCTSIZE*7];
-    tmp1 = dataptr[DCTSIZE*1] + dataptr[DCTSIZE*6];
-    tmp6 = dataptr[DCTSIZE*1] - dataptr[DCTSIZE*6];
-    tmp2 = dataptr[DCTSIZE*2] + dataptr[DCTSIZE*5];
-    tmp5 = dataptr[DCTSIZE*2] - dataptr[DCTSIZE*5];
-    tmp3 = dataptr[DCTSIZE*3] + dataptr[DCTSIZE*4];
-    tmp4 = dataptr[DCTSIZE*3] - dataptr[DCTSIZE*4];
-    
-    /* Even part */
-    
-    tmp10 = tmp0 + tmp3;	/* phase 2 */
-    tmp13 = tmp0 - tmp3;
-    tmp11 = tmp1 + tmp2;
-    tmp12 = tmp1 - tmp2;
-    
-    dataptr[DCTSIZE*0] = tmp10 + tmp11; /* phase 3 */
-    dataptr[DCTSIZE*4] = tmp10 - tmp11;
-    
-    z1 = MULTIPLY(tmp12 + tmp13, FIX_0_707106781); /* c4 */
-    dataptr[DCTSIZE*2] = tmp13 + z1; /* phase 5 */
-    dataptr[DCTSIZE*6] = tmp13 - z1;
-    
-    /* Odd part */
-
-    tmp10 = tmp4 + tmp5;	/* phase 2 */
-    tmp11 = tmp5 + tmp6;
-    tmp12 = tmp6 + tmp7;
-
-    /* The rotator is modified from fig 4-8 to avoid extra negations. */
-    z5 = MULTIPLY(tmp10 - tmp12, FIX_0_382683433); /* c6 */
-    z2 = MULTIPLY(tmp10, FIX_0_541196100) + z5; /* c2-c6 */
-    z4 = MULTIPLY(tmp12, FIX_1_306562965) + z5; /* c2+c6 */
-    z3 = MULTIPLY(tmp11, FIX_0_707106781); /* c4 */
-
-    z11 = tmp7 + z3;		/* phase 5 */
-    z13 = tmp7 - z3;
-
-    dataptr[DCTSIZE*5] = z13 + z2; /* phase 6 */
-    dataptr[DCTSIZE*3] = z13 - z2;
-    dataptr[DCTSIZE*1] = z11 + z4;
-    dataptr[DCTSIZE*7] = z11 - z4;
-
-    dataptr++;			/* advance pointer to next column */
-  }
-}
-
-#endif /* DCT_IFAST_SUPPORTED */
diff -NEaurb neo/renderer/jpeg-6/jfdctint.c neo/renderer/jpeg-6/jfdctint.c
--- neo/renderer/jpeg-6/jfdctint.c	2011-12-26 04:15:38 +0000
+++ neo/renderer/jpeg-6/jfdctint.c	1970-01-01 00:00:00 +0000
@@ -1,283 +0,0 @@
-/*
- * jfdctint.c
- *
- * Copyright (C) 1991-1994, Thomas G. Lane.
- * This file is part of the Independent JPEG Group's software.
- * For conditions of distribution and use, see the accompanying README file.
- *
- * This file contains a slow-but-accurate integer implementation of the
- * forward DCT (Discrete Cosine Transform).
- *
- * A 2-D DCT can be done by 1-D DCT on each row followed by 1-D DCT
- * on each column.  Direct algorithms are also available, but they are
- * much more complex and seem not to be any faster when reduced to code.
- *
- * This implementation is based on an algorithm described in
- *   C. Loeffler, A. Ligtenberg and G. Moschytz, "Practical Fast 1-D DCT
- *   Algorithms with 11 Multiplications", Proc. Int'l. Conf. on Acoustics,
- *   Speech, and Signal Processing 1989 (ICASSP '89), pp. 988-991.
- * The primary algorithm described there uses 11 multiplies and 29 adds.
- * We use their alternate method with 12 multiplies and 32 adds.
- * The advantage of this method is that no data path contains more than one
- * multiplication; this allows a very simple and accurate implementation in
- * scaled fixed-point arithmetic, with a minimal number of shifts.
- */
-
-#define JPEG_INTERNALS
-#include "jinclude.h"
-#include "jpeglib.h"
-#include "jdct.h"		/* Private declarations for DCT subsystem */
-
-#ifdef DCT_ISLOW_SUPPORTED
-
-
-/*
- * This module is specialized to the case DCTSIZE = 8.
- */
-
-#if DCTSIZE != 8
-  Sorry, this code only copes with 8x8 DCTs. /* deliberate syntax err */
-#endif
-
-
-/*
- * The poop on this scaling stuff is as follows:
- *
- * Each 1-D DCT step produces outputs which are a factor of sqrt(N)
- * larger than the true DCT outputs.  The final outputs are therefore
- * a factor of N larger than desired; since N=8 this can be cured by
- * a simple right shift at the end of the algorithm.  The advantage of
- * this arrangement is that we save two multiplications per 1-D DCT,
- * because the y0 and y4 outputs need not be divided by sqrt(N).
- * In the IJG code, this factor of 8 is removed by the quantization step
- * (in jcdctmgr.c), NOT in this module.
- *
- * We have to do addition and subtraction of the integer inputs, which
- * is no problem, and multiplication by fractional constants, which is
- * a problem to do in integer arithmetic.  We multiply all the constants
- * by CONST_SCALE and convert them to integer constants (thus retaining
- * CONST_BITS bits of precision in the constants).  After doing a
- * multiplication we have to divide the product by CONST_SCALE, with proper
- * rounding, to produce the correct output.  This division can be done
- * cheaply as a right shift of CONST_BITS bits.  We postpone shifting
- * as long as possible so that partial sums can be added together with
- * full fractional precision.
- *
- * The outputs of the first pass are scaled up by PASS1_BITS bits so that
- * they are represented to better-than-integral precision.  These outputs
- * require BITS_IN_JSAMPLE + PASS1_BITS + 3 bits; this fits in a 16-bit word
- * with the recommended scaling.  (For 12-bit sample data, the intermediate
- * array is INT32 anyway.)
- *
- * To avoid overflow of the 32-bit intermediate results in pass 2, we must
- * have BITS_IN_JSAMPLE + CONST_BITS + PASS1_BITS <= 26.  Error analysis
- * shows that the values given below are the most effective.
- */
-
-#if BITS_IN_JSAMPLE == 8
-#define CONST_BITS  13
-#define PASS1_BITS  2
-#else
-#define CONST_BITS  13
-#define PASS1_BITS  1		/* lose a little precision to avoid overflow */
-#endif
-
-/* Some C compilers fail to reduce "FIX(constant)" at compile time, thus
- * causing a lot of useless floating-point operations at run time.
- * To get around this we use the following pre-calculated constants.
- * If you change CONST_BITS you may want to add appropriate values.
- * (With a reasonable C compiler, you can just rely on the FIX() macro...)
- */
-
-#if CONST_BITS == 13
-#define FIX_0_298631336  ((INT32)  2446)	/* FIX(0.298631336) */
-#define FIX_0_390180644  ((INT32)  3196)	/* FIX(0.390180644) */
-#define FIX_0_541196100  ((INT32)  4433)	/* FIX(0.541196100) */
-#define FIX_0_765366865  ((INT32)  6270)	/* FIX(0.765366865) */
-#define FIX_0_899976223  ((INT32)  7373)	/* FIX(0.899976223) */
-#define FIX_1_175875602  ((INT32)  9633)	/* FIX(1.175875602) */
-#define FIX_1_501321110  ((INT32)  12299)	/* FIX(1.501321110) */
-#define FIX_1_847759065  ((INT32)  15137)	/* FIX(1.847759065) */
-#define FIX_1_961570560  ((INT32)  16069)	/* FIX(1.961570560) */
-#define FIX_2_053119869  ((INT32)  16819)	/* FIX(2.053119869) */
-#define FIX_2_562915447  ((INT32)  20995)	/* FIX(2.562915447) */
-#define FIX_3_072711026  ((INT32)  25172)	/* FIX(3.072711026) */
-#else
-#define FIX_0_298631336  FIX(0.298631336)
-#define FIX_0_390180644  FIX(0.390180644)
-#define FIX_0_541196100  FIX(0.541196100)
-#define FIX_0_765366865  FIX(0.765366865)
-#define FIX_0_899976223  FIX(0.899976223)
-#define FIX_1_175875602  FIX(1.175875602)
-#define FIX_1_501321110  FIX(1.501321110)
-#define FIX_1_847759065  FIX(1.847759065)
-#define FIX_1_961570560  FIX(1.961570560)
-#define FIX_2_053119869  FIX(2.053119869)
-#define FIX_2_562915447  FIX(2.562915447)
-#define FIX_3_072711026  FIX(3.072711026)
-#endif
-
-
-/* Multiply an INT32 variable by an INT32 constant to yield an INT32 result.
- * For 8-bit samples with the recommended scaling, all the variable
- * and constant values involved are no more than 16 bits wide, so a
- * 16x16->32 bit multiply can be used instead of a full 32x32 multiply.
- * For 12-bit samples, a full 32-bit multiplication will be needed.
- */
-
-#if BITS_IN_JSAMPLE == 8
-#define MULTIPLY(var,const)  MULTIPLY16C16(var,const)
-#else
-#define MULTIPLY(var,const)  ((var) * (const))
-#endif
-
-
-/*
- * Perform the forward DCT on one block of samples.
- */
-
-GLOBAL void
-jpeg_fdct_islow (DCTELEM * data)
-{
-  INT32 tmp0, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, tmp7;
-  INT32 tmp10, tmp11, tmp12, tmp13;
-  INT32 z1, z2, z3, z4, z5;
-  DCTELEM *dataptr;
-  int ctr;
-  SHIFT_TEMPS
-
-  /* Pass 1: process rows. */
-  /* Note results are scaled up by sqrt(8) compared to a true DCT; */
-  /* furthermore, we scale the results by 2**PASS1_BITS. */
-
-  dataptr = data;
-  for (ctr = DCTSIZE-1; ctr >= 0; ctr--) {
-    tmp0 = dataptr[0] + dataptr[7];
-    tmp7 = dataptr[0] - dataptr[7];
-    tmp1 = dataptr[1] + dataptr[6];
-    tmp6 = dataptr[1] - dataptr[6];
-    tmp2 = dataptr[2] + dataptr[5];
-    tmp5 = dataptr[2] - dataptr[5];
-    tmp3 = dataptr[3] + dataptr[4];
-    tmp4 = dataptr[3] - dataptr[4];
-    
-    /* Even part per LL&M figure 1 --- note that published figure is faulty;
-     * rotator "sqrt(2)*c1" should be "sqrt(2)*c6".
-     */
-    
-    tmp10 = tmp0 + tmp3;
-    tmp13 = tmp0 - tmp3;
-    tmp11 = tmp1 + tmp2;
-    tmp12 = tmp1 - tmp2;
-    
-    dataptr[0] = (DCTELEM) ((tmp10 + tmp11) << PASS1_BITS);
-    dataptr[4] = (DCTELEM) ((tmp10 - tmp11) << PASS1_BITS);
-    
-    z1 = MULTIPLY(tmp12 + tmp13, FIX_0_541196100);
-    dataptr[2] = (DCTELEM) DESCALE(z1 + MULTIPLY(tmp13, FIX_0_765366865),
-				   CONST_BITS-PASS1_BITS);
-    dataptr[6] = (DCTELEM) DESCALE(z1 + MULTIPLY(tmp12, - FIX_1_847759065),
-				   CONST_BITS-PASS1_BITS);
-    
-    /* Odd part per figure 8 --- note paper omits factor of sqrt(2).
-     * cK represents cos(K*pi/16).
-     * i0..i3 in the paper are tmp4..tmp7 here.
-     */
-    
-    z1 = tmp4 + tmp7;
-    z2 = tmp5 + tmp6;
-    z3 = tmp4 + tmp6;
-    z4 = tmp5 + tmp7;
-    z5 = MULTIPLY(z3 + z4, FIX_1_175875602); /* sqrt(2) * c3 */
-    
-    tmp4 = MULTIPLY(tmp4, FIX_0_298631336); /* sqrt(2) * (-c1+c3+c5-c7) */
-    tmp5 = MULTIPLY(tmp5, FIX_2_053119869); /* sqrt(2) * ( c1+c3-c5+c7) */
-    tmp6 = MULTIPLY(tmp6, FIX_3_072711026); /* sqrt(2) * ( c1+c3+c5-c7) */
-    tmp7 = MULTIPLY(tmp7, FIX_1_501321110); /* sqrt(2) * ( c1+c3-c5-c7) */
-    z1 = MULTIPLY(z1, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
-    z2 = MULTIPLY(z2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
-    z3 = MULTIPLY(z3, - FIX_1_961570560); /* sqrt(2) * (-c3-c5) */
-    z4 = MULTIPLY(z4, - FIX_0_390180644); /* sqrt(2) * (c5-c3) */
-    
-    z3 += z5;
-    z4 += z5;
-    
-    dataptr[7] = (DCTELEM) DESCALE(tmp4 + z1 + z3, CONST_BITS-PASS1_BITS);
-    dataptr[5] = (DCTELEM) DESCALE(tmp5 + z2 + z4, CONST_BITS-PASS1_BITS);
-    dataptr[3] = (DCTELEM) DESCALE(tmp6 + z2 + z3, CONST_BITS-PASS1_BITS);
-    dataptr[1] = (DCTELEM) DESCALE(tmp7 + z1 + z4, CONST_BITS-PASS1_BITS);
-    
-    dataptr += DCTSIZE;		/* advance pointer to next row */
-  }
-
-  /* Pass 2: process columns.
-   * We remove the PASS1_BITS scaling, but leave the results scaled up
-   * by an overall factor of 8.
-   */
-
-  dataptr = data;
-  for (ctr = DCTSIZE-1; ctr >= 0; ctr--) {
-    tmp0 = dataptr[DCTSIZE*0] + dataptr[DCTSIZE*7];
-    tmp7 = dataptr[DCTSIZE*0] - dataptr[DCTSIZE*7];
-    tmp1 = dataptr[DCTSIZE*1] + dataptr[DCTSIZE*6];
-    tmp6 = dataptr[DCTSIZE*1] - dataptr[DCTSIZE*6];
-    tmp2 = dataptr[DCTSIZE*2] + dataptr[DCTSIZE*5];
-    tmp5 = dataptr[DCTSIZE*2] - dataptr[DCTSIZE*5];
-    tmp3 = dataptr[DCTSIZE*3] + dataptr[DCTSIZE*4];
-    tmp4 = dataptr[DCTSIZE*3] - dataptr[DCTSIZE*4];
-    
-    /* Even part per LL&M figure 1 --- note that published figure is faulty;
-     * rotator "sqrt(2)*c1" should be "sqrt(2)*c6".
-     */
-    
-    tmp10 = tmp0 + tmp3;
-    tmp13 = tmp0 - tmp3;
-    tmp11 = tmp1 + tmp2;
-    tmp12 = tmp1 - tmp2;
-    
-    dataptr[DCTSIZE*0] = (DCTELEM) DESCALE(tmp10 + tmp11, PASS1_BITS);
-    dataptr[DCTSIZE*4] = (DCTELEM) DESCALE(tmp10 - tmp11, PASS1_BITS);
-    
-    z1 = MULTIPLY(tmp12 + tmp13, FIX_0_541196100);
-    dataptr[DCTSIZE*2] = (DCTELEM) DESCALE(z1 + MULTIPLY(tmp13, FIX_0_765366865),
-					   CONST_BITS+PASS1_BITS);
-    dataptr[DCTSIZE*6] = (DCTELEM) DESCALE(z1 + MULTIPLY(tmp12, - FIX_1_847759065),
-					   CONST_BITS+PASS1_BITS);
-    
-    /* Odd part per figure 8 --- note paper omits factor of sqrt(2).
-     * cK represents cos(K*pi/16).
-     * i0..i3 in the paper are tmp4..tmp7 here.
-     */
-    
-    z1 = tmp4 + tmp7;
-    z2 = tmp5 + tmp6;
-    z3 = tmp4 + tmp6;
-    z4 = tmp5 + tmp7;
-    z5 = MULTIPLY(z3 + z4, FIX_1_175875602); /* sqrt(2) * c3 */
-    
-    tmp4 = MULTIPLY(tmp4, FIX_0_298631336); /* sqrt(2) * (-c1+c3+c5-c7) */
-    tmp5 = MULTIPLY(tmp5, FIX_2_053119869); /* sqrt(2) * ( c1+c3-c5+c7) */
-    tmp6 = MULTIPLY(tmp6, FIX_3_072711026); /* sqrt(2) * ( c1+c3+c5-c7) */
-    tmp7 = MULTIPLY(tmp7, FIX_1_501321110); /* sqrt(2) * ( c1+c3-c5-c7) */
-    z1 = MULTIPLY(z1, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
-    z2 = MULTIPLY(z2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
-    z3 = MULTIPLY(z3, - FIX_1_961570560); /* sqrt(2) * (-c3-c5) */
-    z4 = MULTIPLY(z4, - FIX_0_390180644); /* sqrt(2) * (c5-c3) */
-    
-    z3 += z5;
-    z4 += z5;
-    
-    dataptr[DCTSIZE*7] = (DCTELEM) DESCALE(tmp4 + z1 + z3,
-					   CONST_BITS+PASS1_BITS);
-    dataptr[DCTSIZE*5] = (DCTELEM) DESCALE(tmp5 + z2 + z4,
-					   CONST_BITS+PASS1_BITS);
-    dataptr[DCTSIZE*3] = (DCTELEM) DESCALE(tmp6 + z2 + z3,
-					   CONST_BITS+PASS1_BITS);
-    dataptr[DCTSIZE*1] = (DCTELEM) DESCALE(tmp7 + z1 + z4,
-					   CONST_BITS+PASS1_BITS);
-    
-    dataptr++;			/* advance pointer to next column */
-  }
-}
-
-#endif /* DCT_ISLOW_SUPPORTED */
diff -NEaurb neo/renderer/jpeg-6/jidctflt.c neo/renderer/jpeg-6/jidctflt.c
--- neo/renderer/jpeg-6/jidctflt.c	2011-12-26 04:15:38 +0000
+++ neo/renderer/jpeg-6/jidctflt.c	1970-01-01 00:00:00 +0000
@@ -1,241 +0,0 @@
-/*
- * jidctflt.c
- *
- * Copyright (C) 1994, Thomas G. Lane.
- * This file is part of the Independent JPEG Group's software.
- * For conditions of distribution and use, see the accompanying README file.
- *
- * This file contains a floating-point implementation of the
- * inverse DCT (Discrete Cosine Transform).  In the IJG code, this routine
- * must also perform dequantization of the input coefficients.
- *
- * This implementation should be more accurate than either of the integer
- * IDCT implementations.  However, it may not give the same results on all
- * machines because of differences in roundoff behavior.  Speed will depend
- * on the hardware's floating point capacity.
- *
- * A 2-D IDCT can be done by 1-D IDCT on each column followed by 1-D IDCT
- * on each row (or vice versa, but it's more convenient to emit a row at
- * a time).  Direct algorithms are also available, but they are much more
- * complex and seem not to be any faster when reduced to code.
- *
- * This implementation is based on Arai, Agui, and Nakajima's algorithm for
- * scaled DCT.  Their original paper (Trans. IEICE E-71(11):1095) is in
- * Japanese, but the algorithm is described in the Pennebaker & Mitchell
- * JPEG textbook (see REFERENCES section in file README).  The following code
- * is based directly on figure 4-8 in P&M.
- * While an 8-point DCT cannot be done in less than 11 multiplies, it is
- * possible to arrange the computation so that many of the multiplies are
- * simple scalings of the final outputs.  These multiplies can then be
- * folded into the multiplications or divisions by the JPEG quantization
- * table entries.  The AA&N method leaves only 5 multiplies and 29 adds
- * to be done in the DCT itself.
- * The primary disadvantage of this method is that with a fixed-point
- * implementation, accuracy is lost due to imprecise representation of the
- * scaled quantization values.  However, that problem does not arise if
- * we use floating point arithmetic.
- */
-
-#define JPEG_INTERNALS
-#include "jinclude.h"
-#include "jpeglib.h"
-#include "jdct.h"		/* Private declarations for DCT subsystem */
-
-#ifdef DCT_FLOAT_SUPPORTED
-
-
-/*
- * This module is specialized to the case DCTSIZE = 8.
- */
-
-#if DCTSIZE != 8
-  Sorry, this code only copes with 8x8 DCTs. /* deliberate syntax err */
-#endif
-
-
-/* Dequantize a coefficient by multiplying it by the multiplier-table
- * entry; produce a float result.
- */
-
-#define DEQUANTIZE(coef,quantval)  (((FAST_FLOAT) (coef)) * (quantval))
-
-
-/*
- * Perform dequantization and inverse DCT on one block of coefficients.
- */
-
-GLOBAL void
-jpeg_idct_float (j_decompress_ptr cinfo, jpeg_component_info * compptr,
-		 JCOEFPTR coef_block,
-		 JSAMPARRAY output_buf, JDIMENSION output_col)
-{
-  FAST_FLOAT tmp0, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, tmp7;
-  FAST_FLOAT tmp10, tmp11, tmp12, tmp13;
-  FAST_FLOAT z5, z10, z11, z12, z13;
-  JCOEFPTR inptr;
-  FLOAT_MULT_TYPE * quantptr;
-  FAST_FLOAT * wsptr;
-  JSAMPROW outptr;
-  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
-  int ctr;
-  FAST_FLOAT workspace[DCTSIZE2]; /* buffers data between passes */
-  SHIFT_TEMPS
-
-  /* Pass 1: process columns from input, store into work array. */
-
-  inptr = coef_block;
-  quantptr = (FLOAT_MULT_TYPE *) compptr->dct_table;
-  wsptr = workspace;
-  for (ctr = DCTSIZE; ctr > 0; ctr--) {
-    /* Due to quantization, we will usually find that many of the input
-     * coefficients are zero, especially the AC terms.  We can exploit this
-     * by short-circuiting the IDCT calculation for any column in which all
-     * the AC terms are zero.  In that case each output is equal to the
-     * DC coefficient (with scale factor as needed).
-     * With typical images and quantization tables, half or more of the
-     * column DCT calculations can be simplified this way.
-     */
-    
-    if ((inptr[DCTSIZE*1] | inptr[DCTSIZE*2] | inptr[DCTSIZE*3] |
-	 inptr[DCTSIZE*4] | inptr[DCTSIZE*5] | inptr[DCTSIZE*6] |
-	 inptr[DCTSIZE*7]) == 0) {
-      /* AC terms all zero */
-      FAST_FLOAT dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
-      
-      wsptr[DCTSIZE*0] = dcval;
-      wsptr[DCTSIZE*1] = dcval;
-      wsptr[DCTSIZE*2] = dcval;
-      wsptr[DCTSIZE*3] = dcval;
-      wsptr[DCTSIZE*4] = dcval;
-      wsptr[DCTSIZE*5] = dcval;
-      wsptr[DCTSIZE*6] = dcval;
-      wsptr[DCTSIZE*7] = dcval;
-      
-      inptr++;			/* advance pointers to next column */
-      quantptr++;
-      wsptr++;
-      continue;
-    }
-    
-    /* Even part */
-
-    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
-    tmp1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
-    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
-    tmp3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
-
-    tmp10 = tmp0 + tmp2;	/* phase 3 */
-    tmp11 = tmp0 - tmp2;
-
-    tmp13 = tmp1 + tmp3;	/* phases 5-3 */
-    tmp12 = (tmp1 - tmp3) * ((FAST_FLOAT) 1.414213562) - tmp13; /* 2*c4 */
-
-    tmp0 = tmp10 + tmp13;	/* phase 2 */
-    tmp3 = tmp10 - tmp13;
-    tmp1 = tmp11 + tmp12;
-    tmp2 = tmp11 - tmp12;
-    
-    /* Odd part */
-
-    tmp4 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
-    tmp5 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
-    tmp6 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
-    tmp7 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
-
-    z13 = tmp6 + tmp5;		/* phase 6 */
-    z10 = tmp6 - tmp5;
-    z11 = tmp4 + tmp7;
-    z12 = tmp4 - tmp7;
-
-    tmp7 = z11 + z13;		/* phase 5 */
-    tmp11 = (z11 - z13) * ((FAST_FLOAT) 1.414213562); /* 2*c4 */
-
-    z5 = (z10 + z12) * ((FAST_FLOAT) 1.847759065); /* 2*c2 */
-    tmp10 = ((FAST_FLOAT) 1.082392200) * z12 - z5; /* 2*(c2-c6) */
-    tmp12 = ((FAST_FLOAT) -2.613125930) * z10 + z5; /* -2*(c2+c6) */
-
-    tmp6 = tmp12 - tmp7;	/* phase 2 */
-    tmp5 = tmp11 - tmp6;
-    tmp4 = tmp10 + tmp5;
-
-    wsptr[DCTSIZE*0] = tmp0 + tmp7;
-    wsptr[DCTSIZE*7] = tmp0 - tmp7;
-    wsptr[DCTSIZE*1] = tmp1 + tmp6;
-    wsptr[DCTSIZE*6] = tmp1 - tmp6;
-    wsptr[DCTSIZE*2] = tmp2 + tmp5;
-    wsptr[DCTSIZE*5] = tmp2 - tmp5;
-    wsptr[DCTSIZE*4] = tmp3 + tmp4;
-    wsptr[DCTSIZE*3] = tmp3 - tmp4;
-
-    inptr++;			/* advance pointers to next column */
-    quantptr++;
-    wsptr++;
-  }
-  
-  /* Pass 2: process rows from work array, store into output array. */
-  /* Note that we must descale the results by a factor of 8 == 2**3. */
-
-  wsptr = workspace;
-  for (ctr = 0; ctr < DCTSIZE; ctr++) {
-    outptr = output_buf[ctr] + output_col;
-    /* Rows of zeroes can be exploited in the same way as we did with columns.
-     * However, the column calculation has created many nonzero AC terms, so
-     * the simplification applies less often (typically 5% to 10% of the time).
-     * And testing floats for zero is relatively expensive, so we don't bother.
-     */
-    
-    /* Even part */
-
-    tmp10 = wsptr[0] + wsptr[4];
-    tmp11 = wsptr[0] - wsptr[4];
-
-    tmp13 = wsptr[2] + wsptr[6];
-    tmp12 = (wsptr[2] - wsptr[6]) * ((FAST_FLOAT) 1.414213562) - tmp13;
-
-    tmp0 = tmp10 + tmp13;
-    tmp3 = tmp10 - tmp13;
-    tmp1 = tmp11 + tmp12;
-    tmp2 = tmp11 - tmp12;
-
-    /* Odd part */
-
-    z13 = wsptr[5] + wsptr[3];
-    z10 = wsptr[5] - wsptr[3];
-    z11 = wsptr[1] + wsptr[7];
-    z12 = wsptr[1] - wsptr[7];
-
-    tmp7 = z11 + z13;
-    tmp11 = (z11 - z13) * ((FAST_FLOAT) 1.414213562);
-
-    z5 = (z10 + z12) * ((FAST_FLOAT) 1.847759065); /* 2*c2 */
-    tmp10 = ((FAST_FLOAT) 1.082392200) * z12 - z5; /* 2*(c2-c6) */
-    tmp12 = ((FAST_FLOAT) -2.613125930) * z10 + z5; /* -2*(c2+c6) */
-
-    tmp6 = tmp12 - tmp7;
-    tmp5 = tmp11 - tmp6;
-    tmp4 = tmp10 + tmp5;
-
-    /* Final output stage: scale down by a factor of 8 and range-limit */
-
-    outptr[0] = range_limit[(int) DESCALE((INT32) (tmp0 + tmp7), 3)
-			    & RANGE_MASK];
-    outptr[7] = range_limit[(int) DESCALE((INT32) (tmp0 - tmp7), 3)
-			    & RANGE_MASK];
-    outptr[1] = range_limit[(int) DESCALE((INT32) (tmp1 + tmp6), 3)
-			    & RANGE_MASK];
-    outptr[6] = range_limit[(int) DESCALE((INT32) (tmp1 - tmp6), 3)
-			    & RANGE_MASK];
-    outptr[2] = range_limit[(int) DESCALE((INT32) (tmp2 + tmp5), 3)
-			    & RANGE_MASK];
-    outptr[5] = range_limit[(int) DESCALE((INT32) (tmp2 - tmp5), 3)
-			    & RANGE_MASK];
-    outptr[4] = range_limit[(int) DESCALE((INT32) (tmp3 + tmp4), 3)
-			    & RANGE_MASK];
-    outptr[3] = range_limit[(int) DESCALE((INT32) (tmp3 - tmp4), 3)
-			    & RANGE_MASK];
-    
-    wsptr += DCTSIZE;		/* advance pointer to next row */
-  }
-}
-
-#endif /* DCT_FLOAT_SUPPORTED */
diff -NEaurb neo/renderer/jpeg-6/jidctfst.c neo/renderer/jpeg-6/jidctfst.c
--- neo/renderer/jpeg-6/jidctfst.c	2011-12-26 04:15:38 +0000
+++ neo/renderer/jpeg-6/jidctfst.c	1970-01-01 00:00:00 +0000
@@ -1,367 +0,0 @@
-/*
- * jidctfst.c
- *
- * Copyright (C) 1994-1995, Thomas G. Lane.
- * This file is part of the Independent JPEG Group's software.
- * For conditions of distribution and use, see the accompanying README file.
- *
- * This file contains a fast, not so accurate integer implementation of the
- * inverse DCT (Discrete Cosine Transform).  In the IJG code, this routine
- * must also perform dequantization of the input coefficients.
- *
- * A 2-D IDCT can be done by 1-D IDCT on each column followed by 1-D IDCT
- * on each row (or vice versa, but it's more convenient to emit a row at
- * a time).  Direct algorithms are also available, but they are much more
- * complex and seem not to be any faster when reduced to code.
- *
- * This implementation is based on Arai, Agui, and Nakajima's algorithm for
- * scaled DCT.  Their original paper (Trans. IEICE E-71(11):1095) is in
- * Japanese, but the algorithm is described in the Pennebaker & Mitchell
- * JPEG textbook (see REFERENCES section in file README).  The following code
- * is based directly on figure 4-8 in P&M.
- * While an 8-point DCT cannot be done in less than 11 multiplies, it is
- * possible to arrange the computation so that many of the multiplies are
- * simple scalings of the final outputs.  These multiplies can then be
- * folded into the multiplications or divisions by the JPEG quantization
- * table entries.  The AA&N method leaves only 5 multiplies and 29 adds
- * to be done in the DCT itself.
- * The primary disadvantage of this method is that with fixed-point math,
- * accuracy is lost due to imprecise representation of the scaled
- * quantization values.  The smaller the quantization table entry, the less
- * precise the scaled value, so this implementation does worse with high-
- * quality-setting files than with low-quality ones.
- */
-
-#define JPEG_INTERNALS
-#include "jinclude.h"
-#include "jpeglib.h"
-#include "jdct.h"		/* Private declarations for DCT subsystem */
-
-#ifdef DCT_IFAST_SUPPORTED
-
-
-/*
- * This module is specialized to the case DCTSIZE = 8.
- */
-
-#if DCTSIZE != 8
-  Sorry, this code only copes with 8x8 DCTs. /* deliberate syntax err */
-#endif
-
-
-/* Scaling decisions are generally the same as in the LL&M algorithm;
- * see jidctint.c for more details.  However, we choose to descale
- * (right shift) multiplication products as soon as they are formed,
- * rather than carrying additional fractional bits into subsequent additions.
- * This compromises accuracy slightly, but it lets us save a few shifts.
- * More importantly, 16-bit arithmetic is then adequate (for 8-bit samples)
- * everywhere except in the multiplications proper; this saves a good deal
- * of work on 16-bit-int machines.
- *
- * The dequantized coefficients are not integers because the AA&N scaling
- * factors have been incorporated.  We represent them scaled up by PASS1_BITS,
- * so that the first and second IDCT rounds have the same input scaling.
- * For 8-bit JSAMPLEs, we choose IFAST_SCALE_BITS = PASS1_BITS so as to
- * avoid a descaling shift; this compromises accuracy rather drastically
- * for small quantization table entries, but it saves a lot of shifts.
- * For 12-bit JSAMPLEs, there's no hope of using 16x16 multiplies anyway,
- * so we use a much larger scaling factor to preserve accuracy.
- *
- * A final compromise is to represent the multiplicative constants to only
- * 8 fractional bits, rather than 13.  This saves some shifting work on some
- * machines, and may also reduce the cost of multiplication (since there
- * are fewer one-bits in the constants).
- */
-
-#if BITS_IN_JSAMPLE == 8
-#define CONST_BITS  8
-#define PASS1_BITS  2
-#else
-#define CONST_BITS  8
-#define PASS1_BITS  1		/* lose a little precision to avoid overflow */
-#endif
-
-/* Some C compilers fail to reduce "FIX(constant)" at compile time, thus
- * causing a lot of useless floating-point operations at run time.
- * To get around this we use the following pre-calculated constants.
- * If you change CONST_BITS you may want to add appropriate values.
- * (With a reasonable C compiler, you can just rely on the FIX() macro...)
- */
-
-#if CONST_BITS == 8
-#define FIX_1_082392200  ((INT32)  277)		/* FIX(1.082392200) */
-#define FIX_1_414213562  ((INT32)  362)		/* FIX(1.414213562) */
-#define FIX_1_847759065  ((INT32)  473)		/* FIX(1.847759065) */
-#define FIX_2_613125930  ((INT32)  669)		/* FIX(2.613125930) */
-#else
-#define FIX_1_082392200  FIX(1.082392200)
-#define FIX_1_414213562  FIX(1.414213562)
-#define FIX_1_847759065  FIX(1.847759065)
-#define FIX_2_613125930  FIX(2.613125930)
-#endif
-
-
-/* We can gain a little more speed, with a further compromise in accuracy,
- * by omitting the addition in a descaling shift.  This yields an incorrectly
- * rounded result half the time...
- */
-
-#ifndef USE_ACCURATE_ROUNDING
-#undef DESCALE
-#define DESCALE(x,n)  RIGHT_SHIFT(x, n)
-#endif
-
-
-/* Multiply a DCTELEM variable by an INT32 constant, and immediately
- * descale to yield a DCTELEM result.
- */
-
-#define MULTIPLY(var,const)  ((DCTELEM) DESCALE((var) * (const), CONST_BITS))
-
-
-/* Dequantize a coefficient by multiplying it by the multiplier-table
- * entry; produce a DCTELEM result.  For 8-bit data a 16x16->16
- * multiplication will do.  For 12-bit data, the multiplier table is
- * declared INT32, so a 32-bit multiply will be used.
- */
-
-#if BITS_IN_JSAMPLE == 8
-#define DEQUANTIZE(coef,quantval)  (((IFAST_MULT_TYPE) (coef)) * (quantval))
-#else
-#define DEQUANTIZE(coef,quantval)  \
-	DESCALE((coef)*(quantval), IFAST_SCALE_BITS-PASS1_BITS)
-#endif
-
-
-/* Like DESCALE, but applies to a DCTELEM and produces an int.
- * We assume that int right shift is unsigned if INT32 right shift is.
- */
-
-#ifdef RIGHT_SHIFT_IS_UNSIGNED
-#define ISHIFT_TEMPS	DCTELEM ishift_temp;
-#if BITS_IN_JSAMPLE == 8
-#define DCTELEMBITS  16		/* DCTELEM may be 16 or 32 bits */
-#else
-#define DCTELEMBITS  32		/* DCTELEM must be 32 bits */
-#endif
-#define IRIGHT_SHIFT(x,shft)  \
-    ((ishift_temp = (x)) < 0 ? \
-     (ishift_temp >> (shft)) | ((~((DCTELEM) 0)) << (DCTELEMBITS-(shft))) : \
-     (ishift_temp >> (shft)))
-#else
-#define ISHIFT_TEMPS
-#define IRIGHT_SHIFT(x,shft)	((x) >> (shft))
-#endif
-
-#ifdef USE_ACCURATE_ROUNDING
-#define IDESCALE(x,n)  ((int) IRIGHT_SHIFT((x) + (1 << ((n)-1)), n))
-#else
-#define IDESCALE(x,n)  ((int) IRIGHT_SHIFT(x, n))
-#endif
-
-
-/*
- * Perform dequantization and inverse DCT on one block of coefficients.
- */
-
-GLOBAL void
-jpeg_idct_ifast (j_decompress_ptr cinfo, jpeg_component_info * compptr,
-		 JCOEFPTR coef_block,
-		 JSAMPARRAY output_buf, JDIMENSION output_col)
-{
-  DCTELEM tmp0, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, tmp7;
-  DCTELEM tmp10, tmp11, tmp12, tmp13;
-  DCTELEM z5, z10, z11, z12, z13;
-  JCOEFPTR inptr;
-  IFAST_MULT_TYPE * quantptr;
-  int * wsptr;
-  JSAMPROW outptr;
-  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
-  int ctr;
-  int workspace[DCTSIZE2];	/* buffers data between passes */
-  SHIFT_TEMPS			/* for DESCALE */
-  ISHIFT_TEMPS			/* for IDESCALE */
-
-  /* Pass 1: process columns from input, store into work array. */
-
-  inptr = coef_block;
-  quantptr = (IFAST_MULT_TYPE *) compptr->dct_table;
-  wsptr = workspace;
-  for (ctr = DCTSIZE; ctr > 0; ctr--) {
-    /* Due to quantization, we will usually find that many of the input
-     * coefficients are zero, especially the AC terms.  We can exploit this
-     * by short-circuiting the IDCT calculation for any column in which all
-     * the AC terms are zero.  In that case each output is equal to the
-     * DC coefficient (with scale factor as needed).
-     * With typical images and quantization tables, half or more of the
-     * column DCT calculations can be simplified this way.
-     */
-    
-    if ((inptr[DCTSIZE*1] | inptr[DCTSIZE*2] | inptr[DCTSIZE*3] |
-	 inptr[DCTSIZE*4] | inptr[DCTSIZE*5] | inptr[DCTSIZE*6] |
-	 inptr[DCTSIZE*7]) == 0) {
-      /* AC terms all zero */
-      int dcval = (int) DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
-
-      wsptr[DCTSIZE*0] = dcval;
-      wsptr[DCTSIZE*1] = dcval;
-      wsptr[DCTSIZE*2] = dcval;
-      wsptr[DCTSIZE*3] = dcval;
-      wsptr[DCTSIZE*4] = dcval;
-      wsptr[DCTSIZE*5] = dcval;
-      wsptr[DCTSIZE*6] = dcval;
-      wsptr[DCTSIZE*7] = dcval;
-      
-      inptr++;			/* advance pointers to next column */
-      quantptr++;
-      wsptr++;
-      continue;
-    }
-    
-    /* Even part */
-
-    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
-    tmp1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
-    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
-    tmp3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
-
-    tmp10 = tmp0 + tmp2;	/* phase 3 */
-    tmp11 = tmp0 - tmp2;
-
-    tmp13 = tmp1 + tmp3;	/* phases 5-3 */
-    tmp12 = MULTIPLY(tmp1 - tmp3, FIX_1_414213562) - tmp13; /* 2*c4 */
-
-    tmp0 = tmp10 + tmp13;	/* phase 2 */
-    tmp3 = tmp10 - tmp13;
-    tmp1 = tmp11 + tmp12;
-    tmp2 = tmp11 - tmp12;
-    
-    /* Odd part */
-
-    tmp4 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
-    tmp5 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
-    tmp6 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
-    tmp7 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
-
-    z13 = tmp6 + tmp5;		/* phase 6 */
-    z10 = tmp6 - tmp5;
-    z11 = tmp4 + tmp7;
-    z12 = tmp4 - tmp7;
-
-    tmp7 = z11 + z13;		/* phase 5 */
-    tmp11 = MULTIPLY(z11 - z13, FIX_1_414213562); /* 2*c4 */
-
-    z5 = MULTIPLY(z10 + z12, FIX_1_847759065); /* 2*c2 */
-    tmp10 = MULTIPLY(z12, FIX_1_082392200) - z5; /* 2*(c2-c6) */
-    tmp12 = MULTIPLY(z10, - FIX_2_613125930) + z5; /* -2*(c2+c6) */
-
-    tmp6 = tmp12 - tmp7;	/* phase 2 */
-    tmp5 = tmp11 - tmp6;
-    tmp4 = tmp10 + tmp5;
-
-    wsptr[DCTSIZE*0] = (int) (tmp0 + tmp7);
-    wsptr[DCTSIZE*7] = (int) (tmp0 - tmp7);
-    wsptr[DCTSIZE*1] = (int) (tmp1 + tmp6);
-    wsptr[DCTSIZE*6] = (int) (tmp1 - tmp6);
-    wsptr[DCTSIZE*2] = (int) (tmp2 + tmp5);
-    wsptr[DCTSIZE*5] = (int) (tmp2 - tmp5);
-    wsptr[DCTSIZE*4] = (int) (tmp3 + tmp4);
-    wsptr[DCTSIZE*3] = (int) (tmp3 - tmp4);
-
-    inptr++;			/* advance pointers to next column */
-    quantptr++;
-    wsptr++;
-  }
-  
-  /* Pass 2: process rows from work array, store into output array. */
-  /* Note that we must descale the results by a factor of 8 == 2**3, */
-  /* and also undo the PASS1_BITS scaling. */
-
-  wsptr = workspace;
-  for (ctr = 0; ctr < DCTSIZE; ctr++) {
-    outptr = output_buf[ctr] + output_col;
-    /* Rows of zeroes can be exploited in the same way as we did with columns.
-     * However, the column calculation has created many nonzero AC terms, so
-     * the simplification applies less often (typically 5% to 10% of the time).
-     * On machines with very fast multiplication, it's possible that the
-     * test takes more time than it's worth.  In that case this section
-     * may be commented out.
-     */
-    
-#ifndef NO_ZERO_ROW_TEST
-    if ((wsptr[1] | wsptr[2] | wsptr[3] | wsptr[4] | wsptr[5] | wsptr[6] |
-	 wsptr[7]) == 0) {
-      /* AC terms all zero */
-      JSAMPLE dcval = range_limit[IDESCALE(wsptr[0], PASS1_BITS+3)
-				  & RANGE_MASK];
-      
-      outptr[0] = dcval;
-      outptr[1] = dcval;
-      outptr[2] = dcval;
-      outptr[3] = dcval;
-      outptr[4] = dcval;
-      outptr[5] = dcval;
-      outptr[6] = dcval;
-      outptr[7] = dcval;
-
-      wsptr += DCTSIZE;		/* advance pointer to next row */
-      continue;
-    }
-#endif
-    
-    /* Even part */
-
-    tmp10 = ((DCTELEM) wsptr[0] + (DCTELEM) wsptr[4]);
-    tmp11 = ((DCTELEM) wsptr[0] - (DCTELEM) wsptr[4]);
-
-    tmp13 = ((DCTELEM) wsptr[2] + (DCTELEM) wsptr[6]);
-    tmp12 = MULTIPLY((DCTELEM) wsptr[2] - (DCTELEM) wsptr[6], FIX_1_414213562)
-	    - tmp13;
-
-    tmp0 = tmp10 + tmp13;
-    tmp3 = tmp10 - tmp13;
-    tmp1 = tmp11 + tmp12;
-    tmp2 = tmp11 - tmp12;
-
-    /* Odd part */
-
-    z13 = (DCTELEM) wsptr[5] + (DCTELEM) wsptr[3];
-    z10 = (DCTELEM) wsptr[5] - (DCTELEM) wsptr[3];
-    z11 = (DCTELEM) wsptr[1] + (DCTELEM) wsptr[7];
-    z12 = (DCTELEM) wsptr[1] - (DCTELEM) wsptr[7];
-
-    tmp7 = z11 + z13;		/* phase 5 */
-    tmp11 = MULTIPLY(z11 - z13, FIX_1_414213562); /* 2*c4 */
-
-    z5 = MULTIPLY(z10 + z12, FIX_1_847759065); /* 2*c2 */
-    tmp10 = MULTIPLY(z12, FIX_1_082392200) - z5; /* 2*(c2-c6) */
-    tmp12 = MULTIPLY(z10, - FIX_2_613125930) + z5; /* -2*(c2+c6) */
-
-    tmp6 = tmp12 - tmp7;	/* phase 2 */
-    tmp5 = tmp11 - tmp6;
-    tmp4 = tmp10 + tmp5;
-
-    /* Final output stage: scale down by a factor of 8 and range-limit */
-
-    outptr[0] = range_limit[IDESCALE(tmp0 + tmp7, PASS1_BITS+3)
-			    & RANGE_MASK];
-    outptr[7] = range_limit[IDESCALE(tmp0 - tmp7, PASS1_BITS+3)
-			    & RANGE_MASK];
-    outptr[1] = range_limit[IDESCALE(tmp1 + tmp6, PASS1_BITS+3)
-			    & RANGE_MASK];
-    outptr[6] = range_limit[IDESCALE(tmp1 - tmp6, PASS1_BITS+3)
-			    & RANGE_MASK];
-    outptr[2] = range_limit[IDESCALE(tmp2 + tmp5, PASS1_BITS+3)
-			    & RANGE_MASK];
-    outptr[5] = range_limit[IDESCALE(tmp2 - tmp5, PASS1_BITS+3)
-			    & RANGE_MASK];
-    outptr[4] = range_limit[IDESCALE(tmp3 + tmp4, PASS1_BITS+3)
-			    & RANGE_MASK];
-    outptr[3] = range_limit[IDESCALE(tmp3 - tmp4, PASS1_BITS+3)
-			    & RANGE_MASK];
-
-    wsptr += DCTSIZE;		/* advance pointer to next row */
-  }
-}
-
-#endif /* DCT_IFAST_SUPPORTED */
diff -NEaurb neo/renderer/jpeg-6/jidctint.c neo/renderer/jpeg-6/jidctint.c
--- neo/renderer/jpeg-6/jidctint.c	2011-12-26 04:15:38 +0000
+++ neo/renderer/jpeg-6/jidctint.c	1970-01-01 00:00:00 +0000
@@ -1,388 +0,0 @@
-/*
- * jidctint.c
- *
- * Copyright (C) 1991-1994, Thomas G. Lane.
- * This file is part of the Independent JPEG Group's software.
- * For conditions of distribution and use, see the accompanying README file.
- *
- * This file contains a slow-but-accurate integer implementation of the
- * inverse DCT (Discrete Cosine Transform).  In the IJG code, this routine
- * must also perform dequantization of the input coefficients.
- *
- * A 2-D IDCT can be done by 1-D IDCT on each column followed by 1-D IDCT
- * on each row (or vice versa, but it's more convenient to emit a row at
- * a time).  Direct algorithms are also available, but they are much more
- * complex and seem not to be any faster when reduced to code.
- *
- * This implementation is based on an algorithm described in
- *   C. Loeffler, A. Ligtenberg and G. Moschytz, "Practical Fast 1-D DCT
- *   Algorithms with 11 Multiplications", Proc. Int'l. Conf. on Acoustics,
- *   Speech, and Signal Processing 1989 (ICASSP '89), pp. 988-991.
- * The primary algorithm described there uses 11 multiplies and 29 adds.
- * We use their alternate method with 12 multiplies and 32 adds.
- * The advantage of this method is that no data path contains more than one
- * multiplication; this allows a very simple and accurate implementation in
- * scaled fixed-point arithmetic, with a minimal number of shifts.
- */
-
-#define JPEG_INTERNALS
-#include "jinclude.h"
-#include "jpeglib.h"
-#include "jdct.h"		/* Private declarations for DCT subsystem */
-
-#ifdef DCT_ISLOW_SUPPORTED
-
-
-/*
- * This module is specialized to the case DCTSIZE = 8.
- */
-
-#if DCTSIZE != 8
-  Sorry, this code only copes with 8x8 DCTs. /* deliberate syntax err */
-#endif
-
-
-/*
- * The poop on this scaling stuff is as follows:
- *
- * Each 1-D IDCT step produces outputs which are a factor of sqrt(N)
- * larger than the true IDCT outputs.  The final outputs are therefore
- * a factor of N larger than desired; since N=8 this can be cured by
- * a simple right shift at the end of the algorithm.  The advantage of
- * this arrangement is that we save two multiplications per 1-D IDCT,
- * because the y0 and y4 inputs need not be divided by sqrt(N).
- *
- * We have to do addition and subtraction of the integer inputs, which
- * is no problem, and multiplication by fractional constants, which is
- * a problem to do in integer arithmetic.  We multiply all the constants
- * by CONST_SCALE and convert them to integer constants (thus retaining
- * CONST_BITS bits of precision in the constants).  After doing a
- * multiplication we have to divide the product by CONST_SCALE, with proper
- * rounding, to produce the correct output.  This division can be done
- * cheaply as a right shift of CONST_BITS bits.  We postpone shifting
- * as long as possible so that partial sums can be added together with
- * full fractional precision.
- *
- * The outputs of the first pass are scaled up by PASS1_BITS bits so that
- * they are represented to better-than-integral precision.  These outputs
- * require BITS_IN_JSAMPLE + PASS1_BITS + 3 bits; this fits in a 16-bit word
- * with the recommended scaling.  (To scale up 12-bit sample data further, an
- * intermediate INT32 array would be needed.)
- *
- * To avoid overflow of the 32-bit intermediate results in pass 2, we must
- * have BITS_IN_JSAMPLE + CONST_BITS + PASS1_BITS <= 26.  Error analysis
- * shows that the values given below are the most effective.
- */
-
-#if BITS_IN_JSAMPLE == 8
-#define CONST_BITS  13
-#define PASS1_BITS  2
-#else
-#define CONST_BITS  13
-#define PASS1_BITS  1		/* lose a little precision to avoid overflow */
-#endif
-
-/* Some C compilers fail to reduce "FIX(constant)" at compile time, thus
- * causing a lot of useless floating-point operations at run time.
- * To get around this we use the following pre-calculated constants.
- * If you change CONST_BITS you may want to add appropriate values.
- * (With a reasonable C compiler, you can just rely on the FIX() macro...)
- */
-
-#if CONST_BITS == 13
-#define FIX_0_298631336  ((INT32)  2446)	/* FIX(0.298631336) */
-#define FIX_0_390180644  ((INT32)  3196)	/* FIX(0.390180644) */
-#define FIX_0_541196100  ((INT32)  4433)	/* FIX(0.541196100) */
-#define FIX_0_765366865  ((INT32)  6270)	/* FIX(0.765366865) */
-#define FIX_0_899976223  ((INT32)  7373)	/* FIX(0.899976223) */
-#define FIX_1_175875602  ((INT32)  9633)	/* FIX(1.175875602) */
-#define FIX_1_501321110  ((INT32)  12299)	/* FIX(1.501321110) */
-#define FIX_1_847759065  ((INT32)  15137)	/* FIX(1.847759065) */
-#define FIX_1_961570560  ((INT32)  16069)	/* FIX(1.961570560) */
-#define FIX_2_053119869  ((INT32)  16819)	/* FIX(2.053119869) */
-#define FIX_2_562915447  ((INT32)  20995)	/* FIX(2.562915447) */
-#define FIX_3_072711026  ((INT32)  25172)	/* FIX(3.072711026) */
-#else
-#define FIX_0_298631336  FIX(0.298631336)
-#define FIX_0_390180644  FIX(0.390180644)
-#define FIX_0_541196100  FIX(0.541196100)
-#define FIX_0_765366865  FIX(0.765366865)
-#define FIX_0_899976223  FIX(0.899976223)
-#define FIX_1_175875602  FIX(1.175875602)
-#define FIX_1_501321110  FIX(1.501321110)
-#define FIX_1_847759065  FIX(1.847759065)
-#define FIX_1_961570560  FIX(1.961570560)
-#define FIX_2_053119869  FIX(2.053119869)
-#define FIX_2_562915447  FIX(2.562915447)
-#define FIX_3_072711026  FIX(3.072711026)
-#endif
-
-
-/* Multiply an INT32 variable by an INT32 constant to yield an INT32 result.
- * For 8-bit samples with the recommended scaling, all the variable
- * and constant values involved are no more than 16 bits wide, so a
- * 16x16->32 bit multiply can be used instead of a full 32x32 multiply.
- * For 12-bit samples, a full 32-bit multiplication will be needed.
- */
-
-#if BITS_IN_JSAMPLE == 8
-#define MULTIPLY(var,const)  MULTIPLY16C16(var,const)
-#else
-#define MULTIPLY(var,const)  ((var) * (const))
-#endif
-
-
-/* Dequantize a coefficient by multiplying it by the multiplier-table
- * entry; produce an int result.  In this module, both inputs and result
- * are 16 bits or less, so either int or short multiply will work.
- */
-
-#define DEQUANTIZE(coef,quantval)  (((ISLOW_MULT_TYPE) (coef)) * (quantval))
-
-
-/*
- * Perform dequantization and inverse DCT on one block of coefficients.
- */
-
-GLOBAL void
-jpeg_idct_islow (j_decompress_ptr cinfo, jpeg_component_info * compptr,
-		 JCOEFPTR coef_block,
-		 JSAMPARRAY output_buf, JDIMENSION output_col)
-{
-  INT32 tmp0, tmp1, tmp2, tmp3;
-  INT32 tmp10, tmp11, tmp12, tmp13;
-  INT32 z1, z2, z3, z4, z5;
-  JCOEFPTR inptr;
-  ISLOW_MULT_TYPE * quantptr;
-  int * wsptr;
-  JSAMPROW outptr;
-  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
-  int ctr;
-  int workspace[DCTSIZE2];	/* buffers data between passes */
-  SHIFT_TEMPS
-
-  /* Pass 1: process columns from input, store into work array. */
-  /* Note results are scaled up by sqrt(8) compared to a true IDCT; */
-  /* furthermore, we scale the results by 2**PASS1_BITS. */
-
-  inptr = coef_block;
-  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
-  wsptr = workspace;
-  for (ctr = DCTSIZE; ctr > 0; ctr--) {
-    /* Due to quantization, we will usually find that many of the input
-     * coefficients are zero, especially the AC terms.  We can exploit this
-     * by short-circuiting the IDCT calculation for any column in which all
-     * the AC terms are zero.  In that case each output is equal to the
-     * DC coefficient (with scale factor as needed).
-     * With typical images and quantization tables, half or more of the
-     * column DCT calculations can be simplified this way.
-     */
-    
-    if ((inptr[DCTSIZE*1] | inptr[DCTSIZE*2] | inptr[DCTSIZE*3] |
-	 inptr[DCTSIZE*4] | inptr[DCTSIZE*5] | inptr[DCTSIZE*6] |
-	 inptr[DCTSIZE*7]) == 0) {
-      /* AC terms all zero */
-      int dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]) << PASS1_BITS;
-      
-      wsptr[DCTSIZE*0] = dcval;
-      wsptr[DCTSIZE*1] = dcval;
-      wsptr[DCTSIZE*2] = dcval;
-      wsptr[DCTSIZE*3] = dcval;
-      wsptr[DCTSIZE*4] = dcval;
-      wsptr[DCTSIZE*5] = dcval;
-      wsptr[DCTSIZE*6] = dcval;
-      wsptr[DCTSIZE*7] = dcval;
-      
-      inptr++;			/* advance pointers to next column */
-      quantptr++;
-      wsptr++;
-      continue;
-    }
-    
-    /* Even part: reverse the even part of the forward DCT. */
-    /* The rotator is sqrt(2)*c(-6). */
-    
-    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
-    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
-    
-    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
-    tmp2 = z1 + MULTIPLY(z3, - FIX_1_847759065);
-    tmp3 = z1 + MULTIPLY(z2, FIX_0_765366865);
-    
-    z2 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
-    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
-
-    tmp0 = (z2 + z3) << CONST_BITS;
-    tmp1 = (z2 - z3) << CONST_BITS;
-    
-    tmp10 = tmp0 + tmp3;
-    tmp13 = tmp0 - tmp3;
-    tmp11 = tmp1 + tmp2;
-    tmp12 = tmp1 - tmp2;
-    
-    /* Odd part per figure 8; the matrix is unitary and hence its
-     * transpose is its inverse.  i0..i3 are y7,y5,y3,y1 respectively.
-     */
-    
-    tmp0 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
-    tmp1 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
-    tmp2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
-    tmp3 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
-    
-    z1 = tmp0 + tmp3;
-    z2 = tmp1 + tmp2;
-    z3 = tmp0 + tmp2;
-    z4 = tmp1 + tmp3;
-    z5 = MULTIPLY(z3 + z4, FIX_1_175875602); /* sqrt(2) * c3 */
-    
-    tmp0 = MULTIPLY(tmp0, FIX_0_298631336); /* sqrt(2) * (-c1+c3+c5-c7) */
-    tmp1 = MULTIPLY(tmp1, FIX_2_053119869); /* sqrt(2) * ( c1+c3-c5+c7) */
-    tmp2 = MULTIPLY(tmp2, FIX_3_072711026); /* sqrt(2) * ( c1+c3+c5-c7) */
-    tmp3 = MULTIPLY(tmp3, FIX_1_501321110); /* sqrt(2) * ( c1+c3-c5-c7) */
-    z1 = MULTIPLY(z1, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
-    z2 = MULTIPLY(z2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
-    z3 = MULTIPLY(z3, - FIX_1_961570560); /* sqrt(2) * (-c3-c5) */
-    z4 = MULTIPLY(z4, - FIX_0_390180644); /* sqrt(2) * (c5-c3) */
-    
-    z3 += z5;
-    z4 += z5;
-    
-    tmp0 += z1 + z3;
-    tmp1 += z2 + z4;
-    tmp2 += z2 + z3;
-    tmp3 += z1 + z4;
-    
-    /* Final output stage: inputs are tmp10..tmp13, tmp0..tmp3 */
-    
-    wsptr[DCTSIZE*0] = (int) DESCALE(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
-    wsptr[DCTSIZE*7] = (int) DESCALE(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
-    wsptr[DCTSIZE*1] = (int) DESCALE(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
-    wsptr[DCTSIZE*6] = (int) DESCALE(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
-    wsptr[DCTSIZE*2] = (int) DESCALE(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
-    wsptr[DCTSIZE*5] = (int) DESCALE(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
-    wsptr[DCTSIZE*3] = (int) DESCALE(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
-    wsptr[DCTSIZE*4] = (int) DESCALE(tmp13 - tmp0, CONST_BITS-PASS1_BITS);
-    
-    inptr++;			/* advance pointers to next column */
-    quantptr++;
-    wsptr++;
-  }
-  
-  /* Pass 2: process rows from work array, store into output array. */
-  /* Note that we must descale the results by a factor of 8 == 2**3, */
-  /* and also undo the PASS1_BITS scaling. */
-
-  wsptr = workspace;
-  for (ctr = 0; ctr < DCTSIZE; ctr++) {
-    outptr = output_buf[ctr] + output_col;
-    /* Rows of zeroes can be exploited in the same way as we did with columns.
-     * However, the column calculation has created many nonzero AC terms, so
-     * the simplification applies less often (typically 5% to 10% of the time).
-     * On machines with very fast multiplication, it's possible that the
-     * test takes more time than it's worth.  In that case this section
-     * may be commented out.
-     */
-    
-#ifndef NO_ZERO_ROW_TEST
-    if ((wsptr[1] | wsptr[2] | wsptr[3] | wsptr[4] | wsptr[5] | wsptr[6] |
-	 wsptr[7]) == 0) {
-      /* AC terms all zero */
-      JSAMPLE dcval = range_limit[(int) DESCALE((INT32) wsptr[0], PASS1_BITS+3)
-				  & RANGE_MASK];
-      
-      outptr[0] = dcval;
-      outptr[1] = dcval;
-      outptr[2] = dcval;
-      outptr[3] = dcval;
-      outptr[4] = dcval;
-      outptr[5] = dcval;
-      outptr[6] = dcval;
-      outptr[7] = dcval;
-
-      wsptr += DCTSIZE;		/* advance pointer to next row */
-      continue;
-    }
-#endif
-    
-    /* Even part: reverse the even part of the forward DCT. */
-    /* The rotator is sqrt(2)*c(-6). */
-    
-    z2 = (INT32) wsptr[2];
-    z3 = (INT32) wsptr[6];
-    
-    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
-    tmp2 = z1 + MULTIPLY(z3, - FIX_1_847759065);
-    tmp3 = z1 + MULTIPLY(z2, FIX_0_765366865);
-    
-    tmp0 = ((INT32) wsptr[0] + (INT32) wsptr[4]) << CONST_BITS;
-    tmp1 = ((INT32) wsptr[0] - (INT32) wsptr[4]) << CONST_BITS;
-    
-    tmp10 = tmp0 + tmp3;
-    tmp13 = tmp0 - tmp3;
-    tmp11 = tmp1 + tmp2;
-    tmp12 = tmp1 - tmp2;
-    
-    /* Odd part per figure 8; the matrix is unitary and hence its
-     * transpose is its inverse.  i0..i3 are y7,y5,y3,y1 respectively.
-     */
-    
-    tmp0 = (INT32) wsptr[7];
-    tmp1 = (INT32) wsptr[5];
-    tmp2 = (INT32) wsptr[3];
-    tmp3 = (INT32) wsptr[1];
-    
-    z1 = tmp0 + tmp3;
-    z2 = tmp1 + tmp2;
-    z3 = tmp0 + tmp2;
-    z4 = tmp1 + tmp3;
-    z5 = MULTIPLY(z3 + z4, FIX_1_175875602); /* sqrt(2) * c3 */
-    
-    tmp0 = MULTIPLY(tmp0, FIX_0_298631336); /* sqrt(2) * (-c1+c3+c5-c7) */
-    tmp1 = MULTIPLY(tmp1, FIX_2_053119869); /* sqrt(2) * ( c1+c3-c5+c7) */
-    tmp2 = MULTIPLY(tmp2, FIX_3_072711026); /* sqrt(2) * ( c1+c3+c5-c7) */
-    tmp3 = MULTIPLY(tmp3, FIX_1_501321110); /* sqrt(2) * ( c1+c3-c5-c7) */
-    z1 = MULTIPLY(z1, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
-    z2 = MULTIPLY(z2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
-    z3 = MULTIPLY(z3, - FIX_1_961570560); /* sqrt(2) * (-c3-c5) */
-    z4 = MULTIPLY(z4, - FIX_0_390180644); /* sqrt(2) * (c5-c3) */
-    
-    z3 += z5;
-    z4 += z5;
-    
-    tmp0 += z1 + z3;
-    tmp1 += z2 + z4;
-    tmp2 += z2 + z3;
-    tmp3 += z1 + z4;
-    
-    /* Final output stage: inputs are tmp10..tmp13, tmp0..tmp3 */
-    
-    outptr[0] = range_limit[(int) DESCALE(tmp10 + tmp3,
-					  CONST_BITS+PASS1_BITS+3)
-			    & RANGE_MASK];
-    outptr[7] = range_limit[(int) DESCALE(tmp10 - tmp3,
-					  CONST_BITS+PASS1_BITS+3)
-			    & RANGE_MASK];
-    outptr[1] = range_limit[(int) DESCALE(tmp11 + tmp2,
-					  CONST_BITS+PASS1_BITS+3)
-			    & RANGE_MASK];
-    outptr[6] = range_limit[(int) DESCALE(tmp11 - tmp2,
-					  CONST_BITS+PASS1_BITS+3)
-			    & RANGE_MASK];
-    outptr[2] = range_limit[(int) DESCALE(tmp12 + tmp1,
-					  CONST_BITS+PASS1_BITS+3)
-			    & RANGE_MASK];
-    outptr[5] = range_limit[(int) DESCALE(tmp12 - tmp1,
-					  CONST_BITS+PASS1_BITS+3)
-			    & RANGE_MASK];
-    outptr[3] = range_limit[(int) DESCALE(tmp13 + tmp0,
-					  CONST_BITS+PASS1_BITS+3)
-			    & RANGE_MASK];
-    outptr[4] = range_limit[(int) DESCALE(tmp13 - tmp0,
-					  CONST_BITS+PASS1_BITS+3)
-			    & RANGE_MASK];
-    
-    wsptr += DCTSIZE;		/* advance pointer to next row */
-  }
-}
-
-#endif /* DCT_ISLOW_SUPPORTED */
diff -NEaurb neo/renderer/jpeg-6/jidctred.c neo/renderer/jpeg-6/jidctred.c
--- neo/renderer/jpeg-6/jidctred.c	2011-12-26 04:15:38 +0000
+++ neo/renderer/jpeg-6/jidctred.c	1970-01-01 00:00:00 +0000
@@ -1,397 +0,0 @@
-/*
- * jidctred.c
- *
- * Copyright (C) 1994, Thomas G. Lane.
- * This file is part of the Independent JPEG Group's software.
- * For conditions of distribution and use, see the accompanying README file.
- *
- * This file contains inverse-DCT routines that produce reduced-size output:
- * either 4x4, 2x2, or 1x1 pixels from an 8x8 DCT block.
- *
- * The implementation is based on the Loeffler, Ligtenberg and Moschytz (LL&M)
- * algorithm used in jidctint.c.  We simply replace each 8-to-8 1-D IDCT step
- * with an 8-to-4 step that produces the four averages of two adjacent outputs
- * (or an 8-to-2 step producing two averages of four outputs, for 2x2 output).
- * These steps were derived by computing the corresponding values at the end
- * of the normal LL&M code, then simplifying as much as possible.
- *
- * 1x1 is trivial: just take the DC coefficient divided by 8.
- *
- * See jidctint.c for additional comments.
- */
-
-#define JPEG_INTERNALS
-#include "jinclude.h"
-#include "jpeglib.h"
-#include "jdct.h"		/* Private declarations for DCT subsystem */
-
-#ifdef IDCT_SCALING_SUPPORTED
-
-
-/*
- * This module is specialized to the case DCTSIZE = 8.
- */
-
-#if DCTSIZE != 8
-  Sorry, this code only copes with 8x8 DCTs. /* deliberate syntax err */
-#endif
-
-
-/* Scaling is the same as in jidctint.c. */
-
-#if BITS_IN_JSAMPLE == 8
-#define CONST_BITS  13
-#define PASS1_BITS  2
-#else
-#define CONST_BITS  13
-#define PASS1_BITS  1		/* lose a little precision to avoid overflow */
-#endif
-
-/* Some C compilers fail to reduce "FIX(constant)" at compile time, thus
- * causing a lot of useless floating-point operations at run time.
- * To get around this we use the following pre-calculated constants.
- * If you change CONST_BITS you may want to add appropriate values.
- * (With a reasonable C compiler, you can just rely on the FIX() macro...)
- */
-
-#if CONST_BITS == 13
-#define FIX_0_211164243  ((INT32)  1730)	/* FIX(0.211164243) */
-#define FIX_0_509795579  ((INT32)  4176)	/* FIX(0.509795579) */
-#define FIX_0_601344887  ((INT32)  4926)	/* FIX(0.601344887) */
-#define FIX_0_720959822  ((INT32)  5906)	/* FIX(0.720959822) */
-#define FIX_0_765366865  ((INT32)  6270)	/* FIX(0.765366865) */
-#define FIX_0_850430095  ((INT32)  6967)	/* FIX(0.850430095) */
-#define FIX_0_899976223  ((INT32)  7373)	/* FIX(0.899976223) */
-#define FIX_1_061594337  ((INT32)  8697)	/* FIX(1.061594337) */
-#define FIX_1_272758580  ((INT32)  10426)	/* FIX(1.272758580) */
-#define FIX_1_451774981  ((INT32)  11893)	/* FIX(1.451774981) */
-#define FIX_1_847759065  ((INT32)  15137)	/* FIX(1.847759065) */
-#define FIX_2_172734803  ((INT32)  17799)	/* FIX(2.172734803) */
-#define FIX_2_562915447  ((INT32)  20995)	/* FIX(2.562915447) */
-#define FIX_3_624509785  ((INT32)  29692)	/* FIX(3.624509785) */
-#else
-#define FIX_0_211164243  FIX(0.211164243)
-#define FIX_0_509795579  FIX(0.509795579)
-#define FIX_0_601344887  FIX(0.601344887)
-#define FIX_0_720959822  FIX(0.720959822)
-#define FIX_0_765366865  FIX(0.765366865)
-#define FIX_0_850430095  FIX(0.850430095)
-#define FIX_0_899976223  FIX(0.899976223)
-#define FIX_1_061594337  FIX(1.061594337)
-#define FIX_1_272758580  FIX(1.272758580)
-#define FIX_1_451774981  FIX(1.451774981)
-#define FIX_1_847759065  FIX(1.847759065)
-#define FIX_2_172734803  FIX(2.172734803)
-#define FIX_2_562915447  FIX(2.562915447)
-#define FIX_3_624509785  FIX(3.624509785)
-#endif
-
-
-/* Multiply an INT32 variable by an INT32 constant to yield an INT32 result.
- * For 8-bit samples with the recommended scaling, all the variable
- * and constant values involved are no more than 16 bits wide, so a
- * 16x16->32 bit multiply can be used instead of a full 32x32 multiply.
- * For 12-bit samples, a full 32-bit multiplication will be needed.
- */
-
-#if BITS_IN_JSAMPLE == 8
-#define MULTIPLY(var,const)  MULTIPLY16C16(var,const)
-#else
-#define MULTIPLY(var,const)  ((var) * (const))
-#endif
-
-
-/* Dequantize a coefficient by multiplying it by the multiplier-table
- * entry; produce an int result.  In this module, both inputs and result
- * are 16 bits or less, so either int or short multiply will work.
- */
-
-#define DEQUANTIZE(coef,quantval)  (((ISLOW_MULT_TYPE) (coef)) * (quantval))
-
-
-/*
- * Perform dequantization and inverse DCT on one block of coefficients,
- * producing a reduced-size 4x4 output block.
- */
-
-GLOBAL void
-jpeg_idct_4x4 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
-	       JCOEFPTR coef_block,
-	       JSAMPARRAY output_buf, JDIMENSION output_col)
-{
-  INT32 tmp0, tmp2, tmp10, tmp12;
-  INT32 z1, z2, z3, z4;
-  JCOEFPTR inptr;
-  ISLOW_MULT_TYPE * quantptr;
-  int * wsptr;
-  JSAMPROW outptr;
-  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
-  int ctr;
-  int workspace[DCTSIZE*4];	/* buffers data between passes */
-  SHIFT_TEMPS
-
-  /* Pass 1: process columns from input, store into work array. */
-
-  inptr = coef_block;
-  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
-  wsptr = workspace;
-  for (ctr = DCTSIZE; ctr > 0; inptr++, quantptr++, wsptr++, ctr--) {
-    /* Don't bother to process column 4, because second pass won't use it */
-    if (ctr == DCTSIZE-4)
-      continue;
-    if ((inptr[DCTSIZE*1] | inptr[DCTSIZE*2] | inptr[DCTSIZE*3] |
-	 inptr[DCTSIZE*5] | inptr[DCTSIZE*6] | inptr[DCTSIZE*7]) == 0) {
-      /* AC terms all zero; we need not examine term 4 for 4x4 output */
-      int dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]) << PASS1_BITS;
-      
-      wsptr[DCTSIZE*0] = dcval;
-      wsptr[DCTSIZE*1] = dcval;
-      wsptr[DCTSIZE*2] = dcval;
-      wsptr[DCTSIZE*3] = dcval;
-      
-      continue;
-    }
-    
-    /* Even part */
-    
-    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
-    tmp0 <<= (CONST_BITS+1);
-    
-    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
-    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
-
-    tmp2 = MULTIPLY(z2, FIX_1_847759065) + MULTIPLY(z3, - FIX_0_765366865);
-    
-    tmp10 = tmp0 + tmp2;
-    tmp12 = tmp0 - tmp2;
-    
-    /* Odd part */
-    
-    z1 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
-    z2 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
-    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
-    z4 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
-    
-    tmp0 = MULTIPLY(z1, - FIX_0_211164243) /* sqrt(2) * (c3-c1) */
-	 + MULTIPLY(z2, FIX_1_451774981) /* sqrt(2) * (c3+c7) */
-	 + MULTIPLY(z3, - FIX_2_172734803) /* sqrt(2) * (-c1-c5) */
-	 + MULTIPLY(z4, FIX_1_061594337); /* sqrt(2) * (c5+c7) */
-    
-    tmp2 = MULTIPLY(z1, - FIX_0_509795579) /* sqrt(2) * (c7-c5) */
-	 + MULTIPLY(z2, - FIX_0_601344887) /* sqrt(2) * (c5-c1) */
-	 + MULTIPLY(z3, FIX_0_899976223) /* sqrt(2) * (c3-c7) */
-	 + MULTIPLY(z4, FIX_2_562915447); /* sqrt(2) * (c1+c3) */
-
-    /* Final output stage */
-    
-    wsptr[DCTSIZE*0] = (int) DESCALE(tmp10 + tmp2, CONST_BITS-PASS1_BITS+1);
-    wsptr[DCTSIZE*3] = (int) DESCALE(tmp10 - tmp2, CONST_BITS-PASS1_BITS+1);
-    wsptr[DCTSIZE*1] = (int) DESCALE(tmp12 + tmp0, CONST_BITS-PASS1_BITS+1);
-    wsptr[DCTSIZE*2] = (int) DESCALE(tmp12 - tmp0, CONST_BITS-PASS1_BITS+1);
-  }
-  
-  /* Pass 2: process 4 rows from work array, store into output array. */
-
-  wsptr = workspace;
-  for (ctr = 0; ctr < 4; ctr++) {
-    outptr = output_buf[ctr] + output_col;
-    /* It's not clear whether a zero row test is worthwhile here ... */
-
-#ifndef NO_ZERO_ROW_TEST
-    if ((wsptr[1] | wsptr[2] | wsptr[3] | wsptr[5] | wsptr[6] |
-	 wsptr[7]) == 0) {
-      /* AC terms all zero */
-      JSAMPLE dcval = range_limit[(int) DESCALE((INT32) wsptr[0], PASS1_BITS+3)
-				  & RANGE_MASK];
-      
-      outptr[0] = dcval;
-      outptr[1] = dcval;
-      outptr[2] = dcval;
-      outptr[3] = dcval;
-      
-      wsptr += DCTSIZE;		/* advance pointer to next row */
-      continue;
-    }
-#endif
-    
-    /* Even part */
-    
-    tmp0 = ((INT32) wsptr[0]) << (CONST_BITS+1);
-    
-    tmp2 = MULTIPLY((INT32) wsptr[2], FIX_1_847759065)
-	 + MULTIPLY((INT32) wsptr[6], - FIX_0_765366865);
-    
-    tmp10 = tmp0 + tmp2;
-    tmp12 = tmp0 - tmp2;
-    
-    /* Odd part */
-    
-    z1 = (INT32) wsptr[7];
-    z2 = (INT32) wsptr[5];
-    z3 = (INT32) wsptr[3];
-    z4 = (INT32) wsptr[1];
-    
-    tmp0 = MULTIPLY(z1, - FIX_0_211164243) /* sqrt(2) * (c3-c1) */
-	 + MULTIPLY(z2, FIX_1_451774981) /* sqrt(2) * (c3+c7) */
-	 + MULTIPLY(z3, - FIX_2_172734803) /* sqrt(2) * (-c1-c5) */
-	 + MULTIPLY(z4, FIX_1_061594337); /* sqrt(2) * (c5+c7) */
-    
-    tmp2 = MULTIPLY(z1, - FIX_0_509795579) /* sqrt(2) * (c7-c5) */
-	 + MULTIPLY(z2, - FIX_0_601344887) /* sqrt(2) * (c5-c1) */
-	 + MULTIPLY(z3, FIX_0_899976223) /* sqrt(2) * (c3-c7) */
-	 + MULTIPLY(z4, FIX_2_562915447); /* sqrt(2) * (c1+c3) */
-
-    /* Final output stage */
-    
-    outptr[0] = range_limit[(int) DESCALE(tmp10 + tmp2,
-					  CONST_BITS+PASS1_BITS+3+1)
-			    & RANGE_MASK];
-    outptr[3] = range_limit[(int) DESCALE(tmp10 - tmp2,
-					  CONST_BITS+PASS1_BITS+3+1)
-			    & RANGE_MASK];
-    outptr[1] = range_limit[(int) DESCALE(tmp12 + tmp0,
-					  CONST_BITS+PASS1_BITS+3+1)
-			    & RANGE_MASK];
-    outptr[2] = range_limit[(int) DESCALE(tmp12 - tmp0,
-					  CONST_BITS+PASS1_BITS+3+1)
-			    & RANGE_MASK];
-    
-    wsptr += DCTSIZE;		/* advance pointer to next row */
-  }
-}
-
-
-/*
- * Perform dequantization and inverse DCT on one block of coefficients,
- * producing a reduced-size 2x2 output block.
- */
-
-GLOBAL void
-jpeg_idct_2x2 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
-	       JCOEFPTR coef_block,
-	       JSAMPARRAY output_buf, JDIMENSION output_col)
-{
-  INT32 tmp0, tmp10, z1;
-  JCOEFPTR inptr;
-  ISLOW_MULT_TYPE * quantptr;
-  int * wsptr;
-  JSAMPROW outptr;
-  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
-  int ctr;
-  int workspace[DCTSIZE*2];	/* buffers data between passes */
-  SHIFT_TEMPS
-
-  /* Pass 1: process columns from input, store into work array. */
-
-  inptr = coef_block;
-  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
-  wsptr = workspace;
-  for (ctr = DCTSIZE; ctr > 0; inptr++, quantptr++, wsptr++, ctr--) {
-    /* Don't bother to process columns 2,4,6 */
-    if (ctr == DCTSIZE-2 || ctr == DCTSIZE-4 || ctr == DCTSIZE-6)
-      continue;
-    if ((inptr[DCTSIZE*1] | inptr[DCTSIZE*3] |
-	 inptr[DCTSIZE*5] | inptr[DCTSIZE*7]) == 0) {
-      /* AC terms all zero; we need not examine terms 2,4,6 for 2x2 output */
-      int dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]) << PASS1_BITS;
-      
-      wsptr[DCTSIZE*0] = dcval;
-      wsptr[DCTSIZE*1] = dcval;
-      
-      continue;
-    }
-    
-    /* Even part */
-    
-    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
-    tmp10 = z1 << (CONST_BITS+2);
-    
-    /* Odd part */
-
-    z1 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
-    tmp0 = MULTIPLY(z1, - FIX_0_720959822); /* sqrt(2) * (c7-c5+c3-c1) */
-    z1 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
-    tmp0 += MULTIPLY(z1, FIX_0_850430095); /* sqrt(2) * (-c1+c3+c5+c7) */
-    z1 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
-    tmp0 += MULTIPLY(z1, - FIX_1_272758580); /* sqrt(2) * (-c1+c3-c5-c7) */
-    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
-    tmp0 += MULTIPLY(z1, FIX_3_624509785); /* sqrt(2) * (c1+c3+c5+c7) */
-
-    /* Final output stage */
-    
-    wsptr[DCTSIZE*0] = (int) DESCALE(tmp10 + tmp0, CONST_BITS-PASS1_BITS+2);
-    wsptr[DCTSIZE*1] = (int) DESCALE(tmp10 - tmp0, CONST_BITS-PASS1_BITS+2);
-  }
-  
-  /* Pass 2: process 2 rows from work array, store into output array. */
-
-  wsptr = workspace;
-  for (ctr = 0; ctr < 2; ctr++) {
-    outptr = output_buf[ctr] + output_col;
-    /* It's not clear whether a zero row test is worthwhile here ... */
-
-#ifndef NO_ZERO_ROW_TEST
-    if ((wsptr[1] | wsptr[3] | wsptr[5] | wsptr[7]) == 0) {
-      /* AC terms all zero */
-      JSAMPLE dcval = range_limit[(int) DESCALE((INT32) wsptr[0], PASS1_BITS+3)
-				  & RANGE_MASK];
-      
-      outptr[0] = dcval;
-      outptr[1] = dcval;
-      
-      wsptr += DCTSIZE;		/* advance pointer to next row */
-      continue;
-    }
-#endif
-    
-    /* Even part */
-    
-    tmp10 = ((INT32) wsptr[0]) << (CONST_BITS+2);
-    
-    /* Odd part */
-
-    tmp0 = MULTIPLY((INT32) wsptr[7], - FIX_0_720959822) /* sqrt(2) * (c7-c5+c3-c1) */
-	 + MULTIPLY((INT32) wsptr[5], FIX_0_850430095) /* sqrt(2) * (-c1+c3+c5+c7) */
-	 + MULTIPLY((INT32) wsptr[3], - FIX_1_272758580) /* sqrt(2) * (-c1+c3-c5-c7) */
-	 + MULTIPLY((INT32) wsptr[1], FIX_3_624509785); /* sqrt(2) * (c1+c3+c5+c7) */
-
-    /* Final output stage */
-    
-    outptr[0] = range_limit[(int) DESCALE(tmp10 + tmp0,
-					  CONST_BITS+PASS1_BITS+3+2)
-			    & RANGE_MASK];
-    outptr[1] = range_limit[(int) DESCALE(tmp10 - tmp0,
-					  CONST_BITS+PASS1_BITS+3+2)
-			    & RANGE_MASK];
-    
-    wsptr += DCTSIZE;		/* advance pointer to next row */
-  }
-}
-
-
-/*
- * Perform dequantization and inverse DCT on one block of coefficients,
- * producing a reduced-size 1x1 output block.
- */
-
-GLOBAL void
-jpeg_idct_1x1 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
-	       JCOEFPTR coef_block,
-	       JSAMPARRAY output_buf, JDIMENSION output_col)
-{
-  int dcval;
-  ISLOW_MULT_TYPE * quantptr;
-  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
-  SHIFT_TEMPS
-
-  /* We hardly need an inverse DCT routine for this: just take the
-   * average pixel value, which is one-eighth of the DC coefficient.
-   */
-  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
-  dcval = DEQUANTIZE(coef_block[0], quantptr[0]);
-  dcval = (int) DESCALE((INT32) dcval, 3);
-
-  output_buf[0][output_col] = range_limit[dcval & RANGE_MASK];
-}
-
-#endif /* IDCT_SCALING_SUPPORTED */
diff -NEaurb neo/renderer/jpeg-6/jinclude.h neo/renderer/jpeg-6/jinclude.h
--- neo/renderer/jpeg-6/jinclude.h	2013-08-14 01:47:52 +0000
+++ neo/renderer/jpeg-6/jinclude.h	1970-01-01 00:00:00 +0000
@@ -1,91 +0,0 @@
-/*
- * jinclude.h
- *
- * Copyright (C) 1991-1994, Thomas G. Lane.
- * This file is part of the Independent JPEG Group's software.
- * For conditions of distribution and use, see the accompanying README file.
- *
- * This file exists to provide a single place to fix any problems with
- * including the wrong system include files.  (Common problems are taken
- * care of by the standard jconfig symbols, but on really weird systems
- * you may have to edit this file.)
- *
- * NOTE: this file is NOT intended to be included by applications using the
- * JPEG library.  Most applications need only include jpeglib.h.
- */
-
-
-/* Include auto-config file to find out which system include files we need. */
-
-#include "../jpeg-6/jconfig.h"		/* auto configuration options */
-#define JCONFIG_INCLUDED	/* so that jpeglib.h doesn't do it again */
-
-/*
- * We need the NULL macro and size_t typedef.
- * On an ANSI-conforming system it is sufficient to include <stddef.h>.
- * Otherwise, we get them from <stdlib.h> or <stdio.h>; we may have to
- * pull in <sys/types.h> as well.
- * Note that the core JPEG library does not require <stdio.h>;
- * only the default error handler and data source/destination modules do.
- * But we must pull it in because of the references to FILE in jpeglib.h.
- * You can remove those references if you want to compile without <stdio.h>.
- */
-
-#ifdef HAVE_STDDEF_H
-#include <stddef.h>
-#endif
-
-#ifdef HAVE_STDLIB_H
-#include <stdlib.h>
-#endif
-
-#ifdef NEED_SYS_TYPES_H
-#include <sys/types.h>
-#endif
-
-#include <stdio.h>
-
-/*
- * We need memory copying and zeroing functions, plus strncpy().
- * ANSI and System V implementations declare these in <string.h>.
- * BSD doesn't have the mem() functions, but it does have bcopy()/bzero().
- * Some systems may declare memset and memcpy in <memory.h>.
- *
- * NOTE: we assume the size parameters to these functions are of type size_t.
- * Change the casts in these macros if not!
- */
-
-#ifdef NEED_BSD_STRINGS
-
-#include <strings.h>
-#define MEMZERO(target,size)	bzero((void *)(target), (size_t)(size))
-#define MEMCOPY(dest,src,size)	bcopy((const void *)(src), (void *)(dest), (size_t)(size))
-
-#else /* not BSD, assume ANSI/SysV string lib */
-
-#include <string.h>
-#define MEMZERO(target,size)	memset((void *)(target), 0, (size_t)(size))
-#define MEMCOPY(dest,src,size)	memcpy((void *)(dest), (const void *)(src), (size_t)(size))
-
-#endif
-
-/*
- * In ANSI C, and indeed any rational implementation, size_t is also the
- * type returned by sizeof().  However, it seems there are some irrational
- * implementations out there, in which sizeof() returns an int even though
- * size_t is defined as long or unsigned long.  To ensure consistent results
- * we always use this SIZEOF() macro in place of using sizeof() directly.
- */
-
-#define SIZEOF(object)	((size_t) sizeof(object))
-
-/*
- * The modules that use fread() and fwrite() always invoke them through
- * these macros.  On some systems you may need to twiddle the argument casts.
- * CAUTION: argument order is different from underlying functions!
- */
-
-#define JFREAD(file,buf,sizeofbuf)  \
-  ((size_t) fread((void *) (buf), (size_t) 1, (size_t) (sizeofbuf), (file)))
-#define JFWRITE(file,buf,sizeofbuf)  \
-  ((size_t) fwrite((const void *) (buf), (size_t) 1, (size_t) (sizeofbuf), (file)))
diff -NEaurb neo/renderer/jpeg-6/jload.c neo/renderer/jpeg-6/jload.c
--- neo/renderer/jpeg-6/jload.c	2011-12-26 04:15:38 +0000
+++ neo/renderer/jpeg-6/jload.c	1970-01-01 00:00:00 +0000
@@ -1,145 +0,0 @@
-
-#include "../Shared/Shared.h"
-#include "..\Common\Common.h"
-
-/*
- * Include file for users of JPEG library.
- * You will need to have included system headers that define at least
- * the typedefs FILE and size_t before you can include jpeglib.h.
- * (stdio.h is sufficient on ANSI-conforming systems.)
- * You may also wish to include "jerror.h".
- */
-
-#include "jpeglib.h"
-
-
-int LoadJPG( const char *filename, unsigned char **pic, int *width, int *height ) {
-  /* This struct contains the JPEG decompression parameters and pointers to
-   * working space (which is allocated as needed by the JPEG library).
-   */
-  struct jpeg_decompress_struct cinfo;
-  /* We use our private extension JPEG error handler.
-   * Note that this struct must live as long as the main JPEG parameter
-   * struct, to avoid dangling-pointer problems.
-   */
-  /* This struct represents a JPEG error handler.  It is declared separately
-   * because applications often want to supply a specialized error handler
-   * (see the second half of this file for an example).  But here we just
-   * take the easy way out and use the standard error handler, which will
-   * print a message on stderr and call exit() if compression fails.
-   * Note that this struct must live as long as the main JPEG parameter
-   * struct, to avoid dangling-pointer problems.
-   */
-  struct jpeg_error_mgr jerr;
-  /* More stuff */
-  fileHandle_t infile;		/* source file */
-  JSAMPARRAY buffer;		/* Output row buffer */
-  int row_stride;		/* physical row width in output buffer */
-  unsigned char *out;
-
-  /* In this example we want to open the input file before doing anything else,
-   * so that the setjmp() error recovery below can assume the file is open.
-   * VERY IMPORTANT: use "b" option to fopen() if you are on a machine that
-   * requires it in order to read binary files.
-   */
-
-  FS_FOpenFileRead( filename, &infile, qfalse );
-  if (infile == 0) {
-    return 0;
-  }
-
-  /* Step 1: allocate and initialize JPEG decompression object */
-
-  /* We have to set up the error handler first, in case the initialization
-   * step fails.  (Unlikely, but it could happen if you are out of memory.)
-   * This routine fills in the contents of struct jerr, and returns jerr's
-   * address which we place into the link field in cinfo.
-   */
-  cinfo.err = jpeg_std_error(&jerr);
-
-  /* Now we can initialize the JPEG decompression object. */
-  jpeg_create_decompress(&cinfo);
-
-  /* Step 2: specify data source (eg, a file) */
-
-  jpeg_stdio_src(&cinfo, infile);
-
-  /* Step 3: read file parameters with jpeg_read_header() */
-
-  (void) jpeg_read_header(&cinfo, TRUE);
-  /* We can ignore the return value from jpeg_read_header since
-   *   (a) suspension is not possible with the stdio data source, and
-   *   (b) we passed TRUE to reject a tables-only JPEG file as an error.
-   * See libjpeg.doc for more info.
-   */
-
-  /* Step 4: set parameters for decompression */
-
-  /* In this example, we don't need to change any of the defaults set by
-   * jpeg_read_header(), so we do nothing here.
-   */
-
-  /* Step 5: Start decompressor */
-
-  (void) jpeg_start_decompress(&cinfo);
-  /* We can ignore the return value since suspension is not possible
-   * with the stdio data source.
-   */
-
-  /* We may need to do some setup of our own at this point before reading
-   * the data.  After jpeg_start_decompress() we have the correct scaled
-   * output image dimensions available, as well as the output colormap
-   * if we asked for color quantization.
-   * In this example, we need to make an output work buffer of the right size.
-   */ 
-  /* JSAMPLEs per row in output buffer */
-  row_stride = cinfo.output_width * cinfo.output_components;
-
-  out = Z_Malloc(cinfo.output_width*cinfo.output_height*cinfo.output_components);
-
-  *pic = out;
-  *width = cinfo.output_width;
-  *height = cinfo.output_height;
-
-  /* Step 6: while (scan lines remain to be read) */
-  /*           jpeg_read_scanlines(...); */
-
-  /* Here we use the library's state variable cinfo.output_scanline as the
-   * loop counter, so that we don't have to keep track ourselves.
-   */
-  while (cinfo.output_scanline < cinfo.output_height) {
-    /* jpeg_read_scanlines expects an array of pointers to scanlines.
-     * Here the array is only one element long, but you could ask for
-     * more than one scanline at a time if that's more convenient.
-     */
-	buffer = (JSAMPARRAY)out+(row_stride*cinfo.output_scanline);
-    (void) jpeg_read_scanlines(&cinfo, buffer, 1);
-  }
-
-  /* Step 7: Finish decompression */
-
-  (void) jpeg_finish_decompress(&cinfo);
-  /* We can ignore the return value since suspension is not possible
-   * with the stdio data source.
-   */
-
-  /* Step 8: Release JPEG decompression object */
-
-  /* This is an important step since it will release a good deal of memory. */
-  jpeg_destroy_decompress(&cinfo);
-
-  /* After finish_decompress, we can close the input file.
-   * Here we postpone it until after no more JPEG errors are possible,
-   * so as to simplify the setjmp error logic above.  (Actually, I don't
-   * think that jpeg_destroy can do an error exit, but why assume anything...)
-   */
-  FS_FCloseFile(infile);
-
-  /* At this point you may want to check to see whether any corrupt-data
-   * warnings occurred (test whether jerr.pub.num_warnings is nonzero).
-   */
-
-  /* And we're done! */
-  return 1;
-}
-
diff -NEaurb neo/renderer/jpeg-6/jmemansi.c neo/renderer/jpeg-6/jmemansi.c
--- neo/renderer/jpeg-6/jmemansi.c	2011-12-26 04:15:38 +0000
+++ neo/renderer/jpeg-6/jmemansi.c	1970-01-01 00:00:00 +0000
@@ -1,167 +0,0 @@
-/*
- * jmemansi.c
- *
- * Copyright (C) 1992-1994, Thomas G. Lane.
- * This file is part of the Independent JPEG Group's software.
- * For conditions of distribution and use, see the accompanying README file.
- *
- * This file provides a simple generic implementation of the system-
- * dependent portion of the JPEG memory manager.  This implementation
- * assumes that you have the ANSI-standard library routine tmpfile().
- * Also, the problem of determining the amount of memory available
- * is shoved onto the user.
- */
-
-#define JPEG_INTERNALS
-#include "jinclude.h"
-#include "jpeglib.h"
-#include "jmemsys.h"		/* import the system-dependent declarations */
-
-#ifndef HAVE_STDLIB_H		/* <stdlib.h> should declare malloc(),free() */
-extern void * malloc JPP((size_t size));
-extern void free JPP((void *ptr));
-#endif
-
-#ifndef SEEK_SET		/* pre-ANSI systems may not define this; */
-#define SEEK_SET  0		/* if not, assume 0 is correct */
-#endif
-
-
-/*
- * Memory allocation and freeing are controlled by the regular library
- * routines malloc() and free().
- */
-
-GLOBAL void *
-jpeg_get_small (j_common_ptr cinfo, size_t sizeofobject)
-{
-  return (void *) malloc(sizeofobject);
-}
-
-GLOBAL void
-jpeg_free_small (j_common_ptr cinfo, void * object, size_t sizeofobject)
-{
-  free(object);
-}
-
-
-/*
- * "Large" objects are treated the same as "small" ones.
- * NB: although we include FAR keywords in the routine declarations,
- * this file won't actually work in 80x86 small/medium model; at least,
- * you probably won't be able to process useful-size images in only 64KB.
- */
-
-GLOBAL void FAR *
-jpeg_get_large (j_common_ptr cinfo, size_t sizeofobject)
-{
-  return (void FAR *) malloc(sizeofobject);
-}
-
-GLOBAL void
-jpeg_free_large (j_common_ptr cinfo, void FAR * object, size_t sizeofobject)
-{
-  free(object);
-}
-
-
-/*
- * This routine computes the total memory space available for allocation.
- * It's impossible to do this in a portable way; our current solution is
- * to make the user tell us (with a default value set at compile time).
- * If you can actually get the available space, it's a good idea to subtract
- * a slop factor of 5% or so.
- */
-
-#ifndef DEFAULT_MAX_MEM		/* so can override from makefile */
-#define DEFAULT_MAX_MEM		1000000L /* default: one megabyte */
-#endif
-
-GLOBAL long
-jpeg_mem_available (j_common_ptr cinfo, long min_bytes_needed,
-		    long max_bytes_needed, long already_allocated)
-{
-  return cinfo->mem->max_memory_to_use - already_allocated;
-}
-
-
-/*
- * Backing store (temporary file) management.
- * Backing store objects are only used when the value returned by
- * jpeg_mem_available is less than the total space needed.  You can dispense
- * with these routines if you have plenty of virtual memory; see jmemnobs.c.
- */
-
-
-METHODDEF void
-read_backing_store (j_common_ptr cinfo, backing_store_ptr info,
-		    void FAR * buffer_address,
-		    long file_offset, long byte_count)
-{
-  if (fseek(info->temp_file, file_offset, SEEK_SET))
-    ERREXIT(cinfo, JERR_TFILE_SEEK);
-  if (JFREAD(info->temp_file, buffer_address, byte_count)
-      != (size_t) byte_count)
-    ERREXIT(cinfo, JERR_TFILE_READ);
-}
-
-
-METHODDEF void
-write_backing_store (j_common_ptr cinfo, backing_store_ptr info,
-		     void FAR * buffer_address,
-		     long file_offset, long byte_count)
-{
-  if (fseek(info->temp_file, file_offset, SEEK_SET))
-    ERREXIT(cinfo, JERR_TFILE_SEEK);
-  if (JFWRITE(info->temp_file, buffer_address, byte_count)
-      != (size_t) byte_count)
-    ERREXIT(cinfo, JERR_TFILE_WRITE);
-}
-
-
-METHODDEF void
-close_backing_store (j_common_ptr cinfo, backing_store_ptr info)
-{
-  fclose(info->temp_file);
-  /* Since this implementation uses tmpfile() to create the file,
-   * no explicit file deletion is needed.
-   */
-}
-
-
-/*
- * Initial opening of a backing-store object.
- *
- * This version uses tmpfile(), which constructs a suitable file name
- * behind the scenes.  We don't have to use info->temp_name[] at all;
- * indeed, we can't even find out the actual name of the temp file.
- */
-
-GLOBAL void
-jpeg_open_backing_store (j_common_ptr cinfo, backing_store_ptr info,
-			 long total_bytes_needed)
-{
-  if ((info->temp_file = tmpfile()) == NULL)
-    ERREXITS(cinfo, JERR_TFILE_CREATE, "");
-  info->read_backing_store = read_backing_store;
-  info->write_backing_store = write_backing_store;
-  info->close_backing_store = close_backing_store;
-}
-
-
-/*
- * These routines take care of any system-dependent initialization and
- * cleanup required.
- */
-
-GLOBAL long
-jpeg_mem_init (j_common_ptr cinfo)
-{
-  return DEFAULT_MAX_MEM;	/* default for max_memory_to_use */
-}
-
-GLOBAL void
-jpeg_mem_term (j_common_ptr cinfo)
-{
-  /* no work */
-}
diff -NEaurb neo/renderer/jpeg-6/jmemdos.c neo/renderer/jpeg-6/jmemdos.c
--- neo/renderer/jpeg-6/jmemdos.c	2011-12-26 04:15:38 +0000
+++ neo/renderer/jpeg-6/jmemdos.c	1970-01-01 00:00:00 +0000
@@ -1,634 +0,0 @@
-/*
- * jmemdos.c
- *
- * Copyright (C) 1992-1994, Thomas G. Lane.
- * This file is part of the Independent JPEG Group's software.
- * For conditions of distribution and use, see the accompanying README file.
- *
- * This file provides an MS-DOS-compatible implementation of the system-
- * dependent portion of the JPEG memory manager.  Temporary data can be
- * stored in extended or expanded memory as well as in regular DOS files.
- *
- * If you use this file, you must be sure that NEED_FAR_POINTERS is defined
- * if you compile in a small-data memory model; it should NOT be defined if
- * you use a large-data memory model.  This file is not recommended if you
- * are using a flat-memory-space 386 environment such as DJGCC or Watcom C.
- * Also, this code will NOT work if struct fields are aligned on greater than
- * 2-byte boundaries.
- *
- * Based on code contributed by Ge' Weijers.
- */
-
-/*
- * If you have both extended and expanded memory, you may want to change the
- * order in which they are tried in jopen_backing_store.  On a 286 machine
- * expanded memory is usually faster, since extended memory access involves
- * an expensive protected-mode-and-back switch.  On 386 and better, extended
- * memory is usually faster.  As distributed, the code tries extended memory
- * first (what? not everyone has a 386? :-).
- *
- * You can disable use of extended/expanded memory entirely by altering these
- * definitions or overriding them from the Makefile (eg, -DEMS_SUPPORTED=0).
- */
-
-#ifndef XMS_SUPPORTED
-#define XMS_SUPPORTED  1
-#endif
-#ifndef EMS_SUPPORTED
-#define EMS_SUPPORTED  1
-#endif
-
-
-#define JPEG_INTERNALS
-#include "jinclude.h"
-#include "jpeglib.h"
-#include "jmemsys.h"		/* import the system-dependent declarations */
-
-#ifndef HAVE_STDLIB_H		/* <stdlib.h> should declare these */
-extern void * malloc JPP((size_t size));
-extern void free JPP((void *ptr));
-extern char * getenv JPP((const char * name));
-#endif
-
-#ifdef NEED_FAR_POINTERS
-
-#ifdef __TURBOC__
-/* These definitions work for Borland C (Turbo C) */
-#include <alloc.h>		/* need farmalloc(), farfree() */
-#define far_malloc(x)	farmalloc(x)
-#define far_free(x)	farfree(x)
-#else
-/* These definitions work for Microsoft C and compatible compilers */
-#include <malloc.h>		/* need _fmalloc(), _ffree() */
-#define far_malloc(x)	_fmalloc(x)
-#define far_free(x)	_ffree(x)
-#endif
-
-#else /* not NEED_FAR_POINTERS */
-
-#define far_malloc(x)	malloc(x)
-#define far_free(x)	free(x)
-
-#endif /* NEED_FAR_POINTERS */
-
-#ifdef DONT_USE_B_MODE		/* define mode parameters for fopen() */
-#define READ_BINARY	"r"
-#else
-#define READ_BINARY	"rb"
-#endif
-
-#if MAX_ALLOC_CHUNK >= 65535L	/* make sure jconfig.h got this right */
-  MAX_ALLOC_CHUNK should be less than 64K. /* deliberate syntax error */
-#endif
-
-
-/*
- * Declarations for assembly-language support routines (see jmemdosa.asm).
- *
- * The functions are declared "far" as are all pointer arguments;
- * this ensures the assembly source code will work regardless of the
- * compiler memory model.  We assume "short" is 16 bits, "long" is 32.
- */
-
-typedef void far * XMSDRIVER;	/* actually a pointer to code */
-typedef struct {		/* registers for calling XMS driver */
-	unsigned short ax, dx, bx;
-	void far * ds_si;
-      } XMScontext;
-typedef struct {		/* registers for calling EMS driver */
-	unsigned short ax, dx, bx;
-	void far * ds_si;
-      } EMScontext;
-
-EXTERN short far jdos_open JPP((short far * handle, char far * filename));
-EXTERN short far jdos_close JPP((short handle));
-EXTERN short far jdos_seek JPP((short handle, long offset));
-EXTERN short far jdos_read JPP((short handle, void far * buffer,
-				unsigned short count));
-EXTERN short far jdos_write JPP((short handle, void far * buffer,
-				 unsigned short count));
-EXTERN void far jxms_getdriver JPP((XMSDRIVER far *));
-EXTERN void far jxms_calldriver JPP((XMSDRIVER, XMScontext far *));
-EXTERN short far jems_available JPP((void));
-EXTERN void far jems_calldriver JPP((EMScontext far *));
-
-
-/*
- * Selection of a file name for a temporary file.
- * This is highly system-dependent, and you may want to customize it.
- */
-
-static int next_file_num;	/* to distinguish among several temp files */
-
-LOCAL void
-select_file_name (char * fname)
-{
-  const char * env;
-  char * ptr;
-  FILE * tfile;
-
-  /* Keep generating file names till we find one that's not in use */
-  for (;;) {
-    /* Get temp directory name from environment TMP or TEMP variable;
-     * if none, use "."
-     */
-    if ((env = (const char *) getenv("TMP")) == NULL)
-      if ((env = (const char *) getenv("TEMP")) == NULL)
-	env = ".";
-    if (*env == '\0')		/* null string means "." */
-      env = ".";
-    ptr = fname;		/* copy name to fname */
-    while (*env != '\0')
-      *ptr++ = *env++;
-    if (ptr[-1] != '\\' && ptr[-1] != '/')
-      *ptr++ = '\\';		/* append backslash if not in env variable */
-    /* Append a suitable file name */
-    next_file_num++;		/* advance counter */
-    sprintf(ptr, "JPG%03d.TMP", next_file_num);
-    /* Probe to see if file name is already in use */
-    if ((tfile = fopen(fname, READ_BINARY)) == NULL)
-      break;
-    fclose(tfile);		/* oops, it's there; close tfile & try again */
-  }
-}
-
-
-/*
- * Near-memory allocation and freeing are controlled by the regular library
- * routines malloc() and free().
- */
-
-GLOBAL void *
-jpeg_get_small (j_common_ptr cinfo, size_t sizeofobject)
-{
-  return (void *) malloc(sizeofobject);
-}
-
-GLOBAL void
-jpeg_free_small (j_common_ptr cinfo, void * object, size_t sizeofobject)
-{
-  free(object);
-}
-
-
-/*
- * "Large" objects are allocated in far memory, if possible
- */
-
-GLOBAL void FAR *
-jpeg_get_large (j_common_ptr cinfo, size_t sizeofobject)
-{
-  return (void FAR *) far_malloc(sizeofobject);
-}
-
-GLOBAL void
-jpeg_free_large (j_common_ptr cinfo, void FAR * object, size_t sizeofobject)
-{
-  far_free(object);
-}
-
-
-/*
- * This routine computes the total memory space available for allocation.
- * It's impossible to do this in a portable way; our current solution is
- * to make the user tell us (with a default value set at compile time).
- * If you can actually get the available space, it's a good idea to subtract
- * a slop factor of 5% or so.
- */
-
-#ifndef DEFAULT_MAX_MEM		/* so can override from makefile */
-#define DEFAULT_MAX_MEM		300000L /* for total usage about 450K */
-#endif
-
-GLOBAL long
-jpeg_mem_available (j_common_ptr cinfo, long min_bytes_needed,
-		    long max_bytes_needed, long already_allocated)
-{
-  return cinfo->mem->max_memory_to_use - already_allocated;
-}
-
-
-/*
- * Backing store (temporary file) management.
- * Backing store objects are only used when the value returned by
- * jpeg_mem_available is less than the total space needed.  You can dispense
- * with these routines if you have plenty of virtual memory; see jmemnobs.c.
- */
-
-/*
- * For MS-DOS we support three types of backing storage:
- *   1. Conventional DOS files.  We access these by direct DOS calls rather
- *      than via the stdio package.  This provides a bit better performance,
- *      but the real reason is that the buffers to be read or written are FAR.
- *      The stdio library for small-data memory models can't cope with that.
- *   2. Extended memory, accessed per the XMS V2.0 specification.
- *   3. Expanded memory, accessed per the LIM/EMS 4.0 specification.
- * You'll need copies of those specs to make sense of the related code.
- * The specs are available by Internet FTP from the SIMTEL archives 
- * (oak.oakland.edu and its various mirror sites).  See files
- * pub/msdos/microsoft/xms20.arc and pub/msdos/info/limems41.zip.
- */
-
-
-/*
- * Access methods for a DOS file.
- */
-
-
-METHODDEF void
-read_file_store (j_common_ptr cinfo, backing_store_ptr info,
-		 void FAR * buffer_address,
-		 long file_offset, long byte_count)
-{
-  if (jdos_seek(info->handle.file_handle, file_offset))
-    ERREXIT(cinfo, JERR_TFILE_SEEK);
-  /* Since MAX_ALLOC_CHUNK is less than 64K, byte_count will be too. */
-  if (byte_count > 65535L)	/* safety check */
-    ERREXIT(cinfo, JERR_BAD_ALLOC_CHUNK);
-  if (jdos_read(info->handle.file_handle, buffer_address,
-		(unsigned short) byte_count))
-    ERREXIT(cinfo, JERR_TFILE_READ);
-}
-
-
-METHODDEF void
-write_file_store (j_common_ptr cinfo, backing_store_ptr info,
-		  void FAR * buffer_address,
-		  long file_offset, long byte_count)
-{
-  if (jdos_seek(info->handle.file_handle, file_offset))
-    ERREXIT(cinfo, JERR_TFILE_SEEK);
-  /* Since MAX_ALLOC_CHUNK is less than 64K, byte_count will be too. */
-  if (byte_count > 65535L)	/* safety check */
-    ERREXIT(cinfo, JERR_BAD_ALLOC_CHUNK);
-  if (jdos_write(info->handle.file_handle, buffer_address,
-		 (unsigned short) byte_count))
-    ERREXIT(cinfo, JERR_TFILE_WRITE);
-}
-
-
-METHODDEF void
-close_file_store (j_common_ptr cinfo, backing_store_ptr info)
-{
-  jdos_close(info->handle.file_handle);	/* close the file */
-  remove(info->temp_name);	/* delete the file */
-/* If your system doesn't have remove(), try unlink() instead.
- * remove() is the ANSI-standard name for this function, but
- * unlink() was more common in pre-ANSI systems.
- */
-  TRACEMSS(cinfo, 1, JTRC_TFILE_CLOSE, info->temp_name);
-}
-
-
-LOCAL boolean
-open_file_store (j_common_ptr cinfo, backing_store_ptr info,
-		 long total_bytes_needed)
-{
-  short handle;
-
-  select_file_name(info->temp_name);
-  if (jdos_open((short far *) & handle, (char far *) info->temp_name)) {
-    /* might as well exit since jpeg_open_backing_store will fail anyway */
-    ERREXITS(cinfo, JERR_TFILE_CREATE, info->temp_name);
-    return FALSE;
-  }
-  info->handle.file_handle = handle;
-  info->read_backing_store = read_file_store;
-  info->write_backing_store = write_file_store;
-  info->close_backing_store = close_file_store;
-  TRACEMSS(cinfo, 1, JTRC_TFILE_OPEN, info->temp_name);
-  return TRUE;			/* succeeded */
-}
-
-
-/*
- * Access methods for extended memory.
- */
-
-#if XMS_SUPPORTED
-
-static XMSDRIVER xms_driver;	/* saved address of XMS driver */
-
-typedef union {			/* either long offset or real-mode pointer */
-	long offset;
-	void far * ptr;
-      } XMSPTR;
-
-typedef struct {		/* XMS move specification structure */
-	long length;
-	XMSH src_handle;
-	XMSPTR src;
-	XMSH dst_handle;
-	XMSPTR dst;
-      } XMSspec;
-
-#define ODD(X)	(((X) & 1L) != 0)
-
-
-METHODDEF void
-read_xms_store (j_common_ptr cinfo, backing_store_ptr info,
-		void FAR * buffer_address,
-		long file_offset, long byte_count)
-{
-  XMScontext ctx;
-  XMSspec spec;
-  char endbuffer[2];
-
-  /* The XMS driver can't cope with an odd length, so handle the last byte
-   * specially if byte_count is odd.  We don't expect this to be common.
-   */
-
-  spec.length = byte_count & (~ 1L);
-  spec.src_handle = info->handle.xms_handle;
-  spec.src.offset = file_offset;
-  spec.dst_handle = 0;
-  spec.dst.ptr = buffer_address;
-  
-  ctx.ds_si = (void far *) & spec;
-  ctx.ax = 0x0b00;		/* EMB move */
-  jxms_calldriver(xms_driver, (XMScontext far *) & ctx);
-  if (ctx.ax != 1)
-    ERREXIT(cinfo, JERR_XMS_READ);
-
-  if (ODD(byte_count)) {
-    read_xms_store(cinfo, info, (void FAR *) endbuffer,
-		   file_offset + byte_count - 1L, 2L);
-    ((char FAR *) buffer_address)[byte_count - 1L] = endbuffer[0];
-  }
-}
-
-
-METHODDEF void
-write_xms_store (j_common_ptr cinfo, backing_store_ptr info,
-		 void FAR * buffer_address,
-		 long file_offset, long byte_count)
-{
-  XMScontext ctx;
-  XMSspec spec;
-  char endbuffer[2];
-
-  /* The XMS driver can't cope with an odd length, so handle the last byte
-   * specially if byte_count is odd.  We don't expect this to be common.
-   */
-
-  spec.length = byte_count & (~ 1L);
-  spec.src_handle = 0;
-  spec.src.ptr = buffer_address;
-  spec.dst_handle = info->handle.xms_handle;
-  spec.dst.offset = file_offset;
-
-  ctx.ds_si = (void far *) & spec;
-  ctx.ax = 0x0b00;		/* EMB move */
-  jxms_calldriver(xms_driver, (XMScontext far *) & ctx);
-  if (ctx.ax != 1)
-    ERREXIT(cinfo, JERR_XMS_WRITE);
-
-  if (ODD(byte_count)) {
-    read_xms_store(cinfo, info, (void FAR *) endbuffer,
-		   file_offset + byte_count - 1L, 2L);
-    endbuffer[0] = ((char FAR *) buffer_address)[byte_count - 1L];
-    write_xms_store(cinfo, info, (void FAR *) endbuffer,
-		    file_offset + byte_count - 1L, 2L);
-  }
-}
-
-
-METHODDEF void
-close_xms_store (j_common_ptr cinfo, backing_store_ptr info)
-{
-  XMScontext ctx;
-
-  ctx.dx = info->handle.xms_handle;
-  ctx.ax = 0x0a00;
-  jxms_calldriver(xms_driver, (XMScontext far *) & ctx);
-  TRACEMS1(cinfo, 1, JTRC_XMS_CLOSE, info->handle.xms_handle);
-  /* we ignore any error return from the driver */
-}
-
-
-LOCAL boolean
-open_xms_store (j_common_ptr cinfo, backing_store_ptr info,
-		long total_bytes_needed)
-{
-  XMScontext ctx;
-
-  /* Get address of XMS driver */
-  jxms_getdriver((XMSDRIVER far *) & xms_driver);
-  if (xms_driver == NULL)
-    return FALSE;		/* no driver to be had */
-
-  /* Get version number, must be >= 2.00 */
-  ctx.ax = 0x0000;
-  jxms_calldriver(xms_driver, (XMScontext far *) & ctx);
-  if (ctx.ax < (unsigned short) 0x0200)
-    return FALSE;
-
-  /* Try to get space (expressed in kilobytes) */
-  ctx.dx = (unsigned short) ((total_bytes_needed + 1023L) >> 10);
-  ctx.ax = 0x0900;
-  jxms_calldriver(xms_driver, (XMScontext far *) & ctx);
-  if (ctx.ax != 1)
-    return FALSE;
-
-  /* Succeeded, save the handle and away we go */
-  info->handle.xms_handle = ctx.dx;
-  info->read_backing_store = read_xms_store;
-  info->write_backing_store = write_xms_store;
-  info->close_backing_store = close_xms_store;
-  TRACEMS1(cinfo, 1, JTRC_XMS_OPEN, ctx.dx);
-  return TRUE;			/* succeeded */
-}
-
-#endif /* XMS_SUPPORTED */
-
-
-/*
- * Access methods for expanded memory.
- */
-
-#if EMS_SUPPORTED
-
-/* The EMS move specification structure requires word and long fields aligned
- * at odd byte boundaries.  Some compilers will align struct fields at even
- * byte boundaries.  While it's usually possible to force byte alignment,
- * that causes an overall performance penalty and may pose problems in merging
- * JPEG into a larger application.  Instead we accept some rather dirty code
- * here.  Note this code would fail if the hardware did not allow odd-byte
- * word & long accesses, but all 80x86 CPUs do.
- */
-
-typedef void far * EMSPTR;
-
-typedef union {			/* EMS move specification structure */
-	long length;		/* It's easy to access first 4 bytes */
-	char bytes[18];		/* Misaligned fields in here! */
-      } EMSspec;
-
-/* Macros for accessing misaligned fields */
-#define FIELD_AT(spec,offset,type)  (*((type *) &(spec.bytes[offset])))
-#define SRC_TYPE(spec)		FIELD_AT(spec,4,char)
-#define SRC_HANDLE(spec)	FIELD_AT(spec,5,EMSH)
-#define SRC_OFFSET(spec)	FIELD_AT(spec,7,unsigned short)
-#define SRC_PAGE(spec)		FIELD_AT(spec,9,unsigned short)
-#define SRC_PTR(spec)		FIELD_AT(spec,7,EMSPTR)
-#define DST_TYPE(spec)		FIELD_AT(spec,11,char)
-#define DST_HANDLE(spec)	FIELD_AT(spec,12,EMSH)
-#define DST_OFFSET(spec)	FIELD_AT(spec,14,unsigned short)
-#define DST_PAGE(spec)		FIELD_AT(spec,16,unsigned short)
-#define DST_PTR(spec)		FIELD_AT(spec,14,EMSPTR)
-
-#define EMSPAGESIZE	16384L	/* gospel, see the EMS specs */
-
-#define HIBYTE(W)  (((W) >> 8) & 0xFF)
-#define LOBYTE(W)  ((W) & 0xFF)
-
-
-METHODDEF void
-read_ems_store (j_common_ptr cinfo, backing_store_ptr info,
-		void FAR * buffer_address,
-		long file_offset, long byte_count)
-{
-  EMScontext ctx;
-  EMSspec spec;
-
-  spec.length = byte_count;
-  SRC_TYPE(spec) = 1;
-  SRC_HANDLE(spec) = info->handle.ems_handle;
-  SRC_PAGE(spec)   = (unsigned short) (file_offset / EMSPAGESIZE);
-  SRC_OFFSET(spec) = (unsigned short) (file_offset % EMSPAGESIZE);
-  DST_TYPE(spec) = 0;
-  DST_HANDLE(spec) = 0;
-  DST_PTR(spec)    = buffer_address;
-  
-  ctx.ds_si = (void far *) & spec;
-  ctx.ax = 0x5700;		/* move memory region */
-  jems_calldriver((EMScontext far *) & ctx);
-  if (HIBYTE(ctx.ax) != 0)
-    ERREXIT(cinfo, JERR_EMS_READ);
-}
-
-
-METHODDEF void
-write_ems_store (j_common_ptr cinfo, backing_store_ptr info,
-		 void FAR * buffer_address,
-		 long file_offset, long byte_count)
-{
-  EMScontext ctx;
-  EMSspec spec;
-
-  spec.length = byte_count;
-  SRC_TYPE(spec) = 0;
-  SRC_HANDLE(spec) = 0;
-  SRC_PTR(spec)    = buffer_address;
-  DST_TYPE(spec) = 1;
-  DST_HANDLE(spec) = info->handle.ems_handle;
-  DST_PAGE(spec)   = (unsigned short) (file_offset / EMSPAGESIZE);
-  DST_OFFSET(spec) = (unsigned short) (file_offset % EMSPAGESIZE);
-  
-  ctx.ds_si = (void far *) & spec;
-  ctx.ax = 0x5700;		/* move memory region */
-  jems_calldriver((EMScontext far *) & ctx);
-  if (HIBYTE(ctx.ax) != 0)
-    ERREXIT(cinfo, JERR_EMS_WRITE);
-}
-
-
-METHODDEF void
-close_ems_store (j_common_ptr cinfo, backing_store_ptr info)
-{
-  EMScontext ctx;
-
-  ctx.ax = 0x4500;
-  ctx.dx = info->handle.ems_handle;
-  jems_calldriver((EMScontext far *) & ctx);
-  TRACEMS1(cinfo, 1, JTRC_EMS_CLOSE, info->handle.ems_handle);
-  /* we ignore any error return from the driver */
-}
-
-
-LOCAL boolean
-open_ems_store (j_common_ptr cinfo, backing_store_ptr info,
-		long total_bytes_needed)
-{
-  EMScontext ctx;
-
-  /* Is EMS driver there? */
-  if (! jems_available())
-    return FALSE;
-
-  /* Get status, make sure EMS is OK */
-  ctx.ax = 0x4000;
-  jems_calldriver((EMScontext far *) & ctx);
-  if (HIBYTE(ctx.ax) != 0)
-    return FALSE;
-
-  /* Get version, must be >= 4.0 */
-  ctx.ax = 0x4600;
-  jems_calldriver((EMScontext far *) & ctx);
-  if (HIBYTE(ctx.ax) != 0 || LOBYTE(ctx.ax) < 0x40)
-    return FALSE;
-
-  /* Try to allocate requested space */
-  ctx.ax = 0x4300;
-  ctx.bx = (unsigned short) ((total_bytes_needed + EMSPAGESIZE-1L) / EMSPAGESIZE);
-  jems_calldriver((EMScontext far *) & ctx);
-  if (HIBYTE(ctx.ax) != 0)
-    return FALSE;
-
-  /* Succeeded, save the handle and away we go */
-  info->handle.ems_handle = ctx.dx;
-  info->read_backing_store = read_ems_store;
-  info->write_backing_store = write_ems_store;
-  info->close_backing_store = close_ems_store;
-  TRACEMS1(cinfo, 1, JTRC_EMS_OPEN, ctx.dx);
-  return TRUE;			/* succeeded */
-}
-
-#endif /* EMS_SUPPORTED */
-
-
-/*
- * Initial opening of a backing-store object.
- */
-
-GLOBAL void
-jpeg_open_backing_store (j_common_ptr cinfo, backing_store_ptr info,
-			 long total_bytes_needed)
-{
-  /* Try extended memory, then expanded memory, then regular file. */
-#if XMS_SUPPORTED
-  if (open_xms_store(cinfo, info, total_bytes_needed))
-    return;
-#endif
-#if EMS_SUPPORTED
-  if (open_ems_store(cinfo, info, total_bytes_needed))
-    return;
-#endif
-  if (open_file_store(cinfo, info, total_bytes_needed))
-    return;
-  ERREXITS(cinfo, JERR_TFILE_CREATE, "");
-}
-
-
-/*
- * These routines take care of any system-dependent initialization and
- * cleanup required.
- */
-
-GLOBAL long
-jpeg_mem_init (j_common_ptr cinfo)
-{
-  next_file_num = 0;		/* initialize temp file name generator */
-  return DEFAULT_MAX_MEM;	/* default for max_memory_to_use */
-}
-
-GLOBAL void
-jpeg_mem_term (j_common_ptr cinfo)
-{
-  /* Microsoft C, at least in v6.00A, will not successfully reclaim freed
-   * blocks of size > 32Kbytes unless we give it a kick in the rear, like so:
-   */
-#ifdef NEED_FHEAPMIN
-  _fheapmin();
-#endif
-}
diff -NEaurb neo/renderer/jpeg-6/jmemmgr.c neo/renderer/jpeg-6/jmemmgr.c
--- neo/renderer/jpeg-6/jmemmgr.c	2011-12-26 04:15:38 +0000
+++ neo/renderer/jpeg-6/jmemmgr.c	1970-01-01 00:00:00 +0000
@@ -1,1115 +0,0 @@
-/*
- * jmemmgr.c
- *
- * Copyright (C) 1991-1995, Thomas G. Lane.
- * This file is part of the Independent JPEG Group's software.
- * For conditions of distribution and use, see the accompanying README file.
- *
- * This file contains the JPEG system-independent memory management
- * routines.  This code is usable across a wide variety of machines; most
- * of the system dependencies have been isolated in a separate file.
- * The major functions provided here are:
- *   * pool-based allocation and freeing of memory;
- *   * policy decisions about how to divide available memory among the
- *     virtual arrays;
- *   * control logic for swapping virtual arrays between main memory and
- *     backing storage.
- * The separate system-dependent file provides the actual backing-storage
- * access code, and it contains the policy decision about how much total
- * main memory to use.
- * This file is system-dependent in the sense that some of its functions
- * are unnecessary in some systems.  For example, if there is enough virtual
- * memory so that backing storage will never be used, much of the virtual
- * array control logic could be removed.  (Of course, if you have that much
- * memory then you shouldn't care about a little bit of unused code...)
- */
-
-#define JPEG_INTERNALS
-#define AM_MEMORY_MANAGER	/* we define jvirt_Xarray_control structs */
-#include "jinclude.h"
-#include "jpeglib.h"
-#include "jmemsys.h"		/* import the system-dependent declarations */
-
-#ifndef NO_GETENV
-#ifndef HAVE_STDLIB_H		/* <stdlib.h> should declare getenv() */
-extern char * getenv JPP((const char * name));
-#endif
-#endif
-
-
-/*
- * Some important notes:
- *   The allocation routines provided here must never return NULL.
- *   They should exit to error_exit if unsuccessful.
- *
- *   It's not a good idea to try to merge the sarray and barray routines,
- *   even though they are textually almost the same, because samples are
- *   usually stored as bytes while coefficients are shorts or ints.  Thus,
- *   in machines where byte pointers have a different representation from
- *   word pointers, the resulting machine code could not be the same.
- */
-
-
-/*
- * Many machines require storage alignment: longs must start on 4-byte
- * boundaries, doubles on 8-byte boundaries, etc.  On such machines, malloc()
- * always returns pointers that are multiples of the worst-case alignment
- * requirement, and we had better do so too.
- * There isn't any really portable way to determine the worst-case alignment
- * requirement.  This module assumes that the alignment requirement is
- * multiples of sizeof(ALIGN_TYPE).
- * By default, we define ALIGN_TYPE as double.  This is necessary on some
- * workstations (where doubles really do need 8-byte alignment) and will work
- * fine on nearly everything.  If your machine has lesser alignment needs,
- * you can save a few bytes by making ALIGN_TYPE smaller.
- * The only place I know of where this will NOT work is certain Macintosh
- * 680x0 compilers that define double as a 10-byte IEEE extended float.
- * Doing 10-byte alignment is counterproductive because longwords won't be
- * aligned well.  Put "#define ALIGN_TYPE long" in jconfig.h if you have
- * such a compiler.
- */
-
-#ifndef ALIGN_TYPE		/* so can override from jconfig.h */
-#define ALIGN_TYPE  double
-#endif
-
-
-/*
- * We allocate objects from "pools", where each pool is gotten with a single
- * request to jpeg_get_small() or jpeg_get_large().  There is no per-object
- * overhead within a pool, except for alignment padding.  Each pool has a
- * header with a link to the next pool of the same class.
- * Small and large pool headers are identical except that the latter's
- * link pointer must be FAR on 80x86 machines.
- * Notice that the "real" header fields are union'ed with a dummy ALIGN_TYPE
- * field.  This forces the compiler to make SIZEOF(small_pool_hdr) a multiple
- * of the alignment requirement of ALIGN_TYPE.
- */
-
-typedef union small_pool_struct * small_pool_ptr;
-
-typedef union small_pool_struct {
-  struct {
-    small_pool_ptr next;	/* next in list of pools */
-    size_t bytes_used;		/* how many bytes already used within pool */
-    size_t bytes_left;		/* bytes still available in this pool */
-  } hdr;
-  ALIGN_TYPE dummy;		/* included in union to ensure alignment */
-} small_pool_hdr;
-
-typedef union large_pool_struct FAR * large_pool_ptr;
-
-typedef union large_pool_struct {
-  struct {
-    large_pool_ptr next;	/* next in list of pools */
-    size_t bytes_used;		/* how many bytes already used within pool */
-    size_t bytes_left;		/* bytes still available in this pool */
-  } hdr;
-  ALIGN_TYPE dummy;		/* included in union to ensure alignment */
-} large_pool_hdr;
-
-
-/*
- * Here is the full definition of a memory manager object.
- */
-
-typedef struct {
-  struct jpeg_memory_mgr pub;	/* public fields */
-
-  /* Each pool identifier (lifetime class) names a linked list of pools. */
-  small_pool_ptr small_list[JPOOL_NUMPOOLS];
-  large_pool_ptr large_list[JPOOL_NUMPOOLS];
-
-  /* Since we only have one lifetime class of virtual arrays, only one
-   * linked list is necessary (for each datatype).  Note that the virtual
-   * array control blocks being linked together are actually stored somewhere
-   * in the small-pool list.
-   */
-  jvirt_sarray_ptr virt_sarray_list;
-  jvirt_barray_ptr virt_barray_list;
-
-  /* This counts total space obtained from jpeg_get_small/large */
-  long total_space_allocated;
-
-  /* alloc_sarray and alloc_barray set this value for use by virtual
-   * array routines.
-   */
-  JDIMENSION last_rowsperchunk;	/* from most recent alloc_sarray/barray */
-} my_memory_mgr;
-
-typedef my_memory_mgr * my_mem_ptr;
-
-
-/*
- * The control blocks for virtual arrays.
- * Note that these blocks are allocated in the "small" pool area.
- * System-dependent info for the associated backing store (if any) is hidden
- * inside the backing_store_info struct.
- */
-
-struct jvirt_sarray_control {
-  JSAMPARRAY mem_buffer;	/* => the in-memory buffer */
-  JDIMENSION rows_in_array;	/* total virtual array height */
-  JDIMENSION samplesperrow;	/* width of array (and of memory buffer) */
-  JDIMENSION maxaccess;		/* max rows accessed by access_virt_sarray */
-  JDIMENSION rows_in_mem;	/* height of memory buffer */
-  JDIMENSION rowsperchunk;	/* allocation chunk size in mem_buffer */
-  JDIMENSION cur_start_row;	/* first logical row # in the buffer */
-  JDIMENSION first_undef_row;	/* row # of first uninitialized row */
-  boolean pre_zero;		/* pre-zero mode requested? */
-  boolean dirty;		/* do current buffer contents need written? */
-  boolean b_s_open;		/* is backing-store data valid? */
-  jvirt_sarray_ptr next;	/* link to next virtual sarray control block */
-  backing_store_info b_s_info;	/* System-dependent control info */
-};
-
-struct jvirt_barray_control {
-  JBLOCKARRAY mem_buffer;	/* => the in-memory buffer */
-  JDIMENSION rows_in_array;	/* total virtual array height */
-  JDIMENSION blocksperrow;	/* width of array (and of memory buffer) */
-  JDIMENSION maxaccess;		/* max rows accessed by access_virt_barray */
-  JDIMENSION rows_in_mem;	/* height of memory buffer */
-  JDIMENSION rowsperchunk;	/* allocation chunk size in mem_buffer */
-  JDIMENSION cur_start_row;	/* first logical row # in the buffer */
-  JDIMENSION first_undef_row;	/* row # of first uninitialized row */
-  boolean pre_zero;		/* pre-zero mode requested? */
-  boolean dirty;		/* do current buffer contents need written? */
-  boolean b_s_open;		/* is backing-store data valid? */
-  jvirt_barray_ptr next;	/* link to next virtual barray control block */
-  backing_store_info b_s_info;	/* System-dependent control info */
-};
-
-
-#ifdef MEM_STATS		/* optional extra stuff for statistics */
-
-LOCAL void
-print_mem_stats (j_common_ptr cinfo, int pool_id)
-{
-  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
-  small_pool_ptr shdr_ptr;
-  large_pool_ptr lhdr_ptr;
-
-  /* Since this is only a debugging stub, we can cheat a little by using
-   * fprintf directly rather than going through the trace message code.
-   * This is helpful because message parm array can't handle longs.
-   */
-  fprintf(stderr, "Freeing pool %d, total space = %ld\n",
-	  pool_id, mem->total_space_allocated);
-
-  for (lhdr_ptr = mem->large_list[pool_id]; lhdr_ptr != NULL;
-       lhdr_ptr = lhdr_ptr->hdr.next) {
-    fprintf(stderr, "  Large chunk used %ld\n",
-	    (long) lhdr_ptr->hdr.bytes_used);
-  }
-
-  for (shdr_ptr = mem->small_list[pool_id]; shdr_ptr != NULL;
-       shdr_ptr = shdr_ptr->hdr.next) {
-    fprintf(stderr, "  Small chunk used %ld free %ld\n",
-	    (long) shdr_ptr->hdr.bytes_used,
-	    (long) shdr_ptr->hdr.bytes_left);
-  }
-}
-
-#endif /* MEM_STATS */
-
-
-LOCAL void
-out_of_memory (j_common_ptr cinfo, int which)
-/* Report an out-of-memory error and stop execution */
-/* If we compiled MEM_STATS support, report alloc requests before dying */
-{
-#ifdef MEM_STATS
-  cinfo->err->trace_level = 2;	/* force self_destruct to report stats */
-#endif
-  ERREXIT1(cinfo, JERR_OUT_OF_MEMORY, which);
-}
-
-
-/*
- * Allocation of "small" objects.
- *
- * For these, we use pooled storage.  When a new pool must be created,
- * we try to get enough space for the current request plus a "slop" factor,
- * where the slop will be the amount of leftover space in the new pool.
- * The speed vs. space tradeoff is largely determined by the slop values.
- * A different slop value is provided for each pool class (lifetime),
- * and we also distinguish the first pool of a class from later ones.
- * NOTE: the values given work fairly well on both 16- and 32-bit-int
- * machines, but may be too small if longs are 64 bits or more.
- */
-
-static const size_t first_pool_slop[JPOOL_NUMPOOLS] = 
-{
-	1600,			/* first PERMANENT pool */
-	16000			/* first IMAGE pool */
-};
-
-static const size_t extra_pool_slop[JPOOL_NUMPOOLS] = 
-{
-	0,			/* additional PERMANENT pools */
-	5000			/* additional IMAGE pools */
-};
-
-#define MIN_SLOP  50		/* greater than 0 to avoid futile looping */
-
-
-METHODDEF void *
-alloc_small (j_common_ptr cinfo, int pool_id, size_t sizeofobject)
-/* Allocate a "small" object */
-{
-  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
-  small_pool_ptr hdr_ptr, prev_hdr_ptr;
-  char * data_ptr;
-  size_t odd_bytes, min_request, slop;
-
-  /* Check for unsatisfiable request (do now to ensure no overflow below) */
-  if (sizeofobject > (size_t) (MAX_ALLOC_CHUNK-SIZEOF(small_pool_hdr)))
-    out_of_memory(cinfo, 1);	/* request exceeds malloc's ability */
-
-  /* Round up the requested size to a multiple of SIZEOF(ALIGN_TYPE) */
-  odd_bytes = sizeofobject % SIZEOF(ALIGN_TYPE);
-  if (odd_bytes > 0)
-    sizeofobject += SIZEOF(ALIGN_TYPE) - odd_bytes;
-
-  /* See if space is available in any existing pool */
-  if (pool_id < 0 || pool_id >= JPOOL_NUMPOOLS)
-    ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id);	/* safety check */
-  prev_hdr_ptr = NULL;
-  hdr_ptr = mem->small_list[pool_id];
-  while (hdr_ptr != NULL) {
-    if (hdr_ptr->hdr.bytes_left >= sizeofobject)
-      break;			/* found pool with enough space */
-    prev_hdr_ptr = hdr_ptr;
-    hdr_ptr = hdr_ptr->hdr.next;
-  }
-
-  /* Time to make a new pool? */
-  if (hdr_ptr == NULL) {
-    /* min_request is what we need now, slop is what will be leftover */
-    min_request = sizeofobject + SIZEOF(small_pool_hdr);
-    if (prev_hdr_ptr == NULL)	/* first pool in class? */
-      slop = first_pool_slop[pool_id];
-    else
-      slop = extra_pool_slop[pool_id];
-    /* Don't ask for more than MAX_ALLOC_CHUNK */
-    if (slop > (size_t) (MAX_ALLOC_CHUNK-min_request))
-      slop = (size_t) (MAX_ALLOC_CHUNK-min_request);
-    /* Try to get space, if fail reduce slop and try again */
-    for (;;) {
-      hdr_ptr = (small_pool_ptr) jpeg_get_small(cinfo, min_request + slop);
-      if (hdr_ptr != NULL)
-	break;
-      slop /= 2;
-      if (slop < MIN_SLOP)	/* give up when it gets real small */
-	out_of_memory(cinfo, 2); /* jpeg_get_small failed */
-    }
-    mem->total_space_allocated += min_request + slop;
-    /* Success, initialize the new pool header and add to end of list */
-    hdr_ptr->hdr.next = NULL;
-    hdr_ptr->hdr.bytes_used = 0;
-    hdr_ptr->hdr.bytes_left = sizeofobject + slop;
-    if (prev_hdr_ptr == NULL)	/* first pool in class? */
-      mem->small_list[pool_id] = hdr_ptr;
-    else
-      prev_hdr_ptr->hdr.next = hdr_ptr;
-  }
-
-  /* OK, allocate the object from the current pool */
-  data_ptr = (char *) (hdr_ptr + 1); /* point to first data byte in pool */
-  data_ptr += hdr_ptr->hdr.bytes_used; /* point to place for object */
-  hdr_ptr->hdr.bytes_used += sizeofobject;
-  hdr_ptr->hdr.bytes_left -= sizeofobject;
-
-  return (void *) data_ptr;
-}
-
-
-/*
- * Allocation of "large" objects.
- *
- * The external semantics of these are the same as "small" objects,
- * except that FAR pointers are used on 80x86.  However the pool
- * management heuristics are quite different.  We assume that each
- * request is large enough that it may as well be passed directly to
- * jpeg_get_large; the pool management just links everything together
- * so that we can free it all on demand.
- * Note: the major use of "large" objects is in JSAMPARRAY and JBLOCKARRAY
- * structures.  The routines that create these structures (see below)
- * deliberately bunch rows together to ensure a large request size.
- */
-
-METHODDEF void FAR *
-alloc_large (j_common_ptr cinfo, int pool_id, size_t sizeofobject)
-/* Allocate a "large" object */
-{
-  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
-  large_pool_ptr hdr_ptr;
-  size_t odd_bytes;
-
-  /* Check for unsatisfiable request (do now to ensure no overflow below) */
-  if (sizeofobject > (size_t) (MAX_ALLOC_CHUNK-SIZEOF(large_pool_hdr)))
-    out_of_memory(cinfo, 3);	/* request exceeds malloc's ability */
-
-  /* Round up the requested size to a multiple of SIZEOF(ALIGN_TYPE) */
-  odd_bytes = sizeofobject % SIZEOF(ALIGN_TYPE);
-  if (odd_bytes > 0)
-    sizeofobject += SIZEOF(ALIGN_TYPE) - odd_bytes;
-
-  /* Always make a new pool */
-  if (pool_id < 0 || pool_id >= JPOOL_NUMPOOLS)
-    ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id);	/* safety check */
-
-  hdr_ptr = (large_pool_ptr) jpeg_get_large(cinfo, sizeofobject +
-					    SIZEOF(large_pool_hdr));
-  if (hdr_ptr == NULL)
-    out_of_memory(cinfo, 4);	/* jpeg_get_large failed */
-  mem->total_space_allocated += sizeofobject + SIZEOF(large_pool_hdr);
-
-  /* Success, initialize the new pool header and add to list */
-  hdr_ptr->hdr.next = mem->large_list[pool_id];
-  /* We maintain space counts in each pool header for statistical purposes,
-   * even though they are not needed for allocation.
-   */
-  hdr_ptr->hdr.bytes_used = sizeofobject;
-  hdr_ptr->hdr.bytes_left = 0;
-  mem->large_list[pool_id] = hdr_ptr;
-
-  return (void FAR *) (hdr_ptr + 1); /* point to first data byte in pool */
-}
-
-
-/*
- * Creation of 2-D sample arrays.
- * The pointers are in near heap, the samples themselves in FAR heap.
- *
- * To minimize allocation overhead and to allow I/O of large contiguous
- * blocks, we allocate the sample rows in groups of as many rows as possible
- * without exceeding MAX_ALLOC_CHUNK total bytes per allocation request.
- * NB: the virtual array control routines, later in this file, know about
- * this chunking of rows.  The rowsperchunk value is left in the mem manager
- * object so that it can be saved away if this sarray is the workspace for
- * a virtual array.
- */
-
-METHODDEF JSAMPARRAY
-alloc_sarray (j_common_ptr cinfo, int pool_id,
-	      JDIMENSION samplesperrow, JDIMENSION numrows)
-/* Allocate a 2-D sample array */
-{
-  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
-  JSAMPARRAY result;
-  JSAMPROW workspace;
-  JDIMENSION rowsperchunk, currow, i;
-  long ltemp;
-
-  /* Calculate max # of rows allowed in one allocation chunk */
-  ltemp = (MAX_ALLOC_CHUNK-SIZEOF(large_pool_hdr)) /
-	  ((long) samplesperrow * SIZEOF(JSAMPLE));
-  if (ltemp <= 0)
-    ERREXIT(cinfo, JERR_WIDTH_OVERFLOW);
-  if (ltemp < (long) numrows)
-    rowsperchunk = (JDIMENSION) ltemp;
-  else
-    rowsperchunk = numrows;
-  mem->last_rowsperchunk = rowsperchunk;
-
-  /* Get space for row pointers (small object) */
-  result = (JSAMPARRAY) alloc_small(cinfo, pool_id,
-				    (size_t) (numrows * SIZEOF(JSAMPROW)));
-
-  /* Get the rows themselves (large objects) */
-  currow = 0;
-  while (currow < numrows) {
-    rowsperchunk = MIN(rowsperchunk, numrows - currow);
-    workspace = (JSAMPROW) alloc_large(cinfo, pool_id,
-	(size_t) ((size_t) rowsperchunk * (size_t) samplesperrow
-		  * SIZEOF(JSAMPLE)));
-    for (i = rowsperchunk; i > 0; i--) {
-      result[currow++] = workspace;
-      workspace += samplesperrow;
-    }
-  }
-
-  return result;
-}
-
-
-/*
- * Creation of 2-D coefficient-block arrays.
- * This is essentially the same as the code for sample arrays, above.
- */
-
-METHODDEF JBLOCKARRAY
-alloc_barray (j_common_ptr cinfo, int pool_id,
-	      JDIMENSION blocksperrow, JDIMENSION numrows)
-/* Allocate a 2-D coefficient-block array */
-{
-  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
-  JBLOCKARRAY result;
-  JBLOCKROW workspace;
-  JDIMENSION rowsperchunk, currow, i;
-  long ltemp;
-
-  /* Calculate max # of rows allowed in one allocation chunk */
-  ltemp = (MAX_ALLOC_CHUNK-SIZEOF(large_pool_hdr)) /
-	  ((long) blocksperrow * SIZEOF(JBLOCK));
-  if (ltemp <= 0)
-    ERREXIT(cinfo, JERR_WIDTH_OVERFLOW);
-  if (ltemp < (long) numrows)
-    rowsperchunk = (JDIMENSION) ltemp;
-  else
-    rowsperchunk = numrows;
-  mem->last_rowsperchunk = rowsperchunk;
-
-  /* Get space for row pointers (small object) */
-  result = (JBLOCKARRAY) alloc_small(cinfo, pool_id,
-				     (size_t) (numrows * SIZEOF(JBLOCKROW)));
-
-  /* Get the rows themselves (large objects) */
-  currow = 0;
-  while (currow < numrows) {
-    rowsperchunk = MIN(rowsperchunk, numrows - currow);
-    workspace = (JBLOCKROW) alloc_large(cinfo, pool_id,
-	(size_t) ((size_t) rowsperchunk * (size_t) blocksperrow
-		  * SIZEOF(JBLOCK)));
-    for (i = rowsperchunk; i > 0; i--) {
-      result[currow++] = workspace;
-      workspace += blocksperrow;
-    }
-  }
-
-  return result;
-}
-
-
-/*
- * About virtual array management:
- *
- * The above "normal" array routines are only used to allocate strip buffers
- * (as wide as the image, but just a few rows high).  Full-image-sized buffers
- * are handled as "virtual" arrays.  The array is still accessed a strip at a
- * time, but the memory manager must save the whole array for repeated
- * accesses.  The intended implementation is that there is a strip buffer in
- * memory (as high as is possible given the desired memory limit), plus a
- * backing file that holds the rest of the array.
- *
- * The request_virt_array routines are told the total size of the image and
- * the maximum number of rows that will be accessed at once.  The in-memory
- * buffer must be at least as large as the maxaccess value.
- *
- * The request routines create control blocks but not the in-memory buffers.
- * That is postponed until realize_virt_arrays is called.  At that time the
- * total amount of space needed is known (approximately, anyway), so free
- * memory can be divided up fairly.
- *
- * The access_virt_array routines are responsible for making a specific strip
- * area accessible (after reading or writing the backing file, if necessary).
- * Note that the access routines are told whether the caller intends to modify
- * the accessed strip; during a read-only pass this saves having to rewrite
- * data to disk.  The access routines are also responsible for pre-zeroing
- * any newly accessed rows, if pre-zeroing was requested.
- *
- * In current usage, the access requests are usually for nonoverlapping
- * strips; that is, successive access start_row numbers differ by exactly
- * num_rows = maxaccess.  This means we can get good performance with simple
- * buffer dump/reload logic, by making the in-memory buffer be a multiple
- * of the access height; then there will never be accesses across bufferload
- * boundaries.  The code will still work with overlapping access requests,
- * but it doesn't handle bufferload overlaps very efficiently.
- */
-
-
-METHODDEF jvirt_sarray_ptr
-request_virt_sarray (j_common_ptr cinfo, int pool_id, boolean pre_zero,
-		     JDIMENSION samplesperrow, JDIMENSION numrows,
-		     JDIMENSION maxaccess)
-/* Request a virtual 2-D sample array */
-{
-  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
-  jvirt_sarray_ptr result;
-
-  /* Only IMAGE-lifetime virtual arrays are currently supported */
-  if (pool_id != JPOOL_IMAGE)
-    ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id);	/* safety check */
-
-  /* get control block */
-  result = (jvirt_sarray_ptr) alloc_small(cinfo, pool_id,
-					  SIZEOF(struct jvirt_sarray_control));
-
-  result->mem_buffer = NULL;	/* marks array not yet realized */
-  result->rows_in_array = numrows;
-  result->samplesperrow = samplesperrow;
-  result->maxaccess = maxaccess;
-  result->pre_zero = pre_zero;
-  result->b_s_open = FALSE;	/* no associated backing-store object */
-  result->next = mem->virt_sarray_list; /* add to list of virtual arrays */
-  mem->virt_sarray_list = result;
-
-  return result;
-}
-
-
-METHODDEF jvirt_barray_ptr
-request_virt_barray (j_common_ptr cinfo, int pool_id, boolean pre_zero,
-		     JDIMENSION blocksperrow, JDIMENSION numrows,
-		     JDIMENSION maxaccess)
-/* Request a virtual 2-D coefficient-block array */
-{
-  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
-  jvirt_barray_ptr result;
-
-  /* Only IMAGE-lifetime virtual arrays are currently supported */
-  if (pool_id != JPOOL_IMAGE)
-    ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id);	/* safety check */
-
-  /* get control block */
-  result = (jvirt_barray_ptr) alloc_small(cinfo, pool_id,
-					  SIZEOF(struct jvirt_barray_control));
-
-  result->mem_buffer = NULL;	/* marks array not yet realized */
-  result->rows_in_array = numrows;
-  result->blocksperrow = blocksperrow;
-  result->maxaccess = maxaccess;
-  result->pre_zero = pre_zero;
-  result->b_s_open = FALSE;	/* no associated backing-store object */
-  result->next = mem->virt_barray_list; /* add to list of virtual arrays */
-  mem->virt_barray_list = result;
-
-  return result;
-}
-
-
-METHODDEF void
-realize_virt_arrays (j_common_ptr cinfo)
-/* Allocate the in-memory buffers for any unrealized virtual arrays */
-{
-  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
-  long space_per_minheight, maximum_space, avail_mem;
-  long minheights, max_minheights;
-  jvirt_sarray_ptr sptr;
-  jvirt_barray_ptr bptr;
-
-  /* Compute the minimum space needed (maxaccess rows in each buffer)
-   * and the maximum space needed (full image height in each buffer).
-   * These may be of use to the system-dependent jpeg_mem_available routine.
-   */
-  space_per_minheight = 0;
-  maximum_space = 0;
-  for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
-    if (sptr->mem_buffer == NULL) { /* if not realized yet */
-      space_per_minheight += (long) sptr->maxaccess *
-			     (long) sptr->samplesperrow * SIZEOF(JSAMPLE);
-      maximum_space += (long) sptr->rows_in_array *
-		       (long) sptr->samplesperrow * SIZEOF(JSAMPLE);
-    }
-  }
-  for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
-    if (bptr->mem_buffer == NULL) { /* if not realized yet */
-      space_per_minheight += (long) bptr->maxaccess *
-			     (long) bptr->blocksperrow * SIZEOF(JBLOCK);
-      maximum_space += (long) bptr->rows_in_array *
-		       (long) bptr->blocksperrow * SIZEOF(JBLOCK);
-    }
-  }
-
-  if (space_per_minheight <= 0)
-    return;			/* no unrealized arrays, no work */
-
-  /* Determine amount of memory to actually use; this is system-dependent. */
-  avail_mem = jpeg_mem_available(cinfo, space_per_minheight, maximum_space,
-				 mem->total_space_allocated);
-
-  /* If the maximum space needed is available, make all the buffers full
-   * height; otherwise parcel it out with the same number of minheights
-   * in each buffer.
-   */
-  if (avail_mem >= maximum_space)
-    max_minheights = 1000000000L;
-  else {
-    max_minheights = avail_mem / space_per_minheight;
-    /* If there doesn't seem to be enough space, try to get the minimum
-     * anyway.  This allows a "stub" implementation of jpeg_mem_available().
-     */
-    if (max_minheights <= 0)
-      max_minheights = 1;
-  }
-
-  /* Allocate the in-memory buffers and initialize backing store as needed. */
-
-  for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
-    if (sptr->mem_buffer == NULL) { /* if not realized yet */
-      minheights = ((long) sptr->rows_in_array - 1L) / sptr->maxaccess + 1L;
-      if (minheights <= max_minheights) {
-	/* This buffer fits in memory */
-	sptr->rows_in_mem = sptr->rows_in_array;
-      } else {
-	/* It doesn't fit in memory, create backing store. */
-	sptr->rows_in_mem = (JDIMENSION) (max_minheights * sptr->maxaccess);
-	jpeg_open_backing_store(cinfo, & sptr->b_s_info,
-				(long) sptr->rows_in_array *
-				(long) sptr->samplesperrow *
-				(long) SIZEOF(JSAMPLE));
-	sptr->b_s_open = TRUE;
-      }
-      sptr->mem_buffer = alloc_sarray(cinfo, JPOOL_IMAGE,
-				      sptr->samplesperrow, sptr->rows_in_mem);
-      sptr->rowsperchunk = mem->last_rowsperchunk;
-      sptr->cur_start_row = 0;
-      sptr->first_undef_row = 0;
-      sptr->dirty = FALSE;
-    }
-  }
-
-  for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
-    if (bptr->mem_buffer == NULL) { /* if not realized yet */
-      minheights = ((long) bptr->rows_in_array - 1L) / bptr->maxaccess + 1L;
-      if (minheights <= max_minheights) {
-	/* This buffer fits in memory */
-	bptr->rows_in_mem = bptr->rows_in_array;
-      } else {
-	/* It doesn't fit in memory, create backing store. */
-	bptr->rows_in_mem = (JDIMENSION) (max_minheights * bptr->maxaccess);
-	jpeg_open_backing_store(cinfo, & bptr->b_s_info,
-				(long) bptr->rows_in_array *
-				(long) bptr->blocksperrow *
-				(long) SIZEOF(JBLOCK));
-	bptr->b_s_open = TRUE;
-      }
-      bptr->mem_buffer = alloc_barray(cinfo, JPOOL_IMAGE,
-				      bptr->blocksperrow, bptr->rows_in_mem);
-      bptr->rowsperchunk = mem->last_rowsperchunk;
-      bptr->cur_start_row = 0;
-      bptr->first_undef_row = 0;
-      bptr->dirty = FALSE;
-    }
-  }
-}
-
-
-LOCAL void
-do_sarray_io (j_common_ptr cinfo, jvirt_sarray_ptr ptr, boolean writing)
-/* Do backing store read or write of a virtual sample array */
-{
-  long bytesperrow, file_offset, byte_count, rows, thisrow, i;
-
-  bytesperrow = (long) ptr->samplesperrow * SIZEOF(JSAMPLE);
-  file_offset = ptr->cur_start_row * bytesperrow;
-  /* Loop to read or write each allocation chunk in mem_buffer */
-  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
-    /* One chunk, but check for short chunk at end of buffer */
-    rows = MIN((long) ptr->rowsperchunk, (long) ptr->rows_in_mem - i);
-    /* Transfer no more than is currently defined */
-    thisrow = (long) ptr->cur_start_row + i;
-    rows = MIN(rows, (long) ptr->first_undef_row - thisrow);
-    /* Transfer no more than fits in file */
-    rows = MIN(rows, (long) ptr->rows_in_array - thisrow);
-    if (rows <= 0)		/* this chunk might be past end of file! */
-      break;
-    byte_count = rows * bytesperrow;
-    if (writing)
-      (*ptr->b_s_info.write_backing_store) (cinfo, & ptr->b_s_info,
-					    (void FAR *) ptr->mem_buffer[i],
-					    file_offset, byte_count);
-    else
-      (*ptr->b_s_info.read_backing_store) (cinfo, & ptr->b_s_info,
-					   (void FAR *) ptr->mem_buffer[i],
-					   file_offset, byte_count);
-    file_offset += byte_count;
-  }
-}
-
-
-LOCAL void
-do_barray_io (j_common_ptr cinfo, jvirt_barray_ptr ptr, boolean writing)
-/* Do backing store read or write of a virtual coefficient-block array */
-{
-  long bytesperrow, file_offset, byte_count, rows, thisrow, i;
-
-  bytesperrow = (long) ptr->blocksperrow * SIZEOF(JBLOCK);
-  file_offset = ptr->cur_start_row * bytesperrow;
-  /* Loop to read or write each allocation chunk in mem_buffer */
-  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
-    /* One chunk, but check for short chunk at end of buffer */
-    rows = MIN((long) ptr->rowsperchunk, (long) ptr->rows_in_mem - i);
-    /* Transfer no more than is currently defined */
-    thisrow = (long) ptr->cur_start_row + i;
-    rows = MIN(rows, (long) ptr->first_undef_row - thisrow);
-    /* Transfer no more than fits in file */
-    rows = MIN(rows, (long) ptr->rows_in_array - thisrow);
-    if (rows <= 0)		/* this chunk might be past end of file! */
-      break;
-    byte_count = rows * bytesperrow;
-    if (writing)
-      (*ptr->b_s_info.write_backing_store) (cinfo, & ptr->b_s_info,
-					    (void FAR *) ptr->mem_buffer[i],
-					    file_offset, byte_count);
-    else
-      (*ptr->b_s_info.read_backing_store) (cinfo, & ptr->b_s_info,
-					   (void FAR *) ptr->mem_buffer[i],
-					   file_offset, byte_count);
-    file_offset += byte_count;
-  }
-}
-
-
-METHODDEF JSAMPARRAY
-access_virt_sarray (j_common_ptr cinfo, jvirt_sarray_ptr ptr,
-		    JDIMENSION start_row, JDIMENSION num_rows,
-		    boolean writable)
-/* Access the part of a virtual sample array starting at start_row */
-/* and extending for num_rows rows.  writable is true if  */
-/* caller intends to modify the accessed area. */
-{
-  JDIMENSION end_row = start_row + num_rows;
-  JDIMENSION undef_row;
-
-  /* debugging check */
-  if (end_row > ptr->rows_in_array || num_rows > ptr->maxaccess ||
-      ptr->mem_buffer == NULL)
-    ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
-
-  /* Make the desired part of the virtual array accessible */
-  if (start_row < ptr->cur_start_row ||
-      end_row > ptr->cur_start_row+ptr->rows_in_mem) {
-    if (! ptr->b_s_open)
-      ERREXIT(cinfo, JERR_VIRTUAL_BUG);
-    /* Flush old buffer contents if necessary */
-    if (ptr->dirty) {
-      do_sarray_io(cinfo, ptr, TRUE);
-      ptr->dirty = FALSE;
-    }
-    /* Decide what part of virtual array to access.
-     * Algorithm: if target address > current window, assume forward scan,
-     * load starting at target address.  If target address < current window,
-     * assume backward scan, load so that target area is top of window.
-     * Note that when switching from forward write to forward read, will have
-     * start_row = 0, so the limiting case applies and we load from 0 anyway.
-     */
-    if (start_row > ptr->cur_start_row) {
-      ptr->cur_start_row = start_row;
-    } else {
-      /* use long arithmetic here to avoid overflow & unsigned problems */
-      long ltemp;
-
-      ltemp = (long) end_row - (long) ptr->rows_in_mem;
-      if (ltemp < 0)
-	ltemp = 0;		/* don't fall off front end of file */
-      ptr->cur_start_row = (JDIMENSION) ltemp;
-    }
-    /* Read in the selected part of the array.
-     * During the initial write pass, we will do no actual read
-     * because the selected part is all undefined.
-     */
-    do_sarray_io(cinfo, ptr, FALSE);
-  }
-  /* Ensure the accessed part of the array is defined; prezero if needed.
-   * To improve locality of access, we only prezero the part of the array
-   * that the caller is about to access, not the entire in-memory array.
-   */
-  if (ptr->first_undef_row < end_row) {
-    if (ptr->first_undef_row < start_row) {
-      if (writable)		/* writer skipped over a section of array */
-	ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
-      undef_row = start_row;	/* but reader is allowed to read ahead */
-    } else {
-      undef_row = ptr->first_undef_row;
-    }
-    if (writable)
-      ptr->first_undef_row = end_row;
-    if (ptr->pre_zero) {
-      size_t bytesperrow = (size_t) ptr->samplesperrow * SIZEOF(JSAMPLE);
-      undef_row -= ptr->cur_start_row; /* make indexes relative to buffer */
-      end_row -= ptr->cur_start_row;
-      while (undef_row < end_row) {
-	jzero_far((void FAR *) ptr->mem_buffer[undef_row], bytesperrow);
-	undef_row++;
-      }
-    } else {
-      if (! writable)		/* reader looking at undefined data */
-	ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
-    }
-  }
-  /* Flag the buffer dirty if caller will write in it */
-  if (writable)
-    ptr->dirty = TRUE;
-  /* Return address of proper part of the buffer */
-  return ptr->mem_buffer + (start_row - ptr->cur_start_row);
-}
-
-
-METHODDEF JBLOCKARRAY
-access_virt_barray (j_common_ptr cinfo, jvirt_barray_ptr ptr,
-		    JDIMENSION start_row, JDIMENSION num_rows,
-		    boolean writable)
-/* Access the part of a virtual block array starting at start_row */
-/* and extending for num_rows rows.  writable is true if  */
-/* caller intends to modify the accessed area. */
-{
-  JDIMENSION end_row = start_row + num_rows;
-  JDIMENSION undef_row;
-
-  /* debugging check */
-  if (end_row > ptr->rows_in_array || num_rows > ptr->maxaccess ||
-      ptr->mem_buffer == NULL)
-    ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
-
-  /* Make the desired part of the virtual array accessible */
-  if (start_row < ptr->cur_start_row ||
-      end_row > ptr->cur_start_row+ptr->rows_in_mem) {
-    if (! ptr->b_s_open)
-      ERREXIT(cinfo, JERR_VIRTUAL_BUG);
-    /* Flush old buffer contents if necessary */
-    if (ptr->dirty) {
-      do_barray_io(cinfo, ptr, TRUE);
-      ptr->dirty = FALSE;
-    }
-    /* Decide what part of virtual array to access.
-     * Algorithm: if target address > current window, assume forward scan,
-     * load starting at target address.  If target address < current window,
-     * assume backward scan, load so that target area is top of window.
-     * Note that when switching from forward write to forward read, will have
-     * start_row = 0, so the limiting case applies and we load from 0 anyway.
-     */
-    if (start_row > ptr->cur_start_row) {
-      ptr->cur_start_row = start_row;
-    } else {
-      /* use long arithmetic here to avoid overflow & unsigned problems */
-      long ltemp;
-
-      ltemp = (long) end_row - (long) ptr->rows_in_mem;
-      if (ltemp < 0)
-	ltemp = 0;		/* don't fall off front end of file */
-      ptr->cur_start_row = (JDIMENSION) ltemp;
-    }
-    /* Read in the selected part of the array.
-     * During the initial write pass, we will do no actual read
-     * because the selected part is all undefined.
-     */
-    do_barray_io(cinfo, ptr, FALSE);
-  }
-  /* Ensure the accessed part of the array is defined; prezero if needed.
-   * To improve locality of access, we only prezero the part of the array
-   * that the caller is about to access, not the entire in-memory array.
-   */
-  if (ptr->first_undef_row < end_row) {
-    if (ptr->first_undef_row < start_row) {
-      if (writable)		/* writer skipped over a section of array */
-	ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
-      undef_row = start_row;	/* but reader is allowed to read ahead */
-    } else {
-      undef_row = ptr->first_undef_row;
-    }
-    if (writable)
-      ptr->first_undef_row = end_row;
-    if (ptr->pre_zero) {
-      size_t bytesperrow = (size_t) ptr->blocksperrow * SIZEOF(JBLOCK);
-      undef_row -= ptr->cur_start_row; /* make indexes relative to buffer */
-      end_row -= ptr->cur_start_row;
-      while (undef_row < end_row) {
-	jzero_far((void FAR *) ptr->mem_buffer[undef_row], bytesperrow);
-	undef_row++;
-      }
-    } else {
-      if (! writable)		/* reader looking at undefined data */
-	ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
-    }
-  }
-  /* Flag the buffer dirty if caller will write in it */
-  if (writable)
-    ptr->dirty = TRUE;
-  /* Return address of proper part of the buffer */
-  return ptr->mem_buffer + (start_row - ptr->cur_start_row);
-}
-
-
-/*
- * Release all objects belonging to a specified pool.
- */
-
-METHODDEF void
-free_pool (j_common_ptr cinfo, int pool_id)
-{
-  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
-  small_pool_ptr shdr_ptr;
-  large_pool_ptr lhdr_ptr;
-  size_t space_freed;
-
-  if (pool_id < 0 || pool_id >= JPOOL_NUMPOOLS)
-    ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id);	/* safety check */
-
-#ifdef MEM_STATS
-  if (cinfo->err->trace_level > 1)
-    print_mem_stats(cinfo, pool_id); /* print pool's memory usage statistics */
-#endif
-
-  /* If freeing IMAGE pool, close any virtual arrays first */
-  if (pool_id == JPOOL_IMAGE) {
-    jvirt_sarray_ptr sptr;
-    jvirt_barray_ptr bptr;
-
-    for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
-      if (sptr->b_s_open) {	/* there may be no backing store */
-	sptr->b_s_open = FALSE;	/* prevent recursive close if error */
-	(*sptr->b_s_info.close_backing_store) (cinfo, & sptr->b_s_info);
-      }
-    }
-    mem->virt_sarray_list = NULL;
-    for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
-      if (bptr->b_s_open) {	/* there may be no backing store */
-	bptr->b_s_open = FALSE;	/* prevent recursive close if error */
-	(*bptr->b_s_info.close_backing_store) (cinfo, & bptr->b_s_info);
-      }
-    }
-    mem->virt_barray_list = NULL;
-  }
-
-  /* Release large objects */
-  lhdr_ptr = mem->large_list[pool_id];
-  mem->large_list[pool_id] = NULL;
-
-  while (lhdr_ptr != NULL) {
-    large_pool_ptr next_lhdr_ptr = lhdr_ptr->hdr.next;
-    space_freed = lhdr_ptr->hdr.bytes_used +
-		  lhdr_ptr->hdr.bytes_left +
-		  SIZEOF(large_pool_hdr);
-    jpeg_free_large(cinfo, (void FAR *) lhdr_ptr, space_freed);
-    mem->total_space_allocated -= space_freed;
-    lhdr_ptr = next_lhdr_ptr;
-  }
-
-  /* Release small objects */
-  shdr_ptr = mem->small_list[pool_id];
-  mem->small_list[pool_id] = NULL;
-
-  while (shdr_ptr != NULL) {
-    small_pool_ptr next_shdr_ptr = shdr_ptr->hdr.next;
-    space_freed = shdr_ptr->hdr.bytes_used +
-		  shdr_ptr->hdr.bytes_left +
-		  SIZEOF(small_pool_hdr);
-    jpeg_free_small(cinfo, (void *) shdr_ptr, space_freed);
-    mem->total_space_allocated -= space_freed;
-    shdr_ptr = next_shdr_ptr;
-  }
-}
-
-
-/*
- * Close up shop entirely.
- * Note that this cannot be called unless cinfo->mem is non-NULL.
- */
-
-METHODDEF void
-self_destruct (j_common_ptr cinfo)
-{
-  int pool;
-
-  /* Close all backing store, release all memory.
-   * Releasing pools in reverse order might help avoid fragmentation
-   * with some (brain-damaged) malloc libraries.
-   */
-  for (pool = JPOOL_NUMPOOLS-1; pool >= JPOOL_PERMANENT; pool--) {
-    free_pool(cinfo, pool);
-  }
-
-  /* Release the memory manager control block too. */
-  jpeg_free_small(cinfo, (void *) cinfo->mem, SIZEOF(my_memory_mgr));
-  cinfo->mem = NULL;		/* ensures I will be called only once */
-
-  jpeg_mem_term(cinfo);		/* system-dependent cleanup */
-}
-
-
-/*
- * Memory manager initialization.
- * When this is called, only the error manager pointer is valid in cinfo!
- */
-
-GLOBAL void
-jinit_memory_mgr (j_common_ptr cinfo)
-{
-  my_mem_ptr mem;
-  long max_to_use;
-  int pool;
-  size_t test_mac;
-
-  cinfo->mem = NULL;		/* for safety if init fails */
-
-  /* Check for configuration errors.
-   * SIZEOF(ALIGN_TYPE) should be a power of 2; otherwise, it probably
-   * doesn't reflect any real hardware alignment requirement.
-   * The test is a little tricky: for X>0, X and X-1 have no one-bits
-   * in common if and only if X is a power of 2, ie has only one one-bit.
-   * Some compilers may give an "unreachable code" warning here; ignore it.
-   */
-  if ((SIZEOF(ALIGN_TYPE) & (SIZEOF(ALIGN_TYPE)-1)) != 0)
-    ERREXIT(cinfo, JERR_BAD_ALIGN_TYPE);
-  /* MAX_ALLOC_CHUNK must be representable as type size_t, and must be
-   * a multiple of SIZEOF(ALIGN_TYPE).
-   * Again, an "unreachable code" warning may be ignored here.
-   * But a "constant too large" warning means you need to fix MAX_ALLOC_CHUNK.
-   */
-  test_mac = (size_t) MAX_ALLOC_CHUNK;
-  if ((long) test_mac != MAX_ALLOC_CHUNK ||
-      (MAX_ALLOC_CHUNK % SIZEOF(ALIGN_TYPE)) != 0)
-    ERREXIT(cinfo, JERR_BAD_ALLOC_CHUNK);
-
-  max_to_use = jpeg_mem_init(cinfo); /* system-dependent initialization */
-
-  /* Attempt to allocate memory manager's control block */
-  mem = (my_mem_ptr) jpeg_get_small(cinfo, SIZEOF(my_memory_mgr));
-
-  if (mem == NULL) {
-    jpeg_mem_term(cinfo);	/* system-dependent cleanup */
-    ERREXIT1(cinfo, JERR_OUT_OF_MEMORY, 0);
-  }
-
-  /* OK, fill in the method pointers */
-  mem->pub.alloc_small = alloc_small;
-  mem->pub.alloc_large = alloc_large;
-  mem->pub.alloc_sarray = alloc_sarray;
-  mem->pub.alloc_barray = alloc_barray;
-  mem->pub.request_virt_sarray = request_virt_sarray;
-  mem->pub.request_virt_barray = request_virt_barray;
-  mem->pub.realize_virt_arrays = realize_virt_arrays;
-  mem->pub.access_virt_sarray = access_virt_sarray;
-  mem->pub.access_virt_barray = access_virt_barray;
-  mem->pub.free_pool = free_pool;
-  mem->pub.self_destruct = self_destruct;
-
-  /* Initialize working state */
-  mem->pub.max_memory_to_use = max_to_use;
-
-  for (pool = JPOOL_NUMPOOLS-1; pool >= JPOOL_PERMANENT; pool--) {
-    mem->small_list[pool] = NULL;
-    mem->large_list[pool] = NULL;
-  }
-  mem->virt_sarray_list = NULL;
-  mem->virt_barray_list = NULL;
-
-  mem->total_space_allocated = SIZEOF(my_memory_mgr);
-
-  /* Declare ourselves open for business */
-  cinfo->mem = & mem->pub;
-
-  /* Check for an environment variable JPEGMEM; if found, override the
-   * default max_memory setting from jpeg_mem_init.  Note that the
-   * surrounding application may again override this value.
-   * If your system doesn't support getenv(), define NO_GETENV to disable
-   * this feature.
-   */
-#ifndef NO_GETENV
-  { char * memenv;
-
-    if ((memenv = getenv("JPEGMEM")) != NULL) {
-      char ch = 'x';
-
-      if (sscanf(memenv, "%ld%c", &max_to_use, &ch) > 0) {
-	if (ch == 'm' || ch == 'M')
-	  max_to_use *= 1000L;
-	mem->pub.max_memory_to_use = max_to_use * 1000L;
-      }
-    }
-  }
-#endif
-
-}
diff -NEaurb neo/renderer/jpeg-6/jmemname.c neo/renderer/jpeg-6/jmemname.c
--- neo/renderer/jpeg-6/jmemname.c	2011-12-26 04:15:38 +0000
+++ neo/renderer/jpeg-6/jmemname.c	1970-01-01 00:00:00 +0000
@@ -1,271 +0,0 @@
-/*
- * jmemname.c
- *
- * Copyright (C) 1992-1994, Thomas G. Lane.
- * This file is part of the Independent JPEG Group's software.
- * For conditions of distribution and use, see the accompanying README file.
- *
- * This file provides a generic implementation of the system-dependent
- * portion of the JPEG memory manager.  This implementation assumes that
- * you must explicitly construct a name for each temp file.
- * Also, the problem of determining the amount of memory available
- * is shoved onto the user.
- */
-
-#define JPEG_INTERNALS
-#include "jinclude.h"
-#include "jpeglib.h"
-#include "jmemsys.h"		/* import the system-dependent declarations */
-
-#ifndef HAVE_STDLIB_H		/* <stdlib.h> should declare malloc(),free() */
-extern void * malloc JPP((size_t size));
-extern void free JPP((void *ptr));
-#endif
-
-#ifndef SEEK_SET		/* pre-ANSI systems may not define this; */
-#define SEEK_SET  0		/* if not, assume 0 is correct */
-#endif
-
-#ifdef DONT_USE_B_MODE		/* define mode parameters for fopen() */
-#define READ_BINARY	"r"
-#define RW_BINARY	"w+"
-#else
-#define READ_BINARY	"rb"
-#define RW_BINARY	"w+b"
-#endif
-
-
-/*
- * Selection of a file name for a temporary file.
- * This is system-dependent!
- *
- * The code as given is suitable for most Unix systems, and it is easily
- * modified for most non-Unix systems.  Some notes:
- *  1.  The temp file is created in the directory named by TEMP_DIRECTORY.
- *      The default value is /usr/tmp, which is the conventional place for
- *      creating large temp files on Unix.  On other systems you'll probably
- *      want to change the file location.  You can do this by editing the
- *      #define, or (preferred) by defining TEMP_DIRECTORY in jconfig.h.
- *
- *  2.  If you need to change the file name as well as its location,
- *      you can override the TEMP_FILE_NAME macro.  (Note that this is
- *      actually a printf format string; it must contain %s and %d.)
- *      Few people should need to do this.
- *
- *  3.  mktemp() is used to ensure that multiple processes running
- *      simultaneously won't select the same file names.  If your system
- *      doesn't have mktemp(), define NO_MKTEMP to do it the hard way.
- *      (If you don't have <errno.h>, also define NO_ERRNO_H.)
- *
- *  4.  You probably want to define NEED_SIGNAL_CATCHER so that cjpeg.c/djpeg.c
- *      will cause the temp files to be removed if you stop the program early.
- */
-
-#ifndef TEMP_DIRECTORY		/* can override from jconfig.h or Makefile */
-#define TEMP_DIRECTORY  "/usr/tmp/" /* recommended setting for Unix */
-#endif
-
-static int next_file_num;	/* to distinguish among several temp files */
-
-#ifdef NO_MKTEMP
-
-#ifndef TEMP_FILE_NAME		/* can override from jconfig.h or Makefile */
-#define TEMP_FILE_NAME  "%sJPG%03d.TMP"
-#endif
-
-#ifndef NO_ERRNO_H
-#include <errno.h>		/* to define ENOENT */
-#endif
-
-/* ANSI C specifies that errno is a macro, but on older systems it's more
- * likely to be a plain int variable.  And not all versions of errno.h
- * bother to declare it, so we have to in order to be most portable.  Thus:
- */
-#ifndef errno
-extern int errno;
-#endif
-
-
-LOCAL void
-select_file_name (char * fname)
-{
-  FILE * tfile;
-
-  /* Keep generating file names till we find one that's not in use */
-  for (;;) {
-    next_file_num++;		/* advance counter */
-    sprintf(fname, TEMP_FILE_NAME, TEMP_DIRECTORY, next_file_num);
-    if ((tfile = fopen(fname, READ_BINARY)) == NULL) {
-      /* fopen could have failed for a reason other than the file not
-       * being there; for example, file there but unreadable.
-       * If <errno.h> isn't available, then we cannot test the cause.
-       */
-#ifdef ENOENT
-      if (errno != ENOENT)
-	continue;
-#endif
-      break;
-    }
-    fclose(tfile);		/* oops, it's there; close tfile & try again */
-  }
-}
-
-#else /* ! NO_MKTEMP */
-
-/* Note that mktemp() requires the initial filename to end in six X's */
-#ifndef TEMP_FILE_NAME		/* can override from jconfig.h or Makefile */
-#define TEMP_FILE_NAME  "%sJPG%dXXXXXX"
-#endif
-
-LOCAL void
-select_file_name (char * fname)
-{
-  next_file_num++;		/* advance counter */
-  sprintf(fname, TEMP_FILE_NAME, TEMP_DIRECTORY, next_file_num);
-  mktemp(fname);		/* make sure file name is unique */
-  /* mktemp replaces the trailing XXXXXX with a unique string of characters */
-}
-
-#endif /* NO_MKTEMP */
-
-
-/*
- * Memory allocation and freeing are controlled by the regular library
- * routines malloc() and free().
- */
-
-GLOBAL void *
-jpeg_get_small (j_common_ptr cinfo, size_t sizeofobject)
-{
-  return (void *) malloc(sizeofobject);
-}
-
-GLOBAL void
-jpeg_free_small (j_common_ptr cinfo, void * object, size_t sizeofobject)
-{
-  free(object);
-}
-
-
-/*
- * "Large" objects are treated the same as "small" ones.
- * NB: although we include FAR keywords in the routine declarations,
- * this file won't actually work in 80x86 small/medium model; at least,
- * you probably won't be able to process useful-size images in only 64KB.
- */
-
-GLOBAL void FAR *
-jpeg_get_large (j_common_ptr cinfo, size_t sizeofobject)
-{
-  return (void FAR *) malloc(sizeofobject);
-}
-
-GLOBAL void
-jpeg_free_large (j_common_ptr cinfo, void FAR * object, size_t sizeofobject)
-{
-  free(object);
-}
-
-
-/*
- * This routine computes the total memory space available for allocation.
- * It's impossible to do this in a portable way; our current solution is
- * to make the user tell us (with a default value set at compile time).
- * If you can actually get the available space, it's a good idea to subtract
- * a slop factor of 5% or so.
- */
-
-#ifndef DEFAULT_MAX_MEM		/* so can override from makefile */
-#define DEFAULT_MAX_MEM		1000000L /* default: one megabyte */
-#endif
-
-GLOBAL long
-jpeg_mem_available (j_common_ptr cinfo, long min_bytes_needed,
-		    long max_bytes_needed, long already_allocated)
-{
-  return cinfo->mem->max_memory_to_use - already_allocated;
-}
-
-
-/*
- * Backing store (temporary file) management.
- * Backing store objects are only used when the value returned by
- * jpeg_mem_available is less than the total space needed.  You can dispense
- * with these routines if you have plenty of virtual memory; see jmemnobs.c.
- */
-
-
-METHODDEF void
-read_backing_store (j_common_ptr cinfo, backing_store_ptr info,
-		    void FAR * buffer_address,
-		    long file_offset, long byte_count)
-{
-  if (fseek(info->temp_file, file_offset, SEEK_SET))
-    ERREXIT(cinfo, JERR_TFILE_SEEK);
-  if (JFREAD(info->temp_file, buffer_address, byte_count)
-      != (size_t) byte_count)
-    ERREXIT(cinfo, JERR_TFILE_READ);
-}
-
-
-METHODDEF void
-write_backing_store (j_common_ptr cinfo, backing_store_ptr info,
-		     void FAR * buffer_address,
-		     long file_offset, long byte_count)
-{
-  if (fseek(info->temp_file, file_offset, SEEK_SET))
-    ERREXIT(cinfo, JERR_TFILE_SEEK);
-  if (JFWRITE(info->temp_file, buffer_address, byte_count)
-      != (size_t) byte_count)
-    ERREXIT(cinfo, JERR_TFILE_WRITE);
-}
-
-
-METHODDEF void
-close_backing_store (j_common_ptr cinfo, backing_store_ptr info)
-{
-  fclose(info->temp_file);	/* close the file */
-  unlink(info->temp_name);	/* delete the file */
-/* If your system doesn't have unlink(), use remove() instead.
- * remove() is the ANSI-standard name for this function, but if
- * your system was ANSI you'd be using jmemansi.c, right?
- */
-  TRACEMSS(cinfo, 1, JTRC_TFILE_CLOSE, info->temp_name);
-}
-
-
-/*
- * Initial opening of a backing-store object.
- */
-
-GLOBAL void
-jpeg_open_backing_store (j_common_ptr cinfo, backing_store_ptr info,
-			 long total_bytes_needed)
-{
-  select_file_name(info->temp_name);
-  if ((info->temp_file = fopen(info->temp_name, RW_BINARY)) == NULL)
-    ERREXITS(cinfo, JERR_TFILE_CREATE, info->temp_name);
-  info->read_backing_store = read_backing_store;
-  info->write_backing_store = write_backing_store;
-  info->close_backing_store = close_backing_store;
-  TRACEMSS(cinfo, 1, JTRC_TFILE_OPEN, info->temp_name);
-}
-
-
-/*
- * These routines take care of any system-dependent initialization and
- * cleanup required.
- */
-
-GLOBAL long
-jpeg_mem_init (j_common_ptr cinfo)
-{
-  next_file_num = 0;		/* initialize temp file name generator */
-  return DEFAULT_MAX_MEM;	/* default for max_memory_to_use */
-}
-
-GLOBAL void
-jpeg_mem_term (j_common_ptr cinfo)
-{
-  /* no work */
-}
diff -NEaurb neo/renderer/jpeg-6/jmemnobs.c neo/renderer/jpeg-6/jmemnobs.c
--- neo/renderer/jpeg-6/jmemnobs.c	2011-12-26 04:15:38 +0000
+++ neo/renderer/jpeg-6/jmemnobs.c	1970-01-01 00:00:00 +0000
@@ -1,103 +0,0 @@
-/*
- * jmemnobs.c
- *
- * Copyright (C) 1992-1994, Thomas G. Lane.
- * This file is part of the Independent JPEG Group's software.
- * For conditions of distribution and use, see the accompanying README file.
- *
- * This file provides a really simple implementation of the system-
- * dependent portion of the JPEG memory manager.  This implementation
- * assumes that no backing-store files are needed: all required space
- * can be obtained from ri.Malloc().
- * This is very portable in the sense that it'll compile on almost anything,
- * but you'd better have lots of main memory (or virtual memory) if you want
- * to process big images.
- * Note that the max_memory_to_use option is ignored by this implementation.
- */
-
-#define JPEG_INTERNALS
-#include "jinclude.h"
-#include "jpeglib.h"
-#include "jmemsys.h"		/* import the system-dependent declarations */
-
-/*
- * Memory allocation and ri.Freeing are controlled by the regular library
- * routines ri.Malloc() and ri.Free().
- */
-
-GLOBAL void *
-jpeg_get_small (j_common_ptr cinfo, size_t sizeofobject)
-{
-  return (void *) malloc(sizeofobject);
-}
-
-GLOBAL void
-jpeg_free_small (j_common_ptr cinfo, void * object, size_t sizeofobject)
-{
-  free(object);
-}
-
-
-/*
- * "Large" objects are treated the same as "small" ones.
- * NB: although we include FAR keywords in the routine declarations,
- * this file won't actually work in 80x86 small/medium model; at least,
- * you probably won't be able to process useful-size images in only 64KB.
- */
-
-GLOBAL void FAR *
-jpeg_get_large (j_common_ptr cinfo, size_t sizeofobject)
-{
-  return (void FAR *) malloc(sizeofobject);
-}
-
-GLOBAL void
-jpeg_free_large (j_common_ptr cinfo, void FAR * object, size_t sizeofobject)
-{
-  free(object);
-}
-
-
-/*
- * This routine computes the total memory space available for allocation.
- * Here we always say, "we got all you want bud!"
- */
-
-GLOBAL long
-jpeg_mem_available (j_common_ptr cinfo, long min_bytes_needed,
-		    long max_bytes_needed, long already_allocated)
-{
-  return max_bytes_needed;
-}
-
-
-/*
- * Backing store (temporary file) management.
- * Since jpeg_mem_available always promised the moon,
- * this should never be called and we can just error out.
- */
-
-GLOBAL void
-jpeg_open_backing_store (j_common_ptr cinfo, backing_store_ptr info,
-			 long total_bytes_needed)
-{
-  ERREXIT(cinfo, JERR_NO_BACKING_STORE);
-}
-
-
-/*
- * These routines take care of any system-dependent initialization and
- * cleanup required.  Here, there isn't any.
- */
-
-GLOBAL long
-jpeg_mem_init (j_common_ptr cinfo)
-{
-  return 0;			/* just set max_memory_to_use to 0 */
-}
-
-GLOBAL void
-jpeg_mem_term (j_common_ptr cinfo)
-{
-  /* no work */
-}
diff -NEaurb neo/renderer/jpeg-6/jmemsys.h neo/renderer/jpeg-6/jmemsys.h
--- neo/renderer/jpeg-6/jmemsys.h	2013-08-14 01:47:52 +0000
+++ neo/renderer/jpeg-6/jmemsys.h	1970-01-01 00:00:00 +0000
@@ -1,184 +0,0 @@
-/*
- * jmemsys.h
- *
- * Copyright (C) 1992-1994, Thomas G. Lane.
- * This file is part of the Independent JPEG Group's software.
- * For conditions of distribution and use, see the accompanying README file.
- *
- * This include file defines the interface between the system-independent
- * and system-dependent portions of the JPEG memory manager.  No other
- * modules need include it.  (The system-independent portion is jmemmgr.c;
- * there are several different versions of the system-dependent portion.)
- *
- * This file works as-is for the system-dependent memory managers supplied
- * in the IJG distribution.  You may need to modify it if you write a
- * custom memory manager.  If system-dependent changes are needed in
- * this file, the best method is to #ifdef them based on a configuration
- * symbol supplied in jconfig.h, as we have done with USE_MSDOS_MEMMGR.
- */
-
-
-/* Short forms of external names for systems with brain-damaged linkers. */
-
-#ifdef NEED_SHORT_EXTERNAL_NAMES
-#define jpeg_get_small		jGetSmall
-#define jpeg_free_small		jFreeSmall
-#define jpeg_get_large		jGetLarge
-#define jpeg_free_large		jFreeLarge
-#define jpeg_mem_available	jMemAvail
-#define jpeg_open_backing_store	jOpenBackStore
-#define jpeg_mem_init		jMemInit
-#define jpeg_mem_term		jMemTerm
-#endif /* NEED_SHORT_EXTERNAL_NAMES */
-
-
-/*
- * These two functions are used to allocate and release small chunks of
- * memory.  (Typically the total amount requested through jpeg_get_small is
- * no more than 20K or so; this will be requested in chunks of a few K each.)
- * Behavior should be the same as for the standard library functions malloc
- * and free; in particular, jpeg_get_small must return NULL on failure.
- * On most systems, these ARE malloc and free.  jpeg_free_small is passed the
- * size of the object being freed, just in case it's needed.
- * On an 80x86 machine using small-data memory model, these manage near heap.
- */
-
-EXTERN void * jpeg_get_small JPP((j_common_ptr cinfo, size_t sizeofobject));
-EXTERN void jpeg_free_small JPP((j_common_ptr cinfo, void * object,
-                                 size_t sizeofobject));
-
-/*
- * These two functions are used to allocate and release large chunks of
- * memory (up to the total free space designated by jpeg_mem_available).
- * The interface is the same as above, except that on an 80x86 machine,
- * far pointers are used.  On most other machines these are identical to
- * the jpeg_get/free_small routines; but we keep them separate anyway,
- * in case a different allocation strategy is desirable for large chunks.
- */
-
-EXTERN void FAR * jpeg_get_large JPP((j_common_ptr cinfo,size_t sizeofobject));
-EXTERN void jpeg_free_large JPP((j_common_ptr cinfo, void FAR * object,
-                                 size_t sizeofobject));
-
-/*
- * The macro MAX_ALLOC_CHUNK designates the maximum number of bytes that may
- * be requested in a single call to jpeg_get_large (and jpeg_get_small for that
- * matter, but that case should never come into play).  This macro is needed
- * to model the 64Kb-segment-size limit of far addressing on 80x86 machines.
- * On those machines, we expect that jconfig.h will provide a proper value.
- * On machines with 32-bit flat address spaces, any large constant may be used.
- *
- * NB: jmemmgr.c expects that MAX_ALLOC_CHUNK will be representable as type
- * size_t and will be a multiple of sizeof(align_type).
- */
-
-#ifndef MAX_ALLOC_CHUNK		/* may be overridden in jconfig.h */
-#define MAX_ALLOC_CHUNK  1000000000L
-#endif
-
-/*
- * This routine computes the total space still available for allocation by
- * jpeg_get_large.  If more space than this is needed, backing store will be
- * used.  NOTE: any memory already allocated must not be counted.
- *
- * There is a minimum space requirement, corresponding to the minimum
- * feasible buffer sizes; jmemmgr.c will request that much space even if
- * jpeg_mem_available returns zero.  The maximum space needed, enough to hold
- * all working storage in memory, is also passed in case it is useful.
- * Finally, the total space already allocated is passed.  If no better
- * method is available, cinfo->mem->max_memory_to_use - already_allocated
- * is often a suitable calculation.
- *
- * It is OK for jpeg_mem_available to underestimate the space available
- * (that'll just lead to more backing-store access than is really necessary).
- * However, an overestimate will lead to failure.  Hence it's wise to subtract
- * a slop factor from the true available space.  5% should be enough.
- *
- * On machines with lots of virtual memory, any large constant may be returned.
- * Conversely, zero may be returned to always use the minimum amount of memory.
- */
-
-EXTERN long jpeg_mem_available JPP((j_common_ptr cinfo,
-                                    long min_bytes_needed,
-                                    long max_bytes_needed,
-                                    long already_allocated));
-
-
-/*
- * This structure holds whatever state is needed to access a single
- * backing-store object.  The read/write/close method pointers are called
- * by jmemmgr.c to manipulate the backing-store object; all other fields
- * are private to the system-dependent backing store routines.
- */
-
-#define TEMP_NAME_LENGTH   64	/* max length of a temporary file's name */
-
-#ifdef USE_MSDOS_MEMMGR		/* DOS-specific junk */
-
-typedef unsigned short XMSH;	/* type of extended-memory handles */
-typedef unsigned short EMSH;	/* type of expanded-memory handles */
-
-typedef union
-{
-    short file_handle;		/* DOS file handle if it's a temp file */
-    XMSH xms_handle;		/* handle if it's a chunk of XMS */
-    EMSH ems_handle;		/* handle if it's a chunk of EMS */
-} handle_union;
-
-#endif /* USE_MSDOS_MEMMGR */
-
-typedef struct backing_store_struct * backing_store_ptr;
-
-typedef struct backing_store_struct
-{
-    /* Methods for reading/writing/closing this backing-store object */
-    JMETHOD(void, read_backing_store, (j_common_ptr cinfo,
-                                       backing_store_ptr info,
-                                       void FAR * buffer_address,
-                                       long file_offset, long byte_count));
-    JMETHOD(void, write_backing_store, (j_common_ptr cinfo,
-                                        backing_store_ptr info,
-                                        void FAR * buffer_address,
-                                        long file_offset, long byte_count));
-    JMETHOD(void, close_backing_store, (j_common_ptr cinfo,
-                                        backing_store_ptr info));
-
-    /* Private fields for system-dependent backing-store management */
-#ifdef USE_MSDOS_MEMMGR
-    /* For the MS-DOS manager (jmemdos.c), we need: */
-    handle_union handle;		/* reference to backing-store storage object */
-    char temp_name[TEMP_NAME_LENGTH]; /* name if it's a file */
-#else
-    /* For a typical implementation with temp files, we need: */
-    FILE * temp_file;		/* stdio reference to temp file */
-    char temp_name[TEMP_NAME_LENGTH]; /* name of temp file */
-#endif
-} backing_store_info;
-
-/*
- * Initial opening of a backing-store object.  This must fill in the
- * read/write/close pointers in the object.  The read/write routines
- * may take an error exit if the specified maximum file size is exceeded.
- * (If jpeg_mem_available always returns a large value, this routine can
- * just take an error exit.)
- */
-
-EXTERN void jpeg_open_backing_store JPP((j_common_ptr cinfo,
-                                        backing_store_ptr info,
-                                        long total_bytes_needed));
-
-
-/*
- * These routines take care of any system-dependent initialization and
- * cleanup required.  jpeg_mem_init will be called before anything is
- * allocated (and, therefore, nothing in cinfo is of use except the error
- * manager pointer).  It should return a suitable default value for
- * max_memory_to_use; this may subsequently be overridden by the surrounding
- * application.  (Note that max_memory_to_use is only important if
- * jpeg_mem_available chooses to consult it ... no one else will.)
- * jpeg_mem_term may assume that all requested memory has been freed and that
- * all opened backing-store objects have been closed.
- */
-
-EXTERN long jpeg_mem_init JPP((j_common_ptr cinfo));
-EXTERN void jpeg_mem_term JPP((j_common_ptr cinfo));
diff -NEaurb neo/renderer/jpeg-6/jmorecfg.h neo/renderer/jpeg-6/jmorecfg.h
--- neo/renderer/jpeg-6/jmorecfg.h	2013-08-14 01:47:52 +0000
+++ neo/renderer/jpeg-6/jmorecfg.h	1970-01-01 00:00:00 +0000
@@ -1,352 +0,0 @@
-/*
- * jmorecfg.h
- *
- * Copyright (C) 1991-1995, Thomas G. Lane.
- * This file is part of the Independent JPEG Group's software.
- * For conditions of distribution and use, see the accompanying README file.
- *
- * This file contains additional configuration options that customize the
- * JPEG software for special applications or support machine-dependent
- * optimizations.  Most users will not need to touch this file.
- */
-
-
-/*
- * Define BITS_IN_JSAMPLE as either
- *   8   for 8-bit sample values (the usual setting)
- *   12  for 12-bit sample values
- * Only 8 and 12 are legal data precisions for lossy JPEG according to the
- * JPEG standard, and the IJG code does not support anything else!
- * We do not support run-time selection of data precision, sorry.
- */
-
-#define BITS_IN_JSAMPLE  8	/* use 8 or 12 */
-
-
-/*
- * Maximum number of components (color channels) allowed in JPEG image.
- * To meet the letter of the JPEG spec, set this to 255.  However, darn
- * few applications need more than 4 channels (maybe 5 for CMYK + alpha
- * mask).  We recommend 10 as a reasonable compromise; use 4 if you are
- * really short on memory.  (Each allowed component costs a hundred or so
- * bytes of storage, whether actually used in an image or not.)
- */
-
-#define MAX_COMPONENTS  10	/* maximum number of image components */
-
-
-/*
- * Basic data types.
- * You may need to change these if you have a machine with unusual data
- * type sizes; for example, "char" not 8 bits, "short" not 16 bits,
- * or "long" not 32 bits.  We don't care whether "int" is 16 or 32 bits,
- * but it had better be at least 16.
- */
-
-/* Representation of a single sample (pixel element value).
- * We frequently allocate large arrays of these, so it's important to keep
- * them small.  But if you have memory to burn and access to char or short
- * arrays is very slow on your hardware, you might want to change these.
- */
-
-#if BITS_IN_JSAMPLE == 8
-/* JSAMPLE should be the smallest type that will hold the values 0..255.
- * You can use a signed char by having GETJSAMPLE mask it with 0xFF.
- */
-
-#ifdef HAVE_UNSIGNED_CHAR
-
-typedef unsigned char JSAMPLE;
-#define GETJSAMPLE(value)  ((int) (value))
-
-#else /* not HAVE_UNSIGNED_CHAR */
-
-typedef char JSAMPLE;
-#ifdef CHAR_IS_UNSIGNED
-#define GETJSAMPLE(value)  ((int) (value))
-#else
-#define GETJSAMPLE(value)  ((int) (value) & 0xFF)
-#endif /* CHAR_IS_UNSIGNED */
-
-#endif /* HAVE_UNSIGNED_CHAR */
-
-#define MAXJSAMPLE	255
-#define CENTERJSAMPLE	128
-
-#endif /* BITS_IN_JSAMPLE == 8 */
-
-
-#if BITS_IN_JSAMPLE == 12
-/* JSAMPLE should be the smallest type that will hold the values 0..4095.
- * On nearly all machines "short" will do nicely.
- */
-
-typedef short JSAMPLE;
-#define GETJSAMPLE(value)  ((int) (value))
-
-#define MAXJSAMPLE	4095
-#define CENTERJSAMPLE	2048
-
-#endif /* BITS_IN_JSAMPLE == 12 */
-
-
-/* Representation of a DCT frequency coefficient.
- * This should be a signed value of at least 16 bits; "short" is usually OK.
- * Again, we allocate large arrays of these, but you can change to int
- * if you have memory to burn and "short" is really slow.
- */
-
-typedef short JCOEF;
-
-
-/* Compressed datastreams are represented as arrays of JOCTET.
- * These must be EXACTLY 8 bits wide, at least once they are written to
- * external storage.  Note that when using the stdio data source/destination
- * managers, this is also the data type passed to fread/fwrite.
- */
-
-#ifdef HAVE_UNSIGNED_CHAR
-
-typedef unsigned char JOCTET;
-#define GETJOCTET(value)  (value)
-
-#else /* not HAVE_UNSIGNED_CHAR */
-
-typedef char JOCTET;
-#ifdef CHAR_IS_UNSIGNED
-#define GETJOCTET(value)  (value)
-#else
-#define GETJOCTET(value)  ((value) & 0xFF)
-#endif /* CHAR_IS_UNSIGNED */
-
-#endif /* HAVE_UNSIGNED_CHAR */
-
-
-/* These typedefs are used for various table entries and so forth.
- * They must be at least as wide as specified; but making them too big
- * won't cost a huge amount of memory, so we don't provide special
- * extraction code like we did for JSAMPLE.  (In other words, these
- * typedefs live at a different point on the speed/space tradeoff curve.)
- */
-
-/* UINT8 must hold at least the values 0..255. */
-
-#ifdef HAVE_UNSIGNED_CHAR
-typedef unsigned char UINT8;
-#else /* not HAVE_UNSIGNED_CHAR */
-#ifdef CHAR_IS_UNSIGNED
-typedef char UINT8;
-#else /* not CHAR_IS_UNSIGNED */
-typedef short UINT8;
-#endif /* CHAR_IS_UNSIGNED */
-#endif /* HAVE_UNSIGNED_CHAR */
-
-/* UINT16 must hold at least the values 0..65535. */
-
-#ifdef HAVE_UNSIGNED_SHORT
-typedef unsigned short UINT16;
-#else /* not HAVE_UNSIGNED_SHORT */
-typedef unsigned int UINT16;
-#endif /* HAVE_UNSIGNED_SHORT */
-
-#ifndef __MWERKS__
-#ifndef _BASETSD_H_
-typedef long INT32;
-#endif
-#endif
-
-/* INT16 must hold at least the values -32768..32767. */
-
-#ifndef XMD_H			/* X11/xmd.h correctly defines INT16 */
-typedef short INT16;
-#endif
-
-/* INT32 must hold at least signed 32-bit values. */
-
-//#ifndef XMD_H			/* X11/xmd.h correctly defines INT32 */
-//typedef long INT32;
-//#endif
-
-/* Datatype used for image dimensions.  The JPEG standard only supports
- * images up to 64K*64K due to 16-bit fields in SOF markers.  Therefore
- * "unsigned int" is sufficient on all machines.  However, if you need to
- * handle larger images and you don't mind deviating from the spec, you
- * can change this datatype.
- */
-
-typedef unsigned int JDIMENSION;
-
-#define JPEG_MAX_DIMENSION  65500L  /* a tad under 64K to prevent overflows */
-
-
-/* These defines are used in all function definitions and extern declarations.
- * You could modify them if you need to change function linkage conventions.
- * Another application is to make all functions global for use with debuggers
- * or code profilers that require it.
- */
-
-#define METHODDEF static	/* a function called through method pointers */
-#define LOCAL	  static	/* a function used only in its module */
-#define GLOBAL			/* a function referenced thru EXTERNs */
-#define EXTERN	  extern	/* a reference to a GLOBAL function */
-
-
-/* Here is the pseudo-keyword for declaring pointers that must be "far"
- * on 80x86 machines.  Most of the specialized coding for 80x86 is handled
- * by just saying "FAR *" where such a pointer is needed.  In a few places
- * explicit coding is needed; see uses of the NEED_FAR_POINTERS symbol.
- */
-
-#ifdef NEED_FAR_POINTERS
-#undef FAR
-#define FAR  far
-#else
-#undef FAR
-#define FAR
-#endif
-
-
-/*
- * On a few systems, type boolean and/or its values FALSE, TRUE may appear
- * in standard header files.  Or you may have conflicts with application-
- * specific header files that you want to include together with these files.
- * Defining HAVE_BOOLEAN before including jpeglib.h should make it work.
- */
-
-//#ifndef HAVE_BOOLEAN
-//typedef int boolean;
-//#endif
-#ifndef FALSE			/* in case these macros already exist */
-#define FALSE	0		/* values of boolean */
-#endif
-#ifndef TRUE
-#define TRUE	1
-#endif
-
-
-/*
- * The remaining options affect code selection within the JPEG library,
- * but they don't need to be visible to most applications using the library.
- * To minimize application namespace pollution, the symbols won't be
- * defined unless JPEG_INTERNALS or JPEG_INTERNAL_OPTIONS has been defined.
- */
-
-#ifdef JPEG_INTERNALS
-#define JPEG_INTERNAL_OPTIONS
-#endif
-
-#ifdef JPEG_INTERNAL_OPTIONS
-
-
-/*
- * These defines indicate whether to include various optional functions.
- * Undefining some of these symbols will produce a smaller but less capable
- * library.  Note that you can leave certain source files out of the
- * compilation/linking process if you've #undef'd the corresponding symbols.
- * (You may HAVE to do that if your compiler doesn't like null source files.)
- */
-
-/* Arithmetic coding is unsupported for legal reasons.  Complaints to IBM. */
-
-/* Capability options common to encoder and decoder: */
-
-#undef DCT_ISLOW_SUPPORTED	/* slow but accurate integer algorithm */
-#undef DCT_IFAST_SUPPORTED	/* faster, less accurate integer method */
-#define DCT_FLOAT_SUPPORTED	/* floating-point: accurate, fast on fast HW */
-
-/* Encoder capability options: */
-
-#undef  C_ARITH_CODING_SUPPORTED    /* Arithmetic coding back end? */
-#define C_MULTISCAN_FILES_SUPPORTED /* Multiple-scan JPEG files? */
-#define C_PROGRESSIVE_SUPPORTED	    /* Progressive JPEG? (Requires MULTISCAN)*/
-#define ENTROPY_OPT_SUPPORTED	    /* Optimization of entropy coding parms? */
-/* Note: if you selected 12-bit data precision, it is dangerous to turn off
- * ENTROPY_OPT_SUPPORTED.  The standard Huffman tables are only good for 8-bit
- * precision, so jchuff.c normally uses entropy optimization to compute
- * usable tables for higher precision.  If you don't want to do optimization,
- * you'll have to supply different default Huffman tables.
- * The exact same statements apply for progressive JPEG: the default tables
- * don't work for progressive mode.  (This may get fixed, however.)
- */
-#define INPUT_SMOOTHING_SUPPORTED   /* Input image smoothing option? */
-
-/* Decoder capability options: */
-
-#undef  D_ARITH_CODING_SUPPORTED    /* Arithmetic coding back end? */
-#undef D_MULTISCAN_FILES_SUPPORTED /* Multiple-scan JPEG files? */
-#undef D_PROGRESSIVE_SUPPORTED	    /* Progressive JPEG? (Requires MULTISCAN)*/
-#undef BLOCK_SMOOTHING_SUPPORTED   /* Block smoothing? (Progressive only) */
-#undef IDCT_SCALING_SUPPORTED	    /* Output rescaling via IDCT? */
-#undef  UPSAMPLE_SCALING_SUPPORTED  /* Output rescaling at upsample stage? */
-#undef UPSAMPLE_MERGING_SUPPORTED  /* Fast path for sloppy upsampling? */
-#undef QUANT_1PASS_SUPPORTED	    /* 1-pass color quantization? */
-#undef QUANT_2PASS_SUPPORTED	    /* 2-pass color quantization? */
-
-/* more capability options later, no doubt */
-
-
-/*
- * Ordering of RGB data in scanlines passed to or from the application.
- * If your application wants to deal with data in the order B,G,R, just
- * change these macros.  You can also deal with formats such as R,G,B,X
- * (one extra byte per pixel) by changing RGB_PIXELSIZE.  Note that changing
- * the offsets will also change the order in which colormap data is organized.
- * RESTRICTIONS:
- * 1. The sample applications cjpeg,djpeg do NOT support modified RGB formats.
- * 2. These macros only affect RGB<=>YCbCr color conversion, so they are not
- *    useful if you are using JPEG color spaces other than YCbCr or grayscale.
- * 3. The color quantizer modules will not behave desirably if RGB_PIXELSIZE
- *    is not 3 (they don't understand about dummy color components!).  So you
- *    can't use color quantization if you change that value.
- */
-
-#define RGB_RED		0	/* Offset of Red in an RGB scanline element */
-#define RGB_GREEN	1	/* Offset of Green */
-#define RGB_BLUE	2	/* Offset of Blue */
-#define RGB_PIXELSIZE	4	/* JSAMPLEs per RGB scanline element */
-
-
-/* Definitions for speed-related optimizations. */
-
-
-/* If your compiler supports inline functions, define INLINE
- * as the inline keyword; otherwise define it as empty.
- */
-
-#ifndef INLINE
-#ifdef __GNUC__			/* for instance, GNU C knows about inline */
-#define INLINE __inline__
-#endif
-#ifndef INLINE
-#define INLINE			/* default is to define it as empty */
-#endif
-#endif
-
-
-/* On some machines (notably 68000 series) "int" is 32 bits, but multiplying
- * two 16-bit shorts is faster than multiplying two ints.  Define MULTIPLIER
- * as short on such a machine.  MULTIPLIER must be at least 16 bits wide.
- */
-
-#ifndef MULTIPLIER
-#define MULTIPLIER  int		/* type for fastest integer multiply */
-#endif
-
-
-/* FAST_FLOAT should be either float or double, whichever is done faster
- * by your compiler.  (Note that this type is only used in the floating point
- * DCT routines, so it only matters if you've defined DCT_FLOAT_SUPPORTED.)
- * Typically, float is faster in ANSI C compilers, while double is faster in
- * pre-ANSI compilers (because they insist on converting to double anyway).
- * The code below therefore chooses float if we have ANSI-style prototypes.
- */
-
-#ifndef FAST_FLOAT
-#ifdef HAVE_PROTOTYPES
-#define FAST_FLOAT  float
-#else
-#define FAST_FLOAT  double
-#endif
-#endif
-
-#endif /* JPEG_INTERNAL_OPTIONS */
diff -NEaurb neo/renderer/jpeg-6/jpegint.h neo/renderer/jpeg-6/jpegint.h
--- neo/renderer/jpeg-6/jpegint.h	2013-08-14 01:47:52 +0000
+++ neo/renderer/jpeg-6/jpegint.h	1970-01-01 00:00:00 +0000
@@ -1,415 +0,0 @@
-/*
- * jpegint.h
- *
- * Copyright (C) 1991-1995, Thomas G. Lane.
- * This file is part of the Independent JPEG Group's software.
- * For conditions of distribution and use, see the accompanying README file.
- *
- * This file provides common declarations for the various JPEG modules.
- * These declarations are considered internal to the JPEG library; most
- * applications using the library shouldn't need to include this file.
- */
-
-
-/* Declarations for both compression & decompression */
-
-typedef enum  			/* Operating modes for buffer controllers */
-{
-    JBUF_PASS_THRU,		/* Plain stripwise operation */
-    /* Remaining modes require a full-image buffer to have been created */
-    JBUF_SAVE_SOURCE,	/* Run source subobject only, save output */
-    JBUF_CRANK_DEST,	/* Run dest subobject only, using saved data */
-    JBUF_SAVE_AND_PASS	/* Run both subobjects, save output */
-} J_BUF_MODE;
-
-/* Values of global_state field (jdapi.c has some dependencies on ordering!) */
-#define CSTATE_START	100	/* after create_compress */
-#define CSTATE_SCANNING	101	/* start_compress done, write_scanlines OK */
-#define CSTATE_RAW_OK	102	/* start_compress done, write_raw_data OK */
-#define CSTATE_WRCOEFS	103	/* jpeg_write_coefficients done */
-#define DSTATE_START	200	/* after create_decompress */
-#define DSTATE_INHEADER	201	/* reading header markers, no SOS yet */
-#define DSTATE_READY	202	/* found SOS, ready for start_decompress */
-#define DSTATE_PRELOAD	203	/* reading multiscan file in start_decompress*/
-#define DSTATE_PRESCAN	204	/* performing dummy pass for 2-pass quant */
-#define DSTATE_SCANNING	205	/* start_decompress done, read_scanlines OK */
-#define DSTATE_RAW_OK	206	/* start_decompress done, read_raw_data OK */
-#define DSTATE_BUFIMAGE	207	/* expecting jpeg_start_output */
-#define DSTATE_BUFPOST	208	/* looking for SOS/EOI in jpeg_finish_output */
-#define DSTATE_RDCOEFS	209	/* reading file in jpeg_read_coefficients */
-#define DSTATE_STOPPING	210	/* looking for EOI in jpeg_finish_decompress */
-
-
-/* Declarations for compression modules */
-
-/* Master control module */
-struct jpeg_comp_master
-{
-    JMETHOD(void, prepare_for_pass, (j_compress_ptr cinfo));
-    JMETHOD(void, pass_startup, (j_compress_ptr cinfo));
-    JMETHOD(void, finish_pass, (j_compress_ptr cinfo));
-
-    /* State variables made visible to other modules */
-    boolean call_pass_startup;	/* True if pass_startup must be called */
-    boolean is_last_pass;		/* True during last pass */
-};
-
-/* Main buffer control (downsampled-data buffer) */
-struct jpeg_c_main_controller
-{
-    JMETHOD(void, start_pass, (j_compress_ptr cinfo, J_BUF_MODE pass_mode));
-    JMETHOD(void, process_data, (j_compress_ptr cinfo,
-                                 JSAMPARRAY input_buf, JDIMENSION *in_row_ctr,
-                                 JDIMENSION in_rows_avail));
-};
-
-/* Compression preprocessing (downsampling input buffer control) */
-struct jpeg_c_prep_controller
-{
-    JMETHOD(void, start_pass, (j_compress_ptr cinfo, J_BUF_MODE pass_mode));
-    JMETHOD(void, pre_process_data, (j_compress_ptr cinfo,
-                                     JSAMPARRAY input_buf,
-                                     JDIMENSION *in_row_ctr,
-                                     JDIMENSION in_rows_avail,
-                                     JSAMPIMAGE output_buf,
-                                     JDIMENSION *out_row_group_ctr,
-                                     JDIMENSION out_row_groups_avail));
-};
-
-/* Coefficient buffer control */
-struct jpeg_c_coef_controller
-{
-    JMETHOD(void, start_pass, (j_compress_ptr cinfo, J_BUF_MODE pass_mode));
-    JMETHOD(boolean, compress_data, (j_compress_ptr cinfo,
-                                     JSAMPIMAGE input_buf));
-};
-
-/* Colorspace conversion */
-struct jpeg_color_converter
-{
-    JMETHOD(void, start_pass, (j_compress_ptr cinfo));
-    JMETHOD(void, color_convert, (j_compress_ptr cinfo,
-                                  JSAMPARRAY input_buf, JSAMPIMAGE output_buf,
-                                  JDIMENSION output_row, int num_rows));
-};
-
-/* Downsampling */
-struct jpeg_downsampler
-{
-    JMETHOD(void, start_pass, (j_compress_ptr cinfo));
-    JMETHOD(void, downsample, (j_compress_ptr cinfo,
-                               JSAMPIMAGE input_buf, JDIMENSION in_row_index,
-                               JSAMPIMAGE output_buf,
-                               JDIMENSION out_row_group_index));
-
-    boolean need_context_rows;	/* TRUE if need rows above & below */
-};
-
-/* Forward DCT (also controls coefficient quantization) */
-struct jpeg_forward_dct
-{
-    JMETHOD(void, start_pass, (j_compress_ptr cinfo));
-    /* perhaps this should be an array??? */
-    JMETHOD(void, forward_DCT, (j_compress_ptr cinfo,
-                                jpeg_component_info * compptr,
-                                JSAMPARRAY sample_data, JBLOCKROW coef_blocks,
-                                JDIMENSION start_row, JDIMENSION start_col,
-                                JDIMENSION num_blocks));
-};
-
-/* Entropy encoding */
-struct jpeg_entropy_encoder
-{
-    JMETHOD(void, start_pass, (j_compress_ptr cinfo, boolean gather_statistics));
-    JMETHOD(boolean, encode_mcu, (j_compress_ptr cinfo, JBLOCKROW *MCU_data));
-    JMETHOD(void, finish_pass, (j_compress_ptr cinfo));
-};
-
-/* Marker writing */
-struct jpeg_marker_writer
-{
-    /* write_any_marker is exported for use by applications */
-    /* Probably only COM and APPn markers should be written */
-    JMETHOD(void, write_any_marker, (j_compress_ptr cinfo, int marker,
-                                     const JOCTET *dataptr, unsigned int datalen));
-    JMETHOD(void, write_file_header, (j_compress_ptr cinfo));
-    JMETHOD(void, write_frame_header, (j_compress_ptr cinfo));
-    JMETHOD(void, write_scan_header, (j_compress_ptr cinfo));
-    JMETHOD(void, write_file_trailer, (j_compress_ptr cinfo));
-    JMETHOD(void, write_tables_only, (j_compress_ptr cinfo));
-};
-
-
-/* Declarations for decompression modules */
-
-/* Master control module */
-struct jpeg_decomp_master
-{
-    JMETHOD(void, prepare_for_output_pass, (j_decompress_ptr cinfo));
-    JMETHOD(void, finish_output_pass, (j_decompress_ptr cinfo));
-
-    /* State variables made visible to other modules */
-    boolean is_dummy_pass;	/* True during 1st pass for 2-pass quant */
-};
-
-/* Input control module */
-struct jpeg_input_controller
-{
-    JMETHOD(int, consume_input, (j_decompress_ptr cinfo));
-    JMETHOD(void, reset_input_controller, (j_decompress_ptr cinfo));
-    JMETHOD(void, start_input_pass, (j_decompress_ptr cinfo));
-    JMETHOD(void, finish_input_pass, (j_decompress_ptr cinfo));
-
-    /* State variables made visible to other modules */
-    boolean has_multiple_scans;	/* True if file has multiple scans */
-    boolean eoi_reached;		/* True when EOI has been consumed */
-};
-
-/* Main buffer control (downsampled-data buffer) */
-struct jpeg_d_main_controller
-{
-    JMETHOD(void, start_pass, (j_decompress_ptr cinfo, J_BUF_MODE pass_mode));
-    JMETHOD(void, process_data, (j_decompress_ptr cinfo,
-                                 JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
-                                 JDIMENSION out_rows_avail));
-};
-
-/* Coefficient buffer control */
-struct jpeg_d_coef_controller
-{
-    JMETHOD(void, start_input_pass, (j_decompress_ptr cinfo));
-    JMETHOD(int, consume_data, (j_decompress_ptr cinfo));
-    JMETHOD(void, start_output_pass, (j_decompress_ptr cinfo));
-    JMETHOD(int, decompress_data, (j_decompress_ptr cinfo,
-                                   JSAMPIMAGE output_buf));
-    /* Pointer to array of coefficient virtual arrays, or NULL if none */
-    jvirt_barray_ptr *coef_arrays;
-};
-
-/* Decompression postprocessing (color quantization buffer control) */
-struct jpeg_d_post_controller
-{
-    JMETHOD(void, start_pass, (j_decompress_ptr cinfo, J_BUF_MODE pass_mode));
-    JMETHOD(void, post_process_data, (j_decompress_ptr cinfo,
-                                      JSAMPIMAGE input_buf,
-                                      JDIMENSION *in_row_group_ctr,
-                                      JDIMENSION in_row_groups_avail,
-                                      JSAMPARRAY output_buf,
-                                      JDIMENSION *out_row_ctr,
-                                      JDIMENSION out_rows_avail));
-};
-
-/* Marker reading & parsing */
-struct jpeg_marker_reader
-{
-    JMETHOD(void, reset_marker_reader, (j_decompress_ptr cinfo));
-    /* Read markers until SOS or EOI.
-     * Returns same codes as are defined for jpeg_consume_input:
-     * JPEG_SUSPENDED, JPEG_REACHED_SOS, or JPEG_REACHED_EOI.
-     */
-    JMETHOD(int, read_markers, (j_decompress_ptr cinfo));
-    /* Read a restart marker --- exported for use by entropy decoder only */
-    jpeg_marker_parser_method read_restart_marker;
-    /* Application-overridable marker processing methods */
-    jpeg_marker_parser_method process_COM;
-    jpeg_marker_parser_method process_APPn[16];
-
-    /* State of marker reader --- nominally internal, but applications
-     * supplying COM or APPn handlers might like to know the state.
-     */
-    boolean saw_SOI;		/* found SOI? */
-    boolean saw_SOF;		/* found SOF? */
-    int next_restart_num;		/* next restart number expected (0-7) */
-    unsigned int discarded_bytes;	/* # of bytes skipped looking for a marker */
-};
-
-/* Entropy decoding */
-struct jpeg_entropy_decoder
-{
-    JMETHOD(void, start_pass, (j_decompress_ptr cinfo));
-    JMETHOD(boolean, decode_mcu, (j_decompress_ptr cinfo,
-                                  JBLOCKROW *MCU_data));
-};
-
-/* Inverse DCT (also performs dequantization) */
-typedef JMETHOD(void, inverse_DCT_method_ptr,
-                (j_decompress_ptr cinfo, jpeg_component_info * compptr,
-                 JCOEFPTR coef_block,
-                 JSAMPARRAY output_buf, JDIMENSION output_col));
-
-struct jpeg_inverse_dct
-{
-    JMETHOD(void, start_pass, (j_decompress_ptr cinfo));
-    /* It is useful to allow each component to have a separate IDCT method. */
-    inverse_DCT_method_ptr inverse_DCT[MAX_COMPONENTS];
-};
-
-/* Upsampling (note that upsampler must also call color converter) */
-struct jpeg_upsampler
-{
-    JMETHOD(void, start_pass, (j_decompress_ptr cinfo));
-    JMETHOD(void, upsample, (j_decompress_ptr cinfo,
-                             JSAMPIMAGE input_buf,
-                             JDIMENSION *in_row_group_ctr,
-                             JDIMENSION in_row_groups_avail,
-                             JSAMPARRAY output_buf,
-                             JDIMENSION *out_row_ctr,
-                             JDIMENSION out_rows_avail));
-
-    boolean need_context_rows;	/* TRUE if need rows above & below */
-};
-
-/* Colorspace conversion */
-struct jpeg_color_deconverter
-{
-    JMETHOD(void, start_pass, (j_decompress_ptr cinfo));
-    JMETHOD(void, color_convert, (j_decompress_ptr cinfo,
-                                  JSAMPIMAGE input_buf, JDIMENSION input_row,
-                                  JSAMPARRAY output_buf, int num_rows));
-};
-
-/* Color quantization or color precision reduction */
-struct jpeg_color_quantizer
-{
-    JMETHOD(void, start_pass, (j_decompress_ptr cinfo, boolean is_pre_scan));
-    JMETHOD(void, color_quantize, (j_decompress_ptr cinfo,
-                                   JSAMPARRAY input_buf, JSAMPARRAY output_buf,
-                                   int num_rows));
-    JMETHOD(void, finish_pass, (j_decompress_ptr cinfo));
-    JMETHOD(void, new_color_map, (j_decompress_ptr cinfo));
-};
-
-
-/* Miscellaneous useful macros */
-
-#undef MAX
-#define MAX(a,b)	((a) > (b) ? (a) : (b))
-#undef MIN
-#define MIN(a,b)	((a) < (b) ? (a) : (b))
-
-
-/* We assume that right shift corresponds to signed division by 2 with
- * rounding towards minus infinity.  This is correct for typical "arithmetic
- * shift" instructions that shift in copies of the sign bit.  But some
- * C compilers implement >> with an unsigned shift.  For these machines you
- * must define RIGHT_SHIFT_IS_UNSIGNED.
- * RIGHT_SHIFT provides a proper signed right shift of an INT32 quantity.
- * It is only applied with constant shift counts.  SHIFT_TEMPS must be
- * included in the variables of any routine using RIGHT_SHIFT.
- */
-
-#ifdef RIGHT_SHIFT_IS_UNSIGNED
-#define SHIFT_TEMPS	INT32 shift_temp;
-#define RIGHT_SHIFT(x,shft)  \
-	((shift_temp = (x)) < 0 ? \
-	 (shift_temp >> (shft)) | ((~((INT32) 0)) << (32-(shft))) : \
-	 (shift_temp >> (shft)))
-#else
-#define SHIFT_TEMPS
-#define RIGHT_SHIFT(x,shft)	((x) >> (shft))
-#endif
-
-
-/* Short forms of external names for systems with brain-damaged linkers. */
-
-#ifdef NEED_SHORT_EXTERNAL_NAMES
-#define jinit_compress_master	jICompress
-#define jinit_c_master_control	jICMaster
-#define jinit_c_main_controller	jICMainC
-#define jinit_c_prep_controller	jICPrepC
-#define jinit_c_coef_controller	jICCoefC
-#define jinit_color_converter	jICColor
-#define jinit_downsampler	jIDownsampler
-#define jinit_forward_dct	jIFDCT
-#define jinit_huff_encoder	jIHEncoder
-#define jinit_phuff_encoder	jIPHEncoder
-#define jinit_marker_writer	jIMWriter
-#define jinit_master_decompress	jIDMaster
-#define jinit_d_main_controller	jIDMainC
-#define jinit_d_coef_controller	jIDCoefC
-#define jinit_d_post_controller	jIDPostC
-#define jinit_input_controller	jIInCtlr
-#define jinit_marker_reader	jIMReader
-#define jinit_huff_decoder	jIHDecoder
-#define jinit_phuff_decoder	jIPHDecoder
-#define jinit_inverse_dct	jIIDCT
-#define jinit_upsampler		jIUpsampler
-#define jinit_color_deconverter	jIDColor
-#define jinit_1pass_quantizer	jI1Quant
-#define jinit_2pass_quantizer	jI2Quant
-#define jinit_merged_upsampler	jIMUpsampler
-#define jinit_memory_mgr	jIMemMgr
-#define jdiv_round_up		jDivRound
-#define jround_up		jRound
-#define jcopy_sample_rows	jCopySamples
-#define jcopy_block_row		jCopyBlocks
-#define jzero_far		jZeroFar
-#define jpeg_zigzag_order	jZIGTable
-#define jpeg_natural_order	jZAGTable
-#endif /* NEED_SHORT_EXTERNAL_NAMES */
-
-
-/* Compression module initialization routines */
-EXTERN void jinit_compress_master JPP((j_compress_ptr cinfo));
-EXTERN void jinit_c_master_control JPP((j_compress_ptr cinfo,
-                                        boolean transcode_only));
-EXTERN void jinit_c_main_controller JPP((j_compress_ptr cinfo,
-                                        boolean need_full_buffer));
-EXTERN void jinit_c_prep_controller JPP((j_compress_ptr cinfo,
-                                        boolean need_full_buffer));
-EXTERN void jinit_c_coef_controller JPP((j_compress_ptr cinfo,
-                                        boolean need_full_buffer));
-EXTERN void jinit_color_converter JPP((j_compress_ptr cinfo));
-EXTERN void jinit_downsampler JPP((j_compress_ptr cinfo));
-EXTERN void jinit_forward_dct JPP((j_compress_ptr cinfo));
-EXTERN void jinit_huff_encoder JPP((j_compress_ptr cinfo));
-EXTERN void jinit_phuff_encoder JPP((j_compress_ptr cinfo));
-EXTERN void jinit_marker_writer JPP((j_compress_ptr cinfo));
-/* Decompression module initialization routines */
-EXTERN void jinit_master_decompress JPP((j_decompress_ptr cinfo));
-EXTERN void jinit_d_main_controller JPP((j_decompress_ptr cinfo,
-                                        boolean need_full_buffer));
-EXTERN void jinit_d_coef_controller JPP((j_decompress_ptr cinfo,
-                                        boolean need_full_buffer));
-EXTERN void jinit_d_post_controller JPP((j_decompress_ptr cinfo,
-                                        boolean need_full_buffer));
-EXTERN void jinit_input_controller JPP((j_decompress_ptr cinfo));
-EXTERN void jinit_marker_reader JPP((j_decompress_ptr cinfo));
-EXTERN void jinit_huff_decoder JPP((j_decompress_ptr cinfo));
-EXTERN void jinit_phuff_decoder JPP((j_decompress_ptr cinfo));
-EXTERN void jinit_inverse_dct JPP((j_decompress_ptr cinfo));
-EXTERN void jinit_upsampler JPP((j_decompress_ptr cinfo));
-EXTERN void jinit_color_deconverter JPP((j_decompress_ptr cinfo));
-EXTERN void jinit_1pass_quantizer JPP((j_decompress_ptr cinfo));
-EXTERN void jinit_2pass_quantizer JPP((j_decompress_ptr cinfo));
-EXTERN void jinit_merged_upsampler JPP((j_decompress_ptr cinfo));
-/* Memory manager initialization */
-EXTERN void jinit_memory_mgr JPP((j_common_ptr cinfo));
-
-/* Utility routines in jutils.c */
-EXTERN long jdiv_round_up JPP((long a, long b));
-EXTERN long jround_up JPP((long a, long b));
-EXTERN void jcopy_sample_rows JPP((JSAMPARRAY input_array, int source_row,
-                                   JSAMPARRAY output_array, int dest_row,
-                                   int num_rows, JDIMENSION num_cols));
-EXTERN void jcopy_block_row JPP((JBLOCKROW input_row, JBLOCKROW output_row,
-                                 JDIMENSION num_blocks));
-EXTERN void jzero_far JPP((void FAR * target, size_t bytestozero));
-/* Constant tables in jutils.c */
-extern const int jpeg_zigzag_order[]; /* natural coef order to zigzag order */
-extern const int jpeg_natural_order[]; /* zigzag coef order to natural order */
-
-/* Suppress undefined-structure complaints if necessary. */
-
-#ifdef INCOMPLETE_TYPES_BROKEN
-#ifndef AM_MEMORY_MANAGER	/* only jmemmgr.c defines these */
-struct jvirt_sarray_control
-{
-    long dummy;
-};
-struct jvirt_barray_control
-{
-    long dummy;
-};
-#endif
-#endif /* INCOMPLETE_TYPES_BROKEN */
diff -NEaurb neo/renderer/jpeg-6/jpeglib.h neo/renderer/jpeg-6/jpeglib.h
--- neo/renderer/jpeg-6/jpeglib.h	2013-08-14 01:47:52 +0000
+++ neo/renderer/jpeg-6/jpeglib.h	1970-01-01 00:00:00 +0000
@@ -1,1133 +0,0 @@
-/*
- * jpeglib.h
- *
- * Copyright (C) 1991-1995, Thomas G. Lane.
- * This file is part of the Independent JPEG Group's software.
- * For conditions of distribution and use, see the accompanying README file.
- *
- * This file defines the application interface for the JPEG library.
- * Most applications using the library need only include this file,
- * and perhaps jerror.h if they want to know the exact error codes.
- */
-
-#ifndef JPEGLIB_H
-#define JPEGLIB_H
-
-typedef unsigned char boolean;
-/*
- * First we include the configuration files that record how this
- * installation of the JPEG library is set up.  jconfig.h can be
- * generated automatically for many systems.  jmorecfg.h contains
- * manual configuration options that most people need not worry about.
- */
-
-#ifndef JCONFIG_INCLUDED	/* in case jinclude.h already did */
-#include "../jpeg-6/jconfig.h"		/* widely used configuration options */
-#endif
-#include "../jpeg-6/jmorecfg.h"		/* seldom changed options */
-
-
-/* Version ID for the JPEG library.
- * Might be useful for tests like "#if JPEG_LIB_VERSION >= 60".
- */
-
-#define JPEG_LIB_VERSION  60	/* Version 6 */
-
-
-/* Various constants determining the sizes of things.
- * All of these are specified by the JPEG standard, so don't change them
- * if you want to be compatible.
- */
-
-#define DCTSIZE		    8	/* The basic DCT block is 8x8 samples */
-#define DCTSIZE2	    64	/* DCTSIZE squared; # of elements in a block */
-#define NUM_QUANT_TBLS      4	/* Quantization tables are numbered 0..3 */
-#define NUM_HUFF_TBLS       4	/* Huffman tables are numbered 0..3 */
-#define NUM_ARITH_TBLS      16	/* Arith-coding tables are numbered 0..15 */
-#define MAX_COMPS_IN_SCAN   4	/* JPEG limit on # of components in one scan */
-#define MAX_SAMP_FACTOR     4	/* JPEG limit on sampling factors */
-/* Unfortunately, some bozo at Adobe saw no reason to be bound by the standard;
- * the PostScript DCT filter can emit files with many more than 10 blocks/MCU.
- * If you happen to run across such a file, you can up D_MAX_BLOCKS_IN_MCU
- * to handle it.  We even let you do this from the jconfig.h file.  However,
- * we strongly discourage changing C_MAX_BLOCKS_IN_MCU; just because Adobe
- * sometimes emits noncompliant files doesn't mean you should too.
- */
-#define C_MAX_BLOCKS_IN_MCU   10 /* compressor's limit on blocks per MCU */
-#ifndef D_MAX_BLOCKS_IN_MCU
-#define D_MAX_BLOCKS_IN_MCU   10 /* decompressor's limit on blocks per MCU */
-#endif
-
-
-/* This macro is used to declare a "method", that is, a function pointer.
- * We want to supply prototype parameters if the compiler can cope.
- * Note that the arglist parameter must be parenthesized!
- */
-
-#ifdef HAVE_PROTOTYPES
-#define JMETHOD(type,methodname,arglist)  type (*methodname) arglist
-#else
-#define JMETHOD(type,methodname,arglist)  type (*methodname) ()
-#endif
-
-
-/* Data structures for images (arrays of samples and of DCT coefficients).
- * On 80x86 machines, the image arrays are too big for near pointers,
- * but the pointer arrays can fit in near memory.
- */
-
-typedef JSAMPLE FAR *JSAMPROW;	/* ptr to one image row of pixel samples. */
-typedef JSAMPROW *JSAMPARRAY;	/* ptr to some rows (a 2-D sample array) */
-typedef JSAMPARRAY *JSAMPIMAGE;	/* a 3-D sample array: top index is color */
-
-typedef JCOEF JBLOCK[DCTSIZE2];	/* one block of coefficients */
-typedef JBLOCK FAR *JBLOCKROW;	/* pointer to one row of coefficient blocks */
-typedef JBLOCKROW *JBLOCKARRAY;		/* a 2-D array of coefficient blocks */
-typedef JBLOCKARRAY *JBLOCKIMAGE;	/* a 3-D array of coefficient blocks */
-
-typedef JCOEF FAR *JCOEFPTR;	/* useful in a couple of places */
-
-
-/* Types for JPEG compression parameters and working tables. */
-
-
-/* DCT coefficient quantization tables. */
-
-typedef struct
-{
-    /* This field directly represents the contents of a JPEG DQT marker.
-     * Note: the values are always given in zigzag order.
-     */
-    UINT16 quantval[DCTSIZE2];	/* quantization step for each coefficient */
-    /* This field is used only during compression.  It's initialized FALSE when
-     * the table is created, and set TRUE when it's been output to the file.
-     * You could suppress output of a table by setting this to TRUE.
-     * (See jpeg_suppress_tables for an example.)
-     */
-    boolean sent_table;		/* TRUE when table has been output */
-} JQUANT_TBL;
-
-
-/* Huffman coding tables. */
-
-typedef struct
-{
-    /* These two fields directly represent the contents of a JPEG DHT marker */
-    UINT8 bits[17];		/* bits[k] = # of symbols with codes of */
-    /* length k bits; bits[0] is unused */
-    UINT8 huffval[256];		/* The symbols, in order of incr code length */
-    /* This field is used only during compression.  It's initialized FALSE when
-     * the table is created, and set TRUE when it's been output to the file.
-     * You could suppress output of a table by setting this to TRUE.
-     * (See jpeg_suppress_tables for an example.)
-     */
-    boolean sent_table;		/* TRUE when table has been output */
-} JHUFF_TBL;
-
-
-/* Basic info about one component (color channel). */
-
-typedef struct
-{
-    /* These values are fixed over the whole image. */
-    /* For compression, they must be supplied by parameter setup; */
-    /* for decompression, they are read from the SOF marker. */
-    int component_id;		/* identifier for this component (0..255) */
-    int component_index;		/* its index in SOF or cinfo->comp_info[] */
-    int h_samp_factor;		/* horizontal sampling factor (1..4) */
-    int v_samp_factor;		/* vertical sampling factor (1..4) */
-    int quant_tbl_no;		/* quantization table selector (0..3) */
-    /* These values may vary between scans. */
-    /* For compression, they must be supplied by parameter setup; */
-    /* for decompression, they are read from the SOS marker. */
-    /* The decompressor output side may not use these variables. */
-    int dc_tbl_no;		/* DC entropy table selector (0..3) */
-    int ac_tbl_no;		/* AC entropy table selector (0..3) */
-
-    /* Remaining fields should be treated as private by applications. */
-
-    /* These values are computed during compression or decompression startup: */
-    /* Component's size in DCT blocks.
-     * Any dummy blocks added to complete an MCU are not counted; therefore
-     * these values do not depend on whether a scan is interleaved or not.
-     */
-    JDIMENSION width_in_blocks;
-    JDIMENSION height_in_blocks;
-    /* Size of a DCT block in samples.  Always DCTSIZE for compression.
-     * For decompression this is the size of the output from one DCT block,
-     * reflecting any scaling we choose to apply during the IDCT step.
-     * Values of 1,2,4,8 are likely to be supported.  Note that different
-     * components may receive different IDCT scalings.
-     */
-    int DCT_scaled_size;
-    /* The downsampled dimensions are the component's actual, unpadded number
-     * of samples at the main buffer (preprocessing/compression interface), thus
-     * downsampled_width = ceil(image_width * Hi/Hmax)
-     * and similarly for height.  For decompression, IDCT scaling is included, so
-     * downsampled_width = ceil(image_width * Hi/Hmax * DCT_scaled_size/DCTSIZE)
-     */
-    JDIMENSION downsampled_width;	 /* actual width in samples */
-    JDIMENSION downsampled_height; /* actual height in samples */
-    /* This flag is used only for decompression.  In cases where some of the
-     * components will be ignored (eg grayscale output from YCbCr image),
-     * we can skip most computations for the unused components.
-     */
-    boolean component_needed;	/* do we need the value of this component? */
-
-    /* These values are computed before starting a scan of the component. */
-    /* The decompressor output side may not use these variables. */
-    int MCU_width;		/* number of blocks per MCU, horizontally */
-    int MCU_height;		/* number of blocks per MCU, vertically */
-    int MCU_blocks;		/* MCU_width * MCU_height */
-    int MCU_sample_width;		/* MCU width in samples, MCU_width*DCT_scaled_size */
-    int last_col_width;		/* # of non-dummy blocks across in last MCU */
-    int last_row_height;		/* # of non-dummy blocks down in last MCU */
-
-    /* Saved quantization table for component; NULL if none yet saved.
-     * See jdinput.c comments about the need for this information.
-     * This field is not currently used by the compressor.
-     */
-    JQUANT_TBL * quant_table;
-
-    /* Private per-component storage for DCT or IDCT subsystem. */
-    void * dct_table;
-} jpeg_component_info;
-
-
-/* The script for encoding a multiple-scan file is an array of these: */
-
-typedef struct
-{
-    int comps_in_scan;		/* number of components encoded in this scan */
-    int component_index[MAX_COMPS_IN_SCAN]; /* their SOF/comp_info[] indexes */
-    int Ss, Se;			/* progressive JPEG spectral selection parms */
-    int Ah, Al;			/* progressive JPEG successive approx. parms */
-} jpeg_scan_info;
-
-
-/* Known color spaces. */
-
-typedef enum
-{
-    JCS_UNKNOWN,		/* error/unspecified */
-    JCS_GRAYSCALE,		/* monochrome */
-    JCS_RGB,		/* red/green/blue */
-    JCS_YCbCr,		/* Y/Cb/Cr (also known as YUV) */
-    JCS_CMYK,		/* C/M/Y/K */
-    JCS_YCCK		/* Y/Cb/Cr/K */
-} J_COLOR_SPACE;
-
-/* DCT/IDCT algorithm options. */
-
-typedef enum
-{
-    JDCT_ISLOW,		/* slow but accurate integer algorithm */
-    JDCT_IFAST,		/* faster, less accurate integer method */
-    JDCT_FLOAT		/* floating-point: accurate, fast on fast HW */
-} J_DCT_METHOD;
-
-#ifndef JDCT_DEFAULT		/* may be overridden in jconfig.h */
-#define JDCT_DEFAULT  JDCT_ISLOW
-#endif
-#ifndef JDCT_FASTEST		/* may be overridden in jconfig.h */
-#define JDCT_FASTEST  JDCT_IFAST
-#endif
-
-/* Dithering options for decompression. */
-
-typedef enum
-{
-    JDITHER_NONE,		/* no dithering */
-    JDITHER_ORDERED,	/* simple ordered dither */
-    JDITHER_FS		/* Floyd-Steinberg error diffusion dither */
-} J_DITHER_MODE;
-
-
-/* Common fields between JPEG compression and decompression master structs. */
-
-#define jpeg_common_fields \
-  struct jpeg_error_mgr * err;	/* Error handler module */\
-  struct jpeg_memory_mgr * mem;	/* Memory manager module */\
-  struct jpeg_progress_mgr * progress; /* Progress monitor, or NULL if none */\
-  boolean is_decompressor;	/* so common code can tell which is which */\
-  int global_state		/* for checking call sequence validity */
-
-/* Routines that are to be used by both halves of the library are declared
- * to receive a pointer to this structure.  There are no actual instances of
- * jpeg_common_struct, only of jpeg_compress_struct and jpeg_decompress_struct.
- */
-struct jpeg_common_struct
-{
-    jpeg_common_fields;		/* Fields common to both master struct types */
-    /* Additional fields follow in an actual jpeg_compress_struct or
-     * jpeg_decompress_struct.  All three structs must agree on these
-     * initial fields!  (This would be a lot cleaner in C++.)
-     */
-};
-
-typedef struct jpeg_common_struct * j_common_ptr;
-typedef struct jpeg_compress_struct * j_compress_ptr;
-typedef struct jpeg_decompress_struct * j_decompress_ptr;
-
-
-/* Master record for a compression instance */
-
-struct jpeg_compress_struct
-{
-    jpeg_common_fields;		/* Fields shared with jpeg_decompress_struct */
-
-    /* Destination for compressed data */
-    struct jpeg_destination_mgr * dest;
-
-    /* Description of source image --- these fields must be filled in by
-     * outer application before starting compression.  in_color_space must
-     * be correct before you can even call jpeg_set_defaults().
-     */
-
-    JDIMENSION image_width;	/* input image width */
-    JDIMENSION image_height;	/* input image height */
-    int input_components;		/* # of color components in input image */
-    J_COLOR_SPACE in_color_space;	/* colorspace of input image */
-
-    double input_gamma;		/* image gamma of input image */
-
-    /* Compression parameters --- these fields must be set before calling
-     * jpeg_start_compress().  We recommend calling jpeg_set_defaults() to
-     * initialize everything to reasonable defaults, then changing anything
-     * the application specifically wants to change.  That way you won't get
-     * burnt when new parameters are added.  Also note that there are several
-     * helper routines to simplify changing parameters.
-     */
-
-    int data_precision;		/* bits of precision in image data */
-
-    int num_components;		/* # of color components in JPEG image */
-    J_COLOR_SPACE jpeg_color_space; /* colorspace of JPEG image */
-
-    jpeg_component_info * comp_info;
-    /* comp_info[i] describes component that appears i'th in SOF */
-
-    JQUANT_TBL * quant_tbl_ptrs[NUM_QUANT_TBLS];
-    /* ptrs to coefficient quantization tables, or NULL if not defined */
-
-    JHUFF_TBL * dc_huff_tbl_ptrs[NUM_HUFF_TBLS];
-    JHUFF_TBL * ac_huff_tbl_ptrs[NUM_HUFF_TBLS];
-    /* ptrs to Huffman coding tables, or NULL if not defined */
-
-    UINT8 arith_dc_L[NUM_ARITH_TBLS]; /* L values for DC arith-coding tables */
-    UINT8 arith_dc_U[NUM_ARITH_TBLS]; /* U values for DC arith-coding tables */
-    UINT8 arith_ac_K[NUM_ARITH_TBLS]; /* Kx values for AC arith-coding tables */
-
-    int num_scans;		/* # of entries in scan_info array */
-    const jpeg_scan_info * scan_info; /* script for multi-scan file, or NULL */
-    /* The default value of scan_info is NULL, which causes a single-scan
-     * sequential JPEG file to be emitted.  To create a multi-scan file,
-     * set num_scans and scan_info to point to an array of scan definitions.
-     */
-
-    boolean raw_data_in;		/* TRUE=caller supplies downsampled data */
-    boolean arith_code;		/* TRUE=arithmetic coding, FALSE=Huffman */
-    boolean optimize_coding;	/* TRUE=optimize entropy encoding parms */
-    boolean CCIR601_sampling;	/* TRUE=first samples are cosited */
-    int smoothing_factor;		/* 1..100, or 0 for no input smoothing */
-    J_DCT_METHOD dct_method;	/* DCT algorithm selector */
-
-    /* The restart interval can be specified in absolute MCUs by setting
-     * restart_interval, or in MCU rows by setting restart_in_rows
-     * (in which case the correct restart_interval will be figured
-     * for each scan).
-     */
-    unsigned int restart_interval; /* MCUs per restart, or 0 for no restart */
-    int restart_in_rows;		/* if > 0, MCU rows per restart interval */
-
-    /* Parameters controlling emission of special markers. */
-
-    boolean write_JFIF_header;	/* should a JFIF marker be written? */
-    /* These three values are not used by the JPEG code, merely copied */
-    /* into the JFIF APP0 marker.  density_unit can be 0 for unknown, */
-    /* 1 for dots/inch, or 2 for dots/cm.  Note that the pixel aspect */
-    /* ratio is defined by X_density/Y_density even when density_unit=0. */
-    UINT8 density_unit;		/* JFIF code for pixel size units */
-    UINT16 X_density;		/* Horizontal pixel density */
-    UINT16 Y_density;		/* Vertical pixel density */
-    boolean write_Adobe_marker;	/* should an Adobe marker be written? */
-
-    /* State variable: index of next scanline to be written to
-     * jpeg_write_scanlines().  Application may use this to control its
-     * processing loop, e.g., "while (next_scanline < image_height)".
-     */
-
-    JDIMENSION next_scanline;	/* 0 .. image_height-1  */
-
-    /* Remaining fields are known throughout compressor, but generally
-     * should not be touched by a surrounding application.
-     */
-
-    /*
-     * These fields are computed during compression startup
-     */
-    boolean progressive_mode;	/* TRUE if scan script uses progressive mode */
-    int max_h_samp_factor;	/* largest h_samp_factor */
-    int max_v_samp_factor;	/* largest v_samp_factor */
-
-    JDIMENSION total_iMCU_rows;	/* # of iMCU rows to be input to coef ctlr */
-    /* The coefficient controller receives data in units of MCU rows as defined
-     * for fully interleaved scans (whether the JPEG file is interleaved or not).
-     * There are v_samp_factor * DCTSIZE sample rows of each component in an
-     * "iMCU" (interleaved MCU) row.
-     */
-
-    /*
-     * These fields are valid during any one scan.
-     * They describe the components and MCUs actually appearing in the scan.
-     */
-    int comps_in_scan;		/* # of JPEG components in this scan */
-    jpeg_component_info * cur_comp_info[MAX_COMPS_IN_SCAN];
-    /* *cur_comp_info[i] describes component that appears i'th in SOS */
-
-    JDIMENSION MCUs_per_row;	/* # of MCUs across the image */
-    JDIMENSION MCU_rows_in_scan;	/* # of MCU rows in the image */
-
-    int blocks_in_MCU;		/* # of DCT blocks per MCU */
-    int MCU_membership[C_MAX_BLOCKS_IN_MCU];
-    /* MCU_membership[i] is index in cur_comp_info of component owning */
-    /* i'th block in an MCU */
-
-    int Ss, Se, Ah, Al;		/* progressive JPEG parameters for scan */
-
-    /*
-     * Links to compression subobjects (methods and private variables of modules)
-     */
-    struct jpeg_comp_master * master;
-    struct jpeg_c_main_controller * main;
-    struct jpeg_c_prep_controller * prep;
-    struct jpeg_c_coef_controller * coef;
-    struct jpeg_marker_writer * marker;
-    struct jpeg_color_converter * cconvert;
-    struct jpeg_downsampler * downsample;
-    struct jpeg_forward_dct * fdct;
-    struct jpeg_entropy_encoder * entropy;
-};
-
-
-/* Master record for a decompression instance */
-
-struct jpeg_decompress_struct
-{
-    jpeg_common_fields;		/* Fields shared with jpeg_compress_struct */
-
-    /* Source of compressed data */
-    struct jpeg_source_mgr * src;
-
-    /* Basic description of image --- filled in by jpeg_read_header(). */
-    /* Application may inspect these values to decide how to process image. */
-
-    JDIMENSION image_width;	/* nominal image width (from SOF marker) */
-    JDIMENSION image_height;	/* nominal image height */
-    int num_components;		/* # of color components in JPEG image */
-    J_COLOR_SPACE jpeg_color_space; /* colorspace of JPEG image */
-
-    /* Decompression processing parameters --- these fields must be set before
-     * calling jpeg_start_decompress().  Note that jpeg_read_header() initializes
-     * them to default values.
-     */
-
-    J_COLOR_SPACE out_color_space; /* colorspace for output */
-
-    unsigned int scale_num, scale_denom; /* fraction by which to scale image */
-
-    double output_gamma;		/* image gamma wanted in output */
-
-    boolean buffered_image;	/* TRUE=multiple output passes */
-    boolean raw_data_out;		/* TRUE=downsampled data wanted */
-
-    J_DCT_METHOD dct_method;	/* IDCT algorithm selector */
-    boolean do_fancy_upsampling;	/* TRUE=apply fancy upsampling */
-    boolean do_block_smoothing;	/* TRUE=apply interblock smoothing */
-
-    boolean quantize_colors;	/* TRUE=colormapped output wanted */
-    /* the following are ignored if not quantize_colors: */
-    J_DITHER_MODE dither_mode;	/* type of color dithering to use */
-    boolean two_pass_quantize;	/* TRUE=use two-pass color quantization */
-    int desired_number_of_colors;	/* max # colors to use in created colormap */
-    /* these are significant only in buffered-image mode: */
-    boolean enable_1pass_quant;	/* enable future use of 1-pass quantizer */
-    boolean enable_external_quant;/* enable future use of external colormap */
-    boolean enable_2pass_quant;	/* enable future use of 2-pass quantizer */
-
-    /* Description of actual output image that will be returned to application.
-     * These fields are computed by jpeg_start_decompress().
-     * You can also use jpeg_calc_output_dimensions() to determine these values
-     * in advance of calling jpeg_start_decompress().
-     */
-
-    JDIMENSION output_width;	/* scaled image width */
-    JDIMENSION output_height;	/* scaled image height */
-    int out_color_components;	/* # of color components in out_color_space */
-    int output_components;	/* # of color components returned */
-    /* output_components is 1 (a colormap index) when quantizing colors;
-     * otherwise it equals out_color_components.
-     */
-    int rec_outbuf_height;	/* min recommended height of scanline buffer */
-    /* If the buffer passed to jpeg_read_scanlines() is less than this many rows
-     * high, space and time will be wasted due to unnecessary data copying.
-     * Usually rec_outbuf_height will be 1 or 2, at most 4.
-     */
-
-    /* When quantizing colors, the output colormap is described by these fields.
-     * The application can supply a colormap by setting colormap non-NULL before
-     * calling jpeg_start_decompress; otherwise a colormap is created during
-     * jpeg_start_decompress or jpeg_start_output.
-     * The map has out_color_components rows and actual_number_of_colors columns.
-     */
-    int actual_number_of_colors;	/* number of entries in use */
-    JSAMPARRAY colormap;		/* The color map as a 2-D pixel array */
-
-    /* State variables: these variables indicate the progress of decompression.
-     * The application may examine these but must not modify them.
-     */
-
-    /* Row index of next scanline to be read from jpeg_read_scanlines().
-     * Application may use this to control its processing loop, e.g.,
-     * "while (output_scanline < output_height)".
-     */
-    JDIMENSION output_scanline;	/* 0 .. output_height-1  */
-
-    /* Current input scan number and number of iMCU rows completed in scan.
-     * These indicate the progress of the decompressor input side.
-     */
-    int input_scan_number;	/* Number of SOS markers seen so far */
-    JDIMENSION input_iMCU_row;	/* Number of iMCU rows completed */
-
-    /* The "output scan number" is the notional scan being displayed by the
-     * output side.  The decompressor will not allow output scan/row number
-     * to get ahead of input scan/row, but it can fall arbitrarily far behind.
-     */
-    int output_scan_number;	/* Nominal scan number being displayed */
-    JDIMENSION output_iMCU_row;	/* Number of iMCU rows read */
-
-    /* Current progression status.  coef_bits[c][i] indicates the precision
-     * with which component c's DCT coefficient i (in zigzag order) is known.
-     * It is -1 when no data has yet been received, otherwise it is the point
-     * transform (shift) value for the most recent scan of the coefficient
-     * (thus, 0 at completion of the progression).
-     * This pointer is NULL when reading a non-progressive file.
-     */
-    int (*coef_bits)[DCTSIZE2];	/* -1 or current Al value for each coef */
-
-    /* Internal JPEG parameters --- the application usually need not look at
-     * these fields.  Note that the decompressor output side may not use
-     * any parameters that can change between scans.
-     */
-
-    /* Quantization and Huffman tables are carried forward across input
-     * datastreams when processing abbreviated JPEG datastreams.
-     */
-
-    JQUANT_TBL * quant_tbl_ptrs[NUM_QUANT_TBLS];
-    /* ptrs to coefficient quantization tables, or NULL if not defined */
-
-    JHUFF_TBL * dc_huff_tbl_ptrs[NUM_HUFF_TBLS];
-    JHUFF_TBL * ac_huff_tbl_ptrs[NUM_HUFF_TBLS];
-    /* ptrs to Huffman coding tables, or NULL if not defined */
-
-    /* These parameters are never carried across datastreams, since they
-     * are given in SOF/SOS markers or defined to be reset by SOI.
-     */
-
-    int data_precision;		/* bits of precision in image data */
-
-    jpeg_component_info * comp_info;
-    /* comp_info[i] describes component that appears i'th in SOF */
-
-    boolean progressive_mode;	/* TRUE if SOFn specifies progressive mode */
-    boolean arith_code;		/* TRUE=arithmetic coding, FALSE=Huffman */
-
-    UINT8 arith_dc_L[NUM_ARITH_TBLS]; /* L values for DC arith-coding tables */
-    UINT8 arith_dc_U[NUM_ARITH_TBLS]; /* U values for DC arith-coding tables */
-    UINT8 arith_ac_K[NUM_ARITH_TBLS]; /* Kx values for AC arith-coding tables */
-
-    unsigned int restart_interval; /* MCUs per restart interval, or 0 for no restart */
-
-    /* These fields record data obtained from optional markers recognized by
-     * the JPEG library.
-     */
-    boolean saw_JFIF_marker;	/* TRUE iff a JFIF APP0 marker was found */
-    /* Data copied from JFIF marker: */
-    UINT8 density_unit;		/* JFIF code for pixel size units */
-    UINT16 X_density;		/* Horizontal pixel density */
-    UINT16 Y_density;		/* Vertical pixel density */
-    boolean saw_Adobe_marker;	/* TRUE iff an Adobe APP14 marker was found */
-    UINT8 Adobe_transform;	/* Color transform code from Adobe marker */
-
-    boolean CCIR601_sampling;	/* TRUE=first samples are cosited */
-
-    /* Remaining fields are known throughout decompressor, but generally
-     * should not be touched by a surrounding application.
-     */
-
-    /*
-     * These fields are computed during decompression startup
-     */
-    int max_h_samp_factor;	/* largest h_samp_factor */
-    int max_v_samp_factor;	/* largest v_samp_factor */
-
-    int min_DCT_scaled_size;	/* smallest DCT_scaled_size of any component */
-
-    JDIMENSION total_iMCU_rows;	/* # of iMCU rows in image */
-    /* The coefficient controller's input and output progress is measured in
-     * units of "iMCU" (interleaved MCU) rows.  These are the same as MCU rows
-     * in fully interleaved JPEG scans, but are used whether the scan is
-     * interleaved or not.  We define an iMCU row as v_samp_factor DCT block
-     * rows of each component.  Therefore, the IDCT output contains
-     * v_samp_factor*DCT_scaled_size sample rows of a component per iMCU row.
-     */
-
-    JSAMPLE * sample_range_limit; /* table for fast range-limiting */
-
-    /*
-     * These fields are valid during any one scan.
-     * They describe the components and MCUs actually appearing in the scan.
-     * Note that the decompressor output side must not use these fields.
-     */
-    int comps_in_scan;		/* # of JPEG components in this scan */
-    jpeg_component_info * cur_comp_info[MAX_COMPS_IN_SCAN];
-    /* *cur_comp_info[i] describes component that appears i'th in SOS */
-
-    JDIMENSION MCUs_per_row;	/* # of MCUs across the image */
-    JDIMENSION MCU_rows_in_scan;	/* # of MCU rows in the image */
-
-    int blocks_in_MCU;		/* # of DCT blocks per MCU */
-    int MCU_membership[D_MAX_BLOCKS_IN_MCU];
-    /* MCU_membership[i] is index in cur_comp_info of component owning */
-    /* i'th block in an MCU */
-
-    int Ss, Se, Ah, Al;		/* progressive JPEG parameters for scan */
-
-    /* This field is shared between entropy decoder and marker parser.
-     * It is either zero or the code of a JPEG marker that has been
-     * read from the data source, but has not yet been processed.
-     */
-    int unread_marker;
-
-    /*
-     * Links to decompression subobjects (methods, private variables of modules)
-     */
-    struct jpeg_decomp_master * master;
-    struct jpeg_d_main_controller * main;
-    struct jpeg_d_coef_controller * coef;
-    struct jpeg_d_post_controller * post;
-    struct jpeg_input_controller * inputctl;
-    struct jpeg_marker_reader * marker;
-    struct jpeg_entropy_decoder * entropy;
-    struct jpeg_inverse_dct * idct;
-    struct jpeg_upsampler * upsample;
-    struct jpeg_color_deconverter * cconvert;
-    struct jpeg_color_quantizer * cquantize;
-};
-
-
-/* "Object" declarations for JPEG modules that may be supplied or called
- * directly by the surrounding application.
- * As with all objects in the JPEG library, these structs only define the
- * publicly visible methods and state variables of a module.  Additional
- * private fields may exist after the public ones.
- */
-
-
-/* Error handler object */
-
-struct jpeg_error_mgr
-{
-    /* Error exit handler: does not return to caller */
-    JMETHOD(void, error_exit, (j_common_ptr cinfo));
-    /* Conditionally emit a trace or warning message */
-    JMETHOD(void, emit_message, (j_common_ptr cinfo, int msg_level));
-    /* Routine that actually outputs a trace or error message */
-    JMETHOD(void, output_message, (j_common_ptr cinfo));
-    /* Format a message string for the most recent JPEG error or message */
-    JMETHOD(void, format_message, (j_common_ptr cinfo, char * buffer));
-#define JMSG_LENGTH_MAX  200	/* recommended size of format_message buffer */
-    /* Reset error state variables at start of a new image */
-    JMETHOD(void, reset_error_mgr, (j_common_ptr cinfo));
-
-    /* The message ID code and any parameters are saved here.
-     * A message can have one string parameter or up to 8 int parameters.
-     */
-    int msg_code;
-#define JMSG_STR_PARM_MAX  80
-    union
-    {
-        int i[8];
-        char s[JMSG_STR_PARM_MAX];
-    } msg_parm;
-
-    /* Standard state variables for error facility */
-
-    int trace_level;		/* max msg_level that will be displayed */
-
-    /* For recoverable corrupt-data errors, we emit a warning message,
-     * but keep going unless emit_message chooses to abort.  emit_message
-     * should count warnings in num_warnings.  The surrounding application
-     * can check for bad data by seeing if num_warnings is nonzero at the
-     * end of processing.
-     */
-    long num_warnings;		/* number of corrupt-data warnings */
-
-    /* These fields point to the table(s) of error message strings.
-     * An application can change the table pointer to switch to a different
-     * message list (typically, to change the language in which errors are
-     * reported).  Some applications may wish to add additional error codes
-     * that will be handled by the JPEG library error mechanism; the second
-     * table pointer is used for this purpose.
-     *
-     * First table includes all errors generated by JPEG library itself.
-     * Error code 0 is reserved for a "no such error string" message.
-     */
-    const char * const * jpeg_message_table; /* Library errors */
-    int last_jpeg_message;    /* Table contains strings 0..last_jpeg_message */
-    /* Second table can be added by application (see cjpeg/djpeg for example).
-     * It contains strings numbered first_addon_message..last_addon_message.
-     */
-    const char * const * addon_message_table; /* Non-library errors */
-    int first_addon_message;	/* code for first string in addon table */
-    int last_addon_message;	/* code for last string in addon table */
-};
-
-
-/* Progress monitor object */
-
-struct jpeg_progress_mgr
-{
-    JMETHOD(void, progress_monitor, (j_common_ptr cinfo));
-
-    long pass_counter;		/* work units completed in this pass */
-    long pass_limit;		/* total number of work units in this pass */
-    int completed_passes;		/* passes completed so far */
-    int total_passes;		/* total number of passes expected */
-};
-
-
-/* Data destination object for compression */
-
-struct jpeg_destination_mgr
-{
-    JOCTET * next_output_byte;	/* => next byte to write in buffer */
-    size_t free_in_buffer;	/* # of byte spaces remaining in buffer */
-
-    JMETHOD(void, init_destination, (j_compress_ptr cinfo));
-    JMETHOD(boolean, empty_output_buffer, (j_compress_ptr cinfo));
-    JMETHOD(void, term_destination, (j_compress_ptr cinfo));
-};
-
-
-/* Data source object for decompression */
-
-struct jpeg_source_mgr
-{
-    const JOCTET * next_input_byte; /* => next byte to read from buffer */
-    size_t bytes_in_buffer;	/* # of bytes remaining in buffer */
-
-    JMETHOD(void, init_source, (j_decompress_ptr cinfo));
-    JMETHOD(boolean, fill_input_buffer, (j_decompress_ptr cinfo));
-    JMETHOD(void, skip_input_data, (j_decompress_ptr cinfo, long num_bytes));
-    JMETHOD(boolean, resync_to_restart, (j_decompress_ptr cinfo, int desired));
-    JMETHOD(void, term_source, (j_decompress_ptr cinfo));
-};
-
-
-/* Memory manager object.
- * Allocates "small" objects (a few K total), "large" objects (tens of K),
- * and "really big" objects (virtual arrays with backing store if needed).
- * The memory manager does not allow individual objects to be freed; rather,
- * each created object is assigned to a pool, and whole pools can be freed
- * at once.  This is faster and more convenient than remembering exactly what
- * to free, especially where malloc()/free() are not too speedy.
- * NB: alloc routines never return NULL.  They exit to error_exit if not
- * successful.
- */
-
-#define JPOOL_PERMANENT	0	/* lasts until master record is destroyed */
-#define JPOOL_IMAGE	1	/* lasts until done with image/datastream */
-#define JPOOL_NUMPOOLS	2
-
-typedef struct jvirt_sarray_control * jvirt_sarray_ptr;
-typedef struct jvirt_barray_control * jvirt_barray_ptr;
-
-
-struct jpeg_memory_mgr
-{
-    /* Method pointers */
-    JMETHOD(void *, alloc_small, (j_common_ptr cinfo, int pool_id,
-                                  size_t sizeofobject));
-    JMETHOD(void FAR *, alloc_large, (j_common_ptr cinfo, int pool_id,
-                                      size_t sizeofobject));
-    JMETHOD(JSAMPARRAY, alloc_sarray, (j_common_ptr cinfo, int pool_id,
-                                       JDIMENSION samplesperrow,
-                                       JDIMENSION numrows));
-    JMETHOD(JBLOCKARRAY, alloc_barray, (j_common_ptr cinfo, int pool_id,
-                                        JDIMENSION blocksperrow,
-                                        JDIMENSION numrows));
-    JMETHOD(jvirt_sarray_ptr, request_virt_sarray, (j_common_ptr cinfo,
-            int pool_id,
-            boolean pre_zero,
-            JDIMENSION samplesperrow,
-            JDIMENSION numrows,
-            JDIMENSION maxaccess));
-    JMETHOD(jvirt_barray_ptr, request_virt_barray, (j_common_ptr cinfo,
-            int pool_id,
-            boolean pre_zero,
-            JDIMENSION blocksperrow,
-            JDIMENSION numrows,
-            JDIMENSION maxaccess));
-    JMETHOD(void, realize_virt_arrays, (j_common_ptr cinfo));
-    JMETHOD(JSAMPARRAY, access_virt_sarray, (j_common_ptr cinfo,
-            jvirt_sarray_ptr ptr,
-            JDIMENSION start_row,
-            JDIMENSION num_rows,
-            boolean writable));
-    JMETHOD(JBLOCKARRAY, access_virt_barray, (j_common_ptr cinfo,
-            jvirt_barray_ptr ptr,
-            JDIMENSION start_row,
-            JDIMENSION num_rows,
-            boolean writable));
-    JMETHOD(void, free_pool, (j_common_ptr cinfo, int pool_id));
-    JMETHOD(void, self_destruct, (j_common_ptr cinfo));
-
-    /* Limit on memory allocation for this JPEG object.  (Note that this is
-     * merely advisory, not a guaranteed maximum; it only affects the space
-     * used for virtual-array buffers.)  May be changed by outer application
-     * after creating the JPEG object.
-     */
-    long max_memory_to_use;
-};
-
-
-/* Routine signature for application-supplied marker processing methods.
- * Need not pass marker code since it is stored in cinfo->unread_marker.
- */
-typedef JMETHOD(boolean, jpeg_marker_parser_method, (j_decompress_ptr cinfo));
-
-
-/* Declarations for routines called by application.
- * The JPP macro hides prototype parameters from compilers that can't cope.
- * Note JPP requires double parentheses.
- */
-
-#ifdef HAVE_PROTOTYPES
-#define JPP(arglist)	arglist
-#else
-#define JPP(arglist)	()
-#endif
-
-
-/* Short forms of external names for systems with brain-damaged linkers.
- * We shorten external names to be unique in the first six letters, which
- * is good enough for all known systems.
- * (If your compiler itself needs names to be unique in less than 15
- * characters, you are out of luck.  Get a better compiler.)
- */
-
-#ifdef NEED_SHORT_EXTERNAL_NAMES
-#define jpeg_std_error		jStdError
-#define jpeg_create_compress	jCreaCompress
-#define jpeg_create_decompress	jCreaDecompress
-#define jpeg_destroy_compress	jDestCompress
-#define jpeg_destroy_decompress	jDestDecompress
-#define jpeg_stdio_dest		jStdDest
-#define jpeg_stdio_src		jStdSrc
-#define jpeg_set_defaults	jSetDefaults
-#define jpeg_set_colorspace	jSetColorspace
-#define jpeg_default_colorspace	jDefColorspace
-#define jpeg_set_quality	jSetQuality
-#define jpeg_set_linear_quality	jSetLQuality
-#define jpeg_add_quant_table	jAddQuantTable
-#define jpeg_quality_scaling	jQualityScaling
-#define jpeg_simple_progression	jSimProgress
-#define jpeg_suppress_tables	jSuppressTables
-#define jpeg_alloc_quant_table	jAlcQTable
-#define jpeg_alloc_huff_table	jAlcHTable
-#define jpeg_start_compress	jStrtCompress
-#define jpeg_write_scanlines	jWrtScanlines
-#define jpeg_finish_compress	jFinCompress
-#define jpeg_write_raw_data	jWrtRawData
-#define jpeg_write_marker	jWrtMarker
-#define jpeg_write_tables	jWrtTables
-#define jpeg_read_header	jReadHeader
-#define jpeg_start_decompress	jStrtDecompress
-#define jpeg_read_scanlines	jReadScanlines
-#define jpeg_finish_decompress	jFinDecompress
-#define jpeg_read_raw_data	jReadRawData
-#define jpeg_has_multiple_scans	jHasMultScn
-#define jpeg_start_output	jStrtOutput
-#define jpeg_finish_output	jFinOutput
-#define jpeg_input_complete	jInComplete
-#define jpeg_new_colormap	jNewCMap
-#define jpeg_consume_input	jConsumeInput
-#define jpeg_calc_output_dimensions	jCalcDimensions
-#define jpeg_set_marker_processor	jSetMarker
-#define jpeg_read_coefficients	jReadCoefs
-#define jpeg_write_coefficients	jWrtCoefs
-#define jpeg_copy_critical_parameters	jCopyCrit
-#define jpeg_abort_compress	jAbrtCompress
-#define jpeg_abort_decompress	jAbrtDecompress
-#define jpeg_abort		jAbort
-#define jpeg_destroy		jDestroy
-#define jpeg_resync_to_restart	jResyncRestart
-#endif /* NEED_SHORT_EXTERNAL_NAMES */
-
-
-/* Default error-management setup */
-EXTERN struct jpeg_error_mgr *jpeg_std_error JPP((struct jpeg_error_mgr *err));
-
-/* Initialization and destruction of JPEG compression objects */
-/* NB: you must set up the error-manager BEFORE calling jpeg_create_xxx */
-EXTERN void jpeg_create_compress JPP((j_compress_ptr cinfo));
-EXTERN void jpeg_create_decompress JPP((j_decompress_ptr cinfo));
-EXTERN void jpeg_destroy_compress JPP((j_compress_ptr cinfo));
-EXTERN void jpeg_destroy_decompress JPP((j_decompress_ptr cinfo));
-
-/* Standard data source and destination managers: stdio streams. */
-/* Caller is responsible for opening the file before and closing after. */
-EXTERN void jpeg_stdio_dest JPP((j_compress_ptr cinfo, FILE * outfile));
-EXTERN void jpeg_stdio_src JPP((j_decompress_ptr cinfo, unsigned char *infile));
-
-/* Default parameter setup for compression */
-EXTERN void jpeg_set_defaults JPP((j_compress_ptr cinfo));
-/* Compression parameter setup aids */
-EXTERN void jpeg_set_colorspace JPP((j_compress_ptr cinfo,
-                                     J_COLOR_SPACE colorspace));
-EXTERN void jpeg_default_colorspace JPP((j_compress_ptr cinfo));
-EXTERN void jpeg_set_quality JPP((j_compress_ptr cinfo, int quality,
-                                  boolean force_baseline));
-EXTERN void jpeg_set_linear_quality JPP((j_compress_ptr cinfo,
-                                        int scale_factor,
-                                        boolean force_baseline));
-EXTERN void jpeg_add_quant_table JPP((j_compress_ptr cinfo, int which_tbl,
-                                      const unsigned int *basic_table,
-                                      int scale_factor,
-                                      boolean force_baseline));
-EXTERN int jpeg_quality_scaling JPP((int quality));
-EXTERN void jpeg_simple_progression JPP((j_compress_ptr cinfo));
-EXTERN void jpeg_suppress_tables JPP((j_compress_ptr cinfo,
-                                      boolean suppress));
-EXTERN JQUANT_TBL * jpeg_alloc_quant_table JPP((j_common_ptr cinfo));
-EXTERN JHUFF_TBL * jpeg_alloc_huff_table JPP((j_common_ptr cinfo));
-
-/* Main entry points for compression */
-EXTERN void jpeg_start_compress JPP((j_compress_ptr cinfo,
-                                     boolean write_all_tables));
-EXTERN JDIMENSION jpeg_write_scanlines JPP((j_compress_ptr cinfo,
-        JSAMPARRAY scanlines,
-        JDIMENSION num_lines));
-EXTERN void jpeg_finish_compress JPP((j_compress_ptr cinfo));
-
-/* Replaces jpeg_write_scanlines when writing raw downsampled data. */
-EXTERN JDIMENSION jpeg_write_raw_data JPP((j_compress_ptr cinfo,
-        JSAMPIMAGE data,
-        JDIMENSION num_lines));
-
-/* Write a special marker.  See libjpeg.doc concerning safe usage. */
-EXTERN void jpeg_write_marker JPP((j_compress_ptr cinfo, int marker,
-                                   const JOCTET *dataptr, unsigned int datalen));
-
-/* Alternate compression function: just write an abbreviated table file */
-EXTERN void jpeg_write_tables JPP((j_compress_ptr cinfo));
-
-/* Decompression startup: read start of JPEG datastream to see what's there */
-EXTERN int jpeg_read_header JPP((j_decompress_ptr cinfo,
-                                 boolean require_image));
-/* Return value is one of: */
-#define JPEG_SUSPENDED		0 /* Suspended due to lack of input data */
-#define JPEG_HEADER_OK		1 /* Found valid image datastream */
-#define JPEG_HEADER_TABLES_ONLY	2 /* Found valid table-specs-only datastream */
-/* If you pass require_image = TRUE (normal case), you need not check for
- * a TABLES_ONLY return code; an abbreviated file will cause an error exit.
- * JPEG_SUSPENDED is only possible if you use a data source module that can
- * give a suspension return (the stdio source module doesn't).
- */
-
-/* Main entry points for decompression */
-EXTERN boolean jpeg_start_decompress JPP((j_decompress_ptr cinfo));
-EXTERN JDIMENSION jpeg_read_scanlines JPP((j_decompress_ptr cinfo,
-        JSAMPARRAY scanlines,
-        JDIMENSION max_lines));
-EXTERN boolean jpeg_finish_decompress JPP((j_decompress_ptr cinfo));
-
-/* Replaces jpeg_read_scanlines when reading raw downsampled data. */
-EXTERN JDIMENSION jpeg_read_raw_data JPP((j_decompress_ptr cinfo,
-        JSAMPIMAGE data,
-        JDIMENSION max_lines));
-
-/* Additional entry points for buffered-image mode. */
-EXTERN boolean jpeg_has_multiple_scans JPP((j_decompress_ptr cinfo));
-EXTERN boolean jpeg_start_output JPP((j_decompress_ptr cinfo,
-                                      int scan_number));
-EXTERN boolean jpeg_finish_output JPP((j_decompress_ptr cinfo));
-EXTERN boolean jpeg_input_complete JPP((j_decompress_ptr cinfo));
-EXTERN void jpeg_new_colormap JPP((j_decompress_ptr cinfo));
-EXTERN int jpeg_consume_input JPP((j_decompress_ptr cinfo));
-/* Return value is one of: */
-/* #define JPEG_SUSPENDED	0    Suspended due to lack of input data */
-#define JPEG_REACHED_SOS	1 /* Reached start of new scan */
-#define JPEG_REACHED_EOI	2 /* Reached end of image */
-#define JPEG_ROW_COMPLETED	3 /* Completed one iMCU row */
-#define JPEG_SCAN_COMPLETED	4 /* Completed last iMCU row of a scan */
-
-/* Precalculate output dimensions for current decompression parameters. */
-EXTERN void jpeg_calc_output_dimensions JPP((j_decompress_ptr cinfo));
-
-/* Install a special processing method for COM or APPn markers. */
-EXTERN void jpeg_set_marker_processor JPP((j_decompress_ptr cinfo,
-        int marker_code,
-        jpeg_marker_parser_method routine));
-
-/* Read or write raw DCT coefficients --- useful for lossless transcoding. */
-EXTERN jvirt_barray_ptr * jpeg_read_coefficients JPP((j_decompress_ptr cinfo));
-EXTERN void jpeg_write_coefficients JPP((j_compress_ptr cinfo,
-                                        jvirt_barray_ptr * coef_arrays));
-EXTERN void jpeg_copy_critical_parameters JPP((j_decompress_ptr srcinfo,
-        j_compress_ptr dstinfo));
-
-/* If you choose to abort compression or decompression before completing
- * jpeg_finish_(de)compress, then you need to clean up to release memory,
- * temporary files, etc.  You can just call jpeg_destroy_(de)compress
- * if you're done with the JPEG object, but if you want to clean it up and
- * reuse it, call this:
- */
-EXTERN void jpeg_abort_compress JPP((j_compress_ptr cinfo));
-EXTERN void jpeg_abort_decompress JPP((j_decompress_ptr cinfo));
-
-/* Generic versions of jpeg_abort and jpeg_destroy that work on either
- * flavor of JPEG object.  These may be more convenient in some places.
- */
-EXTERN void jpeg_abort JPP((j_common_ptr cinfo));
-EXTERN void jpeg_destroy JPP((j_common_ptr cinfo));
-
-/* Default restart-marker-resync procedure for use by data source modules */
-EXTERN boolean jpeg_resync_to_restart JPP((j_decompress_ptr cinfo,
-        int desired));
-
-
-/* These marker codes are exported since applications and data source modules
- * are likely to want to use them.
- */
-
-#define JPEG_RST0	0xD0	/* RST0 marker code */
-#define JPEG_EOI	0xD9	/* EOI marker code */
-#define JPEG_APP0	0xE0	/* APP0 marker code */
-#define JPEG_COM	0xFE	/* COM marker code */
-
-
-/* If we have a brain-damaged compiler that emits warnings (or worse, errors)
- * for structure definitions that are never filled in, keep it quiet by
- * supplying dummy definitions for the various substructures.
- */
-
-#ifdef INCOMPLETE_TYPES_BROKEN
-#ifndef JPEG_INTERNALS		/* will be defined in jpegint.h */
-struct jvirt_sarray_control
-{
-    long dummy;
-};
-struct jvirt_barray_control
-{
-    long dummy;
-};
-struct jpeg_comp_master
-{
-    long dummy;
-};
-struct jpeg_c_main_controller
-{
-    long dummy;
-};
-struct jpeg_c_prep_controller
-{
-    long dummy;
-};
-struct jpeg_c_coef_controller
-{
-    long dummy;
-};
-struct jpeg_marker_writer
-{
-    long dummy;
-};
-struct jpeg_color_converter
-{
-    long dummy;
-};
-struct jpeg_downsampler
-{
-    long dummy;
-};
-struct jpeg_forward_dct
-{
-    long dummy;
-};
-struct jpeg_entropy_encoder
-{
-    long dummy;
-};
-struct jpeg_decomp_master
-{
-    long dummy;
-};
-struct jpeg_d_main_controller
-{
-    long dummy;
-};
-struct jpeg_d_coef_controller
-{
-    long dummy;
-};
-struct jpeg_d_post_controller
-{
-    long dummy;
-};
-struct jpeg_input_controller
-{
-    long dummy;
-};
-struct jpeg_marker_reader
-{
-    long dummy;
-};
-struct jpeg_entropy_decoder
-{
-    long dummy;
-};
-struct jpeg_inverse_dct
-{
-    long dummy;
-};
-struct jpeg_upsampler
-{
-    long dummy;
-};
-struct jpeg_color_deconverter
-{
-    long dummy;
-};
-struct jpeg_color_quantizer
-{
-    long dummy;
-};
-#endif /* JPEG_INTERNALS */
-#endif /* INCOMPLETE_TYPES_BROKEN */
-
-
-/*
- * The JPEG library modules define JPEG_INTERNALS before including this file.
- * The internal structure declarations are read only when that is true.
- * Applications using the library should not include jpegint.h, but may wish
- * to include jerror.h.
- */
-
-#ifdef JPEG_INTERNALS
-#include "../jpeg-6/jpegint.h"		/* fetch private declarations */
-#include "../jpeg-6/jerror.h"		/* fetch error codes too */
-#endif
-
-#endif /* JPEGLIB_H */
diff -NEaurb neo/renderer/jpeg-6/jpegtran.c neo/renderer/jpeg-6/jpegtran.c
--- neo/renderer/jpeg-6/jpegtran.c	2011-12-26 04:15:38 +0000
+++ neo/renderer/jpeg-6/jpegtran.c	1970-01-01 00:00:00 +0000
@@ -1,370 +0,0 @@
-/*
- * jpegtran.c
- *
- * Copyright (C) 1995, Thomas G. Lane.
- * This file is part of the Independent JPEG Group's software.
- * For conditions of distribution and use, see the accompanying README file.
- *
- * This file contains a command-line user interface for JPEG transcoding.
- * It is very similar to cjpeg.c, but provides lossless transcoding between
- * different JPEG file formats.
- */
-
-#include "cdjpeg.h"		/* Common decls for cjpeg/djpeg applications */
-#include "jversion.h"		/* for version message */
-
-#ifdef USE_CCOMMAND		/* command-line reader for Macintosh */
-#ifdef __MWERKS__
-#include <SIOUX.h>              /* Metrowerks declares it here */
-#endif
-#ifdef THINK_C
-#include <console.h>		/* Think declares it here */
-#endif
-#endif
-
-
-/*
- * Argument-parsing code.
- * The switch parser is designed to be useful with DOS-style command line
- * syntax, ie, intermixed switches and file names, where only the switches
- * to the left of a given file name affect processing of that file.
- * The main program in this file doesn't actually use this capability...
- */
-
-
-static const char * progname;	/* program name for error messages */
-static char * outfilename;	/* for -outfile switch */
-
-
-LOCAL void
-usage (void)
-/* complain about bad command line */
-{
-  fprintf(stderr, "usage: %s [switches] ", progname);
-#ifdef TWO_FILE_COMMANDLINE
-  fprintf(stderr, "inputfile outputfile\n");
-#else
-  fprintf(stderr, "[inputfile]\n");
-#endif
-
-  fprintf(stderr, "Switches (names may be abbreviated):\n");
-#ifdef ENTROPY_OPT_SUPPORTED
-  fprintf(stderr, "  -optimize      Optimize Huffman table (smaller file, but slow compression)\n");
-#endif
-#ifdef C_PROGRESSIVE_SUPPORTED
-  fprintf(stderr, "  -progressive   Create progressive JPEG file\n");
-#endif
-  fprintf(stderr, "Switches for advanced users:\n");
-  fprintf(stderr, "  -restart N     Set restart interval in rows, or in blocks with B\n");
-  fprintf(stderr, "  -maxmemory N   Maximum memory to use (in kbytes)\n");
-  fprintf(stderr, "  -outfile name  Specify name for output file\n");
-  fprintf(stderr, "  -verbose  or  -debug   Emit debug output\n");
-  fprintf(stderr, "Switches for wizards:\n");
-#ifdef C_ARITH_CODING_SUPPORTED
-  fprintf(stderr, "  -arithmetic    Use arithmetic coding\n");
-#endif
-#ifdef C_MULTISCAN_FILES_SUPPORTED
-  fprintf(stderr, "  -scans file    Create multi-scan JPEG per script file\n");
-#endif
-  exit(EXIT_FAILURE);
-}
-
-
-LOCAL int
-parse_switches (j_compress_ptr cinfo, int argc, char **argv,
-		int last_file_arg_seen, boolean for_real)
-/* Parse optional switches.
- * Returns argv[] index of first file-name argument (== argc if none).
- * Any file names with indexes <= last_file_arg_seen are ignored;
- * they have presumably been processed in a previous iteration.
- * (Pass 0 for last_file_arg_seen on the first or only iteration.)
- * for_real is FALSE on the first (dummy) pass; we may skip any expensive
- * processing.
- */
-{
-  int argn;
-  char * arg;
-  boolean simple_progressive;
-  char * scansarg = NULL;	/* saves -scans parm if any */
-
-  /* Set up default JPEG parameters. */
-  simple_progressive = FALSE;
-  outfilename = NULL;
-  cinfo->err->trace_level = 0;
-
-  /* Scan command line options, adjust parameters */
-
-  for (argn = 1; argn < argc; argn++) {
-    arg = argv[argn];
-    if (*arg != '-') {
-      /* Not a switch, must be a file name argument */
-      if (argn <= last_file_arg_seen) {
-	outfilename = NULL;	/* -outfile applies to just one input file */
-	continue;		/* ignore this name if previously processed */
-      }
-      break;			/* else done parsing switches */
-    }
-    arg++;			/* advance past switch marker character */
-
-    if (keymatch(arg, "arithmetic", 1)) {
-      /* Use arithmetic coding. */
-#ifdef C_ARITH_CODING_SUPPORTED
-      cinfo->arith_code = TRUE;
-#else
-      fprintf(stderr, "%s: sorry, arithmetic coding not supported\n",
-	      progname);
-      exit(EXIT_FAILURE);
-#endif
-
-    } else if (keymatch(arg, "debug", 1) || keymatch(arg, "verbose", 1)) {
-      /* Enable debug printouts. */
-      /* On first -d, print version identification */
-      static boolean printed_version = FALSE;
-
-      if (! printed_version) {
-	fprintf(stderr, "Independent JPEG Group's JPEGTRAN, version %s\n%s\n",
-		JVERSION, JCOPYRIGHT);
-	printed_version = TRUE;
-      }
-      cinfo->err->trace_level++;
-
-    } else if (keymatch(arg, "maxmemory", 3)) {
-      /* Maximum memory in Kb (or Mb with 'm'). */
-      long lval;
-      char ch = 'x';
-
-      if (++argn >= argc)	/* advance to next argument */
-	usage();
-      if (sscanf(argv[argn], "%ld%c", &lval, &ch) < 1)
-	usage();
-      if (ch == 'm' || ch == 'M')
-	lval *= 1000L;
-      cinfo->mem->max_memory_to_use = lval * 1000L;
-
-    } else if (keymatch(arg, "optimize", 1) || keymatch(arg, "optimise", 1)) {
-      /* Enable entropy parm optimization. */
-#ifdef ENTROPY_OPT_SUPPORTED
-      cinfo->optimize_coding = TRUE;
-#else
-      fprintf(stderr, "%s: sorry, entropy optimization was not compiled\n",
-	      progname);
-      exit(EXIT_FAILURE);
-#endif
-
-    } else if (keymatch(arg, "outfile", 4)) {
-      /* Set output file name. */
-      if (++argn >= argc)	/* advance to next argument */
-	usage();
-      outfilename = argv[argn];	/* save it away for later use */
-
-    } else if (keymatch(arg, "progressive", 1)) {
-      /* Select simple progressive mode. */
-#ifdef C_PROGRESSIVE_SUPPORTED
-      simple_progressive = TRUE;
-      /* We must postpone execution until num_components is known. */
-#else
-      fprintf(stderr, "%s: sorry, progressive output was not compiled\n",
-	      progname);
-      exit(EXIT_FAILURE);
-#endif
-
-    } else if (keymatch(arg, "restart", 1)) {
-      /* Restart interval in MCU rows (or in MCUs with 'b'). */
-      long lval;
-      char ch = 'x';
-
-      if (++argn >= argc)	/* advance to next argument */
-	usage();
-      if (sscanf(argv[argn], "%ld%c", &lval, &ch) < 1)
-	usage();
-      if (lval < 0 || lval > 65535L)
-	usage();
-      if (ch == 'b' || ch == 'B') {
-	cinfo->restart_interval = (unsigned int) lval;
-	cinfo->restart_in_rows = 0; /* else prior '-restart n' overrides me */
-      } else {
-	cinfo->restart_in_rows = (int) lval;
-	/* restart_interval will be computed during startup */
-      }
-
-    } else if (keymatch(arg, "scans", 2)) {
-      /* Set scan script. */
-#ifdef C_MULTISCAN_FILES_SUPPORTED
-      if (++argn >= argc)	/* advance to next argument */
-	usage();
-      scansarg = argv[argn];
-      /* We must postpone reading the file in case -progressive appears. */
-#else
-      fprintf(stderr, "%s: sorry, multi-scan output was not compiled\n",
-	      progname);
-      exit(EXIT_FAILURE);
-#endif
-
-    } else {
-      usage();			/* bogus switch */
-    }
-  }
-
-  /* Post-switch-scanning cleanup */
-
-  if (for_real) {
-
-#ifdef C_PROGRESSIVE_SUPPORTED
-    if (simple_progressive)	/* process -progressive; -scans can override */
-      jpeg_simple_progression(cinfo);
-#endif
-
-#ifdef C_MULTISCAN_FILES_SUPPORTED
-    if (scansarg != NULL)	/* process -scans if it was present */
-      if (! read_scan_script(cinfo, scansarg))
-	usage();
-#endif
-  }
-
-  return argn;			/* return index of next arg (file name) */
-}
-
-
-/*
- * The main program.
- */
-
-GLOBAL int
-main (int argc, char **argv)
-{
-  struct jpeg_decompress_struct srcinfo;
-  struct jpeg_compress_struct dstinfo;
-  struct jpeg_error_mgr jsrcerr, jdsterr;
-#ifdef PROGRESS_REPORT
-  struct cdjpeg_progress_mgr progress;
-#endif
-  jvirt_barray_ptr * coef_arrays;
-  int file_index;
-  FILE * input_file;
-  FILE * output_file;
-
-  /* On Mac, fetch a command line. */
-#ifdef USE_CCOMMAND
-  argc = ccommand(&argv);
-#endif
-
-  progname = argv[0];
-  if (progname == NULL || progname[0] == 0)
-    progname = "jpegtran";	/* in case C library doesn't provide it */
-
-  /* Initialize the JPEG decompression object with default error handling. */
-  srcinfo.err = jpeg_std_error(&jsrcerr);
-  jpeg_create_decompress(&srcinfo);
-  /* Initialize the JPEG compression object with default error handling. */
-  dstinfo.err = jpeg_std_error(&jdsterr);
-  jpeg_create_compress(&dstinfo);
-
-  /* Now safe to enable signal catcher.
-   * Note: we assume only the decompression object will have virtual arrays.
-   */
-#ifdef NEED_SIGNAL_CATCHER
-  enable_signal_catcher((j_common_ptr) &srcinfo);
-#endif
-
-  /* Scan command line to find file names.
-   * It is convenient to use just one switch-parsing routine, but the switch
-   * values read here are ignored; we will rescan the switches after opening
-   * the input file.
-   */
-
-  file_index = parse_switches(&dstinfo, argc, argv, 0, FALSE);
-  jsrcerr.trace_level = jdsterr.trace_level;
-
-#ifdef TWO_FILE_COMMANDLINE
-  /* Must have either -outfile switch or explicit output file name */
-  if (outfilename == NULL) {
-    if (file_index != argc-2) {
-      fprintf(stderr, "%s: must name one input and one output file\n",
-	      progname);
-      usage();
-    }
-    outfilename = argv[file_index+1];
-  } else {
-    if (file_index != argc-1) {
-      fprintf(stderr, "%s: must name one input and one output file\n",
-	      progname);
-      usage();
-    }
-  }
-#else
-  /* Unix style: expect zero or one file name */
-  if (file_index < argc-1) {
-    fprintf(stderr, "%s: only one input file\n", progname);
-    usage();
-  }
-#endif /* TWO_FILE_COMMANDLINE */
-
-  /* Open the input file. */
-  if (file_index < argc) {
-    if ((input_file = fopen(argv[file_index], READ_BINARY)) == NULL) {
-      fprintf(stderr, "%s: can't open %s\n", progname, argv[file_index]);
-      exit(EXIT_FAILURE);
-    }
-  } else {
-    /* default input file is stdin */
-    input_file = read_stdin();
-  }
-
-  /* Open the output file. */
-  if (outfilename != NULL) {
-    if ((output_file = fopen(outfilename, WRITE_BINARY)) == NULL) {
-      fprintf(stderr, "%s: can't open %s\n", progname, outfilename);
-      exit(EXIT_FAILURE);
-    }
-  } else {
-    /* default output file is stdout */
-    output_file = write_stdout();
-  }
-
-#ifdef PROGRESS_REPORT
-  start_progress_monitor((j_common_ptr) &dstinfo, &progress);
-#endif
-
-  /* Specify data source for decompression */
-  jpeg_stdio_src(&srcinfo, input_file);
-
-  /* Read file header */
-  (void) jpeg_read_header(&srcinfo, TRUE);
-
-  /* Read source file as DCT coefficients */
-  coef_arrays = jpeg_read_coefficients(&srcinfo);
-
-  /* Initialize destination compression parameters from source values */
-  jpeg_copy_critical_parameters(&srcinfo, &dstinfo);
-
-  /* Adjust default compression parameters by re-parsing the options */
-  file_index = parse_switches(&dstinfo, argc, argv, 0, TRUE);
-
-  /* Specify data destination for compression */
-  jpeg_stdio_dest(&dstinfo, output_file);
-
-  /* Start compressor */
-  jpeg_write_coefficients(&dstinfo, coef_arrays);
-
-  /* ought to copy source comments here... */
-
-  /* Finish compression and release memory */
-  jpeg_finish_compress(&dstinfo);
-  jpeg_destroy_compress(&dstinfo);
-  (void) jpeg_finish_decompress(&srcinfo);
-  jpeg_destroy_decompress(&srcinfo);
-
-  /* Close files, if we opened them */
-  if (input_file != stdin)
-    fclose(input_file);
-  if (output_file != stdout)
-    fclose(output_file);
-
-#ifdef PROGRESS_REPORT
-  end_progress_monitor((j_common_ptr) &dstinfo);
-#endif
-
-  /* All done. */
-  exit(jsrcerr.num_warnings + jdsterr.num_warnings ?EXIT_WARNING:EXIT_SUCCESS);
-  return 0;			/* suppress no-return-value warnings */
-}
diff -NEaurb neo/renderer/jpeg-6/jquant1.c neo/renderer/jpeg-6/jquant1.c
--- neo/renderer/jpeg-6/jquant1.c	2011-12-26 04:15:38 +0000
+++ neo/renderer/jpeg-6/jquant1.c	1970-01-01 00:00:00 +0000
@@ -1,856 +0,0 @@
-/*
- * jquant1.c
- *
- * Copyright (C) 1991-1995, Thomas G. Lane.
- * This file is part of the Independent JPEG Group's software.
- * For conditions of distribution and use, see the accompanying README file.
- *
- * This file contains 1-pass color quantization (color mapping) routines.
- * These routines provide mapping to a fixed color map using equally spaced
- * color values.  Optional Floyd-Steinberg or ordered dithering is available.
- */
-
-#define JPEG_INTERNALS
-#include "jinclude.h"
-#include "jpeglib.h"
-
-#ifdef QUANT_1PASS_SUPPORTED
-
-
-/*
- * The main purpose of 1-pass quantization is to provide a fast, if not very
- * high quality, colormapped output capability.  A 2-pass quantizer usually
- * gives better visual quality; however, for quantized grayscale output this
- * quantizer is perfectly adequate.  Dithering is highly recommended with this
- * quantizer, though you can turn it off if you really want to.
- *
- * In 1-pass quantization the colormap must be chosen in advance of seeing the
- * image.  We use a map consisting of all combinations of Ncolors[i] color
- * values for the i'th component.  The Ncolors[] values are chosen so that
- * their product, the total number of colors, is no more than that requested.
- * (In most cases, the product will be somewhat less.)
- *
- * Since the colormap is orthogonal, the representative value for each color
- * component can be determined without considering the other components;
- * then these indexes can be combined into a colormap index by a standard
- * N-dimensional-array-subscript calculation.  Most of the arithmetic involved
- * can be precalculated and stored in the lookup table colorindex[].
- * colorindex[i][j] maps pixel value j in component i to the nearest
- * representative value (grid plane) for that component; this index is
- * multiplied by the array stride for component i, so that the
- * index of the colormap entry closest to a given pixel value is just
- *    sum( colorindex[component-number][pixel-component-value] )
- * Aside from being fast, this scheme allows for variable spacing between
- * representative values with no additional lookup cost.
- *
- * If gamma correction has been applied in color conversion, it might be wise
- * to adjust the color grid spacing so that the representative colors are
- * equidistant in linear space.  At this writing, gamma correction is not
- * implemented by jdcolor, so nothing is done here.
- */
-
-
-/* Declarations for ordered dithering.
- *
- * We use a standard 16x16 ordered dither array.  The basic concept of ordered
- * dithering is described in many references, for instance Dale Schumacher's
- * chapter II.2 of Graphics Gems II (James Arvo, ed. Academic Press, 1991).
- * In place of Schumacher's comparisons against a "threshold" value, we add a
- * "dither" value to the input pixel and then round the result to the nearest
- * output value.  The dither value is equivalent to (0.5 - threshold) times
- * the distance between output values.  For ordered dithering, we assume that
- * the output colors are equally spaced; if not, results will probably be
- * worse, since the dither may be too much or too little at a given point.
- *
- * The normal calculation would be to form pixel value + dither, range-limit
- * this to 0..MAXJSAMPLE, and then index into the colorindex table as usual.
- * We can skip the separate range-limiting step by extending the colorindex
- * table in both directions.
- */
-
-#define ODITHER_SIZE  16	/* dimension of dither matrix */
-/* NB: if ODITHER_SIZE is not a power of 2, ODITHER_MASK uses will break */
-#define ODITHER_CELLS (ODITHER_SIZE*ODITHER_SIZE)	/* # cells in matrix */
-#define ODITHER_MASK  (ODITHER_SIZE-1) /* mask for wrapping around counters */
-
-typedef int ODITHER_MATRIX[ODITHER_SIZE][ODITHER_SIZE];
-typedef int (*ODITHER_MATRIX_PTR)[ODITHER_SIZE];
-
-static const UINT8 base_dither_matrix[ODITHER_SIZE][ODITHER_SIZE] = {
-  /* Bayer's order-4 dither array.  Generated by the code given in
-   * Stephen Hawley's article "Ordered Dithering" in Graphics Gems I.
-   * The values in this array must range from 0 to ODITHER_CELLS-1.
-   */
-  {   0,192, 48,240, 12,204, 60,252,  3,195, 51,243, 15,207, 63,255 },
-  { 128, 64,176,112,140, 76,188,124,131, 67,179,115,143, 79,191,127 },
-  {  32,224, 16,208, 44,236, 28,220, 35,227, 19,211, 47,239, 31,223 },
-  { 160, 96,144, 80,172,108,156, 92,163, 99,147, 83,175,111,159, 95 },
-  {   8,200, 56,248,  4,196, 52,244, 11,203, 59,251,  7,199, 55,247 },
-  { 136, 72,184,120,132, 68,180,116,139, 75,187,123,135, 71,183,119 },
-  {  40,232, 24,216, 36,228, 20,212, 43,235, 27,219, 39,231, 23,215 },
-  { 168,104,152, 88,164,100,148, 84,171,107,155, 91,167,103,151, 87 },
-  {   2,194, 50,242, 14,206, 62,254,  1,193, 49,241, 13,205, 61,253 },
-  { 130, 66,178,114,142, 78,190,126,129, 65,177,113,141, 77,189,125 },
-  {  34,226, 18,210, 46,238, 30,222, 33,225, 17,209, 45,237, 29,221 },
-  { 162, 98,146, 82,174,110,158, 94,161, 97,145, 81,173,109,157, 93 },
-  {  10,202, 58,250,  6,198, 54,246,  9,201, 57,249,  5,197, 53,245 },
-  { 138, 74,186,122,134, 70,182,118,137, 73,185,121,133, 69,181,117 },
-  {  42,234, 26,218, 38,230, 22,214, 41,233, 25,217, 37,229, 21,213 },
-  { 170,106,154, 90,166,102,150, 86,169,105,153, 89,165,101,149, 85 }
-};
-
-
-/* Declarations for Floyd-Steinberg dithering.
- *
- * Errors are accumulated into the array fserrors[], at a resolution of
- * 1/16th of a pixel count.  The error at a given pixel is propagated
- * to its not-yet-processed neighbors using the standard F-S fractions,
- *		...	(here)	7/16
- *		3/16	5/16	1/16
- * We work left-to-right on even rows, right-to-left on odd rows.
- *
- * We can get away with a single array (holding one row's worth of errors)
- * by using it to store the current row's errors at pixel columns not yet
- * processed, but the next row's errors at columns already processed.  We
- * need only a few extra variables to hold the errors immediately around the
- * current column.  (If we are lucky, those variables are in registers, but
- * even if not, they're probably cheaper to access than array elements are.)
- *
- * The fserrors[] array is indexed [component#][position].
- * We provide (#columns + 2) entries per component; the extra entry at each
- * end saves us from special-casing the first and last pixels.
- *
- * Note: on a wide image, we might not have enough room in a PC's near data
- * segment to hold the error array; so it is allocated with alloc_large.
- */
-
-#if BITS_IN_JSAMPLE == 8
-typedef INT16 FSERROR;		/* 16 bits should be enough */
-typedef int LOCFSERROR;		/* use 'int' for calculation temps */
-#else
-typedef INT32 FSERROR;		/* may need more than 16 bits */
-typedef INT32 LOCFSERROR;	/* be sure calculation temps are big enough */
-#endif
-
-typedef FSERROR FAR *FSERRPTR;	/* pointer to error array (in FAR storage!) */
-
-
-/* Private subobject */
-
-#define MAX_Q_COMPS 4		/* max components I can handle */
-
-typedef struct {
-  struct jpeg_color_quantizer pub; /* public fields */
-
-  /* Initially allocated colormap is saved here */
-  JSAMPARRAY sv_colormap;	/* The color map as a 2-D pixel array */
-  int sv_actual;		/* number of entries in use */
-
-  JSAMPARRAY colorindex;	/* Precomputed mapping for speed */
-  /* colorindex[i][j] = index of color closest to pixel value j in component i,
-   * premultiplied as described above.  Since colormap indexes must fit into
-   * JSAMPLEs, the entries of this array will too.
-   */
-  boolean is_padded;		/* is the colorindex padded for odither? */
-
-  int Ncolors[MAX_Q_COMPS];	/* # of values alloced to each component */
-
-  /* Variables for ordered dithering */
-  int row_index;		/* cur row's vertical index in dither matrix */
-  ODITHER_MATRIX_PTR odither[MAX_Q_COMPS]; /* one dither array per component */
-
-  /* Variables for Floyd-Steinberg dithering */
-  FSERRPTR fserrors[MAX_Q_COMPS]; /* accumulated errors */
-  boolean on_odd_row;		/* flag to remember which row we are on */
-} my_cquantizer;
-
-typedef my_cquantizer * my_cquantize_ptr;
-
-
-/*
- * Policy-making subroutines for create_colormap and create_colorindex.
- * These routines determine the colormap to be used.  The rest of the module
- * only assumes that the colormap is orthogonal.
- *
- *  * select_ncolors decides how to divvy up the available colors
- *    among the components.
- *  * output_value defines the set of representative values for a component.
- *  * largest_input_value defines the mapping from input values to
- *    representative values for a component.
- * Note that the latter two routines may impose different policies for
- * different components, though this is not currently done.
- */
-
-
-LOCAL int
-select_ncolors (j_decompress_ptr cinfo, int Ncolors[])
-/* Determine allocation of desired colors to components, */
-/* and fill in Ncolors[] array to indicate choice. */
-/* Return value is total number of colors (product of Ncolors[] values). */
-{
-  int nc = cinfo->out_color_components; /* number of color components */
-  int max_colors = cinfo->desired_number_of_colors;
-  int total_colors, iroot, i, j;
-  boolean changed;
-  long temp;
-  static const int RGB_order[3] = { RGB_GREEN, RGB_RED, RGB_BLUE };
-
-  /* We can allocate at least the nc'th root of max_colors per component. */
-  /* Compute floor(nc'th root of max_colors). */
-  iroot = 1;
-  do {
-    iroot++;
-    temp = iroot;		/* set temp = iroot ** nc */
-    for (i = 1; i < nc; i++)
-      temp *= iroot;
-  } while (temp <= (long) max_colors); /* repeat till iroot exceeds root */
-  iroot--;			/* now iroot = floor(root) */
-
-  /* Must have at least 2 color values per component */
-  if (iroot < 2)
-    ERREXIT1(cinfo, JERR_QUANT_FEW_COLORS, (int) temp);
-
-  /* Initialize to iroot color values for each component */
-  total_colors = 1;
-  for (i = 0; i < nc; i++) {
-    Ncolors[i] = iroot;
-    total_colors *= iroot;
-  }
-  /* We may be able to increment the count for one or more components without
-   * exceeding max_colors, though we know not all can be incremented.
-   * Sometimes, the first component can be incremented more than once!
-   * (Example: for 16 colors, we start at 2*2*2, go to 3*2*2, then 4*2*2.)
-   * In RGB colorspace, try to increment G first, then R, then B.
-   */
-  do {
-    changed = FALSE;
-    for (i = 0; i < nc; i++) {
-      j = (cinfo->out_color_space == JCS_RGB ? RGB_order[i] : i);
-      /* calculate new total_colors if Ncolors[j] is incremented */
-      temp = total_colors / Ncolors[j];
-      temp *= Ncolors[j]+1;	/* done in long arith to avoid oflo */
-      if (temp > (long) max_colors)
-	break;			/* won't fit, done with this pass */
-      Ncolors[j]++;		/* OK, apply the increment */
-      total_colors = (int) temp;
-      changed = TRUE;
-    }
-  } while (changed);
-
-  return total_colors;
-}
-
-
-LOCAL int
-output_value (j_decompress_ptr cinfo, int ci, int j, int maxj)
-/* Return j'th output value, where j will range from 0 to maxj */
-/* The output values must fall in 0..MAXJSAMPLE in increasing order */
-{
-  /* We always provide values 0 and MAXJSAMPLE for each component;
-   * any additional values are equally spaced between these limits.
-   * (Forcing the upper and lower values to the limits ensures that
-   * dithering can't produce a color outside the selected gamut.)
-   */
-  return (int) (((INT32) j * MAXJSAMPLE + maxj/2) / maxj);
-}
-
-
-LOCAL int
-largest_input_value (j_decompress_ptr cinfo, int ci, int j, int maxj)
-/* Return largest input value that should map to j'th output value */
-/* Must have largest(j=0) >= 0, and largest(j=maxj) >= MAXJSAMPLE */
-{
-  /* Breakpoints are halfway between values returned by output_value */
-  return (int) (((INT32) (2*j + 1) * MAXJSAMPLE + maxj) / (2*maxj));
-}
-
-
-/*
- * Create the colormap.
- */
-
-LOCAL void
-create_colormap (j_decompress_ptr cinfo)
-{
-  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
-  JSAMPARRAY colormap;		/* Created colormap */
-  int total_colors;		/* Number of distinct output colors */
-  int i,j,k, nci, blksize, blkdist, ptr, val;
-
-  /* Select number of colors for each component */
-  total_colors = select_ncolors(cinfo, cquantize->Ncolors);
-
-  /* Report selected color counts */
-  if (cinfo->out_color_components == 3)
-    TRACEMS4(cinfo, 1, JTRC_QUANT_3_NCOLORS,
-	     total_colors, cquantize->Ncolors[0],
-	     cquantize->Ncolors[1], cquantize->Ncolors[2]);
-  else
-    TRACEMS1(cinfo, 1, JTRC_QUANT_NCOLORS, total_colors);
-
-  /* Allocate and fill in the colormap. */
-  /* The colors are ordered in the map in standard row-major order, */
-  /* i.e. rightmost (highest-indexed) color changes most rapidly. */
-
-  colormap = (*cinfo->mem->alloc_sarray)
-    ((j_common_ptr) cinfo, JPOOL_IMAGE,
-     (JDIMENSION) total_colors, (JDIMENSION) cinfo->out_color_components);
-
-  /* blksize is number of adjacent repeated entries for a component */
-  /* blkdist is distance between groups of identical entries for a component */
-  blkdist = total_colors;
-
-  for (i = 0; i < cinfo->out_color_components; i++) {
-    /* fill in colormap entries for i'th color component */
-    nci = cquantize->Ncolors[i]; /* # of distinct values for this color */
-    blksize = blkdist / nci;
-    for (j = 0; j < nci; j++) {
-      /* Compute j'th output value (out of nci) for component */
-      val = output_value(cinfo, i, j, nci-1);
-      /* Fill in all colormap entries that have this value of this component */
-      for (ptr = j * blksize; ptr < total_colors; ptr += blkdist) {
-	/* fill in blksize entries beginning at ptr */
-	for (k = 0; k < blksize; k++)
-	  colormap[i][ptr+k] = (JSAMPLE) val;
-      }
-    }
-    blkdist = blksize;		/* blksize of this color is blkdist of next */
-  }
-
-  /* Save the colormap in private storage,
-   * where it will survive color quantization mode changes.
-   */
-  cquantize->sv_colormap = colormap;
-  cquantize->sv_actual = total_colors;
-}
-
-
-/*
- * Create the color index table.
- */
-
-LOCAL void
-create_colorindex (j_decompress_ptr cinfo)
-{
-  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
-  JSAMPROW indexptr;
-  int i,j,k, nci, blksize, val, pad;
-
-  /* For ordered dither, we pad the color index tables by MAXJSAMPLE in
-   * each direction (input index values can be -MAXJSAMPLE .. 2*MAXJSAMPLE).
-   * This is not necessary in the other dithering modes.  However, we
-   * flag whether it was done in case user changes dithering mode.
-   */
-  if (cinfo->dither_mode == JDITHER_ORDERED) {
-    pad = MAXJSAMPLE*2;
-    cquantize->is_padded = TRUE;
-  } else {
-    pad = 0;
-    cquantize->is_padded = FALSE;
-  }
-
-  cquantize->colorindex = (*cinfo->mem->alloc_sarray)
-    ((j_common_ptr) cinfo, JPOOL_IMAGE,
-     (JDIMENSION) (MAXJSAMPLE+1 + pad),
-     (JDIMENSION) cinfo->out_color_components);
-
-  /* blksize is number of adjacent repeated entries for a component */
-  blksize = cquantize->sv_actual;
-
-  for (i = 0; i < cinfo->out_color_components; i++) {
-    /* fill in colorindex entries for i'th color component */
-    nci = cquantize->Ncolors[i]; /* # of distinct values for this color */
-    blksize = blksize / nci;
-
-    /* adjust colorindex pointers to provide padding at negative indexes. */
-    if (pad)
-      cquantize->colorindex[i] += MAXJSAMPLE;
-
-    /* in loop, val = index of current output value, */
-    /* and k = largest j that maps to current val */
-    indexptr = cquantize->colorindex[i];
-    val = 0;
-    k = largest_input_value(cinfo, i, 0, nci-1);
-    for (j = 0; j <= MAXJSAMPLE; j++) {
-      while (j > k)		/* advance val if past boundary */
-	k = largest_input_value(cinfo, i, ++val, nci-1);
-      /* premultiply so that no multiplication needed in main processing */
-      indexptr[j] = (JSAMPLE) (val * blksize);
-    }
-    /* Pad at both ends if necessary */
-    if (pad)
-      for (j = 1; j <= MAXJSAMPLE; j++) {
-	indexptr[-j] = indexptr[0];
-	indexptr[MAXJSAMPLE+j] = indexptr[MAXJSAMPLE];
-      }
-  }
-}
-
-
-/*
- * Create an ordered-dither array for a component having ncolors
- * distinct output values.
- */
-
-LOCAL ODITHER_MATRIX_PTR
-make_odither_array (j_decompress_ptr cinfo, int ncolors)
-{
-  ODITHER_MATRIX_PTR odither;
-  int j,k;
-  INT32 num,den;
-
-  odither = (ODITHER_MATRIX_PTR)
-    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
-				SIZEOF(ODITHER_MATRIX));
-  /* The inter-value distance for this color is MAXJSAMPLE/(ncolors-1).
-   * Hence the dither value for the matrix cell with fill order f
-   * (f=0..N-1) should be (N-1-2*f)/(2*N) * MAXJSAMPLE/(ncolors-1).
-   * On 16-bit-int machine, be careful to avoid overflow.
-   */
-  den = 2 * ODITHER_CELLS * ((INT32) (ncolors - 1));
-  for (j = 0; j < ODITHER_SIZE; j++) {
-    for (k = 0; k < ODITHER_SIZE; k++) {
-      num = ((INT32) (ODITHER_CELLS-1 - 2*((int)base_dither_matrix[j][k])))
-	    * MAXJSAMPLE;
-      /* Ensure round towards zero despite C's lack of consistency
-       * about rounding negative values in integer division...
-       */
-      odither[j][k] = (int) (num<0 ? -((-num)/den) : num/den);
-    }
-  }
-  return odither;
-}
-
-
-/*
- * Create the ordered-dither tables.
- * Components having the same number of representative colors may 
- * share a dither table.
- */
-
-LOCAL void
-create_odither_tables (j_decompress_ptr cinfo)
-{
-  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
-  ODITHER_MATRIX_PTR odither;
-  int i, j, nci;
-
-  for (i = 0; i < cinfo->out_color_components; i++) {
-    nci = cquantize->Ncolors[i]; /* # of distinct values for this color */
-    odither = NULL;		/* search for matching prior component */
-    for (j = 0; j < i; j++) {
-      if (nci == cquantize->Ncolors[j]) {
-	odither = cquantize->odither[j];
-	break;
-      }
-    }
-    if (odither == NULL)	/* need a new table? */
-      odither = make_odither_array(cinfo, nci);
-    cquantize->odither[i] = odither;
-  }
-}
-
-
-/*
- * Map some rows of pixels to the output colormapped representation.
- */
-
-METHODDEF void
-color_quantize (j_decompress_ptr cinfo, JSAMPARRAY input_buf,
-		JSAMPARRAY output_buf, int num_rows)
-/* General case, no dithering */
-{
-  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
-  JSAMPARRAY colorindex = cquantize->colorindex;
-  register int pixcode, ci;
-  register JSAMPROW ptrin, ptrout;
-  int row;
-  JDIMENSION col;
-  JDIMENSION width = cinfo->output_width;
-  register int nc = cinfo->out_color_components;
-
-  for (row = 0; row < num_rows; row++) {
-    ptrin = input_buf[row];
-    ptrout = output_buf[row];
-    for (col = width; col > 0; col--) {
-      pixcode = 0;
-      for (ci = 0; ci < nc; ci++) {
-	pixcode += GETJSAMPLE(colorindex[ci][GETJSAMPLE(*ptrin++)]);
-      }
-      *ptrout++ = (JSAMPLE) pixcode;
-    }
-  }
-}
-
-
-METHODDEF void
-color_quantize3 (j_decompress_ptr cinfo, JSAMPARRAY input_buf,
-		 JSAMPARRAY output_buf, int num_rows)
-/* Fast path for out_color_components==3, no dithering */
-{
-  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
-  register int pixcode;
-  register JSAMPROW ptrin, ptrout;
-  JSAMPROW colorindex0 = cquantize->colorindex[0];
-  JSAMPROW colorindex1 = cquantize->colorindex[1];
-  JSAMPROW colorindex2 = cquantize->colorindex[2];
-  int row;
-  JDIMENSION col;
-  JDIMENSION width = cinfo->output_width;
-
-  for (row = 0; row < num_rows; row++) {
-    ptrin = input_buf[row];
-    ptrout = output_buf[row];
-    for (col = width; col > 0; col--) {
-      pixcode  = GETJSAMPLE(colorindex0[GETJSAMPLE(*ptrin++)]);
-      pixcode += GETJSAMPLE(colorindex1[GETJSAMPLE(*ptrin++)]);
-      pixcode += GETJSAMPLE(colorindex2[GETJSAMPLE(*ptrin++)]);
-      *ptrout++ = (JSAMPLE) pixcode;
-    }
-  }
-}
-
-
-METHODDEF void
-quantize_ord_dither (j_decompress_ptr cinfo, JSAMPARRAY input_buf,
-		     JSAMPARRAY output_buf, int num_rows)
-/* General case, with ordered dithering */
-{
-  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
-  register JSAMPROW input_ptr;
-  register JSAMPROW output_ptr;
-  JSAMPROW colorindex_ci;
-  int * dither;			/* points to active row of dither matrix */
-  int row_index, col_index;	/* current indexes into dither matrix */
-  int nc = cinfo->out_color_components;
-  int ci;
-  int row;
-  JDIMENSION col;
-  JDIMENSION width = cinfo->output_width;
-
-  for (row = 0; row < num_rows; row++) {
-    /* Initialize output values to 0 so can process components separately */
-    jzero_far((void FAR *) output_buf[row],
-	      (size_t) (width * SIZEOF(JSAMPLE)));
-    row_index = cquantize->row_index;
-    for (ci = 0; ci < nc; ci++) {
-      input_ptr = input_buf[row] + ci;
-      output_ptr = output_buf[row];
-      colorindex_ci = cquantize->colorindex[ci];
-      dither = cquantize->odither[ci][row_index];
-      col_index = 0;
-
-      for (col = width; col > 0; col--) {
-	/* Form pixel value + dither, range-limit to 0..MAXJSAMPLE,
-	 * select output value, accumulate into output code for this pixel.
-	 * Range-limiting need not be done explicitly, as we have extended
-	 * the colorindex table to produce the right answers for out-of-range
-	 * inputs.  The maximum dither is +- MAXJSAMPLE; this sets the
-	 * required amount of padding.
-	 */
-	*output_ptr += colorindex_ci[GETJSAMPLE(*input_ptr)+dither[col_index]];
-	input_ptr += nc;
-	output_ptr++;
-	col_index = (col_index + 1) & ODITHER_MASK;
-      }
-    }
-    /* Advance row index for next row */
-    row_index = (row_index + 1) & ODITHER_MASK;
-    cquantize->row_index = row_index;
-  }
-}
-
-
-METHODDEF void
-quantize3_ord_dither (j_decompress_ptr cinfo, JSAMPARRAY input_buf,
-		      JSAMPARRAY output_buf, int num_rows)
-/* Fast path for out_color_components==3, with ordered dithering */
-{
-  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
-  register int pixcode;
-  register JSAMPROW input_ptr;
-  register JSAMPROW output_ptr;
-  JSAMPROW colorindex0 = cquantize->colorindex[0];
-  JSAMPROW colorindex1 = cquantize->colorindex[1];
-  JSAMPROW colorindex2 = cquantize->colorindex[2];
-  int * dither0;		/* points to active row of dither matrix */
-  int * dither1;
-  int * dither2;
-  int row_index, col_index;	/* current indexes into dither matrix */
-  int row;
-  JDIMENSION col;
-  JDIMENSION width = cinfo->output_width;
-
-  for (row = 0; row < num_rows; row++) {
-    row_index = cquantize->row_index;
-    input_ptr = input_buf[row];
-    output_ptr = output_buf[row];
-    dither0 = cquantize->odither[0][row_index];
-    dither1 = cquantize->odither[1][row_index];
-    dither2 = cquantize->odither[2][row_index];
-    col_index = 0;
-
-    for (col = width; col > 0; col--) {
-      pixcode  = GETJSAMPLE(colorindex0[GETJSAMPLE(*input_ptr++) +
-					dither0[col_index]]);
-      pixcode += GETJSAMPLE(colorindex1[GETJSAMPLE(*input_ptr++) +
-					dither1[col_index]]);
-      pixcode += GETJSAMPLE(colorindex2[GETJSAMPLE(*input_ptr++) +
-					dither2[col_index]]);
-      *output_ptr++ = (JSAMPLE) pixcode;
-      col_index = (col_index + 1) & ODITHER_MASK;
-    }
-    row_index = (row_index + 1) & ODITHER_MASK;
-    cquantize->row_index = row_index;
-  }
-}
-
-
-METHODDEF void
-quantize_fs_dither (j_decompress_ptr cinfo, JSAMPARRAY input_buf,
-		    JSAMPARRAY output_buf, int num_rows)
-/* General case, with Floyd-Steinberg dithering */
-{
-  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
-  register LOCFSERROR cur;	/* current error or pixel value */
-  LOCFSERROR belowerr;		/* error for pixel below cur */
-  LOCFSERROR bpreverr;		/* error for below/prev col */
-  LOCFSERROR bnexterr;		/* error for below/next col */
-  LOCFSERROR delta;
-  register FSERRPTR errorptr;	/* => fserrors[] at column before current */
-  register JSAMPROW input_ptr;
-  register JSAMPROW output_ptr;
-  JSAMPROW colorindex_ci;
-  JSAMPROW colormap_ci;
-  int pixcode;
-  int nc = cinfo->out_color_components;
-  int dir;			/* 1 for left-to-right, -1 for right-to-left */
-  int dirnc;			/* dir * nc */
-  int ci;
-  int row;
-  JDIMENSION col;
-  JDIMENSION width = cinfo->output_width;
-  JSAMPLE *range_limit = cinfo->sample_range_limit;
-  SHIFT_TEMPS
-
-  for (row = 0; row < num_rows; row++) {
-    /* Initialize output values to 0 so can process components separately */
-    jzero_far((void FAR *) output_buf[row],
-	      (size_t) (width * SIZEOF(JSAMPLE)));
-    for (ci = 0; ci < nc; ci++) {
-      input_ptr = input_buf[row] + ci;
-      output_ptr = output_buf[row];
-      if (cquantize->on_odd_row) {
-	/* work right to left in this row */
-	input_ptr += (width-1) * nc; /* so point to rightmost pixel */
-	output_ptr += width-1;
-	dir = -1;
-	dirnc = -nc;
-	errorptr = cquantize->fserrors[ci] + (width+1); /* => entry after last column */
-      } else {
-	/* work left to right in this row */
-	dir = 1;
-	dirnc = nc;
-	errorptr = cquantize->fserrors[ci]; /* => entry before first column */
-      }
-      colorindex_ci = cquantize->colorindex[ci];
-      colormap_ci = cquantize->sv_colormap[ci];
-      /* Preset error values: no error propagated to first pixel from left */
-      cur = 0;
-      /* and no error propagated to row below yet */
-      belowerr = bpreverr = 0;
-
-      for (col = width; col > 0; col--) {
-	/* cur holds the error propagated from the previous pixel on the
-	 * current line.  Add the error propagated from the previous line
-	 * to form the complete error correction term for this pixel, and
-	 * round the error term (which is expressed * 16) to an integer.
-	 * RIGHT_SHIFT rounds towards minus infinity, so adding 8 is correct
-	 * for either sign of the error value.
-	 * Note: errorptr points to *previous* column's array entry.
-	 */
-	cur = RIGHT_SHIFT(cur + errorptr[dir] + 8, 4);
-	/* Form pixel value + error, and range-limit to 0..MAXJSAMPLE.
-	 * The maximum error is +- MAXJSAMPLE; this sets the required size
-	 * of the range_limit array.
-	 */
-	cur += GETJSAMPLE(*input_ptr);
-	cur = GETJSAMPLE(range_limit[cur]);
-	/* Select output value, accumulate into output code for this pixel */
-	pixcode = GETJSAMPLE(colorindex_ci[cur]);
-	*output_ptr += (JSAMPLE) pixcode;
-	/* Compute actual representation error at this pixel */
-	/* Note: we can do this even though we don't have the final */
-	/* pixel code, because the colormap is orthogonal. */
-	cur -= GETJSAMPLE(colormap_ci[pixcode]);
-	/* Compute error fractions to be propagated to adjacent pixels.
-	 * Add these into the running sums, and simultaneously shift the
-	 * next-line error sums left by 1 column.
-	 */
-	bnexterr = cur;
-	delta = cur * 2;
-	cur += delta;		/* form error * 3 */
-	errorptr[0] = (FSERROR) (bpreverr + cur);
-	cur += delta;		/* form error * 5 */
-	bpreverr = belowerr + cur;
-	belowerr = bnexterr;
-	cur += delta;		/* form error * 7 */
-	/* At this point cur contains the 7/16 error value to be propagated
-	 * to the next pixel on the current line, and all the errors for the
-	 * next line have been shifted over. We are therefore ready to move on.
-	 */
-	input_ptr += dirnc;	/* advance input ptr to next column */
-	output_ptr += dir;	/* advance output ptr to next column */
-	errorptr += dir;	/* advance errorptr to current column */
-      }
-      /* Post-loop cleanup: we must unload the final error value into the
-       * final fserrors[] entry.  Note we need not unload belowerr because
-       * it is for the dummy column before or after the actual array.
-       */
-      errorptr[0] = (FSERROR) bpreverr; /* unload prev err into array */
-    }
-    cquantize->on_odd_row = (cquantize->on_odd_row ? FALSE : TRUE);
-  }
-}
-
-
-/*
- * Allocate workspace for Floyd-Steinberg errors.
- */
-
-LOCAL void
-alloc_fs_workspace (j_decompress_ptr cinfo)
-{
-  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
-  size_t arraysize;
-  int i;
-
-  arraysize = (size_t) ((cinfo->output_width + 2) * SIZEOF(FSERROR));
-  for (i = 0; i < cinfo->out_color_components; i++) {
-    cquantize->fserrors[i] = (FSERRPTR)
-      (*cinfo->mem->alloc_large)((j_common_ptr) cinfo, JPOOL_IMAGE, arraysize);
-  }
-}
-
-
-/*
- * Initialize for one-pass color quantization.
- */
-
-METHODDEF void
-start_pass_1_quant (j_decompress_ptr cinfo, boolean is_pre_scan)
-{
-  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
-  size_t arraysize;
-  int i;
-
-  /* Install my colormap. */
-  cinfo->colormap = cquantize->sv_colormap;
-  cinfo->actual_number_of_colors = cquantize->sv_actual;
-
-  /* Initialize for desired dithering mode. */
-  switch (cinfo->dither_mode) {
-  case JDITHER_NONE:
-    if (cinfo->out_color_components == 3)
-      cquantize->pub.color_quantize = color_quantize3;
-    else
-      cquantize->pub.color_quantize = color_quantize;
-    break;
-  case JDITHER_ORDERED:
-    if (cinfo->out_color_components == 3)
-      cquantize->pub.color_quantize = quantize3_ord_dither;
-    else
-      cquantize->pub.color_quantize = quantize_ord_dither;
-    cquantize->row_index = 0;	/* initialize state for ordered dither */
-    /* If user changed to ordered dither from another mode,
-     * we must recreate the color index table with padding.
-     * This will cost extra space, but probably isn't very likely.
-     */
-    if (! cquantize->is_padded)
-      create_colorindex(cinfo);
-    /* Create ordered-dither tables if we didn't already. */
-    if (cquantize->odither[0] == NULL)
-      create_odither_tables(cinfo);
-    break;
-  case JDITHER_FS:
-    cquantize->pub.color_quantize = quantize_fs_dither;
-    cquantize->on_odd_row = FALSE; /* initialize state for F-S dither */
-    /* Allocate Floyd-Steinberg workspace if didn't already. */
-    if (cquantize->fserrors[0] == NULL)
-      alloc_fs_workspace(cinfo);
-    /* Initialize the propagated errors to zero. */
-    arraysize = (size_t) ((cinfo->output_width + 2) * SIZEOF(FSERROR));
-    for (i = 0; i < cinfo->out_color_components; i++)
-      jzero_far((void FAR *) cquantize->fserrors[i], arraysize);
-    break;
-  default:
-    ERREXIT(cinfo, JERR_NOT_COMPILED);
-    break;
-  }
-}
-
-
-/*
- * Finish up at the end of the pass.
- */
-
-METHODDEF void
-finish_pass_1_quant (j_decompress_ptr cinfo)
-{
-  /* no work in 1-pass case */
-}
-
-
-/*
- * Switch to a new external colormap between output passes.
- * Shouldn't get to this module!
- */
-
-METHODDEF void
-new_color_map_1_quant (j_decompress_ptr cinfo)
-{
-  ERREXIT(cinfo, JERR_MODE_CHANGE);
-}
-
-
-/*
- * Module initialization routine for 1-pass color quantization.
- */
-
-GLOBAL void
-jinit_1pass_quantizer (j_decompress_ptr cinfo)
-{
-  my_cquantize_ptr cquantize;
-
-  cquantize = (my_cquantize_ptr)
-    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
-				SIZEOF(my_cquantizer));
-  cinfo->cquantize = (struct jpeg_color_quantizer *) cquantize;
-  cquantize->pub.start_pass = start_pass_1_quant;
-  cquantize->pub.finish_pass = finish_pass_1_quant;
-  cquantize->pub.new_color_map = new_color_map_1_quant;
-  cquantize->fserrors[0] = NULL; /* Flag FS workspace not allocated */
-  cquantize->odither[0] = NULL;	/* Also flag odither arrays not allocated */
-
-  /* Make sure my internal arrays won't overflow */
-  if (cinfo->out_color_components > MAX_Q_COMPS)
-    ERREXIT1(cinfo, JERR_QUANT_COMPONENTS, MAX_Q_COMPS);
-  /* Make sure colormap indexes can be represented by JSAMPLEs */
-  if (cinfo->desired_number_of_colors > (MAXJSAMPLE+1))
-    ERREXIT1(cinfo, JERR_QUANT_MANY_COLORS, MAXJSAMPLE+1);
-
-  /* Create the colormap and color index table. */
-  create_colormap(cinfo);
-  create_colorindex(cinfo);
-
-  /* Allocate Floyd-Steinberg workspace now if requested.
-   * We do this now since it is FAR storage and may affect the memory
-   * manager's space calculations.  If the user changes to FS dither
-   * mode in a later pass, we will allocate the space then, and will
-   * possibly overrun the max_memory_to_use setting.
-   */
-  if (cinfo->dither_mode == JDITHER_FS)
-    alloc_fs_workspace(cinfo);
-}
-
-#endif /* QUANT_1PASS_SUPPORTED */
diff -NEaurb neo/renderer/jpeg-6/jquant2.c neo/renderer/jpeg-6/jquant2.c
--- neo/renderer/jpeg-6/jquant2.c	2011-12-26 04:15:38 +0000
+++ neo/renderer/jpeg-6/jquant2.c	1970-01-01 00:00:00 +0000
@@ -1,1310 +0,0 @@
-/*
- * jquant2.c
- *
- * Copyright (C) 1991-1995, Thomas G. Lane.
- * This file is part of the Independent JPEG Group's software.
- * For conditions of distribution and use, see the accompanying README file.
- *
- * This file contains 2-pass color quantization (color mapping) routines.
- * These routines provide selection of a custom color map for an image,
- * followed by mapping of the image to that color map, with optional
- * Floyd-Steinberg dithering.
- * It is also possible to use just the second pass to map to an arbitrary
- * externally-given color map.
- *
- * Note: ordered dithering is not supported, since there isn't any fast
- * way to compute intercolor distances; it's unclear that ordered dither's
- * fundamental assumptions even hold with an irregularly spaced color map.
- */
-
-#define JPEG_INTERNALS
-#include "jinclude.h"
-#include "jpeglib.h"
-
-#ifdef QUANT_2PASS_SUPPORTED
-
-
-/*
- * This module implements the well-known Heckbert paradigm for color
- * quantization.  Most of the ideas used here can be traced back to
- * Heckbert's seminal paper
- *   Heckbert, Paul.  "Color Image Quantization for Frame Buffer Display",
- *   Proc. SIGGRAPH '82, Computer Graphics v.16 #3 (July 1982), pp 297-304.
- *
- * In the first pass over the image, we accumulate a histogram showing the
- * usage count of each possible color.  To keep the histogram to a reasonable
- * size, we reduce the precision of the input; typical practice is to retain
- * 5 or 6 bits per color, so that 8 or 4 different input values are counted
- * in the same histogram cell.
- *
- * Next, the color-selection step begins with a box representing the whole
- * color space, and repeatedly splits the "largest" remaining box until we
- * have as many boxes as desired colors.  Then the mean color in each
- * remaining box becomes one of the possible output colors.
- * 
- * The second pass over the image maps each input pixel to the closest output
- * color (optionally after applying a Floyd-Steinberg dithering correction).
- * This mapping is logically trivial, but making it go fast enough requires
- * considerable care.
- *
- * Heckbert-style quantizers vary a good deal in their policies for choosing
- * the "largest" box and deciding where to cut it.  The particular policies
- * used here have proved out well in experimental comparisons, but better ones
- * may yet be found.
- *
- * In earlier versions of the IJG code, this module quantized in YCbCr color
- * space, processing the raw upsampled data without a color conversion step.
- * This allowed the color conversion math to be done only once per colormap
- * entry, not once per pixel.  However, that optimization precluded other
- * useful optimizations (such as merging color conversion with upsampling)
- * and it also interfered with desired capabilities such as quantizing to an
- * externally-supplied colormap.  We have therefore abandoned that approach.
- * The present code works in the post-conversion color space, typically RGB.
- *
- * To improve the visual quality of the results, we actually work in scaled
- * RGB space, giving G distances more weight than R, and R in turn more than
- * B.  To do everything in integer math, we must use integer scale factors.
- * The 2/3/1 scale factors used here correspond loosely to the relative
- * weights of the colors in the NTSC grayscale equation.
- * If you want to use this code to quantize a non-RGB color space, you'll
- * probably need to change these scale factors.
- */
-
-#define R_SCALE 2		/* scale R distances by this much */
-#define G_SCALE 3		/* scale G distances by this much */
-#define B_SCALE 1		/* and B by this much */
-
-/* Relabel R/G/B as components 0/1/2, respecting the RGB ordering defined
- * in jmorecfg.h.  As the code stands, it will do the right thing for R,G,B
- * and B,G,R orders.  If you define some other weird order in jmorecfg.h,
- * you'll get compile errors until you extend this logic.  In that case
- * you'll probably want to tweak the histogram sizes too.
- */
-
-#if RGB_RED == 0
-#define C0_SCALE R_SCALE
-#endif
-#if RGB_BLUE == 0
-#define C0_SCALE B_SCALE
-#endif
-#if RGB_GREEN == 1
-#define C1_SCALE G_SCALE
-#endif
-#if RGB_RED == 2
-#define C2_SCALE R_SCALE
-#endif
-#if RGB_BLUE == 2
-#define C2_SCALE B_SCALE
-#endif
-
-
-/*
- * First we have the histogram data structure and routines for creating it.
- *
- * The number of bits of precision can be adjusted by changing these symbols.
- * We recommend keeping 6 bits for G and 5 each for R and B.
- * If you have plenty of memory and cycles, 6 bits all around gives marginally
- * better results; if you are short of memory, 5 bits all around will save
- * some space but degrade the results.
- * To maintain a fully accurate histogram, we'd need to allocate a "long"
- * (preferably unsigned long) for each cell.  In practice this is overkill;
- * we can get by with 16 bits per cell.  Few of the cell counts will overflow,
- * and clamping those that do overflow to the maximum value will give close-
- * enough results.  This reduces the recommended histogram size from 256Kb
- * to 128Kb, which is a useful savings on PC-class machines.
- * (In the second pass the histogram space is re-used for pixel mapping data;
- * in that capacity, each cell must be able to store zero to the number of
- * desired colors.  16 bits/cell is plenty for that too.)
- * Since the JPEG code is intended to run in small memory model on 80x86
- * machines, we can't just allocate the histogram in one chunk.  Instead
- * of a true 3-D array, we use a row of pointers to 2-D arrays.  Each
- * pointer corresponds to a C0 value (typically 2^5 = 32 pointers) and
- * each 2-D array has 2^6*2^5 = 2048 or 2^6*2^6 = 4096 entries.  Note that
- * on 80x86 machines, the pointer row is in near memory but the actual
- * arrays are in far memory (same arrangement as we use for image arrays).
- */
-
-#define MAXNUMCOLORS  (MAXJSAMPLE+1) /* maximum size of colormap */
-
-/* These will do the right thing for either R,G,B or B,G,R color order,
- * but you may not like the results for other color orders.
- */
-#define HIST_C0_BITS  5		/* bits of precision in R/B histogram */
-#define HIST_C1_BITS  6		/* bits of precision in G histogram */
-#define HIST_C2_BITS  5		/* bits of precision in B/R histogram */
-
-/* Number of elements along histogram axes. */
-#define HIST_C0_ELEMS  (1<<HIST_C0_BITS)
-#define HIST_C1_ELEMS  (1<<HIST_C1_BITS)
-#define HIST_C2_ELEMS  (1<<HIST_C2_BITS)
-
-/* These are the amounts to shift an input value to get a histogram index. */
-#define C0_SHIFT  (BITS_IN_JSAMPLE-HIST_C0_BITS)
-#define C1_SHIFT  (BITS_IN_JSAMPLE-HIST_C1_BITS)
-#define C2_SHIFT  (BITS_IN_JSAMPLE-HIST_C2_BITS)
-
-
-typedef UINT16 histcell;	/* histogram cell; prefer an unsigned type */
-
-typedef histcell FAR * histptr;	/* for pointers to histogram cells */
-
-typedef histcell hist1d[HIST_C2_ELEMS]; /* typedefs for the array */
-typedef hist1d FAR * hist2d;	/* type for the 2nd-level pointers */
-typedef hist2d * hist3d;	/* type for top-level pointer */
-
-
-/* Declarations for Floyd-Steinberg dithering.
- *
- * Errors are accumulated into the array fserrors[], at a resolution of
- * 1/16th of a pixel count.  The error at a given pixel is propagated
- * to its not-yet-processed neighbors using the standard F-S fractions,
- *		...	(here)	7/16
- *		3/16	5/16	1/16
- * We work left-to-right on even rows, right-to-left on odd rows.
- *
- * We can get away with a single array (holding one row's worth of errors)
- * by using it to store the current row's errors at pixel columns not yet
- * processed, but the next row's errors at columns already processed.  We
- * need only a few extra variables to hold the errors immediately around the
- * current column.  (If we are lucky, those variables are in registers, but
- * even if not, they're probably cheaper to access than array elements are.)
- *
- * The fserrors[] array has (#columns + 2) entries; the extra entry at
- * each end saves us from special-casing the first and last pixels.
- * Each entry is three values long, one value for each color component.
- *
- * Note: on a wide image, we might not have enough room in a PC's near data
- * segment to hold the error array; so it is allocated with alloc_large.
- */
-
-#if BITS_IN_JSAMPLE == 8
-typedef INT16 FSERROR;		/* 16 bits should be enough */
-typedef int LOCFSERROR;		/* use 'int' for calculation temps */
-#else
-typedef INT32 FSERROR;		/* may need more than 16 bits */
-typedef INT32 LOCFSERROR;	/* be sure calculation temps are big enough */
-#endif
-
-typedef FSERROR FAR *FSERRPTR;	/* pointer to error array (in FAR storage!) */
-
-
-/* Private subobject */
-
-typedef struct {
-  struct jpeg_color_quantizer pub; /* public fields */
-
-  /* Space for the eventually created colormap is stashed here */
-  JSAMPARRAY sv_colormap;	/* colormap allocated at init time */
-  int desired;			/* desired # of colors = size of colormap */
-
-  /* Variables for accumulating image statistics */
-  hist3d histogram;		/* pointer to the histogram */
-
-  boolean needs_zeroed;		/* TRUE if next pass must zero histogram */
-
-  /* Variables for Floyd-Steinberg dithering */
-  FSERRPTR fserrors;		/* accumulated errors */
-  boolean on_odd_row;		/* flag to remember which row we are on */
-  int * error_limiter;		/* table for clamping the applied error */
-} my_cquantizer;
-
-typedef my_cquantizer * my_cquantize_ptr;
-
-
-/*
- * Prescan some rows of pixels.
- * In this module the prescan simply updates the histogram, which has been
- * initialized to zeroes by start_pass.
- * An output_buf parameter is required by the method signature, but no data
- * is actually output (in fact the buffer controller is probably passing a
- * NULL pointer).
- */
-
-METHODDEF void
-prescan_quantize (j_decompress_ptr cinfo, JSAMPARRAY input_buf,
-		  JSAMPARRAY output_buf, int num_rows)
-{
-  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
-  register JSAMPROW ptr;
-  register histptr histp;
-  register hist3d histogram = cquantize->histogram;
-  int row;
-  JDIMENSION col;
-  JDIMENSION width = cinfo->output_width;
-
-  for (row = 0; row < num_rows; row++) {
-    ptr = input_buf[row];
-    for (col = width; col > 0; col--) {
-      /* get pixel value and index into the histogram */
-      histp = & histogram[GETJSAMPLE(ptr[0]) >> C0_SHIFT]
-			 [GETJSAMPLE(ptr[1]) >> C1_SHIFT]
-			 [GETJSAMPLE(ptr[2]) >> C2_SHIFT];
-      /* increment, check for overflow and undo increment if so. */
-      if (++(*histp) <= 0)
-	(*histp)--;
-      ptr += 3;
-    }
-  }
-}
-
-
-/*
- * Next we have the really interesting routines: selection of a colormap
- * given the completed histogram.
- * These routines work with a list of "boxes", each representing a rectangular
- * subset of the input color space (to histogram precision).
- */
-
-typedef struct {
-  /* The bounds of the box (inclusive); expressed as histogram indexes */
-  int c0min, c0max;
-  int c1min, c1max;
-  int c2min, c2max;
-  /* The volume (actually 2-norm) of the box */
-  INT32 volume;
-  /* The number of nonzero histogram cells within this box */
-  long colorcount;
-} box;
-
-typedef box * boxptr;
-
-
-LOCAL boxptr
-find_biggest_color_pop (boxptr boxlist, int numboxes)
-/* Find the splittable box with the largest color population */
-/* Returns NULL if no splittable boxes remain */
-{
-  register boxptr boxp;
-  register int i;
-  register long maxc = 0;
-  boxptr which = NULL;
-  
-  for (i = 0, boxp = boxlist; i < numboxes; i++, boxp++) {
-    if (boxp->colorcount > maxc && boxp->volume > 0) {
-      which = boxp;
-      maxc = boxp->colorcount;
-    }
-  }
-  return which;
-}
-
-
-LOCAL boxptr
-find_biggest_volume (boxptr boxlist, int numboxes)
-/* Find the splittable box with the largest (scaled) volume */
-/* Returns NULL if no splittable boxes remain */
-{
-  register boxptr boxp;
-  register int i;
-  register INT32 maxv = 0;
-  boxptr which = NULL;
-  
-  for (i = 0, boxp = boxlist; i < numboxes; i++, boxp++) {
-    if (boxp->volume > maxv) {
-      which = boxp;
-      maxv = boxp->volume;
-    }
-  }
-  return which;
-}
-
-
-LOCAL void
-update_box (j_decompress_ptr cinfo, boxptr boxp)
-/* Shrink the min/max bounds of a box to enclose only nonzero elements, */
-/* and recompute its volume and population */
-{
-  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
-  hist3d histogram = cquantize->histogram;
-  histptr histp;
-  int c0,c1,c2;
-  int c0min,c0max,c1min,c1max,c2min,c2max;
-  INT32 dist0,dist1,dist2;
-  long ccount;
-  
-  c0min = boxp->c0min;  c0max = boxp->c0max;
-  c1min = boxp->c1min;  c1max = boxp->c1max;
-  c2min = boxp->c2min;  c2max = boxp->c2max;
-  
-  if (c0max > c0min)
-    for (c0 = c0min; c0 <= c0max; c0++)
-      for (c1 = c1min; c1 <= c1max; c1++) {
-	histp = & histogram[c0][c1][c2min];
-	for (c2 = c2min; c2 <= c2max; c2++)
-	  if (*histp++ != 0) {
-	    boxp->c0min = c0min = c0;
-	    goto have_c0min;
-	  }
-      }
- have_c0min:
-  if (c0max > c0min)
-    for (c0 = c0max; c0 >= c0min; c0--)
-      for (c1 = c1min; c1 <= c1max; c1++) {
-	histp = & histogram[c0][c1][c2min];
-	for (c2 = c2min; c2 <= c2max; c2++)
-	  if (*histp++ != 0) {
-	    boxp->c0max = c0max = c0;
-	    goto have_c0max;
-	  }
-      }
- have_c0max:
-  if (c1max > c1min)
-    for (c1 = c1min; c1 <= c1max; c1++)
-      for (c0 = c0min; c0 <= c0max; c0++) {
-	histp = & histogram[c0][c1][c2min];
-	for (c2 = c2min; c2 <= c2max; c2++)
-	  if (*histp++ != 0) {
-	    boxp->c1min = c1min = c1;
-	    goto have_c1min;
-	  }
-      }
- have_c1min:
-  if (c1max > c1min)
-    for (c1 = c1max; c1 >= c1min; c1--)
-      for (c0 = c0min; c0 <= c0max; c0++) {
-	histp = & histogram[c0][c1][c2min];
-	for (c2 = c2min; c2 <= c2max; c2++)
-	  if (*histp++ != 0) {
-	    boxp->c1max = c1max = c1;
-	    goto have_c1max;
-	  }
-      }
- have_c1max:
-  if (c2max > c2min)
-    for (c2 = c2min; c2 <= c2max; c2++)
-      for (c0 = c0min; c0 <= c0max; c0++) {
-	histp = & histogram[c0][c1min][c2];
-	for (c1 = c1min; c1 <= c1max; c1++, histp += HIST_C2_ELEMS)
-	  if (*histp != 0) {
-	    boxp->c2min = c2min = c2;
-	    goto have_c2min;
-	  }
-      }
- have_c2min:
-  if (c2max > c2min)
-    for (c2 = c2max; c2 >= c2min; c2--)
-      for (c0 = c0min; c0 <= c0max; c0++) {
-	histp = & histogram[c0][c1min][c2];
-	for (c1 = c1min; c1 <= c1max; c1++, histp += HIST_C2_ELEMS)
-	  if (*histp != 0) {
-	    boxp->c2max = c2max = c2;
-	    goto have_c2max;
-	  }
-      }
- have_c2max:
-
-  /* Update box volume.
-   * We use 2-norm rather than real volume here; this biases the method
-   * against making long narrow boxes, and it has the side benefit that
-   * a box is splittable iff norm > 0.
-   * Since the differences are expressed in histogram-cell units,
-   * we have to shift back to JSAMPLE units to get consistent distances;
-   * after which, we scale according to the selected distance scale factors.
-   */
-  dist0 = ((c0max - c0min) << C0_SHIFT) * C0_SCALE;
-  dist1 = ((c1max - c1min) << C1_SHIFT) * C1_SCALE;
-  dist2 = ((c2max - c2min) << C2_SHIFT) * C2_SCALE;
-  boxp->volume = dist0*dist0 + dist1*dist1 + dist2*dist2;
-  
-  /* Now scan remaining volume of box and compute population */
-  ccount = 0;
-  for (c0 = c0min; c0 <= c0max; c0++)
-    for (c1 = c1min; c1 <= c1max; c1++) {
-      histp = & histogram[c0][c1][c2min];
-      for (c2 = c2min; c2 <= c2max; c2++, histp++)
-	if (*histp != 0) {
-	  ccount++;
-	}
-    }
-  boxp->colorcount = ccount;
-}
-
-
-LOCAL int
-median_cut (j_decompress_ptr cinfo, boxptr boxlist, int numboxes,
-	    int desired_colors)
-/* Repeatedly select and split the largest box until we have enough boxes */
-{
-  int n,lb;
-  int c0,c1,c2,cmax;
-  register boxptr b1,b2;
-
-  while (numboxes < desired_colors) {
-    /* Select box to split.
-     * Current algorithm: by population for first half, then by volume.
-     */
-    if (numboxes*2 <= desired_colors) {
-      b1 = find_biggest_color_pop(boxlist, numboxes);
-    } else {
-      b1 = find_biggest_volume(boxlist, numboxes);
-    }
-    if (b1 == NULL)		/* no splittable boxes left! */
-      break;
-    b2 = &boxlist[numboxes];	/* where new box will go */
-    /* Copy the color bounds to the new box. */
-    b2->c0max = b1->c0max; b2->c1max = b1->c1max; b2->c2max = b1->c2max;
-    b2->c0min = b1->c0min; b2->c1min = b1->c1min; b2->c2min = b1->c2min;
-    /* Choose which axis to split the box on.
-     * Current algorithm: longest scaled axis.
-     * See notes in update_box about scaling distances.
-     */
-    c0 = ((b1->c0max - b1->c0min) << C0_SHIFT) * C0_SCALE;
-    c1 = ((b1->c1max - b1->c1min) << C1_SHIFT) * C1_SCALE;
-    c2 = ((b1->c2max - b1->c2min) << C2_SHIFT) * C2_SCALE;
-    /* We want to break any ties in favor of green, then red, blue last.
-     * This code does the right thing for R,G,B or B,G,R color orders only.
-     */
-#if RGB_RED == 0
-    cmax = c1; n = 1;
-    if (c0 > cmax) { cmax = c0; n = 0; }
-    if (c2 > cmax) { n = 2; }
-#else
-    cmax = c1; n = 1;
-    if (c2 > cmax) { cmax = c2; n = 2; }
-    if (c0 > cmax) { n = 0; }
-#endif
-    /* Choose split point along selected axis, and update box bounds.
-     * Current algorithm: split at halfway point.
-     * (Since the box has been shrunk to minimum volume,
-     * any split will produce two nonempty subboxes.)
-     * Note that lb value is max for lower box, so must be < old max.
-     */
-    switch (n) {
-    case 0:
-      lb = (b1->c0max + b1->c0min) / 2;
-      b1->c0max = lb;
-      b2->c0min = lb+1;
-      break;
-    case 1:
-      lb = (b1->c1max + b1->c1min) / 2;
-      b1->c1max = lb;
-      b2->c1min = lb+1;
-      break;
-    case 2:
-      lb = (b1->c2max + b1->c2min) / 2;
-      b1->c2max = lb;
-      b2->c2min = lb+1;
-      break;
-    }
-    /* Update stats for boxes */
-    update_box(cinfo, b1);
-    update_box(cinfo, b2);
-    numboxes++;
-  }
-  return numboxes;
-}
-
-
-LOCAL void
-compute_color (j_decompress_ptr cinfo, boxptr boxp, int icolor)
-/* Compute representative color for a box, put it in colormap[icolor] */
-{
-  /* Current algorithm: mean weighted by pixels (not colors) */
-  /* Note it is important to get the rounding correct! */
-  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
-  hist3d histogram = cquantize->histogram;
-  histptr histp;
-  int c0,c1,c2;
-  int c0min,c0max,c1min,c1max,c2min,c2max;
-  long count;
-  long total = 0;
-  long c0total = 0;
-  long c1total = 0;
-  long c2total = 0;
-  
-  c0min = boxp->c0min;  c0max = boxp->c0max;
-  c1min = boxp->c1min;  c1max = boxp->c1max;
-  c2min = boxp->c2min;  c2max = boxp->c2max;
-  
-  for (c0 = c0min; c0 <= c0max; c0++)
-    for (c1 = c1min; c1 <= c1max; c1++) {
-      histp = & histogram[c0][c1][c2min];
-      for (c2 = c2min; c2 <= c2max; c2++) {
-	if ((count = *histp++) != 0) {
-	  total += count;
-	  c0total += ((c0 << C0_SHIFT) + ((1<<C0_SHIFT)>>1)) * count;
-	  c1total += ((c1 << C1_SHIFT) + ((1<<C1_SHIFT)>>1)) * count;
-	  c2total += ((c2 << C2_SHIFT) + ((1<<C2_SHIFT)>>1)) * count;
-	}
-      }
-    }
-  
-  cinfo->colormap[0][icolor] = (JSAMPLE) ((c0total + (total>>1)) / total);
-  cinfo->colormap[1][icolor] = (JSAMPLE) ((c1total + (total>>1)) / total);
-  cinfo->colormap[2][icolor] = (JSAMPLE) ((c2total + (total>>1)) / total);
-}
-
-
-LOCAL void
-select_colors (j_decompress_ptr cinfo, int desired_colors)
-/* Master routine for color selection */
-{
-  boxptr boxlist;
-  int numboxes;
-  int i;
-
-  /* Allocate workspace for box list */
-  boxlist = (boxptr) (*cinfo->mem->alloc_small)
-    ((j_common_ptr) cinfo, JPOOL_IMAGE, desired_colors * SIZEOF(box));
-  /* Initialize one box containing whole space */
-  numboxes = 1;
-  boxlist[0].c0min = 0;
-  boxlist[0].c0max = MAXJSAMPLE >> C0_SHIFT;
-  boxlist[0].c1min = 0;
-  boxlist[0].c1max = MAXJSAMPLE >> C1_SHIFT;
-  boxlist[0].c2min = 0;
-  boxlist[0].c2max = MAXJSAMPLE >> C2_SHIFT;
-  /* Shrink it to actually-used volume and set its statistics */
-  update_box(cinfo, & boxlist[0]);
-  /* Perform median-cut to produce final box list */
-  numboxes = median_cut(cinfo, boxlist, numboxes, desired_colors);
-  /* Compute the representative color for each box, fill colormap */
-  for (i = 0; i < numboxes; i++)
-    compute_color(cinfo, & boxlist[i], i);
-  cinfo->actual_number_of_colors = numboxes;
-  TRACEMS1(cinfo, 1, JTRC_QUANT_SELECTED, numboxes);
-}
-
-
-/*
- * These routines are concerned with the time-critical task of mapping input
- * colors to the nearest color in the selected colormap.
- *
- * We re-use the histogram space as an "inverse color map", essentially a
- * cache for the results of nearest-color searches.  All colors within a
- * histogram cell will be mapped to the same colormap entry, namely the one
- * closest to the cell's center.  This may not be quite the closest entry to
- * the actual input color, but it's almost as good.  A zero in the cache
- * indicates we haven't found the nearest color for that cell yet; the array
- * is cleared to zeroes before starting the mapping pass.  When we find the
- * nearest color for a cell, its colormap index plus one is recorded in the
- * cache for future use.  The pass2 scanning routines call fill_inverse_cmap
- * when they need to use an unfilled entry in the cache.
- *
- * Our method of efficiently finding nearest colors is based on the "locally
- * sorted search" idea described by Heckbert and on the incremental distance
- * calculation described by Spencer W. Thomas in chapter III.1 of Graphics
- * Gems II (James Arvo, ed.  Academic Press, 1991).  Thomas points out that
- * the distances from a given colormap entry to each cell of the histogram can
- * be computed quickly using an incremental method: the differences between
- * distances to adjacent cells themselves differ by a constant.  This allows a
- * fairly fast implementation of the "brute force" approach of computing the
- * distance from every colormap entry to every histogram cell.  Unfortunately,
- * it needs a work array to hold the best-distance-so-far for each histogram
- * cell (because the inner loop has to be over cells, not colormap entries).
- * The work array elements have to be INT32s, so the work array would need
- * 256Kb at our recommended precision.  This is not feasible in DOS machines.
- *
- * To get around these problems, we apply Thomas' method to compute the
- * nearest colors for only the cells within a small subbox of the histogram.
- * The work array need be only as big as the subbox, so the memory usage
- * problem is solved.  Furthermore, we need not fill subboxes that are never
- * referenced in pass2; many images use only part of the color gamut, so a
- * fair amount of work is saved.  An additional advantage of this
- * approach is that we can apply Heckbert's locality criterion to quickly
- * eliminate colormap entries that are far away from the subbox; typically
- * three-fourths of the colormap entries are rejected by Heckbert's criterion,
- * and we need not compute their distances to individual cells in the subbox.
- * The speed of this approach is heavily influenced by the subbox size: too
- * small means too much overhead, too big loses because Heckbert's criterion
- * can't eliminate as many colormap entries.  Empirically the best subbox
- * size seems to be about 1/512th of the histogram (1/8th in each direction).
- *
- * Thomas' article also describes a refined method which is asymptotically
- * faster than the brute-force method, but it is also far more complex and
- * cannot efficiently be applied to small subboxes.  It is therefore not
- * useful for programs intended to be portable to DOS machines.  On machines
- * with plenty of memory, filling the whole histogram in one shot with Thomas'
- * refined method might be faster than the present code --- but then again,
- * it might not be any faster, and it's certainly more complicated.
- */
-
-
-/* log2(histogram cells in update box) for each axis; this can be adjusted */
-#define BOX_C0_LOG  (HIST_C0_BITS-3)
-#define BOX_C1_LOG  (HIST_C1_BITS-3)
-#define BOX_C2_LOG  (HIST_C2_BITS-3)
-
-#define BOX_C0_ELEMS  (1<<BOX_C0_LOG) /* # of hist cells in update box */
-#define BOX_C1_ELEMS  (1<<BOX_C1_LOG)
-#define BOX_C2_ELEMS  (1<<BOX_C2_LOG)
-
-#define BOX_C0_SHIFT  (C0_SHIFT + BOX_C0_LOG)
-#define BOX_C1_SHIFT  (C1_SHIFT + BOX_C1_LOG)
-#define BOX_C2_SHIFT  (C2_SHIFT + BOX_C2_LOG)
-
-
-/*
- * The next three routines implement inverse colormap filling.  They could
- * all be folded into one big routine, but splitting them up this way saves
- * some stack space (the mindist[] and bestdist[] arrays need not coexist)
- * and may allow some compilers to produce better code by registerizing more
- * inner-loop variables.
- */
-
-LOCAL int
-find_nearby_colors (j_decompress_ptr cinfo, int minc0, int minc1, int minc2,
-		    JSAMPLE colorlist[])
-/* Locate the colormap entries close enough to an update box to be candidates
- * for the nearest entry to some cell(s) in the update box.  The update box
- * is specified by the center coordinates of its first cell.  The number of
- * candidate colormap entries is returned, and their colormap indexes are
- * placed in colorlist[].
- * This routine uses Heckbert's "locally sorted search" criterion to select
- * the colors that need further consideration.
- */
-{
-  int numcolors = cinfo->actual_number_of_colors;
-  int maxc0, maxc1, maxc2;
-  int centerc0, centerc1, centerc2;
-  int i, x, ncolors;
-  INT32 minmaxdist, min_dist, max_dist, tdist;
-  INT32 mindist[MAXNUMCOLORS];	/* min distance to colormap entry i */
-
-  /* Compute true coordinates of update box's upper corner and center.
-   * Actually we compute the coordinates of the center of the upper-corner
-   * histogram cell, which are the upper bounds of the volume we care about.
-   * Note that since ">>" rounds down, the "center" values may be closer to
-   * min than to max; hence comparisons to them must be "<=", not "<".
-   */
-  maxc0 = minc0 + ((1 << BOX_C0_SHIFT) - (1 << C0_SHIFT));
-  centerc0 = (minc0 + maxc0) >> 1;
-  maxc1 = minc1 + ((1 << BOX_C1_SHIFT) - (1 << C1_SHIFT));
-  centerc1 = (minc1 + maxc1) >> 1;
-  maxc2 = minc2 + ((1 << BOX_C2_SHIFT) - (1 << C2_SHIFT));
-  centerc2 = (minc2 + maxc2) >> 1;
-
-  /* For each color in colormap, find:
-   *  1. its minimum squared-distance to any point in the update box
-   *     (zero if color is within update box);
-   *  2. its maximum squared-distance to any point in the update box.
-   * Both of these can be found by considering only the corners of the box.
-   * We save the minimum distance for each color in mindist[];
-   * only the smallest maximum distance is of interest.
-   */
-  minmaxdist = 0x7FFFFFFFL;
-
-  for (i = 0; i < numcolors; i++) {
-    /* We compute the squared-c0-distance term, then add in the other two. */
-    x = GETJSAMPLE(cinfo->colormap[0][i]);
-    if (x < minc0) {
-      tdist = (x - minc0) * C0_SCALE;
-      min_dist = tdist*tdist;
-      tdist = (x - maxc0) * C0_SCALE;
-      max_dist = tdist*tdist;
-    } else if (x > maxc0) {
-      tdist = (x - maxc0) * C0_SCALE;
-      min_dist = tdist*tdist;
-      tdist = (x - minc0) * C0_SCALE;
-      max_dist = tdist*tdist;
-    } else {
-      /* within cell range so no contribution to min_dist */
-      min_dist = 0;
-      if (x <= centerc0) {
-	tdist = (x - maxc0) * C0_SCALE;
-	max_dist = tdist*tdist;
-      } else {
-	tdist = (x - minc0) * C0_SCALE;
-	max_dist = tdist*tdist;
-      }
-    }
-
-    x = GETJSAMPLE(cinfo->colormap[1][i]);
-    if (x < minc1) {
-      tdist = (x - minc1) * C1_SCALE;
-      min_dist += tdist*tdist;
-      tdist = (x - maxc1) * C1_SCALE;
-      max_dist += tdist*tdist;
-    } else if (x > maxc1) {
-      tdist = (x - maxc1) * C1_SCALE;
-      min_dist += tdist*tdist;
-      tdist = (x - minc1) * C1_SCALE;
-      max_dist += tdist*tdist;
-    } else {
-      /* within cell range so no contribution to min_dist */
-      if (x <= centerc1) {
-	tdist = (x - maxc1) * C1_SCALE;
-	max_dist += tdist*tdist;
-      } else {
-	tdist = (x - minc1) * C1_SCALE;
-	max_dist += tdist*tdist;
-      }
-    }
-
-    x = GETJSAMPLE(cinfo->colormap[2][i]);
-    if (x < minc2) {
-      tdist = (x - minc2) * C2_SCALE;
-      min_dist += tdist*tdist;
-      tdist = (x - maxc2) * C2_SCALE;
-      max_dist += tdist*tdist;
-    } else if (x > maxc2) {
-      tdist = (x - maxc2) * C2_SCALE;
-      min_dist += tdist*tdist;
-      tdist = (x - minc2) * C2_SCALE;
-      max_dist += tdist*tdist;
-    } else {
-      /* within cell range so no contribution to min_dist */
-      if (x <= centerc2) {
-	tdist = (x - maxc2) * C2_SCALE;
-	max_dist += tdist*tdist;
-      } else {
-	tdist = (x - minc2) * C2_SCALE;
-	max_dist += tdist*tdist;
-      }
-    }
-
-    mindist[i] = min_dist;	/* save away the results */
-    if (max_dist < minmaxdist)
-      minmaxdist = max_dist;
-  }
-
-  /* Now we know that no cell in the update box is more than minmaxdist
-   * away from some colormap entry.  Therefore, only colors that are
-   * within minmaxdist of some part of the box need be considered.
-   */
-  ncolors = 0;
-  for (i = 0; i < numcolors; i++) {
-    if (mindist[i] <= minmaxdist)
-      colorlist[ncolors++] = (JSAMPLE) i;
-  }
-  return ncolors;
-}
-
-
-LOCAL void
-find_best_colors (j_decompress_ptr cinfo, int minc0, int minc1, int minc2,
-		  int numcolors, JSAMPLE colorlist[], JSAMPLE bestcolor[])
-/* Find the closest colormap entry for each cell in the update box,
- * given the list of candidate colors prepared by find_nearby_colors.
- * Return the indexes of the closest entries in the bestcolor[] array.
- * This routine uses Thomas' incremental distance calculation method to
- * find the distance from a colormap entry to successive cells in the box.
- */
-{
-  int ic0, ic1, ic2;
-  int i, icolor;
-  register INT32 * bptr;	/* pointer into bestdist[] array */
-  JSAMPLE * cptr;		/* pointer into bestcolor[] array */
-  INT32 dist0, dist1;		/* initial distance values */
-  register INT32 dist2;		/* current distance in inner loop */
-  INT32 xx0, xx1;		/* distance increments */
-  register INT32 xx2;
-  INT32 inc0, inc1, inc2;	/* initial values for increments */
-  /* This array holds the distance to the nearest-so-far color for each cell */
-  INT32 bestdist[BOX_C0_ELEMS * BOX_C1_ELEMS * BOX_C2_ELEMS];
-
-  /* Initialize best-distance for each cell of the update box */
-  bptr = bestdist;
-  for (i = BOX_C0_ELEMS*BOX_C1_ELEMS*BOX_C2_ELEMS-1; i >= 0; i--)
-    *bptr++ = 0x7FFFFFFFL;
-  
-  /* For each color selected by find_nearby_colors,
-   * compute its distance to the center of each cell in the box.
-   * If that's less than best-so-far, update best distance and color number.
-   */
-  
-  /* Nominal steps between cell centers ("x" in Thomas article) */
-#define STEP_C0  ((1 << C0_SHIFT) * C0_SCALE)
-#define STEP_C1  ((1 << C1_SHIFT) * C1_SCALE)
-#define STEP_C2  ((1 << C2_SHIFT) * C2_SCALE)
-  
-  for (i = 0; i < numcolors; i++) {
-    icolor = GETJSAMPLE(colorlist[i]);
-    /* Compute (square of) distance from minc0/c1/c2 to this color */
-    inc0 = (minc0 - GETJSAMPLE(cinfo->colormap[0][icolor])) * C0_SCALE;
-    dist0 = inc0*inc0;
-    inc1 = (minc1 - GETJSAMPLE(cinfo->colormap[1][icolor])) * C1_SCALE;
-    dist0 += inc1*inc1;
-    inc2 = (minc2 - GETJSAMPLE(cinfo->colormap[2][icolor])) * C2_SCALE;
-    dist0 += inc2*inc2;
-    /* Form the initial difference increments */
-    inc0 = inc0 * (2 * STEP_C0) + STEP_C0 * STEP_C0;
-    inc1 = inc1 * (2 * STEP_C1) + STEP_C1 * STEP_C1;
-    inc2 = inc2 * (2 * STEP_C2) + STEP_C2 * STEP_C2;
-    /* Now loop over all cells in box, updating distance per Thomas method */
-    bptr = bestdist;
-    cptr = bestcolor;
-    xx0 = inc0;
-    for (ic0 = BOX_C0_ELEMS-1; ic0 >= 0; ic0--) {
-      dist1 = dist0;
-      xx1 = inc1;
-      for (ic1 = BOX_C1_ELEMS-1; ic1 >= 0; ic1--) {
-	dist2 = dist1;
-	xx2 = inc2;
-	for (ic2 = BOX_C2_ELEMS-1; ic2 >= 0; ic2--) {
-	  if (dist2 < *bptr) {
-	    *bptr = dist2;
-	    *cptr = (JSAMPLE) icolor;
-	  }
-	  dist2 += xx2;
-	  xx2 += 2 * STEP_C2 * STEP_C2;
-	  bptr++;
-	  cptr++;
-	}
-	dist1 += xx1;
-	xx1 += 2 * STEP_C1 * STEP_C1;
-      }
-      dist0 += xx0;
-      xx0 += 2 * STEP_C0 * STEP_C0;
-    }
-  }
-}
-
-
-LOCAL void
-fill_inverse_cmap (j_decompress_ptr cinfo, int c0, int c1, int c2)
-/* Fill the inverse-colormap entries in the update box that contains */
-/* histogram cell c0/c1/c2.  (Only that one cell MUST be filled, but */
-/* we can fill as many others as we wish.) */
-{
-  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
-  hist3d histogram = cquantize->histogram;
-  int minc0, minc1, minc2;	/* lower left corner of update box */
-  int ic0, ic1, ic2;
-  register JSAMPLE * cptr;	/* pointer into bestcolor[] array */
-  register histptr cachep;	/* pointer into main cache array */
-  /* This array lists the candidate colormap indexes. */
-  JSAMPLE colorlist[MAXNUMCOLORS];
-  int numcolors;		/* number of candidate colors */
-  /* This array holds the actually closest colormap index for each cell. */
-  JSAMPLE bestcolor[BOX_C0_ELEMS * BOX_C1_ELEMS * BOX_C2_ELEMS];
-
-  /* Convert cell coordinates to update box ID */
-  c0 >>= BOX_C0_LOG;
-  c1 >>= BOX_C1_LOG;
-  c2 >>= BOX_C2_LOG;
-
-  /* Compute true coordinates of update box's origin corner.
-   * Actually we compute the coordinates of the center of the corner
-   * histogram cell, which are the lower bounds of the volume we care about.
-   */
-  minc0 = (c0 << BOX_C0_SHIFT) + ((1 << C0_SHIFT) >> 1);
-  minc1 = (c1 << BOX_C1_SHIFT) + ((1 << C1_SHIFT) >> 1);
-  minc2 = (c2 << BOX_C2_SHIFT) + ((1 << C2_SHIFT) >> 1);
-  
-  /* Determine which colormap entries are close enough to be candidates
-   * for the nearest entry to some cell in the update box.
-   */
-  numcolors = find_nearby_colors(cinfo, minc0, minc1, minc2, colorlist);
-
-  /* Determine the actually nearest colors. */
-  find_best_colors(cinfo, minc0, minc1, minc2, numcolors, colorlist,
-		   bestcolor);
-
-  /* Save the best color numbers (plus 1) in the main cache array */
-  c0 <<= BOX_C0_LOG;		/* convert ID back to base cell indexes */
-  c1 <<= BOX_C1_LOG;
-  c2 <<= BOX_C2_LOG;
-  cptr = bestcolor;
-  for (ic0 = 0; ic0 < BOX_C0_ELEMS; ic0++) {
-    for (ic1 = 0; ic1 < BOX_C1_ELEMS; ic1++) {
-      cachep = & histogram[c0+ic0][c1+ic1][c2];
-      for (ic2 = 0; ic2 < BOX_C2_ELEMS; ic2++) {
-	*cachep++ = (histcell) (GETJSAMPLE(*cptr++) + 1);
-      }
-    }
-  }
-}
-
-
-/*
- * Map some rows of pixels to the output colormapped representation.
- */
-
-METHODDEF void
-pass2_no_dither (j_decompress_ptr cinfo,
-		 JSAMPARRAY input_buf, JSAMPARRAY output_buf, int num_rows)
-/* This version performs no dithering */
-{
-  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
-  hist3d histogram = cquantize->histogram;
-  register JSAMPROW inptr, outptr;
-  register histptr cachep;
-  register int c0, c1, c2;
-  int row;
-  JDIMENSION col;
-  JDIMENSION width = cinfo->output_width;
-
-  for (row = 0; row < num_rows; row++) {
-    inptr = input_buf[row];
-    outptr = output_buf[row];
-    for (col = width; col > 0; col--) {
-      /* get pixel value and index into the cache */
-      c0 = GETJSAMPLE(*inptr++) >> C0_SHIFT;
-      c1 = GETJSAMPLE(*inptr++) >> C1_SHIFT;
-      c2 = GETJSAMPLE(*inptr++) >> C2_SHIFT;
-      cachep = & histogram[c0][c1][c2];
-      /* If we have not seen this color before, find nearest colormap entry */
-      /* and update the cache */
-      if (*cachep == 0)
-	fill_inverse_cmap(cinfo, c0,c1,c2);
-      /* Now emit the colormap index for this cell */
-      *outptr++ = (JSAMPLE) (*cachep - 1);
-    }
-  }
-}
-
-
-METHODDEF void
-pass2_fs_dither (j_decompress_ptr cinfo,
-		 JSAMPARRAY input_buf, JSAMPARRAY output_buf, int num_rows)
-/* This version performs Floyd-Steinberg dithering */
-{
-  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
-  hist3d histogram = cquantize->histogram;
-  register LOCFSERROR cur0, cur1, cur2;	/* current error or pixel value */
-  LOCFSERROR belowerr0, belowerr1, belowerr2; /* error for pixel below cur */
-  LOCFSERROR bpreverr0, bpreverr1, bpreverr2; /* error for below/prev col */
-  register FSERRPTR errorptr;	/* => fserrors[] at column before current */
-  JSAMPROW inptr;		/* => current input pixel */
-  JSAMPROW outptr;		/* => current output pixel */
-  histptr cachep;
-  int dir;			/* +1 or -1 depending on direction */
-  int dir3;			/* 3*dir, for advancing inptr & errorptr */
-  int row;
-  JDIMENSION col;
-  JDIMENSION width = cinfo->output_width;
-  JSAMPLE *range_limit = cinfo->sample_range_limit;
-  int *error_limit = cquantize->error_limiter;
-  JSAMPROW colormap0 = cinfo->colormap[0];
-  JSAMPROW colormap1 = cinfo->colormap[1];
-  JSAMPROW colormap2 = cinfo->colormap[2];
-  SHIFT_TEMPS
-
-  for (row = 0; row < num_rows; row++) {
-    inptr = input_buf[row];
-    outptr = output_buf[row];
-    if (cquantize->on_odd_row) {
-      /* work right to left in this row */
-      inptr += (width-1) * 3;	/* so point to rightmost pixel */
-      outptr += width-1;
-      dir = -1;
-      dir3 = -3;
-      errorptr = cquantize->fserrors + (width+1)*3; /* => entry after last column */
-      cquantize->on_odd_row = FALSE; /* flip for next time */
-    } else {
-      /* work left to right in this row */
-      dir = 1;
-      dir3 = 3;
-      errorptr = cquantize->fserrors; /* => entry before first real column */
-      cquantize->on_odd_row = TRUE; /* flip for next time */
-    }
-    /* Preset error values: no error propagated to first pixel from left */
-    cur0 = cur1 = cur2 = 0;
-    /* and no error propagated to row below yet */
-    belowerr0 = belowerr1 = belowerr2 = 0;
-    bpreverr0 = bpreverr1 = bpreverr2 = 0;
-
-    for (col = width; col > 0; col--) {
-      /* curN holds the error propagated from the previous pixel on the
-       * current line.  Add the error propagated from the previous line
-       * to form the complete error correction term for this pixel, and
-       * round the error term (which is expressed * 16) to an integer.
-       * RIGHT_SHIFT rounds towards minus infinity, so adding 8 is correct
-       * for either sign of the error value.
-       * Note: errorptr points to *previous* column's array entry.
-       */
-      cur0 = RIGHT_SHIFT(cur0 + errorptr[dir3+0] + 8, 4);
-      cur1 = RIGHT_SHIFT(cur1 + errorptr[dir3+1] + 8, 4);
-      cur2 = RIGHT_SHIFT(cur2 + errorptr[dir3+2] + 8, 4);
-      /* Limit the error using transfer function set by init_error_limit.
-       * See comments with init_error_limit for rationale.
-       */
-      cur0 = error_limit[cur0];
-      cur1 = error_limit[cur1];
-      cur2 = error_limit[cur2];
-      /* Form pixel value + error, and range-limit to 0..MAXJSAMPLE.
-       * The maximum error is +- MAXJSAMPLE (or less with error limiting);
-       * this sets the required size of the range_limit array.
-       */
-      cur0 += GETJSAMPLE(inptr[0]);
-      cur1 += GETJSAMPLE(inptr[1]);
-      cur2 += GETJSAMPLE(inptr[2]);
-      cur0 = GETJSAMPLE(range_limit[cur0]);
-      cur1 = GETJSAMPLE(range_limit[cur1]);
-      cur2 = GETJSAMPLE(range_limit[cur2]);
-      /* Index into the cache with adjusted pixel value */
-      cachep = & histogram[cur0>>C0_SHIFT][cur1>>C1_SHIFT][cur2>>C2_SHIFT];
-      /* If we have not seen this color before, find nearest colormap */
-      /* entry and update the cache */
-      if (*cachep == 0)
-	fill_inverse_cmap(cinfo, cur0>>C0_SHIFT,cur1>>C1_SHIFT,cur2>>C2_SHIFT);
-      /* Now emit the colormap index for this cell */
-      { register int pixcode = *cachep - 1;
-	*outptr = (JSAMPLE) pixcode;
-	/* Compute representation error for this pixel */
-	cur0 -= GETJSAMPLE(colormap0[pixcode]);
-	cur1 -= GETJSAMPLE(colormap1[pixcode]);
-	cur2 -= GETJSAMPLE(colormap2[pixcode]);
-      }
-      /* Compute error fractions to be propagated to adjacent pixels.
-       * Add these into the running sums, and simultaneously shift the
-       * next-line error sums left by 1 column.
-       */
-      { register LOCFSERROR bnexterr, delta;
-
-	bnexterr = cur0;	/* Process component 0 */
-	delta = cur0 * 2;
-	cur0 += delta;		/* form error * 3 */
-	errorptr[0] = (FSERROR) (bpreverr0 + cur0);
-	cur0 += delta;		/* form error * 5 */
-	bpreverr0 = belowerr0 + cur0;
-	belowerr0 = bnexterr;
-	cur0 += delta;		/* form error * 7 */
-	bnexterr = cur1;	/* Process component 1 */
-	delta = cur1 * 2;
-	cur1 += delta;		/* form error * 3 */
-	errorptr[1] = (FSERROR) (bpreverr1 + cur1);
-	cur1 += delta;		/* form error * 5 */
-	bpreverr1 = belowerr1 + cur1;
-	belowerr1 = bnexterr;
-	cur1 += delta;		/* form error * 7 */
-	bnexterr = cur2;	/* Process component 2 */
-	delta = cur2 * 2;
-	cur2 += delta;		/* form error * 3 */
-	errorptr[2] = (FSERROR) (bpreverr2 + cur2);
-	cur2 += delta;		/* form error * 5 */
-	bpreverr2 = belowerr2 + cur2;
-	belowerr2 = bnexterr;
-	cur2 += delta;		/* form error * 7 */
-      }
-      /* At this point curN contains the 7/16 error value to be propagated
-       * to the next pixel on the current line, and all the errors for the
-       * next line have been shifted over.  We are therefore ready to move on.
-       */
-      inptr += dir3;		/* Advance pixel pointers to next column */
-      outptr += dir;
-      errorptr += dir3;		/* advance errorptr to current column */
-    }
-    /* Post-loop cleanup: we must unload the final error values into the
-     * final fserrors[] entry.  Note we need not unload belowerrN because
-     * it is for the dummy column before or after the actual array.
-     */
-    errorptr[0] = (FSERROR) bpreverr0; /* unload prev errs into array */
-    errorptr[1] = (FSERROR) bpreverr1;
-    errorptr[2] = (FSERROR) bpreverr2;
-  }
-}
-
-
-/*
- * Initialize the error-limiting transfer function (lookup table).
- * The raw F-S error computation can potentially compute error values of up to
- * +- MAXJSAMPLE.  But we want the maximum correction applied to a pixel to be
- * much less, otherwise obviously wrong pixels will be created.  (Typical
- * effects include weird fringes at color-area boundaries, isolated bright
- * pixels in a dark area, etc.)  The standard advice for avoiding this problem
- * is to ensure that the "corners" of the color cube are allocated as output
- * colors; then repeated errors in the same direction cannot cause cascading
- * error buildup.  However, that only prevents the error from getting
- * completely out of hand; Aaron Giles reports that error limiting improves
- * the results even with corner colors allocated.
- * A simple clamping of the error values to about +- MAXJSAMPLE/8 works pretty
- * well, but the smoother transfer function used below is even better.  Thanks
- * to Aaron Giles for this idea.
- */
-
-LOCAL void
-init_error_limit (j_decompress_ptr cinfo)
-/* Allocate and fill in the error_limiter table */
-{
-  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
-  int * table;
-  int in, out;
-
-  table = (int *) (*cinfo->mem->alloc_small)
-    ((j_common_ptr) cinfo, JPOOL_IMAGE, (MAXJSAMPLE*2+1) * SIZEOF(int));
-  table += MAXJSAMPLE;		/* so can index -MAXJSAMPLE .. +MAXJSAMPLE */
-  cquantize->error_limiter = table;
-
-#define STEPSIZE ((MAXJSAMPLE+1)/16)
-  /* Map errors 1:1 up to +- MAXJSAMPLE/16 */
-  out = 0;
-  for (in = 0; in < STEPSIZE; in++, out++) {
-    table[in] = out; table[-in] = -out;
-  }
-  /* Map errors 1:2 up to +- 3*MAXJSAMPLE/16 */
-  for (; in < STEPSIZE*3; in++, out += (in&1) ? 0 : 1) {
-    table[in] = out; table[-in] = -out;
-  }
-  /* Clamp the rest to final out value (which is (MAXJSAMPLE+1)/8) */
-  for (; in <= MAXJSAMPLE; in++) {
-    table[in] = out; table[-in] = -out;
-  }
-#undef STEPSIZE
-}
-
-
-/*
- * Finish up at the end of each pass.
- */
-
-METHODDEF void
-finish_pass1 (j_decompress_ptr cinfo)
-{
-  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
-
-  /* Select the representative colors and fill in cinfo->colormap */
-  cinfo->colormap = cquantize->sv_colormap;
-  select_colors(cinfo, cquantize->desired);
-  /* Force next pass to zero the color index table */
-  cquantize->needs_zeroed = TRUE;
-}
-
-
-METHODDEF void
-finish_pass2 (j_decompress_ptr cinfo)
-{
-  /* no work */
-}
-
-
-/*
- * Initialize for each processing pass.
- */
-
-METHODDEF void
-start_pass_2_quant (j_decompress_ptr cinfo, boolean is_pre_scan)
-{
-  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
-  hist3d histogram = cquantize->histogram;
-  int i;
-
-  /* Only F-S dithering or no dithering is supported. */
-  /* If user asks for ordered dither, give him F-S. */
-  if (cinfo->dither_mode != JDITHER_NONE)
-    cinfo->dither_mode = JDITHER_FS;
-
-  if (is_pre_scan) {
-    /* Set up method pointers */
-    cquantize->pub.color_quantize = prescan_quantize;
-    cquantize->pub.finish_pass = finish_pass1;
-    cquantize->needs_zeroed = TRUE; /* Always zero histogram */
-  } else {
-    /* Set up method pointers */
-    if (cinfo->dither_mode == JDITHER_FS)
-      cquantize->pub.color_quantize = pass2_fs_dither;
-    else
-      cquantize->pub.color_quantize = pass2_no_dither;
-    cquantize->pub.finish_pass = finish_pass2;
-
-    /* Make sure color count is acceptable */
-    i = cinfo->actual_number_of_colors;
-    if (i < 1)
-      ERREXIT1(cinfo, JERR_QUANT_FEW_COLORS, 1);
-    if (i > MAXNUMCOLORS)
-      ERREXIT1(cinfo, JERR_QUANT_MANY_COLORS, MAXNUMCOLORS);
-
-    if (cinfo->dither_mode == JDITHER_FS) {
-      size_t arraysize = (size_t) ((cinfo->output_width + 2) *
-				   (3 * SIZEOF(FSERROR)));
-      /* Allocate Floyd-Steinberg workspace if we didn't already. */
-      if (cquantize->fserrors == NULL)
-	cquantize->fserrors = (FSERRPTR) (*cinfo->mem->alloc_large)
-	  ((j_common_ptr) cinfo, JPOOL_IMAGE, arraysize);
-      /* Initialize the propagated errors to zero. */
-      jzero_far((void FAR *) cquantize->fserrors, arraysize);
-      /* Make the error-limit table if we didn't already. */
-      if (cquantize->error_limiter == NULL)
-	init_error_limit(cinfo);
-      cquantize->on_odd_row = FALSE;
-    }
-
-  }
-  /* Zero the histogram or inverse color map, if necessary */
-  if (cquantize->needs_zeroed) {
-    for (i = 0; i < HIST_C0_ELEMS; i++) {
-      jzero_far((void FAR *) histogram[i],
-		HIST_C1_ELEMS*HIST_C2_ELEMS * SIZEOF(histcell));
-    }
-    cquantize->needs_zeroed = FALSE;
-  }
-}
-
-
-/*
- * Switch to a new external colormap between output passes.
- */
-
-METHODDEF void
-new_color_map_2_quant (j_decompress_ptr cinfo)
-{
-  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
-
-  /* Reset the inverse color map */
-  cquantize->needs_zeroed = TRUE;
-}
-
-
-/*
- * Module initialization routine for 2-pass color quantization.
- */
-
-GLOBAL void
-jinit_2pass_quantizer (j_decompress_ptr cinfo)
-{
-  my_cquantize_ptr cquantize;
-  int i;
-
-  cquantize = (my_cquantize_ptr)
-    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
-				SIZEOF(my_cquantizer));
-  cinfo->cquantize = (struct jpeg_color_quantizer *) cquantize;
-  cquantize->pub.start_pass = start_pass_2_quant;
-  cquantize->pub.new_color_map = new_color_map_2_quant;
-  cquantize->fserrors = NULL;	/* flag optional arrays not allocated */
-  cquantize->error_limiter = NULL;
-
-  /* Make sure jdmaster didn't give me a case I can't handle */
-  if (cinfo->out_color_components != 3)
-    ERREXIT(cinfo, JERR_NOTIMPL);
-
-  /* Allocate the histogram/inverse colormap storage */
-  cquantize->histogram = (hist3d) (*cinfo->mem->alloc_small)
-    ((j_common_ptr) cinfo, JPOOL_IMAGE, HIST_C0_ELEMS * SIZEOF(hist2d));
-  for (i = 0; i < HIST_C0_ELEMS; i++) {
-    cquantize->histogram[i] = (hist2d) (*cinfo->mem->alloc_large)
-      ((j_common_ptr) cinfo, JPOOL_IMAGE,
-       HIST_C1_ELEMS*HIST_C2_ELEMS * SIZEOF(histcell));
-  }
-  cquantize->needs_zeroed = TRUE; /* histogram is garbage now */
-
-  /* Allocate storage for the completed colormap, if required.
-   * We do this now since it is FAR storage and may affect
-   * the memory manager's space calculations.
-   */
-  if (cinfo->enable_2pass_quant) {
-    /* Make sure color count is acceptable */
-    int desired = cinfo->desired_number_of_colors;
-    /* Lower bound on # of colors ... somewhat arbitrary as long as > 0 */
-    if (desired < 8)
-      ERREXIT1(cinfo, JERR_QUANT_FEW_COLORS, 8);
-    /* Make sure colormap indexes can be represented by JSAMPLEs */
-    if (desired > MAXNUMCOLORS)
-      ERREXIT1(cinfo, JERR_QUANT_MANY_COLORS, MAXNUMCOLORS);
-    cquantize->sv_colormap = (*cinfo->mem->alloc_sarray)
-      ((j_common_ptr) cinfo,JPOOL_IMAGE, (JDIMENSION) desired, (JDIMENSION) 3);
-    cquantize->desired = desired;
-  } else
-    cquantize->sv_colormap = NULL;
-
-  /* Only F-S dithering or no dithering is supported. */
-  /* If user asks for ordered dither, give him F-S. */
-  if (cinfo->dither_mode != JDITHER_NONE)
-    cinfo->dither_mode = JDITHER_FS;
-
-  /* Allocate Floyd-Steinberg workspace if necessary.
-   * This isn't really needed until pass 2, but again it is FAR storage.
-   * Although we will cope with a later change in dither_mode,
-   * we do not promise to honor max_memory_to_use if dither_mode changes.
-   */
-  if (cinfo->dither_mode == JDITHER_FS) {
-    cquantize->fserrors = (FSERRPTR) (*cinfo->mem->alloc_large)
-      ((j_common_ptr) cinfo, JPOOL_IMAGE,
-       (size_t) ((cinfo->output_width + 2) * (3 * SIZEOF(FSERROR))));
-    /* Might as well create the error-limiting table too. */
-    init_error_limit(cinfo);
-  }
-}
-
-#endif /* QUANT_2PASS_SUPPORTED */
diff -NEaurb neo/renderer/jpeg-6/jutils.c neo/renderer/jpeg-6/jutils.c
--- neo/renderer/jpeg-6/jutils.c	2011-12-26 04:15:38 +0000
+++ neo/renderer/jpeg-6/jutils.c	1970-01-01 00:00:00 +0000
@@ -1,175 +0,0 @@
-/*
- * jutils.c
- *
- * Copyright (C) 1991-1995, Thomas G. Lane.
- * This file is part of the Independent JPEG Group's software.
- * For conditions of distribution and use, see the accompanying README file.
- *
- * This file contains tables and miscellaneous utility routines needed
- * for both compression and decompression.
- * Note we prefix all global names with "j" to minimize conflicts with
- * a surrounding application.
- */
-
-#define JPEG_INTERNALS
-#include "jinclude.h"
-#include "jpeglib.h"
-
-
-/*
- * jpeg_zigzag_order[i] is the zigzag-order position of the i'th element
- * of a DCT block read in natural order (left to right, top to bottom).
- */
-
-const int jpeg_zigzag_order[DCTSIZE2] = {
-   0,  1,  5,  6, 14, 15, 27, 28,
-   2,  4,  7, 13, 16, 26, 29, 42,
-   3,  8, 12, 17, 25, 30, 41, 43,
-   9, 11, 18, 24, 31, 40, 44, 53,
-  10, 19, 23, 32, 39, 45, 52, 54,
-  20, 22, 33, 38, 46, 51, 55, 60,
-  21, 34, 37, 47, 50, 56, 59, 61,
-  35, 36, 48, 49, 57, 58, 62, 63
-};
-
-/*
- * jpeg_natural_order[i] is the natural-order position of the i'th element
- * of zigzag order.
- *
- * When reading corrupted data, the Huffman decoders could attempt
- * to reference an entry beyond the end of this array (if the decoded
- * zero run length reaches past the end of the block).  To prevent
- * wild stores without adding an inner-loop test, we put some extra
- * "63"s after the real entries.  This will cause the extra coefficient
- * to be stored in location 63 of the block, not somewhere random.
- * The worst case would be a run-length of 15, which means we need 16
- * fake entries.
- */
-
-const int jpeg_natural_order[DCTSIZE2+16] = {
-  0,  1,  8, 16,  9,  2,  3, 10,
- 17, 24, 32, 25, 18, 11,  4,  5,
- 12, 19, 26, 33, 40, 48, 41, 34,
- 27, 20, 13,  6,  7, 14, 21, 28,
- 35, 42, 49, 56, 57, 50, 43, 36,
- 29, 22, 15, 23, 30, 37, 44, 51,
- 58, 59, 52, 45, 38, 31, 39, 46,
- 53, 60, 61, 54, 47, 55, 62, 63,
- 63, 63, 63, 63, 63, 63, 63, 63, /* extra entries for safety in decoder */
- 63, 63, 63, 63, 63, 63, 63, 63
-};
-
-
-/*
- * Arithmetic utilities
- */
-
-GLOBAL long
-jdiv_round_up (long a, long b)
-/* Compute a/b rounded up to next integer, ie, ceil(a/b) */
-/* Assumes a >= 0, b > 0 */
-{
-  return (a + b - 1L) / b;
-}
-
-
-GLOBAL long
-jround_up (long a, long b)
-/* Compute a rounded up to next multiple of b, ie, ceil(a/b)*b */
-/* Assumes a >= 0, b > 0 */
-{
-  a += b - 1L;
-  return a - (a % b);
-}
-
-
-/* On normal machines we can apply MEMCOPY() and MEMZERO() to sample arrays
- * and coefficient-block arrays.  This won't work on 80x86 because the arrays
- * are FAR and we're assuming a small-pointer memory model.  However, some
- * DOS compilers provide far-pointer versions of memcpy() and memset() even
- * in the small-model libraries.  These will be used if USE_FMEM is defined.
- * Otherwise, the routines below do it the hard way.  (The performance cost
- * is not all that great, because these routines aren't very heavily used.)
- */
-
-#ifndef NEED_FAR_POINTERS	/* normal case, same as regular macros */
-#define FMEMCOPY(dest,src,size)	MEMCOPY(dest,src,size)
-#define FMEMZERO(target,size)	MEMZERO(target,size)
-#else				/* 80x86 case, define if we can */
-#ifdef USE_FMEM
-#define FMEMCOPY(dest,src,size)	_fmemcpy((void FAR *)(dest), (const void FAR *)(src), (size_t)(size))
-#define FMEMZERO(target,size)	_fmemset((void FAR *)(target), 0, (size_t)(size))
-#endif
-#endif
-
-
-GLOBAL void
-jcopy_sample_rows (JSAMPARRAY input_array, int source_row,
-		   JSAMPARRAY output_array, int dest_row,
-		   int num_rows, JDIMENSION num_cols)
-/* Copy some rows of samples from one place to another.
- * num_rows rows are copied from input_array[source_row++]
- * to output_array[dest_row++]; these areas may overlap for duplication.
- * The source and destination arrays must be at least as wide as num_cols.
- */
-{
-  register JSAMPROW inptr, outptr;
-#ifdef FMEMCOPY
-  register size_t count = (size_t) (num_cols * SIZEOF(JSAMPLE));
-#else
-  register JDIMENSION count;
-#endif
-  register int row;
-
-  input_array += source_row;
-  output_array += dest_row;
-
-  for (row = num_rows; row > 0; row--) {
-    inptr = *input_array++;
-    outptr = *output_array++;
-#ifdef FMEMCOPY
-    FMEMCOPY(outptr, inptr, count);
-#else
-    for (count = num_cols; count > 0; count--)
-      *outptr++ = *inptr++;	/* needn't bother with GETJSAMPLE() here */
-#endif
-  }
-}
-
-
-GLOBAL void
-jcopy_block_row (JBLOCKROW input_row, JBLOCKROW output_row,
-		 JDIMENSION num_blocks)
-/* Copy a row of coefficient blocks from one place to another. */
-{
-#ifdef FMEMCOPY
-  FMEMCOPY(output_row, input_row, num_blocks * (DCTSIZE2 * SIZEOF(JCOEF)));
-#else
-  register JCOEFPTR inptr, outptr;
-  register long count;
-
-  inptr = (JCOEFPTR) input_row;
-  outptr = (JCOEFPTR) output_row;
-  for (count = (long) num_blocks * DCTSIZE2; count > 0; count--) {
-    *outptr++ = *inptr++;
-  }
-#endif
-}
-
-
-GLOBAL void
-jzero_far (void FAR * target, size_t bytestozero)
-/* Zero out a chunk of FAR memory. */
-/* This might be sample-array data, block-array data, or alloc_large data. */
-{
-#ifdef FMEMZERO
-  FMEMZERO(target, bytestozero);
-#else
-  register char FAR * ptr = (char FAR *) target;
-  register size_t count;
-
-  for (count = bytestozero; count > 0; count--) {
-    *ptr++ = 0;
-  }
-#endif
-}
diff -NEaurb neo/renderer/jpeg-6/jversion.h neo/renderer/jpeg-6/jversion.h
--- neo/renderer/jpeg-6/jversion.h	2013-08-14 01:47:52 +0000
+++ neo/renderer/jpeg-6/jversion.h	1970-01-01 00:00:00 +0000
@@ -1,14 +0,0 @@
-/*
- * jversion.h
- *
- * Copyright (C) 1991-1995, Thomas G. Lane.
- * This file is part of the Independent JPEG Group's software.
- * For conditions of distribution and use, see the accompanying README file.
- *
- * This file contains software version identification.
- */
-
-
-#define JVERSION	"6  2-Aug-95"
-
-#define JCOPYRIGHT	"Copyright (C) 1995, Thomas G. Lane"
diff -NEaurb neo/renderer/jpeg-8c/README neo/renderer/jpeg-8c/README
--- neo/renderer/jpeg-8c/README	1970-01-01 00:00:00 +0000
+++ neo/renderer/jpeg-8c/README	2012-06-03 00:53:53 +0000
@@ -0,0 +1,326 @@
+The Independent JPEG Group's JPEG software
+==========================================
+
+README for release 8c of 16-Jan-2011
+====================================
+
+This distribution contains the eighth public release of the Independent JPEG
+Group's free JPEG software.  You are welcome to redistribute this software and
+to use it for any purpose, subject to the conditions under LEGAL ISSUES, below.
+
+This software is the work of Tom Lane, Guido Vollbeding, Philip Gladstone,
+Bill Allombert, Jim Boucher, Lee Crocker, Bob Friesenhahn, Ben Jackson,
+Julian Minguillon, Luis Ortiz, George Phillips, Davide Rossi, Ge' Weijers,
+and other members of the Independent JPEG Group.
+
+IJG is not affiliated with the official ISO JPEG standards committee.
+
+
+DOCUMENTATION ROADMAP
+=====================
+
+This file contains the following sections:
+
+OVERVIEW            General description of JPEG and the IJG software.
+LEGAL ISSUES        Copyright, lack of warranty, terms of distribution.
+REFERENCES          Where to learn more about JPEG.
+ARCHIVE LOCATIONS   Where to find newer versions of this software.
+ACKNOWLEDGMENTS     Special thanks.
+FILE FORMAT WARS    Software *not* to get.
+TO DO               Plans for future IJG releases.
+
+Other documentation files in the distribution are:
+
+User documentation:
+  install.txt       How to configure and install the IJG software.
+  usage.txt         Usage instructions for cjpeg, djpeg, jpegtran,
+                    rdjpgcom, and wrjpgcom.
+  *.1               Unix-style man pages for programs (same info as usage.txt).
+  wizard.txt        Advanced usage instructions for JPEG wizards only.
+  change.log        Version-to-version change highlights.
+Programmer and internal documentation:
+  libjpeg.txt       How to use the JPEG library in your own programs.
+  example.c         Sample code for calling the JPEG library.
+  structure.txt     Overview of the JPEG library's internal structure.
+  filelist.txt      Road map of IJG files.
+  coderules.txt     Coding style rules --- please read if you contribute code.
+
+Please read at least the files install.txt and usage.txt.  Some information
+can also be found in the JPEG FAQ (Frequently Asked Questions) article.  See
+ARCHIVE LOCATIONS below to find out where to obtain the FAQ article.
+
+If you want to understand how the JPEG code works, we suggest reading one or
+more of the REFERENCES, then looking at the documentation files (in roughly
+the order listed) before diving into the code.
+
+
+OVERVIEW
+========
+
+This package contains C software to implement JPEG image encoding, decoding,
+and transcoding.  JPEG (pronounced "jay-peg") is a standardized compression
+method for full-color and gray-scale images.
+
+This software implements JPEG baseline, extended-sequential, and progressive
+compression processes.  Provision is made for supporting all variants of these
+processes, although some uncommon parameter settings aren't implemented yet.
+We have made no provision for supporting the hierarchical or lossless
+processes defined in the standard.
+
+We provide a set of library routines for reading and writing JPEG image files,
+plus two sample applications "cjpeg" and "djpeg", which use the library to
+perform conversion between JPEG and some other popular image file formats.
+The library is intended to be reused in other applications.
+
+In order to support file conversion and viewing software, we have included
+considerable functionality beyond the bare JPEG coding/decoding capability;
+for example, the color quantization modules are not strictly part of JPEG
+decoding, but they are essential for output to colormapped file formats or
+colormapped displays.  These extra functions can be compiled out of the
+library if not required for a particular application.
+
+We have also included "jpegtran", a utility for lossless transcoding between
+different JPEG processes, and "rdjpgcom" and "wrjpgcom", two simple
+applications for inserting and extracting textual comments in JFIF files.
+
+The emphasis in designing this software has been on achieving portability and
+flexibility, while also making it fast enough to be useful.  In particular,
+the software is not intended to be read as a tutorial on JPEG.  (See the
+REFERENCES section for introductory material.)  Rather, it is intended to
+be reliable, portable, industrial-strength code.  We do not claim to have
+achieved that goal in every aspect of the software, but we strive for it.
+
+We welcome the use of this software as a component of commercial products.
+No royalty is required, but we do ask for an acknowledgement in product
+documentation, as described under LEGAL ISSUES.
+
+
+LEGAL ISSUES
+============
+
+In plain English:
+
+1. We don't promise that this software works.  (But if you find any bugs,
+   please let us know!)
+2. You can use this software for whatever you want.  You don't have to pay us.
+3. You may not pretend that you wrote this software.  If you use it in a
+   program, you must acknowledge somewhere in your documentation that
+   you've used the IJG code.
+
+In legalese:
+
+The authors make NO WARRANTY or representation, either express or implied,
+with respect to this software, its quality, accuracy, merchantability, or
+fitness for a particular purpose.  This software is provided "AS IS", and you,
+its user, assume the entire risk as to its quality and accuracy.
+
+This software is copyright (C) 1991-2011, Thomas G. Lane, Guido Vollbeding.
+All Rights Reserved except as specified below.
+
+Permission is hereby granted to use, copy, modify, and distribute this
+software (or portions thereof) for any purpose, without fee, subject to these
+conditions:
+(1) If any part of the source code for this software is distributed, then this
+README file must be included, with this copyright and no-warranty notice
+unaltered; and any additions, deletions, or changes to the original files
+must be clearly indicated in accompanying documentation.
+(2) If only executable code is distributed, then the accompanying
+documentation must state that "this software is based in part on the work of
+the Independent JPEG Group".
+(3) Permission for use of this software is granted only if the user accepts
+full responsibility for any undesirable consequences; the authors accept
+NO LIABILITY for damages of any kind.
+
+These conditions apply to any software derived from or based on the IJG code,
+not just to the unmodified library.  If you use our work, you ought to
+acknowledge us.
+
+Permission is NOT granted for the use of any IJG author's name or company name
+in advertising or publicity relating to this software or products derived from
+it.  This software may be referred to only as "the Independent JPEG Group's
+software".
+
+We specifically permit and encourage the use of this software as the basis of
+commercial products, provided that all warranty or liability claims are
+assumed by the product vendor.
+
+
+ansi2knr.c is included in this distribution by permission of L. Peter Deutsch,
+sole proprietor of its copyright holder, Aladdin Enterprises of Menlo Park, CA.
+ansi2knr.c is NOT covered by the above copyright and conditions, but instead
+by the usual distribution terms of the Free Software Foundation; principally,
+that you must include source code if you redistribute it.  (See the file
+ansi2knr.c for full details.)  However, since ansi2knr.c is not needed as part
+of any program generated from the IJG code, this does not limit you more than
+the foregoing paragraphs do.
+
+The Unix configuration script "configure" was produced with GNU Autoconf.
+It is copyright by the Free Software Foundation but is freely distributable.
+The same holds for its supporting scripts (config.guess, config.sub,
+ltmain.sh).  Another support script, install-sh, is copyright by X Consortium
+but is also freely distributable.
+
+The IJG distribution formerly included code to read and write GIF files.
+To avoid entanglement with the Unisys LZW patent, GIF reading support has
+been removed altogether, and the GIF writer has been simplified to produce
+"uncompressed GIFs".  This technique does not use the LZW algorithm; the
+resulting GIF files are larger than usual, but are readable by all standard
+GIF decoders.
+
+We are required to state that
+    "The Graphics Interchange Format(c) is the Copyright property of
+    CompuServe Incorporated.  GIF(sm) is a Service Mark property of
+    CompuServe Incorporated."
+
+
+REFERENCES
+==========
+
+We recommend reading one or more of these references before trying to
+understand the innards of the JPEG software.
+
+The best short technical introduction to the JPEG compression algorithm is
+	Wallace, Gregory K.  "The JPEG Still Picture Compression Standard",
+	Communications of the ACM, April 1991 (vol. 34 no. 4), pp. 30-44.
+(Adjacent articles in that issue discuss MPEG motion picture compression,
+applications of JPEG, and related topics.)  If you don't have the CACM issue
+handy, a PostScript file containing a revised version of Wallace's article is
+available at http://www.ijg.org/files/wallace.ps.gz.  The file (actually
+a preprint for an article that appeared in IEEE Trans. Consumer Electronics)
+omits the sample images that appeared in CACM, but it includes corrections
+and some added material.  Note: the Wallace article is copyright ACM and IEEE,
+and it may not be used for commercial purposes.
+
+A somewhat less technical, more leisurely introduction to JPEG can be found in
+"The Data Compression Book" by Mark Nelson and Jean-loup Gailly, published by
+M&T Books (New York), 2nd ed. 1996, ISBN 1-55851-434-1.  This book provides
+good explanations and example C code for a multitude of compression methods
+including JPEG.  It is an excellent source if you are comfortable reading C
+code but don't know much about data compression in general.  The book's JPEG
+sample code is far from industrial-strength, but when you are ready to look
+at a full implementation, you've got one here...
+
+The best currently available description of JPEG is the textbook "JPEG Still
+Image Data Compression Standard" by William B. Pennebaker and Joan L.
+Mitchell, published by Van Nostrand Reinhold, 1993, ISBN 0-442-01272-1.
+Price US$59.95, 638 pp.  The book includes the complete text of the ISO JPEG
+standards (DIS 10918-1 and draft DIS 10918-2).
+Although this is by far the most detailed and comprehensive exposition of
+JPEG publicly available, we point out that it is still missing an explanation
+of the most essential properties and algorithms of the underlying DCT
+technology.
+If you think that you know about DCT-based JPEG after reading this book,
+then you are in delusion.  The real fundamentals and corresponding potential
+of DCT-based JPEG are not publicly known so far, and that is the reason for
+all the mistaken developments taking place in the image coding domain.
+
+The original JPEG standard is divided into two parts, Part 1 being the actual
+specification, while Part 2 covers compliance testing methods.  Part 1 is
+titled "Digital Compression and Coding of Continuous-tone Still Images,
+Part 1: Requirements and guidelines" and has document numbers ISO/IEC IS
+10918-1, ITU-T T.81.  Part 2 is titled "Digital Compression and Coding of
+Continuous-tone Still Images, Part 2: Compliance testing" and has document
+numbers ISO/IEC IS 10918-2, ITU-T T.83.
+IJG JPEG 8 introduces an implementation of the JPEG SmartScale extension
+which is specified in a contributed document at ITU and ISO with title "ITU-T
+JPEG-Plus Proposal for Extending ITU-T T.81 for Advanced Image Coding", April
+2006, Geneva, Switzerland.  The latest version of the document is Revision 3.
+
+The JPEG standard does not specify all details of an interchangeable file
+format.  For the omitted details we follow the "JFIF" conventions, revision
+1.02.  JFIF 1.02 has been adopted as an Ecma International Technical Report
+and thus received a formal publication status.  It is available as a free
+download in PDF format from
+http://www.ecma-international.org/publications/techreports/E-TR-098.htm.
+A PostScript version of the JFIF document is available at
+http://www.ijg.org/files/jfif.ps.gz.  There is also a plain text version at
+http://www.ijg.org/files/jfif.txt.gz, but it is missing the figures.
+
+The TIFF 6.0 file format specification can be obtained by FTP from
+ftp://ftp.sgi.com/graphics/tiff/TIFF6.ps.gz.  The JPEG incorporation scheme
+found in the TIFF 6.0 spec of 3-June-92 has a number of serious problems.
+IJG does not recommend use of the TIFF 6.0 design (TIFF Compression tag 6).
+Instead, we recommend the JPEG design proposed by TIFF Technical Note #2
+(Compression tag 7).  Copies of this Note can be obtained from
+http://www.ijg.org/files/.  It is expected that the next revision
+of the TIFF spec will replace the 6.0 JPEG design with the Note's design.
+Although IJG's own code does not support TIFF/JPEG, the free libtiff library
+uses our library to implement TIFF/JPEG per the Note.
+
+
+ARCHIVE LOCATIONS
+=================
+
+The "official" archive site for this software is www.ijg.org.
+The most recent released version can always be found there in
+directory "files".  This particular version will be archived as
+http://www.ijg.org/files/jpegsrc.v8c.tar.gz, and in Windows-compatible
+"zip" archive format as http://www.ijg.org/files/jpegsr8c.zip.
+
+The JPEG FAQ (Frequently Asked Questions) article is a source of some
+general information about JPEG.
+It is available on the World Wide Web at http://www.faqs.org/faqs/jpeg-faq/
+and other news.answers archive sites, including the official news.answers
+archive at rtfm.mit.edu: ftp://rtfm.mit.edu/pub/usenet/news.answers/jpeg-faq/.
+If you don't have Web or FTP access, send e-mail to mail-server@rtfm.mit.edu
+with body
+	send usenet/news.answers/jpeg-faq/part1
+	send usenet/news.answers/jpeg-faq/part2
+
+
+ACKNOWLEDGMENTS
+===============
+
+Thank to Juergen Bruder for providing me with a copy of the common DCT
+algorithm article, only to find out that I had come to the same result
+in a more direct and comprehensible way with a more generative approach.
+
+Thank to Istvan Sebestyen and Joan L. Mitchell for inviting me to the
+ITU JPEG (Study Group 16) meeting in Geneva, Switzerland.
+
+Thank to Thomas Wiegand and Gary Sullivan for inviting me to the
+Joint Video Team (MPEG & ITU) meeting in Geneva, Switzerland.
+
+Thank to John Korejwa and Massimo Ballerini for inviting me to
+fruitful consultations in Boston, MA and Milan, Italy.
+
+Thank to Hendrik Elstner, Roland Fassauer, Simone Zuck, Guenther
+Maier-Gerber, Walter Stoeber, Fred Schmitz, and Norbert Braunagel
+for corresponding business development.
+
+Thank to Nico Zschach and Dirk Stelling of the technical support team
+at the Digital Images company in Halle for providing me with extra
+equipment for configuration tests.
+
+Thank to Richard F. Lyon (then of Foveon Inc.) for fruitful
+communication about JPEG configuration in Sigma Photo Pro software.
+
+Thank to Andrew Finkenstadt for hosting the ijg.org site.
+
+Last but not least special thank to Thomas G. Lane for the original
+design and development of this singular software package.
+
+
+FILE FORMAT WARS
+================
+
+The ISO JPEG standards committee actually promotes different formats like
+"JPEG 2000" or "JPEG XR" which are incompatible with original DCT-based
+JPEG and which are based on faulty technologies.  IJG therefore does not
+and will not support such momentary mistakes (see REFERENCES).
+We have little or no sympathy for the promotion of these formats.  Indeed,
+one of the original reasons for developing this free software was to help
+force convergence on common, interoperable format standards for JPEG files.
+Don't use an incompatible file format!
+(In any case, our decoder will remain capable of reading existing JPEG
+image files indefinitely.)
+
+
+TO DO
+=====
+
+Version 8 is the first release of a new generation JPEG standard
+to overcome the limitations of the original JPEG specification.
+More features are being prepared for coming releases...
+
+Please send bug reports, offers of help, etc. to jpeg-info@uc.ag.
diff -NEaurb neo/renderer/jpeg-8c/jaricom.c neo/renderer/jpeg-8c/jaricom.c
--- neo/renderer/jpeg-8c/jaricom.c	1970-01-01 00:00:00 +0000
+++ neo/renderer/jpeg-8c/jaricom.c	2012-11-17 01:20:40 +0000
@@ -0,0 +1,154 @@
+/*
+ * jaricom.c
+ *
+ * Developed 1997-2009 by Guido Vollbeding.
+ * This file is part of the Independent JPEG Group's software.
+ * For conditions of distribution and use, see the accompanying README file.
+ *
+ * This file contains probability estimation tables for common use in
+ * arithmetic entropy encoding and decoding routines.
+ *
+ * This data represents Table D.2 in the JPEG spec (ISO/IEC IS 10918-1
+ * and CCITT Recommendation ITU-T T.81) and Table 24 in the JBIG spec
+ * (ISO/IEC IS 11544 and CCITT Recommendation ITU-T T.82).
+ */
+
+#define JPEG_INTERNALS
+#include "jinclude.h"
+#include "jpeglib.h"
+
+/* The following #define specifies the packing of the four components
+ * into the compact INT32 representation.
+ * Note that this formula must match the actual arithmetic encoder
+ * and decoder implementation.  The implementation has to be changed
+ * if this formula is changed.
+ * The current organization is leaned on Markus Kuhn's JBIG
+ * implementation (jbig_tab.c).
+ */
+
+#define V(i,a,b,c,d) (((INT32)a << 16) | ((INT32)c << 8) | ((INT32)d << 7) | b)
+
+const INT32 jpeg_aritab[113+1] =
+{
+    /*
+     * Index, Qe_Value, Next_Index_LPS, Next_Index_MPS, Switch_MPS
+     */
+    V(   0, 0x5a1d,   1,   1, 1 ),
+    V(   1, 0x2586,  14,   2, 0 ),
+    V(   2, 0x1114,  16,   3, 0 ),
+    V(   3, 0x080b,  18,   4, 0 ),
+    V(   4, 0x03d8,  20,   5, 0 ),
+    V(   5, 0x01da,  23,   6, 0 ),
+    V(   6, 0x00e5,  25,   7, 0 ),
+    V(   7, 0x006f,  28,   8, 0 ),
+    V(   8, 0x0036,  30,   9, 0 ),
+    V(   9, 0x001a,  33,  10, 0 ),
+    V(  10, 0x000d,  35,  11, 0 ),
+    V(  11, 0x0006,   9,  12, 0 ),
+    V(  12, 0x0003,  10,  13, 0 ),
+    V(  13, 0x0001,  12,  13, 0 ),
+    V(  14, 0x5a7f,  15,  15, 1 ),
+    V(  15, 0x3f25,  36,  16, 0 ),
+    V(  16, 0x2cf2,  38,  17, 0 ),
+    V(  17, 0x207c,  39,  18, 0 ),
+    V(  18, 0x17b9,  40,  19, 0 ),
+    V(  19, 0x1182,  42,  20, 0 ),
+    V(  20, 0x0cef,  43,  21, 0 ),
+    V(  21, 0x09a1,  45,  22, 0 ),
+    V(  22, 0x072f,  46,  23, 0 ),
+    V(  23, 0x055c,  48,  24, 0 ),
+    V(  24, 0x0406,  49,  25, 0 ),
+    V(  25, 0x0303,  51,  26, 0 ),
+    V(  26, 0x0240,  52,  27, 0 ),
+    V(  27, 0x01b1,  54,  28, 0 ),
+    V(  28, 0x0144,  56,  29, 0 ),
+    V(  29, 0x00f5,  57,  30, 0 ),
+    V(  30, 0x00b7,  59,  31, 0 ),
+    V(  31, 0x008a,  60,  32, 0 ),
+    V(  32, 0x0068,  62,  33, 0 ),
+    V(  33, 0x004e,  63,  34, 0 ),
+    V(  34, 0x003b,  32,  35, 0 ),
+    V(  35, 0x002c,  33,   9, 0 ),
+    V(  36, 0x5ae1,  37,  37, 1 ),
+    V(  37, 0x484c,  64,  38, 0 ),
+    V(  38, 0x3a0d,  65,  39, 0 ),
+    V(  39, 0x2ef1,  67,  40, 0 ),
+    V(  40, 0x261f,  68,  41, 0 ),
+    V(  41, 0x1f33,  69,  42, 0 ),
+    V(  42, 0x19a8,  70,  43, 0 ),
+    V(  43, 0x1518,  72,  44, 0 ),
+    V(  44, 0x1177,  73,  45, 0 ),
+    V(  45, 0x0e74,  74,  46, 0 ),
+    V(  46, 0x0bfb,  75,  47, 0 ),
+    V(  47, 0x09f8,  77,  48, 0 ),
+    V(  48, 0x0861,  78,  49, 0 ),
+    V(  49, 0x0706,  79,  50, 0 ),
+    V(  50, 0x05cd,  48,  51, 0 ),
+    V(  51, 0x04de,  50,  52, 0 ),
+    V(  52, 0x040f,  50,  53, 0 ),
+    V(  53, 0x0363,  51,  54, 0 ),
+    V(  54, 0x02d4,  52,  55, 0 ),
+    V(  55, 0x025c,  53,  56, 0 ),
+    V(  56, 0x01f8,  54,  57, 0 ),
+    V(  57, 0x01a4,  55,  58, 0 ),
+    V(  58, 0x0160,  56,  59, 0 ),
+    V(  59, 0x0125,  57,  60, 0 ),
+    V(  60, 0x00f6,  58,  61, 0 ),
+    V(  61, 0x00cb,  59,  62, 0 ),
+    V(  62, 0x00ab,  61,  63, 0 ),
+    V(  63, 0x008f,  61,  32, 0 ),
+    V(  64, 0x5b12,  65,  65, 1 ),
+    V(  65, 0x4d04,  80,  66, 0 ),
+    V(  66, 0x412c,  81,  67, 0 ),
+    V(  67, 0x37d8,  82,  68, 0 ),
+    V(  68, 0x2fe8,  83,  69, 0 ),
+    V(  69, 0x293c,  84,  70, 0 ),
+    V(  70, 0x2379,  86,  71, 0 ),
+    V(  71, 0x1edf,  87,  72, 0 ),
+    V(  72, 0x1aa9,  87,  73, 0 ),
+    V(  73, 0x174e,  72,  74, 0 ),
+    V(  74, 0x1424,  72,  75, 0 ),
+    V(  75, 0x119c,  74,  76, 0 ),
+    V(  76, 0x0f6b,  74,  77, 0 ),
+    V(  77, 0x0d51,  75,  78, 0 ),
+    V(  78, 0x0bb6,  77,  79, 0 ),
+    V(  79, 0x0a40,  77,  48, 0 ),
+    V(  80, 0x5832,  80,  81, 1 ),
+    V(  81, 0x4d1c,  88,  82, 0 ),
+    V(  82, 0x438e,  89,  83, 0 ),
+    V(  83, 0x3bdd,  90,  84, 0 ),
+    V(  84, 0x34ee,  91,  85, 0 ),
+    V(  85, 0x2eae,  92,  86, 0 ),
+    V(  86, 0x299a,  93,  87, 0 ),
+    V(  87, 0x2516,  86,  71, 0 ),
+    V(  88, 0x5570,  88,  89, 1 ),
+    V(  89, 0x4ca9,  95,  90, 0 ),
+    V(  90, 0x44d9,  96,  91, 0 ),
+    V(  91, 0x3e22,  97,  92, 0 ),
+    V(  92, 0x3824,  99,  93, 0 ),
+    V(  93, 0x32b4,  99,  94, 0 ),
+    V(  94, 0x2e17,  93,  86, 0 ),
+    V(  95, 0x56a8,  95,  96, 1 ),
+    V(  96, 0x4f46, 101,  97, 0 ),
+    V(  97, 0x47e5, 102,  98, 0 ),
+    V(  98, 0x41cf, 103,  99, 0 ),
+    V(  99, 0x3c3d, 104, 100, 0 ),
+    V( 100, 0x375e,  99,  93, 0 ),
+    V( 101, 0x5231, 105, 102, 0 ),
+    V( 102, 0x4c0f, 106, 103, 0 ),
+    V( 103, 0x4639, 107, 104, 0 ),
+    V( 104, 0x415e, 103,  99, 0 ),
+    V( 105, 0x5627, 105, 106, 1 ),
+    V( 106, 0x50e7, 108, 107, 0 ),
+    V( 107, 0x4b85, 109, 103, 0 ),
+    V( 108, 0x5597, 110, 109, 0 ),
+    V( 109, 0x504f, 111, 107, 0 ),
+    V( 110, 0x5a10, 110, 111, 1 ),
+    V( 111, 0x5522, 112, 109, 0 ),
+    V( 112, 0x59eb, 112, 111, 1 ),
+    /*
+     * This last entry is used for fixed probability estimate of 0.5
+     * as recommended in Section 10.3 Table 5 of ITU-T Rec. T.851.
+     */
+    V( 113, 0x5a1d, 113, 113, 0 )
+};
diff -NEaurb neo/renderer/jpeg-8c/jcapimin.c neo/renderer/jpeg-8c/jcapimin.c
--- neo/renderer/jpeg-8c/jcapimin.c	1970-01-01 00:00:00 +0000
+++ neo/renderer/jpeg-8c/jcapimin.c	2012-11-17 01:20:41 +0000
@@ -0,0 +1,318 @@
+/*
+ * jcapimin.c
+ *
+ * Copyright (C) 1994-1998, Thomas G. Lane.
+ * Modified 2003-2010 by Guido Vollbeding.
+ * This file is part of the Independent JPEG Group's software.
+ * For conditions of distribution and use, see the accompanying README file.
+ *
+ * This file contains application interface code for the compression half
+ * of the JPEG library.  These are the "minimum" API routines that may be
+ * needed in either the normal full-compression case or the transcoding-only
+ * case.
+ *
+ * Most of the routines intended to be called directly by an application
+ * are in this file or in jcapistd.c.  But also see jcparam.c for
+ * parameter-setup helper routines, jcomapi.c for routines shared by
+ * compression and decompression, and jctrans.c for the transcoding case.
+ */
+
+#define JPEG_INTERNALS
+#include "jinclude.h"
+#include "jpeglib.h"
+
+
+/*
+ * Initialization of a JPEG compression object.
+ * The error manager must already be set up (in case memory manager fails).
+ */
+
+GLOBAL(void)
+jpeg_CreateCompress (j_compress_ptr cinfo, int version, size_t structsize)
+{
+    int i;
+
+    /* Guard against version mismatches between library and caller. */
+    cinfo->mem = NULL;		/* so jpeg_destroy knows mem mgr not called */
+    if (version != JPEG_LIB_VERSION)
+    {
+        ERREXIT2(cinfo, JERR_BAD_LIB_VERSION, JPEG_LIB_VERSION, version);
+    }
+    if (structsize != SIZEOF(struct jpeg_compress_struct))
+        ERREXIT2(cinfo, JERR_BAD_STRUCT_SIZE,
+                 (int) SIZEOF(struct jpeg_compress_struct), (int) structsize);
+
+    /* For debugging purposes, we zero the whole master structure.
+     * But the application has already set the err pointer, and may have set
+     * client_data, so we have to save and restore those fields.
+     * Note: if application hasn't set client_data, tools like Purify may
+     * complain here.
+     */
+    {
+        struct jpeg_error_mgr * err = cinfo->err;
+        void * client_data = cinfo->client_data; /* ignore Purify complaint here */
+        MEMZERO(cinfo, SIZEOF(struct jpeg_compress_struct));
+        cinfo->err = err;
+        cinfo->client_data = client_data;
+    }
+    cinfo->is_decompressor = FALSE;
+
+    /* Initialize a memory manager instance for this object */
+    jinit_memory_mgr((j_common_ptr) cinfo);
+
+    /* Zero out pointers to permanent structures. */
+    cinfo->progress = NULL;
+    cinfo->dest = NULL;
+
+    cinfo->comp_info = NULL;
+
+    for (i = 0; i < NUM_QUANT_TBLS; i++)
+    {
+        cinfo->quant_tbl_ptrs[i] = NULL;
+        cinfo->q_scale_factor[i] = 100;
+    }
+
+    for (i = 0; i < NUM_HUFF_TBLS; i++)
+    {
+        cinfo->dc_huff_tbl_ptrs[i] = NULL;
+        cinfo->ac_huff_tbl_ptrs[i] = NULL;
+    }
+
+    /* Must do it here for emit_dqt in case jpeg_write_tables is used */
+    cinfo->block_size = DCTSIZE;
+    cinfo->natural_order = jpeg_natural_order;
+    cinfo->lim_Se = DCTSIZE2-1;
+
+    cinfo->script_space = NULL;
+
+    cinfo->input_gamma = 1.0;	/* in case application forgets */
+
+    /* OK, I'm ready */
+    cinfo->global_state = CSTATE_START;
+}
+
+
+/*
+ * Destruction of a JPEG compression object
+ */
+
+GLOBAL(void)
+jpeg_destroy_compress (j_compress_ptr cinfo)
+{
+    jpeg_destroy((j_common_ptr) cinfo); /* use common routine */
+}
+
+
+/*
+ * Abort processing of a JPEG compression operation,
+ * but don't destroy the object itself.
+ */
+
+GLOBAL(void)
+jpeg_abort_compress (j_compress_ptr cinfo)
+{
+    jpeg_abort((j_common_ptr) cinfo); /* use common routine */
+}
+
+
+/*
+ * Forcibly suppress or un-suppress all quantization and Huffman tables.
+ * Marks all currently defined tables as already written (if suppress)
+ * or not written (if !suppress).  This will control whether they get emitted
+ * by a subsequent jpeg_start_compress call.
+ *
+ * This routine is exported for use by applications that want to produce
+ * abbreviated JPEG datastreams.  It logically belongs in jcparam.c, but
+ * since it is called by jpeg_start_compress, we put it here --- otherwise
+ * jcparam.o would be linked whether the application used it or not.
+ */
+
+GLOBAL(void)
+jpeg_suppress_tables (j_compress_ptr cinfo, boolean suppress)
+{
+    int i;
+    JQUANT_TBL * qtbl;
+    JHUFF_TBL * htbl;
+
+    for (i = 0; i < NUM_QUANT_TBLS; i++)
+    {
+        if ((qtbl = cinfo->quant_tbl_ptrs[i]) != NULL)
+        {
+            qtbl->sent_table = suppress;
+        }
+    }
+
+    for (i = 0; i < NUM_HUFF_TBLS; i++)
+    {
+        if ((htbl = cinfo->dc_huff_tbl_ptrs[i]) != NULL)
+        {
+            htbl->sent_table = suppress;
+        }
+        if ((htbl = cinfo->ac_huff_tbl_ptrs[i]) != NULL)
+        {
+            htbl->sent_table = suppress;
+        }
+    }
+}
+
+
+/*
+ * Finish JPEG compression.
+ *
+ * If a multipass operating mode was selected, this may do a great deal of
+ * work including most of the actual output.
+ */
+
+GLOBAL(void)
+jpeg_finish_compress (j_compress_ptr cinfo)
+{
+    JDIMENSION iMCU_row;
+
+    if (cinfo->global_state == CSTATE_SCANNING ||
+            cinfo->global_state == CSTATE_RAW_OK)
+    {
+        /* Terminate first pass */
+        if (cinfo->next_scanline < cinfo->image_height)
+        {
+            ERREXIT(cinfo, JERR_TOO_LITTLE_DATA);
+        }
+        (*cinfo->master->finish_pass) (cinfo);
+    }
+    else if (cinfo->global_state != CSTATE_WRCOEFS)
+    {
+        ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
+    }
+    /* Perform any remaining passes */
+    while (! cinfo->master->is_last_pass)
+    {
+        (*cinfo->master->prepare_for_pass) (cinfo);
+        for (iMCU_row = 0; iMCU_row < cinfo->total_iMCU_rows; iMCU_row++)
+        {
+            if (cinfo->progress != NULL)
+            {
+                cinfo->progress->pass_counter = (long) iMCU_row;
+                cinfo->progress->pass_limit = (long) cinfo->total_iMCU_rows;
+                (*cinfo->progress->progress_monitor) ((j_common_ptr) cinfo);
+            }
+            /* We bypass the main controller and invoke coef controller directly;
+             * all work is being done from the coefficient buffer.
+             */
+            if (! (*cinfo->coef->compress_data) (cinfo, (JSAMPIMAGE) NULL))
+            {
+                ERREXIT(cinfo, JERR_CANT_SUSPEND);
+            }
+        }
+        (*cinfo->master->finish_pass) (cinfo);
+    }
+    /* Write EOI, do final cleanup */
+    (*cinfo->marker->write_file_trailer) (cinfo);
+    (*cinfo->dest->term_destination) (cinfo);
+    /* We can use jpeg_abort to release memory and reset global_state */
+    jpeg_abort((j_common_ptr) cinfo);
+}
+
+
+/*
+ * Write a special marker.
+ * This is only recommended for writing COM or APPn markers.
+ * Must be called after jpeg_start_compress() and before
+ * first call to jpeg_write_scanlines() or jpeg_write_raw_data().
+ */
+
+GLOBAL(void)
+jpeg_write_marker (j_compress_ptr cinfo, int marker,
+                   const JOCTET *dataptr, unsigned int datalen)
+{
+    JMETHOD(void, write_marker_byte, (j_compress_ptr info, int val));
+
+    if (cinfo->next_scanline != 0 ||
+            (cinfo->global_state != CSTATE_SCANNING &&
+             cinfo->global_state != CSTATE_RAW_OK &&
+             cinfo->global_state != CSTATE_WRCOEFS))
+    {
+        ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
+    }
+
+    (*cinfo->marker->write_marker_header) (cinfo, marker, datalen);
+    write_marker_byte = cinfo->marker->write_marker_byte;	/* copy for speed */
+    while (datalen--)
+    {
+        (*write_marker_byte) (cinfo, *dataptr);
+        dataptr++;
+    }
+}
+
+/* Same, but piecemeal. */
+
+GLOBAL(void)
+jpeg_write_m_header (j_compress_ptr cinfo, int marker, unsigned int datalen)
+{
+    if (cinfo->next_scanline != 0 ||
+            (cinfo->global_state != CSTATE_SCANNING &&
+             cinfo->global_state != CSTATE_RAW_OK &&
+             cinfo->global_state != CSTATE_WRCOEFS))
+    {
+        ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
+    }
+
+    (*cinfo->marker->write_marker_header) (cinfo, marker, datalen);
+}
+
+GLOBAL(void)
+jpeg_write_m_byte (j_compress_ptr cinfo, int val)
+{
+    (*cinfo->marker->write_marker_byte) (cinfo, val);
+}
+
+
+/*
+ * Alternate compression function: just write an abbreviated table file.
+ * Before calling this, all parameters and a data destination must be set up.
+ *
+ * To produce a pair of files containing abbreviated tables and abbreviated
+ * image data, one would proceed as follows:
+ *
+ *		initialize JPEG object
+ *		set JPEG parameters
+ *		set destination to table file
+ *		jpeg_write_tables(cinfo);
+ *		set destination to image file
+ *		jpeg_start_compress(cinfo, FALSE);
+ *		write data...
+ *		jpeg_finish_compress(cinfo);
+ *
+ * jpeg_write_tables has the side effect of marking all tables written
+ * (same as jpeg_suppress_tables(..., TRUE)).  Thus a subsequent start_compress
+ * will not re-emit the tables unless it is passed write_all_tables=TRUE.
+ */
+
+GLOBAL(void)
+jpeg_write_tables (j_compress_ptr cinfo)
+{
+    if (cinfo->global_state != CSTATE_START)
+    {
+        ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
+    }
+
+    /* (Re)initialize error mgr and destination modules */
+    (*cinfo->err->reset_error_mgr) ((j_common_ptr) cinfo);
+    (*cinfo->dest->init_destination) (cinfo);
+    /* Initialize the marker writer ... bit of a crock to do it here. */
+    jinit_marker_writer(cinfo);
+    /* Write them tables! */
+    (*cinfo->marker->write_tables_only) (cinfo);
+    /* And clean up. */
+    (*cinfo->dest->term_destination) (cinfo);
+    /*
+     * In library releases up through v6a, we called jpeg_abort() here to free
+     * any working memory allocated by the destination manager and marker
+     * writer.  Some applications had a problem with that: they allocated space
+     * of their own from the library memory manager, and didn't want it to go
+     * away during write_tables.  So now we do nothing.  This will cause a
+     * memory leak if an app calls write_tables repeatedly without doing a full
+     * compression cycle or otherwise resetting the JPEG object.  However, that
+     * seems less bad than unexpectedly freeing memory in the normal case.
+     * An app that prefers the old behavior can call jpeg_abort for itself after
+     * each call to jpeg_write_tables().
+     */
+}
diff -NEaurb neo/renderer/jpeg-8c/jcapistd.c neo/renderer/jpeg-8c/jcapistd.c
--- neo/renderer/jpeg-8c/jcapistd.c	1970-01-01 00:00:00 +0000
+++ neo/renderer/jpeg-8c/jcapistd.c	2012-11-17 01:20:40 +0000
@@ -0,0 +1,183 @@
+/*
+ * jcapistd.c
+ *
+ * Copyright (C) 1994-1996, Thomas G. Lane.
+ * This file is part of the Independent JPEG Group's software.
+ * For conditions of distribution and use, see the accompanying README file.
+ *
+ * This file contains application interface code for the compression half
+ * of the JPEG library.  These are the "standard" API routines that are
+ * used in the normal full-compression case.  They are not used by a
+ * transcoding-only application.  Note that if an application links in
+ * jpeg_start_compress, it will end up linking in the entire compressor.
+ * We thus must separate this file from jcapimin.c to avoid linking the
+ * whole compression library into a transcoder.
+ */
+
+#define JPEG_INTERNALS
+#include "jinclude.h"
+#include "jpeglib.h"
+
+
+/*
+ * Compression initialization.
+ * Before calling this, all parameters and a data destination must be set up.
+ *
+ * We require a write_all_tables parameter as a failsafe check when writing
+ * multiple datastreams from the same compression object.  Since prior runs
+ * will have left all the tables marked sent_table=TRUE, a subsequent run
+ * would emit an abbreviated stream (no tables) by default.  This may be what
+ * is wanted, but for safety's sake it should not be the default behavior:
+ * programmers should have to make a deliberate choice to emit abbreviated
+ * images.  Therefore the documentation and examples should encourage people
+ * to pass write_all_tables=TRUE; then it will take active thought to do the
+ * wrong thing.
+ */
+
+GLOBAL(void)
+jpeg_start_compress (j_compress_ptr cinfo, boolean write_all_tables)
+{
+    if (cinfo->global_state != CSTATE_START)
+    {
+        ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
+    }
+
+    if (write_all_tables)
+    {
+        jpeg_suppress_tables(cinfo, FALSE);    /* mark all tables to be written */
+    }
+
+    /* (Re)initialize error mgr and destination modules */
+    (*cinfo->err->reset_error_mgr) ((j_common_ptr) cinfo);
+    (*cinfo->dest->init_destination) (cinfo);
+    /* Perform master selection of active modules */
+    jinit_compress_master(cinfo);
+    /* Set up for the first pass */
+    (*cinfo->master->prepare_for_pass) (cinfo);
+    /* Ready for application to drive first pass through jpeg_write_scanlines
+     * or jpeg_write_raw_data.
+     */
+    cinfo->next_scanline = 0;
+    cinfo->global_state = (cinfo->raw_data_in ? CSTATE_RAW_OK : CSTATE_SCANNING);
+}
+
+
+/*
+ * Write some scanlines of data to the JPEG compressor.
+ *
+ * The return value will be the number of lines actually written.
+ * This should be less than the supplied num_lines only in case that
+ * the data destination module has requested suspension of the compressor,
+ * or if more than image_height scanlines are passed in.
+ *
+ * Note: we warn about excess calls to jpeg_write_scanlines() since
+ * this likely signals an application programmer error.  However,
+ * excess scanlines passed in the last valid call are *silently* ignored,
+ * so that the application need not adjust num_lines for end-of-image
+ * when using a multiple-scanline buffer.
+ */
+
+GLOBAL(JDIMENSION)
+jpeg_write_scanlines (j_compress_ptr cinfo, JSAMPARRAY scanlines,
+                      JDIMENSION num_lines)
+{
+    JDIMENSION row_ctr, rows_left;
+
+    if (cinfo->global_state != CSTATE_SCANNING)
+    {
+        ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
+    }
+    if (cinfo->next_scanline >= cinfo->image_height)
+    {
+        WARNMS(cinfo, JWRN_TOO_MUCH_DATA);
+    }
+
+    /* Call progress monitor hook if present */
+    if (cinfo->progress != NULL)
+    {
+        cinfo->progress->pass_counter = (long) cinfo->next_scanline;
+        cinfo->progress->pass_limit = (long) cinfo->image_height;
+        (*cinfo->progress->progress_monitor) ((j_common_ptr) cinfo);
+    }
+
+    /* Give master control module another chance if this is first call to
+     * jpeg_write_scanlines.  This lets output of the frame/scan headers be
+     * delayed so that application can write COM, etc, markers between
+     * jpeg_start_compress and jpeg_write_scanlines.
+     */
+    if (cinfo->master->call_pass_startup)
+    {
+        (*cinfo->master->pass_startup) (cinfo);
+    }
+
+    /* Ignore any extra scanlines at bottom of image. */
+    rows_left = cinfo->image_height - cinfo->next_scanline;
+    if (num_lines > rows_left)
+    {
+        num_lines = rows_left;
+    }
+
+    row_ctr = 0;
+    (*cinfo->main->process_data) (cinfo, scanlines, &row_ctr, num_lines);
+    cinfo->next_scanline += row_ctr;
+    return row_ctr;
+}
+
+
+/*
+ * Alternate entry point to write raw data.
+ * Processes exactly one iMCU row per call, unless suspended.
+ */
+
+GLOBAL(JDIMENSION)
+jpeg_write_raw_data (j_compress_ptr cinfo, JSAMPIMAGE data,
+                     JDIMENSION num_lines)
+{
+    JDIMENSION lines_per_iMCU_row;
+
+    if (cinfo->global_state != CSTATE_RAW_OK)
+    {
+        ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
+    }
+    if (cinfo->next_scanline >= cinfo->image_height)
+    {
+        WARNMS(cinfo, JWRN_TOO_MUCH_DATA);
+        return 0;
+    }
+
+    /* Call progress monitor hook if present */
+    if (cinfo->progress != NULL)
+    {
+        cinfo->progress->pass_counter = (long) cinfo->next_scanline;
+        cinfo->progress->pass_limit = (long) cinfo->image_height;
+        (*cinfo->progress->progress_monitor) ((j_common_ptr) cinfo);
+    }
+
+    /* Give master control module another chance if this is first call to
+     * jpeg_write_raw_data.  This lets output of the frame/scan headers be
+     * delayed so that application can write COM, etc, markers between
+     * jpeg_start_compress and jpeg_write_raw_data.
+     */
+    if (cinfo->master->call_pass_startup)
+    {
+        (*cinfo->master->pass_startup) (cinfo);
+    }
+
+    /* Verify that at least one iMCU row has been passed. */
+    lines_per_iMCU_row = cinfo->max_v_samp_factor * DCTSIZE;
+    if (num_lines < lines_per_iMCU_row)
+    {
+        ERREXIT(cinfo, JERR_BUFFER_SIZE);
+    }
+
+    /* Directly compress the row. */
+    if (! (*cinfo->coef->compress_data) (cinfo, data))
+    {
+        /* If compressor did not consume the whole row, suspend processing. */
+        return 0;
+    }
+
+    /* OK, we processed one iMCU row. */
+    cinfo->next_scanline += lines_per_iMCU_row;
+    return lines_per_iMCU_row;
+}
diff -NEaurb neo/renderer/jpeg-8c/jcarith.c neo/renderer/jpeg-8c/jcarith.c
--- neo/renderer/jpeg-8c/jcarith.c	1970-01-01 00:00:00 +0000
+++ neo/renderer/jpeg-8c/jcarith.c	2012-11-17 01:20:40 +0000
@@ -0,0 +1,1153 @@
+/*
+ * jcarith.c
+ *
+ * Developed 1997-2009 by Guido Vollbeding.
+ * This file is part of the Independent JPEG Group's software.
+ * For conditions of distribution and use, see the accompanying README file.
+ *
+ * This file contains portable arithmetic entropy encoding routines for JPEG
+ * (implementing the ISO/IEC IS 10918-1 and CCITT Recommendation ITU-T T.81).
+ *
+ * Both sequential and progressive modes are supported in this single module.
+ *
+ * Suspension is not currently supported in this module.
+ */
+
+#define JPEG_INTERNALS
+#include "jinclude.h"
+#include "jpeglib.h"
+
+
+/* Expanded entropy encoder object for arithmetic encoding. */
+
+typedef struct
+{
+    struct jpeg_entropy_encoder pub; /* public fields */
+
+    INT32 c; /* C register, base of coding interval, layout as in sec. D.1.3 */
+    INT32 a;               /* A register, normalized size of coding interval */
+    INT32 sc;        /* counter for stacked 0xFF values which might overflow */
+    INT32 zc;          /* counter for pending 0x00 output values which might *
+                          * be discarded at the end ("Pacman" termination) */
+    int ct;  /* bit shift counter, determines when next byte will be written */
+    int buffer;                /* buffer for most recent output byte != 0xFF */
+
+    int last_dc_val[MAX_COMPS_IN_SCAN]; /* last DC coef for each component */
+    int dc_context[MAX_COMPS_IN_SCAN]; /* context index for DC conditioning */
+
+    unsigned int restarts_to_go;	/* MCUs left in this restart interval */
+    int next_restart_num;		/* next restart number to write (0-7) */
+
+    /* Pointers to statistics areas (these workspaces have image lifespan) */
+    unsigned char * dc_stats[NUM_ARITH_TBLS];
+    unsigned char * ac_stats[NUM_ARITH_TBLS];
+
+    /* Statistics bin for coding with fixed probability 0.5 */
+    unsigned char fixed_bin[4];
+} arith_entropy_encoder;
+
+typedef arith_entropy_encoder * arith_entropy_ptr;
+
+/* The following two definitions specify the allocation chunk size
+ * for the statistics area.
+ * According to sections F.1.4.4.1.3 and F.1.4.4.2, we need at least
+ * 49 statistics bins for DC, and 245 statistics bins for AC coding.
+ *
+ * We use a compact representation with 1 byte per statistics bin,
+ * thus the numbers directly represent byte sizes.
+ * This 1 byte per statistics bin contains the meaning of the MPS
+ * (more probable symbol) in the highest bit (mask 0x80), and the
+ * index into the probability estimation state machine table
+ * in the lower bits (mask 0x7F).
+ */
+
+#define DC_STAT_BINS 64
+#define AC_STAT_BINS 256
+
+/* NOTE: Uncomment the following #define if you want to use the
+ * given formula for calculating the AC conditioning parameter Kx
+ * for spectral selection progressive coding in section G.1.3.2
+ * of the spec (Kx = Kmin + SRL (8 + Se - Kmin) 4).
+ * Although the spec and P&M authors claim that this "has proven
+ * to give good results for 8 bit precision samples", I'm not
+ * convinced yet that this is really beneficial.
+ * Early tests gave only very marginal compression enhancements
+ * (a few - around 5 or so - bytes even for very large files),
+ * which would turn out rather negative if we'd suppress the
+ * DAC (Define Arithmetic Conditioning) marker segments for
+ * the default parameters in the future.
+ * Note that currently the marker writing module emits 12-byte
+ * DAC segments for a full-component scan in a color image.
+ * This is not worth worrying about IMHO. However, since the
+ * spec defines the default values to be used if the tables
+ * are omitted (unlike Huffman tables, which are required
+ * anyway), one might optimize this behaviour in the future,
+ * and then it would be disadvantageous to use custom tables if
+ * they don't provide sufficient gain to exceed the DAC size.
+ *
+ * On the other hand, I'd consider it as a reasonable result
+ * that the conditioning has no significant influence on the
+ * compression performance. This means that the basic
+ * statistical model is already rather stable.
+ *
+ * Thus, at the moment, we use the default conditioning values
+ * anyway, and do not use the custom formula.
+ *
+#define CALCULATE_SPECTRAL_CONDITIONING
+ */
+
+/* IRIGHT_SHIFT is like RIGHT_SHIFT, but works on int rather than INT32.
+ * We assume that int right shift is unsigned if INT32 right shift is,
+ * which should be safe.
+ */
+
+#ifdef RIGHT_SHIFT_IS_UNSIGNED
+#define ISHIFT_TEMPS	int ishift_temp;
+#define IRIGHT_SHIFT(x,shft)  \
+	((ishift_temp = (x)) < 0 ? \
+	 (ishift_temp >> (shft)) | ((~0) << (16-(shft))) : \
+	 (ishift_temp >> (shft)))
+#else
+#define ISHIFT_TEMPS
+#define IRIGHT_SHIFT(x,shft)	((x) >> (shft))
+#endif
+
+
+LOCAL(void)
+emit_byte (int val, j_compress_ptr cinfo)
+/* Write next output byte; we do not support suspension in this module. */
+{
+    struct jpeg_destination_mgr * dest = cinfo->dest;
+
+    *dest->next_output_byte++ = (JOCTET) val;
+    if (--dest->free_in_buffer == 0)
+        if (! (*dest->empty_output_buffer) (cinfo))
+        {
+            ERREXIT(cinfo, JERR_CANT_SUSPEND);
+        }
+}
+
+
+/*
+ * Finish up at the end of an arithmetic-compressed scan.
+ */
+
+METHODDEF(void)
+finish_pass (j_compress_ptr cinfo)
+{
+    arith_entropy_ptr e = (arith_entropy_ptr) cinfo->entropy;
+    INT32 temp;
+
+    /* Section D.1.8: Termination of encoding */
+
+    /* Find the e->c in the coding interval with the largest
+     * number of trailing zero bits */
+    if ((temp = (e->a - 1 + e->c) & 0xFFFF0000L) < e->c)
+    {
+        e->c = temp + 0x8000L;
+    }
+    else
+    {
+        e->c = temp;
+    }
+    /* Send remaining bytes to output */
+    e->c <<= e->ct;
+    if (e->c & 0xF8000000L)
+    {
+        /* One final overflow has to be handled */
+        if (e->buffer >= 0)
+        {
+            if (e->zc)
+                do
+                {
+                    emit_byte(0x00, cinfo);
+                }
+                while (--e->zc);
+            emit_byte(e->buffer + 1, cinfo);
+            if (e->buffer + 1 == 0xFF)
+            {
+                emit_byte(0x00, cinfo);
+            }
+        }
+        e->zc += e->sc;  /* carry-over converts stacked 0xFF bytes to 0x00 */
+        e->sc = 0;
+    }
+    else
+    {
+        if (e->buffer == 0)
+        {
+            ++e->zc;
+        }
+        else if (e->buffer >= 0)
+        {
+            if (e->zc)
+                do
+                {
+                    emit_byte(0x00, cinfo);
+                }
+                while (--e->zc);
+            emit_byte(e->buffer, cinfo);
+        }
+        if (e->sc)
+        {
+            if (e->zc)
+                do
+                {
+                    emit_byte(0x00, cinfo);
+                }
+                while (--e->zc);
+            do
+            {
+                emit_byte(0xFF, cinfo);
+                emit_byte(0x00, cinfo);
+            }
+            while (--e->sc);
+        }
+    }
+    /* Output final bytes only if they are not 0x00 */
+    if (e->c & 0x7FFF800L)
+    {
+        if (e->zc)  /* output final pending zero bytes */
+            do
+            {
+                emit_byte(0x00, cinfo);
+            }
+            while (--e->zc);
+        emit_byte((e->c >> 19) & 0xFF, cinfo);
+        if (((e->c >> 19) & 0xFF) == 0xFF)
+        {
+            emit_byte(0x00, cinfo);
+        }
+        if (e->c & 0x7F800L)
+        {
+            emit_byte((e->c >> 11) & 0xFF, cinfo);
+            if (((e->c >> 11) & 0xFF) == 0xFF)
+            {
+                emit_byte(0x00, cinfo);
+            }
+        }
+    }
+}
+
+
+/*
+ * The core arithmetic encoding routine (common in JPEG and JBIG).
+ * This needs to go as fast as possible.
+ * Machine-dependent optimization facilities
+ * are not utilized in this portable implementation.
+ * However, this code should be fairly efficient and
+ * may be a good base for further optimizations anyway.
+ *
+ * Parameter 'val' to be encoded may be 0 or 1 (binary decision).
+ *
+ * Note: I've added full "Pacman" termination support to the
+ * byte output routines, which is equivalent to the optional
+ * Discard_final_zeros procedure (Figure D.15) in the spec.
+ * Thus, we always produce the shortest possible output
+ * stream compliant to the spec (no trailing zero bytes,
+ * except for FF stuffing).
+ *
+ * I've also introduced a new scheme for accessing
+ * the probability estimation state machine table,
+ * derived from Markus Kuhn's JBIG implementation.
+ */
+
+LOCAL(void)
+arith_encode (j_compress_ptr cinfo, unsigned char *st, int val)
+{
+    register arith_entropy_ptr e = (arith_entropy_ptr) cinfo->entropy;
+    register unsigned char nl, nm;
+    register INT32 qe, temp;
+    register int sv;
+
+    /* Fetch values from our compact representation of Table D.2:
+     * Qe values and probability estimation state machine
+     */
+    sv = *st;
+    qe = jpeg_aritab[sv & 0x7F];	/* => Qe_Value */
+    nl = qe & 0xFF;
+    qe >>= 8;	/* Next_Index_LPS + Switch_MPS */
+    nm = qe & 0xFF;
+    qe >>= 8;	/* Next_Index_MPS */
+
+    /* Encode & estimation procedures per sections D.1.4 & D.1.5 */
+    e->a -= qe;
+    if (val != (sv >> 7))
+    {
+        /* Encode the less probable symbol */
+        if (e->a >= qe)
+        {
+            /* If the interval size (qe) for the less probable symbol (LPS)
+             * is larger than the interval size for the MPS, then exchange
+             * the two symbols for coding efficiency, otherwise code the LPS
+             * as usual: */
+            e->c += e->a;
+            e->a = qe;
+        }
+        *st = (sv & 0x80) ^ nl;	/* Estimate_after_LPS */
+    }
+    else
+    {
+        /* Encode the more probable symbol */
+        if (e->a >= 0x8000L)
+        {
+            return;    /* A >= 0x8000 -> ready, no renormalization required */
+        }
+        if (e->a < qe)
+        {
+            /* If the interval size (qe) for the less probable symbol (LPS)
+             * is larger than the interval size for the MPS, then exchange
+             * the two symbols for coding efficiency: */
+            e->c += e->a;
+            e->a = qe;
+        }
+        *st = (sv & 0x80) ^ nm;	/* Estimate_after_MPS */
+    }
+
+    /* Renormalization & data output per section D.1.6 */
+    do
+    {
+        e->a <<= 1;
+        e->c <<= 1;
+        if (--e->ct == 0)
+        {
+            /* Another byte is ready for output */
+            temp = e->c >> 19;
+            if (temp > 0xFF)
+            {
+                /* Handle overflow over all stacked 0xFF bytes */
+                if (e->buffer >= 0)
+                {
+                    if (e->zc)
+                        do
+                        {
+                            emit_byte(0x00, cinfo);
+                        }
+                        while (--e->zc);
+                    emit_byte(e->buffer + 1, cinfo);
+                    if (e->buffer + 1 == 0xFF)
+                    {
+                        emit_byte(0x00, cinfo);
+                    }
+                }
+                e->zc += e->sc;  /* carry-over converts stacked 0xFF bytes to 0x00 */
+                e->sc = 0;
+                /* Note: The 3 spacer bits in the C register guarantee
+                 * that the new buffer byte can't be 0xFF here
+                 * (see page 160 in the P&M JPEG book). */
+                e->buffer = temp & 0xFF;  /* new output byte, might overflow later */
+            }
+            else if (temp == 0xFF)
+            {
+                ++e->sc;  /* stack 0xFF byte (which might overflow later) */
+            }
+            else
+            {
+                /* Output all stacked 0xFF bytes, they will not overflow any more */
+                if (e->buffer == 0)
+                {
+                    ++e->zc;
+                }
+                else if (e->buffer >= 0)
+                {
+                    if (e->zc)
+                        do
+                        {
+                            emit_byte(0x00, cinfo);
+                        }
+                        while (--e->zc);
+                    emit_byte(e->buffer, cinfo);
+                }
+                if (e->sc)
+                {
+                    if (e->zc)
+                        do
+                        {
+                            emit_byte(0x00, cinfo);
+                        }
+                        while (--e->zc);
+                    do
+                    {
+                        emit_byte(0xFF, cinfo);
+                        emit_byte(0x00, cinfo);
+                    }
+                    while (--e->sc);
+                }
+                e->buffer = temp & 0xFF;  /* new output byte (can still overflow) */
+            }
+            e->c &= 0x7FFFFL;
+            e->ct += 8;
+        }
+    }
+    while (e->a < 0x8000L);
+}
+
+
+/*
+ * Emit a restart marker & resynchronize predictions.
+ */
+
+LOCAL(void)
+emit_restart (j_compress_ptr cinfo, int restart_num)
+{
+    arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
+    int ci;
+    jpeg_component_info * compptr;
+
+    finish_pass(cinfo);
+
+    emit_byte(0xFF, cinfo);
+    emit_byte(JPEG_RST0 + restart_num, cinfo);
+
+    /* Re-initialize statistics areas */
+    for (ci = 0; ci < cinfo->comps_in_scan; ci++)
+    {
+        compptr = cinfo->cur_comp_info[ci];
+        /* DC needs no table for refinement scan */
+        if (cinfo->Ss == 0 && cinfo->Ah == 0)
+        {
+            MEMZERO(entropy->dc_stats[compptr->dc_tbl_no], DC_STAT_BINS);
+            /* Reset DC predictions to 0 */
+            entropy->last_dc_val[ci] = 0;
+            entropy->dc_context[ci] = 0;
+        }
+        /* AC needs no table when not present */
+        if (cinfo->Se)
+        {
+            MEMZERO(entropy->ac_stats[compptr->ac_tbl_no], AC_STAT_BINS);
+        }
+    }
+
+    /* Reset arithmetic encoding variables */
+    entropy->c = 0;
+    entropy->a = 0x10000L;
+    entropy->sc = 0;
+    entropy->zc = 0;
+    entropy->ct = 11;
+    entropy->buffer = -1;  /* empty */
+}
+
+
+/*
+ * MCU encoding for DC initial scan (either spectral selection,
+ * or first pass of successive approximation).
+ */
+
+METHODDEF(boolean)
+encode_mcu_DC_first (j_compress_ptr cinfo, JBLOCKROW *MCU_data)
+{
+    arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
+    JBLOCKROW block;
+    unsigned char *st;
+    int blkn, ci, tbl;
+    int v, v2, m;
+    ISHIFT_TEMPS
+
+    /* Emit restart marker if needed */
+    if (cinfo->restart_interval)
+    {
+        if (entropy->restarts_to_go == 0)
+        {
+            emit_restart(cinfo, entropy->next_restart_num);
+            entropy->restarts_to_go = cinfo->restart_interval;
+            entropy->next_restart_num++;
+            entropy->next_restart_num &= 7;
+        }
+        entropy->restarts_to_go--;
+    }
+
+    /* Encode the MCU data blocks */
+    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++)
+    {
+        block = MCU_data[blkn];
+        ci = cinfo->MCU_membership[blkn];
+        tbl = cinfo->cur_comp_info[ci]->dc_tbl_no;
+
+        /* Compute the DC value after the required point transform by Al.
+         * This is simply an arithmetic right shift.
+         */
+        m = IRIGHT_SHIFT((int) ((*block)[0]), cinfo->Al);
+
+        /* Sections F.1.4.1 & F.1.4.4.1: Encoding of DC coefficients */
+
+        /* Table F.4: Point to statistics bin S0 for DC coefficient coding */
+        st = entropy->dc_stats[tbl] + entropy->dc_context[ci];
+
+        /* Figure F.4: Encode_DC_DIFF */
+        if ((v = m - entropy->last_dc_val[ci]) == 0)
+        {
+            arith_encode(cinfo, st, 0);
+            entropy->dc_context[ci] = 0;	/* zero diff category */
+        }
+        else
+        {
+            entropy->last_dc_val[ci] = m;
+            arith_encode(cinfo, st, 1);
+            /* Figure F.6: Encoding nonzero value v */
+            /* Figure F.7: Encoding the sign of v */
+            if (v > 0)
+            {
+                arith_encode(cinfo, st + 1, 0);	/* Table F.4: SS = S0 + 1 */
+                st += 2;			/* Table F.4: SP = S0 + 2 */
+                entropy->dc_context[ci] = 4;	/* small positive diff category */
+            }
+            else
+            {
+                v = -v;
+                arith_encode(cinfo, st + 1, 1);	/* Table F.4: SS = S0 + 1 */
+                st += 3;			/* Table F.4: SN = S0 + 3 */
+                entropy->dc_context[ci] = 8;	/* small negative diff category */
+            }
+            /* Figure F.8: Encoding the magnitude category of v */
+            m = 0;
+            if (v -= 1)
+            {
+                arith_encode(cinfo, st, 1);
+                m = 1;
+                v2 = v;
+                st = entropy->dc_stats[tbl] + 20; /* Table F.4: X1 = 20 */
+                while (v2 >>= 1)
+                {
+                    arith_encode(cinfo, st, 1);
+                    m <<= 1;
+                    st += 1;
+                }
+            }
+            arith_encode(cinfo, st, 0);
+            /* Section F.1.4.4.1.2: Establish dc_context conditioning category */
+            if (m < (int) ((1L << cinfo->arith_dc_L[tbl]) >> 1))
+            {
+                entropy->dc_context[ci] = 0;    /* zero diff category */
+            }
+            else if (m > (int) ((1L << cinfo->arith_dc_U[tbl]) >> 1))
+            {
+                entropy->dc_context[ci] += 8;    /* large diff category */
+            }
+            /* Figure F.9: Encoding the magnitude bit pattern of v */
+            st += 14;
+            while (m >>= 1)
+            {
+                arith_encode(cinfo, st, (m & v) ? 1 : 0);
+            }
+        }
+    }
+
+    return TRUE;
+}
+
+
+/*
+ * MCU encoding for AC initial scan (either spectral selection,
+ * or first pass of successive approximation).
+ */
+
+METHODDEF(boolean)
+encode_mcu_AC_first (j_compress_ptr cinfo, JBLOCKROW *MCU_data)
+{
+    arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
+    JBLOCKROW block;
+    unsigned char *st;
+    int tbl, k, ke;
+    int v, v2, m;
+    const int * natural_order;
+
+    /* Emit restart marker if needed */
+    if (cinfo->restart_interval)
+    {
+        if (entropy->restarts_to_go == 0)
+        {
+            emit_restart(cinfo, entropy->next_restart_num);
+            entropy->restarts_to_go = cinfo->restart_interval;
+            entropy->next_restart_num++;
+            entropy->next_restart_num &= 7;
+        }
+        entropy->restarts_to_go--;
+    }
+
+    natural_order = cinfo->natural_order;
+
+    /* Encode the MCU data block */
+    block = MCU_data[0];
+    tbl = cinfo->cur_comp_info[0]->ac_tbl_no;
+
+    /* Sections F.1.4.2 & F.1.4.4.2: Encoding of AC coefficients */
+
+    /* Establish EOB (end-of-block) index */
+    for (ke = cinfo->Se; ke > 0; ke--)
+        /* We must apply the point transform by Al.  For AC coefficients this
+         * is an integer division with rounding towards 0.  To do this portably
+         * in C, we shift after obtaining the absolute value.
+         */
+        if ((v = (*block)[natural_order[ke]]) >= 0)
+        {
+            if (v >>= cinfo->Al)
+            {
+                break;
+            }
+        }
+        else
+        {
+            v = -v;
+            if (v >>= cinfo->Al)
+            {
+                break;
+            }
+        }
+
+    /* Figure F.5: Encode_AC_Coefficients */
+    for (k = cinfo->Ss; k <= ke; k++)
+    {
+        st = entropy->ac_stats[tbl] + 3 * (k - 1);
+        arith_encode(cinfo, st, 0);		/* EOB decision */
+        for (;;)
+        {
+            if ((v = (*block)[natural_order[k]]) >= 0)
+            {
+                if (v >>= cinfo->Al)
+                {
+                    arith_encode(cinfo, st + 1, 1);
+                    arith_encode(cinfo, entropy->fixed_bin, 0);
+                    break;
+                }
+            }
+            else
+            {
+                v = -v;
+                if (v >>= cinfo->Al)
+                {
+                    arith_encode(cinfo, st + 1, 1);
+                    arith_encode(cinfo, entropy->fixed_bin, 1);
+                    break;
+                }
+            }
+            arith_encode(cinfo, st + 1, 0);
+            st += 3;
+            k++;
+        }
+        st += 2;
+        /* Figure F.8: Encoding the magnitude category of v */
+        m = 0;
+        if (v -= 1)
+        {
+            arith_encode(cinfo, st, 1);
+            m = 1;
+            v2 = v;
+            if (v2 >>= 1)
+            {
+                arith_encode(cinfo, st, 1);
+                m <<= 1;
+                st = entropy->ac_stats[tbl] +
+                     (k <= cinfo->arith_ac_K[tbl] ? 189 : 217);
+                while (v2 >>= 1)
+                {
+                    arith_encode(cinfo, st, 1);
+                    m <<= 1;
+                    st += 1;
+                }
+            }
+        }
+        arith_encode(cinfo, st, 0);
+        /* Figure F.9: Encoding the magnitude bit pattern of v */
+        st += 14;
+        while (m >>= 1)
+        {
+            arith_encode(cinfo, st, (m & v) ? 1 : 0);
+        }
+    }
+    /* Encode EOB decision only if k <= cinfo->Se */
+    if (k <= cinfo->Se)
+    {
+        st = entropy->ac_stats[tbl] + 3 * (k - 1);
+        arith_encode(cinfo, st, 1);
+    }
+
+    return TRUE;
+}
+
+
+/*
+ * MCU encoding for DC successive approximation refinement scan.
+ */
+
+METHODDEF(boolean)
+encode_mcu_DC_refine (j_compress_ptr cinfo, JBLOCKROW *MCU_data)
+{
+    arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
+    unsigned char *st;
+    int Al, blkn;
+
+    /* Emit restart marker if needed */
+    if (cinfo->restart_interval)
+    {
+        if (entropy->restarts_to_go == 0)
+        {
+            emit_restart(cinfo, entropy->next_restart_num);
+            entropy->restarts_to_go = cinfo->restart_interval;
+            entropy->next_restart_num++;
+            entropy->next_restart_num &= 7;
+        }
+        entropy->restarts_to_go--;
+    }
+
+    st = entropy->fixed_bin;	/* use fixed probability estimation */
+    Al = cinfo->Al;
+
+    /* Encode the MCU data blocks */
+    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++)
+    {
+        /* We simply emit the Al'th bit of the DC coefficient value. */
+        arith_encode(cinfo, st, (MCU_data[blkn][0][0] >> Al) & 1);
+    }
+
+    return TRUE;
+}
+
+
+/*
+ * MCU encoding for AC successive approximation refinement scan.
+ */
+
+METHODDEF(boolean)
+encode_mcu_AC_refine (j_compress_ptr cinfo, JBLOCKROW *MCU_data)
+{
+    arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
+    JBLOCKROW block;
+    unsigned char *st;
+    int tbl, k, ke, kex;
+    int v;
+    const int * natural_order;
+
+    /* Emit restart marker if needed */
+    if (cinfo->restart_interval)
+    {
+        if (entropy->restarts_to_go == 0)
+        {
+            emit_restart(cinfo, entropy->next_restart_num);
+            entropy->restarts_to_go = cinfo->restart_interval;
+            entropy->next_restart_num++;
+            entropy->next_restart_num &= 7;
+        }
+        entropy->restarts_to_go--;
+    }
+
+    natural_order = cinfo->natural_order;
+
+    /* Encode the MCU data block */
+    block = MCU_data[0];
+    tbl = cinfo->cur_comp_info[0]->ac_tbl_no;
+
+    /* Section G.1.3.3: Encoding of AC coefficients */
+
+    /* Establish EOB (end-of-block) index */
+    for (ke = cinfo->Se; ke > 0; ke--)
+        /* We must apply the point transform by Al.  For AC coefficients this
+         * is an integer division with rounding towards 0.  To do this portably
+         * in C, we shift after obtaining the absolute value.
+         */
+        if ((v = (*block)[natural_order[ke]]) >= 0)
+        {
+            if (v >>= cinfo->Al)
+            {
+                break;
+            }
+        }
+        else
+        {
+            v = -v;
+            if (v >>= cinfo->Al)
+            {
+                break;
+            }
+        }
+
+    /* Establish EOBx (previous stage end-of-block) index */
+    for (kex = ke; kex > 0; kex--)
+        if ((v = (*block)[natural_order[kex]]) >= 0)
+        {
+            if (v >>= cinfo->Ah)
+            {
+                break;
+            }
+        }
+        else
+        {
+            v = -v;
+            if (v >>= cinfo->Ah)
+            {
+                break;
+            }
+        }
+
+    /* Figure G.10: Encode_AC_Coefficients_SA */
+    for (k = cinfo->Ss; k <= ke; k++)
+    {
+        st = entropy->ac_stats[tbl] + 3 * (k - 1);
+        if (k > kex)
+        {
+            arith_encode(cinfo, st, 0);    /* EOB decision */
+        }
+        for (;;)
+        {
+            if ((v = (*block)[natural_order[k]]) >= 0)
+            {
+                if (v >>= cinfo->Al)
+                {
+                    if (v >> 1)			/* previously nonzero coef */
+                    {
+                        arith_encode(cinfo, st + 2, (v & 1));
+                    }
+                    else  			/* newly nonzero coef */
+                    {
+                        arith_encode(cinfo, st + 1, 1);
+                        arith_encode(cinfo, entropy->fixed_bin, 0);
+                    }
+                    break;
+                }
+            }
+            else
+            {
+                v = -v;
+                if (v >>= cinfo->Al)
+                {
+                    if (v >> 1)			/* previously nonzero coef */
+                    {
+                        arith_encode(cinfo, st + 2, (v & 1));
+                    }
+                    else  			/* newly nonzero coef */
+                    {
+                        arith_encode(cinfo, st + 1, 1);
+                        arith_encode(cinfo, entropy->fixed_bin, 1);
+                    }
+                    break;
+                }
+            }
+            arith_encode(cinfo, st + 1, 0);
+            st += 3;
+            k++;
+        }
+    }
+    /* Encode EOB decision only if k <= cinfo->Se */
+    if (k <= cinfo->Se)
+    {
+        st = entropy->ac_stats[tbl] + 3 * (k - 1);
+        arith_encode(cinfo, st, 1);
+    }
+
+    return TRUE;
+}
+
+
+/*
+ * Encode and output one MCU's worth of arithmetic-compressed coefficients.
+ */
+
+METHODDEF(boolean)
+encode_mcu (j_compress_ptr cinfo, JBLOCKROW *MCU_data)
+{
+    arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
+    jpeg_component_info * compptr;
+    JBLOCKROW block;
+    unsigned char *st;
+    int blkn, ci, tbl, k, ke;
+    int v, v2, m;
+    const int * natural_order;
+
+    /* Emit restart marker if needed */
+    if (cinfo->restart_interval)
+    {
+        if (entropy->restarts_to_go == 0)
+        {
+            emit_restart(cinfo, entropy->next_restart_num);
+            entropy->restarts_to_go = cinfo->restart_interval;
+            entropy->next_restart_num++;
+            entropy->next_restart_num &= 7;
+        }
+        entropy->restarts_to_go--;
+    }
+
+    natural_order = cinfo->natural_order;
+
+    /* Encode the MCU data blocks */
+    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++)
+    {
+        block = MCU_data[blkn];
+        ci = cinfo->MCU_membership[blkn];
+        compptr = cinfo->cur_comp_info[ci];
+
+        /* Sections F.1.4.1 & F.1.4.4.1: Encoding of DC coefficients */
+
+        tbl = compptr->dc_tbl_no;
+
+        /* Table F.4: Point to statistics bin S0 for DC coefficient coding */
+        st = entropy->dc_stats[tbl] + entropy->dc_context[ci];
+
+        /* Figure F.4: Encode_DC_DIFF */
+        if ((v = (*block)[0] - entropy->last_dc_val[ci]) == 0)
+        {
+            arith_encode(cinfo, st, 0);
+            entropy->dc_context[ci] = 0;	/* zero diff category */
+        }
+        else
+        {
+            entropy->last_dc_val[ci] = (*block)[0];
+            arith_encode(cinfo, st, 1);
+            /* Figure F.6: Encoding nonzero value v */
+            /* Figure F.7: Encoding the sign of v */
+            if (v > 0)
+            {
+                arith_encode(cinfo, st + 1, 0);	/* Table F.4: SS = S0 + 1 */
+                st += 2;			/* Table F.4: SP = S0 + 2 */
+                entropy->dc_context[ci] = 4;	/* small positive diff category */
+            }
+            else
+            {
+                v = -v;
+                arith_encode(cinfo, st + 1, 1);	/* Table F.4: SS = S0 + 1 */
+                st += 3;			/* Table F.4: SN = S0 + 3 */
+                entropy->dc_context[ci] = 8;	/* small negative diff category */
+            }
+            /* Figure F.8: Encoding the magnitude category of v */
+            m = 0;
+            if (v -= 1)
+            {
+                arith_encode(cinfo, st, 1);
+                m = 1;
+                v2 = v;
+                st = entropy->dc_stats[tbl] + 20; /* Table F.4: X1 = 20 */
+                while (v2 >>= 1)
+                {
+                    arith_encode(cinfo, st, 1);
+                    m <<= 1;
+                    st += 1;
+                }
+            }
+            arith_encode(cinfo, st, 0);
+            /* Section F.1.4.4.1.2: Establish dc_context conditioning category */
+            if (m < (int) ((1L << cinfo->arith_dc_L[tbl]) >> 1))
+            {
+                entropy->dc_context[ci] = 0;    /* zero diff category */
+            }
+            else if (m > (int) ((1L << cinfo->arith_dc_U[tbl]) >> 1))
+            {
+                entropy->dc_context[ci] += 8;    /* large diff category */
+            }
+            /* Figure F.9: Encoding the magnitude bit pattern of v */
+            st += 14;
+            while (m >>= 1)
+            {
+                arith_encode(cinfo, st, (m & v) ? 1 : 0);
+            }
+        }
+
+        /* Sections F.1.4.2 & F.1.4.4.2: Encoding of AC coefficients */
+
+        tbl = compptr->ac_tbl_no;
+
+        /* Establish EOB (end-of-block) index */
+        for (ke = cinfo->lim_Se; ke > 0; ke--)
+            if ((*block)[natural_order[ke]])
+            {
+                break;
+            }
+
+        /* Figure F.5: Encode_AC_Coefficients */
+        for (k = 1; k <= ke; k++)
+        {
+            st = entropy->ac_stats[tbl] + 3 * (k - 1);
+            arith_encode(cinfo, st, 0);	/* EOB decision */
+            while ((v = (*block)[natural_order[k]]) == 0)
+            {
+                arith_encode(cinfo, st + 1, 0);
+                st += 3;
+                k++;
+            }
+            arith_encode(cinfo, st + 1, 1);
+            /* Figure F.6: Encoding nonzero value v */
+            /* Figure F.7: Encoding the sign of v */
+            if (v > 0)
+            {
+                arith_encode(cinfo, entropy->fixed_bin, 0);
+            }
+            else
+            {
+                v = -v;
+                arith_encode(cinfo, entropy->fixed_bin, 1);
+            }
+            st += 2;
+            /* Figure F.8: Encoding the magnitude category of v */
+            m = 0;
+            if (v -= 1)
+            {
+                arith_encode(cinfo, st, 1);
+                m = 1;
+                v2 = v;
+                if (v2 >>= 1)
+                {
+                    arith_encode(cinfo, st, 1);
+                    m <<= 1;
+                    st = entropy->ac_stats[tbl] +
+                         (k <= cinfo->arith_ac_K[tbl] ? 189 : 217);
+                    while (v2 >>= 1)
+                    {
+                        arith_encode(cinfo, st, 1);
+                        m <<= 1;
+                        st += 1;
+                    }
+                }
+            }
+            arith_encode(cinfo, st, 0);
+            /* Figure F.9: Encoding the magnitude bit pattern of v */
+            st += 14;
+            while (m >>= 1)
+            {
+                arith_encode(cinfo, st, (m & v) ? 1 : 0);
+            }
+        }
+        /* Encode EOB decision only if k <= cinfo->lim_Se */
+        if (k <= cinfo->lim_Se)
+        {
+            st = entropy->ac_stats[tbl] + 3 * (k - 1);
+            arith_encode(cinfo, st, 1);
+        }
+    }
+
+    return TRUE;
+}
+
+
+/*
+ * Initialize for an arithmetic-compressed scan.
+ */
+
+METHODDEF(void)
+start_pass (j_compress_ptr cinfo, boolean gather_statistics)
+{
+    arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
+    int ci, tbl;
+    jpeg_component_info * compptr;
+
+    if (gather_statistics)
+        /* Make sure to avoid that in the master control logic!
+         * We are fully adaptive here and need no extra
+         * statistics gathering pass!
+         */
+    {
+        ERREXIT(cinfo, JERR_NOT_COMPILED);
+    }
+
+    /* We assume jcmaster.c already validated the progressive scan parameters. */
+
+    /* Select execution routines */
+    if (cinfo->progressive_mode)
+    {
+        if (cinfo->Ah == 0)
+        {
+            if (cinfo->Ss == 0)
+            {
+                entropy->pub.encode_mcu = encode_mcu_DC_first;
+            }
+            else
+            {
+                entropy->pub.encode_mcu = encode_mcu_AC_first;
+            }
+        }
+        else
+        {
+            if (cinfo->Ss == 0)
+            {
+                entropy->pub.encode_mcu = encode_mcu_DC_refine;
+            }
+            else
+            {
+                entropy->pub.encode_mcu = encode_mcu_AC_refine;
+            }
+        }
+    }
+    else
+    {
+        entropy->pub.encode_mcu = encode_mcu;
+    }
+
+    /* Allocate & initialize requested statistics areas */
+    for (ci = 0; ci < cinfo->comps_in_scan; ci++)
+    {
+        compptr = cinfo->cur_comp_info[ci];
+        /* DC needs no table for refinement scan */
+        if (cinfo->Ss == 0 && cinfo->Ah == 0)
+        {
+            tbl = compptr->dc_tbl_no;
+            if (tbl < 0 || tbl >= NUM_ARITH_TBLS)
+            {
+                ERREXIT1(cinfo, JERR_NO_ARITH_TABLE, tbl);
+            }
+            if (entropy->dc_stats[tbl] == NULL)
+                entropy->dc_stats[tbl] = (unsigned char *) (*cinfo->mem->alloc_small)
+                                         ((j_common_ptr) cinfo, JPOOL_IMAGE, DC_STAT_BINS);
+            MEMZERO(entropy->dc_stats[tbl], DC_STAT_BINS);
+            /* Initialize DC predictions to 0 */
+            entropy->last_dc_val[ci] = 0;
+            entropy->dc_context[ci] = 0;
+        }
+        /* AC needs no table when not present */
+        if (cinfo->Se)
+        {
+            tbl = compptr->ac_tbl_no;
+            if (tbl < 0 || tbl >= NUM_ARITH_TBLS)
+            {
+                ERREXIT1(cinfo, JERR_NO_ARITH_TABLE, tbl);
+            }
+            if (entropy->ac_stats[tbl] == NULL)
+                entropy->ac_stats[tbl] = (unsigned char *) (*cinfo->mem->alloc_small)
+                                         ((j_common_ptr) cinfo, JPOOL_IMAGE, AC_STAT_BINS);
+            MEMZERO(entropy->ac_stats[tbl], AC_STAT_BINS);
+#ifdef CALCULATE_SPECTRAL_CONDITIONING
+            if (cinfo->progressive_mode)
+                /* Section G.1.3.2: Set appropriate arithmetic conditioning value Kx */
+            {
+                cinfo->arith_ac_K[tbl] = cinfo->Ss + ((8 + cinfo->Se - cinfo->Ss) >> 4);
+            }
+#endif
+        }
+    }
+
+    /* Initialize arithmetic encoding variables */
+    entropy->c = 0;
+    entropy->a = 0x10000L;
+    entropy->sc = 0;
+    entropy->zc = 0;
+    entropy->ct = 11;
+    entropy->buffer = -1;  /* empty */
+
+    /* Initialize restart stuff */
+    entropy->restarts_to_go = cinfo->restart_interval;
+    entropy->next_restart_num = 0;
+}
+
+
+/*
+ * Module initialization routine for arithmetic entropy encoding.
+ */
+
+GLOBAL(void)
+jinit_arith_encoder (j_compress_ptr cinfo)
+{
+    arith_entropy_ptr entropy;
+    int i;
+
+    entropy = (arith_entropy_ptr)
+              (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
+                                          SIZEOF(arith_entropy_encoder));
+    cinfo->entropy = (struct jpeg_entropy_encoder *) entropy;
+    entropy->pub.start_pass = start_pass;
+    entropy->pub.finish_pass = finish_pass;
+
+    /* Mark tables unallocated */
+    for (i = 0; i < NUM_ARITH_TBLS; i++)
+    {
+        entropy->dc_stats[i] = NULL;
+        entropy->ac_stats[i] = NULL;
+    }
+
+    /* Initialize index for fixed probability estimation */
+    entropy->fixed_bin[0] = 113;
+}
diff -NEaurb neo/renderer/jpeg-8c/jccoefct.c neo/renderer/jpeg-8c/jccoefct.c
--- neo/renderer/jpeg-8c/jccoefct.c	1970-01-01 00:00:00 +0000
+++ neo/renderer/jpeg-8c/jccoefct.c	2012-11-17 01:20:40 +0000
@@ -0,0 +1,507 @@
+/*
+ * jccoefct.c
+ *
+ * Copyright (C) 1994-1997, Thomas G. Lane.
+ * This file is part of the Independent JPEG Group's software.
+ * For conditions of distribution and use, see the accompanying README file.
+ *
+ * This file contains the coefficient buffer controller for compression.
+ * This controller is the top level of the JPEG compressor proper.
+ * The coefficient buffer lies between forward-DCT and entropy encoding steps.
+ */
+
+#define JPEG_INTERNALS
+#include "jinclude.h"
+#include "jpeglib.h"
+
+
+/* We use a full-image coefficient buffer when doing Huffman optimization,
+ * and also for writing multiple-scan JPEG files.  In all cases, the DCT
+ * step is run during the first pass, and subsequent passes need only read
+ * the buffered coefficients.
+ */
+#ifdef ENTROPY_OPT_SUPPORTED
+#define FULL_COEF_BUFFER_SUPPORTED
+#else
+#ifdef C_MULTISCAN_FILES_SUPPORTED
+#define FULL_COEF_BUFFER_SUPPORTED
+#endif
+#endif
+
+
+/* Private buffer controller object */
+
+typedef struct
+{
+    struct jpeg_c_coef_controller pub; /* public fields */
+
+    JDIMENSION iMCU_row_num;	/* iMCU row # within image */
+    JDIMENSION mcu_ctr;		/* counts MCUs processed in current row */
+    int MCU_vert_offset;		/* counts MCU rows within iMCU row */
+    int MCU_rows_per_iMCU_row;	/* number of such rows needed */
+
+    /* For single-pass compression, it's sufficient to buffer just one MCU
+     * (although this may prove a bit slow in practice).  We allocate a
+     * workspace of C_MAX_BLOCKS_IN_MCU coefficient blocks, and reuse it for each
+     * MCU constructed and sent.  (On 80x86, the workspace is FAR even though
+     * it's not really very big; this is to keep the module interfaces unchanged
+     * when a large coefficient buffer is necessary.)
+     * In multi-pass modes, this array points to the current MCU's blocks
+     * within the virtual arrays.
+     */
+    JBLOCKROW MCU_buffer[C_MAX_BLOCKS_IN_MCU];
+
+    /* In multi-pass modes, we need a virtual block array for each component. */
+    jvirt_barray_ptr whole_image[MAX_COMPONENTS];
+} my_coef_controller;
+
+typedef my_coef_controller * my_coef_ptr;
+
+
+/* Forward declarations */
+METHODDEF(boolean) compress_data
+JPP((j_compress_ptr cinfo, JSAMPIMAGE input_buf));
+#ifdef FULL_COEF_BUFFER_SUPPORTED
+METHODDEF(boolean) compress_first_pass
+JPP((j_compress_ptr cinfo, JSAMPIMAGE input_buf));
+METHODDEF(boolean) compress_output
+JPP((j_compress_ptr cinfo, JSAMPIMAGE input_buf));
+#endif
+
+
+LOCAL(void)
+start_iMCU_row (j_compress_ptr cinfo)
+/* Reset within-iMCU-row counters for a new row */
+{
+    my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
+
+    /* In an interleaved scan, an MCU row is the same as an iMCU row.
+     * In a noninterleaved scan, an iMCU row has v_samp_factor MCU rows.
+     * But at the bottom of the image, process only what's left.
+     */
+    if (cinfo->comps_in_scan > 1)
+    {
+        coef->MCU_rows_per_iMCU_row = 1;
+    }
+    else
+    {
+        if (coef->iMCU_row_num < (cinfo->total_iMCU_rows-1))
+        {
+            coef->MCU_rows_per_iMCU_row = cinfo->cur_comp_info[0]->v_samp_factor;
+        }
+        else
+        {
+            coef->MCU_rows_per_iMCU_row = cinfo->cur_comp_info[0]->last_row_height;
+        }
+    }
+
+    coef->mcu_ctr = 0;
+    coef->MCU_vert_offset = 0;
+}
+
+
+/*
+ * Initialize for a processing pass.
+ */
+
+METHODDEF(void)
+start_pass_coef (j_compress_ptr cinfo, J_BUF_MODE pass_mode)
+{
+    my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
+
+    coef->iMCU_row_num = 0;
+    start_iMCU_row(cinfo);
+
+    switch (pass_mode)
+    {
+    case JBUF_PASS_THRU:
+        if (coef->whole_image[0] != NULL)
+        {
+            ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
+        }
+        coef->pub.compress_data = compress_data;
+        break;
+#ifdef FULL_COEF_BUFFER_SUPPORTED
+    case JBUF_SAVE_AND_PASS:
+        if (coef->whole_image[0] == NULL)
+        {
+            ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
+        }
+        coef->pub.compress_data = compress_first_pass;
+        break;
+    case JBUF_CRANK_DEST:
+        if (coef->whole_image[0] == NULL)
+        {
+            ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
+        }
+        coef->pub.compress_data = compress_output;
+        break;
+#endif
+    default:
+        ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
+        break;
+    }
+}
+
+
+/*
+ * Process some data in the single-pass case.
+ * We process the equivalent of one fully interleaved MCU row ("iMCU" row)
+ * per call, ie, v_samp_factor block rows for each component in the image.
+ * Returns TRUE if the iMCU row is completed, FALSE if suspended.
+ *
+ * NB: input_buf contains a plane for each component in image,
+ * which we index according to the component's SOF position.
+ */
+
+METHODDEF(boolean)
+compress_data (j_compress_ptr cinfo, JSAMPIMAGE input_buf)
+{
+    my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
+    JDIMENSION MCU_col_num;	/* index of current MCU within row */
+    JDIMENSION last_MCU_col = cinfo->MCUs_per_row - 1;
+    JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
+    int blkn, bi, ci, yindex, yoffset, blockcnt;
+    JDIMENSION ypos, xpos;
+    jpeg_component_info *compptr;
+    forward_DCT_ptr forward_DCT;
+
+    /* Loop to write as much as one whole iMCU row */
+    for (yoffset = coef->MCU_vert_offset; yoffset < coef->MCU_rows_per_iMCU_row;
+            yoffset++)
+    {
+        for (MCU_col_num = coef->mcu_ctr; MCU_col_num <= last_MCU_col;
+                MCU_col_num++)
+        {
+            /* Determine where data comes from in input_buf and do the DCT thing.
+             * Each call on forward_DCT processes a horizontal row of DCT blocks
+             * as wide as an MCU; we rely on having allocated the MCU_buffer[] blocks
+             * sequentially.  Dummy blocks at the right or bottom edge are filled in
+             * specially.  The data in them does not matter for image reconstruction,
+             * so we fill them with values that will encode to the smallest amount of
+             * data, viz: all zeroes in the AC entries, DC entries equal to previous
+             * block's DC value.  (Thanks to Thomas Kinsman for this idea.)
+             */
+            blkn = 0;
+            for (ci = 0; ci < cinfo->comps_in_scan; ci++)
+            {
+                compptr = cinfo->cur_comp_info[ci];
+                forward_DCT = cinfo->fdct->forward_DCT[compptr->component_index];
+                blockcnt = (MCU_col_num < last_MCU_col) ? compptr->MCU_width
+                           : compptr->last_col_width;
+                xpos = MCU_col_num * compptr->MCU_sample_width;
+                ypos = yoffset * compptr->DCT_v_scaled_size;
+                /* ypos == (yoffset+yindex) * DCTSIZE */
+                for (yindex = 0; yindex < compptr->MCU_height; yindex++)
+                {
+                    if (coef->iMCU_row_num < last_iMCU_row ||
+                            yoffset+yindex < compptr->last_row_height)
+                    {
+                        (*forward_DCT) (cinfo, compptr,
+                                        input_buf[compptr->component_index],
+                                        coef->MCU_buffer[blkn],
+                                        ypos, xpos, (JDIMENSION) blockcnt);
+                        if (blockcnt < compptr->MCU_width)
+                        {
+                            /* Create some dummy blocks at the right edge of the image. */
+                            jzero_far((void FAR *) coef->MCU_buffer[blkn + blockcnt],
+                                      (compptr->MCU_width - blockcnt) * SIZEOF(JBLOCK));
+                            for (bi = blockcnt; bi < compptr->MCU_width; bi++)
+                            {
+                                coef->MCU_buffer[blkn+bi][0][0] = coef->MCU_buffer[blkn+bi-1][0][0];
+                            }
+                        }
+                    }
+                    else
+                    {
+                        /* Create a row of dummy blocks at the bottom of the image. */
+                        jzero_far((void FAR *) coef->MCU_buffer[blkn],
+                                  compptr->MCU_width * SIZEOF(JBLOCK));
+                        for (bi = 0; bi < compptr->MCU_width; bi++)
+                        {
+                            coef->MCU_buffer[blkn+bi][0][0] = coef->MCU_buffer[blkn-1][0][0];
+                        }
+                    }
+                    blkn += compptr->MCU_width;
+                    ypos += compptr->DCT_v_scaled_size;
+                }
+            }
+            /* Try to write the MCU.  In event of a suspension failure, we will
+             * re-DCT the MCU on restart (a bit inefficient, could be fixed...)
+             */
+            if (! (*cinfo->entropy->encode_mcu) (cinfo, coef->MCU_buffer))
+            {
+                /* Suspension forced; update state counters and exit */
+                coef->MCU_vert_offset = yoffset;
+                coef->mcu_ctr = MCU_col_num;
+                return FALSE;
+            }
+        }
+        /* Completed an MCU row, but perhaps not an iMCU row */
+        coef->mcu_ctr = 0;
+    }
+    /* Completed the iMCU row, advance counters for next one */
+    coef->iMCU_row_num++;
+    start_iMCU_row(cinfo);
+    return TRUE;
+}
+
+
+#ifdef FULL_COEF_BUFFER_SUPPORTED
+
+/*
+ * Process some data in the first pass of a multi-pass case.
+ * We process the equivalent of one fully interleaved MCU row ("iMCU" row)
+ * per call, ie, v_samp_factor block rows for each component in the image.
+ * This amount of data is read from the source buffer, DCT'd and quantized,
+ * and saved into the virtual arrays.  We also generate suitable dummy blocks
+ * as needed at the right and lower edges.  (The dummy blocks are constructed
+ * in the virtual arrays, which have been padded appropriately.)  This makes
+ * it possible for subsequent passes not to worry about real vs. dummy blocks.
+ *
+ * We must also emit the data to the entropy encoder.  This is conveniently
+ * done by calling compress_output() after we've loaded the current strip
+ * of the virtual arrays.
+ *
+ * NB: input_buf contains a plane for each component in image.  All
+ * components are DCT'd and loaded into the virtual arrays in this pass.
+ * However, it may be that only a subset of the components are emitted to
+ * the entropy encoder during this first pass; be careful about looking
+ * at the scan-dependent variables (MCU dimensions, etc).
+ */
+
+METHODDEF(boolean)
+compress_first_pass (j_compress_ptr cinfo, JSAMPIMAGE input_buf)
+{
+    my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
+    JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
+    JDIMENSION blocks_across, MCUs_across, MCUindex;
+    int bi, ci, h_samp_factor, block_row, block_rows, ndummy;
+    JCOEF lastDC;
+    jpeg_component_info *compptr;
+    JBLOCKARRAY buffer;
+    JBLOCKROW thisblockrow, lastblockrow;
+    forward_DCT_ptr forward_DCT;
+
+    for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
+            ci++, compptr++)
+    {
+        /* Align the virtual buffer for this component. */
+        buffer = (*cinfo->mem->access_virt_barray)
+                 ((j_common_ptr) cinfo, coef->whole_image[ci],
+                  coef->iMCU_row_num * compptr->v_samp_factor,
+                  (JDIMENSION) compptr->v_samp_factor, TRUE);
+        /* Count non-dummy DCT block rows in this iMCU row. */
+        if (coef->iMCU_row_num < last_iMCU_row)
+        {
+            block_rows = compptr->v_samp_factor;
+        }
+        else
+        {
+            /* NB: can't use last_row_height here, since may not be set! */
+            block_rows = (int) (compptr->height_in_blocks % compptr->v_samp_factor);
+            if (block_rows == 0)
+            {
+                block_rows = compptr->v_samp_factor;
+            }
+        }
+        blocks_across = compptr->width_in_blocks;
+        h_samp_factor = compptr->h_samp_factor;
+        /* Count number of dummy blocks to be added at the right margin. */
+        ndummy = (int) (blocks_across % h_samp_factor);
+        if (ndummy > 0)
+        {
+            ndummy = h_samp_factor - ndummy;
+        }
+        forward_DCT = cinfo->fdct->forward_DCT[ci];
+        /* Perform DCT for all non-dummy blocks in this iMCU row.  Each call
+         * on forward_DCT processes a complete horizontal row of DCT blocks.
+         */
+        for (block_row = 0; block_row < block_rows; block_row++)
+        {
+            thisblockrow = buffer[block_row];
+            (*forward_DCT) (cinfo, compptr, input_buf[ci], thisblockrow,
+                            (JDIMENSION) (block_row * compptr->DCT_v_scaled_size),
+                            (JDIMENSION) 0, blocks_across);
+            if (ndummy > 0)
+            {
+                /* Create dummy blocks at the right edge of the image. */
+                thisblockrow += blocks_across; /* => first dummy block */
+                jzero_far((void FAR *) thisblockrow, ndummy * SIZEOF(JBLOCK));
+                lastDC = thisblockrow[-1][0];
+                for (bi = 0; bi < ndummy; bi++)
+                {
+                    thisblockrow[bi][0] = lastDC;
+                }
+            }
+        }
+        /* If at end of image, create dummy block rows as needed.
+         * The tricky part here is that within each MCU, we want the DC values
+         * of the dummy blocks to match the last real block's DC value.
+         * This squeezes a few more bytes out of the resulting file...
+         */
+        if (coef->iMCU_row_num == last_iMCU_row)
+        {
+            blocks_across += ndummy;	/* include lower right corner */
+            MCUs_across = blocks_across / h_samp_factor;
+            for (block_row = block_rows; block_row < compptr->v_samp_factor;
+                    block_row++)
+            {
+                thisblockrow = buffer[block_row];
+                lastblockrow = buffer[block_row-1];
+                jzero_far((void FAR *) thisblockrow,
+                          (size_t) (blocks_across * SIZEOF(JBLOCK)));
+                for (MCUindex = 0; MCUindex < MCUs_across; MCUindex++)
+                {
+                    lastDC = lastblockrow[h_samp_factor-1][0];
+                    for (bi = 0; bi < h_samp_factor; bi++)
+                    {
+                        thisblockrow[bi][0] = lastDC;
+                    }
+                    thisblockrow += h_samp_factor; /* advance to next MCU in row */
+                    lastblockrow += h_samp_factor;
+                }
+            }
+        }
+    }
+    /* NB: compress_output will increment iMCU_row_num if successful.
+     * A suspension return will result in redoing all the work above next time.
+     */
+
+    /* Emit data to the entropy encoder, sharing code with subsequent passes */
+    return compress_output(cinfo, input_buf);
+}
+
+
+/*
+ * Process some data in subsequent passes of a multi-pass case.
+ * We process the equivalent of one fully interleaved MCU row ("iMCU" row)
+ * per call, ie, v_samp_factor block rows for each component in the scan.
+ * The data is obtained from the virtual arrays and fed to the entropy coder.
+ * Returns TRUE if the iMCU row is completed, FALSE if suspended.
+ *
+ * NB: input_buf is ignored; it is likely to be a NULL pointer.
+ */
+
+METHODDEF(boolean)
+compress_output (j_compress_ptr cinfo, JSAMPIMAGE input_buf)
+{
+    my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
+    JDIMENSION MCU_col_num;	/* index of current MCU within row */
+    int blkn, ci, xindex, yindex, yoffset;
+    JDIMENSION start_col;
+    JBLOCKARRAY buffer[MAX_COMPS_IN_SCAN];
+    JBLOCKROW buffer_ptr;
+    jpeg_component_info *compptr;
+
+    /* Align the virtual buffers for the components used in this scan.
+     * NB: during first pass, this is safe only because the buffers will
+     * already be aligned properly, so jmemmgr.c won't need to do any I/O.
+     */
+    for (ci = 0; ci < cinfo->comps_in_scan; ci++)
+    {
+        compptr = cinfo->cur_comp_info[ci];
+        buffer[ci] = (*cinfo->mem->access_virt_barray)
+                     ((j_common_ptr) cinfo, coef->whole_image[compptr->component_index],
+                      coef->iMCU_row_num * compptr->v_samp_factor,
+                      (JDIMENSION) compptr->v_samp_factor, FALSE);
+    }
+
+    /* Loop to process one whole iMCU row */
+    for (yoffset = coef->MCU_vert_offset; yoffset < coef->MCU_rows_per_iMCU_row;
+            yoffset++)
+    {
+        for (MCU_col_num = coef->mcu_ctr; MCU_col_num < cinfo->MCUs_per_row;
+                MCU_col_num++)
+        {
+            /* Construct list of pointers to DCT blocks belonging to this MCU */
+            blkn = 0;			/* index of current DCT block within MCU */
+            for (ci = 0; ci < cinfo->comps_in_scan; ci++)
+            {
+                compptr = cinfo->cur_comp_info[ci];
+                start_col = MCU_col_num * compptr->MCU_width;
+                for (yindex = 0; yindex < compptr->MCU_height; yindex++)
+                {
+                    buffer_ptr = buffer[ci][yindex+yoffset] + start_col;
+                    for (xindex = 0; xindex < compptr->MCU_width; xindex++)
+                    {
+                        coef->MCU_buffer[blkn++] = buffer_ptr++;
+                    }
+                }
+            }
+            /* Try to write the MCU. */
+            if (! (*cinfo->entropy->encode_mcu) (cinfo, coef->MCU_buffer))
+            {
+                /* Suspension forced; update state counters and exit */
+                coef->MCU_vert_offset = yoffset;
+                coef->mcu_ctr = MCU_col_num;
+                return FALSE;
+            }
+        }
+        /* Completed an MCU row, but perhaps not an iMCU row */
+        coef->mcu_ctr = 0;
+    }
+    /* Completed the iMCU row, advance counters for next one */
+    coef->iMCU_row_num++;
+    start_iMCU_row(cinfo);
+    return TRUE;
+}
+
+#endif /* FULL_COEF_BUFFER_SUPPORTED */
+
+
+/*
+ * Initialize coefficient buffer controller.
+ */
+
+GLOBAL(void)
+jinit_c_coef_controller (j_compress_ptr cinfo, boolean need_full_buffer)
+{
+    my_coef_ptr coef;
+
+    coef = (my_coef_ptr)
+           (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
+                                       SIZEOF(my_coef_controller));
+    cinfo->coef = (struct jpeg_c_coef_controller *) coef;
+    coef->pub.start_pass = start_pass_coef;
+
+    /* Create the coefficient buffer. */
+    if (need_full_buffer)
+    {
+#ifdef FULL_COEF_BUFFER_SUPPORTED
+        /* Allocate a full-image virtual array for each component, */
+        /* padded to a multiple of samp_factor DCT blocks in each direction. */
+        int ci;
+        jpeg_component_info *compptr;
+
+        for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
+                ci++, compptr++)
+        {
+            coef->whole_image[ci] = (*cinfo->mem->request_virt_barray)
+                                    ((j_common_ptr) cinfo, JPOOL_IMAGE, FALSE,
+                                     (JDIMENSION) jround_up((long) compptr->width_in_blocks,
+                                             (long) compptr->h_samp_factor),
+                                     (JDIMENSION) jround_up((long) compptr->height_in_blocks,
+                                             (long) compptr->v_samp_factor),
+                                     (JDIMENSION) compptr->v_samp_factor);
+        }
+#else
+        ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
+#endif
+    }
+    else
+    {
+        /* We only need a single-MCU buffer. */
+        JBLOCKROW buffer;
+        int i;
+
+        buffer = (JBLOCKROW)
+                 (*cinfo->mem->alloc_large) ((j_common_ptr) cinfo, JPOOL_IMAGE,
+                                             C_MAX_BLOCKS_IN_MCU * SIZEOF(JBLOCK));
+        for (i = 0; i < C_MAX_BLOCKS_IN_MCU; i++)
+        {
+            coef->MCU_buffer[i] = buffer + i;
+        }
+        coef->whole_image[0] = NULL; /* flag for no virtual arrays */
+    }
+}
diff -NEaurb neo/renderer/jpeg-8c/jccolor.c neo/renderer/jpeg-8c/jccolor.c
--- neo/renderer/jpeg-8c/jccolor.c	1970-01-01 00:00:00 +0000
+++ neo/renderer/jpeg-8c/jccolor.c	2012-11-17 01:20:41 +0000
@@ -0,0 +1,522 @@
+/*
+ * jccolor.c
+ *
+ * Copyright (C) 1991-1996, Thomas G. Lane.
+ * This file is part of the Independent JPEG Group's software.
+ * For conditions of distribution and use, see the accompanying README file.
+ *
+ * This file contains input colorspace conversion routines.
+ */
+
+#define JPEG_INTERNALS
+#include "jinclude.h"
+#include "jpeglib.h"
+
+/* Private subobject */
+typedef struct
+{
+    struct jpeg_color_converter pub; /* public fields */
+
+    /* Private state for RGB->YCC conversion */
+    INT32 * rgb_ycc_tab;		/* => table for RGB to YCbCr conversion */
+} my_color_converter;
+
+typedef my_color_converter * my_cconvert_ptr;
+
+
+/**************** RGB -> YCbCr conversion: most common case **************/
+
+/*
+ * YCbCr is defined per CCIR 601-1, except that Cb and Cr are
+ * normalized to the range 0..MAXJSAMPLE rather than -0.5 .. 0.5.
+ * The conversion equations to be implemented are therefore
+ *	Y  =  0.29900 * R + 0.58700 * G + 0.11400 * B
+ *	Cb = -0.16874 * R - 0.33126 * G + 0.50000 * B  + CENTERJSAMPLE
+ *	Cr =  0.50000 * R - 0.41869 * G - 0.08131 * B  + CENTERJSAMPLE
+ * (These numbers are derived from TIFF 6.0 section 21, dated 3-June-92.)
+ * Note: older versions of the IJG code used a zero offset of MAXJSAMPLE/2,
+ * rather than CENTERJSAMPLE, for Cb and Cr.  This gave equal positive and
+ * negative swings for Cb/Cr, but meant that grayscale values (Cb=Cr=0)
+ * were not represented exactly.  Now we sacrifice exact representation of
+ * maximum red and maximum blue in order to get exact grayscales.
+ *
+ * To avoid floating-point arithmetic, we represent the fractional constants
+ * as integers scaled up by 2^16 (about 4 digits precision); we have to divide
+ * the products by 2^16, with appropriate rounding, to get the correct answer.
+ *
+ * For even more speed, we avoid doing any multiplications in the inner loop
+ * by precalculating the constants times R,G,B for all possible values.
+ * For 8-bit JSAMPLEs this is very reasonable (only 256 entries per table);
+ * for 12-bit samples it is still acceptable.  It's not very reasonable for
+ * 16-bit samples, but if you want lossless storage you shouldn't be changing
+ * colorspace anyway.
+ * The CENTERJSAMPLE offsets and the rounding fudge-factor of 0.5 are included
+ * in the tables to save adding them separately in the inner loop.
+ */
+
+#define SCALEBITS	16	/* speediest right-shift on some machines */
+#define CBCR_OFFSET	((INT32) CENTERJSAMPLE << SCALEBITS)
+#define ONE_HALF	((INT32) 1 << (SCALEBITS-1))
+#define FIX(x)		((INT32) ((x) * (1L<<SCALEBITS) + 0.5))
+
+/* We allocate one big table and divide it up into eight parts, instead of
+ * doing eight alloc_small requests.  This lets us use a single table base
+ * address, which can be held in a register in the inner loops on many
+ * machines (more than can hold all eight addresses, anyway).
+ */
+
+#define R_Y_OFF		0			/* offset to R => Y section */
+#define G_Y_OFF		(1*(MAXJSAMPLE+1))	/* offset to G => Y section */
+#define B_Y_OFF		(2*(MAXJSAMPLE+1))	/* etc. */
+#define R_CB_OFF	(3*(MAXJSAMPLE+1))
+#define G_CB_OFF	(4*(MAXJSAMPLE+1))
+#define B_CB_OFF	(5*(MAXJSAMPLE+1))
+#define R_CR_OFF	B_CB_OFF		/* B=>Cb, R=>Cr are the same */
+#define G_CR_OFF	(6*(MAXJSAMPLE+1))
+#define B_CR_OFF	(7*(MAXJSAMPLE+1))
+#define TABLE_SIZE	(8*(MAXJSAMPLE+1))
+
+
+/*
+ * Initialize for RGB->YCC colorspace conversion.
+ */
+
+METHODDEF(void)
+rgb_ycc_start (j_compress_ptr cinfo)
+{
+    my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
+    INT32 * rgb_ycc_tab;
+    INT32 i;
+
+    /* Allocate and fill in the conversion tables. */
+    cconvert->rgb_ycc_tab = rgb_ycc_tab = (INT32 *)
+                                          (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
+                                                  (TABLE_SIZE * SIZEOF(INT32)));
+
+    for (i = 0; i <= MAXJSAMPLE; i++)
+    {
+        rgb_ycc_tab[i+R_Y_OFF] = FIX(0.29900) * i;
+        rgb_ycc_tab[i+G_Y_OFF] = FIX(0.58700) * i;
+        rgb_ycc_tab[i+B_Y_OFF] = FIX(0.11400) * i     + ONE_HALF;
+        rgb_ycc_tab[i+R_CB_OFF] = (-FIX(0.16874)) * i;
+        rgb_ycc_tab[i+G_CB_OFF] = (-FIX(0.33126)) * i;
+        /* We use a rounding fudge-factor of 0.5-epsilon for Cb and Cr.
+         * This ensures that the maximum output will round to MAXJSAMPLE
+         * not MAXJSAMPLE+1, and thus that we don't have to range-limit.
+         */
+        rgb_ycc_tab[i+B_CB_OFF] = FIX(0.50000) * i    + CBCR_OFFSET + ONE_HALF-1;
+        /*  B=>Cb and R=>Cr tables are the same
+            rgb_ycc_tab[i+R_CR_OFF] = FIX(0.50000) * i    + CBCR_OFFSET + ONE_HALF-1;
+        */
+        rgb_ycc_tab[i+G_CR_OFF] = (-FIX(0.41869)) * i;
+        rgb_ycc_tab[i+B_CR_OFF] = (-FIX(0.08131)) * i;
+    }
+}
+
+
+/*
+ * Convert some rows of samples to the JPEG colorspace.
+ *
+ * Note that we change from the application's interleaved-pixel format
+ * to our internal noninterleaved, one-plane-per-component format.
+ * The input buffer is therefore three times as wide as the output buffer.
+ *
+ * A starting row offset is provided only for the output buffer.  The caller
+ * can easily adjust the passed input_buf value to accommodate any row
+ * offset required on that side.
+ */
+
+METHODDEF(void)
+rgb_ycc_convert (j_compress_ptr cinfo,
+                 JSAMPARRAY input_buf, JSAMPIMAGE output_buf,
+                 JDIMENSION output_row, int num_rows)
+{
+    my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
+    register int r, g, b;
+    register INT32 * ctab = cconvert->rgb_ycc_tab;
+    register JSAMPROW inptr;
+    register JSAMPROW outptr0, outptr1, outptr2;
+    register JDIMENSION col;
+    JDIMENSION num_cols = cinfo->image_width;
+
+    while (--num_rows >= 0)
+    {
+        inptr = *input_buf++;
+        outptr0 = output_buf[0][output_row];
+        outptr1 = output_buf[1][output_row];
+        outptr2 = output_buf[2][output_row];
+        output_row++;
+        for (col = 0; col < num_cols; col++)
+        {
+            r = GETJSAMPLE(inptr[RGB_RED]);
+            g = GETJSAMPLE(inptr[RGB_GREEN]);
+            b = GETJSAMPLE(inptr[RGB_BLUE]);
+            inptr += RGB_PIXELSIZE;
+            /* If the inputs are 0..MAXJSAMPLE, the outputs of these equations
+             * must be too; we do not need an explicit range-limiting operation.
+             * Hence the value being shifted is never negative, and we don't
+             * need the general RIGHT_SHIFT macro.
+             */
+            /* Y */
+            outptr0[col] = (JSAMPLE)
+                           ((ctab[r+R_Y_OFF] + ctab[g+G_Y_OFF] + ctab[b+B_Y_OFF])
+                            >> SCALEBITS);
+            /* Cb */
+            outptr1[col] = (JSAMPLE)
+                           ((ctab[r+R_CB_OFF] + ctab[g+G_CB_OFF] + ctab[b+B_CB_OFF])
+                            >> SCALEBITS);
+            /* Cr */
+            outptr2[col] = (JSAMPLE)
+                           ((ctab[r+R_CR_OFF] + ctab[g+G_CR_OFF] + ctab[b+B_CR_OFF])
+                            >> SCALEBITS);
+        }
+    }
+}
+
+
+/**************** Cases other than RGB -> YCbCr **************/
+
+
+/*
+ * Convert some rows of samples to the JPEG colorspace.
+ * This version handles RGB->grayscale conversion, which is the same
+ * as the RGB->Y portion of RGB->YCbCr.
+ * We assume rgb_ycc_start has been called (we only use the Y tables).
+ */
+
+METHODDEF(void)
+rgb_gray_convert (j_compress_ptr cinfo,
+                  JSAMPARRAY input_buf, JSAMPIMAGE output_buf,
+                  JDIMENSION output_row, int num_rows)
+{
+    my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
+    register int r, g, b;
+    register INT32 * ctab = cconvert->rgb_ycc_tab;
+    register JSAMPROW inptr;
+    register JSAMPROW outptr;
+    register JDIMENSION col;
+    JDIMENSION num_cols = cinfo->image_width;
+
+    while (--num_rows >= 0)
+    {
+        inptr = *input_buf++;
+        outptr = output_buf[0][output_row];
+        output_row++;
+        for (col = 0; col < num_cols; col++)
+        {
+            r = GETJSAMPLE(inptr[RGB_RED]);
+            g = GETJSAMPLE(inptr[RGB_GREEN]);
+            b = GETJSAMPLE(inptr[RGB_BLUE]);
+            inptr += RGB_PIXELSIZE;
+            /* Y */
+            outptr[col] = (JSAMPLE)
+                          ((ctab[r+R_Y_OFF] + ctab[g+G_Y_OFF] + ctab[b+B_Y_OFF])
+                           >> SCALEBITS);
+        }
+    }
+}
+
+
+/*
+ * Convert some rows of samples to the JPEG colorspace.
+ * This version handles Adobe-style CMYK->YCCK conversion,
+ * where we convert R=1-C, G=1-M, and B=1-Y to YCbCr using the same
+ * conversion as above, while passing K (black) unchanged.
+ * We assume rgb_ycc_start has been called.
+ */
+
+METHODDEF(void)
+cmyk_ycck_convert (j_compress_ptr cinfo,
+                   JSAMPARRAY input_buf, JSAMPIMAGE output_buf,
+                   JDIMENSION output_row, int num_rows)
+{
+    my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
+    register int r, g, b;
+    register INT32 * ctab = cconvert->rgb_ycc_tab;
+    register JSAMPROW inptr;
+    register JSAMPROW outptr0, outptr1, outptr2, outptr3;
+    register JDIMENSION col;
+    JDIMENSION num_cols = cinfo->image_width;
+
+    while (--num_rows >= 0)
+    {
+        inptr = *input_buf++;
+        outptr0 = output_buf[0][output_row];
+        outptr1 = output_buf[1][output_row];
+        outptr2 = output_buf[2][output_row];
+        outptr3 = output_buf[3][output_row];
+        output_row++;
+        for (col = 0; col < num_cols; col++)
+        {
+            r = MAXJSAMPLE - GETJSAMPLE(inptr[0]);
+            g = MAXJSAMPLE - GETJSAMPLE(inptr[1]);
+            b = MAXJSAMPLE - GETJSAMPLE(inptr[2]);
+            /* K passes through as-is */
+            outptr3[col] = inptr[3];	/* don't need GETJSAMPLE here */
+            inptr += 4;
+            /* If the inputs are 0..MAXJSAMPLE, the outputs of these equations
+             * must be too; we do not need an explicit range-limiting operation.
+             * Hence the value being shifted is never negative, and we don't
+             * need the general RIGHT_SHIFT macro.
+             */
+            /* Y */
+            outptr0[col] = (JSAMPLE)
+                           ((ctab[r+R_Y_OFF] + ctab[g+G_Y_OFF] + ctab[b+B_Y_OFF])
+                            >> SCALEBITS);
+            /* Cb */
+            outptr1[col] = (JSAMPLE)
+                           ((ctab[r+R_CB_OFF] + ctab[g+G_CB_OFF] + ctab[b+B_CB_OFF])
+                            >> SCALEBITS);
+            /* Cr */
+            outptr2[col] = (JSAMPLE)
+                           ((ctab[r+R_CR_OFF] + ctab[g+G_CR_OFF] + ctab[b+B_CR_OFF])
+                            >> SCALEBITS);
+        }
+    }
+}
+
+
+/*
+ * Convert some rows of samples to the JPEG colorspace.
+ * This version handles grayscale output with no conversion.
+ * The source can be either plain grayscale or YCbCr (since Y == gray).
+ */
+
+METHODDEF(void)
+grayscale_convert (j_compress_ptr cinfo,
+                   JSAMPARRAY input_buf, JSAMPIMAGE output_buf,
+                   JDIMENSION output_row, int num_rows)
+{
+    register JSAMPROW inptr;
+    register JSAMPROW outptr;
+    register JDIMENSION col;
+    JDIMENSION num_cols = cinfo->image_width;
+    int instride = cinfo->input_components;
+
+    while (--num_rows >= 0)
+    {
+        inptr = *input_buf++;
+        outptr = output_buf[0][output_row];
+        output_row++;
+        for (col = 0; col < num_cols; col++)
+        {
+            outptr[col] = inptr[0];	/* don't need GETJSAMPLE() here */
+            inptr += instride;
+        }
+    }
+}
+
+
+/*
+ * Convert some rows of samples to the JPEG colorspace.
+ * This version handles multi-component colorspaces without conversion.
+ * We assume input_components == num_components.
+ */
+
+METHODDEF(void)
+null_convert (j_compress_ptr cinfo,
+              JSAMPARRAY input_buf, JSAMPIMAGE output_buf,
+              JDIMENSION output_row, int num_rows)
+{
+    register JSAMPROW inptr;
+    register JSAMPROW outptr;
+    register JDIMENSION col;
+    register int ci;
+    int nc = cinfo->num_components;
+    JDIMENSION num_cols = cinfo->image_width;
+
+    while (--num_rows >= 0)
+    {
+        /* It seems fastest to make a separate pass for each component. */
+        for (ci = 0; ci < nc; ci++)
+        {
+            inptr = *input_buf;
+            outptr = output_buf[ci][output_row];
+            for (col = 0; col < num_cols; col++)
+            {
+                outptr[col] = inptr[ci]; /* don't need GETJSAMPLE() here */
+                inptr += nc;
+            }
+        }
+        input_buf++;
+        output_row++;
+    }
+}
+
+
+/*
+ * Empty method for start_pass.
+ */
+
+METHODDEF(void)
+null_method (j_compress_ptr cinfo)
+{
+    /* no work needed */
+}
+
+
+/*
+ * Module initialization routine for input colorspace conversion.
+ */
+
+GLOBAL(void)
+jinit_color_converter (j_compress_ptr cinfo)
+{
+    my_cconvert_ptr cconvert;
+
+    cconvert = (my_cconvert_ptr)
+               (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
+                                           SIZEOF(my_color_converter));
+    cinfo->cconvert = (struct jpeg_color_converter *) cconvert;
+    /* set start_pass to null method until we find out differently */
+    cconvert->pub.start_pass = null_method;
+
+    /* Make sure input_components agrees with in_color_space */
+    switch (cinfo->in_color_space)
+    {
+    case JCS_GRAYSCALE:
+        if (cinfo->input_components != 1)
+        {
+            ERREXIT(cinfo, JERR_BAD_IN_COLORSPACE);
+        }
+        break;
+
+    case JCS_RGB:
+#if RGB_PIXELSIZE != 3
+        if (cinfo->input_components != RGB_PIXELSIZE)
+        {
+            ERREXIT(cinfo, JERR_BAD_IN_COLORSPACE);
+        }
+        break;
+#endif /* else share code with YCbCr */
+
+    case JCS_YCbCr:
+        if (cinfo->input_components != 3)
+        {
+            ERREXIT(cinfo, JERR_BAD_IN_COLORSPACE);
+        }
+        break;
+
+    case JCS_CMYK:
+    case JCS_YCCK:
+        if (cinfo->input_components != 4)
+        {
+            ERREXIT(cinfo, JERR_BAD_IN_COLORSPACE);
+        }
+        break;
+
+    default:			/* JCS_UNKNOWN can be anything */
+        if (cinfo->input_components < 1)
+        {
+            ERREXIT(cinfo, JERR_BAD_IN_COLORSPACE);
+        }
+        break;
+    }
+
+    /* Check num_components, set conversion method based on requested space */
+    switch (cinfo->jpeg_color_space)
+    {
+    case JCS_GRAYSCALE:
+        if (cinfo->num_components != 1)
+        {
+            ERREXIT(cinfo, JERR_BAD_J_COLORSPACE);
+        }
+        if (cinfo->in_color_space == JCS_GRAYSCALE)
+        {
+            cconvert->pub.color_convert = grayscale_convert;
+        }
+        else if (cinfo->in_color_space == JCS_RGB)
+        {
+            cconvert->pub.start_pass = rgb_ycc_start;
+            cconvert->pub.color_convert = rgb_gray_convert;
+        }
+        else if (cinfo->in_color_space == JCS_YCbCr)
+        {
+            cconvert->pub.color_convert = grayscale_convert;
+        }
+        else
+        {
+            ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
+        }
+        break;
+
+    case JCS_RGB:
+        if (cinfo->num_components != 3)
+        {
+            ERREXIT(cinfo, JERR_BAD_J_COLORSPACE);
+        }
+        if (cinfo->in_color_space == JCS_RGB && RGB_PIXELSIZE == 3)
+        {
+            cconvert->pub.color_convert = null_convert;
+        }
+        else
+        {
+            ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
+        }
+        break;
+
+    case JCS_YCbCr:
+        if (cinfo->num_components != 3)
+        {
+            ERREXIT(cinfo, JERR_BAD_J_COLORSPACE);
+        }
+        if (cinfo->in_color_space == JCS_RGB)
+        {
+            cconvert->pub.start_pass = rgb_ycc_start;
+            cconvert->pub.color_convert = rgb_ycc_convert;
+        }
+        else if (cinfo->in_color_space == JCS_YCbCr)
+        {
+            cconvert->pub.color_convert = null_convert;
+        }
+        else
+        {
+            ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
+        }
+        break;
+
+    case JCS_CMYK:
+        if (cinfo->num_components != 4)
+        {
+            ERREXIT(cinfo, JERR_BAD_J_COLORSPACE);
+        }
+        if (cinfo->in_color_space == JCS_CMYK)
+        {
+            cconvert->pub.color_convert = null_convert;
+        }
+        else
+        {
+            ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
+        }
+        break;
+
+    case JCS_YCCK:
+        if (cinfo->num_components != 4)
+        {
+            ERREXIT(cinfo, JERR_BAD_J_COLORSPACE);
+        }
+        if (cinfo->in_color_space == JCS_CMYK)
+        {
+            cconvert->pub.start_pass = rgb_ycc_start;
+            cconvert->pub.color_convert = cmyk_ycck_convert;
+        }
+        else if (cinfo->in_color_space == JCS_YCCK)
+        {
+            cconvert->pub.color_convert = null_convert;
+        }
+        else
+        {
+            ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
+        }
+        break;
+
+    default:			/* allow null conversion of JCS_UNKNOWN */
+        if (cinfo->jpeg_color_space != cinfo->in_color_space ||
+                cinfo->num_components != cinfo->input_components)
+        {
+            ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
+        }
+        cconvert->pub.color_convert = null_convert;
+        break;
+    }
+}
diff -NEaurb neo/renderer/jpeg-8c/jcdctmgr.c neo/renderer/jpeg-8c/jcdctmgr.c
--- neo/renderer/jpeg-8c/jcdctmgr.c	1970-01-01 00:00:00 +0000
+++ neo/renderer/jpeg-8c/jcdctmgr.c	2012-11-17 01:20:40 +0000
@@ -0,0 +1,508 @@
+/*
+ * jcdctmgr.c
+ *
+ * Copyright (C) 1994-1996, Thomas G. Lane.
+ * This file is part of the Independent JPEG Group's software.
+ * For conditions of distribution and use, see the accompanying README file.
+ *
+ * This file contains the forward-DCT management logic.
+ * This code selects a particular DCT implementation to be used,
+ * and it performs related housekeeping chores including coefficient
+ * quantization.
+ */
+
+#define JPEG_INTERNALS
+#include "jinclude.h"
+#include "jpeglib.h"
+#include "jdct.h"		/* Private declarations for DCT subsystem */
+
+
+/* Private subobject for this module */
+
+typedef struct
+{
+    struct jpeg_forward_dct pub;	/* public fields */
+
+    /* Pointer to the DCT routine actually in use */
+    forward_DCT_method_ptr do_dct[MAX_COMPONENTS];
+
+    /* The actual post-DCT divisors --- not identical to the quant table
+     * entries, because of scaling (especially for an unnormalized DCT).
+     * Each table is given in normal array order.
+     */
+    DCTELEM * divisors[NUM_QUANT_TBLS];
+
+#ifdef DCT_FLOAT_SUPPORTED
+    /* Same as above for the floating-point case. */
+    float_DCT_method_ptr do_float_dct[MAX_COMPONENTS];
+    FAST_FLOAT * float_divisors[NUM_QUANT_TBLS];
+#endif
+} my_fdct_controller;
+
+typedef my_fdct_controller * my_fdct_ptr;
+
+
+/* The current scaled-DCT routines require ISLOW-style divisor tables,
+ * so be sure to compile that code if either ISLOW or SCALING is requested.
+ */
+#ifdef DCT_ISLOW_SUPPORTED
+#define PROVIDE_ISLOW_TABLES
+#else
+#ifdef DCT_SCALING_SUPPORTED
+#define PROVIDE_ISLOW_TABLES
+#endif
+#endif
+
+
+/*
+ * Perform forward DCT on one or more blocks of a component.
+ *
+ * The input samples are taken from the sample_data[] array starting at
+ * position start_row/start_col, and moving to the right for any additional
+ * blocks. The quantized coefficients are returned in coef_blocks[].
+ */
+
+METHODDEF(void)
+forward_DCT (j_compress_ptr cinfo, jpeg_component_info * compptr,
+             JSAMPARRAY sample_data, JBLOCKROW coef_blocks,
+             JDIMENSION start_row, JDIMENSION start_col,
+             JDIMENSION num_blocks)
+/* This version is used for integer DCT implementations. */
+{
+    /* This routine is heavily used, so it's worth coding it tightly. */
+    my_fdct_ptr fdct = (my_fdct_ptr) cinfo->fdct;
+    forward_DCT_method_ptr do_dct = fdct->do_dct[compptr->component_index];
+    DCTELEM * divisors = fdct->divisors[compptr->quant_tbl_no];
+    DCTELEM workspace[DCTSIZE2];	/* work area for FDCT subroutine */
+    JDIMENSION bi;
+
+    sample_data += start_row;	/* fold in the vertical offset once */
+
+    for (bi = 0; bi < num_blocks; bi++, start_col += compptr->DCT_h_scaled_size)
+    {
+        /* Perform the DCT */
+        (*do_dct) (workspace, sample_data, start_col);
+
+        /* Quantize/descale the coefficients, and store into coef_blocks[] */
+        {
+            register DCTELEM temp, qval;
+            register int i;
+            register JCOEFPTR output_ptr = coef_blocks[bi];
+
+            for (i = 0; i < DCTSIZE2; i++)
+            {
+                qval = divisors[i];
+                temp = workspace[i];
+                /* Divide the coefficient value by qval, ensuring proper rounding.
+                 * Since C does not specify the direction of rounding for negative
+                 * quotients, we have to force the dividend positive for portability.
+                 *
+                 * In most files, at least half of the output values will be zero
+                 * (at default quantization settings, more like three-quarters...)
+                 * so we should ensure that this case is fast.  On many machines,
+                 * a comparison is enough cheaper than a divide to make a special test
+                 * a win.  Since both inputs will be nonnegative, we need only test
+                 * for a < b to discover whether a/b is 0.
+                 * If your machine's division is fast enough, define FAST_DIVIDE.
+                 */
+#ifdef FAST_DIVIDE
+#define DIVIDE_BY(a,b)	a /= b
+#else
+#define DIVIDE_BY(a,b)	if (a >= b) a /= b; else a = 0
+#endif
+                if (temp < 0)
+                {
+                    temp = -temp;
+                    temp += qval>>1;	/* for rounding */
+                    DIVIDE_BY(temp, qval);
+                    temp = -temp;
+                }
+                else
+                {
+                    temp += qval>>1;	/* for rounding */
+                    DIVIDE_BY(temp, qval);
+                }
+                output_ptr[i] = (JCOEF) temp;
+            }
+        }
+    }
+}
+
+
+#ifdef DCT_FLOAT_SUPPORTED
+
+METHODDEF(void)
+forward_DCT_float (j_compress_ptr cinfo, jpeg_component_info * compptr,
+                   JSAMPARRAY sample_data, JBLOCKROW coef_blocks,
+                   JDIMENSION start_row, JDIMENSION start_col,
+                   JDIMENSION num_blocks)
+/* This version is used for floating-point DCT implementations. */
+{
+    /* This routine is heavily used, so it's worth coding it tightly. */
+    my_fdct_ptr fdct = (my_fdct_ptr) cinfo->fdct;
+    float_DCT_method_ptr do_dct = fdct->do_float_dct[compptr->component_index];
+    FAST_FLOAT * divisors = fdct->float_divisors[compptr->quant_tbl_no];
+    FAST_FLOAT workspace[DCTSIZE2]; /* work area for FDCT subroutine */
+    JDIMENSION bi;
+
+    sample_data += start_row;	/* fold in the vertical offset once */
+
+    for (bi = 0; bi < num_blocks; bi++, start_col += compptr->DCT_h_scaled_size)
+    {
+        /* Perform the DCT */
+        (*do_dct) (workspace, sample_data, start_col);
+
+        /* Quantize/descale the coefficients, and store into coef_blocks[] */
+        {
+            register FAST_FLOAT temp;
+            register int i;
+            register JCOEFPTR output_ptr = coef_blocks[bi];
+
+            for (i = 0; i < DCTSIZE2; i++)
+            {
+                /* Apply the quantization and scaling factor */
+                temp = workspace[i] * divisors[i];
+                /* Round to nearest integer.
+                 * Since C does not specify the direction of rounding for negative
+                 * quotients, we have to force the dividend positive for portability.
+                 * The maximum coefficient size is +-16K (for 12-bit data), so this
+                 * code should work for either 16-bit or 32-bit ints.
+                 */
+                output_ptr[i] = (JCOEF) ((int) (temp + (FAST_FLOAT) 16384.5) - 16384);
+            }
+        }
+    }
+}
+
+#endif /* DCT_FLOAT_SUPPORTED */
+
+
+/*
+ * Initialize for a processing pass.
+ * Verify that all referenced Q-tables are present, and set up
+ * the divisor table for each one.
+ * In the current implementation, DCT of all components is done during
+ * the first pass, even if only some components will be output in the
+ * first scan.  Hence all components should be examined here.
+ */
+
+METHODDEF(void)
+start_pass_fdctmgr (j_compress_ptr cinfo)
+{
+    my_fdct_ptr fdct = (my_fdct_ptr) cinfo->fdct;
+    int ci, qtblno, i;
+    jpeg_component_info *compptr;
+    int method = 0;
+    JQUANT_TBL * qtbl;
+    DCTELEM * dtbl;
+
+    for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
+            ci++, compptr++)
+    {
+        /* Select the proper DCT routine for this component's scaling */
+        switch ((compptr->DCT_h_scaled_size << 8) + compptr->DCT_v_scaled_size)
+        {
+#ifdef DCT_SCALING_SUPPORTED
+        case ((1 << 8) + 1):
+            fdct->do_dct[ci] = jpeg_fdct_1x1;
+            method = JDCT_ISLOW;	/* jfdctint uses islow-style table */
+            break;
+        case ((2 << 8) + 2):
+            fdct->do_dct[ci] = jpeg_fdct_2x2;
+            method = JDCT_ISLOW;	/* jfdctint uses islow-style table */
+            break;
+        case ((3 << 8) + 3):
+            fdct->do_dct[ci] = jpeg_fdct_3x3;
+            method = JDCT_ISLOW;	/* jfdctint uses islow-style table */
+            break;
+        case ((4 << 8) + 4):
+            fdct->do_dct[ci] = jpeg_fdct_4x4;
+            method = JDCT_ISLOW;	/* jfdctint uses islow-style table */
+            break;
+        case ((5 << 8) + 5):
+            fdct->do_dct[ci] = jpeg_fdct_5x5;
+            method = JDCT_ISLOW;	/* jfdctint uses islow-style table */
+            break;
+        case ((6 << 8) + 6):
+            fdct->do_dct[ci] = jpeg_fdct_6x6;
+            method = JDCT_ISLOW;	/* jfdctint uses islow-style table */
+            break;
+        case ((7 << 8) + 7):
+            fdct->do_dct[ci] = jpeg_fdct_7x7;
+            method = JDCT_ISLOW;	/* jfdctint uses islow-style table */
+            break;
+        case ((9 << 8) + 9):
+            fdct->do_dct[ci] = jpeg_fdct_9x9;
+            method = JDCT_ISLOW;	/* jfdctint uses islow-style table */
+            break;
+        case ((10 << 8) + 10):
+            fdct->do_dct[ci] = jpeg_fdct_10x10;
+            method = JDCT_ISLOW;	/* jfdctint uses islow-style table */
+            break;
+        case ((11 << 8) + 11):
+            fdct->do_dct[ci] = jpeg_fdct_11x11;
+            method = JDCT_ISLOW;	/* jfdctint uses islow-style table */
+            break;
+        case ((12 << 8) + 12):
+            fdct->do_dct[ci] = jpeg_fdct_12x12;
+            method = JDCT_ISLOW;	/* jfdctint uses islow-style table */
+            break;
+        case ((13 << 8) + 13):
+            fdct->do_dct[ci] = jpeg_fdct_13x13;
+            method = JDCT_ISLOW;	/* jfdctint uses islow-style table */
+            break;
+        case ((14 << 8) + 14):
+            fdct->do_dct[ci] = jpeg_fdct_14x14;
+            method = JDCT_ISLOW;	/* jfdctint uses islow-style table */
+            break;
+        case ((15 << 8) + 15):
+            fdct->do_dct[ci] = jpeg_fdct_15x15;
+            method = JDCT_ISLOW;	/* jfdctint uses islow-style table */
+            break;
+        case ((16 << 8) + 16):
+            fdct->do_dct[ci] = jpeg_fdct_16x16;
+            method = JDCT_ISLOW;	/* jfdctint uses islow-style table */
+            break;
+        case ((16 << 8) + 8):
+            fdct->do_dct[ci] = jpeg_fdct_16x8;
+            method = JDCT_ISLOW;	/* jfdctint uses islow-style table */
+            break;
+        case ((14 << 8) + 7):
+            fdct->do_dct[ci] = jpeg_fdct_14x7;
+            method = JDCT_ISLOW;	/* jfdctint uses islow-style table */
+            break;
+        case ((12 << 8) + 6):
+            fdct->do_dct[ci] = jpeg_fdct_12x6;
+            method = JDCT_ISLOW;	/* jfdctint uses islow-style table */
+            break;
+        case ((10 << 8) + 5):
+            fdct->do_dct[ci] = jpeg_fdct_10x5;
+            method = JDCT_ISLOW;	/* jfdctint uses islow-style table */
+            break;
+        case ((8 << 8) + 4):
+            fdct->do_dct[ci] = jpeg_fdct_8x4;
+            method = JDCT_ISLOW;	/* jfdctint uses islow-style table */
+            break;
+        case ((6 << 8) + 3):
+            fdct->do_dct[ci] = jpeg_fdct_6x3;
+            method = JDCT_ISLOW;	/* jfdctint uses islow-style table */
+            break;
+        case ((4 << 8) + 2):
+            fdct->do_dct[ci] = jpeg_fdct_4x2;
+            method = JDCT_ISLOW;	/* jfdctint uses islow-style table */
+            break;
+        case ((2 << 8) + 1):
+            fdct->do_dct[ci] = jpeg_fdct_2x1;
+            method = JDCT_ISLOW;	/* jfdctint uses islow-style table */
+            break;
+        case ((8 << 8) + 16):
+            fdct->do_dct[ci] = jpeg_fdct_8x16;
+            method = JDCT_ISLOW;	/* jfdctint uses islow-style table */
+            break;
+        case ((7 << 8) + 14):
+            fdct->do_dct[ci] = jpeg_fdct_7x14;
+            method = JDCT_ISLOW;	/* jfdctint uses islow-style table */
+            break;
+        case ((6 << 8) + 12):
+            fdct->do_dct[ci] = jpeg_fdct_6x12;
+            method = JDCT_ISLOW;	/* jfdctint uses islow-style table */
+            break;
+        case ((5 << 8) + 10):
+            fdct->do_dct[ci] = jpeg_fdct_5x10;
+            method = JDCT_ISLOW;	/* jfdctint uses islow-style table */
+            break;
+        case ((4 << 8) + 8):
+            fdct->do_dct[ci] = jpeg_fdct_4x8;
+            method = JDCT_ISLOW;	/* jfdctint uses islow-style table */
+            break;
+        case ((3 << 8) + 6):
+            fdct->do_dct[ci] = jpeg_fdct_3x6;
+            method = JDCT_ISLOW;	/* jfdctint uses islow-style table */
+            break;
+        case ((2 << 8) + 4):
+            fdct->do_dct[ci] = jpeg_fdct_2x4;
+            method = JDCT_ISLOW;	/* jfdctint uses islow-style table */
+            break;
+        case ((1 << 8) + 2):
+            fdct->do_dct[ci] = jpeg_fdct_1x2;
+            method = JDCT_ISLOW;	/* jfdctint uses islow-style table */
+            break;
+#endif
+        case ((DCTSIZE << 8) + DCTSIZE):
+            switch (cinfo->dct_method)
+            {
+#ifdef DCT_ISLOW_SUPPORTED
+            case JDCT_ISLOW:
+                fdct->do_dct[ci] = jpeg_fdct_islow;
+                method = JDCT_ISLOW;
+                break;
+#endif
+#ifdef DCT_IFAST_SUPPORTED
+            case JDCT_IFAST:
+                fdct->do_dct[ci] = jpeg_fdct_ifast;
+                method = JDCT_IFAST;
+                break;
+#endif
+#ifdef DCT_FLOAT_SUPPORTED
+            case JDCT_FLOAT:
+                fdct->do_float_dct[ci] = jpeg_fdct_float;
+                method = JDCT_FLOAT;
+                break;
+#endif
+            default:
+                ERREXIT(cinfo, JERR_NOT_COMPILED);
+                break;
+            }
+            break;
+        default:
+            ERREXIT2(cinfo, JERR_BAD_DCTSIZE,
+                     compptr->DCT_h_scaled_size, compptr->DCT_v_scaled_size);
+            break;
+        }
+        qtblno = compptr->quant_tbl_no;
+        /* Make sure specified quantization table is present */
+        if (qtblno < 0 || qtblno >= NUM_QUANT_TBLS ||
+                cinfo->quant_tbl_ptrs[qtblno] == NULL)
+        {
+            ERREXIT1(cinfo, JERR_NO_QUANT_TABLE, qtblno);
+        }
+        qtbl = cinfo->quant_tbl_ptrs[qtblno];
+        /* Compute divisors for this quant table */
+        /* We may do this more than once for same table, but it's not a big deal */
+        switch (method)
+        {
+#ifdef PROVIDE_ISLOW_TABLES
+        case JDCT_ISLOW:
+            /* For LL&M IDCT method, divisors are equal to raw quantization
+             * coefficients multiplied by 8 (to counteract scaling).
+             */
+            if (fdct->divisors[qtblno] == NULL)
+            {
+                fdct->divisors[qtblno] = (DCTELEM *)
+                                         (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
+                                                 DCTSIZE2 * SIZEOF(DCTELEM));
+            }
+            dtbl = fdct->divisors[qtblno];
+            for (i = 0; i < DCTSIZE2; i++)
+            {
+                dtbl[i] = ((DCTELEM) qtbl->quantval[i]) << 3;
+            }
+            fdct->pub.forward_DCT[ci] = forward_DCT;
+            break;
+#endif
+#ifdef DCT_IFAST_SUPPORTED
+        case JDCT_IFAST:
+        {
+            /* For AA&N IDCT method, divisors are equal to quantization
+             * coefficients scaled by scalefactor[row]*scalefactor[col], where
+             *   scalefactor[0] = 1
+             *   scalefactor[k] = cos(k*PI/16) * sqrt(2)    for k=1..7
+             * We apply a further scale factor of 8.
+             */
+#define CONST_BITS 14
+            static const INT16 aanscales[DCTSIZE2] =
+            {
+                /* precomputed values scaled up by 14 bits */
+                16384, 22725, 21407, 19266, 16384, 12873,  8867,  4520,
+                22725, 31521, 29692, 26722, 22725, 17855, 12299,  6270,
+                21407, 29692, 27969, 25172, 21407, 16819, 11585,  5906,
+                19266, 26722, 25172, 22654, 19266, 15137, 10426,  5315,
+                16384, 22725, 21407, 19266, 16384, 12873,  8867,  4520,
+                12873, 17855, 16819, 15137, 12873, 10114,  6967,  3552,
+                8867, 12299, 11585, 10426,  8867,  6967,  4799,  2446,
+                4520,  6270,  5906,  5315,  4520,  3552,  2446,  1247
+            };
+            SHIFT_TEMPS
+
+            if (fdct->divisors[qtblno] == NULL)
+            {
+                fdct->divisors[qtblno] = (DCTELEM *)
+                                         (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
+                                                 DCTSIZE2 * SIZEOF(DCTELEM));
+            }
+            dtbl = fdct->divisors[qtblno];
+            for (i = 0; i < DCTSIZE2; i++)
+            {
+                dtbl[i] = (DCTELEM)
+                          DESCALE(MULTIPLY16V16((INT32) qtbl->quantval[i],
+                                                (INT32) aanscales[i]),
+                                  CONST_BITS-3);
+            }
+        }
+        fdct->pub.forward_DCT[ci] = forward_DCT;
+        break;
+#endif
+#ifdef DCT_FLOAT_SUPPORTED
+        case JDCT_FLOAT:
+        {
+            /* For float AA&N IDCT method, divisors are equal to quantization
+             * coefficients scaled by scalefactor[row]*scalefactor[col], where
+             *   scalefactor[0] = 1
+             *   scalefactor[k] = cos(k*PI/16) * sqrt(2)    for k=1..7
+             * We apply a further scale factor of 8.
+             * What's actually stored is 1/divisor so that the inner loop can
+             * use a multiplication rather than a division.
+             */
+            FAST_FLOAT * fdtbl;
+            int row, col;
+            static const double aanscalefactor[DCTSIZE] =
+            {
+                1.0, 1.387039845, 1.306562965, 1.175875602,
+                1.0, 0.785694958, 0.541196100, 0.275899379
+            };
+
+            if (fdct->float_divisors[qtblno] == NULL)
+            {
+                fdct->float_divisors[qtblno] = (FAST_FLOAT *)
+                                               (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
+                                                       DCTSIZE2 * SIZEOF(FAST_FLOAT));
+            }
+            fdtbl = fdct->float_divisors[qtblno];
+            i = 0;
+            for (row = 0; row < DCTSIZE; row++)
+            {
+                for (col = 0; col < DCTSIZE; col++)
+                {
+                    fdtbl[i] = (FAST_FLOAT)
+                               (1.0 / (((double) qtbl->quantval[i] *
+                                        aanscalefactor[row] * aanscalefactor[col] * 8.0)));
+                    i++;
+                }
+            }
+        }
+        fdct->pub.forward_DCT[ci] = forward_DCT_float;
+        break;
+#endif
+        default:
+            ERREXIT(cinfo, JERR_NOT_COMPILED);
+            break;
+        }
+    }
+}
+
+
+/*
+ * Initialize FDCT manager.
+ */
+
+GLOBAL(void)
+jinit_forward_dct (j_compress_ptr cinfo)
+{
+    my_fdct_ptr fdct;
+    int i;
+
+    fdct = (my_fdct_ptr)
+           (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
+                                       SIZEOF(my_fdct_controller));
+    cinfo->fdct = (struct jpeg_forward_dct *) fdct;
+    fdct->pub.start_pass = start_pass_fdctmgr;
+
+    /* Mark divisor tables unallocated */
+    for (i = 0; i < NUM_QUANT_TBLS; i++)
+    {
+        fdct->divisors[i] = NULL;
+#ifdef DCT_FLOAT_SUPPORTED
+        fdct->float_divisors[i] = NULL;
+#endif
+    }
+}
diff -NEaurb neo/renderer/jpeg-8c/jchuff.c neo/renderer/jpeg-8c/jchuff.c
--- neo/renderer/jpeg-8c/jchuff.c	1970-01-01 00:00:00 +0000
+++ neo/renderer/jpeg-8c/jchuff.c	2012-11-17 01:20:40 +0000
@@ -0,0 +1,1824 @@
+/*
+ * jchuff.c
+ *
+ * Copyright (C) 1991-1997, Thomas G. Lane.
+ * Modified 2006-2009 by Guido Vollbeding.
+ * This file is part of the Independent JPEG Group's software.
+ * For conditions of distribution and use, see the accompanying README file.
+ *
+ * This file contains Huffman entropy encoding routines.
+ * Both sequential and progressive modes are supported in this single module.
+ *
+ * Much of the complexity here has to do with supporting output suspension.
+ * If the data destination module demands suspension, we want to be able to
+ * back up to the start of the current MCU.  To do this, we copy state
+ * variables into local working storage, and update them back to the
+ * permanent JPEG objects only upon successful completion of an MCU.
+ *
+ * We do not support output suspension for the progressive JPEG mode, since
+ * the library currently does not allow multiple-scan files to be written
+ * with output suspension.
+ */
+
+#define JPEG_INTERNALS
+#include "jinclude.h"
+#include "jpeglib.h"
+
+
+/* The legal range of a DCT coefficient is
+ *  -1024 .. +1023  for 8-bit data;
+ * -16384 .. +16383 for 12-bit data.
+ * Hence the magnitude should always fit in 10 or 14 bits respectively.
+ */
+
+#if BITS_IN_JSAMPLE == 8
+#define MAX_COEF_BITS 10
+#else
+#define MAX_COEF_BITS 14
+#endif
+
+/* Derived data constructed for each Huffman table */
+
+typedef struct
+{
+    unsigned int ehufco[256];	/* code for each symbol */
+    char ehufsi[256];		/* length of code for each symbol */
+    /* If no code has been allocated for a symbol S, ehufsi[S] contains 0 */
+} c_derived_tbl;
+
+
+/* Expanded entropy encoder object for Huffman encoding.
+ *
+ * The savable_state subrecord contains fields that change within an MCU,
+ * but must not be updated permanently until we complete the MCU.
+ */
+
+typedef struct
+{
+    INT32 put_buffer;		/* current bit-accumulation buffer */
+    int put_bits;			/* # of bits now in it */
+    int last_dc_val[MAX_COMPS_IN_SCAN]; /* last DC coef for each component */
+} savable_state;
+
+/* This macro is to work around compilers with missing or broken
+ * structure assignment.  You'll need to fix this code if you have
+ * such a compiler and you change MAX_COMPS_IN_SCAN.
+ */
+
+#ifndef NO_STRUCT_ASSIGN
+#define ASSIGN_STATE(dest,src)  ((dest) = (src))
+#else
+#if MAX_COMPS_IN_SCAN == 4
+#define ASSIGN_STATE(dest,src)  \
+	((dest).put_buffer = (src).put_buffer, \
+	 (dest).put_bits = (src).put_bits, \
+	 (dest).last_dc_val[0] = (src).last_dc_val[0], \
+	 (dest).last_dc_val[1] = (src).last_dc_val[1], \
+	 (dest).last_dc_val[2] = (src).last_dc_val[2], \
+	 (dest).last_dc_val[3] = (src).last_dc_val[3])
+#endif
+#endif
+
+
+typedef struct
+{
+    struct jpeg_entropy_encoder pub; /* public fields */
+
+    savable_state saved;		/* Bit buffer & DC state at start of MCU */
+
+    /* These fields are NOT loaded into local working state. */
+    unsigned int restarts_to_go;	/* MCUs left in this restart interval */
+    int next_restart_num;		/* next restart number to write (0-7) */
+
+    /* Pointers to derived tables (these workspaces have image lifespan) */
+    c_derived_tbl * dc_derived_tbls[NUM_HUFF_TBLS];
+    c_derived_tbl * ac_derived_tbls[NUM_HUFF_TBLS];
+
+    /* Statistics tables for optimization */
+    long * dc_count_ptrs[NUM_HUFF_TBLS];
+    long * ac_count_ptrs[NUM_HUFF_TBLS];
+
+    /* Following fields used only in progressive mode */
+
+    /* Mode flag: TRUE for optimization, FALSE for actual data output */
+    boolean gather_statistics;
+
+    /* next_output_byte/free_in_buffer are local copies of cinfo->dest fields.
+     */
+    JOCTET * next_output_byte;	/* => next byte to write in buffer */
+    size_t free_in_buffer;	/* # of byte spaces remaining in buffer */
+    j_compress_ptr cinfo;		/* link to cinfo (needed for dump_buffer) */
+
+    /* Coding status for AC components */
+    int ac_tbl_no;		/* the table number of the single component */
+    unsigned int EOBRUN;		/* run length of EOBs */
+    unsigned int BE;		/* # of buffered correction bits before MCU */
+    char * bit_buffer;		/* buffer for correction bits (1 per char) */
+    /* packing correction bits tightly would save some space but cost time... */
+} huff_entropy_encoder;
+
+typedef huff_entropy_encoder * huff_entropy_ptr;
+
+/* Working state while writing an MCU (sequential mode).
+ * This struct contains all the fields that are needed by subroutines.
+ */
+
+typedef struct
+{
+    JOCTET * next_output_byte;	/* => next byte to write in buffer */
+    size_t free_in_buffer;	/* # of byte spaces remaining in buffer */
+    savable_state cur;		/* Current bit buffer & DC state */
+    j_compress_ptr cinfo;		/* dump_buffer needs access to this */
+} working_state;
+
+/* MAX_CORR_BITS is the number of bits the AC refinement correction-bit
+ * buffer can hold.  Larger sizes may slightly improve compression, but
+ * 1000 is already well into the realm of overkill.
+ * The minimum safe size is 64 bits.
+ */
+
+#define MAX_CORR_BITS  1000	/* Max # of correction bits I can buffer */
+
+/* IRIGHT_SHIFT is like RIGHT_SHIFT, but works on int rather than INT32.
+ * We assume that int right shift is unsigned if INT32 right shift is,
+ * which should be safe.
+ */
+
+#ifdef RIGHT_SHIFT_IS_UNSIGNED
+#define ISHIFT_TEMPS	int ishift_temp;
+#define IRIGHT_SHIFT(x,shft)  \
+	((ishift_temp = (x)) < 0 ? \
+	 (ishift_temp >> (shft)) | ((~0) << (16-(shft))) : \
+	 (ishift_temp >> (shft)))
+#else
+#define ISHIFT_TEMPS
+#define IRIGHT_SHIFT(x,shft)	((x) >> (shft))
+#endif
+
+
+/*
+ * Compute the derived values for a Huffman table.
+ * This routine also performs some validation checks on the table.
+ */
+
+LOCAL(void)
+jpeg_make_c_derived_tbl (j_compress_ptr cinfo, boolean isDC, int tblno,
+                         c_derived_tbl ** pdtbl)
+{
+    JHUFF_TBL *htbl;
+    c_derived_tbl *dtbl;
+    int p, i, l, lastp, si, maxsymbol;
+    char huffsize[257];
+    unsigned int huffcode[257];
+    unsigned int code;
+
+    /* Note that huffsize[] and huffcode[] are filled in code-length order,
+     * paralleling the order of the symbols themselves in htbl->huffval[].
+     */
+
+    /* Find the input Huffman table */
+    if (tblno < 0 || tblno >= NUM_HUFF_TBLS)
+    {
+        ERREXIT1(cinfo, JERR_NO_HUFF_TABLE, tblno);
+    }
+    htbl =
+        isDC ? cinfo->dc_huff_tbl_ptrs[tblno] : cinfo->ac_huff_tbl_ptrs[tblno];
+    if (htbl == NULL)
+    {
+        ERREXIT1(cinfo, JERR_NO_HUFF_TABLE, tblno);
+    }
+
+    /* Allocate a workspace if we haven't already done so. */
+    if (*pdtbl == NULL)
+        *pdtbl = (c_derived_tbl *)
+                 (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
+                                             SIZEOF(c_derived_tbl));
+    dtbl = *pdtbl;
+
+    /* Figure C.1: make table of Huffman code length for each symbol */
+
+    p = 0;
+    for (l = 1; l <= 16; l++)
+    {
+        i = (int) htbl->bits[l];
+        if (i < 0 || p + i > 256)	/* protect against table overrun */
+        {
+            ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
+        }
+        while (i--)
+        {
+            huffsize[p++] = (char) l;
+        }
+    }
+    huffsize[p] = 0;
+    lastp = p;
+
+    /* Figure C.2: generate the codes themselves */
+    /* We also validate that the counts represent a legal Huffman code tree. */
+
+    code = 0;
+    si = huffsize[0];
+    p = 0;
+    while (huffsize[p])
+    {
+        while (((int) huffsize[p]) == si)
+        {
+            huffcode[p++] = code;
+            code++;
+        }
+        /* code is now 1 more than the last code used for codelength si; but
+         * it must still fit in si bits, since no code is allowed to be all ones.
+         */
+        if (((INT32) code) >= (((INT32) 1) << si))
+        {
+            ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
+        }
+        code <<= 1;
+        si++;
+    }
+
+    /* Figure C.3: generate encoding tables */
+    /* These are code and size indexed by symbol value */
+
+    /* Set all codeless symbols to have code length 0;
+     * this lets us detect duplicate VAL entries here, and later
+     * allows emit_bits to detect any attempt to emit such symbols.
+     */
+    MEMZERO(dtbl->ehufsi, SIZEOF(dtbl->ehufsi));
+
+    /* This is also a convenient place to check for out-of-range
+     * and duplicated VAL entries.  We allow 0..255 for AC symbols
+     * but only 0..15 for DC.  (We could constrain them further
+     * based on data depth and mode, but this seems enough.)
+     */
+    maxsymbol = isDC ? 15 : 255;
+
+    for (p = 0; p < lastp; p++)
+    {
+        i = htbl->huffval[p];
+        if (i < 0 || i > maxsymbol || dtbl->ehufsi[i])
+        {
+            ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
+        }
+        dtbl->ehufco[i] = huffcode[p];
+        dtbl->ehufsi[i] = huffsize[p];
+    }
+}
+
+
+/* Outputting bytes to the file.
+ * NB: these must be called only when actually outputting,
+ * that is, entropy->gather_statistics == FALSE.
+ */
+
+/* Emit a byte, taking 'action' if must suspend. */
+#define emit_byte_s(state,val,action)  \
+	{ *(state)->next_output_byte++ = (JOCTET) (val);  \
+	  if (--(state)->free_in_buffer == 0)  \
+	    if (! dump_buffer_s(state))  \
+	      { action; } }
+
+/* Emit a byte */
+#define emit_byte_e(entropy,val)  \
+	{ *(entropy)->next_output_byte++ = (JOCTET) (val);  \
+	  if (--(entropy)->free_in_buffer == 0)  \
+	    dump_buffer_e(entropy); }
+
+
+LOCAL(boolean)
+dump_buffer_s (working_state * state)
+/* Empty the output buffer; return TRUE if successful, FALSE if must suspend */
+{
+    struct jpeg_destination_mgr * dest = state->cinfo->dest;
+
+    if (! (*dest->empty_output_buffer) (state->cinfo))
+    {
+        return FALSE;
+    }
+    /* After a successful buffer dump, must reset buffer pointers */
+    state->next_output_byte = dest->next_output_byte;
+    state->free_in_buffer = dest->free_in_buffer;
+    return TRUE;
+}
+
+
+LOCAL(void)
+dump_buffer_e (huff_entropy_ptr entropy)
+/* Empty the output buffer; we do not support suspension in this case. */
+{
+    struct jpeg_destination_mgr * dest = entropy->cinfo->dest;
+
+    if (! (*dest->empty_output_buffer) (entropy->cinfo))
+    {
+        ERREXIT(entropy->cinfo, JERR_CANT_SUSPEND);
+    }
+    /* After a successful buffer dump, must reset buffer pointers */
+    entropy->next_output_byte = dest->next_output_byte;
+    entropy->free_in_buffer = dest->free_in_buffer;
+}
+
+
+/* Outputting bits to the file */
+
+/* Only the right 24 bits of put_buffer are used; the valid bits are
+ * left-justified in this part.  At most 16 bits can be passed to emit_bits
+ * in one call, and we never retain more than 7 bits in put_buffer
+ * between calls, so 24 bits are sufficient.
+ */
+
+INLINE
+LOCAL(boolean)
+emit_bits_s (working_state * state, unsigned int code, int size)
+/* Emit some bits; return TRUE if successful, FALSE if must suspend */
+{
+    /* This routine is heavily used, so it's worth coding tightly. */
+    register INT32 put_buffer = (INT32) code;
+    register int put_bits = state->cur.put_bits;
+
+    /* if size is 0, caller used an invalid Huffman table entry */
+    if (size == 0)
+    {
+        ERREXIT(state->cinfo, JERR_HUFF_MISSING_CODE);
+    }
+
+    put_buffer &= (((INT32) 1)<<size) - 1; /* mask off any extra bits in code */
+
+    put_bits += size;		/* new number of bits in buffer */
+
+    put_buffer <<= 24 - put_bits; /* align incoming bits */
+
+    put_buffer |= state->cur.put_buffer; /* and merge with old buffer contents */
+
+    while (put_bits >= 8)
+    {
+        int c = (int) ((put_buffer >> 16) & 0xFF);
+
+        emit_byte_s(state, c, return FALSE);
+        if (c == 0xFF)  		/* need to stuff a zero byte? */
+        {
+            emit_byte_s(state, 0, return FALSE);
+        }
+        put_buffer <<= 8;
+        put_bits -= 8;
+    }
+
+    state->cur.put_buffer = put_buffer; /* update state variables */
+    state->cur.put_bits = put_bits;
+
+    return TRUE;
+}
+
+
+INLINE
+LOCAL(void)
+emit_bits_e (huff_entropy_ptr entropy, unsigned int code, int size)
+/* Emit some bits, unless we are in gather mode */
+{
+    /* This routine is heavily used, so it's worth coding tightly. */
+    register INT32 put_buffer = (INT32) code;
+    register int put_bits = entropy->saved.put_bits;
+
+    /* if size is 0, caller used an invalid Huffman table entry */
+    if (size == 0)
+    {
+        ERREXIT(entropy->cinfo, JERR_HUFF_MISSING_CODE);
+    }
+
+    if (entropy->gather_statistics)
+    {
+        return;    /* do nothing if we're only getting stats */
+    }
+
+    put_buffer &= (((INT32) 1)<<size) - 1; /* mask off any extra bits in code */
+
+    put_bits += size;		/* new number of bits in buffer */
+
+    put_buffer <<= 24 - put_bits; /* align incoming bits */
+
+    /* and merge with old buffer contents */
+    put_buffer |= entropy->saved.put_buffer;
+
+    while (put_bits >= 8)
+    {
+        int c = (int) ((put_buffer >> 16) & 0xFF);
+
+        emit_byte_e(entropy, c);
+        if (c == 0xFF)  		/* need to stuff a zero byte? */
+        {
+            emit_byte_e(entropy, 0);
+        }
+        put_buffer <<= 8;
+        put_bits -= 8;
+    }
+
+    entropy->saved.put_buffer = put_buffer; /* update variables */
+    entropy->saved.put_bits = put_bits;
+}
+
+
+LOCAL(boolean)
+flush_bits_s (working_state * state)
+{
+    if (! emit_bits_s(state, 0x7F, 7)) /* fill any partial byte with ones */
+    {
+        return FALSE;
+    }
+    state->cur.put_buffer = 0;	     /* and reset bit-buffer to empty */
+    state->cur.put_bits = 0;
+    return TRUE;
+}
+
+
+LOCAL(void)
+flush_bits_e (huff_entropy_ptr entropy)
+{
+    emit_bits_e(entropy, 0x7F, 7); /* fill any partial byte with ones */
+    entropy->saved.put_buffer = 0; /* and reset bit-buffer to empty */
+    entropy->saved.put_bits = 0;
+}
+
+
+/*
+ * Emit (or just count) a Huffman symbol.
+ */
+
+INLINE
+LOCAL(void)
+emit_dc_symbol (huff_entropy_ptr entropy, int tbl_no, int symbol)
+{
+    if (entropy->gather_statistics)
+    {
+        entropy->dc_count_ptrs[tbl_no][symbol]++;
+    }
+    else
+    {
+        c_derived_tbl * tbl = entropy->dc_derived_tbls[tbl_no];
+        emit_bits_e(entropy, tbl->ehufco[symbol], tbl->ehufsi[symbol]);
+    }
+}
+
+
+INLINE
+LOCAL(void)
+emit_ac_symbol (huff_entropy_ptr entropy, int tbl_no, int symbol)
+{
+    if (entropy->gather_statistics)
+    {
+        entropy->ac_count_ptrs[tbl_no][symbol]++;
+    }
+    else
+    {
+        c_derived_tbl * tbl = entropy->ac_derived_tbls[tbl_no];
+        emit_bits_e(entropy, tbl->ehufco[symbol], tbl->ehufsi[symbol]);
+    }
+}
+
+
+/*
+ * Emit bits from a correction bit buffer.
+ */
+
+LOCAL(void)
+emit_buffered_bits (huff_entropy_ptr entropy, char * bufstart,
+                    unsigned int nbits)
+{
+    if (entropy->gather_statistics)
+    {
+        return;    /* no real work */
+    }
+
+    while (nbits > 0)
+    {
+        emit_bits_e(entropy, (unsigned int) (*bufstart), 1);
+        bufstart++;
+        nbits--;
+    }
+}
+
+
+/*
+ * Emit any pending EOBRUN symbol.
+ */
+
+LOCAL(void)
+emit_eobrun (huff_entropy_ptr entropy)
+{
+    register int temp, nbits;
+
+    if (entropy->EOBRUN > 0)  	/* if there is any pending EOBRUN */
+    {
+        temp = entropy->EOBRUN;
+        nbits = 0;
+        while ((temp >>= 1))
+        {
+            nbits++;
+        }
+        /* safety check: shouldn't happen given limited correction-bit buffer */
+        if (nbits > 14)
+        {
+            ERREXIT(entropy->cinfo, JERR_HUFF_MISSING_CODE);
+        }
+
+        emit_ac_symbol(entropy, entropy->ac_tbl_no, nbits << 4);
+        if (nbits)
+        {
+            emit_bits_e(entropy, entropy->EOBRUN, nbits);
+        }
+
+        entropy->EOBRUN = 0;
+
+        /* Emit any buffered correction bits */
+        emit_buffered_bits(entropy, entropy->bit_buffer, entropy->BE);
+        entropy->BE = 0;
+    }
+}
+
+
+/*
+ * Emit a restart marker & resynchronize predictions.
+ */
+
+LOCAL(boolean)
+emit_restart_s (working_state * state, int restart_num)
+{
+    int ci;
+
+    if (! flush_bits_s(state))
+    {
+        return FALSE;
+    }
+
+    emit_byte_s(state, 0xFF, return FALSE);
+    emit_byte_s(state, JPEG_RST0 + restart_num, return FALSE);
+
+    /* Re-initialize DC predictions to 0 */
+    for (ci = 0; ci < state->cinfo->comps_in_scan; ci++)
+    {
+        state->cur.last_dc_val[ci] = 0;
+    }
+
+    /* The restart counter is not updated until we successfully write the MCU. */
+
+    return TRUE;
+}
+
+
+LOCAL(void)
+emit_restart_e (huff_entropy_ptr entropy, int restart_num)
+{
+    int ci;
+
+    emit_eobrun(entropy);
+
+    if (! entropy->gather_statistics)
+    {
+        flush_bits_e(entropy);
+        emit_byte_e(entropy, 0xFF);
+        emit_byte_e(entropy, JPEG_RST0 + restart_num);
+    }
+
+    if (entropy->cinfo->Ss == 0)
+    {
+        /* Re-initialize DC predictions to 0 */
+        for (ci = 0; ci < entropy->cinfo->comps_in_scan; ci++)
+        {
+            entropy->saved.last_dc_val[ci] = 0;
+        }
+    }
+    else
+    {
+        /* Re-initialize all AC-related fields to 0 */
+        entropy->EOBRUN = 0;
+        entropy->BE = 0;
+    }
+}
+
+
+/*
+ * MCU encoding for DC initial scan (either spectral selection,
+ * or first pass of successive approximation).
+ */
+
+METHODDEF(boolean)
+encode_mcu_DC_first (j_compress_ptr cinfo, JBLOCKROW *MCU_data)
+{
+    huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
+    register int temp, temp2;
+    register int nbits;
+    int blkn, ci;
+    int Al = cinfo->Al;
+    JBLOCKROW block;
+    jpeg_component_info * compptr;
+    ISHIFT_TEMPS
+
+    entropy->next_output_byte = cinfo->dest->next_output_byte;
+    entropy->free_in_buffer = cinfo->dest->free_in_buffer;
+
+    /* Emit restart marker if needed */
+    if (cinfo->restart_interval)
+        if (entropy->restarts_to_go == 0)
+        {
+            emit_restart_e(entropy, entropy->next_restart_num);
+        }
+
+    /* Encode the MCU data blocks */
+    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++)
+    {
+        block = MCU_data[blkn];
+        ci = cinfo->MCU_membership[blkn];
+        compptr = cinfo->cur_comp_info[ci];
+
+        /* Compute the DC value after the required point transform by Al.
+         * This is simply an arithmetic right shift.
+         */
+        temp2 = IRIGHT_SHIFT((int) ((*block)[0]), Al);
+
+        /* DC differences are figured on the point-transformed values. */
+        temp = temp2 - entropy->saved.last_dc_val[ci];
+        entropy->saved.last_dc_val[ci] = temp2;
+
+        /* Encode the DC coefficient difference per section G.1.2.1 */
+        temp2 = temp;
+        if (temp < 0)
+        {
+            temp = -temp;		/* temp is abs value of input */
+            /* For a negative input, want temp2 = bitwise complement of abs(input) */
+            /* This code assumes we are on a two's complement machine */
+            temp2--;
+        }
+
+        /* Find the number of bits needed for the magnitude of the coefficient */
+        nbits = 0;
+        while (temp)
+        {
+            nbits++;
+            temp >>= 1;
+        }
+        /* Check for out-of-range coefficient values.
+         * Since we're encoding a difference, the range limit is twice as much.
+         */
+        if (nbits > MAX_COEF_BITS+1)
+        {
+            ERREXIT(cinfo, JERR_BAD_DCT_COEF);
+        }
+
+        /* Count/emit the Huffman-coded symbol for the number of bits */
+        emit_dc_symbol(entropy, compptr->dc_tbl_no, nbits);
+
+        /* Emit that number of bits of the value, if positive, */
+        /* or the complement of its magnitude, if negative. */
+        if (nbits)			/* emit_bits rejects calls with size 0 */
+        {
+            emit_bits_e(entropy, (unsigned int) temp2, nbits);
+        }
+    }
+
+    cinfo->dest->next_output_byte = entropy->next_output_byte;
+    cinfo->dest->free_in_buffer = entropy->free_in_buffer;
+
+    /* Update restart-interval state too */
+    if (cinfo->restart_interval)
+    {
+        if (entropy->restarts_to_go == 0)
+        {
+            entropy->restarts_to_go = cinfo->restart_interval;
+            entropy->next_restart_num++;
+            entropy->next_restart_num &= 7;
+        }
+        entropy->restarts_to_go--;
+    }
+
+    return TRUE;
+}
+
+
+/*
+ * MCU encoding for AC initial scan (either spectral selection,
+ * or first pass of successive approximation).
+ */
+
+METHODDEF(boolean)
+encode_mcu_AC_first (j_compress_ptr cinfo, JBLOCKROW *MCU_data)
+{
+    huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
+    register int temp, temp2;
+    register int nbits;
+    register int r, k;
+    int Se, Al;
+    const int * natural_order;
+    JBLOCKROW block;
+
+    entropy->next_output_byte = cinfo->dest->next_output_byte;
+    entropy->free_in_buffer = cinfo->dest->free_in_buffer;
+
+    /* Emit restart marker if needed */
+    if (cinfo->restart_interval)
+        if (entropy->restarts_to_go == 0)
+        {
+            emit_restart_e(entropy, entropy->next_restart_num);
+        }
+
+    Se = cinfo->Se;
+    Al = cinfo->Al;
+    natural_order = cinfo->natural_order;
+
+    /* Encode the MCU data block */
+    block = MCU_data[0];
+
+    /* Encode the AC coefficients per section G.1.2.2, fig. G.3 */
+
+    r = 0;			/* r = run length of zeros */
+
+    for (k = cinfo->Ss; k <= Se; k++)
+    {
+        if ((temp = (*block)[natural_order[k]]) == 0)
+        {
+            r++;
+            continue;
+        }
+        /* We must apply the point transform by Al.  For AC coefficients this
+         * is an integer division with rounding towards 0.  To do this portably
+         * in C, we shift after obtaining the absolute value; so the code is
+         * interwoven with finding the abs value (temp) and output bits (temp2).
+         */
+        if (temp < 0)
+        {
+            temp = -temp;		/* temp is abs value of input */
+            temp >>= Al;		/* apply the point transform */
+            /* For a negative coef, want temp2 = bitwise complement of abs(coef) */
+            temp2 = ~temp;
+        }
+        else
+        {
+            temp >>= Al;		/* apply the point transform */
+            temp2 = temp;
+        }
+        /* Watch out for case that nonzero coef is zero after point transform */
+        if (temp == 0)
+        {
+            r++;
+            continue;
+        }
+
+        /* Emit any pending EOBRUN */
+        if (entropy->EOBRUN > 0)
+        {
+            emit_eobrun(entropy);
+        }
+        /* if run length > 15, must emit special run-length-16 codes (0xF0) */
+        while (r > 15)
+        {
+            emit_ac_symbol(entropy, entropy->ac_tbl_no, 0xF0);
+            r -= 16;
+        }
+
+        /* Find the number of bits needed for the magnitude of the coefficient */
+        nbits = 1;			/* there must be at least one 1 bit */
+        while ((temp >>= 1))
+        {
+            nbits++;
+        }
+        /* Check for out-of-range coefficient values */
+        if (nbits > MAX_COEF_BITS)
+        {
+            ERREXIT(cinfo, JERR_BAD_DCT_COEF);
+        }
+
+        /* Count/emit Huffman symbol for run length / number of bits */
+        emit_ac_symbol(entropy, entropy->ac_tbl_no, (r << 4) + nbits);
+
+        /* Emit that number of bits of the value, if positive, */
+        /* or the complement of its magnitude, if negative. */
+        emit_bits_e(entropy, (unsigned int) temp2, nbits);
+
+        r = 0;			/* reset zero run length */
+    }
+
+    if (r > 0)  			/* If there are trailing zeroes, */
+    {
+        entropy->EOBRUN++;		/* count an EOB */
+        if (entropy->EOBRUN == 0x7FFF)
+        {
+            emit_eobrun(entropy);    /* force it out to avoid overflow */
+        }
+    }
+
+    cinfo->dest->next_output_byte = entropy->next_output_byte;
+    cinfo->dest->free_in_buffer = entropy->free_in_buffer;
+
+    /* Update restart-interval state too */
+    if (cinfo->restart_interval)
+    {
+        if (entropy->restarts_to_go == 0)
+        {
+            entropy->restarts_to_go = cinfo->restart_interval;
+            entropy->next_restart_num++;
+            entropy->next_restart_num &= 7;
+        }
+        entropy->restarts_to_go--;
+    }
+
+    return TRUE;
+}
+
+
+/*
+ * MCU encoding for DC successive approximation refinement scan.
+ * Note: we assume such scans can be multi-component, although the spec
+ * is not very clear on the point.
+ */
+
+METHODDEF(boolean)
+encode_mcu_DC_refine (j_compress_ptr cinfo, JBLOCKROW *MCU_data)
+{
+    huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
+    register int temp;
+    int blkn;
+    int Al = cinfo->Al;
+    JBLOCKROW block;
+
+    entropy->next_output_byte = cinfo->dest->next_output_byte;
+    entropy->free_in_buffer = cinfo->dest->free_in_buffer;
+
+    /* Emit restart marker if needed */
+    if (cinfo->restart_interval)
+        if (entropy->restarts_to_go == 0)
+        {
+            emit_restart_e(entropy, entropy->next_restart_num);
+        }
+
+    /* Encode the MCU data blocks */
+    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++)
+    {
+        block = MCU_data[blkn];
+
+        /* We simply emit the Al'th bit of the DC coefficient value. */
+        temp = (*block)[0];
+        emit_bits_e(entropy, (unsigned int) (temp >> Al), 1);
+    }
+
+    cinfo->dest->next_output_byte = entropy->next_output_byte;
+    cinfo->dest->free_in_buffer = entropy->free_in_buffer;
+
+    /* Update restart-interval state too */
+    if (cinfo->restart_interval)
+    {
+        if (entropy->restarts_to_go == 0)
+        {
+            entropy->restarts_to_go = cinfo->restart_interval;
+            entropy->next_restart_num++;
+            entropy->next_restart_num &= 7;
+        }
+        entropy->restarts_to_go--;
+    }
+
+    return TRUE;
+}
+
+
+/*
+ * MCU encoding for AC successive approximation refinement scan.
+ */
+
+METHODDEF(boolean)
+encode_mcu_AC_refine (j_compress_ptr cinfo, JBLOCKROW *MCU_data)
+{
+    huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
+    register int temp;
+    register int r, k;
+    int EOB;
+    char *BR_buffer;
+    unsigned int BR;
+    int Se, Al;
+    const int * natural_order;
+    JBLOCKROW block;
+    int absvalues[DCTSIZE2];
+
+    entropy->next_output_byte = cinfo->dest->next_output_byte;
+    entropy->free_in_buffer = cinfo->dest->free_in_buffer;
+
+    /* Emit restart marker if needed */
+    if (cinfo->restart_interval)
+        if (entropy->restarts_to_go == 0)
+        {
+            emit_restart_e(entropy, entropy->next_restart_num);
+        }
+
+    Se = cinfo->Se;
+    Al = cinfo->Al;
+    natural_order = cinfo->natural_order;
+
+    /* Encode the MCU data block */
+    block = MCU_data[0];
+
+    /* It is convenient to make a pre-pass to determine the transformed
+     * coefficients' absolute values and the EOB position.
+     */
+    EOB = 0;
+    for (k = cinfo->Ss; k <= Se; k++)
+    {
+        temp = (*block)[natural_order[k]];
+        /* We must apply the point transform by Al.  For AC coefficients this
+         * is an integer division with rounding towards 0.  To do this portably
+         * in C, we shift after obtaining the absolute value.
+         */
+        if (temp < 0)
+        {
+            temp = -temp;    /* temp is abs value of input */
+        }
+        temp >>= Al;		/* apply the point transform */
+        absvalues[k] = temp;	/* save abs value for main pass */
+        if (temp == 1)
+        {
+            EOB = k;    /* EOB = index of last newly-nonzero coef */
+        }
+    }
+
+    /* Encode the AC coefficients per section G.1.2.3, fig. G.7 */
+
+    r = 0;			/* r = run length of zeros */
+    BR = 0;			/* BR = count of buffered bits added now */
+    BR_buffer = entropy->bit_buffer + entropy->BE; /* Append bits to buffer */
+
+    for (k = cinfo->Ss; k <= Se; k++)
+    {
+        if ((temp = absvalues[k]) == 0)
+        {
+            r++;
+            continue;
+        }
+
+        /* Emit any required ZRLs, but not if they can be folded into EOB */
+        while (r > 15 && k <= EOB)
+        {
+            /* emit any pending EOBRUN and the BE correction bits */
+            emit_eobrun(entropy);
+            /* Emit ZRL */
+            emit_ac_symbol(entropy, entropy->ac_tbl_no, 0xF0);
+            r -= 16;
+            /* Emit buffered correction bits that must be associated with ZRL */
+            emit_buffered_bits(entropy, BR_buffer, BR);
+            BR_buffer = entropy->bit_buffer; /* BE bits are gone now */
+            BR = 0;
+        }
+
+        /* If the coef was previously nonzero, it only needs a correction bit.
+         * NOTE: a straight translation of the spec's figure G.7 would suggest
+         * that we also need to test r > 15.  But if r > 15, we can only get here
+         * if k > EOB, which implies that this coefficient is not 1.
+         */
+        if (temp > 1)
+        {
+            /* The correction bit is the next bit of the absolute value. */
+            BR_buffer[BR++] = (char) (temp & 1);
+            continue;
+        }
+
+        /* Emit any pending EOBRUN and the BE correction bits */
+        emit_eobrun(entropy);
+
+        /* Count/emit Huffman symbol for run length / number of bits */
+        emit_ac_symbol(entropy, entropy->ac_tbl_no, (r << 4) + 1);
+
+        /* Emit output bit for newly-nonzero coef */
+        temp = ((*block)[natural_order[k]] < 0) ? 0 : 1;
+        emit_bits_e(entropy, (unsigned int) temp, 1);
+
+        /* Emit buffered correction bits that must be associated with this code */
+        emit_buffered_bits(entropy, BR_buffer, BR);
+        BR_buffer = entropy->bit_buffer; /* BE bits are gone now */
+        BR = 0;
+        r = 0;			/* reset zero run length */
+    }
+
+    if (r > 0 || BR > 0)  	/* If there are trailing zeroes, */
+    {
+        entropy->EOBRUN++;		/* count an EOB */
+        entropy->BE += BR;		/* concat my correction bits to older ones */
+        /* We force out the EOB if we risk either:
+         * 1. overflow of the EOB counter;
+         * 2. overflow of the correction bit buffer during the next MCU.
+         */
+        if (entropy->EOBRUN == 0x7FFF || entropy->BE > (MAX_CORR_BITS-DCTSIZE2+1))
+        {
+            emit_eobrun(entropy);
+        }
+    }
+
+    cinfo->dest->next_output_byte = entropy->next_output_byte;
+    cinfo->dest->free_in_buffer = entropy->free_in_buffer;
+
+    /* Update restart-interval state too */
+    if (cinfo->restart_interval)
+    {
+        if (entropy->restarts_to_go == 0)
+        {
+            entropy->restarts_to_go = cinfo->restart_interval;
+            entropy->next_restart_num++;
+            entropy->next_restart_num &= 7;
+        }
+        entropy->restarts_to_go--;
+    }
+
+    return TRUE;
+}
+
+
+/* Encode a single block's worth of coefficients */
+
+LOCAL(boolean)
+encode_one_block (working_state * state, JCOEFPTR block, int last_dc_val,
+                  c_derived_tbl *dctbl, c_derived_tbl *actbl)
+{
+    register int temp, temp2;
+    register int nbits;
+    register int k, r, i;
+    int Se = state->cinfo->lim_Se;
+    const int * natural_order = state->cinfo->natural_order;
+
+    /* Encode the DC coefficient difference per section F.1.2.1 */
+
+    temp = temp2 = block[0] - last_dc_val;
+
+    if (temp < 0)
+    {
+        temp = -temp;		/* temp is abs value of input */
+        /* For a negative input, want temp2 = bitwise complement of abs(input) */
+        /* This code assumes we are on a two's complement machine */
+        temp2--;
+    }
+
+    /* Find the number of bits needed for the magnitude of the coefficient */
+    nbits = 0;
+    while (temp)
+    {
+        nbits++;
+        temp >>= 1;
+    }
+    /* Check for out-of-range coefficient values.
+     * Since we're encoding a difference, the range limit is twice as much.
+     */
+    if (nbits > MAX_COEF_BITS+1)
+    {
+        ERREXIT(state->cinfo, JERR_BAD_DCT_COEF);
+    }
+
+    /* Emit the Huffman-coded symbol for the number of bits */
+    if (! emit_bits_s(state, dctbl->ehufco[nbits], dctbl->ehufsi[nbits]))
+    {
+        return FALSE;
+    }
+
+    /* Emit that number of bits of the value, if positive, */
+    /* or the complement of its magnitude, if negative. */
+    if (nbits)			/* emit_bits rejects calls with size 0 */
+        if (! emit_bits_s(state, (unsigned int) temp2, nbits))
+        {
+            return FALSE;
+        }
+
+    /* Encode the AC coefficients per section F.1.2.2 */
+
+    r = 0;			/* r = run length of zeros */
+
+    for (k = 1; k <= Se; k++)
+    {
+        if ((temp = block[natural_order[k]]) == 0)
+        {
+            r++;
+        }
+        else
+        {
+            /* if run length > 15, must emit special run-length-16 codes (0xF0) */
+            while (r > 15)
+            {
+                if (! emit_bits_s(state, actbl->ehufco[0xF0], actbl->ehufsi[0xF0]))
+                {
+                    return FALSE;
+                }
+                r -= 16;
+            }
+
+            temp2 = temp;
+            if (temp < 0)
+            {
+                temp = -temp;		/* temp is abs value of input */
+                /* This code assumes we are on a two's complement machine */
+                temp2--;
+            }
+
+            /* Find the number of bits needed for the magnitude of the coefficient */
+            nbits = 1;		/* there must be at least one 1 bit */
+            while ((temp >>= 1))
+            {
+                nbits++;
+            }
+            /* Check for out-of-range coefficient values */
+            if (nbits > MAX_COEF_BITS)
+            {
+                ERREXIT(state->cinfo, JERR_BAD_DCT_COEF);
+            }
+
+            /* Emit Huffman symbol for run length / number of bits */
+            i = (r << 4) + nbits;
+            if (! emit_bits_s(state, actbl->ehufco[i], actbl->ehufsi[i]))
+            {
+                return FALSE;
+            }
+
+            /* Emit that number of bits of the value, if positive, */
+            /* or the complement of its magnitude, if negative. */
+            if (! emit_bits_s(state, (unsigned int) temp2, nbits))
+            {
+                return FALSE;
+            }
+
+            r = 0;
+        }
+    }
+
+    /* If the last coef(s) were zero, emit an end-of-block code */
+    if (r > 0)
+        if (! emit_bits_s(state, actbl->ehufco[0], actbl->ehufsi[0]))
+        {
+            return FALSE;
+        }
+
+    return TRUE;
+}
+
+
+/*
+ * Encode and output one MCU's worth of Huffman-compressed coefficients.
+ */
+
+METHODDEF(boolean)
+encode_mcu_huff (j_compress_ptr cinfo, JBLOCKROW *MCU_data)
+{
+    huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
+    working_state state;
+    int blkn, ci;
+    jpeg_component_info * compptr;
+
+    /* Load up working state */
+    state.next_output_byte = cinfo->dest->next_output_byte;
+    state.free_in_buffer = cinfo->dest->free_in_buffer;
+    ASSIGN_STATE(state.cur, entropy->saved);
+    state.cinfo = cinfo;
+
+    /* Emit restart marker if needed */
+    if (cinfo->restart_interval)
+    {
+        if (entropy->restarts_to_go == 0)
+            if (! emit_restart_s(&state, entropy->next_restart_num))
+            {
+                return FALSE;
+            }
+    }
+
+    /* Encode the MCU data blocks */
+    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++)
+    {
+        ci = cinfo->MCU_membership[blkn];
+        compptr = cinfo->cur_comp_info[ci];
+        if (! encode_one_block(&state,
+                               MCU_data[blkn][0], state.cur.last_dc_val[ci],
+                               entropy->dc_derived_tbls[compptr->dc_tbl_no],
+                               entropy->ac_derived_tbls[compptr->ac_tbl_no]))
+        {
+            return FALSE;
+        }
+        /* Update last_dc_val */
+        state.cur.last_dc_val[ci] = MCU_data[blkn][0][0];
+    }
+
+    /* Completed MCU, so update state */
+    cinfo->dest->next_output_byte = state.next_output_byte;
+    cinfo->dest->free_in_buffer = state.free_in_buffer;
+    ASSIGN_STATE(entropy->saved, state.cur);
+
+    /* Update restart-interval state too */
+    if (cinfo->restart_interval)
+    {
+        if (entropy->restarts_to_go == 0)
+        {
+            entropy->restarts_to_go = cinfo->restart_interval;
+            entropy->next_restart_num++;
+            entropy->next_restart_num &= 7;
+        }
+        entropy->restarts_to_go--;
+    }
+
+    return TRUE;
+}
+
+
+/*
+ * Finish up at the end of a Huffman-compressed scan.
+ */
+
+METHODDEF(void)
+finish_pass_huff (j_compress_ptr cinfo)
+{
+    huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
+    working_state state;
+
+    if (cinfo->progressive_mode)
+    {
+        entropy->next_output_byte = cinfo->dest->next_output_byte;
+        entropy->free_in_buffer = cinfo->dest->free_in_buffer;
+
+        /* Flush out any buffered data */
+        emit_eobrun(entropy);
+        flush_bits_e(entropy);
+
+        cinfo->dest->next_output_byte = entropy->next_output_byte;
+        cinfo->dest->free_in_buffer = entropy->free_in_buffer;
+    }
+    else
+    {
+        /* Load up working state ... flush_bits needs it */
+        state.next_output_byte = cinfo->dest->next_output_byte;
+        state.free_in_buffer = cinfo->dest->free_in_buffer;
+        ASSIGN_STATE(state.cur, entropy->saved);
+        state.cinfo = cinfo;
+
+        /* Flush out the last data */
+        if (! flush_bits_s(&state))
+        {
+            ERREXIT(cinfo, JERR_CANT_SUSPEND);
+        }
+
+        /* Update state */
+        cinfo->dest->next_output_byte = state.next_output_byte;
+        cinfo->dest->free_in_buffer = state.free_in_buffer;
+        ASSIGN_STATE(entropy->saved, state.cur);
+    }
+}
+
+
+/*
+ * Huffman coding optimization.
+ *
+ * We first scan the supplied data and count the number of uses of each symbol
+ * that is to be Huffman-coded. (This process MUST agree with the code above.)
+ * Then we build a Huffman coding tree for the observed counts.
+ * Symbols which are not needed at all for the particular image are not
+ * assigned any code, which saves space in the DHT marker as well as in
+ * the compressed data.
+ */
+
+
+/* Process a single block's worth of coefficients */
+
+LOCAL(void)
+htest_one_block (j_compress_ptr cinfo, JCOEFPTR block, int last_dc_val,
+                 long dc_counts[], long ac_counts[])
+{
+    register int temp;
+    register int nbits;
+    register int k, r;
+    int Se = cinfo->lim_Se;
+    const int * natural_order = cinfo->natural_order;
+
+    /* Encode the DC coefficient difference per section F.1.2.1 */
+
+    temp = block[0] - last_dc_val;
+    if (temp < 0)
+    {
+        temp = -temp;
+    }
+
+    /* Find the number of bits needed for the magnitude of the coefficient */
+    nbits = 0;
+    while (temp)
+    {
+        nbits++;
+        temp >>= 1;
+    }
+    /* Check for out-of-range coefficient values.
+     * Since we're encoding a difference, the range limit is twice as much.
+     */
+    if (nbits > MAX_COEF_BITS+1)
+    {
+        ERREXIT(cinfo, JERR_BAD_DCT_COEF);
+    }
+
+    /* Count the Huffman symbol for the number of bits */
+    dc_counts[nbits]++;
+
+    /* Encode the AC coefficients per section F.1.2.2 */
+
+    r = 0;			/* r = run length of zeros */
+
+    for (k = 1; k <= Se; k++)
+    {
+        if ((temp = block[natural_order[k]]) == 0)
+        {
+            r++;
+        }
+        else
+        {
+            /* if run length > 15, must emit special run-length-16 codes (0xF0) */
+            while (r > 15)
+            {
+                ac_counts[0xF0]++;
+                r -= 16;
+            }
+
+            /* Find the number of bits needed for the magnitude of the coefficient */
+            if (temp < 0)
+            {
+                temp = -temp;
+            }
+
+            /* Find the number of bits needed for the magnitude of the coefficient */
+            nbits = 1;		/* there must be at least one 1 bit */
+            while ((temp >>= 1))
+            {
+                nbits++;
+            }
+            /* Check for out-of-range coefficient values */
+            if (nbits > MAX_COEF_BITS)
+            {
+                ERREXIT(cinfo, JERR_BAD_DCT_COEF);
+            }
+
+            /* Count Huffman symbol for run length / number of bits */
+            ac_counts[(r << 4) + nbits]++;
+
+            r = 0;
+        }
+    }
+
+    /* If the last coef(s) were zero, emit an end-of-block code */
+    if (r > 0)
+    {
+        ac_counts[0]++;
+    }
+}
+
+
+/*
+ * Trial-encode one MCU's worth of Huffman-compressed coefficients.
+ * No data is actually output, so no suspension return is possible.
+ */
+
+METHODDEF(boolean)
+encode_mcu_gather (j_compress_ptr cinfo, JBLOCKROW *MCU_data)
+{
+    huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
+    int blkn, ci;
+    jpeg_component_info * compptr;
+
+    /* Take care of restart intervals if needed */
+    if (cinfo->restart_interval)
+    {
+        if (entropy->restarts_to_go == 0)
+        {
+            /* Re-initialize DC predictions to 0 */
+            for (ci = 0; ci < cinfo->comps_in_scan; ci++)
+            {
+                entropy->saved.last_dc_val[ci] = 0;
+            }
+            /* Update restart state */
+            entropy->restarts_to_go = cinfo->restart_interval;
+        }
+        entropy->restarts_to_go--;
+    }
+
+    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++)
+    {
+        ci = cinfo->MCU_membership[blkn];
+        compptr = cinfo->cur_comp_info[ci];
+        htest_one_block(cinfo, MCU_data[blkn][0], entropy->saved.last_dc_val[ci],
+                        entropy->dc_count_ptrs[compptr->dc_tbl_no],
+                        entropy->ac_count_ptrs[compptr->ac_tbl_no]);
+        entropy->saved.last_dc_val[ci] = MCU_data[blkn][0][0];
+    }
+
+    return TRUE;
+}
+
+
+/*
+ * Generate the best Huffman code table for the given counts, fill htbl.
+ *
+ * The JPEG standard requires that no symbol be assigned a codeword of all
+ * one bits (so that padding bits added at the end of a compressed segment
+ * can't look like a valid code).  Because of the canonical ordering of
+ * codewords, this just means that there must be an unused slot in the
+ * longest codeword length category.  Section K.2 of the JPEG spec suggests
+ * reserving such a slot by pretending that symbol 256 is a valid symbol
+ * with count 1.  In theory that's not optimal; giving it count zero but
+ * including it in the symbol set anyway should give a better Huffman code.
+ * But the theoretically better code actually seems to come out worse in
+ * practice, because it produces more all-ones bytes (which incur stuffed
+ * zero bytes in the final file).  In any case the difference is tiny.
+ *
+ * The JPEG standard requires Huffman codes to be no more than 16 bits long.
+ * If some symbols have a very small but nonzero probability, the Huffman tree
+ * must be adjusted to meet the code length restriction.  We currently use
+ * the adjustment method suggested in JPEG section K.2.  This method is *not*
+ * optimal; it may not choose the best possible limited-length code.  But
+ * typically only very-low-frequency symbols will be given less-than-optimal
+ * lengths, so the code is almost optimal.  Experimental comparisons against
+ * an optimal limited-length-code algorithm indicate that the difference is
+ * microscopic --- usually less than a hundredth of a percent of total size.
+ * So the extra complexity of an optimal algorithm doesn't seem worthwhile.
+ */
+
+LOCAL(void)
+jpeg_gen_optimal_table (j_compress_ptr cinfo, JHUFF_TBL * htbl, long freq[])
+{
+#define MAX_CLEN 32		/* assumed maximum initial code length */
+    UINT8 bits[MAX_CLEN+1];	/* bits[k] = # of symbols with code length k */
+    int codesize[257];		/* codesize[k] = code length of symbol k */
+    int others[257];		/* next symbol in current branch of tree */
+    int c1, c2;
+    int p, i, j;
+    long v;
+
+    /* This algorithm is explained in section K.2 of the JPEG standard */
+
+    MEMZERO(bits, SIZEOF(bits));
+    MEMZERO(codesize, SIZEOF(codesize));
+    for (i = 0; i < 257; i++)
+    {
+        others[i] = -1;    /* init links to empty */
+    }
+
+    freq[256] = 1;		/* make sure 256 has a nonzero count */
+    /* Including the pseudo-symbol 256 in the Huffman procedure guarantees
+     * that no real symbol is given code-value of all ones, because 256
+     * will be placed last in the largest codeword category.
+     */
+
+    /* Huffman's basic algorithm to assign optimal code lengths to symbols */
+
+    for (;;)
+    {
+        /* Find the smallest nonzero frequency, set c1 = its symbol */
+        /* In case of ties, take the larger symbol number */
+        c1 = -1;
+        v = 1000000000L;
+        for (i = 0; i <= 256; i++)
+        {
+            if (freq[i] && freq[i] <= v)
+            {
+                v = freq[i];
+                c1 = i;
+            }
+        }
+
+        /* Find the next smallest nonzero frequency, set c2 = its symbol */
+        /* In case of ties, take the larger symbol number */
+        c2 = -1;
+        v = 1000000000L;
+        for (i = 0; i <= 256; i++)
+        {
+            if (freq[i] && freq[i] <= v && i != c1)
+            {
+                v = freq[i];
+                c2 = i;
+            }
+        }
+
+        /* Done if we've merged everything into one frequency */
+        if (c2 < 0)
+        {
+            break;
+        }
+
+        /* Else merge the two counts/trees */
+        freq[c1] += freq[c2];
+        freq[c2] = 0;
+
+        /* Increment the codesize of everything in c1's tree branch */
+        codesize[c1]++;
+        while (others[c1] >= 0)
+        {
+            c1 = others[c1];
+            codesize[c1]++;
+        }
+
+        others[c1] = c2;		/* chain c2 onto c1's tree branch */
+
+        /* Increment the codesize of everything in c2's tree branch */
+        codesize[c2]++;
+        while (others[c2] >= 0)
+        {
+            c2 = others[c2];
+            codesize[c2]++;
+        }
+    }
+
+    /* Now count the number of symbols of each code length */
+    for (i = 0; i <= 256; i++)
+    {
+        if (codesize[i])
+        {
+            /* The JPEG standard seems to think that this can't happen, */
+            /* but I'm paranoid... */
+            if (codesize[i] > MAX_CLEN)
+            {
+                ERREXIT(cinfo, JERR_HUFF_CLEN_OVERFLOW);
+            }
+
+            bits[codesize[i]]++;
+        }
+    }
+
+    /* JPEG doesn't allow symbols with code lengths over 16 bits, so if the pure
+     * Huffman procedure assigned any such lengths, we must adjust the coding.
+     * Here is what the JPEG spec says about how this next bit works:
+     * Since symbols are paired for the longest Huffman code, the symbols are
+     * removed from this length category two at a time.  The prefix for the pair
+     * (which is one bit shorter) is allocated to one of the pair; then,
+     * skipping the BITS entry for that prefix length, a code word from the next
+     * shortest nonzero BITS entry is converted into a prefix for two code words
+     * one bit longer.
+     */
+
+    for (i = MAX_CLEN; i > 16; i--)
+    {
+        while (bits[i] > 0)
+        {
+            j = i - 2;		/* find length of new prefix to be used */
+            while (bits[j] == 0)
+            {
+                j--;
+            }
+
+            bits[i] -= 2;		/* remove two symbols */
+            bits[i-1]++;		/* one goes in this length */
+            bits[j+1] += 2;		/* two new symbols in this length */
+            bits[j]--;		/* symbol of this length is now a prefix */
+        }
+    }
+
+    /* Remove the count for the pseudo-symbol 256 from the largest codelength */
+    while (bits[i] == 0)		/* find largest codelength still in use */
+    {
+        i--;
+    }
+    bits[i]--;
+
+    /* Return final symbol counts (only for lengths 0..16) */
+    MEMCOPY(htbl->bits, bits, SIZEOF(htbl->bits));
+
+    /* Return a list of the symbols sorted by code length */
+    /* It's not real clear to me why we don't need to consider the codelength
+     * changes made above, but the JPEG spec seems to think this works.
+     */
+    p = 0;
+    for (i = 1; i <= MAX_CLEN; i++)
+    {
+        for (j = 0; j <= 255; j++)
+        {
+            if (codesize[j] == i)
+            {
+                htbl->huffval[p] = (UINT8) j;
+                p++;
+            }
+        }
+    }
+
+    /* Set sent_table FALSE so updated table will be written to JPEG file. */
+    htbl->sent_table = FALSE;
+}
+
+
+/*
+ * Finish up a statistics-gathering pass and create the new Huffman tables.
+ */
+
+METHODDEF(void)
+finish_pass_gather (j_compress_ptr cinfo)
+{
+    huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
+    int ci, tbl;
+    jpeg_component_info * compptr;
+    JHUFF_TBL **htblptr;
+    boolean did_dc[NUM_HUFF_TBLS];
+    boolean did_ac[NUM_HUFF_TBLS];
+
+    /* It's important not to apply jpeg_gen_optimal_table more than once
+     * per table, because it clobbers the input frequency counts!
+     */
+    if (cinfo->progressive_mode)
+        /* Flush out buffered data (all we care about is counting the EOB symbol) */
+    {
+        emit_eobrun(entropy);
+    }
+
+    MEMZERO(did_dc, SIZEOF(did_dc));
+    MEMZERO(did_ac, SIZEOF(did_ac));
+
+    for (ci = 0; ci < cinfo->comps_in_scan; ci++)
+    {
+        compptr = cinfo->cur_comp_info[ci];
+        /* DC needs no table for refinement scan */
+        if (cinfo->Ss == 0 && cinfo->Ah == 0)
+        {
+            tbl = compptr->dc_tbl_no;
+            if (! did_dc[tbl])
+            {
+                htblptr = & cinfo->dc_huff_tbl_ptrs[tbl];
+                if (*htblptr == NULL)
+                {
+                    *htblptr = jpeg_alloc_huff_table((j_common_ptr) cinfo);
+                }
+                jpeg_gen_optimal_table(cinfo, *htblptr, entropy->dc_count_ptrs[tbl]);
+                did_dc[tbl] = TRUE;
+            }
+        }
+        /* AC needs no table when not present */
+        if (cinfo->Se)
+        {
+            tbl = compptr->ac_tbl_no;
+            if (! did_ac[tbl])
+            {
+                htblptr = & cinfo->ac_huff_tbl_ptrs[tbl];
+                if (*htblptr == NULL)
+                {
+                    *htblptr = jpeg_alloc_huff_table((j_common_ptr) cinfo);
+                }
+                jpeg_gen_optimal_table(cinfo, *htblptr, entropy->ac_count_ptrs[tbl]);
+                did_ac[tbl] = TRUE;
+            }
+        }
+    }
+}
+
+
+/*
+ * Initialize for a Huffman-compressed scan.
+ * If gather_statistics is TRUE, we do not output anything during the scan,
+ * just count the Huffman symbols used and generate Huffman code tables.
+ */
+
+METHODDEF(void)
+start_pass_huff (j_compress_ptr cinfo, boolean gather_statistics)
+{
+    huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
+    int ci, tbl;
+    jpeg_component_info * compptr;
+
+    if (gather_statistics)
+    {
+        entropy->pub.finish_pass = finish_pass_gather;
+    }
+    else
+    {
+        entropy->pub.finish_pass = finish_pass_huff;
+    }
+
+    if (cinfo->progressive_mode)
+    {
+        entropy->cinfo = cinfo;
+        entropy->gather_statistics = gather_statistics;
+
+        /* We assume jcmaster.c already validated the scan parameters. */
+
+        /* Select execution routine */
+        if (cinfo->Ah == 0)
+        {
+            if (cinfo->Ss == 0)
+            {
+                entropy->pub.encode_mcu = encode_mcu_DC_first;
+            }
+            else
+            {
+                entropy->pub.encode_mcu = encode_mcu_AC_first;
+            }
+        }
+        else
+        {
+            if (cinfo->Ss == 0)
+            {
+                entropy->pub.encode_mcu = encode_mcu_DC_refine;
+            }
+            else
+            {
+                entropy->pub.encode_mcu = encode_mcu_AC_refine;
+                /* AC refinement needs a correction bit buffer */
+                if (entropy->bit_buffer == NULL)
+                    entropy->bit_buffer = (char *)
+                                          (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
+                                                  MAX_CORR_BITS * SIZEOF(char));
+            }
+        }
+
+        /* Initialize AC stuff */
+        entropy->ac_tbl_no = cinfo->cur_comp_info[0]->ac_tbl_no;
+        entropy->EOBRUN = 0;
+        entropy->BE = 0;
+    }
+    else
+    {
+        if (gather_statistics)
+        {
+            entropy->pub.encode_mcu = encode_mcu_gather;
+        }
+        else
+        {
+            entropy->pub.encode_mcu = encode_mcu_huff;
+        }
+    }
+
+    for (ci = 0; ci < cinfo->comps_in_scan; ci++)
+    {
+        compptr = cinfo->cur_comp_info[ci];
+        /* DC needs no table for refinement scan */
+        if (cinfo->Ss == 0 && cinfo->Ah == 0)
+        {
+            tbl = compptr->dc_tbl_no;
+            if (gather_statistics)
+            {
+                /* Check for invalid table index */
+                /* (make_c_derived_tbl does this in the other path) */
+                if (tbl < 0 || tbl >= NUM_HUFF_TBLS)
+                {
+                    ERREXIT1(cinfo, JERR_NO_HUFF_TABLE, tbl);
+                }
+                /* Allocate and zero the statistics tables */
+                /* Note that jpeg_gen_optimal_table expects 257 entries in each table! */
+                if (entropy->dc_count_ptrs[tbl] == NULL)
+                    entropy->dc_count_ptrs[tbl] = (long *)
+                                                  (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
+                                                          257 * SIZEOF(long));
+                MEMZERO(entropy->dc_count_ptrs[tbl], 257 * SIZEOF(long));
+            }
+            else
+            {
+                /* Compute derived values for Huffman tables */
+                /* We may do this more than once for a table, but it's not expensive */
+                jpeg_make_c_derived_tbl(cinfo, TRUE, tbl,
+                                        & entropy->dc_derived_tbls[tbl]);
+            }
+            /* Initialize DC predictions to 0 */
+            entropy->saved.last_dc_val[ci] = 0;
+        }
+        /* AC needs no table when not present */
+        if (cinfo->Se)
+        {
+            tbl = compptr->ac_tbl_no;
+            if (gather_statistics)
+            {
+                if (tbl < 0 || tbl >= NUM_HUFF_TBLS)
+                {
+                    ERREXIT1(cinfo, JERR_NO_HUFF_TABLE, tbl);
+                }
+                if (entropy->ac_count_ptrs[tbl] == NULL)
+                    entropy->ac_count_ptrs[tbl] = (long *)
+                                                  (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
+                                                          257 * SIZEOF(long));
+                MEMZERO(entropy->ac_count_ptrs[tbl], 257 * SIZEOF(long));
+            }
+            else
+            {
+                jpeg_make_c_derived_tbl(cinfo, FALSE, tbl,
+                                        & entropy->ac_derived_tbls[tbl]);
+            }
+        }
+    }
+
+    /* Initialize bit buffer to empty */
+    entropy->saved.put_buffer = 0;
+    entropy->saved.put_bits = 0;
+
+    /* Initialize restart stuff */
+    entropy->restarts_to_go = cinfo->restart_interval;
+    entropy->next_restart_num = 0;
+}
+
+
+/*
+ * Module initialization routine for Huffman entropy encoding.
+ */
+
+GLOBAL(void)
+jinit_huff_encoder (j_compress_ptr cinfo)
+{
+    huff_entropy_ptr entropy;
+    int i;
+
+    entropy = (huff_entropy_ptr)
+              (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
+                                          SIZEOF(huff_entropy_encoder));
+    cinfo->entropy = (struct jpeg_entropy_encoder *) entropy;
+    entropy->pub.start_pass = start_pass_huff;
+
+    /* Mark tables unallocated */
+    for (i = 0; i < NUM_HUFF_TBLS; i++)
+    {
+        entropy->dc_derived_tbls[i] = entropy->ac_derived_tbls[i] = NULL;
+        entropy->dc_count_ptrs[i] = entropy->ac_count_ptrs[i] = NULL;
+    }
+
+    if (cinfo->progressive_mode)
+    {
+        entropy->bit_buffer = NULL;    /* needed only in AC refinement scan */
+    }
+}
diff -NEaurb neo/renderer/jpeg-8c/jcinit.c neo/renderer/jpeg-8c/jcinit.c
--- neo/renderer/jpeg-8c/jcinit.c	1970-01-01 00:00:00 +0000
+++ neo/renderer/jpeg-8c/jcinit.c	2012-11-17 01:20:40 +0000
@@ -0,0 +1,69 @@
+/*
+ * jcinit.c
+ *
+ * Copyright (C) 1991-1997, Thomas G. Lane.
+ * This file is part of the Independent JPEG Group's software.
+ * For conditions of distribution and use, see the accompanying README file.
+ *
+ * This file contains initialization logic for the JPEG compressor.
+ * This routine is in charge of selecting the modules to be executed and
+ * making an initialization call to each one.
+ *
+ * Logically, this code belongs in jcmaster.c.  It's split out because
+ * linking this routine implies linking the entire compression library.
+ * For a transcoding-only application, we want to be able to use jcmaster.c
+ * without linking in the whole library.
+ */
+
+#define JPEG_INTERNALS
+#include "jinclude.h"
+#include "jpeglib.h"
+
+
+/*
+ * Master selection of compression modules.
+ * This is done once at the start of processing an image.  We determine
+ * which modules will be used and give them appropriate initialization calls.
+ */
+
+GLOBAL(void)
+jinit_compress_master (j_compress_ptr cinfo)
+{
+    /* Initialize master control (includes parameter checking/processing) */
+    jinit_c_master_control(cinfo, FALSE /* full compression */);
+
+    /* Preprocessing */
+    if (! cinfo->raw_data_in)
+    {
+        jinit_color_converter(cinfo);
+        jinit_downsampler(cinfo);
+        jinit_c_prep_controller(cinfo, FALSE /* never need full buffer here */);
+    }
+    /* Forward DCT */
+    jinit_forward_dct(cinfo);
+    /* Entropy encoding: either Huffman or arithmetic coding. */
+    if (cinfo->arith_code)
+    {
+        jinit_arith_encoder(cinfo);
+    }
+    else
+    {
+        jinit_huff_encoder(cinfo);
+    }
+
+    /* Need a full-image coefficient buffer in any multi-pass mode. */
+    jinit_c_coef_controller(cinfo,
+                            (boolean) (cinfo->num_scans > 1 || cinfo->optimize_coding));
+    jinit_c_main_controller(cinfo, FALSE /* never need full buffer here */);
+
+    jinit_marker_writer(cinfo);
+
+    /* We can now tell the memory manager to allocate virtual arrays. */
+    (*cinfo->mem->realize_virt_arrays) ((j_common_ptr) cinfo);
+
+    /* Write the datastream header (SOI) immediately.
+     * Frame and scan headers are postponed till later.
+     * This lets application insert special markers after the SOI.
+     */
+    (*cinfo->marker->write_file_header) (cinfo);
+}
diff -NEaurb neo/renderer/jpeg-8c/jcmainct.c neo/renderer/jpeg-8c/jcmainct.c
--- neo/renderer/jpeg-8c/jcmainct.c	1970-01-01 00:00:00 +0000
+++ neo/renderer/jpeg-8c/jcmainct.c	2012-11-17 01:20:40 +0000
@@ -0,0 +1,325 @@
+/*
+ * jcmainct.c
+ *
+ * Copyright (C) 1994-1996, Thomas G. Lane.
+ * This file is part of the Independent JPEG Group's software.
+ * For conditions of distribution and use, see the accompanying README file.
+ *
+ * This file contains the main buffer controller for compression.
+ * The main buffer lies between the pre-processor and the JPEG
+ * compressor proper; it holds downsampled data in the JPEG colorspace.
+ */
+
+#define JPEG_INTERNALS
+#include "jinclude.h"
+#include "jpeglib.h"
+
+
+/* Note: currently, there is no operating mode in which a full-image buffer
+ * is needed at this step.  If there were, that mode could not be used with
+ * "raw data" input, since this module is bypassed in that case.  However,
+ * we've left the code here for possible use in special applications.
+ */
+#undef FULL_MAIN_BUFFER_SUPPORTED
+
+
+/* Private buffer controller object */
+
+typedef struct
+{
+    struct jpeg_c_main_controller pub; /* public fields */
+
+    JDIMENSION cur_iMCU_row;	/* number of current iMCU row */
+    JDIMENSION rowgroup_ctr;	/* counts row groups received in iMCU row */
+    boolean suspended;		/* remember if we suspended output */
+    J_BUF_MODE pass_mode;		/* current operating mode */
+
+    /* If using just a strip buffer, this points to the entire set of buffers
+     * (we allocate one for each component).  In the full-image case, this
+     * points to the currently accessible strips of the virtual arrays.
+     */
+    JSAMPARRAY buffer[MAX_COMPONENTS];
+
+#ifdef FULL_MAIN_BUFFER_SUPPORTED
+    /* If using full-image storage, this array holds pointers to virtual-array
+     * control blocks for each component.  Unused if not full-image storage.
+     */
+    jvirt_sarray_ptr whole_image[MAX_COMPONENTS];
+#endif
+} my_main_controller;
+
+typedef my_main_controller * my_main_ptr;
+
+
+/* Forward declarations */
+METHODDEF(void) process_data_simple_main
+JPP((j_compress_ptr cinfo, JSAMPARRAY input_buf,
+     JDIMENSION *in_row_ctr, JDIMENSION in_rows_avail));
+#ifdef FULL_MAIN_BUFFER_SUPPORTED
+METHODDEF(void) process_data_buffer_main
+JPP((j_compress_ptr cinfo, JSAMPARRAY input_buf,
+     JDIMENSION *in_row_ctr, JDIMENSION in_rows_avail));
+#endif
+
+
+/*
+ * Initialize for a processing pass.
+ */
+
+METHODDEF(void)
+start_pass_main (j_compress_ptr cinfo, J_BUF_MODE pass_mode)
+{
+    my_main_ptr main_ptr = (my_main_ptr) cinfo->main;
+
+    /* Do nothing in raw-data mode. */
+    if (cinfo->raw_data_in)
+    {
+        return;
+    }
+
+    main_ptr->cur_iMCU_row = 0;	/* initialize counters */
+    main_ptr->rowgroup_ctr = 0;
+    main_ptr->suspended = FALSE;
+    main_ptr->pass_mode = pass_mode;	/* save mode for use by process_data */
+
+    switch (pass_mode)
+    {
+    case JBUF_PASS_THRU:
+#ifdef FULL_MAIN_BUFFER_SUPPORTED
+        if (main_ptr->whole_image[0] != NULL)
+        {
+            ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
+        }
+#endif
+        main_ptr->pub.process_data = process_data_simple_main;
+        break;
+#ifdef FULL_MAIN_BUFFER_SUPPORTED
+    case JBUF_SAVE_SOURCE:
+    case JBUF_CRANK_DEST:
+    case JBUF_SAVE_AND_PASS:
+        if (main_ptr->whole_image[0] == NULL)
+        {
+            ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
+        }
+        main_ptr->pub.process_data = process_data_buffer_main;
+        break;
+#endif
+    default:
+        ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
+        break;
+    }
+}
+
+
+/*
+ * Process some data.
+ * This routine handles the simple pass-through mode,
+ * where we have only a strip buffer.
+ */
+
+METHODDEF(void)
+process_data_simple_main (j_compress_ptr cinfo,
+                          JSAMPARRAY input_buf, JDIMENSION *in_row_ctr,
+                          JDIMENSION in_rows_avail)
+{
+    my_main_ptr main_ptr = (my_main_ptr) cinfo->main;
+
+    while (main_ptr->cur_iMCU_row < cinfo->total_iMCU_rows)
+    {
+        /* Read input data if we haven't filled the main buffer yet */
+        if (main_ptr->rowgroup_ctr < (JDIMENSION) cinfo->min_DCT_v_scaled_size)
+            (*cinfo->prep->pre_process_data) (cinfo,
+                                              input_buf, in_row_ctr, in_rows_avail,
+                                              main_ptr->buffer, &main_ptr->rowgroup_ctr,
+                                              (JDIMENSION) cinfo->min_DCT_v_scaled_size);
+
+        /* If we don't have a full iMCU row buffered, return to application for
+         * more data.  Note that preprocessor will always pad to fill the iMCU row
+         * at the bottom of the image.
+         */
+        if (main_ptr->rowgroup_ctr != (JDIMENSION) cinfo->min_DCT_v_scaled_size)
+        {
+            return;
+        }
+
+        /* Send the completed row to the compressor */
+        if (! (*cinfo->coef->compress_data) (cinfo, main_ptr->buffer))
+        {
+            /* If compressor did not consume the whole row, then we must need to
+             * suspend processing and return to the application.  In this situation
+             * we pretend we didn't yet consume the last input row; otherwise, if
+             * it happened to be the last row of the image, the application would
+             * think we were done.
+             */
+            if (! main_ptr->suspended)
+            {
+                (*in_row_ctr)--;
+                main_ptr->suspended = TRUE;
+            }
+            return;
+        }
+        /* We did finish the row.  Undo our little suspension hack if a previous
+         * call suspended; then mark the main buffer empty.
+         */
+        if (main_ptr->suspended)
+        {
+            (*in_row_ctr)++;
+            main_ptr->suspended = FALSE;
+        }
+        main_ptr->rowgroup_ctr = 0;
+        main_ptr->cur_iMCU_row++;
+    }
+}
+
+
+#ifdef FULL_MAIN_BUFFER_SUPPORTED
+
+/*
+ * Process some data.
+ * This routine handles all of the modes that use a full-size buffer.
+ */
+
+METHODDEF(void)
+process_data_buffer_main (j_compress_ptr cinfo,
+                          JSAMPARRAY input_buf, JDIMENSION *in_row_ctr,
+                          JDIMENSION in_rows_avail)
+{
+    my_main_ptr main_ptr = (my_main_ptr) cinfo->main;
+    int ci;
+    jpeg_component_info *compptr;
+    boolean writing = (main_ptr->pass_mode != JBUF_CRANK_DEST);
+
+    while (main_ptr->cur_iMCU_row < cinfo->total_iMCU_rows)
+    {
+        /* Realign the virtual buffers if at the start of an iMCU row. */
+        if (main_ptr->rowgroup_ctr == 0)
+        {
+            for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
+                    ci++, compptr++)
+            {
+                main_ptr->buffer[ci] = (*cinfo->mem->access_virt_sarray)
+                                       ((j_common_ptr) cinfo, main_ptr->whole_image[ci],
+                                        main_ptr->cur_iMCU_row * (compptr->v_samp_factor * DCTSIZE),
+                                        (JDIMENSION) (compptr->v_samp_factor * DCTSIZE), writing);
+            }
+            /* In a read pass, pretend we just read some source data. */
+            if (! writing)
+            {
+                *in_row_ctr += cinfo->max_v_samp_factor * DCTSIZE;
+                main_ptr->rowgroup_ctr = DCTSIZE;
+            }
+        }
+
+        /* If a write pass, read input data until the current iMCU row is full. */
+        /* Note: preprocessor will pad if necessary to fill the last iMCU row. */
+        if (writing)
+        {
+            (*cinfo->prep->pre_process_data) (cinfo,
+                                              input_buf, in_row_ctr, in_rows_avail,
+                                              main_ptr->buffer, &main_ptr->rowgroup_ctr,
+                                              (JDIMENSION) DCTSIZE);
+            /* Return to application if we need more data to fill the iMCU row. */
+            if (main_ptr->rowgroup_ctr < DCTSIZE)
+            {
+                return;
+            }
+        }
+
+        /* Emit data, unless this is a sink-only pass. */
+        if (main_ptr->pass_mode != JBUF_SAVE_SOURCE)
+        {
+            if (! (*cinfo->coef->compress_data) (cinfo, main_ptr->buffer))
+            {
+                /* If compressor did not consume the whole row, then we must need to
+                 * suspend processing and return to the application.  In this situation
+                 * we pretend we didn't yet consume the last input row; otherwise, if
+                 * it happened to be the last row of the image, the application would
+                 * think we were done.
+                 */
+                if (! main_ptr->suspended)
+                {
+                    (*in_row_ctr)--;
+                    main_ptr->suspended = TRUE;
+                }
+                return;
+            }
+            /* We did finish the row.  Undo our little suspension hack if a previous
+             * call suspended; then mark the main buffer empty.
+             */
+            if (main_ptr->suspended)
+            {
+                (*in_row_ctr)++;
+                main_ptr->suspended = FALSE;
+            }
+        }
+
+        /* If get here, we are done with this iMCU row.  Mark buffer empty. */
+        main_ptr->rowgroup_ctr = 0;
+        main_ptr->cur_iMCU_row++;
+    }
+}
+
+#endif /* FULL_MAIN_BUFFER_SUPPORTED */
+
+
+/*
+ * Initialize main buffer controller.
+ */
+
+GLOBAL(void)
+jinit_c_main_controller (j_compress_ptr cinfo, boolean need_full_buffer)
+{
+    my_main_ptr main_ptr;
+    int ci;
+    jpeg_component_info *compptr;
+
+    main_ptr = (my_main_ptr)
+               (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
+                                           SIZEOF(my_main_controller));
+    cinfo->main = (struct jpeg_c_main_controller *) main_ptr;
+    main_ptr->pub.start_pass = start_pass_main;
+
+    /* We don't need to create a buffer in raw-data mode. */
+    if (cinfo->raw_data_in)
+    {
+        return;
+    }
+
+    /* Create the buffer.  It holds downsampled data, so each component
+     * may be of a different size.
+     */
+    if (need_full_buffer)
+    {
+#ifdef FULL_MAIN_BUFFER_SUPPORTED
+        /* Allocate a full-image virtual array for each component */
+        /* Note we pad the bottom to a multiple of the iMCU height */
+        for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
+                ci++, compptr++)
+        {
+            main_ptr->whole_image[ci] = (*cinfo->mem->request_virt_sarray)
+                                        ((j_common_ptr) cinfo, JPOOL_IMAGE, FALSE,
+                                         compptr->width_in_blocks * compptr->DCT_h_scaled_size,
+                                         (JDIMENSION) jround_up((long) compptr->height_in_blocks,
+                                                 (long) compptr->v_samp_factor) * DCTSIZE,
+                                         (JDIMENSION) (compptr->v_samp_factor * compptr->DCT_v_scaled_size));
+        }
+#else
+        ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
+#endif
+    }
+    else
+    {
+#ifdef FULL_MAIN_BUFFER_SUPPORTED
+        main_ptr->whole_image[0] = NULL; /* flag for no virtual arrays */
+#endif
+        /* Allocate a strip buffer for each component */
+        for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
+                ci++, compptr++)
+        {
+            main_ptr->buffer[ci] = (*cinfo->mem->alloc_sarray)
+                                   ((j_common_ptr) cinfo, JPOOL_IMAGE,
+                                    compptr->width_in_blocks * compptr->DCT_h_scaled_size,
+                                    (JDIMENSION) (compptr->v_samp_factor * compptr->DCT_v_scaled_size));
+        }
+    }
+}
diff -NEaurb neo/renderer/jpeg-8c/jcmarker.c neo/renderer/jpeg-8c/jcmarker.c
--- neo/renderer/jpeg-8c/jcmarker.c	1970-01-01 00:00:00 +0000
+++ neo/renderer/jpeg-8c/jcmarker.c	2012-11-17 01:20:41 +0000
@@ -0,0 +1,773 @@
+/*
+ * jcmarker.c
+ *
+ * Copyright (C) 1991-1998, Thomas G. Lane.
+ * Modified 2003-2010 by Guido Vollbeding.
+ * This file is part of the Independent JPEG Group's software.
+ * For conditions of distribution and use, see the accompanying README file.
+ *
+ * This file contains routines to write JPEG datastream markers.
+ */
+
+#define JPEG_INTERNALS
+#include "jinclude.h"
+#include "jpeglib.h"
+
+
+typedef enum  			/* JPEG marker codes */
+{
+    M_SOF0  = 0xc0,
+    M_SOF1  = 0xc1,
+    M_SOF2  = 0xc2,
+    M_SOF3  = 0xc3,
+
+    M_SOF5  = 0xc5,
+    M_SOF6  = 0xc6,
+    M_SOF7  = 0xc7,
+
+    M_JPG   = 0xc8,
+    M_SOF9  = 0xc9,
+    M_SOF10 = 0xca,
+    M_SOF11 = 0xcb,
+
+    M_SOF13 = 0xcd,
+    M_SOF14 = 0xce,
+    M_SOF15 = 0xcf,
+
+    M_DHT   = 0xc4,
+
+    M_DAC   = 0xcc,
+
+    M_RST0  = 0xd0,
+    M_RST1  = 0xd1,
+    M_RST2  = 0xd2,
+    M_RST3  = 0xd3,
+    M_RST4  = 0xd4,
+    M_RST5  = 0xd5,
+    M_RST6  = 0xd6,
+    M_RST7  = 0xd7,
+
+    M_SOI   = 0xd8,
+    M_EOI   = 0xd9,
+    M_SOS   = 0xda,
+    M_DQT   = 0xdb,
+    M_DNL   = 0xdc,
+    M_DRI   = 0xdd,
+    M_DHP   = 0xde,
+    M_EXP   = 0xdf,
+
+    M_APP0  = 0xe0,
+    M_APP1  = 0xe1,
+    M_APP2  = 0xe2,
+    M_APP3  = 0xe3,
+    M_APP4  = 0xe4,
+    M_APP5  = 0xe5,
+    M_APP6  = 0xe6,
+    M_APP7  = 0xe7,
+    M_APP8  = 0xe8,
+    M_APP9  = 0xe9,
+    M_APP10 = 0xea,
+    M_APP11 = 0xeb,
+    M_APP12 = 0xec,
+    M_APP13 = 0xed,
+    M_APP14 = 0xee,
+    M_APP15 = 0xef,
+
+    M_JPG0  = 0xf0,
+    M_JPG13 = 0xfd,
+    M_COM   = 0xfe,
+
+    M_TEM   = 0x01,
+
+    M_ERROR = 0x100
+} JPEG_MARKER;
+
+
+/* Private state */
+
+typedef struct
+{
+    struct jpeg_marker_writer pub; /* public fields */
+
+    unsigned int last_restart_interval; /* last DRI value emitted; 0 after SOI */
+} my_marker_writer;
+
+typedef my_marker_writer * my_marker_ptr;
+
+
+/*
+ * Basic output routines.
+ *
+ * Note that we do not support suspension while writing a marker.
+ * Therefore, an application using suspension must ensure that there is
+ * enough buffer space for the initial markers (typ. 600-700 bytes) before
+ * calling jpeg_start_compress, and enough space to write the trailing EOI
+ * (a few bytes) before calling jpeg_finish_compress.  Multipass compression
+ * modes are not supported at all with suspension, so those two are the only
+ * points where markers will be written.
+ */
+
+LOCAL(void)
+emit_byte (j_compress_ptr cinfo, int val)
+/* Emit a byte */
+{
+    struct jpeg_destination_mgr * dest = cinfo->dest;
+
+    *(dest->next_output_byte)++ = (JOCTET) val;
+    if (--dest->free_in_buffer == 0)
+    {
+        if (! (*dest->empty_output_buffer) (cinfo))
+        {
+            ERREXIT(cinfo, JERR_CANT_SUSPEND);
+        }
+    }
+}
+
+
+LOCAL(void)
+emit_marker (j_compress_ptr cinfo, JPEG_MARKER mark)
+/* Emit a marker code */
+{
+    emit_byte(cinfo, 0xFF);
+    emit_byte(cinfo, (int) mark);
+}
+
+
+LOCAL(void)
+emit_2bytes (j_compress_ptr cinfo, int value)
+/* Emit a 2-byte integer; these are always MSB first in JPEG files */
+{
+    emit_byte(cinfo, (value >> 8) & 0xFF);
+    emit_byte(cinfo, value & 0xFF);
+}
+
+
+/*
+ * Routines to write specific marker types.
+ */
+
+LOCAL(int)
+emit_dqt (j_compress_ptr cinfo, int index)
+/* Emit a DQT marker */
+/* Returns the precision used (0 = 8bits, 1 = 16bits) for baseline checking */
+{
+    JQUANT_TBL * qtbl = cinfo->quant_tbl_ptrs[index];
+    int prec;
+    int i;
+
+    if (qtbl == NULL)
+    {
+        ERREXIT1(cinfo, JERR_NO_QUANT_TABLE, index);
+    }
+
+    prec = 0;
+    for (i = 0; i <= cinfo->lim_Se; i++)
+    {
+        if (qtbl->quantval[cinfo->natural_order[i]] > 255)
+        {
+            prec = 1;
+        }
+    }
+
+    if (! qtbl->sent_table)
+    {
+        emit_marker(cinfo, M_DQT);
+
+        emit_2bytes(cinfo,
+                    prec ? cinfo->lim_Se * 2 + 2 + 1 + 2 : cinfo->lim_Se + 1 + 1 + 2);
+
+        emit_byte(cinfo, index + (prec<<4));
+
+        for (i = 0; i <= cinfo->lim_Se; i++)
+        {
+            /* The table entries must be emitted in zigzag order. */
+            unsigned int qval = qtbl->quantval[cinfo->natural_order[i]];
+            if (prec)
+            {
+                emit_byte(cinfo, (int) (qval >> 8));
+            }
+            emit_byte(cinfo, (int) (qval & 0xFF));
+        }
+
+        qtbl->sent_table = TRUE;
+    }
+
+    return prec;
+}
+
+
+LOCAL(void)
+emit_dht (j_compress_ptr cinfo, int index, boolean is_ac)
+/* Emit a DHT marker */
+{
+    JHUFF_TBL * htbl;
+    int length, i;
+
+    if (is_ac)
+    {
+        htbl = cinfo->ac_huff_tbl_ptrs[index];
+        index += 0x10;		/* output index has AC bit set */
+    }
+    else
+    {
+        htbl = cinfo->dc_huff_tbl_ptrs[index];
+    }
+
+    if (htbl == NULL)
+    {
+        ERREXIT1(cinfo, JERR_NO_HUFF_TABLE, index);
+    }
+
+    if (! htbl->sent_table)
+    {
+        emit_marker(cinfo, M_DHT);
+
+        length = 0;
+        for (i = 1; i <= 16; i++)
+        {
+            length += htbl->bits[i];
+        }
+
+        emit_2bytes(cinfo, length + 2 + 1 + 16);
+        emit_byte(cinfo, index);
+
+        for (i = 1; i <= 16; i++)
+        {
+            emit_byte(cinfo, htbl->bits[i]);
+        }
+
+        for (i = 0; i < length; i++)
+        {
+            emit_byte(cinfo, htbl->huffval[i]);
+        }
+
+        htbl->sent_table = TRUE;
+    }
+}
+
+
+LOCAL(void)
+emit_dac (j_compress_ptr cinfo)
+/* Emit a DAC marker */
+/* Since the useful info is so small, we want to emit all the tables in */
+/* one DAC marker.  Therefore this routine does its own scan of the table. */
+{
+#ifdef C_ARITH_CODING_SUPPORTED
+    char dc_in_use[NUM_ARITH_TBLS];
+    char ac_in_use[NUM_ARITH_TBLS];
+    int length, i;
+    jpeg_component_info *compptr;
+
+    for (i = 0; i < NUM_ARITH_TBLS; i++)
+    {
+        dc_in_use[i] = ac_in_use[i] = 0;
+    }
+
+    for (i = 0; i < cinfo->comps_in_scan; i++)
+    {
+        compptr = cinfo->cur_comp_info[i];
+        /* DC needs no table for refinement scan */
+        if (cinfo->Ss == 0 && cinfo->Ah == 0)
+        {
+            dc_in_use[compptr->dc_tbl_no] = 1;
+        }
+        /* AC needs no table when not present */
+        if (cinfo->Se)
+        {
+            ac_in_use[compptr->ac_tbl_no] = 1;
+        }
+    }
+
+    length = 0;
+    for (i = 0; i < NUM_ARITH_TBLS; i++)
+    {
+        length += dc_in_use[i] + ac_in_use[i];
+    }
+
+    if (length)
+    {
+        emit_marker(cinfo, M_DAC);
+
+        emit_2bytes(cinfo, length*2 + 2);
+
+        for (i = 0; i < NUM_ARITH_TBLS; i++)
+        {
+            if (dc_in_use[i])
+            {
+                emit_byte(cinfo, i);
+                emit_byte(cinfo, cinfo->arith_dc_L[i] + (cinfo->arith_dc_U[i]<<4));
+            }
+            if (ac_in_use[i])
+            {
+                emit_byte(cinfo, i + 0x10);
+                emit_byte(cinfo, cinfo->arith_ac_K[i]);
+            }
+        }
+    }
+#endif /* C_ARITH_CODING_SUPPORTED */
+}
+
+
+LOCAL(void)
+emit_dri (j_compress_ptr cinfo)
+/* Emit a DRI marker */
+{
+    emit_marker(cinfo, M_DRI);
+
+    emit_2bytes(cinfo, 4);	/* fixed length */
+
+    emit_2bytes(cinfo, (int) cinfo->restart_interval);
+}
+
+
+LOCAL(void)
+emit_sof (j_compress_ptr cinfo, JPEG_MARKER code)
+/* Emit a SOF marker */
+{
+    int ci;
+    jpeg_component_info *compptr;
+
+    emit_marker(cinfo, code);
+
+    emit_2bytes(cinfo, 3 * cinfo->num_components + 2 + 5 + 1); /* length */
+
+    /* Make sure image isn't bigger than SOF field can handle */
+    if ((long) cinfo->jpeg_height > 65535L ||
+            (long) cinfo->jpeg_width > 65535L)
+    {
+        ERREXIT1(cinfo, JERR_IMAGE_TOO_BIG, (unsigned int) 65535);
+    }
+
+    emit_byte(cinfo, cinfo->data_precision);
+    emit_2bytes(cinfo, (int) cinfo->jpeg_height);
+    emit_2bytes(cinfo, (int) cinfo->jpeg_width);
+
+    emit_byte(cinfo, cinfo->num_components);
+
+    for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
+            ci++, compptr++)
+    {
+        emit_byte(cinfo, compptr->component_id);
+        emit_byte(cinfo, (compptr->h_samp_factor << 4) + compptr->v_samp_factor);
+        emit_byte(cinfo, compptr->quant_tbl_no);
+    }
+}
+
+
+LOCAL(void)
+emit_sos (j_compress_ptr cinfo)
+/* Emit a SOS marker */
+{
+    int i, td, ta;
+    jpeg_component_info *compptr;
+
+    emit_marker(cinfo, M_SOS);
+
+    emit_2bytes(cinfo, 2 * cinfo->comps_in_scan + 2 + 1 + 3); /* length */
+
+    emit_byte(cinfo, cinfo->comps_in_scan);
+
+    for (i = 0; i < cinfo->comps_in_scan; i++)
+    {
+        compptr = cinfo->cur_comp_info[i];
+        emit_byte(cinfo, compptr->component_id);
+
+        /* We emit 0 for unused field(s); this is recommended by the P&M text
+         * but does not seem to be specified in the standard.
+         */
+
+        /* DC needs no table for refinement scan */
+        td = cinfo->Ss == 0 && cinfo->Ah == 0 ? compptr->dc_tbl_no : 0;
+        /* AC needs no table when not present */
+        ta = cinfo->Se ? compptr->ac_tbl_no : 0;
+
+        emit_byte(cinfo, (td << 4) + ta);
+    }
+
+    emit_byte(cinfo, cinfo->Ss);
+    emit_byte(cinfo, cinfo->Se);
+    emit_byte(cinfo, (cinfo->Ah << 4) + cinfo->Al);
+}
+
+
+LOCAL(void)
+emit_pseudo_sos (j_compress_ptr cinfo)
+/* Emit a pseudo SOS marker */
+{
+    emit_marker(cinfo, M_SOS);
+
+    emit_2bytes(cinfo, 2 + 1 + 3); /* length */
+
+    emit_byte(cinfo, 0); /* Ns */
+
+    emit_byte(cinfo, 0); /* Ss */
+    emit_byte(cinfo, cinfo->block_size * cinfo->block_size - 1); /* Se */
+    emit_byte(cinfo, 0); /* Ah/Al */
+}
+
+
+LOCAL(void)
+emit_jfif_app0 (j_compress_ptr cinfo)
+/* Emit a JFIF-compliant APP0 marker */
+{
+    /*
+     * Length of APP0 block	(2 bytes)
+     * Block ID			(4 bytes - ASCII "JFIF")
+     * Zero byte			(1 byte to terminate the ID string)
+     * Version Major, Minor	(2 bytes - major first)
+     * Units			(1 byte - 0x00 = none, 0x01 = inch, 0x02 = cm)
+     * Xdpu			(2 bytes - dots per unit horizontal)
+     * Ydpu			(2 bytes - dots per unit vertical)
+     * Thumbnail X size		(1 byte)
+     * Thumbnail Y size		(1 byte)
+     */
+
+    emit_marker(cinfo, M_APP0);
+
+    emit_2bytes(cinfo, 2 + 4 + 1 + 2 + 1 + 2 + 2 + 1 + 1); /* length */
+
+    emit_byte(cinfo, 0x4A);	/* Identifier: ASCII "JFIF" */
+    emit_byte(cinfo, 0x46);
+    emit_byte(cinfo, 0x49);
+    emit_byte(cinfo, 0x46);
+    emit_byte(cinfo, 0);
+    emit_byte(cinfo, cinfo->JFIF_major_version); /* Version fields */
+    emit_byte(cinfo, cinfo->JFIF_minor_version);
+    emit_byte(cinfo, cinfo->density_unit); /* Pixel size information */
+    emit_2bytes(cinfo, (int) cinfo->X_density);
+    emit_2bytes(cinfo, (int) cinfo->Y_density);
+    emit_byte(cinfo, 0);		/* No thumbnail image */
+    emit_byte(cinfo, 0);
+}
+
+
+LOCAL(void)
+emit_adobe_app14 (j_compress_ptr cinfo)
+/* Emit an Adobe APP14 marker */
+{
+    /*
+     * Length of APP14 block	(2 bytes)
+     * Block ID			(5 bytes - ASCII "Adobe")
+     * Version Number		(2 bytes - currently 100)
+     * Flags0			(2 bytes - currently 0)
+     * Flags1			(2 bytes - currently 0)
+     * Color transform		(1 byte)
+     *
+     * Although Adobe TN 5116 mentions Version = 101, all the Adobe files
+     * now in circulation seem to use Version = 100, so that's what we write.
+     *
+     * We write the color transform byte as 1 if the JPEG color space is
+     * YCbCr, 2 if it's YCCK, 0 otherwise.  Adobe's definition has to do with
+     * whether the encoder performed a transformation, which is pretty useless.
+     */
+
+    emit_marker(cinfo, M_APP14);
+
+    emit_2bytes(cinfo, 2 + 5 + 2 + 2 + 2 + 1); /* length */
+
+    emit_byte(cinfo, 0x41);	/* Identifier: ASCII "Adobe" */
+    emit_byte(cinfo, 0x64);
+    emit_byte(cinfo, 0x6F);
+    emit_byte(cinfo, 0x62);
+    emit_byte(cinfo, 0x65);
+    emit_2bytes(cinfo, 100);	/* Version */
+    emit_2bytes(cinfo, 0);	/* Flags0 */
+    emit_2bytes(cinfo, 0);	/* Flags1 */
+    switch (cinfo->jpeg_color_space)
+    {
+    case JCS_YCbCr:
+        emit_byte(cinfo, 1);	/* Color transform = 1 */
+        break;
+    case JCS_YCCK:
+        emit_byte(cinfo, 2);	/* Color transform = 2 */
+        break;
+    default:
+        emit_byte(cinfo, 0);	/* Color transform = 0 */
+        break;
+    }
+}
+
+
+/*
+ * These routines allow writing an arbitrary marker with parameters.
+ * The only intended use is to emit COM or APPn markers after calling
+ * write_file_header and before calling write_frame_header.
+ * Other uses are not guaranteed to produce desirable results.
+ * Counting the parameter bytes properly is the caller's responsibility.
+ */
+
+METHODDEF(void)
+write_marker_header (j_compress_ptr cinfo, int marker, unsigned int datalen)
+/* Emit an arbitrary marker header */
+{
+    if (datalen > (unsigned int) 65533)		/* safety check */
+    {
+        ERREXIT(cinfo, JERR_BAD_LENGTH);
+    }
+
+    emit_marker(cinfo, (JPEG_MARKER) marker);
+
+    emit_2bytes(cinfo, (int) (datalen + 2));	/* total length */
+}
+
+METHODDEF(void)
+write_marker_byte (j_compress_ptr cinfo, int val)
+/* Emit one byte of marker parameters following write_marker_header */
+{
+    emit_byte(cinfo, val);
+}
+
+
+/*
+ * Write datastream header.
+ * This consists of an SOI and optional APPn markers.
+ * We recommend use of the JFIF marker, but not the Adobe marker,
+ * when using YCbCr or grayscale data.  The JFIF marker should NOT
+ * be used for any other JPEG colorspace.  The Adobe marker is helpful
+ * to distinguish RGB, CMYK, and YCCK colorspaces.
+ * Note that an application can write additional header markers after
+ * jpeg_start_compress returns.
+ */
+
+METHODDEF(void)
+write_file_header (j_compress_ptr cinfo)
+{
+    my_marker_ptr marker = (my_marker_ptr) cinfo->marker;
+
+    emit_marker(cinfo, M_SOI);	/* first the SOI */
+
+    /* SOI is defined to reset restart interval to 0 */
+    marker->last_restart_interval = 0;
+
+    if (cinfo->write_JFIF_header)	/* next an optional JFIF APP0 */
+    {
+        emit_jfif_app0(cinfo);
+    }
+    if (cinfo->write_Adobe_marker) /* next an optional Adobe APP14 */
+    {
+        emit_adobe_app14(cinfo);
+    }
+}
+
+
+/*
+ * Write frame header.
+ * This consists of DQT and SOFn markers, and a conditional pseudo SOS marker.
+ * Note that we do not emit the SOF until we have emitted the DQT(s).
+ * This avoids compatibility problems with incorrect implementations that
+ * try to error-check the quant table numbers as soon as they see the SOF.
+ */
+
+METHODDEF(void)
+write_frame_header (j_compress_ptr cinfo)
+{
+    int ci, prec;
+    boolean is_baseline;
+    jpeg_component_info *compptr;
+
+    /* Emit DQT for each quantization table.
+     * Note that emit_dqt() suppresses any duplicate tables.
+     */
+    prec = 0;
+    for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
+            ci++, compptr++)
+    {
+        prec += emit_dqt(cinfo, compptr->quant_tbl_no);
+    }
+    /* now prec is nonzero iff there are any 16-bit quant tables. */
+
+    /* Check for a non-baseline specification.
+     * Note we assume that Huffman table numbers won't be changed later.
+     */
+    if (cinfo->arith_code || cinfo->progressive_mode ||
+            cinfo->data_precision != 8 || cinfo->block_size != DCTSIZE)
+    {
+        is_baseline = FALSE;
+    }
+    else
+    {
+        is_baseline = TRUE;
+        for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
+                ci++, compptr++)
+        {
+            if (compptr->dc_tbl_no > 1 || compptr->ac_tbl_no > 1)
+            {
+                is_baseline = FALSE;
+            }
+        }
+        if (prec && is_baseline)
+        {
+            is_baseline = FALSE;
+            /* If it's baseline except for quantizer size, warn the user */
+            TRACEMS(cinfo, 0, JTRC_16BIT_TABLES);
+        }
+    }
+
+    /* Emit the proper SOF marker */
+    if (cinfo->arith_code)
+    {
+        if (cinfo->progressive_mode)
+        {
+            emit_sof(cinfo, M_SOF10);    /* SOF code for progressive arithmetic */
+        }
+        else
+        {
+            emit_sof(cinfo, M_SOF9);    /* SOF code for sequential arithmetic */
+        }
+    }
+    else
+    {
+        if (cinfo->progressive_mode)
+        {
+            emit_sof(cinfo, M_SOF2);    /* SOF code for progressive Huffman */
+        }
+        else if (is_baseline)
+        {
+            emit_sof(cinfo, M_SOF0);    /* SOF code for baseline implementation */
+        }
+        else
+        {
+            emit_sof(cinfo, M_SOF1);    /* SOF code for non-baseline Huffman file */
+        }
+    }
+
+    /* Check to emit pseudo SOS marker */
+    if (cinfo->progressive_mode && cinfo->block_size != DCTSIZE)
+    {
+        emit_pseudo_sos(cinfo);
+    }
+}
+
+
+/*
+ * Write scan header.
+ * This consists of DHT or DAC markers, optional DRI, and SOS.
+ * Compressed data will be written following the SOS.
+ */
+
+METHODDEF(void)
+write_scan_header (j_compress_ptr cinfo)
+{
+    my_marker_ptr marker = (my_marker_ptr) cinfo->marker;
+    int i;
+    jpeg_component_info *compptr;
+
+    if (cinfo->arith_code)
+    {
+        /* Emit arith conditioning info.  We may have some duplication
+         * if the file has multiple scans, but it's so small it's hardly
+         * worth worrying about.
+         */
+        emit_dac(cinfo);
+    }
+    else
+    {
+        /* Emit Huffman tables.
+         * Note that emit_dht() suppresses any duplicate tables.
+         */
+        for (i = 0; i < cinfo->comps_in_scan; i++)
+        {
+            compptr = cinfo->cur_comp_info[i];
+            /* DC needs no table for refinement scan */
+            if (cinfo->Ss == 0 && cinfo->Ah == 0)
+            {
+                emit_dht(cinfo, compptr->dc_tbl_no, FALSE);
+            }
+            /* AC needs no table when not present */
+            if (cinfo->Se)
+            {
+                emit_dht(cinfo, compptr->ac_tbl_no, TRUE);
+            }
+        }
+    }
+
+    /* Emit DRI if required --- note that DRI value could change for each scan.
+     * We avoid wasting space with unnecessary DRIs, however.
+     */
+    if (cinfo->restart_interval != marker->last_restart_interval)
+    {
+        emit_dri(cinfo);
+        marker->last_restart_interval = cinfo->restart_interval;
+    }
+
+    emit_sos(cinfo);
+}
+
+
+/*
+ * Write datastream trailer.
+ */
+
+METHODDEF(void)
+write_file_trailer (j_compress_ptr cinfo)
+{
+    emit_marker(cinfo, M_EOI);
+}
+
+
+/*
+ * Write an abbreviated table-specification datastream.
+ * This consists of SOI, DQT and DHT tables, and EOI.
+ * Any table that is defined and not marked sent_table = TRUE will be
+ * emitted.  Note that all tables will be marked sent_table = TRUE at exit.
+ */
+
+METHODDEF(void)
+write_tables_only (j_compress_ptr cinfo)
+{
+    int i;
+
+    emit_marker(cinfo, M_SOI);
+
+    for (i = 0; i < NUM_QUANT_TBLS; i++)
+    {
+        if (cinfo->quant_tbl_ptrs[i] != NULL)
+        {
+            (void) emit_dqt(cinfo, i);
+        }
+    }
+
+    if (! cinfo->arith_code)
+    {
+        for (i = 0; i < NUM_HUFF_TBLS; i++)
+        {
+            if (cinfo->dc_huff_tbl_ptrs[i] != NULL)
+            {
+                emit_dht(cinfo, i, FALSE);
+            }
+            if (cinfo->ac_huff_tbl_ptrs[i] != NULL)
+            {
+                emit_dht(cinfo, i, TRUE);
+            }
+        }
+    }
+
+    emit_marker(cinfo, M_EOI);
+}
+
+
+/*
+ * Initialize the marker writer module.
+ */
+
+GLOBAL(void)
+jinit_marker_writer (j_compress_ptr cinfo)
+{
+    my_marker_ptr marker;
+
+    /* Create the subobject */
+    marker = (my_marker_ptr)
+             (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
+                                         SIZEOF(my_marker_writer));
+    cinfo->marker = (struct jpeg_marker_writer *) marker;
+    /* Initialize method pointers */
+    marker->pub.write_file_header = write_file_header;
+    marker->pub.write_frame_header = write_frame_header;
+    marker->pub.write_scan_header = write_scan_header;
+    marker->pub.write_file_trailer = write_file_trailer;
+    marker->pub.write_tables_only = write_tables_only;
+    marker->pub.write_marker_header = write_marker_header;
+    marker->pub.write_marker_byte = write_marker_byte;
+    /* Initialize private state */
+    marker->last_restart_interval = 0;
+}
diff -NEaurb neo/renderer/jpeg-8c/jcmaster.c neo/renderer/jpeg-8c/jcmaster.c
--- neo/renderer/jpeg-8c/jcmaster.c	1970-01-01 00:00:00 +0000
+++ neo/renderer/jpeg-8c/jcmaster.c	2012-11-17 01:20:41 +0000
@@ -0,0 +1,1047 @@
+/*
+ * jcmaster.c
+ *
+ * Copyright (C) 1991-1997, Thomas G. Lane.
+ * Modified 2003-2011 by Guido Vollbeding.
+ * This file is part of the Independent JPEG Group's software.
+ * For conditions of distribution and use, see the accompanying README file.
+ *
+ * This file contains master control logic for the JPEG compressor.
+ * These routines are concerned with parameter validation, initial setup,
+ * and inter-pass control (determining the number of passes and the work
+ * to be done in each pass).
+ */
+
+#define JPEG_INTERNALS
+#include "jinclude.h"
+#include "jpeglib.h"
+
+
+/* Private state */
+
+typedef enum
+{
+    main_pass,		/* input data, also do first output step */
+    huff_opt_pass,		/* Huffman code optimization pass */
+    output_pass		/* data output pass */
+} c_pass_type;
+
+typedef struct
+{
+    struct jpeg_comp_master pub;	/* public fields */
+
+    c_pass_type pass_type;	/* the type of the current pass */
+
+    int pass_number;		/* # of passes completed */
+    int total_passes;		/* total # of passes needed */
+
+    int scan_number;		/* current index in scan_info[] */
+} my_comp_master;
+
+typedef my_comp_master * my_master_ptr;
+
+
+/*
+ * Support routines that do various essential calculations.
+ */
+
+/*
+ * Compute JPEG image dimensions and related values.
+ * NOTE: this is exported for possible use by application.
+ * Hence it mustn't do anything that can't be done twice.
+ */
+
+GLOBAL(void)
+jpeg_calc_jpeg_dimensions (j_compress_ptr cinfo)
+/* Do computations that are needed before master selection phase */
+{
+#ifdef DCT_SCALING_SUPPORTED
+
+    /* Sanity check on input image dimensions to prevent overflow in
+     * following calculation.
+     * We do check jpeg_width and jpeg_height in initial_setup below,
+     * but image_width and image_height can come from arbitrary data,
+     * and we need some space for multiplication by block_size.
+     */
+    if (((long) cinfo->image_width >> 24) || ((long) cinfo->image_height >> 24))
+    {
+        ERREXIT1(cinfo, JERR_IMAGE_TOO_BIG, (unsigned int) JPEG_MAX_DIMENSION);
+    }
+
+    /* Compute actual JPEG image dimensions and DCT scaling choices. */
+    if (cinfo->scale_num >= cinfo->scale_denom * cinfo->block_size)
+    {
+        /* Provide block_size/1 scaling */
+        cinfo->jpeg_width = cinfo->image_width * cinfo->block_size;
+        cinfo->jpeg_height = cinfo->image_height * cinfo->block_size;
+        cinfo->min_DCT_h_scaled_size = 1;
+        cinfo->min_DCT_v_scaled_size = 1;
+    }
+    else if (cinfo->scale_num * 2 >= cinfo->scale_denom * cinfo->block_size)
+    {
+        /* Provide block_size/2 scaling */
+        cinfo->jpeg_width = (JDIMENSION)
+                            jdiv_round_up((long) cinfo->image_width * cinfo->block_size, 2L);
+        cinfo->jpeg_height = (JDIMENSION)
+                             jdiv_round_up((long) cinfo->image_height * cinfo->block_size, 2L);
+        cinfo->min_DCT_h_scaled_size = 2;
+        cinfo->min_DCT_v_scaled_size = 2;
+    }
+    else if (cinfo->scale_num * 3 >= cinfo->scale_denom * cinfo->block_size)
+    {
+        /* Provide block_size/3 scaling */
+        cinfo->jpeg_width = (JDIMENSION)
+                            jdiv_round_up((long) cinfo->image_width * cinfo->block_size, 3L);
+        cinfo->jpeg_height = (JDIMENSION)
+                             jdiv_round_up((long) cinfo->image_height * cinfo->block_size, 3L);
+        cinfo->min_DCT_h_scaled_size = 3;
+        cinfo->min_DCT_v_scaled_size = 3;
+    }
+    else if (cinfo->scale_num * 4 >= cinfo->scale_denom * cinfo->block_size)
+    {
+        /* Provide block_size/4 scaling */
+        cinfo->jpeg_width = (JDIMENSION)
+                            jdiv_round_up((long) cinfo->image_width * cinfo->block_size, 4L);
+        cinfo->jpeg_height = (JDIMENSION)
+                             jdiv_round_up((long) cinfo->image_height * cinfo->block_size, 4L);
+        cinfo->min_DCT_h_scaled_size = 4;
+        cinfo->min_DCT_v_scaled_size = 4;
+    }
+    else if (cinfo->scale_num * 5 >= cinfo->scale_denom * cinfo->block_size)
+    {
+        /* Provide block_size/5 scaling */
+        cinfo->jpeg_width = (JDIMENSION)
+                            jdiv_round_up((long) cinfo->image_width * cinfo->block_size, 5L);
+        cinfo->jpeg_height = (JDIMENSION)
+                             jdiv_round_up((long) cinfo->image_height * cinfo->block_size, 5L);
+        cinfo->min_DCT_h_scaled_size = 5;
+        cinfo->min_DCT_v_scaled_size = 5;
+    }
+    else if (cinfo->scale_num * 6 >= cinfo->scale_denom * cinfo->block_size)
+    {
+        /* Provide block_size/6 scaling */
+        cinfo->jpeg_width = (JDIMENSION)
+                            jdiv_round_up((long) cinfo->image_width * cinfo->block_size, 6L);
+        cinfo->jpeg_height = (JDIMENSION)
+                             jdiv_round_up((long) cinfo->image_height * cinfo->block_size, 6L);
+        cinfo->min_DCT_h_scaled_size = 6;
+        cinfo->min_DCT_v_scaled_size = 6;
+    }
+    else if (cinfo->scale_num * 7 >= cinfo->scale_denom * cinfo->block_size)
+    {
+        /* Provide block_size/7 scaling */
+        cinfo->jpeg_width = (JDIMENSION)
+                            jdiv_round_up((long) cinfo->image_width * cinfo->block_size, 7L);
+        cinfo->jpeg_height = (JDIMENSION)
+                             jdiv_round_up((long) cinfo->image_height * cinfo->block_size, 7L);
+        cinfo->min_DCT_h_scaled_size = 7;
+        cinfo->min_DCT_v_scaled_size = 7;
+    }
+    else if (cinfo->scale_num * 8 >= cinfo->scale_denom * cinfo->block_size)
+    {
+        /* Provide block_size/8 scaling */
+        cinfo->jpeg_width = (JDIMENSION)
+                            jdiv_round_up((long) cinfo->image_width * cinfo->block_size, 8L);
+        cinfo->jpeg_height = (JDIMENSION)
+                             jdiv_round_up((long) cinfo->image_height * cinfo->block_size, 8L);
+        cinfo->min_DCT_h_scaled_size = 8;
+        cinfo->min_DCT_v_scaled_size = 8;
+    }
+    else if (cinfo->scale_num * 9 >= cinfo->scale_denom * cinfo->block_size)
+    {
+        /* Provide block_size/9 scaling */
+        cinfo->jpeg_width = (JDIMENSION)
+                            jdiv_round_up((long) cinfo->image_width * cinfo->block_size, 9L);
+        cinfo->jpeg_height = (JDIMENSION)
+                             jdiv_round_up((long) cinfo->image_height * cinfo->block_size, 9L);
+        cinfo->min_DCT_h_scaled_size = 9;
+        cinfo->min_DCT_v_scaled_size = 9;
+    }
+    else if (cinfo->scale_num * 10 >= cinfo->scale_denom * cinfo->block_size)
+    {
+        /* Provide block_size/10 scaling */
+        cinfo->jpeg_width = (JDIMENSION)
+                            jdiv_round_up((long) cinfo->image_width * cinfo->block_size, 10L);
+        cinfo->jpeg_height = (JDIMENSION)
+                             jdiv_round_up((long) cinfo->image_height * cinfo->block_size, 10L);
+        cinfo->min_DCT_h_scaled_size = 10;
+        cinfo->min_DCT_v_scaled_size = 10;
+    }
+    else if (cinfo->scale_num * 11 >= cinfo->scale_denom * cinfo->block_size)
+    {
+        /* Provide block_size/11 scaling */
+        cinfo->jpeg_width = (JDIMENSION)
+                            jdiv_round_up((long) cinfo->image_width * cinfo->block_size, 11L);
+        cinfo->jpeg_height = (JDIMENSION)
+                             jdiv_round_up((long) cinfo->image_height * cinfo->block_size, 11L);
+        cinfo->min_DCT_h_scaled_size = 11;
+        cinfo->min_DCT_v_scaled_size = 11;
+    }
+    else if (cinfo->scale_num * 12 >= cinfo->scale_denom * cinfo->block_size)
+    {
+        /* Provide block_size/12 scaling */
+        cinfo->jpeg_width = (JDIMENSION)
+                            jdiv_round_up((long) cinfo->image_width * cinfo->block_size, 12L);
+        cinfo->jpeg_height = (JDIMENSION)
+                             jdiv_round_up((long) cinfo->image_height * cinfo->block_size, 12L);
+        cinfo->min_DCT_h_scaled_size = 12;
+        cinfo->min_DCT_v_scaled_size = 12;
+    }
+    else if (cinfo->scale_num * 13 >= cinfo->scale_denom * cinfo->block_size)
+    {
+        /* Provide block_size/13 scaling */
+        cinfo->jpeg_width = (JDIMENSION)
+                            jdiv_round_up((long) cinfo->image_width * cinfo->block_size, 13L);
+        cinfo->jpeg_height = (JDIMENSION)
+                             jdiv_round_up((long) cinfo->image_height * cinfo->block_size, 13L);
+        cinfo->min_DCT_h_scaled_size = 13;
+        cinfo->min_DCT_v_scaled_size = 13;
+    }
+    else if (cinfo->scale_num * 14 >= cinfo->scale_denom * cinfo->block_size)
+    {
+        /* Provide block_size/14 scaling */
+        cinfo->jpeg_width = (JDIMENSION)
+                            jdiv_round_up((long) cinfo->image_width * cinfo->block_size, 14L);
+        cinfo->jpeg_height = (JDIMENSION)
+                             jdiv_round_up((long) cinfo->image_height * cinfo->block_size, 14L);
+        cinfo->min_DCT_h_scaled_size = 14;
+        cinfo->min_DCT_v_scaled_size = 14;
+    }
+    else if (cinfo->scale_num * 15 >= cinfo->scale_denom * cinfo->block_size)
+    {
+        /* Provide block_size/15 scaling */
+        cinfo->jpeg_width = (JDIMENSION)
+                            jdiv_round_up((long) cinfo->image_width * cinfo->block_size, 15L);
+        cinfo->jpeg_height = (JDIMENSION)
+                             jdiv_round_up((long) cinfo->image_height * cinfo->block_size, 15L);
+        cinfo->min_DCT_h_scaled_size = 15;
+        cinfo->min_DCT_v_scaled_size = 15;
+    }
+    else
+    {
+        /* Provide block_size/16 scaling */
+        cinfo->jpeg_width = (JDIMENSION)
+                            jdiv_round_up((long) cinfo->image_width * cinfo->block_size, 16L);
+        cinfo->jpeg_height = (JDIMENSION)
+                             jdiv_round_up((long) cinfo->image_height * cinfo->block_size, 16L);
+        cinfo->min_DCT_h_scaled_size = 16;
+        cinfo->min_DCT_v_scaled_size = 16;
+    }
+
+#else /* !DCT_SCALING_SUPPORTED */
+
+    /* Hardwire it to "no scaling" */
+    cinfo->jpeg_width = cinfo->image_width;
+    cinfo->jpeg_height = cinfo->image_height;
+    cinfo->min_DCT_h_scaled_size = DCTSIZE;
+    cinfo->min_DCT_v_scaled_size = DCTSIZE;
+
+#endif /* DCT_SCALING_SUPPORTED */
+}
+
+
+LOCAL(void)
+jpeg_calc_trans_dimensions (j_compress_ptr cinfo)
+{
+    if (cinfo->min_DCT_h_scaled_size != cinfo->min_DCT_v_scaled_size)
+        ERREXIT2(cinfo, JERR_BAD_DCTSIZE,
+                 cinfo->min_DCT_h_scaled_size, cinfo->min_DCT_v_scaled_size);
+
+    cinfo->block_size = cinfo->min_DCT_h_scaled_size;
+}
+
+
+LOCAL(void)
+initial_setup (j_compress_ptr cinfo, boolean transcode_only)
+/* Do computations that are needed before master selection phase */
+{
+    int ci, ssize;
+    jpeg_component_info *compptr;
+    long samplesperrow;
+    JDIMENSION jd_samplesperrow;
+
+    if (transcode_only)
+    {
+        jpeg_calc_trans_dimensions(cinfo);
+    }
+    else
+    {
+        jpeg_calc_jpeg_dimensions(cinfo);
+    }
+
+    /* Sanity check on block_size */
+    if (cinfo->block_size < 1 || cinfo->block_size > 16)
+    {
+        ERREXIT2(cinfo, JERR_BAD_DCTSIZE, cinfo->block_size, cinfo->block_size);
+    }
+
+    /* Derive natural_order from block_size */
+    switch (cinfo->block_size)
+    {
+    case 2:
+        cinfo->natural_order = jpeg_natural_order2;
+        break;
+    case 3:
+        cinfo->natural_order = jpeg_natural_order3;
+        break;
+    case 4:
+        cinfo->natural_order = jpeg_natural_order4;
+        break;
+    case 5:
+        cinfo->natural_order = jpeg_natural_order5;
+        break;
+    case 6:
+        cinfo->natural_order = jpeg_natural_order6;
+        break;
+    case 7:
+        cinfo->natural_order = jpeg_natural_order7;
+        break;
+    default:
+        cinfo->natural_order = jpeg_natural_order;
+        break;
+    }
+
+    /* Derive lim_Se from block_size */
+    cinfo->lim_Se = cinfo->block_size < DCTSIZE ?
+                    cinfo->block_size * cinfo->block_size - 1 : DCTSIZE2-1;
+
+    /* Sanity check on image dimensions */
+    if (cinfo->jpeg_height <= 0 || cinfo->jpeg_width <= 0 ||
+            cinfo->num_components <= 0 || cinfo->input_components <= 0)
+    {
+        ERREXIT(cinfo, JERR_EMPTY_IMAGE);
+    }
+
+    /* Make sure image isn't bigger than I can handle */
+    if ((long) cinfo->jpeg_height > (long) JPEG_MAX_DIMENSION ||
+            (long) cinfo->jpeg_width > (long) JPEG_MAX_DIMENSION)
+    {
+        ERREXIT1(cinfo, JERR_IMAGE_TOO_BIG, (unsigned int) JPEG_MAX_DIMENSION);
+    }
+
+    /* Width of an input scanline must be representable as JDIMENSION. */
+    samplesperrow = (long) cinfo->image_width * (long) cinfo->input_components;
+    jd_samplesperrow = (JDIMENSION) samplesperrow;
+    if ((long) jd_samplesperrow != samplesperrow)
+    {
+        ERREXIT(cinfo, JERR_WIDTH_OVERFLOW);
+    }
+
+    /* For now, precision must match compiled-in value... */
+    if (cinfo->data_precision != BITS_IN_JSAMPLE)
+    {
+        ERREXIT1(cinfo, JERR_BAD_PRECISION, cinfo->data_precision);
+    }
+
+    /* Check that number of components won't exceed internal array sizes */
+    if (cinfo->num_components > MAX_COMPONENTS)
+        ERREXIT2(cinfo, JERR_COMPONENT_COUNT, cinfo->num_components,
+                 MAX_COMPONENTS);
+
+    /* Compute maximum sampling factors; check factor validity */
+    cinfo->max_h_samp_factor = 1;
+    cinfo->max_v_samp_factor = 1;
+    for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
+            ci++, compptr++)
+    {
+        if (compptr->h_samp_factor<=0 || compptr->h_samp_factor>MAX_SAMP_FACTOR ||
+                compptr->v_samp_factor<=0 || compptr->v_samp_factor>MAX_SAMP_FACTOR)
+        {
+            ERREXIT(cinfo, JERR_BAD_SAMPLING);
+        }
+        cinfo->max_h_samp_factor = MAX(cinfo->max_h_samp_factor,
+                                       compptr->h_samp_factor);
+        cinfo->max_v_samp_factor = MAX(cinfo->max_v_samp_factor,
+                                       compptr->v_samp_factor);
+    }
+
+    /* Compute dimensions of components */
+    for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
+            ci++, compptr++)
+    {
+        /* Fill in the correct component_index value; don't rely on application */
+        compptr->component_index = ci;
+        /* In selecting the actual DCT scaling for each component, we try to
+         * scale down the chroma components via DCT scaling rather than downsampling.
+         * This saves time if the downsampler gets to use 1:1 scaling.
+         * Note this code adapts subsampling ratios which are powers of 2.
+         */
+        ssize = 1;
+#ifdef DCT_SCALING_SUPPORTED
+        while (cinfo->min_DCT_h_scaled_size * ssize <=
+                (cinfo->do_fancy_downsampling ? DCTSIZE : DCTSIZE / 2) &&
+                (cinfo->max_h_samp_factor % (compptr->h_samp_factor * ssize * 2)) == 0)
+        {
+            ssize = ssize * 2;
+        }
+#endif
+        compptr->DCT_h_scaled_size = cinfo->min_DCT_h_scaled_size * ssize;
+        ssize = 1;
+#ifdef DCT_SCALING_SUPPORTED
+        while (cinfo->min_DCT_v_scaled_size * ssize <=
+                (cinfo->do_fancy_downsampling ? DCTSIZE : DCTSIZE / 2) &&
+                (cinfo->max_v_samp_factor % (compptr->v_samp_factor * ssize * 2)) == 0)
+        {
+            ssize = ssize * 2;
+        }
+#endif
+        compptr->DCT_v_scaled_size = cinfo->min_DCT_v_scaled_size * ssize;
+
+        /* We don't support DCT ratios larger than 2. */
+        if (compptr->DCT_h_scaled_size > compptr->DCT_v_scaled_size * 2)
+        {
+            compptr->DCT_h_scaled_size = compptr->DCT_v_scaled_size * 2;
+        }
+        else if (compptr->DCT_v_scaled_size > compptr->DCT_h_scaled_size * 2)
+        {
+            compptr->DCT_v_scaled_size = compptr->DCT_h_scaled_size * 2;
+        }
+
+        /* Size in DCT blocks */
+        compptr->width_in_blocks = (JDIMENSION)
+                                   jdiv_round_up((long) cinfo->jpeg_width * (long) compptr->h_samp_factor,
+                                           (long) (cinfo->max_h_samp_factor * cinfo->block_size));
+        compptr->height_in_blocks = (JDIMENSION)
+                                    jdiv_round_up((long) cinfo->jpeg_height * (long) compptr->v_samp_factor,
+                                            (long) (cinfo->max_v_samp_factor * cinfo->block_size));
+        /* Size in samples */
+        compptr->downsampled_width = (JDIMENSION)
+                                     jdiv_round_up((long) cinfo->jpeg_width *
+                                             (long) (compptr->h_samp_factor * compptr->DCT_h_scaled_size),
+                                             (long) (cinfo->max_h_samp_factor * cinfo->block_size));
+        compptr->downsampled_height = (JDIMENSION)
+                                      jdiv_round_up((long) cinfo->jpeg_height *
+                                              (long) (compptr->v_samp_factor * compptr->DCT_v_scaled_size),
+                                              (long) (cinfo->max_v_samp_factor * cinfo->block_size));
+        /* Mark component needed (this flag isn't actually used for compression) */
+        compptr->component_needed = TRUE;
+    }
+
+    /* Compute number of fully interleaved MCU rows (number of times that
+     * main controller will call coefficient controller).
+     */
+    cinfo->total_iMCU_rows = (JDIMENSION)
+                             jdiv_round_up((long) cinfo->jpeg_height,
+                                           (long) (cinfo->max_v_samp_factor * cinfo->block_size));
+}
+
+
+#ifdef C_MULTISCAN_FILES_SUPPORTED
+
+LOCAL(void)
+validate_script (j_compress_ptr cinfo)
+/* Verify that the scan script in cinfo->scan_info[] is valid; also
+ * determine whether it uses progressive JPEG, and set cinfo->progressive_mode.
+ */
+{
+    const jpeg_scan_info * scanptr;
+    int scanno, ncomps, ci, coefi, thisi;
+    int Ss, Se, Ah, Al;
+    boolean component_sent[MAX_COMPONENTS];
+#ifdef C_PROGRESSIVE_SUPPORTED
+    int * last_bitpos_ptr;
+    int last_bitpos[MAX_COMPONENTS][DCTSIZE2];
+    /* -1 until that coefficient has been seen; then last Al for it */
+#endif
+
+    if (cinfo->num_scans <= 0)
+    {
+        ERREXIT1(cinfo, JERR_BAD_SCAN_SCRIPT, 0);
+    }
+
+    /* For sequential JPEG, all scans must have Ss=0, Se=DCTSIZE2-1;
+     * for progressive JPEG, no scan can have this.
+     */
+    scanptr = cinfo->scan_info;
+    if (scanptr->Ss != 0 || scanptr->Se != DCTSIZE2-1)
+    {
+#ifdef C_PROGRESSIVE_SUPPORTED
+        cinfo->progressive_mode = TRUE;
+        last_bitpos_ptr = & last_bitpos[0][0];
+        for (ci = 0; ci < cinfo->num_components; ci++)
+            for (coefi = 0; coefi < DCTSIZE2; coefi++)
+            {
+                *last_bitpos_ptr++ = -1;
+            }
+#else
+        ERREXIT(cinfo, JERR_NOT_COMPILED);
+#endif
+    }
+    else
+    {
+        cinfo->progressive_mode = FALSE;
+        for (ci = 0; ci < cinfo->num_components; ci++)
+        {
+            component_sent[ci] = FALSE;
+        }
+    }
+
+    for (scanno = 1; scanno <= cinfo->num_scans; scanptr++, scanno++)
+    {
+        /* Validate component indexes */
+        ncomps = scanptr->comps_in_scan;
+        if (ncomps <= 0 || ncomps > MAX_COMPS_IN_SCAN)
+        {
+            ERREXIT2(cinfo, JERR_COMPONENT_COUNT, ncomps, MAX_COMPS_IN_SCAN);
+        }
+        for (ci = 0; ci < ncomps; ci++)
+        {
+            thisi = scanptr->component_index[ci];
+            if (thisi < 0 || thisi >= cinfo->num_components)
+            {
+                ERREXIT1(cinfo, JERR_BAD_SCAN_SCRIPT, scanno);
+            }
+            /* Components must appear in SOF order within each scan */
+            if (ci > 0 && thisi <= scanptr->component_index[ci-1])
+            {
+                ERREXIT1(cinfo, JERR_BAD_SCAN_SCRIPT, scanno);
+            }
+        }
+        /* Validate progression parameters */
+        Ss = scanptr->Ss;
+        Se = scanptr->Se;
+        Ah = scanptr->Ah;
+        Al = scanptr->Al;
+        if (cinfo->progressive_mode)
+        {
+#ifdef C_PROGRESSIVE_SUPPORTED
+            /* The JPEG spec simply gives the ranges 0..13 for Ah and Al, but that
+             * seems wrong: the upper bound ought to depend on data precision.
+             * Perhaps they really meant 0..N+1 for N-bit precision.
+             * Here we allow 0..10 for 8-bit data; Al larger than 10 results in
+             * out-of-range reconstructed DC values during the first DC scan,
+             * which might cause problems for some decoders.
+             */
+#if BITS_IN_JSAMPLE == 8
+#define MAX_AH_AL 10
+#else
+#define MAX_AH_AL 13
+#endif
+            if (Ss < 0 || Ss >= DCTSIZE2 || Se < Ss || Se >= DCTSIZE2 ||
+                    Ah < 0 || Ah > MAX_AH_AL || Al < 0 || Al > MAX_AH_AL)
+            {
+                ERREXIT1(cinfo, JERR_BAD_PROG_SCRIPT, scanno);
+            }
+            if (Ss == 0)
+            {
+                if (Se != 0)		/* DC and AC together not OK */
+                {
+                    ERREXIT1(cinfo, JERR_BAD_PROG_SCRIPT, scanno);
+                }
+            }
+            else
+            {
+                if (ncomps != 1)	/* AC scans must be for only one component */
+                {
+                    ERREXIT1(cinfo, JERR_BAD_PROG_SCRIPT, scanno);
+                }
+            }
+            for (ci = 0; ci < ncomps; ci++)
+            {
+                last_bitpos_ptr = & last_bitpos[scanptr->component_index[ci]][0];
+                if (Ss != 0 && last_bitpos_ptr[0] < 0) /* AC without prior DC scan */
+                {
+                    ERREXIT1(cinfo, JERR_BAD_PROG_SCRIPT, scanno);
+                }
+                for (coefi = Ss; coefi <= Se; coefi++)
+                {
+                    if (last_bitpos_ptr[coefi] < 0)
+                    {
+                        /* first scan of this coefficient */
+                        if (Ah != 0)
+                        {
+                            ERREXIT1(cinfo, JERR_BAD_PROG_SCRIPT, scanno);
+                        }
+                    }
+                    else
+                    {
+                        /* not first scan */
+                        if (Ah != last_bitpos_ptr[coefi] || Al != Ah-1)
+                        {
+                            ERREXIT1(cinfo, JERR_BAD_PROG_SCRIPT, scanno);
+                        }
+                    }
+                    last_bitpos_ptr[coefi] = Al;
+                }
+            }
+#endif
+        }
+        else
+        {
+            /* For sequential JPEG, all progression parameters must be these: */
+            if (Ss != 0 || Se != DCTSIZE2-1 || Ah != 0 || Al != 0)
+            {
+                ERREXIT1(cinfo, JERR_BAD_PROG_SCRIPT, scanno);
+            }
+            /* Make sure components are not sent twice */
+            for (ci = 0; ci < ncomps; ci++)
+            {
+                thisi = scanptr->component_index[ci];
+                if (component_sent[thisi])
+                {
+                    ERREXIT1(cinfo, JERR_BAD_SCAN_SCRIPT, scanno);
+                }
+                component_sent[thisi] = TRUE;
+            }
+        }
+    }
+
+    /* Now verify that everything got sent. */
+    if (cinfo->progressive_mode)
+    {
+#ifdef C_PROGRESSIVE_SUPPORTED
+        /* For progressive mode, we only check that at least some DC data
+         * got sent for each component; the spec does not require that all bits
+         * of all coefficients be transmitted.  Would it be wiser to enforce
+         * transmission of all coefficient bits??
+         */
+        for (ci = 0; ci < cinfo->num_components; ci++)
+        {
+            if (last_bitpos[ci][0] < 0)
+            {
+                ERREXIT(cinfo, JERR_MISSING_DATA);
+            }
+        }
+#endif
+    }
+    else
+    {
+        for (ci = 0; ci < cinfo->num_components; ci++)
+        {
+            if (! component_sent[ci])
+            {
+                ERREXIT(cinfo, JERR_MISSING_DATA);
+            }
+        }
+    }
+}
+
+
+LOCAL(void)
+reduce_script (j_compress_ptr cinfo)
+/* Adapt scan script for use with reduced block size;
+ * assume that script has been validated before.
+ */
+{
+    jpeg_scan_info * scanptr;
+    int idxout, idxin;
+
+    /* Circumvent const declaration for this function */
+    scanptr = (jpeg_scan_info *) cinfo->scan_info;
+    idxout = 0;
+
+    for (idxin = 0; idxin < cinfo->num_scans; idxin++)
+    {
+        /* After skipping, idxout becomes smaller than idxin */
+        if (idxin != idxout)
+            /* Copy rest of data;
+             * note we stay in given chunk of allocated memory.
+             */
+        {
+            scanptr[idxout] = scanptr[idxin];
+        }
+        if (scanptr[idxout].Ss > cinfo->lim_Se)
+            /* Entire scan out of range - skip this entry */
+        {
+            continue;
+        }
+        if (scanptr[idxout].Se > cinfo->lim_Se)
+            /* Limit scan to end of block */
+        {
+            scanptr[idxout].Se = cinfo->lim_Se;
+        }
+        idxout++;
+    }
+
+    cinfo->num_scans = idxout;
+}
+
+#endif /* C_MULTISCAN_FILES_SUPPORTED */
+
+
+LOCAL(void)
+select_scan_parameters (j_compress_ptr cinfo)
+/* Set up the scan parameters for the current scan */
+{
+    int ci;
+
+#ifdef C_MULTISCAN_FILES_SUPPORTED
+    if (cinfo->scan_info != NULL)
+    {
+        /* Prepare for current scan --- the script is already validated */
+        my_master_ptr master = (my_master_ptr) cinfo->master;
+        const jpeg_scan_info * scanptr = cinfo->scan_info + master->scan_number;
+
+        cinfo->comps_in_scan = scanptr->comps_in_scan;
+        for (ci = 0; ci < scanptr->comps_in_scan; ci++)
+        {
+            cinfo->cur_comp_info[ci] =
+                &cinfo->comp_info[scanptr->component_index[ci]];
+        }
+        if (cinfo->progressive_mode)
+        {
+            cinfo->Ss = scanptr->Ss;
+            cinfo->Se = scanptr->Se;
+            cinfo->Ah = scanptr->Ah;
+            cinfo->Al = scanptr->Al;
+            return;
+        }
+    }
+    else
+#endif
+    {
+        /* Prepare for single sequential-JPEG scan containing all components */
+        if (cinfo->num_components > MAX_COMPS_IN_SCAN)
+            ERREXIT2(cinfo, JERR_COMPONENT_COUNT, cinfo->num_components,
+                     MAX_COMPS_IN_SCAN);
+        cinfo->comps_in_scan = cinfo->num_components;
+        for (ci = 0; ci < cinfo->num_components; ci++)
+        {
+            cinfo->cur_comp_info[ci] = &cinfo->comp_info[ci];
+        }
+    }
+    cinfo->Ss = 0;
+    cinfo->Se = cinfo->block_size * cinfo->block_size - 1;
+    cinfo->Ah = 0;
+    cinfo->Al = 0;
+}
+
+
+LOCAL(void)
+per_scan_setup (j_compress_ptr cinfo)
+/* Do computations that are needed before processing a JPEG scan */
+/* cinfo->comps_in_scan and cinfo->cur_comp_info[] are already set */
+{
+    int ci, mcublks, tmp;
+    jpeg_component_info *compptr;
+
+    if (cinfo->comps_in_scan == 1)
+    {
+
+        /* Noninterleaved (single-component) scan */
+        compptr = cinfo->cur_comp_info[0];
+
+        /* Overall image size in MCUs */
+        cinfo->MCUs_per_row = compptr->width_in_blocks;
+        cinfo->MCU_rows_in_scan = compptr->height_in_blocks;
+
+        /* For noninterleaved scan, always one block per MCU */
+        compptr->MCU_width = 1;
+        compptr->MCU_height = 1;
+        compptr->MCU_blocks = 1;
+        compptr->MCU_sample_width = compptr->DCT_h_scaled_size;
+        compptr->last_col_width = 1;
+        /* For noninterleaved scans, it is convenient to define last_row_height
+         * as the number of block rows present in the last iMCU row.
+         */
+        tmp = (int) (compptr->height_in_blocks % compptr->v_samp_factor);
+        if (tmp == 0)
+        {
+            tmp = compptr->v_samp_factor;
+        }
+        compptr->last_row_height = tmp;
+
+        /* Prepare array describing MCU composition */
+        cinfo->blocks_in_MCU = 1;
+        cinfo->MCU_membership[0] = 0;
+
+    }
+    else
+    {
+
+        /* Interleaved (multi-component) scan */
+        if (cinfo->comps_in_scan <= 0 || cinfo->comps_in_scan > MAX_COMPS_IN_SCAN)
+            ERREXIT2(cinfo, JERR_COMPONENT_COUNT, cinfo->comps_in_scan,
+                     MAX_COMPS_IN_SCAN);
+
+        /* Overall image size in MCUs */
+        cinfo->MCUs_per_row = (JDIMENSION)
+                              jdiv_round_up((long) cinfo->jpeg_width,
+                                            (long) (cinfo->max_h_samp_factor * cinfo->block_size));
+        cinfo->MCU_rows_in_scan = (JDIMENSION)
+                                  jdiv_round_up((long) cinfo->jpeg_height,
+                                                (long) (cinfo->max_v_samp_factor * cinfo->block_size));
+
+        cinfo->blocks_in_MCU = 0;
+
+        for (ci = 0; ci < cinfo->comps_in_scan; ci++)
+        {
+            compptr = cinfo->cur_comp_info[ci];
+            /* Sampling factors give # of blocks of component in each MCU */
+            compptr->MCU_width = compptr->h_samp_factor;
+            compptr->MCU_height = compptr->v_samp_factor;
+            compptr->MCU_blocks = compptr->MCU_width * compptr->MCU_height;
+            compptr->MCU_sample_width = compptr->MCU_width * compptr->DCT_h_scaled_size;
+            /* Figure number of non-dummy blocks in last MCU column & row */
+            tmp = (int) (compptr->width_in_blocks % compptr->MCU_width);
+            if (tmp == 0)
+            {
+                tmp = compptr->MCU_width;
+            }
+            compptr->last_col_width = tmp;
+            tmp = (int) (compptr->height_in_blocks % compptr->MCU_height);
+            if (tmp == 0)
+            {
+                tmp = compptr->MCU_height;
+            }
+            compptr->last_row_height = tmp;
+            /* Prepare array describing MCU composition */
+            mcublks = compptr->MCU_blocks;
+            if (cinfo->blocks_in_MCU + mcublks > C_MAX_BLOCKS_IN_MCU)
+            {
+                ERREXIT(cinfo, JERR_BAD_MCU_SIZE);
+            }
+            while (mcublks-- > 0)
+            {
+                cinfo->MCU_membership[cinfo->blocks_in_MCU++] = ci;
+            }
+        }
+
+    }
+
+    /* Convert restart specified in rows to actual MCU count. */
+    /* Note that count must fit in 16 bits, so we provide limiting. */
+    if (cinfo->restart_in_rows > 0)
+    {
+        long nominal = (long) cinfo->restart_in_rows * (long) cinfo->MCUs_per_row;
+        cinfo->restart_interval = (unsigned int) MIN(nominal, 65535L);
+    }
+}
+
+
+/*
+ * Per-pass setup.
+ * This is called at the beginning of each pass.  We determine which modules
+ * will be active during this pass and give them appropriate start_pass calls.
+ * We also set is_last_pass to indicate whether any more passes will be
+ * required.
+ */
+
+METHODDEF(void)
+prepare_for_pass (j_compress_ptr cinfo)
+{
+    my_master_ptr master = (my_master_ptr) cinfo->master;
+
+    switch (master->pass_type)
+    {
+    case main_pass:
+        /* Initial pass: will collect input data, and do either Huffman
+         * optimization or data output for the first scan.
+         */
+        select_scan_parameters(cinfo);
+        per_scan_setup(cinfo);
+        if (! cinfo->raw_data_in)
+        {
+            (*cinfo->cconvert->start_pass) (cinfo);
+            (*cinfo->downsample->start_pass) (cinfo);
+            (*cinfo->prep->start_pass) (cinfo, JBUF_PASS_THRU);
+        }
+        (*cinfo->fdct->start_pass) (cinfo);
+        (*cinfo->entropy->start_pass) (cinfo, cinfo->optimize_coding);
+        (*cinfo->coef->start_pass) (cinfo,
+                                    (master->total_passes > 1 ?
+                                     JBUF_SAVE_AND_PASS : JBUF_PASS_THRU));
+        (*cinfo->main->start_pass) (cinfo, JBUF_PASS_THRU);
+        if (cinfo->optimize_coding)
+        {
+            /* No immediate data output; postpone writing frame/scan headers */
+            master->pub.call_pass_startup = FALSE;
+        }
+        else
+        {
+            /* Will write frame/scan headers at first jpeg_write_scanlines call */
+            master->pub.call_pass_startup = TRUE;
+        }
+        break;
+#ifdef ENTROPY_OPT_SUPPORTED
+    case huff_opt_pass:
+        /* Do Huffman optimization for a scan after the first one. */
+        select_scan_parameters(cinfo);
+        per_scan_setup(cinfo);
+        if (cinfo->Ss != 0 || cinfo->Ah == 0)
+        {
+            (*cinfo->entropy->start_pass) (cinfo, TRUE);
+            (*cinfo->coef->start_pass) (cinfo, JBUF_CRANK_DEST);
+            master->pub.call_pass_startup = FALSE;
+            break;
+        }
+        /* Special case: Huffman DC refinement scans need no Huffman table
+         * and therefore we can skip the optimization pass for them.
+         */
+        master->pass_type = output_pass;
+        master->pass_number++;
+        /*FALLTHROUGH*/
+#endif
+    case output_pass:
+        /* Do a data-output pass. */
+        /* We need not repeat per-scan setup if prior optimization pass did it. */
+        if (! cinfo->optimize_coding)
+        {
+            select_scan_parameters(cinfo);
+            per_scan_setup(cinfo);
+        }
+        (*cinfo->entropy->start_pass) (cinfo, FALSE);
+        (*cinfo->coef->start_pass) (cinfo, JBUF_CRANK_DEST);
+        /* We emit frame/scan headers now */
+        if (master->scan_number == 0)
+        {
+            (*cinfo->marker->write_frame_header) (cinfo);
+        }
+        (*cinfo->marker->write_scan_header) (cinfo);
+        master->pub.call_pass_startup = FALSE;
+        break;
+    default:
+        ERREXIT(cinfo, JERR_NOT_COMPILED);
+    }
+
+    master->pub.is_last_pass = (master->pass_number == master->total_passes-1);
+
+    /* Set up progress monitor's pass info if present */
+    if (cinfo->progress != NULL)
+    {
+        cinfo->progress->completed_passes = master->pass_number;
+        cinfo->progress->total_passes = master->total_passes;
+    }
+}
+
+
+/*
+ * Special start-of-pass hook.
+ * This is called by jpeg_write_scanlines if call_pass_startup is TRUE.
+ * In single-pass processing, we need this hook because we don't want to
+ * write frame/scan headers during jpeg_start_compress; we want to let the
+ * application write COM markers etc. between jpeg_start_compress and the
+ * jpeg_write_scanlines loop.
+ * In multi-pass processing, this routine is not used.
+ */
+
+METHODDEF(void)
+pass_startup (j_compress_ptr cinfo)
+{
+    cinfo->master->call_pass_startup = FALSE; /* reset flag so call only once */
+
+    (*cinfo->marker->write_frame_header) (cinfo);
+    (*cinfo->marker->write_scan_header) (cinfo);
+}
+
+
+/*
+ * Finish up at end of pass.
+ */
+
+METHODDEF(void)
+finish_pass_master (j_compress_ptr cinfo)
+{
+    my_master_ptr master = (my_master_ptr) cinfo->master;
+
+    /* The entropy coder always needs an end-of-pass call,
+     * either to analyze statistics or to flush its output buffer.
+     */
+    (*cinfo->entropy->finish_pass) (cinfo);
+
+    /* Update state for next pass */
+    switch (master->pass_type)
+    {
+    case main_pass:
+        /* next pass is either output of scan 0 (after optimization)
+         * or output of scan 1 (if no optimization).
+         */
+        master->pass_type = output_pass;
+        if (! cinfo->optimize_coding)
+        {
+            master->scan_number++;
+        }
+        break;
+    case huff_opt_pass:
+        /* next pass is always output of current scan */
+        master->pass_type = output_pass;
+        break;
+    case output_pass:
+        /* next pass is either optimization or output of next scan */
+        if (cinfo->optimize_coding)
+        {
+            master->pass_type = huff_opt_pass;
+        }
+        master->scan_number++;
+        break;
+    }
+
+    master->pass_number++;
+}
+
+
+/*
+ * Initialize master compression control.
+ */
+
+GLOBAL(void)
+jinit_c_master_control (j_compress_ptr cinfo, boolean transcode_only)
+{
+    my_master_ptr master;
+
+    master = (my_master_ptr)
+             (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
+                                         SIZEOF(my_comp_master));
+    cinfo->master = (struct jpeg_comp_master *) master;
+    master->pub.prepare_for_pass = prepare_for_pass;
+    master->pub.pass_startup = pass_startup;
+    master->pub.finish_pass = finish_pass_master;
+    master->pub.is_last_pass = FALSE;
+
+    /* Validate parameters, determine derived values */
+    initial_setup(cinfo, transcode_only);
+
+    if (cinfo->scan_info != NULL)
+    {
+#ifdef C_MULTISCAN_FILES_SUPPORTED
+        validate_script(cinfo);
+        if (cinfo->block_size < DCTSIZE)
+        {
+            reduce_script(cinfo);
+        }
+#else
+        ERREXIT(cinfo, JERR_NOT_COMPILED);
+#endif
+    }
+    else
+    {
+        cinfo->progressive_mode = FALSE;
+        cinfo->num_scans = 1;
+    }
+
+    if ((cinfo->progressive_mode || cinfo->block_size < DCTSIZE) &&
+            !cinfo->arith_code)			/*  TEMPORARY HACK ??? */
+        /* assume default tables no good for progressive or downscale mode */
+    {
+        cinfo->optimize_coding = TRUE;
+    }
+
+    /* Initialize my private state */
+    if (transcode_only)
+    {
+        /* no main pass in transcoding */
+        if (cinfo->optimize_coding)
+        {
+            master->pass_type = huff_opt_pass;
+        }
+        else
+        {
+            master->pass_type = output_pass;
+        }
+    }
+    else
+    {
+        /* for normal compression, first pass is always this type: */
+        master->pass_type = main_pass;
+    }
+    master->scan_number = 0;
+    master->pass_number = 0;
+    if (cinfo->optimize_coding)
+    {
+        master->total_passes = cinfo->num_scans * 2;
+    }
+    else
+    {
+        master->total_passes = cinfo->num_scans;
+    }
+}
diff -NEaurb neo/renderer/jpeg-8c/jcomapi.c neo/renderer/jpeg-8c/jcomapi.c
--- neo/renderer/jpeg-8c/jcomapi.c	1970-01-01 00:00:00 +0000
+++ neo/renderer/jpeg-8c/jcomapi.c	2012-11-17 01:20:40 +0000
@@ -0,0 +1,113 @@
+/*
+ * jcomapi.c
+ *
+ * Copyright (C) 1994-1997, Thomas G. Lane.
+ * This file is part of the Independent JPEG Group's software.
+ * For conditions of distribution and use, see the accompanying README file.
+ *
+ * This file contains application interface routines that are used for both
+ * compression and decompression.
+ */
+
+#define JPEG_INTERNALS
+#include "jinclude.h"
+#include "jpeglib.h"
+
+/*
+ * Abort processing of a JPEG compression or decompression operation,
+ * but don't destroy the object itself.
+ *
+ * For this, we merely clean up all the nonpermanent memory pools.
+ * Note that temp files (virtual arrays) are not allowed to belong to
+ * the permanent pool, so we will be able to close all temp files here.
+ * Closing a data source or destination, if necessary, is the application's
+ * responsibility.
+ */
+
+GLOBAL(void)
+jpeg_abort (j_common_ptr cinfo)
+{
+    int pool;
+
+    /* Do nothing if called on a not-initialized or destroyed JPEG object. */
+    if (cinfo->mem == NULL)
+    {
+        return;
+    }
+
+    /* Releasing pools in reverse order might help avoid fragmentation
+     * with some (brain-damaged) malloc libraries.
+     */
+    for (pool = JPOOL_NUMPOOLS-1; pool > JPOOL_PERMANENT; pool--)
+    {
+        (*cinfo->mem->free_pool) (cinfo, pool);
+    }
+
+    /* Reset overall state for possible reuse of object */
+    if (cinfo->is_decompressor)
+    {
+        cinfo->global_state = DSTATE_START;
+        /* Try to keep application from accessing now-deleted marker list.
+         * A bit kludgy to do it here, but this is the most central place.
+         */
+        ((j_decompress_ptr) cinfo)->marker_list = NULL;
+    }
+    else
+    {
+        cinfo->global_state = CSTATE_START;
+    }
+}
+
+
+/*
+ * Destruction of a JPEG object.
+ *
+ * Everything gets deallocated except the master jpeg_compress_struct itself
+ * and the error manager struct.  Both of these are supplied by the application
+ * and must be freed, if necessary, by the application.  (Often they are on
+ * the stack and so don't need to be freed anyway.)
+ * Closing a data source or destination, if necessary, is the application's
+ * responsibility.
+ */
+
+GLOBAL(void)
+jpeg_destroy (j_common_ptr cinfo)
+{
+    /* We need only tell the memory manager to release everything. */
+    /* NB: mem pointer is NULL if memory mgr failed to initialize. */
+    if (cinfo->mem != NULL)
+    {
+        (*cinfo->mem->self_destruct) (cinfo);
+    }
+    cinfo->mem = NULL;		/* be safe if jpeg_destroy is called twice */
+    cinfo->global_state = 0;	/* mark it destroyed */
+}
+
+
+/*
+ * Convenience routines for allocating quantization and Huffman tables.
+ * (Would jutils.c be a more reasonable place to put these?)
+ */
+
+GLOBAL(JQUANT_TBL *)
+jpeg_alloc_quant_table (j_common_ptr cinfo)
+{
+    JQUANT_TBL *tbl;
+
+    tbl = (JQUANT_TBL *)
+          (*cinfo->mem->alloc_small) (cinfo, JPOOL_PERMANENT, SIZEOF(JQUANT_TBL));
+    tbl->sent_table = FALSE;	/* make sure this is false in any new table */
+    return tbl;
+}
+
+
+GLOBAL(JHUFF_TBL *)
+jpeg_alloc_huff_table (j_common_ptr cinfo)
+{
+    JHUFF_TBL *tbl;
+
+    tbl = (JHUFF_TBL *)
+          (*cinfo->mem->alloc_small) (cinfo, JPOOL_PERMANENT, SIZEOF(JHUFF_TBL));
+    tbl->sent_table = FALSE;	/* make sure this is false in any new table */
+    return tbl;
+}
diff -NEaurb neo/renderer/jpeg-8c/jconfig.h neo/renderer/jpeg-8c/jconfig.h
--- neo/renderer/jpeg-8c/jconfig.h	1970-01-01 00:00:00 +0000
+++ neo/renderer/jpeg-8c/jconfig.h	2012-11-17 01:20:40 +0000
@@ -0,0 +1,60 @@
+/* jconfig.h.  Generated from jconfig.cfg by configure.  */
+/* jconfig.cfg --- source file edited by configure script */
+/* see jconfig.txt for explanations */
+
+/* Define this if you get warnings about undefined structures. */
+/* #undef INCOMPLETE_TYPES_BROKEN */
+
+#define HAVE_PROTOTYPES 1
+#define HAVE_UNSIGNED_CHAR 1
+#define HAVE_UNSIGNED_SHORT 1
+/* #undef void */
+/* #undef const */
+/* #undef CHAR_IS_UNSIGNED */
+
+#ifdef JPEG_INTERNALS
+
+#define HAVE_STDDEF_H 1
+#define HAVE_STDLIB_H 1
+#define HAVE_LOCALE_H 1
+/* #undef NEED_BSD_STRINGS */
+/* #undef NEED_SYS_TYPES_H */
+/* #undef NEED_FAR_POINTERS */
+/* #undef NEED_SHORT_EXTERNAL_NAMES */
+
+/* Define "boolean" as unsigned char, not int, on Windows systems. */
+#ifdef _WIN32
+#ifndef __RPCNDR_H__		/* don't conflict if rpcndr.h already read */
+typedef unsigned char boolean;
+#endif
+#define HAVE_BOOLEAN		/* prevent jmorecfg.h from redefining it */
+#endif
+
+/* #undef RIGHT_SHIFT_IS_UNSIGNED */
+#ifdef _MSC_VER
+#define INLINE __inline
+#else
+#define INLINE __inline__
+#endif
+/* These are for configuring the JPEG memory manager. */
+/* #undef DEFAULT_MAX_MEM */
+/* #undef NO_MKTEMP */
+
+#endif /* JPEG_INTERNALS */
+
+#ifdef JPEG_CJPEG_DJPEG
+
+#define BMP_SUPPORTED		/* BMP image file format */
+#define GIF_SUPPORTED		/* GIF image file format */
+#define PPM_SUPPORTED		/* PBMPLUS PPM/PGM image file format */
+/* #undef RLE_SUPPORTED */
+#define TARGA_SUPPORTED		/* Targa image file format */
+
+/* #undef TWO_FILE_COMMANDLINE */
+/* #undef NEED_SIGNAL_CATCHER */
+/* #undef DONT_USE_B_MODE */
+
+/* Define this if you want percent-done progress reports from cjpeg/djpeg. */
+/* #undef PROGRESS_REPORT */
+
+#endif /* JPEG_CJPEG_DJPEG */
diff -NEaurb neo/renderer/jpeg-8c/jcparam.c neo/renderer/jpeg-8c/jcparam.c
--- neo/renderer/jpeg-8c/jcparam.c	1970-01-01 00:00:00 +0000
+++ neo/renderer/jpeg-8c/jcparam.c	2012-11-17 01:20:41 +0000
@@ -0,0 +1,697 @@
+/*
+ * jcparam.c
+ *
+ * Copyright (C) 1991-1998, Thomas G. Lane.
+ * Modified 2003-2008 by Guido Vollbeding.
+ * This file is part of the Independent JPEG Group's software.
+ * For conditions of distribution and use, see the accompanying README file.
+ *
+ * This file contains optional default-setting code for the JPEG compressor.
+ * Applications do not have to use this file, but those that don't use it
+ * must know a lot more about the innards of the JPEG code.
+ */
+
+#define JPEG_INTERNALS
+#include "jinclude.h"
+#include "jpeglib.h"
+
+/*
+ * Quantization table setup routines
+ */
+
+GLOBAL(void)
+jpeg_add_quant_table (j_compress_ptr cinfo, int which_tbl,
+                      const unsigned int *basic_table,
+                      int scale_factor, boolean force_baseline)
+/* Define a quantization table equal to the basic_table times
+ * a scale factor (given as a percentage).
+ * If force_baseline is TRUE, the computed quantization table entries
+ * are limited to 1..255 for JPEG baseline compatibility.
+ */
+{
+    JQUANT_TBL ** qtblptr;
+    int i;
+    long temp;
+
+    /* Safety check to ensure start_compress not called yet. */
+    if (cinfo->global_state != CSTATE_START)
+    {
+        ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
+    }
+
+    if (which_tbl < 0 || which_tbl >= NUM_QUANT_TBLS)
+    {
+        ERREXIT1(cinfo, JERR_DQT_INDEX, which_tbl);
+    }
+
+    qtblptr = & cinfo->quant_tbl_ptrs[which_tbl];
+
+    if (*qtblptr == NULL)
+    {
+        *qtblptr = jpeg_alloc_quant_table((j_common_ptr) cinfo);
+    }
+
+    for (i = 0; i < DCTSIZE2; i++)
+    {
+        temp = ((long) basic_table[i] * scale_factor + 50L) / 100L;
+        /* limit the values to the valid range */
+        if (temp <= 0L)
+        {
+            temp = 1L;
+        }
+        if (temp > 32767L)
+        {
+            temp = 32767L;    /* max quantizer needed for 12 bits */
+        }
+        if (force_baseline && temp > 255L)
+        {
+            temp = 255L;    /* limit to baseline range if requested */
+        }
+        (*qtblptr)->quantval[i] = (UINT16) temp;
+    }
+
+    /* Initialize sent_table FALSE so table will be written to JPEG file. */
+    (*qtblptr)->sent_table = FALSE;
+}
+
+
+/* These are the sample quantization tables given in JPEG spec section K.1.
+ * The spec says that the values given produce "good" quality, and
+ * when divided by 2, "very good" quality.
+ */
+static const unsigned int std_luminance_quant_tbl[DCTSIZE2] =
+{
+    16,  11,  10,  16,  24,  40,  51,  61,
+    12,  12,  14,  19,  26,  58,  60,  55,
+    14,  13,  16,  24,  40,  57,  69,  56,
+    14,  17,  22,  29,  51,  87,  80,  62,
+    18,  22,  37,  56,  68, 109, 103,  77,
+    24,  35,  55,  64,  81, 104, 113,  92,
+    49,  64,  78,  87, 103, 121, 120, 101,
+    72,  92,  95,  98, 112, 100, 103,  99
+};
+static const unsigned int std_chrominance_quant_tbl[DCTSIZE2] =
+{
+    17,  18,  24,  47,  99,  99,  99,  99,
+    18,  21,  26,  66,  99,  99,  99,  99,
+    24,  26,  56,  99,  99,  99,  99,  99,
+    47,  66,  99,  99,  99,  99,  99,  99,
+    99,  99,  99,  99,  99,  99,  99,  99,
+    99,  99,  99,  99,  99,  99,  99,  99,
+    99,  99,  99,  99,  99,  99,  99,  99,
+    99,  99,  99,  99,  99,  99,  99,  99
+};
+
+
+GLOBAL(void)
+jpeg_default_qtables (j_compress_ptr cinfo, boolean force_baseline)
+/* Set or change the 'quality' (quantization) setting, using default tables
+ * and straight percentage-scaling quality scales.
+ * This entry point allows different scalings for luminance and chrominance.
+ */
+{
+    /* Set up two quantization tables using the specified scaling */
+    jpeg_add_quant_table(cinfo, 0, std_luminance_quant_tbl,
+                         cinfo->q_scale_factor[0], force_baseline);
+    jpeg_add_quant_table(cinfo, 1, std_chrominance_quant_tbl,
+                         cinfo->q_scale_factor[1], force_baseline);
+}
+
+
+GLOBAL(void)
+jpeg_set_linear_quality (j_compress_ptr cinfo, int scale_factor,
+                         boolean force_baseline)
+/* Set or change the 'quality' (quantization) setting, using default tables
+ * and a straight percentage-scaling quality scale.  In most cases it's better
+ * to use jpeg_set_quality (below); this entry point is provided for
+ * applications that insist on a linear percentage scaling.
+ */
+{
+    /* Set up two quantization tables using the specified scaling */
+    jpeg_add_quant_table(cinfo, 0, std_luminance_quant_tbl,
+                         scale_factor, force_baseline);
+    jpeg_add_quant_table(cinfo, 1, std_chrominance_quant_tbl,
+                         scale_factor, force_baseline);
+}
+
+
+GLOBAL(int)
+jpeg_quality_scaling (int quality)
+/* Convert a user-specified quality rating to a percentage scaling factor
+ * for an underlying quantization table, using our recommended scaling curve.
+ * The input 'quality' factor should be 0 (terrible) to 100 (very good).
+ */
+{
+    /* Safety limit on quality factor.  Convert 0 to 1 to avoid zero divide. */
+    if (quality <= 0)
+    {
+        quality = 1;
+    }
+    if (quality > 100)
+    {
+        quality = 100;
+    }
+
+    /* The basic table is used as-is (scaling 100) for a quality of 50.
+     * Qualities 50..100 are converted to scaling percentage 200 - 2*Q;
+     * note that at Q=100 the scaling is 0, which will cause jpeg_add_quant_table
+     * to make all the table entries 1 (hence, minimum quantization loss).
+     * Qualities 1..50 are converted to scaling percentage 5000/Q.
+     */
+    if (quality < 50)
+    {
+        quality = 5000 / quality;
+    }
+    else
+    {
+        quality = 200 - quality*2;
+    }
+
+    return quality;
+}
+
+
+GLOBAL(void)
+jpeg_set_quality (j_compress_ptr cinfo, int quality, boolean force_baseline)
+/* Set or change the 'quality' (quantization) setting, using default tables.
+ * This is the standard quality-adjusting entry point for typical user
+ * interfaces; only those who want detailed control over quantization tables
+ * would use the preceding three routines directly.
+ */
+{
+    /* Convert user 0-100 rating to percentage scaling */
+    quality = jpeg_quality_scaling(quality);
+
+    /* Set up standard quality tables */
+    jpeg_set_linear_quality(cinfo, quality, force_baseline);
+}
+
+
+/*
+ * Huffman table setup routines
+ */
+
+LOCAL(void)
+add_huff_table (j_compress_ptr cinfo,
+                JHUFF_TBL **htblptr, const UINT8 *bits, const UINT8 *val)
+/* Define a Huffman table */
+{
+    int nsymbols, len;
+
+    if (*htblptr == NULL)
+    {
+        *htblptr = jpeg_alloc_huff_table((j_common_ptr) cinfo);
+    }
+
+    /* Copy the number-of-symbols-of-each-code-length counts */
+    MEMCOPY((*htblptr)->bits, bits, SIZEOF((*htblptr)->bits));
+
+    /* Validate the counts.  We do this here mainly so we can copy the right
+     * number of symbols from the val[] array, without risking marching off
+     * the end of memory.  jchuff.c will do a more thorough test later.
+     */
+    nsymbols = 0;
+    for (len = 1; len <= 16; len++)
+    {
+        nsymbols += bits[len];
+    }
+    if (nsymbols < 1 || nsymbols > 256)
+    {
+        ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
+    }
+
+    MEMCOPY((*htblptr)->huffval, val, nsymbols * SIZEOF(UINT8));
+
+    /* Initialize sent_table FALSE so table will be written to JPEG file. */
+    (*htblptr)->sent_table = FALSE;
+}
+
+
+LOCAL(void)
+std_huff_tables (j_compress_ptr cinfo)
+/* Set up the standard Huffman tables (cf. JPEG standard section K.3) */
+/* IMPORTANT: these are only valid for 8-bit data precision! */
+{
+    static const UINT8 bits_dc_luminance[17] =
+    { /* 0-base */ 0, 0, 1, 5, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0 };
+    static const UINT8 val_dc_luminance[] =
+    { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11 };
+
+    static const UINT8 bits_dc_chrominance[17] =
+    { /* 0-base */ 0, 0, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0 };
+    static const UINT8 val_dc_chrominance[] =
+    { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11 };
+
+    static const UINT8 bits_ac_luminance[17] =
+    { /* 0-base */ 0, 0, 2, 1, 3, 3, 2, 4, 3, 5, 5, 4, 4, 0, 0, 1, 0x7d };
+    static const UINT8 val_ac_luminance[] =
+    {
+        0x01, 0x02, 0x03, 0x00, 0x04, 0x11, 0x05, 0x12,
+        0x21, 0x31, 0x41, 0x06, 0x13, 0x51, 0x61, 0x07,
+        0x22, 0x71, 0x14, 0x32, 0x81, 0x91, 0xa1, 0x08,
+        0x23, 0x42, 0xb1, 0xc1, 0x15, 0x52, 0xd1, 0xf0,
+        0x24, 0x33, 0x62, 0x72, 0x82, 0x09, 0x0a, 0x16,
+        0x17, 0x18, 0x19, 0x1a, 0x25, 0x26, 0x27, 0x28,
+        0x29, 0x2a, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39,
+        0x3a, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49,
+        0x4a, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59,
+        0x5a, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69,
+        0x6a, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79,
+        0x7a, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89,
+        0x8a, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98,
+        0x99, 0x9a, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7,
+        0xa8, 0xa9, 0xaa, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6,
+        0xb7, 0xb8, 0xb9, 0xba, 0xc2, 0xc3, 0xc4, 0xc5,
+        0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xd2, 0xd3, 0xd4,
+        0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xe1, 0xe2,
+        0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea,
+        0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8,
+        0xf9, 0xfa
+    };
+
+    static const UINT8 bits_ac_chrominance[17] =
+    { /* 0-base */ 0, 0, 2, 1, 2, 4, 4, 3, 4, 7, 5, 4, 4, 0, 1, 2, 0x77 };
+    static const UINT8 val_ac_chrominance[] =
+    {
+        0x00, 0x01, 0x02, 0x03, 0x11, 0x04, 0x05, 0x21,
+        0x31, 0x06, 0x12, 0x41, 0x51, 0x07, 0x61, 0x71,
+        0x13, 0x22, 0x32, 0x81, 0x08, 0x14, 0x42, 0x91,
+        0xa1, 0xb1, 0xc1, 0x09, 0x23, 0x33, 0x52, 0xf0,
+        0x15, 0x62, 0x72, 0xd1, 0x0a, 0x16, 0x24, 0x34,
+        0xe1, 0x25, 0xf1, 0x17, 0x18, 0x19, 0x1a, 0x26,
+        0x27, 0x28, 0x29, 0x2a, 0x35, 0x36, 0x37, 0x38,
+        0x39, 0x3a, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48,
+        0x49, 0x4a, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58,
+        0x59, 0x5a, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68,
+        0x69, 0x6a, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78,
+        0x79, 0x7a, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87,
+        0x88, 0x89, 0x8a, 0x92, 0x93, 0x94, 0x95, 0x96,
+        0x97, 0x98, 0x99, 0x9a, 0xa2, 0xa3, 0xa4, 0xa5,
+        0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xb2, 0xb3, 0xb4,
+        0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xc2, 0xc3,
+        0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xd2,
+        0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda,
+        0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9,
+        0xea, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8,
+        0xf9, 0xfa
+    };
+
+    add_huff_table(cinfo, &cinfo->dc_huff_tbl_ptrs[0],
+                   bits_dc_luminance, val_dc_luminance);
+    add_huff_table(cinfo, &cinfo->ac_huff_tbl_ptrs[0],
+                   bits_ac_luminance, val_ac_luminance);
+    add_huff_table(cinfo, &cinfo->dc_huff_tbl_ptrs[1],
+                   bits_dc_chrominance, val_dc_chrominance);
+    add_huff_table(cinfo, &cinfo->ac_huff_tbl_ptrs[1],
+                   bits_ac_chrominance, val_ac_chrominance);
+}
+
+
+/*
+ * Default parameter setup for compression.
+ *
+ * Applications that don't choose to use this routine must do their
+ * own setup of all these parameters.  Alternately, you can call this
+ * to establish defaults and then alter parameters selectively.  This
+ * is the recommended approach since, if we add any new parameters,
+ * your code will still work (they'll be set to reasonable defaults).
+ */
+
+GLOBAL(void)
+jpeg_set_defaults (j_compress_ptr cinfo)
+{
+    int i;
+
+    /* Safety check to ensure start_compress not called yet. */
+    if (cinfo->global_state != CSTATE_START)
+    {
+        ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
+    }
+
+    /* Allocate comp_info array large enough for maximum component count.
+     * Array is made permanent in case application wants to compress
+     * multiple images at same param settings.
+     */
+    if (cinfo->comp_info == NULL)
+        cinfo->comp_info = (jpeg_component_info *)
+                           (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
+                                   MAX_COMPONENTS * SIZEOF(jpeg_component_info));
+
+    /* Initialize everything not dependent on the color space */
+
+    cinfo->scale_num = 1;		/* 1:1 scaling */
+    cinfo->scale_denom = 1;
+    cinfo->data_precision = BITS_IN_JSAMPLE;
+    /* Set up two quantization tables using default quality of 75 */
+    jpeg_set_quality(cinfo, 75, TRUE);
+    /* Set up two Huffman tables */
+    std_huff_tables(cinfo);
+
+    /* Initialize default arithmetic coding conditioning */
+    for (i = 0; i < NUM_ARITH_TBLS; i++)
+    {
+        cinfo->arith_dc_L[i] = 0;
+        cinfo->arith_dc_U[i] = 1;
+        cinfo->arith_ac_K[i] = 5;
+    }
+
+    /* Default is no multiple-scan output */
+    cinfo->scan_info = NULL;
+    cinfo->num_scans = 0;
+
+    /* Expect normal source image, not raw downsampled data */
+    cinfo->raw_data_in = FALSE;
+
+    /* Use Huffman coding, not arithmetic coding, by default */
+    cinfo->arith_code = FALSE;
+
+    /* By default, don't do extra passes to optimize entropy coding */
+    cinfo->optimize_coding = FALSE;
+    /* The standard Huffman tables are only valid for 8-bit data precision.
+     * If the precision is higher, force optimization on so that usable
+     * tables will be computed.  This test can be removed if default tables
+     * are supplied that are valid for the desired precision.
+     */
+    if (cinfo->data_precision > 8)
+    {
+        cinfo->optimize_coding = TRUE;
+    }
+
+    /* By default, use the simpler non-cosited sampling alignment */
+    cinfo->CCIR601_sampling = FALSE;
+
+    /* By default, apply fancy downsampling */
+    cinfo->do_fancy_downsampling = TRUE;
+
+    /* No input smoothing */
+    cinfo->smoothing_factor = 0;
+
+    /* DCT algorithm preference */
+    cinfo->dct_method = JDCT_DEFAULT;
+
+    /* No restart markers */
+    cinfo->restart_interval = 0;
+    cinfo->restart_in_rows = 0;
+
+    /* Fill in default JFIF marker parameters.  Note that whether the marker
+     * will actually be written is determined by jpeg_set_colorspace.
+     *
+     * By default, the library emits JFIF version code 1.01.
+     * An application that wants to emit JFIF 1.02 extension markers should set
+     * JFIF_minor_version to 2.  We could probably get away with just defaulting
+     * to 1.02, but there may still be some decoders in use that will complain
+     * about that; saying 1.01 should minimize compatibility problems.
+     */
+    cinfo->JFIF_major_version = 1; /* Default JFIF version = 1.01 */
+    cinfo->JFIF_minor_version = 1;
+    cinfo->density_unit = 0;	/* Pixel size is unknown by default */
+    cinfo->X_density = 1;		/* Pixel aspect ratio is square by default */
+    cinfo->Y_density = 1;
+
+    /* Choose JPEG colorspace based on input space, set defaults accordingly */
+
+    jpeg_default_colorspace(cinfo);
+}
+
+
+/*
+ * Select an appropriate JPEG colorspace for in_color_space.
+ */
+
+GLOBAL(void)
+jpeg_default_colorspace (j_compress_ptr cinfo)
+{
+    switch (cinfo->in_color_space)
+    {
+    case JCS_GRAYSCALE:
+        jpeg_set_colorspace(cinfo, JCS_GRAYSCALE);
+        break;
+    case JCS_RGB:
+        jpeg_set_colorspace(cinfo, JCS_YCbCr);
+        break;
+    case JCS_YCbCr:
+        jpeg_set_colorspace(cinfo, JCS_YCbCr);
+        break;
+    case JCS_CMYK:
+        jpeg_set_colorspace(cinfo, JCS_CMYK); /* By default, no translation */
+        break;
+    case JCS_YCCK:
+        jpeg_set_colorspace(cinfo, JCS_YCCK);
+        break;
+    case JCS_UNKNOWN:
+        jpeg_set_colorspace(cinfo, JCS_UNKNOWN);
+        break;
+    default:
+        ERREXIT(cinfo, JERR_BAD_IN_COLORSPACE);
+    }
+}
+
+
+/*
+ * Set the JPEG colorspace, and choose colorspace-dependent default values.
+ */
+
+GLOBAL(void)
+jpeg_set_colorspace (j_compress_ptr cinfo, J_COLOR_SPACE colorspace)
+{
+    jpeg_component_info * compptr;
+    int ci;
+
+#define SET_COMP(index,id,hsamp,vsamp,quant,dctbl,actbl)  \
+  (compptr = &cinfo->comp_info[index], \
+   compptr->component_id = (id), \
+   compptr->h_samp_factor = (hsamp), \
+   compptr->v_samp_factor = (vsamp), \
+   compptr->quant_tbl_no = (quant), \
+   compptr->dc_tbl_no = (dctbl), \
+   compptr->ac_tbl_no = (actbl) )
+
+    /* Safety check to ensure start_compress not called yet. */
+    if (cinfo->global_state != CSTATE_START)
+    {
+        ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
+    }
+
+    /* For all colorspaces, we use Q and Huff tables 0 for luminance components,
+     * tables 1 for chrominance components.
+     */
+
+    cinfo->jpeg_color_space = colorspace;
+
+    cinfo->write_JFIF_header = FALSE; /* No marker for non-JFIF colorspaces */
+    cinfo->write_Adobe_marker = FALSE; /* write no Adobe marker by default */
+
+    switch (colorspace)
+    {
+    case JCS_GRAYSCALE:
+        cinfo->write_JFIF_header = TRUE; /* Write a JFIF marker */
+        cinfo->num_components = 1;
+        /* JFIF specifies component ID 1 */
+        SET_COMP(0, 1, 1,1, 0, 0,0);
+        break;
+    case JCS_RGB:
+        cinfo->write_Adobe_marker = TRUE; /* write Adobe marker to flag RGB */
+        cinfo->num_components = 3;
+        SET_COMP(0, 0x52 /* 'R' */, 1,1, 0, 0,0);
+        SET_COMP(1, 0x47 /* 'G' */, 1,1, 0, 0,0);
+        SET_COMP(2, 0x42 /* 'B' */, 1,1, 0, 0,0);
+        break;
+    case JCS_YCbCr:
+        cinfo->write_JFIF_header = TRUE; /* Write a JFIF marker */
+        cinfo->num_components = 3;
+        /* JFIF specifies component IDs 1,2,3 */
+        /* We default to 2x2 subsamples of chrominance */
+        SET_COMP(0, 1, 2,2, 0, 0,0);
+        SET_COMP(1, 2, 1,1, 1, 1,1);
+        SET_COMP(2, 3, 1,1, 1, 1,1);
+        break;
+    case JCS_CMYK:
+        cinfo->write_Adobe_marker = TRUE; /* write Adobe marker to flag CMYK */
+        cinfo->num_components = 4;
+        SET_COMP(0, 0x43 /* 'C' */, 1,1, 0, 0,0);
+        SET_COMP(1, 0x4D /* 'M' */, 1,1, 0, 0,0);
+        SET_COMP(2, 0x59 /* 'Y' */, 1,1, 0, 0,0);
+        SET_COMP(3, 0x4B /* 'K' */, 1,1, 0, 0,0);
+        break;
+    case JCS_YCCK:
+        cinfo->write_Adobe_marker = TRUE; /* write Adobe marker to flag YCCK */
+        cinfo->num_components = 4;
+        SET_COMP(0, 1, 2,2, 0, 0,0);
+        SET_COMP(1, 2, 1,1, 1, 1,1);
+        SET_COMP(2, 3, 1,1, 1, 1,1);
+        SET_COMP(3, 4, 2,2, 0, 0,0);
+        break;
+    case JCS_UNKNOWN:
+        cinfo->num_components = cinfo->input_components;
+        if (cinfo->num_components < 1 || cinfo->num_components > MAX_COMPONENTS)
+            ERREXIT2(cinfo, JERR_COMPONENT_COUNT, cinfo->num_components,
+                     MAX_COMPONENTS);
+        for (ci = 0; ci < cinfo->num_components; ci++)
+        {
+            SET_COMP(ci, ci, 1,1, 0, 0,0);
+        }
+        break;
+    default:
+        ERREXIT(cinfo, JERR_BAD_J_COLORSPACE);
+    }
+}
+
+
+#ifdef C_PROGRESSIVE_SUPPORTED
+
+LOCAL(jpeg_scan_info *)
+fill_a_scan (jpeg_scan_info * scanptr, int ci,
+             int Ss, int Se, int Ah, int Al)
+/* Support routine: generate one scan for specified component */
+{
+    scanptr->comps_in_scan = 1;
+    scanptr->component_index[0] = ci;
+    scanptr->Ss = Ss;
+    scanptr->Se = Se;
+    scanptr->Ah = Ah;
+    scanptr->Al = Al;
+    scanptr++;
+    return scanptr;
+}
+
+LOCAL(jpeg_scan_info *)
+fill_scans (jpeg_scan_info * scanptr, int ncomps,
+            int Ss, int Se, int Ah, int Al)
+/* Support routine: generate one scan for each component */
+{
+    int ci;
+
+    for (ci = 0; ci < ncomps; ci++)
+    {
+        scanptr->comps_in_scan = 1;
+        scanptr->component_index[0] = ci;
+        scanptr->Ss = Ss;
+        scanptr->Se = Se;
+        scanptr->Ah = Ah;
+        scanptr->Al = Al;
+        scanptr++;
+    }
+    return scanptr;
+}
+
+LOCAL(jpeg_scan_info *)
+fill_dc_scans (jpeg_scan_info * scanptr, int ncomps, int Ah, int Al)
+/* Support routine: generate interleaved DC scan if possible, else N scans */
+{
+    int ci;
+
+    if (ncomps <= MAX_COMPS_IN_SCAN)
+    {
+        /* Single interleaved DC scan */
+        scanptr->comps_in_scan = ncomps;
+        for (ci = 0; ci < ncomps; ci++)
+        {
+            scanptr->component_index[ci] = ci;
+        }
+        scanptr->Ss = scanptr->Se = 0;
+        scanptr->Ah = Ah;
+        scanptr->Al = Al;
+        scanptr++;
+    }
+    else
+    {
+        /* Noninterleaved DC scan for each component */
+        scanptr = fill_scans(scanptr, ncomps, 0, 0, Ah, Al);
+    }
+    return scanptr;
+}
+
+
+/*
+ * Create a recommended progressive-JPEG script.
+ * cinfo->num_components and cinfo->jpeg_color_space must be correct.
+ */
+
+GLOBAL(void)
+jpeg_simple_progression (j_compress_ptr cinfo)
+{
+    int ncomps = cinfo->num_components;
+    int nscans;
+    jpeg_scan_info * scanptr;
+
+    /* Safety check to ensure start_compress not called yet. */
+    if (cinfo->global_state != CSTATE_START)
+    {
+        ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
+    }
+
+    /* Figure space needed for script.  Calculation must match code below! */
+    if (ncomps == 3 && cinfo->jpeg_color_space == JCS_YCbCr)
+    {
+        /* Custom script for YCbCr color images. */
+        nscans = 10;
+    }
+    else
+    {
+        /* All-purpose script for other color spaces. */
+        if (ncomps > MAX_COMPS_IN_SCAN)
+        {
+            nscans = 6 * ncomps;    /* 2 DC + 4 AC scans per component */
+        }
+        else
+        {
+            nscans = 2 + 4 * ncomps;    /* 2 DC scans; 4 AC scans per component */
+        }
+    }
+
+    /* Allocate space for script.
+     * We need to put it in the permanent pool in case the application performs
+     * multiple compressions without changing the settings.  To avoid a memory
+     * leak if jpeg_simple_progression is called repeatedly for the same JPEG
+     * object, we try to re-use previously allocated space, and we allocate
+     * enough space to handle YCbCr even if initially asked for grayscale.
+     */
+    if (cinfo->script_space == NULL || cinfo->script_space_size < nscans)
+    {
+        cinfo->script_space_size = MAX(nscans, 10);
+        cinfo->script_space = (jpeg_scan_info *)
+                              (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
+                                      cinfo->script_space_size * SIZEOF(jpeg_scan_info));
+    }
+    scanptr = cinfo->script_space;
+    cinfo->scan_info = scanptr;
+    cinfo->num_scans = nscans;
+
+    if (ncomps == 3 && cinfo->jpeg_color_space == JCS_YCbCr)
+    {
+        /* Custom script for YCbCr color images. */
+        /* Initial DC scan */
+        scanptr = fill_dc_scans(scanptr, ncomps, 0, 1);
+        /* Initial AC scan: get some luma data out in a hurry */
+        scanptr = fill_a_scan(scanptr, 0, 1, 5, 0, 2);
+        /* Chroma data is too small to be worth expending many scans on */
+        scanptr = fill_a_scan(scanptr, 2, 1, 63, 0, 1);
+        scanptr = fill_a_scan(scanptr, 1, 1, 63, 0, 1);
+        /* Complete spectral selection for luma AC */
+        scanptr = fill_a_scan(scanptr, 0, 6, 63, 0, 2);
+        /* Refine next bit of luma AC */
+        scanptr = fill_a_scan(scanptr, 0, 1, 63, 2, 1);
+        /* Finish DC successive approximation */
+        scanptr = fill_dc_scans(scanptr, ncomps, 1, 0);
+        /* Finish AC successive approximation */
+        scanptr = fill_a_scan(scanptr, 2, 1, 63, 1, 0);
+        scanptr = fill_a_scan(scanptr, 1, 1, 63, 1, 0);
+        /* Luma bottom bit comes last since it's usually largest scan */
+        scanptr = fill_a_scan(scanptr, 0, 1, 63, 1, 0);
+    }
+    else
+    {
+        /* All-purpose script for other color spaces. */
+        /* Successive approximation first pass */
+        scanptr = fill_dc_scans(scanptr, ncomps, 0, 1);
+        scanptr = fill_scans(scanptr, ncomps, 1, 5, 0, 2);
+        scanptr = fill_scans(scanptr, ncomps, 6, 63, 0, 2);
+        /* Successive approximation second pass */
+        scanptr = fill_scans(scanptr, ncomps, 1, 63, 2, 1);
+        /* Successive approximation final pass */
+        scanptr = fill_dc_scans(scanptr, ncomps, 1, 0);
+        scanptr = fill_scans(scanptr, ncomps, 1, 63, 1, 0);
+    }
+}
+
+#endif /* C_PROGRESSIVE_SUPPORTED */
diff -NEaurb neo/renderer/jpeg-8c/jcprepct.c neo/renderer/jpeg-8c/jcprepct.c
--- neo/renderer/jpeg-8c/jcprepct.c	1970-01-01 00:00:00 +0000
+++ neo/renderer/jpeg-8c/jcprepct.c	2012-11-17 01:20:39 +0000
@@ -0,0 +1,390 @@
+/*
+ * jcprepct.c
+ *
+ * Copyright (C) 1994-1996, Thomas G. Lane.
+ * This file is part of the Independent JPEG Group's software.
+ * For conditions of distribution and use, see the accompanying README file.
+ *
+ * This file contains the compression preprocessing controller.
+ * This controller manages the color conversion, downsampling,
+ * and edge expansion steps.
+ *
+ * Most of the complexity here is associated with buffering input rows
+ * as required by the downsampler.  See the comments at the head of
+ * jcsample.c for the downsampler's needs.
+ */
+
+#define JPEG_INTERNALS
+#include "jinclude.h"
+#include "jpeglib.h"
+
+/* At present, jcsample.c can request context rows only for smoothing.
+ * In the future, we might also need context rows for CCIR601 sampling
+ * or other more-complex downsampling procedures.  The code to support
+ * context rows should be compiled only if needed.
+ */
+#ifdef INPUT_SMOOTHING_SUPPORTED
+#define CONTEXT_ROWS_SUPPORTED
+#endif
+
+/*
+ * For the simple (no-context-row) case, we just need to buffer one
+ * row group's worth of pixels for the downsampling step.  At the bottom of
+ * the image, we pad to a full row group by replicating the last pixel row.
+ * The downsampler's last output row is then replicated if needed to pad
+ * out to a full iMCU row.
+ *
+ * When providing context rows, we must buffer three row groups' worth of
+ * pixels.  Three row groups are physically allocated, but the row pointer
+ * arrays are made five row groups high, with the extra pointers above and
+ * below "wrapping around" to point to the last and first real row groups.
+ * This allows the downsampler to access the proper context rows.
+ * At the top and bottom of the image, we create dummy context rows by
+ * copying the first or last real pixel row.  This copying could be avoided
+ * by pointer hacking as is done in jdmainct.c, but it doesn't seem worth the
+ * trouble on the compression side.
+ */
+
+
+/* Private buffer controller object */
+
+typedef struct
+{
+    struct jpeg_c_prep_controller pub; /* public fields */
+
+    /* Downsampling input buffer.  This buffer holds color-converted data
+     * until we have enough to do a downsample step.
+     */
+    JSAMPARRAY color_buf[MAX_COMPONENTS];
+
+    JDIMENSION rows_to_go;	/* counts rows remaining in source image */
+    int next_buf_row;		/* index of next row to store in color_buf */
+
+#ifdef CONTEXT_ROWS_SUPPORTED	/* only needed for context case */
+    int this_row_group;		/* starting row index of group to process */
+    int next_buf_stop;		/* downsample when we reach this index */
+#endif
+} my_prep_controller;
+
+typedef my_prep_controller * my_prep_ptr;
+
+
+/*
+ * Initialize for a processing pass.
+ */
+
+METHODDEF(void)
+start_pass_prep (j_compress_ptr cinfo, J_BUF_MODE pass_mode)
+{
+    my_prep_ptr prep = (my_prep_ptr) cinfo->prep;
+
+    if (pass_mode != JBUF_PASS_THRU)
+    {
+        ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
+    }
+
+    /* Initialize total-height counter for detecting bottom of image */
+    prep->rows_to_go = cinfo->image_height;
+    /* Mark the conversion buffer empty */
+    prep->next_buf_row = 0;
+#ifdef CONTEXT_ROWS_SUPPORTED
+    /* Preset additional state variables for context mode.
+     * These aren't used in non-context mode, so we needn't test which mode.
+     */
+    prep->this_row_group = 0;
+    /* Set next_buf_stop to stop after two row groups have been read in. */
+    prep->next_buf_stop = 2 * cinfo->max_v_samp_factor;
+#endif
+}
+
+
+/*
+ * Expand an image vertically from height input_rows to height output_rows,
+ * by duplicating the bottom row.
+ */
+
+LOCAL(void)
+expand_bottom_edge (JSAMPARRAY image_data, JDIMENSION num_cols,
+                    int input_rows, int output_rows)
+{
+    register int row;
+
+    for (row = input_rows; row < output_rows; row++)
+    {
+        jcopy_sample_rows(image_data, input_rows-1, image_data, row,
+                          1, num_cols);
+    }
+}
+
+
+/*
+ * Process some data in the simple no-context case.
+ *
+ * Preprocessor output data is counted in "row groups".  A row group
+ * is defined to be v_samp_factor sample rows of each component.
+ * Downsampling will produce this much data from each max_v_samp_factor
+ * input rows.
+ */
+
+METHODDEF(void)
+pre_process_data (j_compress_ptr cinfo,
+                  JSAMPARRAY input_buf, JDIMENSION *in_row_ctr,
+                  JDIMENSION in_rows_avail,
+                  JSAMPIMAGE output_buf, JDIMENSION *out_row_group_ctr,
+                  JDIMENSION out_row_groups_avail)
+{
+    my_prep_ptr prep = (my_prep_ptr) cinfo->prep;
+    int numrows, ci;
+    JDIMENSION inrows;
+    jpeg_component_info * compptr;
+
+    while (*in_row_ctr < in_rows_avail &&
+            *out_row_group_ctr < out_row_groups_avail)
+    {
+        /* Do color conversion to fill the conversion buffer. */
+        inrows = in_rows_avail - *in_row_ctr;
+        numrows = cinfo->max_v_samp_factor - prep->next_buf_row;
+        numrows = (int) MIN((JDIMENSION) numrows, inrows);
+        (*cinfo->cconvert->color_convert) (cinfo, input_buf + *in_row_ctr,
+                                           prep->color_buf,
+                                           (JDIMENSION) prep->next_buf_row,
+                                           numrows);
+        *in_row_ctr += numrows;
+        prep->next_buf_row += numrows;
+        prep->rows_to_go -= numrows;
+        /* If at bottom of image, pad to fill the conversion buffer. */
+        if (prep->rows_to_go == 0 &&
+                prep->next_buf_row < cinfo->max_v_samp_factor)
+        {
+            for (ci = 0; ci < cinfo->num_components; ci++)
+            {
+                expand_bottom_edge(prep->color_buf[ci], cinfo->image_width,
+                                   prep->next_buf_row, cinfo->max_v_samp_factor);
+            }
+            prep->next_buf_row = cinfo->max_v_samp_factor;
+        }
+        /* If we've filled the conversion buffer, empty it. */
+        if (prep->next_buf_row == cinfo->max_v_samp_factor)
+        {
+            (*cinfo->downsample->downsample) (cinfo,
+                                              prep->color_buf, (JDIMENSION) 0,
+                                              output_buf, *out_row_group_ctr);
+            prep->next_buf_row = 0;
+            (*out_row_group_ctr)++;
+        }
+        /* If at bottom of image, pad the output to a full iMCU height.
+         * Note we assume the caller is providing a one-iMCU-height output buffer!
+         */
+        if (prep->rows_to_go == 0 &&
+                *out_row_group_ctr < out_row_groups_avail)
+        {
+            for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
+                    ci++, compptr++)
+            {
+                numrows = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
+                          cinfo->min_DCT_v_scaled_size;
+                expand_bottom_edge(output_buf[ci],
+                                   compptr->width_in_blocks * compptr->DCT_h_scaled_size,
+                                   (int) (*out_row_group_ctr * numrows),
+                                   (int) (out_row_groups_avail * numrows));
+            }
+            *out_row_group_ctr = out_row_groups_avail;
+            break;			/* can exit outer loop without test */
+        }
+    }
+}
+
+
+#ifdef CONTEXT_ROWS_SUPPORTED
+
+/*
+ * Process some data in the context case.
+ */
+
+METHODDEF(void)
+pre_process_context (j_compress_ptr cinfo,
+                     JSAMPARRAY input_buf, JDIMENSION *in_row_ctr,
+                     JDIMENSION in_rows_avail,
+                     JSAMPIMAGE output_buf, JDIMENSION *out_row_group_ctr,
+                     JDIMENSION out_row_groups_avail)
+{
+    my_prep_ptr prep = (my_prep_ptr) cinfo->prep;
+    int numrows, ci;
+    int buf_height = cinfo->max_v_samp_factor * 3;
+    JDIMENSION inrows;
+
+    while (*out_row_group_ctr < out_row_groups_avail)
+    {
+        if (*in_row_ctr < in_rows_avail)
+        {
+            /* Do color conversion to fill the conversion buffer. */
+            inrows = in_rows_avail - *in_row_ctr;
+            numrows = prep->next_buf_stop - prep->next_buf_row;
+            numrows = (int) MIN((JDIMENSION) numrows, inrows);
+            (*cinfo->cconvert->color_convert) (cinfo, input_buf + *in_row_ctr,
+                                               prep->color_buf,
+                                               (JDIMENSION) prep->next_buf_row,
+                                               numrows);
+            /* Pad at top of image, if first time through */
+            if (prep->rows_to_go == cinfo->image_height)
+            {
+                for (ci = 0; ci < cinfo->num_components; ci++)
+                {
+                    int row;
+                    for (row = 1; row <= cinfo->max_v_samp_factor; row++)
+                    {
+                        jcopy_sample_rows(prep->color_buf[ci], 0,
+                                          prep->color_buf[ci], -row,
+                                          1, cinfo->image_width);
+                    }
+                }
+            }
+            *in_row_ctr += numrows;
+            prep->next_buf_row += numrows;
+            prep->rows_to_go -= numrows;
+        }
+        else
+        {
+            /* Return for more data, unless we are at the bottom of the image. */
+            if (prep->rows_to_go != 0)
+            {
+                break;
+            }
+            /* When at bottom of image, pad to fill the conversion buffer. */
+            if (prep->next_buf_row < prep->next_buf_stop)
+            {
+                for (ci = 0; ci < cinfo->num_components; ci++)
+                {
+                    expand_bottom_edge(prep->color_buf[ci], cinfo->image_width,
+                                       prep->next_buf_row, prep->next_buf_stop);
+                }
+                prep->next_buf_row = prep->next_buf_stop;
+            }
+        }
+        /* If we've gotten enough data, downsample a row group. */
+        if (prep->next_buf_row == prep->next_buf_stop)
+        {
+            (*cinfo->downsample->downsample) (cinfo,
+                                              prep->color_buf,
+                                              (JDIMENSION) prep->this_row_group,
+                                              output_buf, *out_row_group_ctr);
+            (*out_row_group_ctr)++;
+            /* Advance pointers with wraparound as necessary. */
+            prep->this_row_group += cinfo->max_v_samp_factor;
+            if (prep->this_row_group >= buf_height)
+            {
+                prep->this_row_group = 0;
+            }
+            if (prep->next_buf_row >= buf_height)
+            {
+                prep->next_buf_row = 0;
+            }
+            prep->next_buf_stop = prep->next_buf_row + cinfo->max_v_samp_factor;
+        }
+    }
+}
+
+
+/*
+ * Create the wrapped-around downsampling input buffer needed for context mode.
+ */
+
+LOCAL(void)
+create_context_buffer (j_compress_ptr cinfo)
+{
+    my_prep_ptr prep = (my_prep_ptr) cinfo->prep;
+    int rgroup_height = cinfo->max_v_samp_factor;
+    int ci, i;
+    jpeg_component_info * compptr;
+    JSAMPARRAY true_buffer, fake_buffer;
+
+    /* Grab enough space for fake row pointers for all the components;
+     * we need five row groups' worth of pointers for each component.
+     */
+    fake_buffer = (JSAMPARRAY)
+                  (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
+                          (cinfo->num_components * 5 * rgroup_height) *
+                          SIZEOF(JSAMPROW));
+
+    for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
+            ci++, compptr++)
+    {
+        /* Allocate the actual buffer space (3 row groups) for this component.
+         * We make the buffer wide enough to allow the downsampler to edge-expand
+         * horizontally within the buffer, if it so chooses.
+         */
+        true_buffer = (*cinfo->mem->alloc_sarray)
+                      ((j_common_ptr) cinfo, JPOOL_IMAGE,
+                       (JDIMENSION) (((long) compptr->width_in_blocks *
+                                      cinfo->min_DCT_h_scaled_size *
+                                      cinfo->max_h_samp_factor) / compptr->h_samp_factor),
+                       (JDIMENSION) (3 * rgroup_height));
+        /* Copy true buffer row pointers into the middle of the fake row array */
+        MEMCOPY(fake_buffer + rgroup_height, true_buffer,
+                3 * rgroup_height * SIZEOF(JSAMPROW));
+        /* Fill in the above and below wraparound pointers */
+        for (i = 0; i < rgroup_height; i++)
+        {
+            fake_buffer[i] = true_buffer[2 * rgroup_height + i];
+            fake_buffer[4 * rgroup_height + i] = true_buffer[i];
+        }
+        prep->color_buf[ci] = fake_buffer + rgroup_height;
+        fake_buffer += 5 * rgroup_height; /* point to space for next component */
+    }
+}
+
+#endif /* CONTEXT_ROWS_SUPPORTED */
+
+
+/*
+ * Initialize preprocessing controller.
+ */
+
+GLOBAL(void)
+jinit_c_prep_controller (j_compress_ptr cinfo, boolean need_full_buffer)
+{
+    my_prep_ptr prep;
+    int ci;
+    jpeg_component_info * compptr;
+
+    if (need_full_buffer)		/* safety check */
+    {
+        ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
+    }
+
+    prep = (my_prep_ptr)
+           (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
+                                       SIZEOF(my_prep_controller));
+    cinfo->prep = (struct jpeg_c_prep_controller *) prep;
+    prep->pub.start_pass = start_pass_prep;
+
+    /* Allocate the color conversion buffer.
+     * We make the buffer wide enough to allow the downsampler to edge-expand
+     * horizontally within the buffer, if it so chooses.
+     */
+    if (cinfo->downsample->need_context_rows)
+    {
+        /* Set up to provide context rows */
+#ifdef CONTEXT_ROWS_SUPPORTED
+        prep->pub.pre_process_data = pre_process_context;
+        create_context_buffer(cinfo);
+#else
+        ERREXIT(cinfo, JERR_NOT_COMPILED);
+#endif
+    }
+    else
+    {
+        /* No context, just make it tall enough for one row group */
+        prep->pub.pre_process_data = pre_process_data;
+        for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
+                ci++, compptr++)
+        {
+            prep->color_buf[ci] = (*cinfo->mem->alloc_sarray)
+                                  ((j_common_ptr) cinfo, JPOOL_IMAGE,
+                                   (JDIMENSION) (((long) compptr->width_in_blocks *
+                                                  cinfo->min_DCT_h_scaled_size *
+                                                  cinfo->max_h_samp_factor) / compptr->h_samp_factor),
+                                   (JDIMENSION) cinfo->max_v_samp_factor);
+        }
+    }
+}
diff -NEaurb neo/renderer/jpeg-8c/jcsample.c neo/renderer/jpeg-8c/jcsample.c
--- neo/renderer/jpeg-8c/jcsample.c	1970-01-01 00:00:00 +0000
+++ neo/renderer/jpeg-8c/jcsample.c	2012-11-17 01:20:40 +0000
@@ -0,0 +1,592 @@
+/*
+ * jcsample.c
+ *
+ * Copyright (C) 1991-1996, Thomas G. Lane.
+ * This file is part of the Independent JPEG Group's software.
+ * For conditions of distribution and use, see the accompanying README file.
+ *
+ * This file contains downsampling routines.
+ *
+ * Downsampling input data is counted in "row groups".  A row group
+ * is defined to be max_v_samp_factor pixel rows of each component,
+ * from which the downsampler produces v_samp_factor sample rows.
+ * A single row group is processed in each call to the downsampler module.
+ *
+ * The downsampler is responsible for edge-expansion of its output data
+ * to fill an integral number of DCT blocks horizontally.  The source buffer
+ * may be modified if it is helpful for this purpose (the source buffer is
+ * allocated wide enough to correspond to the desired output width).
+ * The caller (the prep controller) is responsible for vertical padding.
+ *
+ * The downsampler may request "context rows" by setting need_context_rows
+ * during startup.  In this case, the input arrays will contain at least
+ * one row group's worth of pixels above and below the passed-in data;
+ * the caller will create dummy rows at image top and bottom by replicating
+ * the first or last real pixel row.
+ *
+ * An excellent reference for image resampling is
+ *   Digital Image Warping, George Wolberg, 1990.
+ *   Pub. by IEEE Computer Society Press, Los Alamitos, CA. ISBN 0-8186-8944-7.
+ *
+ * The downsampling algorithm used here is a simple average of the source
+ * pixels covered by the output pixel.  The hi-falutin sampling literature
+ * refers to this as a "box filter".  In general the characteristics of a box
+ * filter are not very good, but for the specific cases we normally use (1:1
+ * and 2:1 ratios) the box is equivalent to a "triangle filter" which is not
+ * nearly so bad.  If you intend to use other sampling ratios, you'd be well
+ * advised to improve this code.
+ *
+ * A simple input-smoothing capability is provided.  This is mainly intended
+ * for cleaning up color-dithered GIF input files (if you find it inadequate,
+ * we suggest using an external filtering program such as pnmconvol).  When
+ * enabled, each input pixel P is replaced by a weighted sum of itself and its
+ * eight neighbors.  P's weight is 1-8*SF and each neighbor's weight is SF,
+ * where SF = (smoothing_factor / 1024).
+ * Currently, smoothing is only supported for 2h2v sampling factors.
+ */
+
+#define JPEG_INTERNALS
+#include "jinclude.h"
+#include "jpeglib.h"
+
+
+/* Pointer to routine to downsample a single component */
+typedef JMETHOD(void, downsample1_ptr,
+                (j_compress_ptr cinfo, jpeg_component_info * compptr,
+                 JSAMPARRAY input_data, JSAMPARRAY output_data));
+
+/* Private subobject */
+
+typedef struct
+{
+    struct jpeg_downsampler pub;	/* public fields */
+
+    /* Downsampling method pointers, one per component */
+    downsample1_ptr methods[MAX_COMPONENTS];
+
+    /* Height of an output row group for each component. */
+    int rowgroup_height[MAX_COMPONENTS];
+
+    /* These arrays save pixel expansion factors so that int_downsample need not
+     * recompute them each time.  They are unused for other downsampling methods.
+     */
+    UINT8 h_expand[MAX_COMPONENTS];
+    UINT8 v_expand[MAX_COMPONENTS];
+} my_downsampler;
+
+typedef my_downsampler * my_downsample_ptr;
+
+
+/*
+ * Initialize for a downsampling pass.
+ */
+
+METHODDEF(void)
+start_pass_downsample (j_compress_ptr cinfo)
+{
+    /* no work for now */
+}
+
+
+/*
+ * Expand a component horizontally from width input_cols to width output_cols,
+ * by duplicating the rightmost samples.
+ */
+
+LOCAL(void)
+expand_right_edge (JSAMPARRAY image_data, int num_rows,
+                   JDIMENSION input_cols, JDIMENSION output_cols)
+{
+    register JSAMPROW ptr;
+    register JSAMPLE pixval;
+    register int count;
+    int row;
+    int numcols = (int) (output_cols - input_cols);
+
+    if (numcols > 0)
+    {
+        for (row = 0; row < num_rows; row++)
+        {
+            ptr = image_data[row] + input_cols;
+            pixval = ptr[-1];		/* don't need GETJSAMPLE() here */
+            for (count = numcols; count > 0; count--)
+            {
+                *ptr++ = pixval;
+            }
+        }
+    }
+}
+
+
+/*
+ * Do downsampling for a whole row group (all components).
+ *
+ * In this version we simply downsample each component independently.
+ */
+
+METHODDEF(void)
+sep_downsample (j_compress_ptr cinfo,
+                JSAMPIMAGE input_buf, JDIMENSION in_row_index,
+                JSAMPIMAGE output_buf, JDIMENSION out_row_group_index)
+{
+    my_downsample_ptr downsample = (my_downsample_ptr) cinfo->downsample;
+    int ci;
+    jpeg_component_info * compptr;
+    JSAMPARRAY in_ptr, out_ptr;
+
+    for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
+            ci++, compptr++)
+    {
+        in_ptr = input_buf[ci] + in_row_index;
+        out_ptr = output_buf[ci] +
+                  (out_row_group_index * downsample->rowgroup_height[ci]);
+        (*downsample->methods[ci]) (cinfo, compptr, in_ptr, out_ptr);
+    }
+}
+
+
+/*
+ * Downsample pixel values of a single component.
+ * One row group is processed per call.
+ * This version handles arbitrary integral sampling ratios, without smoothing.
+ * Note that this version is not actually used for customary sampling ratios.
+ */
+
+METHODDEF(void)
+int_downsample (j_compress_ptr cinfo, jpeg_component_info * compptr,
+                JSAMPARRAY input_data, JSAMPARRAY output_data)
+{
+    my_downsample_ptr downsample = (my_downsample_ptr) cinfo->downsample;
+    int inrow, outrow, h_expand, v_expand, numpix, numpix2, h, v;
+    JDIMENSION outcol, outcol_h;	/* outcol_h == outcol*h_expand */
+    JDIMENSION output_cols = compptr->width_in_blocks * compptr->DCT_h_scaled_size;
+    JSAMPROW inptr, outptr;
+    INT32 outvalue;
+
+    h_expand = downsample->h_expand[compptr->component_index];
+    v_expand = downsample->v_expand[compptr->component_index];
+    numpix = h_expand * v_expand;
+    numpix2 = numpix/2;
+
+    /* Expand input data enough to let all the output samples be generated
+     * by the standard loop.  Special-casing padded output would be more
+     * efficient.
+     */
+    expand_right_edge(input_data, cinfo->max_v_samp_factor,
+                      cinfo->image_width, output_cols * h_expand);
+
+    inrow = outrow = 0;
+    while (inrow < cinfo->max_v_samp_factor)
+    {
+        outptr = output_data[outrow];
+        for (outcol = 0, outcol_h = 0; outcol < output_cols;
+                outcol++, outcol_h += h_expand)
+        {
+            outvalue = 0;
+            for (v = 0; v < v_expand; v++)
+            {
+                inptr = input_data[inrow+v] + outcol_h;
+                for (h = 0; h < h_expand; h++)
+                {
+                    outvalue += (INT32) GETJSAMPLE(*inptr++);
+                }
+            }
+            *outptr++ = (JSAMPLE) ((outvalue + numpix2) / numpix);
+        }
+        inrow += v_expand;
+        outrow++;
+    }
+}
+
+
+/*
+ * Downsample pixel values of a single component.
+ * This version handles the special case of a full-size component,
+ * without smoothing.
+ */
+
+METHODDEF(void)
+fullsize_downsample (j_compress_ptr cinfo, jpeg_component_info * compptr,
+                     JSAMPARRAY input_data, JSAMPARRAY output_data)
+{
+    /* Copy the data */
+    jcopy_sample_rows(input_data, 0, output_data, 0,
+                      cinfo->max_v_samp_factor, cinfo->image_width);
+    /* Edge-expand */
+    expand_right_edge(output_data, cinfo->max_v_samp_factor, cinfo->image_width,
+                      compptr->width_in_blocks * compptr->DCT_h_scaled_size);
+}
+
+
+/*
+ * Downsample pixel values of a single component.
+ * This version handles the common case of 2:1 horizontal and 1:1 vertical,
+ * without smoothing.
+ *
+ * A note about the "bias" calculations: when rounding fractional values to
+ * integer, we do not want to always round 0.5 up to the next integer.
+ * If we did that, we'd introduce a noticeable bias towards larger values.
+ * Instead, this code is arranged so that 0.5 will be rounded up or down at
+ * alternate pixel locations (a simple ordered dither pattern).
+ */
+
+METHODDEF(void)
+h2v1_downsample (j_compress_ptr cinfo, jpeg_component_info * compptr,
+                 JSAMPARRAY input_data, JSAMPARRAY output_data)
+{
+    int inrow;
+    JDIMENSION outcol;
+    JDIMENSION output_cols = compptr->width_in_blocks * compptr->DCT_h_scaled_size;
+    register JSAMPROW inptr, outptr;
+    register int bias;
+
+    /* Expand input data enough to let all the output samples be generated
+     * by the standard loop.  Special-casing padded output would be more
+     * efficient.
+     */
+    expand_right_edge(input_data, cinfo->max_v_samp_factor,
+                      cinfo->image_width, output_cols * 2);
+
+    for (inrow = 0; inrow < cinfo->max_v_samp_factor; inrow++)
+    {
+        outptr = output_data[inrow];
+        inptr = input_data[inrow];
+        bias = 0;			/* bias = 0,1,0,1,... for successive samples */
+        for (outcol = 0; outcol < output_cols; outcol++)
+        {
+            *outptr++ = (JSAMPLE) ((GETJSAMPLE(*inptr) + GETJSAMPLE(inptr[1])
+                                    + bias) >> 1);
+            bias ^= 1;		/* 0=>1, 1=>0 */
+            inptr += 2;
+        }
+    }
+}
+
+
+/*
+ * Downsample pixel values of a single component.
+ * This version handles the standard case of 2:1 horizontal and 2:1 vertical,
+ * without smoothing.
+ */
+
+METHODDEF(void)
+h2v2_downsample (j_compress_ptr cinfo, jpeg_component_info * compptr,
+                 JSAMPARRAY input_data, JSAMPARRAY output_data)
+{
+    int inrow, outrow;
+    JDIMENSION outcol;
+    JDIMENSION output_cols = compptr->width_in_blocks * compptr->DCT_h_scaled_size;
+    register JSAMPROW inptr0, inptr1, outptr;
+    register int bias;
+
+    /* Expand input data enough to let all the output samples be generated
+     * by the standard loop.  Special-casing padded output would be more
+     * efficient.
+     */
+    expand_right_edge(input_data, cinfo->max_v_samp_factor,
+                      cinfo->image_width, output_cols * 2);
+
+    inrow = outrow = 0;
+    while (inrow < cinfo->max_v_samp_factor)
+    {
+        outptr = output_data[outrow];
+        inptr0 = input_data[inrow];
+        inptr1 = input_data[inrow+1];
+        bias = 1;			/* bias = 1,2,1,2,... for successive samples */
+        for (outcol = 0; outcol < output_cols; outcol++)
+        {
+            *outptr++ = (JSAMPLE) ((GETJSAMPLE(*inptr0) + GETJSAMPLE(inptr0[1]) +
+                                    GETJSAMPLE(*inptr1) + GETJSAMPLE(inptr1[1])
+                                    + bias) >> 2);
+            bias ^= 3;		/* 1=>2, 2=>1 */
+            inptr0 += 2;
+            inptr1 += 2;
+        }
+        inrow += 2;
+        outrow++;
+    }
+}
+
+
+#ifdef INPUT_SMOOTHING_SUPPORTED
+
+/*
+ * Downsample pixel values of a single component.
+ * This version handles the standard case of 2:1 horizontal and 2:1 vertical,
+ * with smoothing.  One row of context is required.
+ */
+
+METHODDEF(void)
+h2v2_smooth_downsample (j_compress_ptr cinfo, jpeg_component_info * compptr,
+                        JSAMPARRAY input_data, JSAMPARRAY output_data)
+{
+    int inrow, outrow;
+    JDIMENSION colctr;
+    JDIMENSION output_cols = compptr->width_in_blocks * compptr->DCT_h_scaled_size;
+    register JSAMPROW inptr0, inptr1, above_ptr, below_ptr, outptr;
+    INT32 membersum, neighsum, memberscale, neighscale;
+
+    /* Expand input data enough to let all the output samples be generated
+     * by the standard loop.  Special-casing padded output would be more
+     * efficient.
+     */
+    expand_right_edge(input_data - 1, cinfo->max_v_samp_factor + 2,
+                      cinfo->image_width, output_cols * 2);
+
+    /* We don't bother to form the individual "smoothed" input pixel values;
+     * we can directly compute the output which is the average of the four
+     * smoothed values.  Each of the four member pixels contributes a fraction
+     * (1-8*SF) to its own smoothed image and a fraction SF to each of the three
+     * other smoothed pixels, therefore a total fraction (1-5*SF)/4 to the final
+     * output.  The four corner-adjacent neighbor pixels contribute a fraction
+     * SF to just one smoothed pixel, or SF/4 to the final output; while the
+     * eight edge-adjacent neighbors contribute SF to each of two smoothed
+     * pixels, or SF/2 overall.  In order to use integer arithmetic, these
+     * factors are scaled by 2^16 = 65536.
+     * Also recall that SF = smoothing_factor / 1024.
+     */
+
+    memberscale = 16384 - cinfo->smoothing_factor * 80; /* scaled (1-5*SF)/4 */
+    neighscale = cinfo->smoothing_factor * 16; /* scaled SF/4 */
+
+    inrow = outrow = 0;
+    while (inrow < cinfo->max_v_samp_factor)
+    {
+        outptr = output_data[outrow];
+        inptr0 = input_data[inrow];
+        inptr1 = input_data[inrow+1];
+        above_ptr = input_data[inrow-1];
+        below_ptr = input_data[inrow+2];
+
+        /* Special case for first column: pretend column -1 is same as column 0 */
+        membersum = GETJSAMPLE(*inptr0) + GETJSAMPLE(inptr0[1]) +
+                    GETJSAMPLE(*inptr1) + GETJSAMPLE(inptr1[1]);
+        neighsum = GETJSAMPLE(*above_ptr) + GETJSAMPLE(above_ptr[1]) +
+                   GETJSAMPLE(*below_ptr) + GETJSAMPLE(below_ptr[1]) +
+                   GETJSAMPLE(*inptr0) + GETJSAMPLE(inptr0[2]) +
+                   GETJSAMPLE(*inptr1) + GETJSAMPLE(inptr1[2]);
+        neighsum += neighsum;
+        neighsum += GETJSAMPLE(*above_ptr) + GETJSAMPLE(above_ptr[2]) +
+                    GETJSAMPLE(*below_ptr) + GETJSAMPLE(below_ptr[2]);
+        membersum = membersum * memberscale + neighsum * neighscale;
+        *outptr++ = (JSAMPLE) ((membersum + 32768) >> 16);
+        inptr0 += 2;
+        inptr1 += 2;
+        above_ptr += 2;
+        below_ptr += 2;
+
+        for (colctr = output_cols - 2; colctr > 0; colctr--)
+        {
+            /* sum of pixels directly mapped to this output element */
+            membersum = GETJSAMPLE(*inptr0) + GETJSAMPLE(inptr0[1]) +
+                        GETJSAMPLE(*inptr1) + GETJSAMPLE(inptr1[1]);
+            /* sum of edge-neighbor pixels */
+            neighsum = GETJSAMPLE(*above_ptr) + GETJSAMPLE(above_ptr[1]) +
+                       GETJSAMPLE(*below_ptr) + GETJSAMPLE(below_ptr[1]) +
+                       GETJSAMPLE(inptr0[-1]) + GETJSAMPLE(inptr0[2]) +
+                       GETJSAMPLE(inptr1[-1]) + GETJSAMPLE(inptr1[2]);
+            /* The edge-neighbors count twice as much as corner-neighbors */
+            neighsum += neighsum;
+            /* Add in the corner-neighbors */
+            neighsum += GETJSAMPLE(above_ptr[-1]) + GETJSAMPLE(above_ptr[2]) +
+                        GETJSAMPLE(below_ptr[-1]) + GETJSAMPLE(below_ptr[2]);
+            /* form final output scaled up by 2^16 */
+            membersum = membersum * memberscale + neighsum * neighscale;
+            /* round, descale and output it */
+            *outptr++ = (JSAMPLE) ((membersum + 32768) >> 16);
+            inptr0 += 2;
+            inptr1 += 2;
+            above_ptr += 2;
+            below_ptr += 2;
+        }
+
+        /* Special case for last column */
+        membersum = GETJSAMPLE(*inptr0) + GETJSAMPLE(inptr0[1]) +
+                    GETJSAMPLE(*inptr1) + GETJSAMPLE(inptr1[1]);
+        neighsum = GETJSAMPLE(*above_ptr) + GETJSAMPLE(above_ptr[1]) +
+                   GETJSAMPLE(*below_ptr) + GETJSAMPLE(below_ptr[1]) +
+                   GETJSAMPLE(inptr0[-1]) + GETJSAMPLE(inptr0[1]) +
+                   GETJSAMPLE(inptr1[-1]) + GETJSAMPLE(inptr1[1]);
+        neighsum += neighsum;
+        neighsum += GETJSAMPLE(above_ptr[-1]) + GETJSAMPLE(above_ptr[1]) +
+                    GETJSAMPLE(below_ptr[-1]) + GETJSAMPLE(below_ptr[1]);
+        membersum = membersum * memberscale + neighsum * neighscale;
+        *outptr = (JSAMPLE) ((membersum + 32768) >> 16);
+
+        inrow += 2;
+        outrow++;
+    }
+}
+
+
+/*
+ * Downsample pixel values of a single component.
+ * This version handles the special case of a full-size component,
+ * with smoothing.  One row of context is required.
+ */
+
+METHODDEF(void)
+fullsize_smooth_downsample (j_compress_ptr cinfo, jpeg_component_info *compptr,
+                            JSAMPARRAY input_data, JSAMPARRAY output_data)
+{
+    int inrow;
+    JDIMENSION colctr;
+    JDIMENSION output_cols = compptr->width_in_blocks * compptr->DCT_h_scaled_size;
+    register JSAMPROW inptr, above_ptr, below_ptr, outptr;
+    INT32 membersum, neighsum, memberscale, neighscale;
+    int colsum, lastcolsum, nextcolsum;
+
+    /* Expand input data enough to let all the output samples be generated
+     * by the standard loop.  Special-casing padded output would be more
+     * efficient.
+     */
+    expand_right_edge(input_data - 1, cinfo->max_v_samp_factor + 2,
+                      cinfo->image_width, output_cols);
+
+    /* Each of the eight neighbor pixels contributes a fraction SF to the
+     * smoothed pixel, while the main pixel contributes (1-8*SF).  In order
+     * to use integer arithmetic, these factors are multiplied by 2^16 = 65536.
+     * Also recall that SF = smoothing_factor / 1024.
+     */
+
+    memberscale = 65536L - cinfo->smoothing_factor * 512L; /* scaled 1-8*SF */
+    neighscale = cinfo->smoothing_factor * 64; /* scaled SF */
+
+    for (inrow = 0; inrow < cinfo->max_v_samp_factor; inrow++)
+    {
+        outptr = output_data[inrow];
+        inptr = input_data[inrow];
+        above_ptr = input_data[inrow-1];
+        below_ptr = input_data[inrow+1];
+
+        /* Special case for first column */
+        colsum = GETJSAMPLE(*above_ptr++) + GETJSAMPLE(*below_ptr++) +
+                 GETJSAMPLE(*inptr);
+        membersum = GETJSAMPLE(*inptr++);
+        nextcolsum = GETJSAMPLE(*above_ptr) + GETJSAMPLE(*below_ptr) +
+                     GETJSAMPLE(*inptr);
+        neighsum = colsum + (colsum - membersum) + nextcolsum;
+        membersum = membersum * memberscale + neighsum * neighscale;
+        *outptr++ = (JSAMPLE) ((membersum + 32768) >> 16);
+        lastcolsum = colsum;
+        colsum = nextcolsum;
+
+        for (colctr = output_cols - 2; colctr > 0; colctr--)
+        {
+            membersum = GETJSAMPLE(*inptr++);
+            above_ptr++;
+            below_ptr++;
+            nextcolsum = GETJSAMPLE(*above_ptr) + GETJSAMPLE(*below_ptr) +
+                         GETJSAMPLE(*inptr);
+            neighsum = lastcolsum + (colsum - membersum) + nextcolsum;
+            membersum = membersum * memberscale + neighsum * neighscale;
+            *outptr++ = (JSAMPLE) ((membersum + 32768) >> 16);
+            lastcolsum = colsum;
+            colsum = nextcolsum;
+        }
+
+        /* Special case for last column */
+        membersum = GETJSAMPLE(*inptr);
+        neighsum = lastcolsum + (colsum - membersum) + colsum;
+        membersum = membersum * memberscale + neighsum * neighscale;
+        *outptr = (JSAMPLE) ((membersum + 32768) >> 16);
+
+    }
+}
+
+#endif /* INPUT_SMOOTHING_SUPPORTED */
+
+
+/*
+ * Module initialization routine for downsampling.
+ * Note that we must select a routine for each component.
+ */
+
+GLOBAL(void)
+jinit_downsampler (j_compress_ptr cinfo)
+{
+    my_downsample_ptr downsample;
+    int ci;
+    jpeg_component_info * compptr;
+    boolean smoothok = TRUE;
+    int h_in_group, v_in_group, h_out_group, v_out_group;
+
+    downsample = (my_downsample_ptr)
+                 (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
+                         SIZEOF(my_downsampler));
+    cinfo->downsample = (struct jpeg_downsampler *) downsample;
+    downsample->pub.start_pass = start_pass_downsample;
+    downsample->pub.downsample = sep_downsample;
+    downsample->pub.need_context_rows = FALSE;
+
+    if (cinfo->CCIR601_sampling)
+    {
+        ERREXIT(cinfo, JERR_CCIR601_NOTIMPL);
+    }
+
+    /* Verify we can handle the sampling factors, and set up method pointers */
+    for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
+            ci++, compptr++)
+    {
+        /* Compute size of an "output group" for DCT scaling.  This many samples
+         * are to be converted from max_h_samp_factor * max_v_samp_factor pixels.
+         */
+        h_out_group = (compptr->h_samp_factor * compptr->DCT_h_scaled_size) /
+                      cinfo->min_DCT_h_scaled_size;
+        v_out_group = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
+                      cinfo->min_DCT_v_scaled_size;
+        h_in_group = cinfo->max_h_samp_factor;
+        v_in_group = cinfo->max_v_samp_factor;
+        downsample->rowgroup_height[ci] = v_out_group; /* save for use later */
+        if (h_in_group == h_out_group && v_in_group == v_out_group)
+        {
+#ifdef INPUT_SMOOTHING_SUPPORTED
+            if (cinfo->smoothing_factor)
+            {
+                downsample->methods[ci] = fullsize_smooth_downsample;
+                downsample->pub.need_context_rows = TRUE;
+            }
+            else
+#endif
+                downsample->methods[ci] = fullsize_downsample;
+        }
+        else if (h_in_group == h_out_group * 2 &&
+                 v_in_group == v_out_group)
+        {
+            smoothok = FALSE;
+            downsample->methods[ci] = h2v1_downsample;
+        }
+        else if (h_in_group == h_out_group * 2 &&
+                 v_in_group == v_out_group * 2)
+        {
+#ifdef INPUT_SMOOTHING_SUPPORTED
+            if (cinfo->smoothing_factor)
+            {
+                downsample->methods[ci] = h2v2_smooth_downsample;
+                downsample->pub.need_context_rows = TRUE;
+            }
+            else
+#endif
+                downsample->methods[ci] = h2v2_downsample;
+        }
+        else if ((h_in_group % h_out_group) == 0 &&
+                 (v_in_group % v_out_group) == 0)
+        {
+            smoothok = FALSE;
+            downsample->methods[ci] = int_downsample;
+            downsample->h_expand[ci] = (UINT8) (h_in_group / h_out_group);
+            downsample->v_expand[ci] = (UINT8) (v_in_group / v_out_group);
+        }
+        else
+        {
+            ERREXIT(cinfo, JERR_FRACT_SAMPLE_NOTIMPL);
+        }
+    }
+
+#ifdef INPUT_SMOOTHING_SUPPORTED
+    if (cinfo->smoothing_factor && !smoothok)
+    {
+        TRACEMS(cinfo, 0, JTRC_SMOOTH_NOTIMPL);
+    }
+#endif
+}
diff -NEaurb neo/renderer/jpeg-8c/jctrans.c neo/renderer/jpeg-8c/jctrans.c
--- neo/renderer/jpeg-8c/jctrans.c	1970-01-01 00:00:00 +0000
+++ neo/renderer/jpeg-8c/jctrans.c	2012-11-17 01:20:40 +0000
@@ -0,0 +1,425 @@
+/*
+ * jctrans.c
+ *
+ * Copyright (C) 1995-1998, Thomas G. Lane.
+ * Modified 2000-2009 by Guido Vollbeding.
+ * This file is part of the Independent JPEG Group's software.
+ * For conditions of distribution and use, see the accompanying README file.
+ *
+ * This file contains library routines for transcoding compression,
+ * that is, writing raw DCT coefficient arrays to an output JPEG file.
+ * The routines in jcapimin.c will also be needed by a transcoder.
+ */
+
+#define JPEG_INTERNALS
+#include "jinclude.h"
+#include "jpeglib.h"
+
+
+/* Forward declarations */
+LOCAL(void) transencode_master_selection
+JPP((j_compress_ptr cinfo, jvirt_barray_ptr * coef_arrays));
+LOCAL(void) transencode_coef_controller
+JPP((j_compress_ptr cinfo, jvirt_barray_ptr * coef_arrays));
+
+
+/*
+ * Compression initialization for writing raw-coefficient data.
+ * Before calling this, all parameters and a data destination must be set up.
+ * Call jpeg_finish_compress() to actually write the data.
+ *
+ * The number of passed virtual arrays must match cinfo->num_components.
+ * Note that the virtual arrays need not be filled or even realized at
+ * the time write_coefficients is called; indeed, if the virtual arrays
+ * were requested from this compression object's memory manager, they
+ * typically will be realized during this routine and filled afterwards.
+ */
+
+GLOBAL(void)
+jpeg_write_coefficients (j_compress_ptr cinfo, jvirt_barray_ptr * coef_arrays)
+{
+    if (cinfo->global_state != CSTATE_START)
+    {
+        ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
+    }
+    /* Mark all tables to be written */
+    jpeg_suppress_tables(cinfo, FALSE);
+    /* (Re)initialize error mgr and destination modules */
+    (*cinfo->err->reset_error_mgr) ((j_common_ptr) cinfo);
+    (*cinfo->dest->init_destination) (cinfo);
+    /* Perform master selection of active modules */
+    transencode_master_selection(cinfo, coef_arrays);
+    /* Wait for jpeg_finish_compress() call */
+    cinfo->next_scanline = 0;	/* so jpeg_write_marker works */
+    cinfo->global_state = CSTATE_WRCOEFS;
+}
+
+
+/*
+ * Initialize the compression object with default parameters,
+ * then copy from the source object all parameters needed for lossless
+ * transcoding.  Parameters that can be varied without loss (such as
+ * scan script and Huffman optimization) are left in their default states.
+ */
+
+GLOBAL(void)
+jpeg_copy_critical_parameters (j_decompress_ptr srcinfo,
+                               j_compress_ptr dstinfo)
+{
+    JQUANT_TBL ** qtblptr;
+    jpeg_component_info *incomp, *outcomp;
+    JQUANT_TBL *c_quant, *slot_quant;
+    int tblno, ci, coefi;
+
+    /* Safety check to ensure start_compress not called yet. */
+    if (dstinfo->global_state != CSTATE_START)
+    {
+        ERREXIT1(dstinfo, JERR_BAD_STATE, dstinfo->global_state);
+    }
+    /* Copy fundamental image dimensions */
+    dstinfo->image_width = srcinfo->image_width;
+    dstinfo->image_height = srcinfo->image_height;
+    dstinfo->input_components = srcinfo->num_components;
+    dstinfo->in_color_space = srcinfo->jpeg_color_space;
+    dstinfo->jpeg_width = srcinfo->output_width;
+    dstinfo->jpeg_height = srcinfo->output_height;
+    dstinfo->min_DCT_h_scaled_size = srcinfo->min_DCT_h_scaled_size;
+    dstinfo->min_DCT_v_scaled_size = srcinfo->min_DCT_v_scaled_size;
+    /* Initialize all parameters to default values */
+    jpeg_set_defaults(dstinfo);
+    /* jpeg_set_defaults may choose wrong colorspace, eg YCbCr if input is RGB.
+     * Fix it to get the right header markers for the image colorspace.
+     */
+    jpeg_set_colorspace(dstinfo, srcinfo->jpeg_color_space);
+    dstinfo->data_precision = srcinfo->data_precision;
+    dstinfo->CCIR601_sampling = srcinfo->CCIR601_sampling;
+    /* Copy the source's quantization tables. */
+    for (tblno = 0; tblno < NUM_QUANT_TBLS; tblno++)
+    {
+        if (srcinfo->quant_tbl_ptrs[tblno] != NULL)
+        {
+            qtblptr = & dstinfo->quant_tbl_ptrs[tblno];
+            if (*qtblptr == NULL)
+            {
+                *qtblptr = jpeg_alloc_quant_table((j_common_ptr) dstinfo);
+            }
+            MEMCOPY((*qtblptr)->quantval,
+                    srcinfo->quant_tbl_ptrs[tblno]->quantval,
+                    SIZEOF((*qtblptr)->quantval));
+            (*qtblptr)->sent_table = FALSE;
+        }
+    }
+    /* Copy the source's per-component info.
+     * Note we assume jpeg_set_defaults has allocated the dest comp_info array.
+     */
+    dstinfo->num_components = srcinfo->num_components;
+    if (dstinfo->num_components < 1 || dstinfo->num_components > MAX_COMPONENTS)
+        ERREXIT2(dstinfo, JERR_COMPONENT_COUNT, dstinfo->num_components,
+                 MAX_COMPONENTS);
+    for (ci = 0, incomp = srcinfo->comp_info, outcomp = dstinfo->comp_info;
+            ci < dstinfo->num_components; ci++, incomp++, outcomp++)
+    {
+        outcomp->component_id = incomp->component_id;
+        outcomp->h_samp_factor = incomp->h_samp_factor;
+        outcomp->v_samp_factor = incomp->v_samp_factor;
+        outcomp->quant_tbl_no = incomp->quant_tbl_no;
+        /* Make sure saved quantization table for component matches the qtable
+         * slot.  If not, the input file re-used this qtable slot.
+         * IJG encoder currently cannot duplicate this.
+         */
+        tblno = outcomp->quant_tbl_no;
+        if (tblno < 0 || tblno >= NUM_QUANT_TBLS ||
+                srcinfo->quant_tbl_ptrs[tblno] == NULL)
+        {
+            ERREXIT1(dstinfo, JERR_NO_QUANT_TABLE, tblno);
+        }
+        slot_quant = srcinfo->quant_tbl_ptrs[tblno];
+        c_quant = incomp->quant_table;
+        if (c_quant != NULL)
+        {
+            for (coefi = 0; coefi < DCTSIZE2; coefi++)
+            {
+                if (c_quant->quantval[coefi] != slot_quant->quantval[coefi])
+                {
+                    ERREXIT1(dstinfo, JERR_MISMATCHED_QUANT_TABLE, tblno);
+                }
+            }
+        }
+        /* Note: we do not copy the source's Huffman table assignments;
+         * instead we rely on jpeg_set_colorspace to have made a suitable choice.
+         */
+    }
+    /* Also copy JFIF version and resolution information, if available.
+     * Strictly speaking this isn't "critical" info, but it's nearly
+     * always appropriate to copy it if available.  In particular,
+     * if the application chooses to copy JFIF 1.02 extension markers from
+     * the source file, we need to copy the version to make sure we don't
+     * emit a file that has 1.02 extensions but a claimed version of 1.01.
+     * We will *not*, however, copy version info from mislabeled "2.01" files.
+     */
+    if (srcinfo->saw_JFIF_marker)
+    {
+        if (srcinfo->JFIF_major_version == 1)
+        {
+            dstinfo->JFIF_major_version = srcinfo->JFIF_major_version;
+            dstinfo->JFIF_minor_version = srcinfo->JFIF_minor_version;
+        }
+        dstinfo->density_unit = srcinfo->density_unit;
+        dstinfo->X_density = srcinfo->X_density;
+        dstinfo->Y_density = srcinfo->Y_density;
+    }
+}
+
+
+/*
+ * Master selection of compression modules for transcoding.
+ * This substitutes for jcinit.c's initialization of the full compressor.
+ */
+
+LOCAL(void)
+transencode_master_selection (j_compress_ptr cinfo,
+                              jvirt_barray_ptr * coef_arrays)
+{
+    /* Initialize master control (includes parameter checking/processing) */
+    jinit_c_master_control(cinfo, TRUE /* transcode only */);
+
+    /* Entropy encoding: either Huffman or arithmetic coding. */
+    if (cinfo->arith_code)
+    {
+        jinit_arith_encoder(cinfo);
+    }
+    else
+    {
+        jinit_huff_encoder(cinfo);
+    }
+
+    /* We need a special coefficient buffer controller. */
+    transencode_coef_controller(cinfo, coef_arrays);
+
+    jinit_marker_writer(cinfo);
+
+    /* We can now tell the memory manager to allocate virtual arrays. */
+    (*cinfo->mem->realize_virt_arrays) ((j_common_ptr) cinfo);
+
+    /* Write the datastream header (SOI, JFIF) immediately.
+     * Frame and scan headers are postponed till later.
+     * This lets application insert special markers after the SOI.
+     */
+    (*cinfo->marker->write_file_header) (cinfo);
+}
+
+
+/*
+ * The rest of this file is a special implementation of the coefficient
+ * buffer controller.  This is similar to jccoefct.c, but it handles only
+ * output from presupplied virtual arrays.  Furthermore, we generate any
+ * dummy padding blocks on-the-fly rather than expecting them to be present
+ * in the arrays.
+ */
+
+/* Private buffer controller object */
+
+typedef struct
+{
+    struct jpeg_c_coef_controller pub; /* public fields */
+
+    JDIMENSION iMCU_row_num;	/* iMCU row # within image */
+    JDIMENSION mcu_ctr;		/* counts MCUs processed in current row */
+    int MCU_vert_offset;		/* counts MCU rows within iMCU row */
+    int MCU_rows_per_iMCU_row;	/* number of such rows needed */
+
+    /* Virtual block array for each component. */
+    jvirt_barray_ptr * whole_image;
+
+    /* Workspace for constructing dummy blocks at right/bottom edges. */
+    JBLOCKROW dummy_buffer[C_MAX_BLOCKS_IN_MCU];
+} my_coef_controller;
+
+typedef my_coef_controller * my_coef_ptr;
+
+
+LOCAL(void)
+start_iMCU_row (j_compress_ptr cinfo)
+/* Reset within-iMCU-row counters for a new row */
+{
+    my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
+
+    /* In an interleaved scan, an MCU row is the same as an iMCU row.
+     * In a noninterleaved scan, an iMCU row has v_samp_factor MCU rows.
+     * But at the bottom of the image, process only what's left.
+     */
+    if (cinfo->comps_in_scan > 1)
+    {
+        coef->MCU_rows_per_iMCU_row = 1;
+    }
+    else
+    {
+        if (coef->iMCU_row_num < (cinfo->total_iMCU_rows-1))
+        {
+            coef->MCU_rows_per_iMCU_row = cinfo->cur_comp_info[0]->v_samp_factor;
+        }
+        else
+        {
+            coef->MCU_rows_per_iMCU_row = cinfo->cur_comp_info[0]->last_row_height;
+        }
+    }
+
+    coef->mcu_ctr = 0;
+    coef->MCU_vert_offset = 0;
+}
+
+
+/*
+ * Initialize for a processing pass.
+ */
+
+METHODDEF(void)
+start_pass_coef (j_compress_ptr cinfo, J_BUF_MODE pass_mode)
+{
+    my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
+
+    if (pass_mode != JBUF_CRANK_DEST)
+    {
+        ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
+    }
+
+    coef->iMCU_row_num = 0;
+    start_iMCU_row(cinfo);
+}
+
+
+/*
+ * Process some data.
+ * We process the equivalent of one fully interleaved MCU row ("iMCU" row)
+ * per call, ie, v_samp_factor block rows for each component in the scan.
+ * The data is obtained from the virtual arrays and fed to the entropy coder.
+ * Returns TRUE if the iMCU row is completed, FALSE if suspended.
+ *
+ * NB: input_buf is ignored; it is likely to be a NULL pointer.
+ */
+
+METHODDEF(boolean)
+compress_output (j_compress_ptr cinfo, JSAMPIMAGE input_buf)
+{
+    my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
+    JDIMENSION MCU_col_num;	/* index of current MCU within row */
+    JDIMENSION last_MCU_col = cinfo->MCUs_per_row - 1;
+    JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
+    int blkn, ci, xindex, yindex, yoffset, blockcnt;
+    JDIMENSION start_col;
+    JBLOCKARRAY buffer[MAX_COMPS_IN_SCAN];
+    JBLOCKROW MCU_buffer[C_MAX_BLOCKS_IN_MCU];
+    JBLOCKROW buffer_ptr;
+    jpeg_component_info *compptr;
+
+    /* Align the virtual buffers for the components used in this scan. */
+    for (ci = 0; ci < cinfo->comps_in_scan; ci++)
+    {
+        compptr = cinfo->cur_comp_info[ci];
+        buffer[ci] = (*cinfo->mem->access_virt_barray)
+                     ((j_common_ptr) cinfo, coef->whole_image[compptr->component_index],
+                      coef->iMCU_row_num * compptr->v_samp_factor,
+                      (JDIMENSION) compptr->v_samp_factor, FALSE);
+    }
+
+    /* Loop to process one whole iMCU row */
+    for (yoffset = coef->MCU_vert_offset; yoffset < coef->MCU_rows_per_iMCU_row;
+            yoffset++)
+    {
+        for (MCU_col_num = coef->mcu_ctr; MCU_col_num < cinfo->MCUs_per_row;
+                MCU_col_num++)
+        {
+            /* Construct list of pointers to DCT blocks belonging to this MCU */
+            blkn = 0;			/* index of current DCT block within MCU */
+            for (ci = 0; ci < cinfo->comps_in_scan; ci++)
+            {
+                compptr = cinfo->cur_comp_info[ci];
+                start_col = MCU_col_num * compptr->MCU_width;
+                blockcnt = (MCU_col_num < last_MCU_col) ? compptr->MCU_width
+                           : compptr->last_col_width;
+                for (yindex = 0; yindex < compptr->MCU_height; yindex++)
+                {
+                    if (coef->iMCU_row_num < last_iMCU_row ||
+                            yindex+yoffset < compptr->last_row_height)
+                    {
+                        /* Fill in pointers to real blocks in this row */
+                        buffer_ptr = buffer[ci][yindex+yoffset] + start_col;
+                        for (xindex = 0; xindex < blockcnt; xindex++)
+                        {
+                            MCU_buffer[blkn++] = buffer_ptr++;
+                        }
+                    }
+                    else
+                    {
+                        /* At bottom of image, need a whole row of dummy blocks */
+                        xindex = 0;
+                    }
+                    /* Fill in any dummy blocks needed in this row.
+                     * Dummy blocks are filled in the same way as in jccoefct.c:
+                     * all zeroes in the AC entries, DC entries equal to previous
+                     * block's DC value.  The init routine has already zeroed the
+                     * AC entries, so we need only set the DC entries correctly.
+                     */
+                    for (; xindex < compptr->MCU_width; xindex++)
+                    {
+                        MCU_buffer[blkn] = coef->dummy_buffer[blkn];
+                        MCU_buffer[blkn][0][0] = MCU_buffer[blkn-1][0][0];
+                        blkn++;
+                    }
+                }
+            }
+            /* Try to write the MCU. */
+            if (! (*cinfo->entropy->encode_mcu) (cinfo, MCU_buffer))
+            {
+                /* Suspension forced; update state counters and exit */
+                coef->MCU_vert_offset = yoffset;
+                coef->mcu_ctr = MCU_col_num;
+                return FALSE;
+            }
+        }
+        /* Completed an MCU row, but perhaps not an iMCU row */
+        coef->mcu_ctr = 0;
+    }
+    /* Completed the iMCU row, advance counters for next one */
+    coef->iMCU_row_num++;
+    start_iMCU_row(cinfo);
+    return TRUE;
+}
+
+
+/*
+ * Initialize coefficient buffer controller.
+ *
+ * Each passed coefficient array must be the right size for that
+ * coefficient: width_in_blocks wide and height_in_blocks high,
+ * with unitheight at least v_samp_factor.
+ */
+
+LOCAL(void)
+transencode_coef_controller (j_compress_ptr cinfo,
+                             jvirt_barray_ptr * coef_arrays)
+{
+    my_coef_ptr coef;
+    JBLOCKROW buffer;
+    int i;
+
+    coef = (my_coef_ptr)
+           (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
+                                       SIZEOF(my_coef_controller));
+    cinfo->coef = (struct jpeg_c_coef_controller *) coef;
+    coef->pub.start_pass = start_pass_coef;
+    coef->pub.compress_data = compress_output;
+
+    /* Save pointer to virtual arrays */
+    coef->whole_image = coef_arrays;
+
+    /* Allocate and pre-zero space for dummy DCT blocks. */
+    buffer = (JBLOCKROW)
+             (*cinfo->mem->alloc_large) ((j_common_ptr) cinfo, JPOOL_IMAGE,
+                                         C_MAX_BLOCKS_IN_MCU * SIZEOF(JBLOCK));
+    jzero_far((void FAR *) buffer, C_MAX_BLOCKS_IN_MCU * SIZEOF(JBLOCK));
+    for (i = 0; i < C_MAX_BLOCKS_IN_MCU; i++)
+    {
+        coef->dummy_buffer[i] = buffer + i;
+    }
+}
diff -NEaurb neo/renderer/jpeg-8c/jdapimin.c neo/renderer/jpeg-8c/jdapimin.c
--- neo/renderer/jpeg-8c/jdapimin.c	1970-01-01 00:00:00 +0000
+++ neo/renderer/jpeg-8c/jdapimin.c	2012-11-17 01:20:41 +0000
@@ -0,0 +1,438 @@
+/*
+ * jdapimin.c
+ *
+ * Copyright (C) 1994-1998, Thomas G. Lane.
+ * Modified 2009 by Guido Vollbeding.
+ * This file is part of the Independent JPEG Group's software.
+ * For conditions of distribution and use, see the accompanying README file.
+ *
+ * This file contains application interface code for the decompression half
+ * of the JPEG library.  These are the "minimum" API routines that may be
+ * needed in either the normal full-decompression case or the
+ * transcoding-only case.
+ *
+ * Most of the routines intended to be called directly by an application
+ * are in this file or in jdapistd.c.  But also see jcomapi.c for routines
+ * shared by compression and decompression, and jdtrans.c for the transcoding
+ * case.
+ */
+
+#define JPEG_INTERNALS
+#include "jinclude.h"
+#include "jpeglib.h"
+
+
+/*
+ * Initialization of a JPEG decompression object.
+ * The error manager must already be set up (in case memory manager fails).
+ */
+
+GLOBAL(void)
+jpeg_CreateDecompress (j_decompress_ptr cinfo, int version, size_t structsize)
+{
+    int i;
+
+    /* Guard against version mismatches between library and caller. */
+    cinfo->mem = NULL;		/* so jpeg_destroy knows mem mgr not called */
+    if (version != JPEG_LIB_VERSION)
+    {
+        ERREXIT2(cinfo, JERR_BAD_LIB_VERSION, JPEG_LIB_VERSION, version);
+    }
+    if (structsize != SIZEOF(struct jpeg_decompress_struct))
+        ERREXIT2(cinfo, JERR_BAD_STRUCT_SIZE,
+                 (int) SIZEOF(struct jpeg_decompress_struct), (int) structsize);
+
+    /* For debugging purposes, we zero the whole master structure.
+     * But the application has already set the err pointer, and may have set
+     * client_data, so we have to save and restore those fields.
+     * Note: if application hasn't set client_data, tools like Purify may
+     * complain here.
+     */
+    {
+        struct jpeg_error_mgr * err = cinfo->err;
+        void * client_data = cinfo->client_data; /* ignore Purify complaint here */
+        MEMZERO(cinfo, SIZEOF(struct jpeg_decompress_struct));
+        cinfo->err = err;
+        cinfo->client_data = client_data;
+    }
+    cinfo->is_decompressor = TRUE;
+
+    /* Initialize a memory manager instance for this object */
+    jinit_memory_mgr((j_common_ptr) cinfo);
+
+    /* Zero out pointers to permanent structures. */
+    cinfo->progress = NULL;
+    cinfo->src = NULL;
+
+    for (i = 0; i < NUM_QUANT_TBLS; i++)
+    {
+        cinfo->quant_tbl_ptrs[i] = NULL;
+    }
+
+    for (i = 0; i < NUM_HUFF_TBLS; i++)
+    {
+        cinfo->dc_huff_tbl_ptrs[i] = NULL;
+        cinfo->ac_huff_tbl_ptrs[i] = NULL;
+    }
+
+    /* Initialize marker processor so application can override methods
+     * for COM, APPn markers before calling jpeg_read_header.
+     */
+    cinfo->marker_list = NULL;
+    jinit_marker_reader(cinfo);
+
+    /* And initialize the overall input controller. */
+    jinit_input_controller(cinfo);
+
+    /* OK, I'm ready */
+    cinfo->global_state = DSTATE_START;
+}
+
+
+/*
+ * Destruction of a JPEG decompression object
+ */
+
+GLOBAL(void)
+jpeg_destroy_decompress (j_decompress_ptr cinfo)
+{
+    jpeg_destroy((j_common_ptr) cinfo); /* use common routine */
+}
+
+
+/*
+ * Abort processing of a JPEG decompression operation,
+ * but don't destroy the object itself.
+ */
+
+GLOBAL(void)
+jpeg_abort_decompress (j_decompress_ptr cinfo)
+{
+    jpeg_abort((j_common_ptr) cinfo); /* use common routine */
+}
+
+
+/*
+ * Set default decompression parameters.
+ */
+
+LOCAL(void)
+default_decompress_parms (j_decompress_ptr cinfo)
+{
+    /* Guess the input colorspace, and set output colorspace accordingly. */
+    /* (Wish JPEG committee had provided a real way to specify this...) */
+    /* Note application may override our guesses. */
+    switch (cinfo->num_components)
+    {
+    case 1:
+        cinfo->jpeg_color_space = JCS_GRAYSCALE;
+        cinfo->out_color_space = JCS_GRAYSCALE;
+        break;
+
+    case 3:
+        if (cinfo->saw_JFIF_marker)
+        {
+            cinfo->jpeg_color_space = JCS_YCbCr; /* JFIF implies YCbCr */
+        }
+        else if (cinfo->saw_Adobe_marker)
+        {
+            switch (cinfo->Adobe_transform)
+            {
+            case 0:
+                cinfo->jpeg_color_space = JCS_RGB;
+                break;
+            case 1:
+                cinfo->jpeg_color_space = JCS_YCbCr;
+                break;
+            default:
+                WARNMS1(cinfo, JWRN_ADOBE_XFORM, cinfo->Adobe_transform);
+                cinfo->jpeg_color_space = JCS_YCbCr; /* assume it's YCbCr */
+                break;
+            }
+        }
+        else
+        {
+            /* Saw no special markers, try to guess from the component IDs */
+            int cid0 = cinfo->comp_info[0].component_id;
+            int cid1 = cinfo->comp_info[1].component_id;
+            int cid2 = cinfo->comp_info[2].component_id;
+
+            if (cid0 == 1 && cid1 == 2 && cid2 == 3)
+            {
+                cinfo->jpeg_color_space = JCS_YCbCr;    /* assume JFIF w/out marker */
+            }
+            else if (cid0 == 82 && cid1 == 71 && cid2 == 66)
+            {
+                cinfo->jpeg_color_space = JCS_RGB;    /* ASCII 'R', 'G', 'B' */
+            }
+            else
+            {
+                TRACEMS3(cinfo, 1, JTRC_UNKNOWN_IDS, cid0, cid1, cid2);
+                cinfo->jpeg_color_space = JCS_YCbCr; /* assume it's YCbCr */
+            }
+        }
+        /* Always guess RGB is proper output colorspace. */
+        cinfo->out_color_space = JCS_RGB;
+        break;
+
+    case 4:
+        if (cinfo->saw_Adobe_marker)
+        {
+            switch (cinfo->Adobe_transform)
+            {
+            case 0:
+                cinfo->jpeg_color_space = JCS_CMYK;
+                break;
+            case 2:
+                cinfo->jpeg_color_space = JCS_YCCK;
+                break;
+            default:
+                WARNMS1(cinfo, JWRN_ADOBE_XFORM, cinfo->Adobe_transform);
+                cinfo->jpeg_color_space = JCS_YCCK; /* assume it's YCCK */
+                break;
+            }
+        }
+        else
+        {
+            /* No special markers, assume straight CMYK. */
+            cinfo->jpeg_color_space = JCS_CMYK;
+        }
+        cinfo->out_color_space = JCS_CMYK;
+        break;
+
+    default:
+        cinfo->jpeg_color_space = JCS_UNKNOWN;
+        cinfo->out_color_space = JCS_UNKNOWN;
+        break;
+    }
+
+    /* Set defaults for other decompression parameters. */
+    cinfo->scale_num = cinfo->block_size;		/* 1:1 scaling */
+    cinfo->scale_denom = cinfo->block_size;
+    cinfo->output_gamma = 1.0;
+    cinfo->buffered_image = FALSE;
+    cinfo->raw_data_out = FALSE;
+    cinfo->dct_method = JDCT_DEFAULT;
+    cinfo->do_fancy_upsampling = TRUE;
+    cinfo->do_block_smoothing = TRUE;
+    cinfo->quantize_colors = FALSE;
+    /* We set these in case application only sets quantize_colors. */
+    cinfo->dither_mode = JDITHER_FS;
+#ifdef QUANT_2PASS_SUPPORTED
+    cinfo->two_pass_quantize = TRUE;
+#else
+    cinfo->two_pass_quantize = FALSE;
+#endif
+    cinfo->desired_number_of_colors = 256;
+    cinfo->colormap = NULL;
+    /* Initialize for no mode change in buffered-image mode. */
+    cinfo->enable_1pass_quant = FALSE;
+    cinfo->enable_external_quant = FALSE;
+    cinfo->enable_2pass_quant = FALSE;
+}
+
+
+/*
+ * Decompression startup: read start of JPEG datastream to see what's there.
+ * Need only initialize JPEG object and supply a data source before calling.
+ *
+ * This routine will read as far as the first SOS marker (ie, actual start of
+ * compressed data), and will save all tables and parameters in the JPEG
+ * object.  It will also initialize the decompression parameters to default
+ * values, and finally return JPEG_HEADER_OK.  On return, the application may
+ * adjust the decompression parameters and then call jpeg_start_decompress.
+ * (Or, if the application only wanted to determine the image parameters,
+ * the data need not be decompressed.  In that case, call jpeg_abort or
+ * jpeg_destroy to release any temporary space.)
+ * If an abbreviated (tables only) datastream is presented, the routine will
+ * return JPEG_HEADER_TABLES_ONLY upon reaching EOI.  The application may then
+ * re-use the JPEG object to read the abbreviated image datastream(s).
+ * It is unnecessary (but OK) to call jpeg_abort in this case.
+ * The JPEG_SUSPENDED return code only occurs if the data source module
+ * requests suspension of the decompressor.  In this case the application
+ * should load more source data and then re-call jpeg_read_header to resume
+ * processing.
+ * If a non-suspending data source is used and require_image is TRUE, then the
+ * return code need not be inspected since only JPEG_HEADER_OK is possible.
+ *
+ * This routine is now just a front end to jpeg_consume_input, with some
+ * extra error checking.
+ */
+
+GLOBAL(int)
+jpeg_read_header (j_decompress_ptr cinfo, boolean require_image)
+{
+    int retcode;
+
+    if (cinfo->global_state != DSTATE_START &&
+            cinfo->global_state != DSTATE_INHEADER)
+    {
+        ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
+    }
+
+    retcode = jpeg_consume_input(cinfo);
+
+    switch (retcode)
+    {
+    case JPEG_REACHED_SOS:
+        retcode = JPEG_HEADER_OK;
+        break;
+    case JPEG_REACHED_EOI:
+        if (require_image)		/* Complain if application wanted an image */
+        {
+            ERREXIT(cinfo, JERR_NO_IMAGE);
+        }
+        /* Reset to start state; it would be safer to require the application to
+         * call jpeg_abort, but we can't change it now for compatibility reasons.
+         * A side effect is to free any temporary memory (there shouldn't be any).
+         */
+        jpeg_abort((j_common_ptr) cinfo); /* sets state = DSTATE_START */
+        retcode = JPEG_HEADER_TABLES_ONLY;
+        break;
+    case JPEG_SUSPENDED:
+        /* no work */
+        break;
+    }
+
+    return retcode;
+}
+
+
+/*
+ * Consume data in advance of what the decompressor requires.
+ * This can be called at any time once the decompressor object has
+ * been created and a data source has been set up.
+ *
+ * This routine is essentially a state machine that handles a couple
+ * of critical state-transition actions, namely initial setup and
+ * transition from header scanning to ready-for-start_decompress.
+ * All the actual input is done via the input controller's consume_input
+ * method.
+ */
+
+GLOBAL(int)
+jpeg_consume_input (j_decompress_ptr cinfo)
+{
+    int retcode = JPEG_SUSPENDED;
+
+    /* NB: every possible DSTATE value should be listed in this switch */
+    switch (cinfo->global_state)
+    {
+    case DSTATE_START:
+        /* Start-of-datastream actions: reset appropriate modules */
+        (*cinfo->inputctl->reset_input_controller) (cinfo);
+        /* Initialize application's data source module */
+        (*cinfo->src->init_source) (cinfo);
+        cinfo->global_state = DSTATE_INHEADER;
+        /*FALLTHROUGH*/
+    case DSTATE_INHEADER:
+        retcode = (*cinfo->inputctl->consume_input) (cinfo);
+        if (retcode == JPEG_REACHED_SOS)   /* Found SOS, prepare to decompress */
+        {
+            /* Set up default parameters based on header data */
+            default_decompress_parms(cinfo);
+            /* Set global state: ready for start_decompress */
+            cinfo->global_state = DSTATE_READY;
+        }
+        break;
+    case DSTATE_READY:
+        /* Can't advance past first SOS until start_decompress is called */
+        retcode = JPEG_REACHED_SOS;
+        break;
+    case DSTATE_PRELOAD:
+    case DSTATE_PRESCAN:
+    case DSTATE_SCANNING:
+    case DSTATE_RAW_OK:
+    case DSTATE_BUFIMAGE:
+    case DSTATE_BUFPOST:
+    case DSTATE_STOPPING:
+        retcode = (*cinfo->inputctl->consume_input) (cinfo);
+        break;
+    default:
+        ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
+    }
+    return retcode;
+}
+
+
+/*
+ * Have we finished reading the input file?
+ */
+
+GLOBAL(boolean)
+jpeg_input_complete (j_decompress_ptr cinfo)
+{
+    /* Check for valid jpeg object */
+    if (cinfo->global_state < DSTATE_START ||
+            cinfo->global_state > DSTATE_STOPPING)
+    {
+        ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
+    }
+    return cinfo->inputctl->eoi_reached;
+}
+
+
+/*
+ * Is there more than one scan?
+ */
+
+GLOBAL(boolean)
+jpeg_has_multiple_scans (j_decompress_ptr cinfo)
+{
+    /* Only valid after jpeg_read_header completes */
+    if (cinfo->global_state < DSTATE_READY ||
+            cinfo->global_state > DSTATE_STOPPING)
+    {
+        ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
+    }
+    return cinfo->inputctl->has_multiple_scans;
+}
+
+
+/*
+ * Finish JPEG decompression.
+ *
+ * This will normally just verify the file trailer and release temp storage.
+ *
+ * Returns FALSE if suspended.  The return value need be inspected only if
+ * a suspending data source is used.
+ */
+
+GLOBAL(boolean)
+jpeg_finish_decompress (j_decompress_ptr cinfo)
+{
+    if ((cinfo->global_state == DSTATE_SCANNING ||
+            cinfo->global_state == DSTATE_RAW_OK) && ! cinfo->buffered_image)
+    {
+        /* Terminate final pass of non-buffered mode */
+        if (cinfo->output_scanline < cinfo->output_height)
+        {
+            ERREXIT(cinfo, JERR_TOO_LITTLE_DATA);
+        }
+        (*cinfo->master->finish_output_pass) (cinfo);
+        cinfo->global_state = DSTATE_STOPPING;
+    }
+    else if (cinfo->global_state == DSTATE_BUFIMAGE)
+    {
+        /* Finishing after a buffered-image operation */
+        cinfo->global_state = DSTATE_STOPPING;
+    }
+    else if (cinfo->global_state != DSTATE_STOPPING)
+    {
+        /* STOPPING = repeat call after a suspension, anything else is error */
+        ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
+    }
+    /* Read until EOI */
+    while (! cinfo->inputctl->eoi_reached)
+    {
+        if ((*cinfo->inputctl->consume_input) (cinfo) == JPEG_SUSPENDED)
+        {
+            return FALSE;    /* Suspend, come back later */
+        }
+    }
+    /* Do final cleanup */
+    (*cinfo->src->term_source) (cinfo);
+    /* We can use jpeg_abort to release memory and reset global_state */
+    jpeg_abort((j_common_ptr) cinfo);
+    return TRUE;
+}
diff -NEaurb neo/renderer/jpeg-8c/jdapistd.c neo/renderer/jpeg-8c/jdapistd.c
--- neo/renderer/jpeg-8c/jdapistd.c	1970-01-01 00:00:00 +0000
+++ neo/renderer/jpeg-8c/jdapistd.c	2012-11-17 01:20:39 +0000
@@ -0,0 +1,321 @@
+/*
+ * jdapistd.c
+ *
+ * Copyright (C) 1994-1996, Thomas G. Lane.
+ * This file is part of the Independent JPEG Group's software.
+ * For conditions of distribution and use, see the accompanying README file.
+ *
+ * This file contains application interface code for the decompression half
+ * of the JPEG library.  These are the "standard" API routines that are
+ * used in the normal full-decompression case.  They are not used by a
+ * transcoding-only application.  Note that if an application links in
+ * jpeg_start_decompress, it will end up linking in the entire decompressor.
+ * We thus must separate this file from jdapimin.c to avoid linking the
+ * whole decompression library into a transcoder.
+ */
+
+#define JPEG_INTERNALS
+#include "jinclude.h"
+#include "jpeglib.h"
+
+
+/* Forward declarations */
+LOCAL(boolean) output_pass_setup JPP((j_decompress_ptr cinfo));
+
+
+/*
+ * Decompression initialization.
+ * jpeg_read_header must be completed before calling this.
+ *
+ * If a multipass operating mode was selected, this will do all but the
+ * last pass, and thus may take a great deal of time.
+ *
+ * Returns FALSE if suspended.  The return value need be inspected only if
+ * a suspending data source is used.
+ */
+
+GLOBAL(boolean)
+jpeg_start_decompress (j_decompress_ptr cinfo)
+{
+    if (cinfo->global_state == DSTATE_READY)
+    {
+        /* First call: initialize master control, select active modules */
+        jinit_master_decompress(cinfo);
+        if (cinfo->buffered_image)
+        {
+            /* No more work here; expecting jpeg_start_output next */
+            cinfo->global_state = DSTATE_BUFIMAGE;
+            return TRUE;
+        }
+        cinfo->global_state = DSTATE_PRELOAD;
+    }
+    if (cinfo->global_state == DSTATE_PRELOAD)
+    {
+        /* If file has multiple scans, absorb them all into the coef buffer */
+        if (cinfo->inputctl->has_multiple_scans)
+        {
+#ifdef D_MULTISCAN_FILES_SUPPORTED
+            for (;;)
+            {
+                int retcode;
+                /* Call progress monitor hook if present */
+                if (cinfo->progress != NULL)
+                {
+                    (*cinfo->progress->progress_monitor) ((j_common_ptr) cinfo);
+                }
+                /* Absorb some more input */
+                retcode = (*cinfo->inputctl->consume_input) (cinfo);
+                if (retcode == JPEG_SUSPENDED)
+                {
+                    return FALSE;
+                }
+                if (retcode == JPEG_REACHED_EOI)
+                {
+                    break;
+                }
+                /* Advance progress counter if appropriate */
+                if (cinfo->progress != NULL &&
+                        (retcode == JPEG_ROW_COMPLETED || retcode == JPEG_REACHED_SOS))
+                {
+                    if (++cinfo->progress->pass_counter >= cinfo->progress->pass_limit)
+                    {
+                        /* jdmaster underestimated number of scans; ratchet up one scan */
+                        cinfo->progress->pass_limit += (long) cinfo->total_iMCU_rows;
+                    }
+                }
+            }
+#else
+            ERREXIT(cinfo, JERR_NOT_COMPILED);
+#endif /* D_MULTISCAN_FILES_SUPPORTED */
+        }
+        cinfo->output_scan_number = cinfo->input_scan_number;
+    }
+    else if (cinfo->global_state != DSTATE_PRESCAN)
+    {
+        ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
+    }
+    /* Perform any dummy output passes, and set up for the final pass */
+    return output_pass_setup(cinfo);
+}
+
+
+/*
+ * Set up for an output pass, and perform any dummy pass(es) needed.
+ * Common subroutine for jpeg_start_decompress and jpeg_start_output.
+ * Entry: global_state = DSTATE_PRESCAN only if previously suspended.
+ * Exit: If done, returns TRUE and sets global_state for proper output mode.
+ *       If suspended, returns FALSE and sets global_state = DSTATE_PRESCAN.
+ */
+
+LOCAL(boolean)
+output_pass_setup (j_decompress_ptr cinfo)
+{
+    if (cinfo->global_state != DSTATE_PRESCAN)
+    {
+        /* First call: do pass setup */
+        (*cinfo->master->prepare_for_output_pass) (cinfo);
+        cinfo->output_scanline = 0;
+        cinfo->global_state = DSTATE_PRESCAN;
+    }
+    /* Loop over any required dummy passes */
+    while (cinfo->master->is_dummy_pass)
+    {
+#ifdef QUANT_2PASS_SUPPORTED
+        /* Crank through the dummy pass */
+        while (cinfo->output_scanline < cinfo->output_height)
+        {
+            JDIMENSION last_scanline;
+            /* Call progress monitor hook if present */
+            if (cinfo->progress != NULL)
+            {
+                cinfo->progress->pass_counter = (long) cinfo->output_scanline;
+                cinfo->progress->pass_limit = (long) cinfo->output_height;
+                (*cinfo->progress->progress_monitor) ((j_common_ptr) cinfo);
+            }
+            /* Process some data */
+            last_scanline = cinfo->output_scanline;
+            (*cinfo->main->process_data) (cinfo, (JSAMPARRAY) NULL,
+                                          &cinfo->output_scanline, (JDIMENSION) 0);
+            if (cinfo->output_scanline == last_scanline)
+            {
+                return FALSE;    /* No progress made, must suspend */
+            }
+        }
+        /* Finish up dummy pass, and set up for another one */
+        (*cinfo->master->finish_output_pass) (cinfo);
+        (*cinfo->master->prepare_for_output_pass) (cinfo);
+        cinfo->output_scanline = 0;
+#else
+        ERREXIT(cinfo, JERR_NOT_COMPILED);
+#endif /* QUANT_2PASS_SUPPORTED */
+    }
+    /* Ready for application to drive output pass through
+     * jpeg_read_scanlines or jpeg_read_raw_data.
+     */
+    cinfo->global_state = cinfo->raw_data_out ? DSTATE_RAW_OK : DSTATE_SCANNING;
+    return TRUE;
+}
+
+
+/*
+ * Read some scanlines of data from the JPEG decompressor.
+ *
+ * The return value will be the number of lines actually read.
+ * This may be less than the number requested in several cases,
+ * including bottom of image, data source suspension, and operating
+ * modes that emit multiple scanlines at a time.
+ *
+ * Note: we warn about excess calls to jpeg_read_scanlines() since
+ * this likely signals an application programmer error.  However,
+ * an oversize buffer (max_lines > scanlines remaining) is not an error.
+ */
+
+GLOBAL(JDIMENSION)
+jpeg_read_scanlines (j_decompress_ptr cinfo, JSAMPARRAY scanlines,
+                     JDIMENSION max_lines)
+{
+    JDIMENSION row_ctr;
+
+    if (cinfo->global_state != DSTATE_SCANNING)
+    {
+        ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
+    }
+    if (cinfo->output_scanline >= cinfo->output_height)
+    {
+        WARNMS(cinfo, JWRN_TOO_MUCH_DATA);
+        return 0;
+    }
+
+    /* Call progress monitor hook if present */
+    if (cinfo->progress != NULL)
+    {
+        cinfo->progress->pass_counter = (long) cinfo->output_scanline;
+        cinfo->progress->pass_limit = (long) cinfo->output_height;
+        (*cinfo->progress->progress_monitor) ((j_common_ptr) cinfo);
+    }
+
+    /* Process some data */
+    row_ctr = 0;
+    (*cinfo->main->process_data) (cinfo, scanlines, &row_ctr, max_lines);
+    cinfo->output_scanline += row_ctr;
+    return row_ctr;
+}
+
+
+/*
+ * Alternate entry point to read raw data.
+ * Processes exactly one iMCU row per call, unless suspended.
+ */
+
+GLOBAL(JDIMENSION)
+jpeg_read_raw_data (j_decompress_ptr cinfo, JSAMPIMAGE data,
+                    JDIMENSION max_lines)
+{
+    JDIMENSION lines_per_iMCU_row;
+
+    if (cinfo->global_state != DSTATE_RAW_OK)
+    {
+        ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
+    }
+    if (cinfo->output_scanline >= cinfo->output_height)
+    {
+        WARNMS(cinfo, JWRN_TOO_MUCH_DATA);
+        return 0;
+    }
+
+    /* Call progress monitor hook if present */
+    if (cinfo->progress != NULL)
+    {
+        cinfo->progress->pass_counter = (long) cinfo->output_scanline;
+        cinfo->progress->pass_limit = (long) cinfo->output_height;
+        (*cinfo->progress->progress_monitor) ((j_common_ptr) cinfo);
+    }
+
+    /* Verify that at least one iMCU row can be returned. */
+    lines_per_iMCU_row = cinfo->max_v_samp_factor * cinfo->min_DCT_v_scaled_size;
+    if (max_lines < lines_per_iMCU_row)
+    {
+        ERREXIT(cinfo, JERR_BUFFER_SIZE);
+    }
+
+    /* Decompress directly into user's buffer. */
+    if (! (*cinfo->coef->decompress_data) (cinfo, data))
+    {
+        return 0;    /* suspension forced, can do nothing more */
+    }
+
+    /* OK, we processed one iMCU row. */
+    cinfo->output_scanline += lines_per_iMCU_row;
+    return lines_per_iMCU_row;
+}
+
+
+/* Additional entry points for buffered-image mode. */
+
+#ifdef D_MULTISCAN_FILES_SUPPORTED
+
+/*
+ * Initialize for an output pass in buffered-image mode.
+ */
+
+GLOBAL(boolean)
+jpeg_start_output (j_decompress_ptr cinfo, int scan_number)
+{
+    if (cinfo->global_state != DSTATE_BUFIMAGE &&
+            cinfo->global_state != DSTATE_PRESCAN)
+    {
+        ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
+    }
+    /* Limit scan number to valid range */
+    if (scan_number <= 0)
+    {
+        scan_number = 1;
+    }
+    if (cinfo->inputctl->eoi_reached &&
+            scan_number > cinfo->input_scan_number)
+    {
+        scan_number = cinfo->input_scan_number;
+    }
+    cinfo->output_scan_number = scan_number;
+    /* Perform any dummy output passes, and set up for the real pass */
+    return output_pass_setup(cinfo);
+}
+
+
+/*
+ * Finish up after an output pass in buffered-image mode.
+ *
+ * Returns FALSE if suspended.  The return value need be inspected only if
+ * a suspending data source is used.
+ */
+
+GLOBAL(boolean)
+jpeg_finish_output (j_decompress_ptr cinfo)
+{
+    if ((cinfo->global_state == DSTATE_SCANNING ||
+            cinfo->global_state == DSTATE_RAW_OK) && cinfo->buffered_image)
+    {
+        /* Terminate this pass. */
+        /* We do not require the whole pass to have been completed. */
+        (*cinfo->master->finish_output_pass) (cinfo);
+        cinfo->global_state = DSTATE_BUFPOST;
+    }
+    else if (cinfo->global_state != DSTATE_BUFPOST)
+    {
+        /* BUFPOST = repeat call after a suspension, anything else is error */
+        ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
+    }
+    /* Read markers looking for SOS or EOI */
+    while (cinfo->input_scan_number <= cinfo->output_scan_number &&
+            ! cinfo->inputctl->eoi_reached)
+    {
+        if ((*cinfo->inputctl->consume_input) (cinfo) == JPEG_SUSPENDED)
+        {
+            return FALSE;    /* Suspend, come back later */
+        }
+    }
+    cinfo->global_state = DSTATE_BUFIMAGE;
+    return TRUE;
+}
+
+#endif /* D_MULTISCAN_FILES_SUPPORTED */
diff -NEaurb neo/renderer/jpeg-8c/jdarith.c neo/renderer/jpeg-8c/jdarith.c
--- neo/renderer/jpeg-8c/jdarith.c	1970-01-01 00:00:00 +0000
+++ neo/renderer/jpeg-8c/jdarith.c	2013-08-13 04:56:51 +0000
@@ -0,0 +1,979 @@
+/*
+ * jdarith.c
+ *
+ * Developed 1997-2009 by Guido Vollbeding.
+ * This file is part of the Independent JPEG Group's software.
+ * For conditions of distribution and use, see the accompanying README file.
+ *
+ * This file contains portable arithmetic entropy decoding routines for JPEG
+ * (implementing the ISO/IEC IS 10918-1 and CCITT Recommendation ITU-T T.81).
+ *
+ * Both sequential and progressive modes are supported in this single module.
+ *
+ * Suspension is not currently supported in this module.
+ */
+
+#define JPEG_INTERNALS
+#include "jinclude.h"
+#include "jpeglib.h"
+
+
+/* Expanded entropy decoder object for arithmetic decoding. */
+
+typedef struct
+{
+    struct jpeg_entropy_decoder pub; /* public fields */
+
+    INT32 c;       /* C register, base of coding interval + input bit buffer */
+    INT32 a;               /* A register, normalized size of coding interval */
+    int ct;     /* bit shift counter, # of bits left in bit buffer part of C */
+    /* init: ct = -16 */
+    /* run: ct = 0..7 */
+    /* error: ct = -1 */
+    int last_dc_val[MAX_COMPS_IN_SCAN]; /* last DC coef for each component */
+    int dc_context[MAX_COMPS_IN_SCAN]; /* context index for DC conditioning */
+
+    unsigned int restarts_to_go;	/* MCUs left in this restart interval */
+
+    /* Pointers to statistics areas (these workspaces have image lifespan) */
+    unsigned char * dc_stats[NUM_ARITH_TBLS];
+    unsigned char * ac_stats[NUM_ARITH_TBLS];
+
+    /* Statistics bin for coding with fixed probability 0.5 */
+    unsigned char fixed_bin[4];
+} arith_entropy_decoder;
+
+typedef arith_entropy_decoder * arith_entropy_ptr;
+
+/* The following two definitions specify the allocation chunk size
+ * for the statistics area.
+ * According to sections F.1.4.4.1.3 and F.1.4.4.2, we need at least
+ * 49 statistics bins for DC, and 245 statistics bins for AC coding.
+ *
+ * We use a compact representation with 1 byte per statistics bin,
+ * thus the numbers directly represent byte sizes.
+ * This 1 byte per statistics bin contains the meaning of the MPS
+ * (more probable symbol) in the highest bit (mask 0x80), and the
+ * index into the probability estimation state machine table
+ * in the lower bits (mask 0x7F).
+ */
+
+#define DC_STAT_BINS 64
+#define AC_STAT_BINS 256
+
+
+LOCAL(int)
+get_byte (j_decompress_ptr cinfo)
+/* Read next input byte; we do not support suspension in this module. */
+{
+    struct jpeg_source_mgr * src = cinfo->src;
+
+    if (src->bytes_in_buffer == 0)
+        if (! (*src->fill_input_buffer) (cinfo))
+        {
+            ERREXIT(cinfo, JERR_CANT_SUSPEND);
+        }
+    src->bytes_in_buffer--;
+    return GETJOCTET(*src->next_input_byte++);
+}
+
+
+/*
+ * The core arithmetic decoding routine (common in JPEG and JBIG).
+ * This needs to go as fast as possible.
+ * Machine-dependent optimization facilities
+ * are not utilized in this portable implementation.
+ * However, this code should be fairly efficient and
+ * may be a good base for further optimizations anyway.
+ *
+ * Return value is 0 or 1 (binary decision).
+ *
+ * Note: I've changed the handling of the code base & bit
+ * buffer register C compared to other implementations
+ * based on the standards layout & procedures.
+ * While it also contains both the actual base of the
+ * coding interval (16 bits) and the next-bits buffer,
+ * the cut-point between these two parts is floating
+ * (instead of fixed) with the bit shift counter CT.
+ * Thus, we also need only one (variable instead of
+ * fixed size) shift for the LPS/MPS decision, and
+ * we can get away with any renormalization update
+ * of C (except for new data insertion, of course).
+ *
+ * I've also introduced a new scheme for accessing
+ * the probability estimation state machine table,
+ * derived from Markus Kuhn's JBIG implementation.
+ */
+
+LOCAL(int)
+arith_decode (j_decompress_ptr cinfo, unsigned char *st)
+{
+    register arith_entropy_ptr e = (arith_entropy_ptr) cinfo->entropy;
+    register unsigned char nl, nm;
+    register INT32 qe, temp;
+    register int sv, data;
+
+    /* Renormalization & data input per section D.2.6 */
+    while (e->a < 0x8000L)
+    {
+        if (--e->ct < 0)
+        {
+            /* Need to fetch next data byte */
+            if (cinfo->unread_marker)
+            {
+                data = 0;    /* stuff zero data */
+            }
+            else
+            {
+                data = get_byte(cinfo);	/* read next input byte */
+                if (data == 0xFF)  	/* zero stuff or marker code */
+                {
+                    do
+                    {
+                        data = get_byte(cinfo);
+                    }
+                    while (data == 0xFF);	/* swallow extra 0xFF bytes */
+                    if (data == 0)
+                    {
+                        data = 0xFF;    /* discard stuffed zero byte */
+                    }
+                    else
+                    {
+                        /* Note: Different from the Huffman decoder, hitting
+                         * a marker while processing the compressed data
+                         * segment is legal in arithmetic coding.
+                         * The convention is to supply zero data
+                         * then until decoding is complete.
+                         */
+                        cinfo->unread_marker = data;
+                        data = 0;
+                    }
+                }
+            }
+            e->c = (e->c << 8) | data; /* insert data into C register */
+            if ((e->ct += 8) < 0)	 /* update bit shift counter */
+                /* Need more initial bytes */
+                if (++e->ct == 0)
+                    /* Got 2 initial bytes -> re-init A and exit loop */
+                {
+                    e->a = 0x8000L;    /* => e->a = 0x10000L after loop exit */
+                }
+        }
+        e->a <<= 1;
+    }
+
+    /* Fetch values from our compact representation of Table D.2:
+     * Qe values and probability estimation state machine
+     */
+    sv = *st;
+    qe = jpeg_aritab[sv & 0x7F];	/* => Qe_Value */
+    nl = qe & 0xFF;
+    qe >>= 8;	/* Next_Index_LPS + Switch_MPS */
+    nm = qe & 0xFF;
+    qe >>= 8;	/* Next_Index_MPS */
+
+    /* Decode & estimation procedures per sections D.2.4 & D.2.5 */
+    temp = e->a - qe;
+    e->a = temp;
+    temp <<= e->ct;
+    if (e->c >= temp)
+    {
+        e->c -= temp;
+        /* Conditional LPS (less probable symbol) exchange */
+        if (e->a < qe)
+        {
+            e->a = qe;
+            *st = (sv & 0x80) ^ nm;	/* Estimate_after_MPS */
+        }
+        else
+        {
+            e->a = qe;
+            *st = (sv & 0x80) ^ nl;	/* Estimate_after_LPS */
+            sv ^= 0x80;		/* Exchange LPS/MPS */
+        }
+    }
+    else if (e->a < 0x8000L)
+    {
+        /* Conditional MPS (more probable symbol) exchange */
+        if (e->a < qe)
+        {
+            *st = (sv & 0x80) ^ nl;	/* Estimate_after_LPS */
+            sv ^= 0x80;		/* Exchange LPS/MPS */
+        }
+        else
+        {
+            *st = (sv & 0x80) ^ nm;	/* Estimate_after_MPS */
+        }
+    }
+
+    return sv >> 7;
+}
+
+
+/*
+ * Check for a restart marker & resynchronize decoder.
+ */
+
+LOCAL(void)
+process_restart (j_decompress_ptr cinfo)
+{
+    arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
+    int ci;
+    jpeg_component_info * compptr;
+
+    /* Advance past the RSTn marker */
+    if (! (*cinfo->marker->read_restart_marker) (cinfo))
+    {
+        ERREXIT(cinfo, JERR_CANT_SUSPEND);
+    }
+
+    /* Re-initialize statistics areas */
+    for (ci = 0; ci < cinfo->comps_in_scan; ci++)
+    {
+        compptr = cinfo->cur_comp_info[ci];
+        if (! cinfo->progressive_mode || (cinfo->Ss == 0 && cinfo->Ah == 0))
+        {
+            MEMZERO(entropy->dc_stats[compptr->dc_tbl_no], DC_STAT_BINS);
+            /* Reset DC predictions to 0 */
+            entropy->last_dc_val[ci] = 0;
+            entropy->dc_context[ci] = 0;
+        }
+        if ((! cinfo->progressive_mode && cinfo->lim_Se) ||
+                (cinfo->progressive_mode && cinfo->Ss))
+        {
+            MEMZERO(entropy->ac_stats[compptr->ac_tbl_no], AC_STAT_BINS);
+        }
+    }
+
+    /* Reset arithmetic decoding variables */
+    entropy->c = 0;
+    entropy->a = 0;
+    entropy->ct = -16;	/* force reading 2 initial bytes to fill C */
+
+    /* Reset restart counter */
+    entropy->restarts_to_go = cinfo->restart_interval;
+}
+
+
+/*
+ * Arithmetic MCU decoding.
+ * Each of these routines decodes and returns one MCU's worth of
+ * arithmetic-compressed coefficients.
+ * The coefficients are reordered from zigzag order into natural array order,
+ * but are not dequantized.
+ *
+ * The i'th block of the MCU is stored into the block pointed to by
+ * MCU_data[i].  WE ASSUME THIS AREA IS INITIALLY ZEROED BY THE CALLER.
+ */
+
+/*
+ * MCU decoding for DC initial scan (either spectral selection,
+ * or first pass of successive approximation).
+ */
+
+METHODDEF(boolean)
+decode_mcu_DC_first (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
+{
+    arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
+    JBLOCKROW block;
+    unsigned char *st;
+    int blkn, ci, tbl, sign;
+    int v, m;
+
+    /* Process restart marker if needed */
+    if (cinfo->restart_interval)
+    {
+        if (entropy->restarts_to_go == 0)
+        {
+            process_restart(cinfo);
+        }
+        entropy->restarts_to_go--;
+    }
+
+    if (entropy->ct == -1)
+    {
+        return TRUE;    /* if error do nothing */
+    }
+
+    /* Outer loop handles each block in the MCU */
+
+    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++)
+    {
+        block = MCU_data[blkn];
+        ci = cinfo->MCU_membership[blkn];
+        tbl = cinfo->cur_comp_info[ci]->dc_tbl_no;
+
+        /* Sections F.2.4.1 & F.1.4.4.1: Decoding of DC coefficients */
+
+        /* Table F.4: Point to statistics bin S0 for DC coefficient coding */
+        st = entropy->dc_stats[tbl] + entropy->dc_context[ci];
+
+        /* Figure F.19: Decode_DC_DIFF */
+        if (arith_decode(cinfo, st) == 0)
+        {
+            entropy->dc_context[ci] = 0;
+        }
+        else
+        {
+            /* Figure F.21: Decoding nonzero value v */
+            /* Figure F.22: Decoding the sign of v */
+            sign = arith_decode(cinfo, st + 1);
+            st += 2;
+            st += sign;
+            /* Figure F.23: Decoding the magnitude category of v */
+            if ((m = arith_decode(cinfo, st)) != 0)
+            {
+                st = entropy->dc_stats[tbl] + 20;	/* Table F.4: X1 = 20 */
+                while (arith_decode(cinfo, st))
+                {
+                    if ((m <<= 1) == 0x8000)
+                    {
+                        WARNMS(cinfo, JWRN_ARITH_BAD_CODE);
+                        entropy->ct = -1;			/* magnitude overflow */
+                        return TRUE;
+                    }
+                    st += 1;
+                }
+            }
+            /* Section F.1.4.4.1.2: Establish dc_context conditioning category */
+            if (m < (int) ((1L << cinfo->arith_dc_L[tbl]) >> 1))
+            {
+                entropy->dc_context[ci] = 0;    /* zero diff category */
+            }
+            else if (m > (int) ((1L << cinfo->arith_dc_U[tbl]) >> 1))
+            {
+                entropy->dc_context[ci] = 12 + (sign * 4);    /* large diff category */
+            }
+            else
+            {
+                entropy->dc_context[ci] = 4 + (sign * 4);    /* small diff category */
+            }
+            v = m;
+            /* Figure F.24: Decoding the magnitude bit pattern of v */
+            st += 14;
+            while (m >>= 1)
+                if (arith_decode(cinfo, st))
+                {
+                    v |= m;
+                }
+            v += 1;
+            if (sign)
+            {
+                v = -v;
+            }
+            entropy->last_dc_val[ci] += v;
+        }
+
+        /* Scale and output the DC coefficient (assumes jpeg_natural_order[0]=0) */
+        (*block)[0] = (JCOEF) (entropy->last_dc_val[ci] << cinfo->Al);
+    }
+
+    return TRUE;
+}
+
+
+/*
+ * MCU decoding for AC initial scan (either spectral selection,
+ * or first pass of successive approximation).
+ */
+
+METHODDEF(boolean)
+decode_mcu_AC_first (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
+{
+    arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
+    JBLOCKROW block;
+    unsigned char *st;
+    int tbl, sign, k;
+    int v, m;
+    const int * natural_order;
+
+    /* Process restart marker if needed */
+    if (cinfo->restart_interval)
+    {
+        if (entropy->restarts_to_go == 0)
+        {
+            process_restart(cinfo);
+        }
+        entropy->restarts_to_go--;
+    }
+
+    if (entropy->ct == -1)
+    {
+        return TRUE;    /* if error do nothing */
+    }
+
+    natural_order = cinfo->natural_order;
+
+    /* There is always only one block per MCU */
+    block = MCU_data[0];
+    tbl = cinfo->cur_comp_info[0]->ac_tbl_no;
+
+    /* Sections F.2.4.2 & F.1.4.4.2: Decoding of AC coefficients */
+
+    /* Figure F.20: Decode_AC_coefficients */
+    for (k = cinfo->Ss; k <= cinfo->Se; k++)
+    {
+        st = entropy->ac_stats[tbl] + 3 * (k - 1);
+        if (arith_decode(cinfo, st))
+        {
+            break;    /* EOB flag */
+        }
+        while (arith_decode(cinfo, st + 1) == 0)
+        {
+            st += 3;
+            k++;
+            if (k > cinfo->Se)
+            {
+                WARNMS(cinfo, JWRN_ARITH_BAD_CODE);
+                entropy->ct = -1;			/* spectral overflow */
+                return TRUE;
+            }
+        }
+        /* Figure F.21: Decoding nonzero value v */
+        /* Figure F.22: Decoding the sign of v */
+        sign = arith_decode(cinfo, entropy->fixed_bin);
+        st += 2;
+        /* Figure F.23: Decoding the magnitude category of v */
+        if ((m = arith_decode(cinfo, st)) != 0)
+        {
+            if (arith_decode(cinfo, st))
+            {
+                m <<= 1;
+                st = entropy->ac_stats[tbl] +
+                     (k <= cinfo->arith_ac_K[tbl] ? 189 : 217);
+                while (arith_decode(cinfo, st))
+                {
+                    if ((m <<= 1) == 0x8000)
+                    {
+                        WARNMS(cinfo, JWRN_ARITH_BAD_CODE);
+                        entropy->ct = -1;			/* magnitude overflow */
+                        return TRUE;
+                    }
+                    st += 1;
+                }
+            }
+        }
+        v = m;
+        /* Figure F.24: Decoding the magnitude bit pattern of v */
+        st += 14;
+        while (m >>= 1)
+            if (arith_decode(cinfo, st))
+            {
+                v |= m;
+            }
+        v += 1;
+        if (sign)
+        {
+            v = -v;
+        }
+        /* Scale and output coefficient in natural (dezigzagged) order */
+        (*block)[natural_order[k]] = (JCOEF) (v << cinfo->Al);
+    }
+
+    return TRUE;
+}
+
+
+/*
+ * MCU decoding for DC successive approximation refinement scan.
+ */
+
+METHODDEF(boolean)
+decode_mcu_DC_refine (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
+{
+    arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
+    unsigned char *st;
+    int p1, blkn;
+
+    /* Process restart marker if needed */
+    if (cinfo->restart_interval)
+    {
+        if (entropy->restarts_to_go == 0)
+        {
+            process_restart(cinfo);
+        }
+        entropy->restarts_to_go--;
+    }
+
+    st = entropy->fixed_bin;	/* use fixed probability estimation */
+    p1 = 1 << cinfo->Al;		/* 1 in the bit position being coded */
+
+    /* Outer loop handles each block in the MCU */
+
+    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++)
+    {
+        /* Encoded data is simply the next bit of the two's-complement DC value */
+        if (arith_decode(cinfo, st))
+        {
+            MCU_data[blkn][0][0] |= p1;
+        }
+    }
+
+    return TRUE;
+}
+
+
+/*
+ * MCU decoding for AC successive approximation refinement scan.
+ */
+
+METHODDEF(boolean)
+decode_mcu_AC_refine (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
+{
+    arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
+    JBLOCKROW block;
+    JCOEFPTR thiscoef;
+    unsigned char *st;
+    int tbl, k, kex;
+    int p1, m1;
+    const int * natural_order;
+
+    /* Process restart marker if needed */
+    if (cinfo->restart_interval)
+    {
+        if (entropy->restarts_to_go == 0)
+        {
+            process_restart(cinfo);
+        }
+        entropy->restarts_to_go--;
+    }
+
+    if (entropy->ct == -1)
+    {
+        return TRUE;    /* if error do nothing */
+    }
+    natural_order = cinfo->natural_order;
+
+    /* There is always only one block per MCU */
+    block = MCU_data[0];
+    tbl = cinfo->cur_comp_info[0]->ac_tbl_no;
+
+    p1 = 1 << cinfo->Al;		/* 1 in the bit position being coded */
+    m1 = (-1) << cinfo->Al;	/* -1 in the bit position being coded */
+
+    /* Establish EOBx (previous stage end-of-block) index */
+    for (kex = cinfo->Se; kex > 0; kex--)
+        if ((*block)[natural_order[kex]])
+        {
+            break;
+        }
+
+    for (k = cinfo->Ss; k <= cinfo->Se; k++)
+    {
+        st = entropy->ac_stats[tbl] + 3 * (k - 1);
+        if (k > kex)
+            if (arith_decode(cinfo, st))
+            {
+                break;    /* EOB flag */
+            }
+        for (;;)
+        {
+            thiscoef = *block + natural_order[k];
+            if (*thiscoef)  				/* previously nonzero coef */
+            {
+                if (arith_decode(cinfo, st + 2))
+                {
+                    if (*thiscoef < 0)
+                    {
+                        *thiscoef += m1;
+                    }
+                    else
+                    {
+                        *thiscoef += p1;
+                    }
+                }
+                break;
+            }
+            if (arith_decode(cinfo, st + 1))  	/* newly nonzero coef */
+            {
+                if (arith_decode(cinfo, entropy->fixed_bin))
+                {
+                    *thiscoef = m1;
+                }
+                else
+                {
+                    *thiscoef = p1;
+                }
+                break;
+            }
+            st += 3;
+            k++;
+            if (k > cinfo->Se)
+            {
+                WARNMS(cinfo, JWRN_ARITH_BAD_CODE);
+                entropy->ct = -1;			/* spectral overflow */
+                return TRUE;
+            }
+        }
+    }
+
+    return TRUE;
+}
+
+
+/*
+ * Decode one MCU's worth of arithmetic-compressed coefficients.
+ */
+
+METHODDEF(boolean)
+decode_mcu (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
+{
+    arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
+    jpeg_component_info * compptr;
+    JBLOCKROW block;
+    unsigned char *st;
+    int blkn, ci, tbl, sign, k;
+    int v, m;
+    const int * natural_order;
+
+    /* Process restart marker if needed */
+    if (cinfo->restart_interval)
+    {
+        if (entropy->restarts_to_go == 0)
+        {
+            process_restart(cinfo);
+        }
+        entropy->restarts_to_go--;
+    }
+
+    if (entropy->ct == -1)
+    {
+        return TRUE;    /* if error do nothing */
+    }
+
+    natural_order = cinfo->natural_order;
+
+    /* Outer loop handles each block in the MCU */
+
+    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++)
+    {
+        block = MCU_data[blkn];
+        ci = cinfo->MCU_membership[blkn];
+        compptr = cinfo->cur_comp_info[ci];
+
+        /* Sections F.2.4.1 & F.1.4.4.1: Decoding of DC coefficients */
+
+        tbl = compptr->dc_tbl_no;
+
+        /* Table F.4: Point to statistics bin S0 for DC coefficient coding */
+        st = entropy->dc_stats[tbl] + entropy->dc_context[ci];
+
+        /* Figure F.19: Decode_DC_DIFF */
+        if (arith_decode(cinfo, st) == 0)
+        {
+            entropy->dc_context[ci] = 0;
+        }
+        else
+        {
+            /* Figure F.21: Decoding nonzero value v */
+            /* Figure F.22: Decoding the sign of v */
+            sign = arith_decode(cinfo, st + 1);
+            st += 2;
+            st += sign;
+            /* Figure F.23: Decoding the magnitude category of v */
+            if ((m = arith_decode(cinfo, st)) != 0)
+            {
+                st = entropy->dc_stats[tbl] + 20;	/* Table F.4: X1 = 20 */
+                while (arith_decode(cinfo, st))
+                {
+                    if ((m <<= 1) == 0x8000)
+                    {
+                        WARNMS(cinfo, JWRN_ARITH_BAD_CODE);
+                        entropy->ct = -1;			/* magnitude overflow */
+                        return TRUE;
+                    }
+                    st += 1;
+                }
+            }
+            /* Section F.1.4.4.1.2: Establish dc_context conditioning category */
+            if (m < (int) ((1L << cinfo->arith_dc_L[tbl]) >> 1))
+            {
+                entropy->dc_context[ci] = 0;    /* zero diff category */
+            }
+            else if (m > (int) ((1L << cinfo->arith_dc_U[tbl]) >> 1))
+            {
+                entropy->dc_context[ci] = 12 + (sign * 4);    /* large diff category */
+            }
+            else
+            {
+                entropy->dc_context[ci] = 4 + (sign * 4);    /* small diff category */
+            }
+            v = m;
+            /* Figure F.24: Decoding the magnitude bit pattern of v */
+            st += 14;
+            while (m >>= 1)
+                if (arith_decode(cinfo, st))
+                {
+                    v |= m;
+                }
+            v += 1;
+            if (sign)
+            {
+                v = -v;
+            }
+            entropy->last_dc_val[ci] += v;
+        }
+
+        (*block)[0] = (JCOEF) entropy->last_dc_val[ci];
+
+        /* Sections F.2.4.2 & F.1.4.4.2: Decoding of AC coefficients */
+
+        tbl = compptr->ac_tbl_no;
+
+        /* Figure F.20: Decode_AC_coefficients */
+        for (k = 1; k <= cinfo->lim_Se; k++)
+        {
+            st = entropy->ac_stats[tbl] + 3 * (k - 1);
+            if (arith_decode(cinfo, st))
+            {
+                break;    /* EOB flag */
+            }
+            while (arith_decode(cinfo, st + 1) == 0)
+            {
+                st += 3;
+                k++;
+                if (k > cinfo->lim_Se)
+                {
+                    WARNMS(cinfo, JWRN_ARITH_BAD_CODE);
+                    entropy->ct = -1;			/* spectral overflow */
+                    return TRUE;
+                }
+            }
+            /* Figure F.21: Decoding nonzero value v */
+            /* Figure F.22: Decoding the sign of v */
+            sign = arith_decode(cinfo, entropy->fixed_bin);
+            st += 2;
+            /* Figure F.23: Decoding the magnitude category of v */
+            if ((m = arith_decode(cinfo, st)) != 0)
+            {
+                if (arith_decode(cinfo, st))
+                {
+                    m <<= 1;
+                    st = entropy->ac_stats[tbl] +
+                         (k <= cinfo->arith_ac_K[tbl] ? 189 : 217);
+                    while (arith_decode(cinfo, st))
+                    {
+                        if ((m <<= 1) == 0x8000)
+                        {
+                            WARNMS(cinfo, JWRN_ARITH_BAD_CODE);
+                            entropy->ct = -1;			/* magnitude overflow */
+                            return TRUE;
+                        }
+                        st += 1;
+                    }
+                }
+            }
+            v = m;
+            /* Figure F.24: Decoding the magnitude bit pattern of v */
+            st += 14;
+            while (m >>= 1)
+                if (arith_decode(cinfo, st))
+                {
+                    v |= m;
+                }
+            v += 1;
+            if (sign)
+            {
+                v = -v;
+            }
+            (*block)[natural_order[k]] = (JCOEF) v;
+        }
+    }
+
+    return TRUE;
+}
+
+
+/*
+ * Initialize for an arithmetic-compressed scan.
+ */
+
+METHODDEF(void)
+start_pass (j_decompress_ptr cinfo)
+{
+    arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
+    int ci, tbl;
+    jpeg_component_info * compptr;
+
+    if (cinfo->progressive_mode)
+    {
+        /* Validate progressive scan parameters */
+        if (cinfo->Ss == 0)
+        {
+            if (cinfo->Se != 0)
+            {
+                goto bad;
+            }
+        }
+        else
+        {
+            /* need not check Ss/Se < 0 since they came from unsigned bytes */
+            if (cinfo->Se < cinfo->Ss || cinfo->Se > cinfo->lim_Se)
+            {
+                goto bad;
+            }
+            /* AC scans may have only one component */
+            if (cinfo->comps_in_scan != 1)
+            {
+                goto bad;
+            }
+        }
+        if (cinfo->Ah != 0)
+        {
+            /* Successive approximation refinement scan: must have Al = Ah-1. */
+            if (cinfo->Ah-1 != cinfo->Al)
+            {
+                goto bad;
+            }
+        }
+        if (cinfo->Al > 13)  	/* need not check for < 0 */
+        {
+bad:
+            ERREXIT4(cinfo, JERR_BAD_PROGRESSION,
+                     cinfo->Ss, cinfo->Se, cinfo->Ah, cinfo->Al);
+        }
+        /* Update progression status, and verify that scan order is legal.
+         * Note that inter-scan inconsistencies are treated as warnings
+         * not fatal errors ... not clear if this is right way to behave.
+         */
+        for (ci = 0; ci < cinfo->comps_in_scan; ci++)
+        {
+            int coefi, cindex = cinfo->cur_comp_info[ci]->component_index;
+            int *coef_bit_ptr = & cinfo->coef_bits[cindex][0];
+            if (cinfo->Ss && coef_bit_ptr[0] < 0) /* AC without prior DC scan */
+            {
+                WARNMS2(cinfo, JWRN_BOGUS_PROGRESSION, cindex, 0);
+            }
+            for (coefi = cinfo->Ss; coefi <= cinfo->Se; coefi++)
+            {
+                int expected = (coef_bit_ptr[coefi] < 0) ? 0 : coef_bit_ptr[coefi];
+                if (cinfo->Ah != expected)
+                {
+                    WARNMS2(cinfo, JWRN_BOGUS_PROGRESSION, cindex, coefi);
+                }
+                coef_bit_ptr[coefi] = cinfo->Al;
+            }
+        }
+        /* Select MCU decoding routine */
+        if (cinfo->Ah == 0)
+        {
+            if (cinfo->Ss == 0)
+            {
+                entropy->pub.decode_mcu = decode_mcu_DC_first;
+            }
+            else
+            {
+                entropy->pub.decode_mcu = decode_mcu_AC_first;
+            }
+        }
+        else
+        {
+            if (cinfo->Ss == 0)
+            {
+                entropy->pub.decode_mcu = decode_mcu_DC_refine;
+            }
+            else
+            {
+                entropy->pub.decode_mcu = decode_mcu_AC_refine;
+            }
+        }
+    }
+    else
+    {
+        /* Check that the scan parameters Ss, Se, Ah/Al are OK for sequential JPEG.
+         * This ought to be an error condition, but we make it a warning.
+         */
+        if (cinfo->Ss != 0 || cinfo->Ah != 0 || cinfo->Al != 0 ||
+                (cinfo->Se < DCTSIZE2 && cinfo->Se != cinfo->lim_Se))
+        {
+            WARNMS(cinfo, JWRN_NOT_SEQUENTIAL);
+        }
+        /* Select MCU decoding routine */
+        entropy->pub.decode_mcu = decode_mcu;
+    }
+
+    /* Allocate & initialize requested statistics areas */
+    for (ci = 0; ci < cinfo->comps_in_scan; ci++)
+    {
+        compptr = cinfo->cur_comp_info[ci];
+        if (! cinfo->progressive_mode || (cinfo->Ss == 0 && cinfo->Ah == 0))
+        {
+            tbl = compptr->dc_tbl_no;
+            if (tbl < 0 || tbl >= NUM_ARITH_TBLS)
+            {
+                ERREXIT1(cinfo, JERR_NO_ARITH_TABLE, tbl);
+            }
+            if (entropy->dc_stats[tbl] == NULL)
+                entropy->dc_stats[tbl] = (unsigned char *) (*cinfo->mem->alloc_small)
+                                         ((j_common_ptr) cinfo, JPOOL_IMAGE, DC_STAT_BINS);
+            MEMZERO(entropy->dc_stats[tbl], DC_STAT_BINS);
+            /* Initialize DC predictions to 0 */
+            entropy->last_dc_val[ci] = 0;
+            entropy->dc_context[ci] = 0;
+        }
+        if ((! cinfo->progressive_mode && cinfo->lim_Se) ||
+                (cinfo->progressive_mode && cinfo->Ss))
+        {
+            tbl = compptr->ac_tbl_no;
+            if (tbl < 0 || tbl >= NUM_ARITH_TBLS)
+            {
+                ERREXIT1(cinfo, JERR_NO_ARITH_TABLE, tbl);
+            }
+            if (entropy->ac_stats[tbl] == NULL)
+                entropy->ac_stats[tbl] = (unsigned char *) (*cinfo->mem->alloc_small)
+                                         ((j_common_ptr) cinfo, JPOOL_IMAGE, AC_STAT_BINS);
+            MEMZERO(entropy->ac_stats[tbl], AC_STAT_BINS);
+        }
+    }
+
+    /* Initialize arithmetic decoding variables */
+    entropy->c = 0;
+    entropy->a = 0;
+    entropy->ct = -16;	/* force reading 2 initial bytes to fill C */
+
+    /* Initialize restart counter */
+    entropy->restarts_to_go = cinfo->restart_interval;
+}
+
+
+/*
+ * Module initialization routine for arithmetic entropy decoding.
+ */
+
+GLOBAL(void)
+jinit_arith_decoder (j_decompress_ptr cinfo)
+{
+    arith_entropy_ptr entropy;
+    int i;
+
+    entropy = (arith_entropy_ptr)
+              (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
+                                          SIZEOF(arith_entropy_decoder));
+    cinfo->entropy = (struct jpeg_entropy_decoder *) entropy;
+    entropy->pub.start_pass = start_pass;
+
+    /* Mark tables unallocated */
+    for (i = 0; i < NUM_ARITH_TBLS; i++)
+    {
+        entropy->dc_stats[i] = NULL;
+        entropy->ac_stats[i] = NULL;
+    }
+
+    /* Initialize index for fixed probability estimation */
+    entropy->fixed_bin[0] = 113;
+
+    if (cinfo->progressive_mode)
+    {
+        /* Create progression status table */
+        int *coef_bit_ptr, ci;
+        cinfo->coef_bits = (int (*)[DCTSIZE2])
+                           (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
+                                   cinfo->num_components*DCTSIZE2*SIZEOF(int));
+        coef_bit_ptr = & cinfo->coef_bits[0][0];
+        for (ci = 0; ci < cinfo->num_components; ci++)
+            for (i = 0; i < DCTSIZE2; i++)
+            {
+                *coef_bit_ptr++ = -1;
+            }
+    }
+}
diff -NEaurb neo/renderer/jpeg-8c/jdatadst.c neo/renderer/jpeg-8c/jdatadst.c
--- neo/renderer/jpeg-8c/jdatadst.c	1970-01-01 00:00:00 +0000
+++ neo/renderer/jpeg-8c/jdatadst.c	2012-11-17 01:20:40 +0000
@@ -0,0 +1,287 @@
+/*
+ * jdatadst.c
+ *
+ * Copyright (C) 1994-1996, Thomas G. Lane.
+ * Modified 2009 by Guido Vollbeding.
+ * This file is part of the Independent JPEG Group's software.
+ * For conditions of distribution and use, see the accompanying README file.
+ *
+ * This file contains compression data destination routines for the case of
+ * emitting JPEG data to memory or to a file (or any stdio stream).
+ * While these routines are sufficient for most applications,
+ * some will want to use a different destination manager.
+ * IMPORTANT: we assume that fwrite() will correctly transcribe an array of
+ * JOCTETs into 8-bit-wide elements on external storage.  If char is wider
+ * than 8 bits on your machine, you may need to do some tweaking.
+ */
+
+/* this is not a core library module, so it doesn't define JPEG_INTERNALS */
+#include "jinclude.h"
+#include "jpeglib.h"
+#include "jerror.h"
+
+#ifndef HAVE_STDLIB_H		/* <stdlib.h> should declare malloc(),free() */
+extern void * malloc JPP((size_t size));
+extern void free JPP((void *ptr));
+#endif
+
+
+/* Expanded data destination object for stdio output */
+
+typedef struct
+{
+    struct jpeg_destination_mgr pub; /* public fields */
+
+    FILE * outfile;		/* target stream */
+    JOCTET * buffer;		/* start of buffer */
+} my_destination_mgr;
+
+typedef my_destination_mgr * my_dest_ptr;
+
+#define OUTPUT_BUF_SIZE  4096	/* choose an efficiently fwrite'able size */
+
+
+/* Expanded data destination object for memory output */
+
+typedef struct
+{
+    struct jpeg_destination_mgr pub; /* public fields */
+
+    unsigned char ** outbuffer;	/* target buffer */
+    unsigned long * outsize;
+    unsigned char * newbuffer;	/* newly allocated buffer */
+    JOCTET * buffer;		/* start of buffer */
+    size_t bufsize;
+} my_mem_destination_mgr;
+
+typedef my_mem_destination_mgr * my_mem_dest_ptr;
+
+
+/*
+ * Initialize destination --- called by jpeg_start_compress
+ * before any data is actually written.
+ */
+
+METHODDEF(void)
+init_destination (j_compress_ptr cinfo)
+{
+    my_dest_ptr dest = (my_dest_ptr) cinfo->dest;
+
+    /* Allocate the output buffer --- it will be released when done with image */
+    dest->buffer = (JOCTET *)
+                   (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
+                           OUTPUT_BUF_SIZE * SIZEOF(JOCTET));
+
+    dest->pub.next_output_byte = dest->buffer;
+    dest->pub.free_in_buffer = OUTPUT_BUF_SIZE;
+}
+
+METHODDEF(void)
+init_mem_destination (j_compress_ptr cinfo)
+{
+    /* no work necessary here */
+}
+
+
+/*
+ * Empty the output buffer --- called whenever buffer fills up.
+ *
+ * In typical applications, this should write the entire output buffer
+ * (ignoring the current state of next_output_byte & free_in_buffer),
+ * reset the pointer & count to the start of the buffer, and return TRUE
+ * indicating that the buffer has been dumped.
+ *
+ * In applications that need to be able to suspend compression due to output
+ * overrun, a FALSE return indicates that the buffer cannot be emptied now.
+ * In this situation, the compressor will return to its caller (possibly with
+ * an indication that it has not accepted all the supplied scanlines).  The
+ * application should resume compression after it has made more room in the
+ * output buffer.  Note that there are substantial restrictions on the use of
+ * suspension --- see the documentation.
+ *
+ * When suspending, the compressor will back up to a convenient restart point
+ * (typically the start of the current MCU). next_output_byte & free_in_buffer
+ * indicate where the restart point will be if the current call returns FALSE.
+ * Data beyond this point will be regenerated after resumption, so do not
+ * write it out when emptying the buffer externally.
+ */
+
+METHODDEF(boolean)
+empty_output_buffer (j_compress_ptr cinfo)
+{
+    my_dest_ptr dest = (my_dest_ptr) cinfo->dest;
+
+    if (JFWRITE(dest->outfile, dest->buffer, OUTPUT_BUF_SIZE) !=
+            (size_t) OUTPUT_BUF_SIZE)
+    {
+        ERREXIT(cinfo, JERR_FILE_WRITE);
+    }
+
+    dest->pub.next_output_byte = dest->buffer;
+    dest->pub.free_in_buffer = OUTPUT_BUF_SIZE;
+
+    return TRUE;
+}
+
+METHODDEF(boolean)
+empty_mem_output_buffer (j_compress_ptr cinfo)
+{
+    size_t nextsize;
+    JOCTET * nextbuffer;
+    my_mem_dest_ptr dest = (my_mem_dest_ptr) cinfo->dest;
+
+    /* Try to allocate new buffer with double size */
+    nextsize = dest->bufsize * 2;
+    nextbuffer = malloc(nextsize);
+
+    if (nextbuffer == NULL)
+    {
+        ERREXIT1(cinfo, JERR_OUT_OF_MEMORY, 10);
+    }
+
+    MEMCOPY(nextbuffer, dest->buffer, dest->bufsize);
+
+    if (dest->newbuffer != NULL)
+    {
+        free(dest->newbuffer);
+    }
+
+    dest->newbuffer = nextbuffer;
+
+    dest->pub.next_output_byte = nextbuffer + dest->bufsize;
+    dest->pub.free_in_buffer = dest->bufsize;
+
+    dest->buffer = nextbuffer;
+    dest->bufsize = nextsize;
+
+    return TRUE;
+}
+
+
+/*
+ * Terminate destination --- called by jpeg_finish_compress
+ * after all data has been written.  Usually needs to flush buffer.
+ *
+ * NB: *not* called by jpeg_abort or jpeg_destroy; surrounding
+ * application must deal with any cleanup that should happen even
+ * for error exit.
+ */
+
+METHODDEF(void)
+term_destination (j_compress_ptr cinfo)
+{
+    my_dest_ptr dest = (my_dest_ptr) cinfo->dest;
+    size_t datacount = OUTPUT_BUF_SIZE - dest->pub.free_in_buffer;
+
+    /* Write any data remaining in the buffer */
+    if (datacount > 0)
+    {
+        if (JFWRITE(dest->outfile, dest->buffer, datacount) != datacount)
+        {
+            ERREXIT(cinfo, JERR_FILE_WRITE);
+        }
+    }
+    fflush(dest->outfile);
+    /* Make sure we wrote the output file OK */
+    if (ferror(dest->outfile))
+    {
+        ERREXIT(cinfo, JERR_FILE_WRITE);
+    }
+}
+
+METHODDEF(void)
+term_mem_destination (j_compress_ptr cinfo)
+{
+    my_mem_dest_ptr dest = (my_mem_dest_ptr) cinfo->dest;
+
+    *dest->outbuffer = dest->buffer;
+    *dest->outsize = dest->bufsize - dest->pub.free_in_buffer;
+}
+
+
+/*
+ * Prepare for output to a stdio stream.
+ * The caller must have already opened the stream, and is responsible
+ * for closing it after finishing compression.
+ */
+
+GLOBAL(void)
+jpeg_stdio_dest (j_compress_ptr cinfo, FILE * outfile)
+{
+    my_dest_ptr dest;
+
+    /* The destination object is made permanent so that multiple JPEG images
+     * can be written to the same file without re-executing jpeg_stdio_dest.
+     * This makes it dangerous to use this manager and a different destination
+     * manager serially with the same JPEG object, because their private object
+     * sizes may be different.  Caveat programmer.
+     */
+    if (cinfo->dest == NULL)  	/* first time for this JPEG object? */
+    {
+        cinfo->dest = (struct jpeg_destination_mgr *)
+                      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
+                              SIZEOF(my_destination_mgr));
+    }
+
+    dest = (my_dest_ptr) cinfo->dest;
+    dest->pub.init_destination = init_destination;
+    dest->pub.empty_output_buffer = empty_output_buffer;
+    dest->pub.term_destination = term_destination;
+    dest->outfile = outfile;
+}
+
+
+/*
+ * Prepare for output to a memory buffer.
+ * The caller may supply an own initial buffer with appropriate size.
+ * Otherwise, or when the actual data output exceeds the given size,
+ * the library adapts the buffer size as necessary.
+ * The standard library functions malloc/free are used for allocating
+ * larger memory, so the buffer is available to the application after
+ * finishing compression, and then the application is responsible for
+ * freeing the requested memory.
+ */
+
+GLOBAL(void)
+jpeg_mem_dest (j_compress_ptr cinfo,
+               unsigned char ** outbuffer, unsigned long * outsize)
+{
+    my_mem_dest_ptr dest;
+
+    if (outbuffer == NULL || outsize == NULL)	/* sanity check */
+    {
+        ERREXIT(cinfo, JERR_BUFFER_SIZE);
+    }
+
+    /* The destination object is made permanent so that multiple JPEG images
+     * can be written to the same buffer without re-executing jpeg_mem_dest.
+     */
+    if (cinfo->dest == NULL)  	/* first time for this JPEG object? */
+    {
+        cinfo->dest = (struct jpeg_destination_mgr *)
+                      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
+                              SIZEOF(my_mem_destination_mgr));
+    }
+
+    dest = (my_mem_dest_ptr) cinfo->dest;
+    dest->pub.init_destination = init_mem_destination;
+    dest->pub.empty_output_buffer = empty_mem_output_buffer;
+    dest->pub.term_destination = term_mem_destination;
+    dest->outbuffer = outbuffer;
+    dest->outsize = outsize;
+    dest->newbuffer = NULL;
+
+    if (*outbuffer == NULL || *outsize == 0)
+    {
+        /* Allocate initial buffer */
+        dest->newbuffer = *outbuffer = malloc(OUTPUT_BUF_SIZE);
+        if (dest->newbuffer == NULL)
+        {
+            ERREXIT1(cinfo, JERR_OUT_OF_MEMORY, 10);
+        }
+        *outsize = OUTPUT_BUF_SIZE;
+    }
+
+    dest->pub.next_output_byte = dest->buffer = *outbuffer;
+    dest->pub.free_in_buffer = dest->bufsize = *outsize;
+}
diff -NEaurb neo/renderer/jpeg-8c/jdatasrc.c neo/renderer/jpeg-8c/jdatasrc.c
--- neo/renderer/jpeg-8c/jdatasrc.c	1970-01-01 00:00:00 +0000
+++ neo/renderer/jpeg-8c/jdatasrc.c	2012-11-17 01:20:41 +0000
@@ -0,0 +1,284 @@
+/*
+ * jdatasrc.c
+ *
+ * Copyright (C) 1994-1996, Thomas G. Lane.
+ * Modified 2009-2010 by Guido Vollbeding.
+ * This file is part of the Independent JPEG Group's software.
+ * For conditions of distribution and use, see the accompanying README file.
+ *
+ * This file contains decompression data source routines for the case of
+ * reading JPEG data from memory or from a file (or any stdio stream).
+ * While these routines are sufficient for most applications,
+ * some will want to use a different source manager.
+ * IMPORTANT: we assume that fread() will correctly transcribe an array of
+ * JOCTETs from 8-bit-wide elements on external storage.  If char is wider
+ * than 8 bits on your machine, you may need to do some tweaking.
+ */
+
+/* this is not a core library module, so it doesn't define JPEG_INTERNALS */
+#include "jinclude.h"
+#include "jpeglib.h"
+#include "jerror.h"
+
+
+/* Expanded data source object for stdio input */
+
+typedef struct
+{
+    struct jpeg_source_mgr pub;	/* public fields */
+
+    FILE * infile;		/* source stream */
+    JOCTET * buffer;		/* start of buffer */
+    boolean start_of_file;	/* have we gotten any data yet? */
+} my_source_mgr;
+
+typedef my_source_mgr * my_src_ptr;
+
+#define INPUT_BUF_SIZE  4096	/* choose an efficiently fread'able size */
+
+
+/*
+ * Initialize source --- called by jpeg_read_header
+ * before any data is actually read.
+ */
+
+METHODDEF(void)
+init_source (j_decompress_ptr cinfo)
+{
+    my_src_ptr src = (my_src_ptr) cinfo->src;
+
+    /* We reset the empty-input-file flag for each image,
+     * but we don't clear the input buffer.
+     * This is correct behavior for reading a series of images from one source.
+     */
+    src->start_of_file = TRUE;
+}
+
+METHODDEF(void)
+init_mem_source (j_decompress_ptr cinfo)
+{
+    /* no work necessary here */
+}
+
+
+/*
+ * Fill the input buffer --- called whenever buffer is emptied.
+ *
+ * In typical applications, this should read fresh data into the buffer
+ * (ignoring the current state of next_input_byte & bytes_in_buffer),
+ * reset the pointer & count to the start of the buffer, and return TRUE
+ * indicating that the buffer has been reloaded.  It is not necessary to
+ * fill the buffer entirely, only to obtain at least one more byte.
+ *
+ * There is no such thing as an EOF return.  If the end of the file has been
+ * reached, the routine has a choice of ERREXIT() or inserting fake data into
+ * the buffer.  In most cases, generating a warning message and inserting a
+ * fake EOI marker is the best course of action --- this will allow the
+ * decompressor to output however much of the image is there.  However,
+ * the resulting error message is misleading if the real problem is an empty
+ * input file, so we handle that case specially.
+ *
+ * In applications that need to be able to suspend compression due to input
+ * not being available yet, a FALSE return indicates that no more data can be
+ * obtained right now, but more may be forthcoming later.  In this situation,
+ * the decompressor will return to its caller (with an indication of the
+ * number of scanlines it has read, if any).  The application should resume
+ * decompression after it has loaded more data into the input buffer.  Note
+ * that there are substantial restrictions on the use of suspension --- see
+ * the documentation.
+ *
+ * When suspending, the decompressor will back up to a convenient restart point
+ * (typically the start of the current MCU). next_input_byte & bytes_in_buffer
+ * indicate where the restart point will be if the current call returns FALSE.
+ * Data beyond this point must be rescanned after resumption, so move it to
+ * the front of the buffer rather than discarding it.
+ */
+
+METHODDEF(boolean)
+fill_input_buffer (j_decompress_ptr cinfo)
+{
+    my_src_ptr src = (my_src_ptr) cinfo->src;
+    size_t nbytes;
+
+    nbytes = JFREAD(src->infile, src->buffer, INPUT_BUF_SIZE);
+
+    if (nbytes <= 0)
+    {
+        if (src->start_of_file)	/* Treat empty input file as fatal error */
+        {
+            ERREXIT(cinfo, JERR_INPUT_EMPTY);
+        }
+        WARNMS(cinfo, JWRN_JPEG_EOF);
+        /* Insert a fake EOI marker */
+        src->buffer[0] = (JOCTET) 0xFF;
+        src->buffer[1] = (JOCTET) JPEG_EOI;
+        nbytes = 2;
+    }
+
+    src->pub.next_input_byte = src->buffer;
+    src->pub.bytes_in_buffer = nbytes;
+    src->start_of_file = FALSE;
+
+    return TRUE;
+}
+
+METHODDEF(boolean)
+fill_mem_input_buffer (j_decompress_ptr cinfo)
+{
+    static JOCTET mybuffer[4];
+
+    /* The whole JPEG data is expected to reside in the supplied memory
+     * buffer, so any request for more data beyond the given buffer size
+     * is treated as an error.
+     */
+    WARNMS(cinfo, JWRN_JPEG_EOF);
+    /* Insert a fake EOI marker */
+    mybuffer[0] = (JOCTET) 0xFF;
+    mybuffer[1] = (JOCTET) JPEG_EOI;
+
+    cinfo->src->next_input_byte = mybuffer;
+    cinfo->src->bytes_in_buffer = 2;
+
+    return TRUE;
+}
+
+
+/*
+ * Skip data --- used to skip over a potentially large amount of
+ * uninteresting data (such as an APPn marker).
+ *
+ * Writers of suspendable-input applications must note that skip_input_data
+ * is not granted the right to give a suspension return.  If the skip extends
+ * beyond the data currently in the buffer, the buffer can be marked empty so
+ * that the next read will cause a fill_input_buffer call that can suspend.
+ * Arranging for additional bytes to be discarded before reloading the input
+ * buffer is the application writer's problem.
+ */
+
+METHODDEF(void)
+skip_input_data (j_decompress_ptr cinfo, long num_bytes)
+{
+    struct jpeg_source_mgr * src = cinfo->src;
+
+    /* Just a dumb implementation for now.  Could use fseek() except
+     * it doesn't work on pipes.  Not clear that being smart is worth
+     * any trouble anyway --- large skips are infrequent.
+     */
+    if (num_bytes > 0)
+    {
+        while (num_bytes > (long) src->bytes_in_buffer)
+        {
+            num_bytes -= (long) src->bytes_in_buffer;
+            (void) (*src->fill_input_buffer) (cinfo);
+            /* note we assume that fill_input_buffer will never return FALSE,
+             * so suspension need not be handled.
+             */
+        }
+        src->next_input_byte += (size_t) num_bytes;
+        src->bytes_in_buffer -= (size_t) num_bytes;
+    }
+}
+
+
+/*
+ * An additional method that can be provided by data source modules is the
+ * resync_to_restart method for error recovery in the presence of RST markers.
+ * For the moment, this source module just uses the default resync method
+ * provided by the JPEG library.  That method assumes that no backtracking
+ * is possible.
+ */
+
+
+/*
+ * Terminate source --- called by jpeg_finish_decompress
+ * after all data has been read.  Often a no-op.
+ *
+ * NB: *not* called by jpeg_abort or jpeg_destroy; surrounding
+ * application must deal with any cleanup that should happen even
+ * for error exit.
+ */
+
+METHODDEF(void)
+term_source (j_decompress_ptr cinfo)
+{
+    /* no work necessary here */
+}
+
+
+/*
+ * Prepare for input from a stdio stream.
+ * The caller must have already opened the stream, and is responsible
+ * for closing it after finishing decompression.
+ */
+
+GLOBAL(void)
+jpeg_stdio_src (j_decompress_ptr cinfo, FILE * infile)
+{
+    my_src_ptr src;
+
+    /* The source object and input buffer are made permanent so that a series
+     * of JPEG images can be read from the same file by calling jpeg_stdio_src
+     * only before the first one.  (If we discarded the buffer at the end of
+     * one image, we'd likely lose the start of the next one.)
+     * This makes it unsafe to use this manager and a different source
+     * manager serially with the same JPEG object.  Caveat programmer.
+     */
+    if (cinfo->src == NULL)  	/* first time for this JPEG object? */
+    {
+        cinfo->src = (struct jpeg_source_mgr *)
+                     (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
+                             SIZEOF(my_source_mgr));
+        src = (my_src_ptr) cinfo->src;
+        src->buffer = (JOCTET *)
+                      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
+                              INPUT_BUF_SIZE * SIZEOF(JOCTET));
+    }
+
+    src = (my_src_ptr) cinfo->src;
+    src->pub.init_source = init_source;
+    src->pub.fill_input_buffer = fill_input_buffer;
+    src->pub.skip_input_data = skip_input_data;
+    src->pub.resync_to_restart = jpeg_resync_to_restart; /* use default method */
+    src->pub.term_source = term_source;
+    src->infile = infile;
+    src->pub.bytes_in_buffer = 0; /* forces fill_input_buffer on first read */
+    src->pub.next_input_byte = NULL; /* until buffer loaded */
+}
+
+
+/*
+ * Prepare for input from a supplied memory buffer.
+ * The buffer must contain the whole JPEG data.
+ */
+
+GLOBAL(void)
+jpeg_mem_src (j_decompress_ptr cinfo,
+              unsigned char * inbuffer, unsigned long insize)
+{
+    struct jpeg_source_mgr * src;
+
+    if (inbuffer == NULL || insize == 0)	/* Treat empty input as fatal error */
+    {
+        ERREXIT(cinfo, JERR_INPUT_EMPTY);
+    }
+
+    /* The source object is made permanent so that a series of JPEG images
+     * can be read from the same buffer by calling jpeg_mem_src only before
+     * the first one.
+     */
+    if (cinfo->src == NULL)  	/* first time for this JPEG object? */
+    {
+        cinfo->src = (struct jpeg_source_mgr *)
+                     (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
+                             SIZEOF(struct jpeg_source_mgr));
+    }
+
+    src = cinfo->src;
+    src->init_source = init_mem_source;
+    src->fill_input_buffer = fill_mem_input_buffer;
+    src->skip_input_data = skip_input_data;
+    src->resync_to_restart = jpeg_resync_to_restart; /* use default method */
+    src->term_source = term_source;
+    src->bytes_in_buffer = (size_t) insize;
+    src->next_input_byte = (JOCTET *) inbuffer;
+}
diff -NEaurb neo/renderer/jpeg-8c/jdcoefct.c neo/renderer/jpeg-8c/jdcoefct.c
--- neo/renderer/jpeg-8c/jdcoefct.c	1970-01-01 00:00:00 +0000
+++ neo/renderer/jpeg-8c/jdcoefct.c	2012-11-17 01:20:40 +0000
@@ -0,0 +1,875 @@
+/*
+ * jdcoefct.c
+ *
+ * Copyright (C) 1994-1997, Thomas G. Lane.
+ * This file is part of the Independent JPEG Group's software.
+ * For conditions of distribution and use, see the accompanying README file.
+ *
+ * This file contains the coefficient buffer controller for decompression.
+ * This controller is the top level of the JPEG decompressor proper.
+ * The coefficient buffer lies between entropy decoding and inverse-DCT steps.
+ *
+ * In buffered-image mode, this controller is the interface between
+ * input-oriented processing and output-oriented processing.
+ * Also, the input side (only) is used when reading a file for transcoding.
+ */
+
+#define JPEG_INTERNALS
+#include "jinclude.h"
+#include "jpeglib.h"
+
+/* Block smoothing is only applicable for progressive JPEG, so: */
+#ifndef D_PROGRESSIVE_SUPPORTED
+#undef BLOCK_SMOOTHING_SUPPORTED
+#endif
+
+/* Private buffer controller object */
+
+typedef struct
+{
+    struct jpeg_d_coef_controller pub; /* public fields */
+
+    /* These variables keep track of the current location of the input side. */
+    /* cinfo->input_iMCU_row is also used for this. */
+    JDIMENSION MCU_ctr;		/* counts MCUs processed in current row */
+    int MCU_vert_offset;		/* counts MCU rows within iMCU row */
+    int MCU_rows_per_iMCU_row;	/* number of such rows needed */
+
+    /* The output side's location is represented by cinfo->output_iMCU_row. */
+
+    /* In single-pass modes, it's sufficient to buffer just one MCU.
+     * We allocate a workspace of D_MAX_BLOCKS_IN_MCU coefficient blocks,
+     * and let the entropy decoder write into that workspace each time.
+     * (On 80x86, the workspace is FAR even though it's not really very big;
+     * this is to keep the module interfaces unchanged when a large coefficient
+     * buffer is necessary.)
+     * In multi-pass modes, this array points to the current MCU's blocks
+     * within the virtual arrays; it is used only by the input side.
+     */
+    JBLOCKROW MCU_buffer[D_MAX_BLOCKS_IN_MCU];
+
+#ifdef D_MULTISCAN_FILES_SUPPORTED
+    /* In multi-pass modes, we need a virtual block array for each component. */
+    jvirt_barray_ptr whole_image[MAX_COMPONENTS];
+#endif
+
+#ifdef BLOCK_SMOOTHING_SUPPORTED
+    /* When doing block smoothing, we latch coefficient Al values here */
+    int * coef_bits_latch;
+#define SAVED_COEFS  6		/* we save coef_bits[0..5] */
+#endif
+} my_coef_controller;
+
+typedef my_coef_controller * my_coef_ptr;
+
+/* Forward declarations */
+METHODDEF(int) decompress_onepass
+JPP((j_decompress_ptr cinfo, JSAMPIMAGE output_buf));
+#ifdef D_MULTISCAN_FILES_SUPPORTED
+METHODDEF(int) decompress_data
+JPP((j_decompress_ptr cinfo, JSAMPIMAGE output_buf));
+#endif
+#ifdef BLOCK_SMOOTHING_SUPPORTED
+LOCAL(boolean) smoothing_ok JPP((j_decompress_ptr cinfo));
+METHODDEF(int) decompress_smooth_data
+JPP((j_decompress_ptr cinfo, JSAMPIMAGE output_buf));
+#endif
+
+
+LOCAL(void)
+start_iMCU_row (j_decompress_ptr cinfo)
+/* Reset within-iMCU-row counters for a new row (input side) */
+{
+    my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
+
+    /* In an interleaved scan, an MCU row is the same as an iMCU row.
+     * In a noninterleaved scan, an iMCU row has v_samp_factor MCU rows.
+     * But at the bottom of the image, process only what's left.
+     */
+    if (cinfo->comps_in_scan > 1)
+    {
+        coef->MCU_rows_per_iMCU_row = 1;
+    }
+    else
+    {
+        if (cinfo->input_iMCU_row < (cinfo->total_iMCU_rows-1))
+        {
+            coef->MCU_rows_per_iMCU_row = cinfo->cur_comp_info[0]->v_samp_factor;
+        }
+        else
+        {
+            coef->MCU_rows_per_iMCU_row = cinfo->cur_comp_info[0]->last_row_height;
+        }
+    }
+
+    coef->MCU_ctr = 0;
+    coef->MCU_vert_offset = 0;
+}
+
+
+/*
+ * Initialize for an input processing pass.
+ */
+
+METHODDEF(void)
+start_input_pass (j_decompress_ptr cinfo)
+{
+    cinfo->input_iMCU_row = 0;
+    start_iMCU_row(cinfo);
+}
+
+
+/*
+ * Initialize for an output processing pass.
+ */
+
+METHODDEF(void)
+start_output_pass (j_decompress_ptr cinfo)
+{
+#ifdef BLOCK_SMOOTHING_SUPPORTED
+    my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
+
+    /* If multipass, check to see whether to use block smoothing on this pass */
+    if (coef->pub.coef_arrays != NULL)
+    {
+        if (cinfo->do_block_smoothing && smoothing_ok(cinfo))
+        {
+            coef->pub.decompress_data = decompress_smooth_data;
+        }
+        else
+        {
+            coef->pub.decompress_data = decompress_data;
+        }
+    }
+#endif
+    cinfo->output_iMCU_row = 0;
+}
+
+
+/*
+ * Decompress and return some data in the single-pass case.
+ * Always attempts to emit one fully interleaved MCU row ("iMCU" row).
+ * Input and output must run in lockstep since we have only a one-MCU buffer.
+ * Return value is JPEG_ROW_COMPLETED, JPEG_SCAN_COMPLETED, or JPEG_SUSPENDED.
+ *
+ * NB: output_buf contains a plane for each component in image,
+ * which we index according to the component's SOF position.
+ */
+
+METHODDEF(int)
+decompress_onepass (j_decompress_ptr cinfo, JSAMPIMAGE output_buf)
+{
+    my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
+    JDIMENSION MCU_col_num;	/* index of current MCU within row */
+    JDIMENSION last_MCU_col = cinfo->MCUs_per_row - 1;
+    JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
+    int blkn, ci, xindex, yindex, yoffset, useful_width;
+    JSAMPARRAY output_ptr;
+    JDIMENSION start_col, output_col;
+    jpeg_component_info *compptr;
+    inverse_DCT_method_ptr inverse_DCT;
+
+    /* Loop to process as much as one whole iMCU row */
+    for (yoffset = coef->MCU_vert_offset; yoffset < coef->MCU_rows_per_iMCU_row;
+            yoffset++)
+    {
+        for (MCU_col_num = coef->MCU_ctr; MCU_col_num <= last_MCU_col;
+                MCU_col_num++)
+        {
+            /* Try to fetch an MCU.  Entropy decoder expects buffer to be zeroed. */
+            jzero_far((void FAR *) coef->MCU_buffer[0],
+                      (size_t) (cinfo->blocks_in_MCU * SIZEOF(JBLOCK)));
+            if (! (*cinfo->entropy->decode_mcu) (cinfo, coef->MCU_buffer))
+            {
+                /* Suspension forced; update state counters and exit */
+                coef->MCU_vert_offset = yoffset;
+                coef->MCU_ctr = MCU_col_num;
+                return JPEG_SUSPENDED;
+            }
+            /* Determine where data should go in output_buf and do the IDCT thing.
+             * We skip dummy blocks at the right and bottom edges (but blkn gets
+             * incremented past them!).  Note the inner loop relies on having
+             * allocated the MCU_buffer[] blocks sequentially.
+             */
+            blkn = 0;			/* index of current DCT block within MCU */
+            for (ci = 0; ci < cinfo->comps_in_scan; ci++)
+            {
+                compptr = cinfo->cur_comp_info[ci];
+                /* Don't bother to IDCT an uninteresting component. */
+                if (! compptr->component_needed)
+                {
+                    blkn += compptr->MCU_blocks;
+                    continue;
+                }
+                inverse_DCT = cinfo->idct->inverse_DCT[compptr->component_index];
+                useful_width = (MCU_col_num < last_MCU_col) ? compptr->MCU_width
+                               : compptr->last_col_width;
+                output_ptr = output_buf[compptr->component_index] +
+                             yoffset * compptr->DCT_v_scaled_size;
+                start_col = MCU_col_num * compptr->MCU_sample_width;
+                for (yindex = 0; yindex < compptr->MCU_height; yindex++)
+                {
+                    if (cinfo->input_iMCU_row < last_iMCU_row ||
+                            yoffset+yindex < compptr->last_row_height)
+                    {
+                        output_col = start_col;
+                        for (xindex = 0; xindex < useful_width; xindex++)
+                        {
+                            (*inverse_DCT) (cinfo, compptr,
+                                            (JCOEFPTR) coef->MCU_buffer[blkn+xindex],
+                                            output_ptr, output_col);
+                            output_col += compptr->DCT_h_scaled_size;
+                        }
+                    }
+                    blkn += compptr->MCU_width;
+                    output_ptr += compptr->DCT_v_scaled_size;
+                }
+            }
+        }
+        /* Completed an MCU row, but perhaps not an iMCU row */
+        coef->MCU_ctr = 0;
+    }
+    /* Completed the iMCU row, advance counters for next one */
+    cinfo->output_iMCU_row++;
+    if (++(cinfo->input_iMCU_row) < cinfo->total_iMCU_rows)
+    {
+        start_iMCU_row(cinfo);
+        return JPEG_ROW_COMPLETED;
+    }
+    /* Completed the scan */
+    (*cinfo->inputctl->finish_input_pass) (cinfo);
+    return JPEG_SCAN_COMPLETED;
+}
+
+
+/*
+ * Dummy consume-input routine for single-pass operation.
+ */
+
+METHODDEF(int)
+dummy_consume_data (j_decompress_ptr cinfo)
+{
+    return JPEG_SUSPENDED;	/* Always indicate nothing was done */
+}
+
+
+#ifdef D_MULTISCAN_FILES_SUPPORTED
+
+/*
+ * Consume input data and store it in the full-image coefficient buffer.
+ * We read as much as one fully interleaved MCU row ("iMCU" row) per call,
+ * ie, v_samp_factor block rows for each component in the scan.
+ * Return value is JPEG_ROW_COMPLETED, JPEG_SCAN_COMPLETED, or JPEG_SUSPENDED.
+ */
+
+METHODDEF(int)
+consume_data (j_decompress_ptr cinfo)
+{
+    my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
+    JDIMENSION MCU_col_num;	/* index of current MCU within row */
+    int blkn, ci, xindex, yindex, yoffset;
+    JDIMENSION start_col;
+    JBLOCKARRAY buffer[MAX_COMPS_IN_SCAN];
+    JBLOCKROW buffer_ptr;
+    jpeg_component_info *compptr;
+
+    /* Align the virtual buffers for the components used in this scan. */
+    for (ci = 0; ci < cinfo->comps_in_scan; ci++)
+    {
+        compptr = cinfo->cur_comp_info[ci];
+        buffer[ci] = (*cinfo->mem->access_virt_barray)
+                     ((j_common_ptr) cinfo, coef->whole_image[compptr->component_index],
+                      cinfo->input_iMCU_row * compptr->v_samp_factor,
+                      (JDIMENSION) compptr->v_samp_factor, TRUE);
+        /* Note: entropy decoder expects buffer to be zeroed,
+         * but this is handled automatically by the memory manager
+         * because we requested a pre-zeroed array.
+         */
+    }
+
+    /* Loop to process one whole iMCU row */
+    for (yoffset = coef->MCU_vert_offset; yoffset < coef->MCU_rows_per_iMCU_row;
+            yoffset++)
+    {
+        for (MCU_col_num = coef->MCU_ctr; MCU_col_num < cinfo->MCUs_per_row;
+                MCU_col_num++)
+        {
+            /* Construct list of pointers to DCT blocks belonging to this MCU */
+            blkn = 0;			/* index of current DCT block within MCU */
+            for (ci = 0; ci < cinfo->comps_in_scan; ci++)
+            {
+                compptr = cinfo->cur_comp_info[ci];
+                start_col = MCU_col_num * compptr->MCU_width;
+                for (yindex = 0; yindex < compptr->MCU_height; yindex++)
+                {
+                    buffer_ptr = buffer[ci][yindex+yoffset] + start_col;
+                    for (xindex = 0; xindex < compptr->MCU_width; xindex++)
+                    {
+                        coef->MCU_buffer[blkn++] = buffer_ptr++;
+                    }
+                }
+            }
+            /* Try to fetch the MCU. */
+            if (! (*cinfo->entropy->decode_mcu) (cinfo, coef->MCU_buffer))
+            {
+                /* Suspension forced; update state counters and exit */
+                coef->MCU_vert_offset = yoffset;
+                coef->MCU_ctr = MCU_col_num;
+                return JPEG_SUSPENDED;
+            }
+        }
+        /* Completed an MCU row, but perhaps not an iMCU row */
+        coef->MCU_ctr = 0;
+    }
+    /* Completed the iMCU row, advance counters for next one */
+    if (++(cinfo->input_iMCU_row) < cinfo->total_iMCU_rows)
+    {
+        start_iMCU_row(cinfo);
+        return JPEG_ROW_COMPLETED;
+    }
+    /* Completed the scan */
+    (*cinfo->inputctl->finish_input_pass) (cinfo);
+    return JPEG_SCAN_COMPLETED;
+}
+
+
+/*
+ * Decompress and return some data in the multi-pass case.
+ * Always attempts to emit one fully interleaved MCU row ("iMCU" row).
+ * Return value is JPEG_ROW_COMPLETED, JPEG_SCAN_COMPLETED, or JPEG_SUSPENDED.
+ *
+ * NB: output_buf contains a plane for each component in image.
+ */
+
+METHODDEF(int)
+decompress_data (j_decompress_ptr cinfo, JSAMPIMAGE output_buf)
+{
+    my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
+    JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
+    JDIMENSION block_num;
+    int ci, block_row, block_rows;
+    JBLOCKARRAY buffer;
+    JBLOCKROW buffer_ptr;
+    JSAMPARRAY output_ptr;
+    JDIMENSION output_col;
+    jpeg_component_info *compptr;
+    inverse_DCT_method_ptr inverse_DCT;
+
+    /* Force some input to be done if we are getting ahead of the input. */
+    while (cinfo->input_scan_number < cinfo->output_scan_number ||
+            (cinfo->input_scan_number == cinfo->output_scan_number &&
+             cinfo->input_iMCU_row <= cinfo->output_iMCU_row))
+    {
+        if ((*cinfo->inputctl->consume_input)(cinfo) == JPEG_SUSPENDED)
+        {
+            return JPEG_SUSPENDED;
+        }
+    }
+
+    /* OK, output from the virtual arrays. */
+    for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
+            ci++, compptr++)
+    {
+        /* Don't bother to IDCT an uninteresting component. */
+        if (! compptr->component_needed)
+        {
+            continue;
+        }
+        /* Align the virtual buffer for this component. */
+        buffer = (*cinfo->mem->access_virt_barray)
+                 ((j_common_ptr) cinfo, coef->whole_image[ci],
+                  cinfo->output_iMCU_row * compptr->v_samp_factor,
+                  (JDIMENSION) compptr->v_samp_factor, FALSE);
+        /* Count non-dummy DCT block rows in this iMCU row. */
+        if (cinfo->output_iMCU_row < last_iMCU_row)
+        {
+            block_rows = compptr->v_samp_factor;
+        }
+        else
+        {
+            /* NB: can't use last_row_height here; it is input-side-dependent! */
+            block_rows = (int) (compptr->height_in_blocks % compptr->v_samp_factor);
+            if (block_rows == 0)
+            {
+                block_rows = compptr->v_samp_factor;
+            }
+        }
+        inverse_DCT = cinfo->idct->inverse_DCT[ci];
+        output_ptr = output_buf[ci];
+        /* Loop over all DCT blocks to be processed. */
+        for (block_row = 0; block_row < block_rows; block_row++)
+        {
+            buffer_ptr = buffer[block_row];
+            output_col = 0;
+            for (block_num = 0; block_num < compptr->width_in_blocks; block_num++)
+            {
+                (*inverse_DCT) (cinfo, compptr, (JCOEFPTR) buffer_ptr,
+                                output_ptr, output_col);
+                buffer_ptr++;
+                output_col += compptr->DCT_h_scaled_size;
+            }
+            output_ptr += compptr->DCT_v_scaled_size;
+        }
+    }
+
+    if (++(cinfo->output_iMCU_row) < cinfo->total_iMCU_rows)
+    {
+        return JPEG_ROW_COMPLETED;
+    }
+    return JPEG_SCAN_COMPLETED;
+}
+
+#endif /* D_MULTISCAN_FILES_SUPPORTED */
+
+
+#ifdef BLOCK_SMOOTHING_SUPPORTED
+
+/*
+ * This code applies interblock smoothing as described by section K.8
+ * of the JPEG standard: the first 5 AC coefficients are estimated from
+ * the DC values of a DCT block and its 8 neighboring blocks.
+ * We apply smoothing only for progressive JPEG decoding, and only if
+ * the coefficients it can estimate are not yet known to full precision.
+ */
+
+/* Natural-order array positions of the first 5 zigzag-order coefficients */
+#define Q01_POS  1
+#define Q10_POS  8
+#define Q20_POS  16
+#define Q11_POS  9
+#define Q02_POS  2
+
+/*
+ * Determine whether block smoothing is applicable and safe.
+ * We also latch the current states of the coef_bits[] entries for the
+ * AC coefficients; otherwise, if the input side of the decompressor
+ * advances into a new scan, we might think the coefficients are known
+ * more accurately than they really are.
+ */
+
+LOCAL(boolean)
+smoothing_ok (j_decompress_ptr cinfo)
+{
+    my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
+    boolean smoothing_useful = FALSE;
+    int ci, coefi;
+    jpeg_component_info *compptr;
+    JQUANT_TBL * qtable;
+    int * coef_bits;
+    int * coef_bits_latch;
+
+    if (! cinfo->progressive_mode || cinfo->coef_bits == NULL)
+    {
+        return FALSE;
+    }
+
+    /* Allocate latch area if not already done */
+    if (coef->coef_bits_latch == NULL)
+        coef->coef_bits_latch = (int *)
+                                (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
+                                        cinfo->num_components *
+                                        (SAVED_COEFS * SIZEOF(int)));
+    coef_bits_latch = coef->coef_bits_latch;
+
+    for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
+            ci++, compptr++)
+    {
+        /* All components' quantization values must already be latched. */
+        if ((qtable = compptr->quant_table) == NULL)
+        {
+            return FALSE;
+        }
+        /* Verify DC & first 5 AC quantizers are nonzero to avoid zero-divide. */
+        if (qtable->quantval[0] == 0 ||
+                qtable->quantval[Q01_POS] == 0 ||
+                qtable->quantval[Q10_POS] == 0 ||
+                qtable->quantval[Q20_POS] == 0 ||
+                qtable->quantval[Q11_POS] == 0 ||
+                qtable->quantval[Q02_POS] == 0)
+        {
+            return FALSE;
+        }
+        /* DC values must be at least partly known for all components. */
+        coef_bits = cinfo->coef_bits[ci];
+        if (coef_bits[0] < 0)
+        {
+            return FALSE;
+        }
+        /* Block smoothing is helpful if some AC coefficients remain inaccurate. */
+        for (coefi = 1; coefi <= 5; coefi++)
+        {
+            coef_bits_latch[coefi] = coef_bits[coefi];
+            if (coef_bits[coefi] != 0)
+            {
+                smoothing_useful = TRUE;
+            }
+        }
+        coef_bits_latch += SAVED_COEFS;
+    }
+
+    return smoothing_useful;
+}
+
+
+/*
+ * Variant of decompress_data for use when doing block smoothing.
+ */
+
+METHODDEF(int)
+decompress_smooth_data (j_decompress_ptr cinfo, JSAMPIMAGE output_buf)
+{
+    my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
+    JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
+    JDIMENSION block_num, last_block_column;
+    int ci, block_row, block_rows, access_rows;
+    JBLOCKARRAY buffer;
+    JBLOCKROW buffer_ptr, prev_block_row, next_block_row;
+    JSAMPARRAY output_ptr;
+    JDIMENSION output_col;
+    jpeg_component_info *compptr;
+    inverse_DCT_method_ptr inverse_DCT;
+    boolean first_row, last_row;
+    JBLOCK workspace;
+    int *coef_bits;
+    JQUANT_TBL *quanttbl;
+    INT32 Q00,Q01,Q02,Q10,Q11,Q20, num;
+    int DC1,DC2,DC3,DC4,DC5,DC6,DC7,DC8,DC9;
+    int Al, pred;
+
+    /* Force some input to be done if we are getting ahead of the input. */
+    while (cinfo->input_scan_number <= cinfo->output_scan_number &&
+            ! cinfo->inputctl->eoi_reached)
+    {
+        if (cinfo->input_scan_number == cinfo->output_scan_number)
+        {
+            /* If input is working on current scan, we ordinarily want it to
+             * have completed the current row.  But if input scan is DC,
+             * we want it to keep one row ahead so that next block row's DC
+             * values are up to date.
+             */
+            JDIMENSION delta = (cinfo->Ss == 0) ? 1 : 0;
+            if (cinfo->input_iMCU_row > cinfo->output_iMCU_row+delta)
+            {
+                break;
+            }
+        }
+        if ((*cinfo->inputctl->consume_input)(cinfo) == JPEG_SUSPENDED)
+        {
+            return JPEG_SUSPENDED;
+        }
+    }
+
+    /* OK, output from the virtual arrays. */
+    for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
+            ci++, compptr++)
+    {
+        /* Don't bother to IDCT an uninteresting component. */
+        if (! compptr->component_needed)
+        {
+            continue;
+        }
+        /* Count non-dummy DCT block rows in this iMCU row. */
+        if (cinfo->output_iMCU_row < last_iMCU_row)
+        {
+            block_rows = compptr->v_samp_factor;
+            access_rows = block_rows * 2; /* this and next iMCU row */
+            last_row = FALSE;
+        }
+        else
+        {
+            /* NB: can't use last_row_height here; it is input-side-dependent! */
+            block_rows = (int) (compptr->height_in_blocks % compptr->v_samp_factor);
+            if (block_rows == 0)
+            {
+                block_rows = compptr->v_samp_factor;
+            }
+            access_rows = block_rows; /* this iMCU row only */
+            last_row = TRUE;
+        }
+        /* Align the virtual buffer for this component. */
+        if (cinfo->output_iMCU_row > 0)
+        {
+            access_rows += compptr->v_samp_factor; /* prior iMCU row too */
+            buffer = (*cinfo->mem->access_virt_barray)
+                     ((j_common_ptr) cinfo, coef->whole_image[ci],
+                      (cinfo->output_iMCU_row - 1) * compptr->v_samp_factor,
+                      (JDIMENSION) access_rows, FALSE);
+            buffer += compptr->v_samp_factor;	/* point to current iMCU row */
+            first_row = FALSE;
+        }
+        else
+        {
+            buffer = (*cinfo->mem->access_virt_barray)
+                     ((j_common_ptr) cinfo, coef->whole_image[ci],
+                      (JDIMENSION) 0, (JDIMENSION) access_rows, FALSE);
+            first_row = TRUE;
+        }
+        /* Fetch component-dependent info */
+        coef_bits = coef->coef_bits_latch + (ci * SAVED_COEFS);
+        quanttbl = compptr->quant_table;
+        Q00 = quanttbl->quantval[0];
+        Q01 = quanttbl->quantval[Q01_POS];
+        Q10 = quanttbl->quantval[Q10_POS];
+        Q20 = quanttbl->quantval[Q20_POS];
+        Q11 = quanttbl->quantval[Q11_POS];
+        Q02 = quanttbl->quantval[Q02_POS];
+        inverse_DCT = cinfo->idct->inverse_DCT[ci];
+        output_ptr = output_buf[ci];
+        /* Loop over all DCT blocks to be processed. */
+        for (block_row = 0; block_row < block_rows; block_row++)
+        {
+            buffer_ptr = buffer[block_row];
+            if (first_row && block_row == 0)
+            {
+                prev_block_row = buffer_ptr;
+            }
+            else
+            {
+                prev_block_row = buffer[block_row-1];
+            }
+            if (last_row && block_row == block_rows-1)
+            {
+                next_block_row = buffer_ptr;
+            }
+            else
+            {
+                next_block_row = buffer[block_row+1];
+            }
+            /* We fetch the surrounding DC values using a sliding-register approach.
+             * Initialize all nine here so as to do the right thing on narrow pics.
+             */
+            DC1 = DC2 = DC3 = (int) prev_block_row[0][0];
+            DC4 = DC5 = DC6 = (int) buffer_ptr[0][0];
+            DC7 = DC8 = DC9 = (int) next_block_row[0][0];
+            output_col = 0;
+            last_block_column = compptr->width_in_blocks - 1;
+            for (block_num = 0; block_num <= last_block_column; block_num++)
+            {
+                /* Fetch current DCT block into workspace so we can modify it. */
+                jcopy_block_row(buffer_ptr, (JBLOCKROW) workspace, (JDIMENSION) 1);
+                /* Update DC values */
+                if (block_num < last_block_column)
+                {
+                    DC3 = (int) prev_block_row[1][0];
+                    DC6 = (int) buffer_ptr[1][0];
+                    DC9 = (int) next_block_row[1][0];
+                }
+                /* Compute coefficient estimates per K.8.
+                 * An estimate is applied only if coefficient is still zero,
+                 * and is not known to be fully accurate.
+                 */
+                /* AC01 */
+                if ((Al=coef_bits[1]) != 0 && workspace[1] == 0)
+                {
+                    num = 36 * Q00 * (DC4 - DC6);
+                    if (num >= 0)
+                    {
+                        pred = (int) (((Q01<<7) + num) / (Q01<<8));
+                        if (Al > 0 && pred >= (1<<Al))
+                        {
+                            pred = (1<<Al)-1;
+                        }
+                    }
+                    else
+                    {
+                        pred = (int) (((Q01<<7) - num) / (Q01<<8));
+                        if (Al > 0 && pred >= (1<<Al))
+                        {
+                            pred = (1<<Al)-1;
+                        }
+                        pred = -pred;
+                    }
+                    workspace[1] = (JCOEF) pred;
+                }
+                /* AC10 */
+                if ((Al=coef_bits[2]) != 0 && workspace[8] == 0)
+                {
+                    num = 36 * Q00 * (DC2 - DC8);
+                    if (num >= 0)
+                    {
+                        pred = (int) (((Q10<<7) + num) / (Q10<<8));
+                        if (Al > 0 && pred >= (1<<Al))
+                        {
+                            pred = (1<<Al)-1;
+                        }
+                    }
+                    else
+                    {
+                        pred = (int) (((Q10<<7) - num) / (Q10<<8));
+                        if (Al > 0 && pred >= (1<<Al))
+                        {
+                            pred = (1<<Al)-1;
+                        }
+                        pred = -pred;
+                    }
+                    workspace[8] = (JCOEF) pred;
+                }
+                /* AC20 */
+                if ((Al=coef_bits[3]) != 0 && workspace[16] == 0)
+                {
+                    num = 9 * Q00 * (DC2 + DC8 - 2*DC5);
+                    if (num >= 0)
+                    {
+                        pred = (int) (((Q20<<7) + num) / (Q20<<8));
+                        if (Al > 0 && pred >= (1<<Al))
+                        {
+                            pred = (1<<Al)-1;
+                        }
+                    }
+                    else
+                    {
+                        pred = (int) (((Q20<<7) - num) / (Q20<<8));
+                        if (Al > 0 && pred >= (1<<Al))
+                        {
+                            pred = (1<<Al)-1;
+                        }
+                        pred = -pred;
+                    }
+                    workspace[16] = (JCOEF) pred;
+                }
+                /* AC11 */
+                if ((Al=coef_bits[4]) != 0 && workspace[9] == 0)
+                {
+                    num = 5 * Q00 * (DC1 - DC3 - DC7 + DC9);
+                    if (num >= 0)
+                    {
+                        pred = (int) (((Q11<<7) + num) / (Q11<<8));
+                        if (Al > 0 && pred >= (1<<Al))
+                        {
+                            pred = (1<<Al)-1;
+                        }
+                    }
+                    else
+                    {
+                        pred = (int) (((Q11<<7) - num) / (Q11<<8));
+                        if (Al > 0 && pred >= (1<<Al))
+                        {
+                            pred = (1<<Al)-1;
+                        }
+                        pred = -pred;
+                    }
+                    workspace[9] = (JCOEF) pred;
+                }
+                /* AC02 */
+                if ((Al=coef_bits[5]) != 0 && workspace[2] == 0)
+                {
+                    num = 9 * Q00 * (DC4 + DC6 - 2*DC5);
+                    if (num >= 0)
+                    {
+                        pred = (int) (((Q02<<7) + num) / (Q02<<8));
+                        if (Al > 0 && pred >= (1<<Al))
+                        {
+                            pred = (1<<Al)-1;
+                        }
+                    }
+                    else
+                    {
+                        pred = (int) (((Q02<<7) - num) / (Q02<<8));
+                        if (Al > 0 && pred >= (1<<Al))
+                        {
+                            pred = (1<<Al)-1;
+                        }
+                        pred = -pred;
+                    }
+                    workspace[2] = (JCOEF) pred;
+                }
+                /* OK, do the IDCT */
+                (*inverse_DCT) (cinfo, compptr, (JCOEFPTR) workspace,
+                                output_ptr, output_col);
+                /* Advance for next column */
+                DC1 = DC2;
+                DC2 = DC3;
+                DC4 = DC5;
+                DC5 = DC6;
+                DC7 = DC8;
+                DC8 = DC9;
+                buffer_ptr++, prev_block_row++, next_block_row++;
+                output_col += compptr->DCT_h_scaled_size;
+            }
+            output_ptr += compptr->DCT_v_scaled_size;
+        }
+    }
+
+    if (++(cinfo->output_iMCU_row) < cinfo->total_iMCU_rows)
+    {
+        return JPEG_ROW_COMPLETED;
+    }
+    return JPEG_SCAN_COMPLETED;
+}
+
+#endif /* BLOCK_SMOOTHING_SUPPORTED */
+
+
+/*
+ * Initialize coefficient buffer controller.
+ */
+
+GLOBAL(void)
+jinit_d_coef_controller (j_decompress_ptr cinfo, boolean need_full_buffer)
+{
+    my_coef_ptr coef;
+
+    coef = (my_coef_ptr)
+           (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
+                                       SIZEOF(my_coef_controller));
+    cinfo->coef = (struct jpeg_d_coef_controller *) coef;
+    coef->pub.start_input_pass = start_input_pass;
+    coef->pub.start_output_pass = start_output_pass;
+#ifdef BLOCK_SMOOTHING_SUPPORTED
+    coef->coef_bits_latch = NULL;
+#endif
+
+    /* Create the coefficient buffer. */
+    if (need_full_buffer)
+    {
+#ifdef D_MULTISCAN_FILES_SUPPORTED
+        /* Allocate a full-image virtual array for each component, */
+        /* padded to a multiple of samp_factor DCT blocks in each direction. */
+        /* Note we ask for a pre-zeroed array. */
+        int ci, access_rows;
+        jpeg_component_info *compptr;
+
+        for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
+                ci++, compptr++)
+        {
+            access_rows = compptr->v_samp_factor;
+#ifdef BLOCK_SMOOTHING_SUPPORTED
+            /* If block smoothing could be used, need a bigger window */
+            if (cinfo->progressive_mode)
+            {
+                access_rows *= 3;
+            }
+#endif
+            coef->whole_image[ci] = (*cinfo->mem->request_virt_barray)
+                                    ((j_common_ptr) cinfo, JPOOL_IMAGE, TRUE,
+                                     (JDIMENSION) jround_up((long) compptr->width_in_blocks,
+                                             (long) compptr->h_samp_factor),
+                                     (JDIMENSION) jround_up((long) compptr->height_in_blocks,
+                                             (long) compptr->v_samp_factor),
+                                     (JDIMENSION) access_rows);
+        }
+        coef->pub.consume_data = consume_data;
+        coef->pub.decompress_data = decompress_data;
+        coef->pub.coef_arrays = coef->whole_image; /* link to virtual arrays */
+#else
+        ERREXIT(cinfo, JERR_NOT_COMPILED);
+#endif
+    }
+    else
+    {
+        /* We only need a single-MCU buffer. */
+        JBLOCKROW buffer;
+        int i;
+
+        buffer = (JBLOCKROW)
+                 (*cinfo->mem->alloc_large) ((j_common_ptr) cinfo, JPOOL_IMAGE,
+                                             D_MAX_BLOCKS_IN_MCU * SIZEOF(JBLOCK));
+        for (i = 0; i < D_MAX_BLOCKS_IN_MCU; i++)
+        {
+            coef->MCU_buffer[i] = buffer + i;
+        }
+        coef->pub.consume_data = dummy_consume_data;
+        coef->pub.decompress_data = decompress_onepass;
+        coef->pub.coef_arrays = NULL; /* flag for no virtual arrays */
+    }
+}
diff -NEaurb neo/renderer/jpeg-8c/jdcolor.c neo/renderer/jpeg-8c/jdcolor.c
--- neo/renderer/jpeg-8c/jdcolor.c	1970-01-01 00:00:00 +0000
+++ neo/renderer/jpeg-8c/jdcolor.c	2012-11-17 01:20:40 +0000
@@ -0,0 +1,445 @@
+/*
+ * jdcolor.c
+ *
+ * Copyright (C) 1991-1997, Thomas G. Lane.
+ * This file is part of the Independent JPEG Group's software.
+ * For conditions of distribution and use, see the accompanying README file.
+ *
+ * This file contains output colorspace conversion routines.
+ */
+
+#define JPEG_INTERNALS
+#include "jinclude.h"
+#include "jpeglib.h"
+
+
+/* Private subobject */
+
+typedef struct
+{
+    struct jpeg_color_deconverter pub; /* public fields */
+
+    /* Private state for YCC->RGB conversion */
+    int * Cr_r_tab;		/* => table for Cr to R conversion */
+    int * Cb_b_tab;		/* => table for Cb to B conversion */
+    INT32 * Cr_g_tab;		/* => table for Cr to G conversion */
+    INT32 * Cb_g_tab;		/* => table for Cb to G conversion */
+} my_color_deconverter;
+
+typedef my_color_deconverter * my_cconvert_ptr;
+
+
+/**************** YCbCr -> RGB conversion: most common case **************/
+
+/*
+ * YCbCr is defined per CCIR 601-1, except that Cb and Cr are
+ * normalized to the range 0..MAXJSAMPLE rather than -0.5 .. 0.5.
+ * The conversion equations to be implemented are therefore
+ *	R = Y                + 1.40200 * Cr
+ *	G = Y - 0.34414 * Cb - 0.71414 * Cr
+ *	B = Y + 1.77200 * Cb
+ * where Cb and Cr represent the incoming values less CENTERJSAMPLE.
+ * (These numbers are derived from TIFF 6.0 section 21, dated 3-June-92.)
+ *
+ * To avoid floating-point arithmetic, we represent the fractional constants
+ * as integers scaled up by 2^16 (about 4 digits precision); we have to divide
+ * the products by 2^16, with appropriate rounding, to get the correct answer.
+ * Notice that Y, being an integral input, does not contribute any fraction
+ * so it need not participate in the rounding.
+ *
+ * For even more speed, we avoid doing any multiplications in the inner loop
+ * by precalculating the constants times Cb and Cr for all possible values.
+ * For 8-bit JSAMPLEs this is very reasonable (only 256 entries per table);
+ * for 12-bit samples it is still acceptable.  It's not very reasonable for
+ * 16-bit samples, but if you want lossless storage you shouldn't be changing
+ * colorspace anyway.
+ * The Cr=>R and Cb=>B values can be rounded to integers in advance; the
+ * values for the G calculation are left scaled up, since we must add them
+ * together before rounding.
+ */
+
+#define SCALEBITS	16	/* speediest right-shift on some machines */
+#define ONE_HALF	((INT32) 1 << (SCALEBITS-1))
+#define FIX(x)		((INT32) ((x) * (1L<<SCALEBITS) + 0.5))
+
+
+/*
+ * Initialize tables for YCC->RGB colorspace conversion.
+ */
+
+LOCAL(void)
+build_ycc_rgb_table (j_decompress_ptr cinfo)
+{
+    my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
+    int i;
+    INT32 x;
+    SHIFT_TEMPS
+
+    cconvert->Cr_r_tab = (int *)
+                         (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
+                                 (MAXJSAMPLE+1) * SIZEOF(int));
+    cconvert->Cb_b_tab = (int *)
+                         (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
+                                 (MAXJSAMPLE+1) * SIZEOF(int));
+    cconvert->Cr_g_tab = (INT32 *)
+                         (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
+                                 (MAXJSAMPLE+1) * SIZEOF(INT32));
+    cconvert->Cb_g_tab = (INT32 *)
+                         (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
+                                 (MAXJSAMPLE+1) * SIZEOF(INT32));
+
+    for (i = 0, x = -CENTERJSAMPLE; i <= MAXJSAMPLE; i++, x++)
+    {
+        /* i is the actual input pixel value, in the range 0..MAXJSAMPLE */
+        /* The Cb or Cr value we are thinking of is x = i - CENTERJSAMPLE */
+        /* Cr=>R value is nearest int to 1.40200 * x */
+        cconvert->Cr_r_tab[i] = (int)
+                                RIGHT_SHIFT(FIX(1.40200) * x + ONE_HALF, SCALEBITS);
+        /* Cb=>B value is nearest int to 1.77200 * x */
+        cconvert->Cb_b_tab[i] = (int)
+                                RIGHT_SHIFT(FIX(1.77200) * x + ONE_HALF, SCALEBITS);
+        /* Cr=>G value is scaled-up -0.71414 * x */
+        cconvert->Cr_g_tab[i] = (- FIX(0.71414)) * x;
+        /* Cb=>G value is scaled-up -0.34414 * x */
+        /* We also add in ONE_HALF so that need not do it in inner loop */
+        cconvert->Cb_g_tab[i] = (- FIX(0.34414)) * x + ONE_HALF;
+    }
+}
+
+
+/*
+ * Convert some rows of samples to the output colorspace.
+ *
+ * Note that we change from noninterleaved, one-plane-per-component format
+ * to interleaved-pixel format.  The output buffer is therefore three times
+ * as wide as the input buffer.
+ * A starting row offset is provided only for the input buffer.  The caller
+ * can easily adjust the passed output_buf value to accommodate any row
+ * offset required on that side.
+ */
+
+METHODDEF(void)
+ycc_rgb_convert (j_decompress_ptr cinfo,
+                 JSAMPIMAGE input_buf, JDIMENSION input_row,
+                 JSAMPARRAY output_buf, int num_rows)
+{
+    my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
+    register int y, cb, cr;
+    register JSAMPROW outptr;
+    register JSAMPROW inptr0, inptr1, inptr2;
+    register JDIMENSION col;
+    JDIMENSION num_cols = cinfo->output_width;
+    /* copy these pointers into registers if possible */
+    register JSAMPLE * range_limit = cinfo->sample_range_limit;
+    register int * Crrtab = cconvert->Cr_r_tab;
+    register int * Cbbtab = cconvert->Cb_b_tab;
+    register INT32 * Crgtab = cconvert->Cr_g_tab;
+    register INT32 * Cbgtab = cconvert->Cb_g_tab;
+    SHIFT_TEMPS
+
+    while (--num_rows >= 0)
+    {
+        inptr0 = input_buf[0][input_row];
+        inptr1 = input_buf[1][input_row];
+        inptr2 = input_buf[2][input_row];
+        input_row++;
+        outptr = *output_buf++;
+        for (col = 0; col < num_cols; col++)
+        {
+            y  = GETJSAMPLE(inptr0[col]);
+            cb = GETJSAMPLE(inptr1[col]);
+            cr = GETJSAMPLE(inptr2[col]);
+            /* Range-limiting is essential due to noise introduced by DCT losses. */
+            outptr[RGB_RED] =   range_limit[y + Crrtab[cr]];
+            outptr[RGB_GREEN] = range_limit[y +
+                                            ((int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr],
+                                                    SCALEBITS))];
+            outptr[RGB_BLUE] =  range_limit[y + Cbbtab[cb]];
+            outptr += RGB_PIXELSIZE;
+        }
+    }
+}
+
+
+/**************** Cases other than YCbCr -> RGB **************/
+
+
+/*
+ * Color conversion for no colorspace change: just copy the data,
+ * converting from separate-planes to interleaved representation.
+ */
+
+METHODDEF(void)
+null_convert (j_decompress_ptr cinfo,
+              JSAMPIMAGE input_buf, JDIMENSION input_row,
+              JSAMPARRAY output_buf, int num_rows)
+{
+    register JSAMPROW inptr, outptr;
+    register JDIMENSION count;
+    register int num_components = cinfo->num_components;
+    JDIMENSION num_cols = cinfo->output_width;
+    int ci;
+
+    while (--num_rows >= 0)
+    {
+        for (ci = 0; ci < num_components; ci++)
+        {
+            inptr = input_buf[ci][input_row];
+            outptr = output_buf[0] + ci;
+            for (count = num_cols; count > 0; count--)
+            {
+                *outptr = *inptr++;	/* needn't bother with GETJSAMPLE() here */
+                outptr += num_components;
+            }
+        }
+        input_row++;
+        output_buf++;
+    }
+}
+
+
+/*
+ * Color conversion for grayscale: just copy the data.
+ * This also works for YCbCr -> grayscale conversion, in which
+ * we just copy the Y (luminance) component and ignore chrominance.
+ */
+
+METHODDEF(void)
+grayscale_convert (j_decompress_ptr cinfo,
+                   JSAMPIMAGE input_buf, JDIMENSION input_row,
+                   JSAMPARRAY output_buf, int num_rows)
+{
+    jcopy_sample_rows(input_buf[0], (int) input_row, output_buf, 0,
+                      num_rows, cinfo->output_width);
+}
+
+
+/*
+ * Convert grayscale to RGB: just duplicate the graylevel three times.
+ * This is provided to support applications that don't want to cope
+ * with grayscale as a separate case.
+ */
+
+METHODDEF(void)
+gray_rgb_convert (j_decompress_ptr cinfo,
+                  JSAMPIMAGE input_buf, JDIMENSION input_row,
+                  JSAMPARRAY output_buf, int num_rows)
+{
+    register JSAMPROW inptr, outptr;
+    register JDIMENSION col;
+    JDIMENSION num_cols = cinfo->output_width;
+
+    while (--num_rows >= 0)
+    {
+        inptr = input_buf[0][input_row++];
+        outptr = *output_buf++;
+        for (col = 0; col < num_cols; col++)
+        {
+            /* We can dispense with GETJSAMPLE() here */
+            outptr[RGB_RED] = outptr[RGB_GREEN] = outptr[RGB_BLUE] = inptr[col];
+            outptr += RGB_PIXELSIZE;
+        }
+    }
+}
+
+
+/*
+ * Adobe-style YCCK->CMYK conversion.
+ * We convert YCbCr to R=1-C, G=1-M, and B=1-Y using the same
+ * conversion as above, while passing K (black) unchanged.
+ * We assume build_ycc_rgb_table has been called.
+ */
+
+METHODDEF(void)
+ycck_cmyk_convert (j_decompress_ptr cinfo,
+                   JSAMPIMAGE input_buf, JDIMENSION input_row,
+                   JSAMPARRAY output_buf, int num_rows)
+{
+    my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
+    register int y, cb, cr;
+    register JSAMPROW outptr;
+    register JSAMPROW inptr0, inptr1, inptr2, inptr3;
+    register JDIMENSION col;
+    JDIMENSION num_cols = cinfo->output_width;
+    /* copy these pointers into registers if possible */
+    register JSAMPLE * range_limit = cinfo->sample_range_limit;
+    register int * Crrtab = cconvert->Cr_r_tab;
+    register int * Cbbtab = cconvert->Cb_b_tab;
+    register INT32 * Crgtab = cconvert->Cr_g_tab;
+    register INT32 * Cbgtab = cconvert->Cb_g_tab;
+    SHIFT_TEMPS
+
+    while (--num_rows >= 0)
+    {
+        inptr0 = input_buf[0][input_row];
+        inptr1 = input_buf[1][input_row];
+        inptr2 = input_buf[2][input_row];
+        inptr3 = input_buf[3][input_row];
+        input_row++;
+        outptr = *output_buf++;
+        for (col = 0; col < num_cols; col++)
+        {
+            y  = GETJSAMPLE(inptr0[col]);
+            cb = GETJSAMPLE(inptr1[col]);
+            cr = GETJSAMPLE(inptr2[col]);
+            /* Range-limiting is essential due to noise introduced by DCT losses. */
+            outptr[0] = range_limit[MAXJSAMPLE - (y + Crrtab[cr])];	/* red */
+            outptr[1] = range_limit[MAXJSAMPLE - (y +			/* green */
+                                                  ((int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr],
+                                                          SCALEBITS)))];
+            outptr[2] = range_limit[MAXJSAMPLE - (y + Cbbtab[cb])];	/* blue */
+            /* K passes through unchanged */
+            outptr[3] = inptr3[col];	/* don't need GETJSAMPLE here */
+            outptr += 4;
+        }
+    }
+}
+
+
+/*
+ * Empty method for start_pass.
+ */
+
+METHODDEF(void)
+start_pass_dcolor (j_decompress_ptr cinfo)
+{
+    /* no work needed */
+}
+
+
+/*
+ * Module initialization routine for output colorspace conversion.
+ */
+
+GLOBAL(void)
+jinit_color_deconverter (j_decompress_ptr cinfo)
+{
+    my_cconvert_ptr cconvert;
+    int ci;
+
+    cconvert = (my_cconvert_ptr)
+               (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
+                                           SIZEOF(my_color_deconverter));
+    cinfo->cconvert = (struct jpeg_color_deconverter *) cconvert;
+    cconvert->pub.start_pass = start_pass_dcolor;
+
+    /* Make sure num_components agrees with jpeg_color_space */
+    switch (cinfo->jpeg_color_space)
+    {
+    case JCS_GRAYSCALE:
+        if (cinfo->num_components != 1)
+        {
+            ERREXIT(cinfo, JERR_BAD_J_COLORSPACE);
+        }
+        break;
+
+    case JCS_RGB:
+    case JCS_YCbCr:
+        if (cinfo->num_components != 3)
+        {
+            ERREXIT(cinfo, JERR_BAD_J_COLORSPACE);
+        }
+        break;
+
+    case JCS_CMYK:
+    case JCS_YCCK:
+        if (cinfo->num_components != 4)
+        {
+            ERREXIT(cinfo, JERR_BAD_J_COLORSPACE);
+        }
+        break;
+
+    default:			/* JCS_UNKNOWN can be anything */
+        if (cinfo->num_components < 1)
+        {
+            ERREXIT(cinfo, JERR_BAD_J_COLORSPACE);
+        }
+        break;
+    }
+
+    /* Set out_color_components and conversion method based on requested space.
+     * Also clear the component_needed flags for any unused components,
+     * so that earlier pipeline stages can avoid useless computation.
+     */
+
+    switch (cinfo->out_color_space)
+    {
+    case JCS_GRAYSCALE:
+        cinfo->out_color_components = 1;
+        if (cinfo->jpeg_color_space == JCS_GRAYSCALE ||
+                cinfo->jpeg_color_space == JCS_YCbCr)
+        {
+            cconvert->pub.color_convert = grayscale_convert;
+            /* For color->grayscale conversion, only the Y (0) component is needed */
+            for (ci = 1; ci < cinfo->num_components; ci++)
+            {
+                cinfo->comp_info[ci].component_needed = FALSE;
+            }
+        }
+        else
+        {
+            ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
+        }
+        break;
+
+    case JCS_RGB:
+        cinfo->out_color_components = RGB_PIXELSIZE;
+        if (cinfo->jpeg_color_space == JCS_YCbCr)
+        {
+            cconvert->pub.color_convert = ycc_rgb_convert;
+            build_ycc_rgb_table(cinfo);
+        }
+        else if (cinfo->jpeg_color_space == JCS_GRAYSCALE)
+        {
+            cconvert->pub.color_convert = gray_rgb_convert;
+        }
+        else if (cinfo->jpeg_color_space == JCS_RGB && RGB_PIXELSIZE == 3)
+        {
+            cconvert->pub.color_convert = null_convert;
+        }
+        else
+        {
+            ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
+        }
+        break;
+
+    case JCS_CMYK:
+        cinfo->out_color_components = 4;
+        if (cinfo->jpeg_color_space == JCS_YCCK)
+        {
+            cconvert->pub.color_convert = ycck_cmyk_convert;
+            build_ycc_rgb_table(cinfo);
+        }
+        else if (cinfo->jpeg_color_space == JCS_CMYK)
+        {
+            cconvert->pub.color_convert = null_convert;
+        }
+        else
+        {
+            ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
+        }
+        break;
+
+    default:
+        /* Permit null conversion to same output space */
+        if (cinfo->out_color_space == cinfo->jpeg_color_space)
+        {
+            cinfo->out_color_components = cinfo->num_components;
+            cconvert->pub.color_convert = null_convert;
+        }
+        else			/* unsupported non-null conversion */
+        {
+            ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
+        }
+        break;
+    }
+
+    if (cinfo->quantize_colors)
+    {
+        cinfo->output_components = 1;    /* single colormapped output component */
+    }
+    else
+    {
+        cinfo->output_components = cinfo->out_color_components;
+    }
+}
diff -NEaurb neo/renderer/jpeg-8c/jdct.h neo/renderer/jpeg-8c/jdct.h
--- neo/renderer/jpeg-8c/jdct.h	1970-01-01 00:00:00 +0000
+++ neo/renderer/jpeg-8c/jdct.h	2013-08-11 00:20:45 +0000
@@ -0,0 +1,393 @@
+/*
+ * jdct.h
+ *
+ * Copyright (C) 1994-1996, Thomas G. Lane.
+ * This file is part of the Independent JPEG Group's software.
+ * For conditions of distribution and use, see the accompanying README file.
+ *
+ * This include file contains common declarations for the forward and
+ * inverse DCT modules.  These declarations are private to the DCT managers
+ * (jcdctmgr.c, jddctmgr.c) and the individual DCT algorithms.
+ * The individual DCT algorithms are kept in separate files to ease
+ * machine-dependent tuning (e.g., assembly coding).
+ */
+
+
+/*
+ * A forward DCT routine is given a pointer to an input sample array and
+ * a pointer to a work area of type DCTELEM[]; the DCT is to be performed
+ * in-place in that buffer.  Type DCTELEM is int for 8-bit samples, INT32
+ * for 12-bit samples.  (NOTE: Floating-point DCT implementations use an
+ * array of type FAST_FLOAT, instead.)
+ * The input data is to be fetched from the sample array starting at a
+ * specified column.  (Any row offset needed will be applied to the array
+ * pointer before it is passed to the FDCT code.)
+ * Note that the number of samples fetched by the FDCT routine is
+ * DCT_h_scaled_size * DCT_v_scaled_size.
+ * The DCT outputs are returned scaled up by a factor of 8; they therefore
+ * have a range of +-8K for 8-bit data, +-128K for 12-bit data.  This
+ * convention improves accuracy in integer implementations and saves some
+ * work in floating-point ones.
+ * Quantization of the output coefficients is done by jcdctmgr.c.
+ */
+
+#if BITS_IN_JSAMPLE == 8
+typedef int DCTELEM;		/* 16 or 32 bits is fine */
+#else
+typedef INT32 DCTELEM;		/* must have 32 bits */
+#endif
+
+typedef JMETHOD(void, forward_DCT_method_ptr, (DCTELEM * data,
+                JSAMPARRAY sample_data,
+                JDIMENSION start_col));
+typedef JMETHOD(void, float_DCT_method_ptr, (FAST_FLOAT * data,
+                JSAMPARRAY sample_data,
+                JDIMENSION start_col));
+
+
+/*
+ * An inverse DCT routine is given a pointer to the input JBLOCK and a pointer
+ * to an output sample array.  The routine must dequantize the input data as
+ * well as perform the IDCT; for dequantization, it uses the multiplier table
+ * pointed to by compptr->dct_table.  The output data is to be placed into the
+ * sample array starting at a specified column.  (Any row offset needed will
+ * be applied to the array pointer before it is passed to the IDCT code.)
+ * Note that the number of samples emitted by the IDCT routine is
+ * DCT_h_scaled_size * DCT_v_scaled_size.
+ */
+
+/* typedef inverse_DCT_method_ptr is declared in jpegint.h */
+
+/*
+ * Each IDCT routine has its own ideas about the best dct_table element type.
+ */
+
+typedef MULTIPLIER ISLOW_MULT_TYPE; /* short or int, whichever is faster */
+#if BITS_IN_JSAMPLE == 8
+typedef MULTIPLIER IFAST_MULT_TYPE; /* 16 bits is OK, use short if faster */
+#define IFAST_SCALE_BITS  2	/* fractional bits in scale factors */
+#else
+typedef INT32 IFAST_MULT_TYPE;	/* need 32 bits for scaled quantizers */
+#define IFAST_SCALE_BITS  13	/* fractional bits in scale factors */
+#endif
+typedef FAST_FLOAT FLOAT_MULT_TYPE; /* preferred floating type */
+
+
+/*
+ * Each IDCT routine is responsible for range-limiting its results and
+ * converting them to unsigned form (0..MAXJSAMPLE).  The raw outputs could
+ * be quite far out of range if the input data is corrupt, so a bulletproof
+ * range-limiting step is required.  We use a mask-and-table-lookup method
+ * to do the combined operations quickly.  See the comments with
+ * prepare_range_limit_table (in jdmaster.c) for more info.
+ */
+
+#define IDCT_range_limit(cinfo)  ((cinfo)->sample_range_limit + CENTERJSAMPLE)
+
+#define RANGE_MASK  (MAXJSAMPLE * 4 + 3) /* 2 bits wider than legal samples */
+
+
+/* Short forms of external names for systems with brain-damaged linkers. */
+
+#ifdef NEED_SHORT_EXTERNAL_NAMES
+#define jpeg_fdct_islow		jFDislow
+#define jpeg_fdct_ifast		jFDifast
+#define jpeg_fdct_float		jFDfloat
+#define jpeg_fdct_7x7		jFD7x7
+#define jpeg_fdct_6x6		jFD6x6
+#define jpeg_fdct_5x5		jFD5x5
+#define jpeg_fdct_4x4		jFD4x4
+#define jpeg_fdct_3x3		jFD3x3
+#define jpeg_fdct_2x2		jFD2x2
+#define jpeg_fdct_1x1		jFD1x1
+#define jpeg_fdct_9x9		jFD9x9
+#define jpeg_fdct_10x10		jFD10x10
+#define jpeg_fdct_11x11		jFD11x11
+#define jpeg_fdct_12x12		jFD12x12
+#define jpeg_fdct_13x13		jFD13x13
+#define jpeg_fdct_14x14		jFD14x14
+#define jpeg_fdct_15x15		jFD15x15
+#define jpeg_fdct_16x16		jFD16x16
+#define jpeg_fdct_16x8		jFD16x8
+#define jpeg_fdct_14x7		jFD14x7
+#define jpeg_fdct_12x6		jFD12x6
+#define jpeg_fdct_10x5		jFD10x5
+#define jpeg_fdct_8x4		jFD8x4
+#define jpeg_fdct_6x3		jFD6x3
+#define jpeg_fdct_4x2		jFD4x2
+#define jpeg_fdct_2x1		jFD2x1
+#define jpeg_fdct_8x16		jFD8x16
+#define jpeg_fdct_7x14		jFD7x14
+#define jpeg_fdct_6x12		jFD6x12
+#define jpeg_fdct_5x10		jFD5x10
+#define jpeg_fdct_4x8		jFD4x8
+#define jpeg_fdct_3x6		jFD3x6
+#define jpeg_fdct_2x4		jFD2x4
+#define jpeg_fdct_1x2		jFD1x2
+#define jpeg_idct_islow		jRDislow
+#define jpeg_idct_ifast		jRDifast
+#define jpeg_idct_float		jRDfloat
+#define jpeg_idct_7x7		jRD7x7
+#define jpeg_idct_6x6		jRD6x6
+#define jpeg_idct_5x5		jRD5x5
+#define jpeg_idct_4x4		jRD4x4
+#define jpeg_idct_3x3		jRD3x3
+#define jpeg_idct_2x2		jRD2x2
+#define jpeg_idct_1x1		jRD1x1
+#define jpeg_idct_9x9		jRD9x9
+#define jpeg_idct_10x10		jRD10x10
+#define jpeg_idct_11x11		jRD11x11
+#define jpeg_idct_12x12		jRD12x12
+#define jpeg_idct_13x13		jRD13x13
+#define jpeg_idct_14x14		jRD14x14
+#define jpeg_idct_15x15		jRD15x15
+#define jpeg_idct_16x16		jRD16x16
+#define jpeg_idct_16x8		jRD16x8
+#define jpeg_idct_14x7		jRD14x7
+#define jpeg_idct_12x6		jRD12x6
+#define jpeg_idct_10x5		jRD10x5
+#define jpeg_idct_8x4		jRD8x4
+#define jpeg_idct_6x3		jRD6x3
+#define jpeg_idct_4x2		jRD4x2
+#define jpeg_idct_2x1		jRD2x1
+#define jpeg_idct_8x16		jRD8x16
+#define jpeg_idct_7x14		jRD7x14
+#define jpeg_idct_6x12		jRD6x12
+#define jpeg_idct_5x10		jRD5x10
+#define jpeg_idct_4x8		jRD4x8
+#define jpeg_idct_3x6		jRD3x8
+#define jpeg_idct_2x4		jRD2x4
+#define jpeg_idct_1x2		jRD1x2
+#endif /* NEED_SHORT_EXTERNAL_NAMES */
+
+/* Extern declarations for the forward and inverse DCT routines. */
+
+EXTERN(void) jpeg_fdct_islow
+JPP((DCTELEM * data, JSAMPARRAY sample_data, JDIMENSION start_col));
+EXTERN(void) jpeg_fdct_ifast
+JPP((DCTELEM * data, JSAMPARRAY sample_data, JDIMENSION start_col));
+EXTERN(void) jpeg_fdct_float
+JPP((FAST_FLOAT * data, JSAMPARRAY sample_data, JDIMENSION start_col));
+EXTERN(void) jpeg_fdct_7x7
+JPP((DCTELEM * data, JSAMPARRAY sample_data, JDIMENSION start_col));
+EXTERN(void) jpeg_fdct_6x6
+JPP((DCTELEM * data, JSAMPARRAY sample_data, JDIMENSION start_col));
+EXTERN(void) jpeg_fdct_5x5
+JPP((DCTELEM * data, JSAMPARRAY sample_data, JDIMENSION start_col));
+EXTERN(void) jpeg_fdct_4x4
+JPP((DCTELEM * data, JSAMPARRAY sample_data, JDIMENSION start_col));
+EXTERN(void) jpeg_fdct_3x3
+JPP((DCTELEM * data, JSAMPARRAY sample_data, JDIMENSION start_col));
+EXTERN(void) jpeg_fdct_2x2
+JPP((DCTELEM * data, JSAMPARRAY sample_data, JDIMENSION start_col));
+EXTERN(void) jpeg_fdct_1x1
+JPP((DCTELEM * data, JSAMPARRAY sample_data, JDIMENSION start_col));
+EXTERN(void) jpeg_fdct_9x9
+JPP((DCTELEM * data, JSAMPARRAY sample_data, JDIMENSION start_col));
+EXTERN(void) jpeg_fdct_10x10
+JPP((DCTELEM * data, JSAMPARRAY sample_data, JDIMENSION start_col));
+EXTERN(void) jpeg_fdct_11x11
+JPP((DCTELEM * data, JSAMPARRAY sample_data, JDIMENSION start_col));
+EXTERN(void) jpeg_fdct_12x12
+JPP((DCTELEM * data, JSAMPARRAY sample_data, JDIMENSION start_col));
+EXTERN(void) jpeg_fdct_13x13
+JPP((DCTELEM * data, JSAMPARRAY sample_data, JDIMENSION start_col));
+EXTERN(void) jpeg_fdct_14x14
+JPP((DCTELEM * data, JSAMPARRAY sample_data, JDIMENSION start_col));
+EXTERN(void) jpeg_fdct_15x15
+JPP((DCTELEM * data, JSAMPARRAY sample_data, JDIMENSION start_col));
+EXTERN(void) jpeg_fdct_16x16
+JPP((DCTELEM * data, JSAMPARRAY sample_data, JDIMENSION start_col));
+EXTERN(void) jpeg_fdct_16x8
+JPP((DCTELEM * data, JSAMPARRAY sample_data, JDIMENSION start_col));
+EXTERN(void) jpeg_fdct_14x7
+JPP((DCTELEM * data, JSAMPARRAY sample_data, JDIMENSION start_col));
+EXTERN(void) jpeg_fdct_12x6
+JPP((DCTELEM * data, JSAMPARRAY sample_data, JDIMENSION start_col));
+EXTERN(void) jpeg_fdct_10x5
+JPP((DCTELEM * data, JSAMPARRAY sample_data, JDIMENSION start_col));
+EXTERN(void) jpeg_fdct_8x4
+JPP((DCTELEM * data, JSAMPARRAY sample_data, JDIMENSION start_col));
+EXTERN(void) jpeg_fdct_6x3
+JPP((DCTELEM * data, JSAMPARRAY sample_data, JDIMENSION start_col));
+EXTERN(void) jpeg_fdct_4x2
+JPP((DCTELEM * data, JSAMPARRAY sample_data, JDIMENSION start_col));
+EXTERN(void) jpeg_fdct_2x1
+JPP((DCTELEM * data, JSAMPARRAY sample_data, JDIMENSION start_col));
+EXTERN(void) jpeg_fdct_8x16
+JPP((DCTELEM * data, JSAMPARRAY sample_data, JDIMENSION start_col));
+EXTERN(void) jpeg_fdct_7x14
+JPP((DCTELEM * data, JSAMPARRAY sample_data, JDIMENSION start_col));
+EXTERN(void) jpeg_fdct_6x12
+JPP((DCTELEM * data, JSAMPARRAY sample_data, JDIMENSION start_col));
+EXTERN(void) jpeg_fdct_5x10
+JPP((DCTELEM * data, JSAMPARRAY sample_data, JDIMENSION start_col));
+EXTERN(void) jpeg_fdct_4x8
+JPP((DCTELEM * data, JSAMPARRAY sample_data, JDIMENSION start_col));
+EXTERN(void) jpeg_fdct_3x6
+JPP((DCTELEM * data, JSAMPARRAY sample_data, JDIMENSION start_col));
+EXTERN(void) jpeg_fdct_2x4
+JPP((DCTELEM * data, JSAMPARRAY sample_data, JDIMENSION start_col));
+EXTERN(void) jpeg_fdct_1x2
+JPP((DCTELEM * data, JSAMPARRAY sample_data, JDIMENSION start_col));
+
+EXTERN(void) jpeg_idct_islow
+JPP((j_decompress_ptr cinfo, jpeg_component_info * compptr,
+     JCOEFPTR coef_block, JSAMPARRAY output_buf, JDIMENSION output_col));
+EXTERN(void) jpeg_idct_ifast
+JPP((j_decompress_ptr cinfo, jpeg_component_info * compptr,
+     JCOEFPTR coef_block, JSAMPARRAY output_buf, JDIMENSION output_col));
+EXTERN(void) jpeg_idct_float
+JPP((j_decompress_ptr cinfo, jpeg_component_info * compptr,
+     JCOEFPTR coef_block, JSAMPARRAY output_buf, JDIMENSION output_col));
+EXTERN(void) jpeg_idct_7x7
+JPP((j_decompress_ptr cinfo, jpeg_component_info * compptr,
+     JCOEFPTR coef_block, JSAMPARRAY output_buf, JDIMENSION output_col));
+EXTERN(void) jpeg_idct_6x6
+JPP((j_decompress_ptr cinfo, jpeg_component_info * compptr,
+     JCOEFPTR coef_block, JSAMPARRAY output_buf, JDIMENSION output_col));
+EXTERN(void) jpeg_idct_5x5
+JPP((j_decompress_ptr cinfo, jpeg_component_info * compptr,
+     JCOEFPTR coef_block, JSAMPARRAY output_buf, JDIMENSION output_col));
+EXTERN(void) jpeg_idct_4x4
+JPP((j_decompress_ptr cinfo, jpeg_component_info * compptr,
+     JCOEFPTR coef_block, JSAMPARRAY output_buf, JDIMENSION output_col));
+EXTERN(void) jpeg_idct_3x3
+JPP((j_decompress_ptr cinfo, jpeg_component_info * compptr,
+     JCOEFPTR coef_block, JSAMPARRAY output_buf, JDIMENSION output_col));
+EXTERN(void) jpeg_idct_2x2
+JPP((j_decompress_ptr cinfo, jpeg_component_info * compptr,
+     JCOEFPTR coef_block, JSAMPARRAY output_buf, JDIMENSION output_col));
+EXTERN(void) jpeg_idct_1x1
+JPP((j_decompress_ptr cinfo, jpeg_component_info * compptr,
+     JCOEFPTR coef_block, JSAMPARRAY output_buf, JDIMENSION output_col));
+EXTERN(void) jpeg_idct_9x9
+JPP((j_decompress_ptr cinfo, jpeg_component_info * compptr,
+     JCOEFPTR coef_block, JSAMPARRAY output_buf, JDIMENSION output_col));
+EXTERN(void) jpeg_idct_10x10
+JPP((j_decompress_ptr cinfo, jpeg_component_info * compptr,
+     JCOEFPTR coef_block, JSAMPARRAY output_buf, JDIMENSION output_col));
+EXTERN(void) jpeg_idct_11x11
+JPP((j_decompress_ptr cinfo, jpeg_component_info * compptr,
+     JCOEFPTR coef_block, JSAMPARRAY output_buf, JDIMENSION output_col));
+EXTERN(void) jpeg_idct_12x12
+JPP((j_decompress_ptr cinfo, jpeg_component_info * compptr,
+     JCOEFPTR coef_block, JSAMPARRAY output_buf, JDIMENSION output_col));
+EXTERN(void) jpeg_idct_13x13
+JPP((j_decompress_ptr cinfo, jpeg_component_info * compptr,
+     JCOEFPTR coef_block, JSAMPARRAY output_buf, JDIMENSION output_col));
+EXTERN(void) jpeg_idct_14x14
+JPP((j_decompress_ptr cinfo, jpeg_component_info * compptr,
+     JCOEFPTR coef_block, JSAMPARRAY output_buf, JDIMENSION output_col));
+EXTERN(void) jpeg_idct_15x15
+JPP((j_decompress_ptr cinfo, jpeg_component_info * compptr,
+     JCOEFPTR coef_block, JSAMPARRAY output_buf, JDIMENSION output_col));
+EXTERN(void) jpeg_idct_16x16
+JPP((j_decompress_ptr cinfo, jpeg_component_info * compptr,
+     JCOEFPTR coef_block, JSAMPARRAY output_buf, JDIMENSION output_col));
+EXTERN(void) jpeg_idct_16x8
+JPP((j_decompress_ptr cinfo, jpeg_component_info * compptr,
+     JCOEFPTR coef_block, JSAMPARRAY output_buf, JDIMENSION output_col));
+EXTERN(void) jpeg_idct_14x7
+JPP((j_decompress_ptr cinfo, jpeg_component_info * compptr,
+     JCOEFPTR coef_block, JSAMPARRAY output_buf, JDIMENSION output_col));
+EXTERN(void) jpeg_idct_12x6
+JPP((j_decompress_ptr cinfo, jpeg_component_info * compptr,
+     JCOEFPTR coef_block, JSAMPARRAY output_buf, JDIMENSION output_col));
+EXTERN(void) jpeg_idct_10x5
+JPP((j_decompress_ptr cinfo, jpeg_component_info * compptr,
+     JCOEFPTR coef_block, JSAMPARRAY output_buf, JDIMENSION output_col));
+EXTERN(void) jpeg_idct_8x4
+JPP((j_decompress_ptr cinfo, jpeg_component_info * compptr,
+     JCOEFPTR coef_block, JSAMPARRAY output_buf, JDIMENSION output_col));
+EXTERN(void) jpeg_idct_6x3
+JPP((j_decompress_ptr cinfo, jpeg_component_info * compptr,
+     JCOEFPTR coef_block, JSAMPARRAY output_buf, JDIMENSION output_col));
+EXTERN(void) jpeg_idct_4x2
+JPP((j_decompress_ptr cinfo, jpeg_component_info * compptr,
+     JCOEFPTR coef_block, JSAMPARRAY output_buf, JDIMENSION output_col));
+EXTERN(void) jpeg_idct_2x1
+JPP((j_decompress_ptr cinfo, jpeg_component_info * compptr,
+     JCOEFPTR coef_block, JSAMPARRAY output_buf, JDIMENSION output_col));
+EXTERN(void) jpeg_idct_8x16
+JPP((j_decompress_ptr cinfo, jpeg_component_info * compptr,
+     JCOEFPTR coef_block, JSAMPARRAY output_buf, JDIMENSION output_col));
+EXTERN(void) jpeg_idct_7x14
+JPP((j_decompress_ptr cinfo, jpeg_component_info * compptr,
+     JCOEFPTR coef_block, JSAMPARRAY output_buf, JDIMENSION output_col));
+EXTERN(void) jpeg_idct_6x12
+JPP((j_decompress_ptr cinfo, jpeg_component_info * compptr,
+     JCOEFPTR coef_block, JSAMPARRAY output_buf, JDIMENSION output_col));
+EXTERN(void) jpeg_idct_5x10
+JPP((j_decompress_ptr cinfo, jpeg_component_info * compptr,
+     JCOEFPTR coef_block, JSAMPARRAY output_buf, JDIMENSION output_col));
+EXTERN(void) jpeg_idct_4x8
+JPP((j_decompress_ptr cinfo, jpeg_component_info * compptr,
+     JCOEFPTR coef_block, JSAMPARRAY output_buf, JDIMENSION output_col));
+EXTERN(void) jpeg_idct_3x6
+JPP((j_decompress_ptr cinfo, jpeg_component_info * compptr,
+     JCOEFPTR coef_block, JSAMPARRAY output_buf, JDIMENSION output_col));
+EXTERN(void) jpeg_idct_2x4
+JPP((j_decompress_ptr cinfo, jpeg_component_info * compptr,
+     JCOEFPTR coef_block, JSAMPARRAY output_buf, JDIMENSION output_col));
+EXTERN(void) jpeg_idct_1x2
+JPP((j_decompress_ptr cinfo, jpeg_component_info * compptr,
+     JCOEFPTR coef_block, JSAMPARRAY output_buf, JDIMENSION output_col));
+
+
+/*
+ * Macros for handling fixed-point arithmetic; these are used by many
+ * but not all of the DCT/IDCT modules.
+ *
+ * All values are expected to be of type INT32.
+ * Fractional constants are scaled left by CONST_BITS bits.
+ * CONST_BITS is defined within each module using these macros,
+ * and may differ from one module to the next.
+ */
+
+#define ONE	((INT32) 1)
+#define CONST_SCALE (ONE << CONST_BITS)
+
+/* Convert a positive real constant to an integer scaled by CONST_SCALE.
+ * Caution: some C compilers fail to reduce "FIX(constant)" at compile time,
+ * thus causing a lot of useless floating-point operations at run time.
+ */
+
+#define FIX(x)	((INT32) ((x) * CONST_SCALE + 0.5))
+
+/* Descale and correctly round an INT32 value that's scaled by N bits.
+ * We assume RIGHT_SHIFT rounds towards minus infinity, so adding
+ * the fudge factor is correct for either sign of X.
+ */
+
+#define DESCALE(x,n)  RIGHT_SHIFT((x) + (ONE << ((n)-1)), n)
+
+/* Multiply an INT32 variable by an INT32 constant to yield an INT32 result.
+ * This macro is used only when the two inputs will actually be no more than
+ * 16 bits wide, so that a 16x16->32 bit multiply can be used instead of a
+ * full 32x32 multiply.  This provides a useful speedup on many machines.
+ * Unfortunately there is no way to specify a 16x16->32 multiply portably
+ * in C, but some C compilers will do the right thing if you provide the
+ * correct combination of casts.
+ */
+
+#ifdef SHORTxSHORT_32		/* may work if 'int' is 32 bits */
+#define MULTIPLY16C16(var,const)  (((INT16) (var)) * ((INT16) (const)))
+#endif
+#ifdef SHORTxLCONST_32		/* known to work with Microsoft C 6.0 */
+#define MULTIPLY16C16(var,const)  (((INT16) (var)) * ((INT32) (const)))
+#endif
+
+#ifndef MULTIPLY16C16		/* default definition */
+#define MULTIPLY16C16(var,const)  ((var) * (const))
+#endif
+
+/* Same except both inputs are variables. */
+
+#ifdef SHORTxSHORT_32		/* may work if 'int' is 32 bits */
+#define MULTIPLY16V16(var1,var2)  (((INT16) (var1)) * ((INT16) (var2)))
+#endif
+
+#ifndef MULTIPLY16V16		/* default definition */
+#define MULTIPLY16V16(var1,var2)  ((var1) * (var2))
+#endif
diff -NEaurb neo/renderer/jpeg-8c/jddctmgr.c neo/renderer/jpeg-8c/jddctmgr.c
--- neo/renderer/jpeg-8c/jddctmgr.c	1970-01-01 00:00:00 +0000
+++ neo/renderer/jpeg-8c/jddctmgr.c	2012-11-17 01:20:41 +0000
@@ -0,0 +1,401 @@
+/*
+ * jddctmgr.c
+ *
+ * Copyright (C) 1994-1996, Thomas G. Lane.
+ * Modified 2002-2010 by Guido Vollbeding.
+ * This file is part of the Independent JPEG Group's software.
+ * For conditions of distribution and use, see the accompanying README file.
+ *
+ * This file contains the inverse-DCT management logic.
+ * This code selects a particular IDCT implementation to be used,
+ * and it performs related housekeeping chores.  No code in this file
+ * is executed per IDCT step, only during output pass setup.
+ *
+ * Note that the IDCT routines are responsible for performing coefficient
+ * dequantization as well as the IDCT proper.  This module sets up the
+ * dequantization multiplier table needed by the IDCT routine.
+ */
+
+#define JPEG_INTERNALS
+#include "jinclude.h"
+#include "jpeglib.h"
+#include "jdct.h"		/* Private declarations for DCT subsystem */
+
+
+/*
+ * The decompressor input side (jdinput.c) saves away the appropriate
+ * quantization table for each component at the start of the first scan
+ * involving that component.  (This is necessary in order to correctly
+ * decode files that reuse Q-table slots.)
+ * When we are ready to make an output pass, the saved Q-table is converted
+ * to a multiplier table that will actually be used by the IDCT routine.
+ * The multiplier table contents are IDCT-method-dependent.  To support
+ * application changes in IDCT method between scans, we can remake the
+ * multiplier tables if necessary.
+ * In buffered-image mode, the first output pass may occur before any data
+ * has been seen for some components, and thus before their Q-tables have
+ * been saved away.  To handle this case, multiplier tables are preset
+ * to zeroes; the result of the IDCT will be a neutral gray level.
+ */
+
+
+/* Private subobject for this module */
+
+typedef struct
+{
+    struct jpeg_inverse_dct pub;	/* public fields */
+
+    /* This array contains the IDCT method code that each multiplier table
+     * is currently set up for, or -1 if it's not yet set up.
+     * The actual multiplier tables are pointed to by dct_table in the
+     * per-component comp_info structures.
+     */
+    int cur_method[MAX_COMPONENTS];
+} my_idct_controller;
+
+typedef my_idct_controller * my_idct_ptr;
+
+
+/* Allocated multiplier tables: big enough for any supported variant */
+
+typedef union
+{
+    ISLOW_MULT_TYPE islow_array[DCTSIZE2];
+#ifdef DCT_IFAST_SUPPORTED
+    IFAST_MULT_TYPE ifast_array[DCTSIZE2];
+#endif
+#ifdef DCT_FLOAT_SUPPORTED
+    FLOAT_MULT_TYPE float_array[DCTSIZE2];
+#endif
+} multiplier_table;
+
+
+/* The current scaled-IDCT routines require ISLOW-style multiplier tables,
+ * so be sure to compile that code if either ISLOW or SCALING is requested.
+ */
+#ifdef DCT_ISLOW_SUPPORTED
+#define PROVIDE_ISLOW_TABLES
+#else
+#ifdef IDCT_SCALING_SUPPORTED
+#define PROVIDE_ISLOW_TABLES
+#endif
+#endif
+
+
+/*
+ * Prepare for an output pass.
+ * Here we select the proper IDCT routine for each component and build
+ * a matching multiplier table.
+ */
+
+METHODDEF(void)
+start_pass (j_decompress_ptr cinfo)
+{
+    my_idct_ptr idct = (my_idct_ptr) cinfo->idct;
+    int ci, i;
+    jpeg_component_info *compptr;
+    int method = 0;
+    inverse_DCT_method_ptr method_ptr = NULL;
+    JQUANT_TBL * qtbl;
+
+    for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
+            ci++, compptr++)
+    {
+        /* Select the proper IDCT routine for this component's scaling */
+        switch ((compptr->DCT_h_scaled_size << 8) + compptr->DCT_v_scaled_size)
+        {
+#ifdef IDCT_SCALING_SUPPORTED
+        case ((1 << 8) + 1):
+            method_ptr = jpeg_idct_1x1;
+            method = JDCT_ISLOW;	/* jidctint uses islow-style table */
+            break;
+        case ((2 << 8) + 2):
+            method_ptr = jpeg_idct_2x2;
+            method = JDCT_ISLOW;	/* jidctint uses islow-style table */
+            break;
+        case ((3 << 8) + 3):
+            method_ptr = jpeg_idct_3x3;
+            method = JDCT_ISLOW;	/* jidctint uses islow-style table */
+            break;
+        case ((4 << 8) + 4):
+            method_ptr = jpeg_idct_4x4;
+            method = JDCT_ISLOW;	/* jidctint uses islow-style table */
+            break;
+        case ((5 << 8) + 5):
+            method_ptr = jpeg_idct_5x5;
+            method = JDCT_ISLOW;	/* jidctint uses islow-style table */
+            break;
+        case ((6 << 8) + 6):
+            method_ptr = jpeg_idct_6x6;
+            method = JDCT_ISLOW;	/* jidctint uses islow-style table */
+            break;
+        case ((7 << 8) + 7):
+            method_ptr = jpeg_idct_7x7;
+            method = JDCT_ISLOW;	/* jidctint uses islow-style table */
+            break;
+        case ((9 << 8) + 9):
+            method_ptr = jpeg_idct_9x9;
+            method = JDCT_ISLOW;	/* jidctint uses islow-style table */
+            break;
+        case ((10 << 8) + 10):
+            method_ptr = jpeg_idct_10x10;
+            method = JDCT_ISLOW;	/* jidctint uses islow-style table */
+            break;
+        case ((11 << 8) + 11):
+            method_ptr = jpeg_idct_11x11;
+            method = JDCT_ISLOW;	/* jidctint uses islow-style table */
+            break;
+        case ((12 << 8) + 12):
+            method_ptr = jpeg_idct_12x12;
+            method = JDCT_ISLOW;	/* jidctint uses islow-style table */
+            break;
+        case ((13 << 8) + 13):
+            method_ptr = jpeg_idct_13x13;
+            method = JDCT_ISLOW;	/* jidctint uses islow-style table */
+            break;
+        case ((14 << 8) + 14):
+            method_ptr = jpeg_idct_14x14;
+            method = JDCT_ISLOW;	/* jidctint uses islow-style table */
+            break;
+        case ((15 << 8) + 15):
+            method_ptr = jpeg_idct_15x15;
+            method = JDCT_ISLOW;	/* jidctint uses islow-style table */
+            break;
+        case ((16 << 8) + 16):
+            method_ptr = jpeg_idct_16x16;
+            method = JDCT_ISLOW;	/* jidctint uses islow-style table */
+            break;
+        case ((16 << 8) + 8):
+            method_ptr = jpeg_idct_16x8;
+            method = JDCT_ISLOW;	/* jidctint uses islow-style table */
+            break;
+        case ((14 << 8) + 7):
+            method_ptr = jpeg_idct_14x7;
+            method = JDCT_ISLOW;	/* jidctint uses islow-style table */
+            break;
+        case ((12 << 8) + 6):
+            method_ptr = jpeg_idct_12x6;
+            method = JDCT_ISLOW;	/* jidctint uses islow-style table */
+            break;
+        case ((10 << 8) + 5):
+            method_ptr = jpeg_idct_10x5;
+            method = JDCT_ISLOW;	/* jidctint uses islow-style table */
+            break;
+        case ((8 << 8) + 4):
+            method_ptr = jpeg_idct_8x4;
+            method = JDCT_ISLOW;	/* jidctint uses islow-style table */
+            break;
+        case ((6 << 8) + 3):
+            method_ptr = jpeg_idct_6x3;
+            method = JDCT_ISLOW;	/* jidctint uses islow-style table */
+            break;
+        case ((4 << 8) + 2):
+            method_ptr = jpeg_idct_4x2;
+            method = JDCT_ISLOW;	/* jidctint uses islow-style table */
+            break;
+        case ((2 << 8) + 1):
+            method_ptr = jpeg_idct_2x1;
+            method = JDCT_ISLOW;	/* jidctint uses islow-style table */
+            break;
+        case ((8 << 8) + 16):
+            method_ptr = jpeg_idct_8x16;
+            method = JDCT_ISLOW;	/* jidctint uses islow-style table */
+            break;
+        case ((7 << 8) + 14):
+            method_ptr = jpeg_idct_7x14;
+            method = JDCT_ISLOW;	/* jidctint uses islow-style table */
+            break;
+        case ((6 << 8) + 12):
+            method_ptr = jpeg_idct_6x12;
+            method = JDCT_ISLOW;	/* jidctint uses islow-style table */
+            break;
+        case ((5 << 8) + 10):
+            method_ptr = jpeg_idct_5x10;
+            method = JDCT_ISLOW;	/* jidctint uses islow-style table */
+            break;
+        case ((4 << 8) + 8):
+            method_ptr = jpeg_idct_4x8;
+            method = JDCT_ISLOW;	/* jidctint uses islow-style table */
+            break;
+        case ((3 << 8) + 6):
+            method_ptr = jpeg_idct_3x6;
+            method = JDCT_ISLOW;	/* jidctint uses islow-style table */
+            break;
+        case ((2 << 8) + 4):
+            method_ptr = jpeg_idct_2x4;
+            method = JDCT_ISLOW;	/* jidctint uses islow-style table */
+            break;
+        case ((1 << 8) + 2):
+            method_ptr = jpeg_idct_1x2;
+            method = JDCT_ISLOW;	/* jidctint uses islow-style table */
+            break;
+#endif
+        case ((DCTSIZE << 8) + DCTSIZE):
+            switch (cinfo->dct_method)
+            {
+#ifdef DCT_ISLOW_SUPPORTED
+            case JDCT_ISLOW:
+                method_ptr = jpeg_idct_islow;
+                method = JDCT_ISLOW;
+                break;
+#endif
+#ifdef DCT_IFAST_SUPPORTED
+            case JDCT_IFAST:
+                method_ptr = jpeg_idct_ifast;
+                method = JDCT_IFAST;
+                break;
+#endif
+#ifdef DCT_FLOAT_SUPPORTED
+            case JDCT_FLOAT:
+                method_ptr = jpeg_idct_float;
+                method = JDCT_FLOAT;
+                break;
+#endif
+            default:
+                ERREXIT(cinfo, JERR_NOT_COMPILED);
+                break;
+            }
+            break;
+        default:
+            ERREXIT2(cinfo, JERR_BAD_DCTSIZE,
+                     compptr->DCT_h_scaled_size, compptr->DCT_v_scaled_size);
+            break;
+        }
+        idct->pub.inverse_DCT[ci] = method_ptr;
+        /* Create multiplier table from quant table.
+         * However, we can skip this if the component is uninteresting
+         * or if we already built the table.  Also, if no quant table
+         * has yet been saved for the component, we leave the
+         * multiplier table all-zero; we'll be reading zeroes from the
+         * coefficient controller's buffer anyway.
+         */
+        if (! compptr->component_needed || idct->cur_method[ci] == method)
+        {
+            continue;
+        }
+        qtbl = compptr->quant_table;
+        if (qtbl == NULL)		/* happens if no data yet for component */
+        {
+            continue;
+        }
+        idct->cur_method[ci] = method;
+        switch (method)
+        {
+#ifdef PROVIDE_ISLOW_TABLES
+        case JDCT_ISLOW:
+        {
+            /* For LL&M IDCT method, multipliers are equal to raw quantization
+             * coefficients, but are stored as ints to ensure access efficiency.
+             */
+            ISLOW_MULT_TYPE * ismtbl = (ISLOW_MULT_TYPE *) compptr->dct_table;
+            for (i = 0; i < DCTSIZE2; i++)
+            {
+                ismtbl[i] = (ISLOW_MULT_TYPE) qtbl->quantval[i];
+            }
+        }
+        break;
+#endif
+#ifdef DCT_IFAST_SUPPORTED
+        case JDCT_IFAST:
+        {
+            /* For AA&N IDCT method, multipliers are equal to quantization
+             * coefficients scaled by scalefactor[row]*scalefactor[col], where
+             *   scalefactor[0] = 1
+             *   scalefactor[k] = cos(k*PI/16) * sqrt(2)    for k=1..7
+             * For integer operation, the multiplier table is to be scaled by
+             * IFAST_SCALE_BITS.
+             */
+            IFAST_MULT_TYPE * ifmtbl = (IFAST_MULT_TYPE *) compptr->dct_table;
+#define CONST_BITS 14
+            static const INT16 aanscales[DCTSIZE2] =
+            {
+                /* precomputed values scaled up by 14 bits */
+                16384, 22725, 21407, 19266, 16384, 12873,  8867,  4520,
+                22725, 31521, 29692, 26722, 22725, 17855, 12299,  6270,
+                21407, 29692, 27969, 25172, 21407, 16819, 11585,  5906,
+                19266, 26722, 25172, 22654, 19266, 15137, 10426,  5315,
+                16384, 22725, 21407, 19266, 16384, 12873,  8867,  4520,
+                12873, 17855, 16819, 15137, 12873, 10114,  6967,  3552,
+                8867, 12299, 11585, 10426,  8867,  6967,  4799,  2446,
+                4520,  6270,  5906,  5315,  4520,  3552,  2446,  1247
+            };
+            SHIFT_TEMPS
+
+            for (i = 0; i < DCTSIZE2; i++)
+            {
+                ifmtbl[i] = (IFAST_MULT_TYPE)
+                            DESCALE(MULTIPLY16V16((INT32) qtbl->quantval[i],
+                                                  (INT32) aanscales[i]),
+                                    CONST_BITS-IFAST_SCALE_BITS);
+            }
+        }
+        break;
+#endif
+#ifdef DCT_FLOAT_SUPPORTED
+        case JDCT_FLOAT:
+        {
+            /* For float AA&N IDCT method, multipliers are equal to quantization
+             * coefficients scaled by scalefactor[row]*scalefactor[col], where
+             *   scalefactor[0] = 1
+             *   scalefactor[k] = cos(k*PI/16) * sqrt(2)    for k=1..7
+             * We apply a further scale factor of 1/8.
+             */
+            FLOAT_MULT_TYPE * fmtbl = (FLOAT_MULT_TYPE *) compptr->dct_table;
+            int row, col;
+            static const double aanscalefactor[DCTSIZE] =
+            {
+                1.0, 1.387039845, 1.306562965, 1.175875602,
+                1.0, 0.785694958, 0.541196100, 0.275899379
+            };
+
+            i = 0;
+            for (row = 0; row < DCTSIZE; row++)
+            {
+                for (col = 0; col < DCTSIZE; col++)
+                {
+                    fmtbl[i] = (FLOAT_MULT_TYPE)
+                               ((double) qtbl->quantval[i] *
+                                aanscalefactor[row] * aanscalefactor[col] * 0.125);
+                    i++;
+                }
+            }
+        }
+        break;
+#endif
+        default:
+            ERREXIT(cinfo, JERR_NOT_COMPILED);
+            break;
+        }
+    }
+}
+
+
+/*
+ * Initialize IDCT manager.
+ */
+
+GLOBAL(void)
+jinit_inverse_dct (j_decompress_ptr cinfo)
+{
+    my_idct_ptr idct;
+    int ci;
+    jpeg_component_info *compptr;
+
+    idct = (my_idct_ptr)
+           (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
+                                       SIZEOF(my_idct_controller));
+    cinfo->idct = (struct jpeg_inverse_dct *) idct;
+    idct->pub.start_pass = start_pass;
+
+    for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
+            ci++, compptr++)
+    {
+        /* Allocate and pre-zero a multiplier table for each component */
+        compptr->dct_table =
+            (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
+                                        SIZEOF(multiplier_table));
+        MEMZERO(compptr->dct_table, SIZEOF(multiplier_table));
+        /* Mark multiplier table not yet set up for any method */
+        idct->cur_method[ci] = -1;
+    }
+}
diff -NEaurb neo/renderer/jpeg-8c/jdhuff.c neo/renderer/jpeg-8c/jdhuff.c
--- neo/renderer/jpeg-8c/jdhuff.c	1970-01-01 00:00:00 +0000
+++ neo/renderer/jpeg-8c/jdhuff.c	2012-11-17 01:20:40 +0000
@@ -0,0 +1,1820 @@
+/*
+ * jdhuff.c
+ *
+ * Copyright (C) 1991-1997, Thomas G. Lane.
+ * Modified 2006-2009 by Guido Vollbeding.
+ * This file is part of the Independent JPEG Group's software.
+ * For conditions of distribution and use, see the accompanying README file.
+ *
+ * This file contains Huffman entropy decoding routines.
+ * Both sequential and progressive modes are supported in this single module.
+ *
+ * Much of the complexity here has to do with supporting input suspension.
+ * If the data source module demands suspension, we want to be able to back
+ * up to the start of the current MCU.  To do this, we copy state variables
+ * into local working storage, and update them back to the permanent
+ * storage only upon successful completion of an MCU.
+ */
+
+#define JPEG_INTERNALS
+#include "jinclude.h"
+#include "jpeglib.h"
+
+
+/* Derived data constructed for each Huffman table */
+
+#define HUFF_LOOKAHEAD	8	/* # of bits of lookahead */
+
+typedef struct
+{
+    /* Basic tables: (element [0] of each array is unused) */
+    INT32 maxcode[18];		/* largest code of length k (-1 if none) */
+    /* (maxcode[17] is a sentinel to ensure jpeg_huff_decode terminates) */
+    INT32 valoffset[17];		/* huffval[] offset for codes of length k */
+    /* valoffset[k] = huffval[] index of 1st symbol of code length k, less
+     * the smallest code of length k; so given a code of length k, the
+     * corresponding symbol is huffval[code + valoffset[k]]
+     */
+
+    /* Link to public Huffman table (needed only in jpeg_huff_decode) */
+    JHUFF_TBL *pub;
+
+    /* Lookahead tables: indexed by the next HUFF_LOOKAHEAD bits of
+     * the input data stream.  If the next Huffman code is no more
+     * than HUFF_LOOKAHEAD bits long, we can obtain its length and
+     * the corresponding symbol directly from these tables.
+     */
+    int look_nbits[1<<HUFF_LOOKAHEAD]; /* # bits, or 0 if too long */
+    UINT8 look_sym[1<<HUFF_LOOKAHEAD]; /* symbol, or unused */
+} d_derived_tbl;
+
+
+/*
+ * Fetching the next N bits from the input stream is a time-critical operation
+ * for the Huffman decoders.  We implement it with a combination of inline
+ * macros and out-of-line subroutines.  Note that N (the number of bits
+ * demanded at one time) never exceeds 15 for JPEG use.
+ *
+ * We read source bytes into get_buffer and dole out bits as needed.
+ * If get_buffer already contains enough bits, they are fetched in-line
+ * by the macros CHECK_BIT_BUFFER and GET_BITS.  When there aren't enough
+ * bits, jpeg_fill_bit_buffer is called; it will attempt to fill get_buffer
+ * as full as possible (not just to the number of bits needed; this
+ * prefetching reduces the overhead cost of calling jpeg_fill_bit_buffer).
+ * Note that jpeg_fill_bit_buffer may return FALSE to indicate suspension.
+ * On TRUE return, jpeg_fill_bit_buffer guarantees that get_buffer contains
+ * at least the requested number of bits --- dummy zeroes are inserted if
+ * necessary.
+ */
+
+typedef INT32 bit_buf_type;	/* type of bit-extraction buffer */
+#define BIT_BUF_SIZE  32	/* size of buffer in bits */
+
+/* If long is > 32 bits on your machine, and shifting/masking longs is
+ * reasonably fast, making bit_buf_type be long and setting BIT_BUF_SIZE
+ * appropriately should be a win.  Unfortunately we can't define the size
+ * with something like  #define BIT_BUF_SIZE (sizeof(bit_buf_type)*8)
+ * because not all machines measure sizeof in 8-bit bytes.
+ */
+
+typedef struct  		/* Bitreading state saved across MCUs */
+{
+    bit_buf_type get_buffer;	/* current bit-extraction buffer */
+    int bits_left;		/* # of unused bits in it */
+} bitread_perm_state;
+
+typedef struct  		/* Bitreading working state within an MCU */
+{
+    /* Current data source location */
+    /* We need a copy, rather than munging the original, in case of suspension */
+    const JOCTET * next_input_byte; /* => next byte to read from source */
+    size_t bytes_in_buffer;	/* # of bytes remaining in source buffer */
+    /* Bit input buffer --- note these values are kept in register variables,
+     * not in this struct, inside the inner loops.
+     */
+    bit_buf_type get_buffer;	/* current bit-extraction buffer */
+    int bits_left;		/* # of unused bits in it */
+    /* Pointer needed by jpeg_fill_bit_buffer. */
+    j_decompress_ptr cinfo;	/* back link to decompress master record */
+} bitread_working_state;
+
+/* Macros to declare and load/save bitread local variables. */
+#define BITREAD_STATE_VARS  \
+	register bit_buf_type get_buffer;  \
+	register int bits_left;  \
+	bitread_working_state br_state
+
+#define BITREAD_LOAD_STATE(cinfop,permstate)  \
+	br_state.cinfo = cinfop; \
+	br_state.next_input_byte = cinfop->src->next_input_byte; \
+	br_state.bytes_in_buffer = cinfop->src->bytes_in_buffer; \
+	get_buffer = permstate.get_buffer; \
+	bits_left = permstate.bits_left;
+
+#define BITREAD_SAVE_STATE(cinfop,permstate)  \
+	cinfop->src->next_input_byte = br_state.next_input_byte; \
+	cinfop->src->bytes_in_buffer = br_state.bytes_in_buffer; \
+	permstate.get_buffer = get_buffer; \
+	permstate.bits_left = bits_left
+
+/*
+ * These macros provide the in-line portion of bit fetching.
+ * Use CHECK_BIT_BUFFER to ensure there are N bits in get_buffer
+ * before using GET_BITS, PEEK_BITS, or DROP_BITS.
+ * The variables get_buffer and bits_left are assumed to be locals,
+ * but the state struct might not be (jpeg_huff_decode needs this).
+ *	CHECK_BIT_BUFFER(state,n,action);
+ *		Ensure there are N bits in get_buffer; if suspend, take action.
+ *      val = GET_BITS(n);
+ *		Fetch next N bits.
+ *      val = PEEK_BITS(n);
+ *		Fetch next N bits without removing them from the buffer.
+ *	DROP_BITS(n);
+ *		Discard next N bits.
+ * The value N should be a simple variable, not an expression, because it
+ * is evaluated multiple times.
+ */
+
+#define CHECK_BIT_BUFFER(state,nbits,action) \
+	{ if (bits_left < (nbits)) {  \
+	    if (! jpeg_fill_bit_buffer(&(state),get_buffer,bits_left,nbits))  \
+	      { action; }  \
+	    get_buffer = (state).get_buffer; bits_left = (state).bits_left; } }
+
+#define GET_BITS(nbits) \
+	(((int) (get_buffer >> (bits_left -= (nbits)))) & BIT_MASK(nbits))
+
+#define PEEK_BITS(nbits) \
+	(((int) (get_buffer >> (bits_left -  (nbits)))) & BIT_MASK(nbits))
+
+#define DROP_BITS(nbits) \
+	(bits_left -= (nbits))
+
+
+/*
+ * Code for extracting next Huffman-coded symbol from input bit stream.
+ * Again, this is time-critical and we make the main paths be macros.
+ *
+ * We use a lookahead table to process codes of up to HUFF_LOOKAHEAD bits
+ * without looping.  Usually, more than 95% of the Huffman codes will be 8
+ * or fewer bits long.  The few overlength codes are handled with a loop,
+ * which need not be inline code.
+ *
+ * Notes about the HUFF_DECODE macro:
+ * 1. Near the end of the data segment, we may fail to get enough bits
+ *    for a lookahead.  In that case, we do it the hard way.
+ * 2. If the lookahead table contains no entry, the next code must be
+ *    more than HUFF_LOOKAHEAD bits long.
+ * 3. jpeg_huff_decode returns -1 if forced to suspend.
+ */
+
+#define HUFF_DECODE(result,state,htbl,failaction,slowlabel) \
+{ register int nb, look; \
+  if (bits_left < HUFF_LOOKAHEAD) { \
+    if (! jpeg_fill_bit_buffer(&state,get_buffer,bits_left, 0)) {failaction;} \
+    get_buffer = state.get_buffer; bits_left = state.bits_left; \
+    if (bits_left < HUFF_LOOKAHEAD) { \
+      nb = 1; goto slowlabel; \
+    } \
+  } \
+  look = PEEK_BITS(HUFF_LOOKAHEAD); \
+  if ((nb = htbl->look_nbits[look]) != 0) { \
+    DROP_BITS(nb); \
+    result = htbl->look_sym[look]; \
+  } else { \
+    nb = HUFF_LOOKAHEAD+1; \
+slowlabel: \
+    if ((result=jpeg_huff_decode(&state,get_buffer,bits_left,htbl,nb)) < 0) \
+	{ failaction; } \
+    get_buffer = state.get_buffer; bits_left = state.bits_left; \
+  } \
+}
+
+
+/*
+ * Expanded entropy decoder object for Huffman decoding.
+ *
+ * The savable_state subrecord contains fields that change within an MCU,
+ * but must not be updated permanently until we complete the MCU.
+ */
+
+typedef struct
+{
+    unsigned int EOBRUN;			/* remaining EOBs in EOBRUN */
+    int last_dc_val[MAX_COMPS_IN_SCAN];	/* last DC coef for each component */
+} savable_state;
+
+/* This macro is to work around compilers with missing or broken
+ * structure assignment.  You'll need to fix this code if you have
+ * such a compiler and you change MAX_COMPS_IN_SCAN.
+ */
+
+#ifndef NO_STRUCT_ASSIGN
+#define ASSIGN_STATE(dest,src)  ((dest) = (src))
+#else
+#if MAX_COMPS_IN_SCAN == 4
+#define ASSIGN_STATE(dest,src)  \
+	((dest).EOBRUN = (src).EOBRUN, \
+	 (dest).last_dc_val[0] = (src).last_dc_val[0], \
+	 (dest).last_dc_val[1] = (src).last_dc_val[1], \
+	 (dest).last_dc_val[2] = (src).last_dc_val[2], \
+	 (dest).last_dc_val[3] = (src).last_dc_val[3])
+#endif
+#endif
+
+
+typedef struct
+{
+    struct jpeg_entropy_decoder pub; /* public fields */
+
+    /* These fields are loaded into local variables at start of each MCU.
+     * In case of suspension, we exit WITHOUT updating them.
+     */
+    bitread_perm_state bitstate;	/* Bit buffer at start of MCU */
+    savable_state saved;		/* Other state at start of MCU */
+
+    /* These fields are NOT loaded into local working state. */
+    boolean insufficient_data;	/* set TRUE after emitting warning */
+    unsigned int restarts_to_go;	/* MCUs left in this restart interval */
+
+    /* Following two fields used only in progressive mode */
+
+    /* Pointers to derived tables (these workspaces have image lifespan) */
+    d_derived_tbl * derived_tbls[NUM_HUFF_TBLS];
+
+    d_derived_tbl * ac_derived_tbl; /* active table during an AC scan */
+
+    /* Following fields used only in sequential mode */
+
+    /* Pointers to derived tables (these workspaces have image lifespan) */
+    d_derived_tbl * dc_derived_tbls[NUM_HUFF_TBLS];
+    d_derived_tbl * ac_derived_tbls[NUM_HUFF_TBLS];
+
+    /* Precalculated info set up by start_pass for use in decode_mcu: */
+
+    /* Pointers to derived tables to be used for each block within an MCU */
+    d_derived_tbl * dc_cur_tbls[D_MAX_BLOCKS_IN_MCU];
+    d_derived_tbl * ac_cur_tbls[D_MAX_BLOCKS_IN_MCU];
+    /* Whether we care about the DC and AC coefficient values for each block */
+    int coef_limit[D_MAX_BLOCKS_IN_MCU];
+} huff_entropy_decoder;
+
+typedef huff_entropy_decoder * huff_entropy_ptr;
+
+
+static const int jpeg_zigzag_order[8][8] =
+{
+    {  0,  1,  5,  6, 14, 15, 27, 28 },
+    {  2,  4,  7, 13, 16, 26, 29, 42 },
+    {  3,  8, 12, 17, 25, 30, 41, 43 },
+    {  9, 11, 18, 24, 31, 40, 44, 53 },
+    { 10, 19, 23, 32, 39, 45, 52, 54 },
+    { 20, 22, 33, 38, 46, 51, 55, 60 },
+    { 21, 34, 37, 47, 50, 56, 59, 61 },
+    { 35, 36, 48, 49, 57, 58, 62, 63 }
+};
+
+static const int jpeg_zigzag_order7[7][7] =
+{
+    {  0,  1,  5,  6, 14, 15, 27 },
+    {  2,  4,  7, 13, 16, 26, 28 },
+    {  3,  8, 12, 17, 25, 29, 38 },
+    {  9, 11, 18, 24, 30, 37, 39 },
+    { 10, 19, 23, 31, 36, 40, 45 },
+    { 20, 22, 32, 35, 41, 44, 46 },
+    { 21, 33, 34, 42, 43, 47, 48 }
+};
+
+static const int jpeg_zigzag_order6[6][6] =
+{
+    {  0,  1,  5,  6, 14, 15 },
+    {  2,  4,  7, 13, 16, 25 },
+    {  3,  8, 12, 17, 24, 26 },
+    {  9, 11, 18, 23, 27, 32 },
+    { 10, 19, 22, 28, 31, 33 },
+    { 20, 21, 29, 30, 34, 35 }
+};
+
+static const int jpeg_zigzag_order5[5][5] =
+{
+    {  0,  1,  5,  6, 14 },
+    {  2,  4,  7, 13, 15 },
+    {  3,  8, 12, 16, 21 },
+    {  9, 11, 17, 20, 22 },
+    { 10, 18, 19, 23, 24 }
+};
+
+static const int jpeg_zigzag_order4[4][4] =
+{
+    { 0,  1,  5,  6 },
+    { 2,  4,  7, 12 },
+    { 3,  8, 11, 13 },
+    { 9, 10, 14, 15 }
+};
+
+static const int jpeg_zigzag_order3[3][3] =
+{
+    { 0, 1, 5 },
+    { 2, 4, 6 },
+    { 3, 7, 8 }
+};
+
+static const int jpeg_zigzag_order2[2][2] =
+{
+    { 0, 1 },
+    { 2, 3 }
+};
+
+
+/*
+ * Compute the derived values for a Huffman table.
+ * This routine also performs some validation checks on the table.
+ */
+
+LOCAL(void)
+jpeg_make_d_derived_tbl (j_decompress_ptr cinfo, boolean isDC, int tblno,
+                         d_derived_tbl ** pdtbl)
+{
+    JHUFF_TBL *htbl;
+    d_derived_tbl *dtbl;
+    int p, i, l, si, numsymbols;
+    int lookbits, ctr;
+    char huffsize[257];
+    unsigned int huffcode[257];
+    unsigned int code;
+
+    /* Note that huffsize[] and huffcode[] are filled in code-length order,
+     * paralleling the order of the symbols themselves in htbl->huffval[].
+     */
+
+    /* Find the input Huffman table */
+    if (tblno < 0 || tblno >= NUM_HUFF_TBLS)
+    {
+        ERREXIT1(cinfo, JERR_NO_HUFF_TABLE, tblno);
+    }
+    htbl =
+        isDC ? cinfo->dc_huff_tbl_ptrs[tblno] : cinfo->ac_huff_tbl_ptrs[tblno];
+    if (htbl == NULL)
+    {
+        ERREXIT1(cinfo, JERR_NO_HUFF_TABLE, tblno);
+    }
+
+    /* Allocate a workspace if we haven't already done so. */
+    if (*pdtbl == NULL)
+        *pdtbl = (d_derived_tbl *)
+                 (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
+                                             SIZEOF(d_derived_tbl));
+    dtbl = *pdtbl;
+    dtbl->pub = htbl;		/* fill in back link */
+
+    /* Figure C.1: make table of Huffman code length for each symbol */
+
+    p = 0;
+    for (l = 1; l <= 16; l++)
+    {
+        i = (int) htbl->bits[l];
+        if (i < 0 || p + i > 256)	/* protect against table overrun */
+        {
+            ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
+        }
+        while (i--)
+        {
+            huffsize[p++] = (char) l;
+        }
+    }
+    huffsize[p] = 0;
+    numsymbols = p;
+
+    /* Figure C.2: generate the codes themselves */
+    /* We also validate that the counts represent a legal Huffman code tree. */
+
+    code = 0;
+    si = huffsize[0];
+    p = 0;
+    while (huffsize[p])
+    {
+        while (((int) huffsize[p]) == si)
+        {
+            huffcode[p++] = code;
+            code++;
+        }
+        /* code is now 1 more than the last code used for codelength si; but
+         * it must still fit in si bits, since no code is allowed to be all ones.
+         */
+        if (((INT32) code) >= (((INT32) 1) << si))
+        {
+            ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
+        }
+        code <<= 1;
+        si++;
+    }
+
+    /* Figure F.15: generate decoding tables for bit-sequential decoding */
+
+    p = 0;
+    for (l = 1; l <= 16; l++)
+    {
+        if (htbl->bits[l])
+        {
+            /* valoffset[l] = huffval[] index of 1st symbol of code length l,
+             * minus the minimum code of length l
+             */
+            dtbl->valoffset[l] = (INT32) p - (INT32) huffcode[p];
+            p += htbl->bits[l];
+            dtbl->maxcode[l] = huffcode[p-1]; /* maximum code of length l */
+        }
+        else
+        {
+            dtbl->maxcode[l] = -1;	/* -1 if no codes of this length */
+        }
+    }
+    dtbl->maxcode[17] = 0xFFFFFL; /* ensures jpeg_huff_decode terminates */
+
+    /* Compute lookahead tables to speed up decoding.
+     * First we set all the table entries to 0, indicating "too long";
+     * then we iterate through the Huffman codes that are short enough and
+     * fill in all the entries that correspond to bit sequences starting
+     * with that code.
+     */
+
+    MEMZERO(dtbl->look_nbits, SIZEOF(dtbl->look_nbits));
+
+    p = 0;
+    for (l = 1; l <= HUFF_LOOKAHEAD; l++)
+    {
+        for (i = 1; i <= (int) htbl->bits[l]; i++, p++)
+        {
+            /* l = current code's length, p = its index in huffcode[] & huffval[]. */
+            /* Generate left-justified code followed by all possible bit sequences */
+            lookbits = huffcode[p] << (HUFF_LOOKAHEAD-l);
+            for (ctr = 1 << (HUFF_LOOKAHEAD-l); ctr > 0; ctr--)
+            {
+                dtbl->look_nbits[lookbits] = l;
+                dtbl->look_sym[lookbits] = htbl->huffval[p];
+                lookbits++;
+            }
+        }
+    }
+
+    /* Validate symbols as being reasonable.
+     * For AC tables, we make no check, but accept all byte values 0..255.
+     * For DC tables, we require the symbols to be in range 0..15.
+     * (Tighter bounds could be applied depending on the data depth and mode,
+     * but this is sufficient to ensure safe decoding.)
+     */
+    if (isDC)
+    {
+        for (i = 0; i < numsymbols; i++)
+        {
+            int sym = htbl->huffval[i];
+            if (sym < 0 || sym > 15)
+            {
+                ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
+            }
+        }
+    }
+}
+
+
+/*
+ * Out-of-line code for bit fetching.
+ * Note: current values of get_buffer and bits_left are passed as parameters,
+ * but are returned in the corresponding fields of the state struct.
+ *
+ * On most machines MIN_GET_BITS should be 25 to allow the full 32-bit width
+ * of get_buffer to be used.  (On machines with wider words, an even larger
+ * buffer could be used.)  However, on some machines 32-bit shifts are
+ * quite slow and take time proportional to the number of places shifted.
+ * (This is true with most PC compilers, for instance.)  In this case it may
+ * be a win to set MIN_GET_BITS to the minimum value of 15.  This reduces the
+ * average shift distance at the cost of more calls to jpeg_fill_bit_buffer.
+ */
+
+#ifdef SLOW_SHIFT_32
+#define MIN_GET_BITS  15	/* minimum allowable value */
+#else
+#define MIN_GET_BITS  (BIT_BUF_SIZE-7)
+#endif
+
+
+LOCAL(boolean)
+jpeg_fill_bit_buffer (bitread_working_state * state,
+                      register bit_buf_type get_buffer, register int bits_left,
+                      int nbits)
+/* Load up the bit buffer to a depth of at least nbits */
+{
+    /* Copy heavily used state fields into locals (hopefully registers) */
+    register const JOCTET * next_input_byte = state->next_input_byte;
+    register size_t bytes_in_buffer = state->bytes_in_buffer;
+    j_decompress_ptr cinfo = state->cinfo;
+
+    /* Attempt to load at least MIN_GET_BITS bits into get_buffer. */
+    /* (It is assumed that no request will be for more than that many bits.) */
+    /* We fail to do so only if we hit a marker or are forced to suspend. */
+
+    if (cinfo->unread_marker == 0)  	/* cannot advance past a marker */
+    {
+        while (bits_left < MIN_GET_BITS)
+        {
+            register int c;
+
+            /* Attempt to read a byte */
+            if (bytes_in_buffer == 0)
+            {
+                if (! (*cinfo->src->fill_input_buffer) (cinfo))
+                {
+                    return FALSE;
+                }
+                next_input_byte = cinfo->src->next_input_byte;
+                bytes_in_buffer = cinfo->src->bytes_in_buffer;
+            }
+            bytes_in_buffer--;
+            c = GETJOCTET(*next_input_byte++);
+
+            /* If it's 0xFF, check and discard stuffed zero byte */
+            if (c == 0xFF)
+            {
+                /* Loop here to discard any padding FF's on terminating marker,
+                 * so that we can save a valid unread_marker value.  NOTE: we will
+                 * accept multiple FF's followed by a 0 as meaning a single FF data
+                 * byte.  This data pattern is not valid according to the standard.
+                 */
+                do
+                {
+                    if (bytes_in_buffer == 0)
+                    {
+                        if (! (*cinfo->src->fill_input_buffer) (cinfo))
+                        {
+                            return FALSE;
+                        }
+                        next_input_byte = cinfo->src->next_input_byte;
+                        bytes_in_buffer = cinfo->src->bytes_in_buffer;
+                    }
+                    bytes_in_buffer--;
+                    c = GETJOCTET(*next_input_byte++);
+                }
+                while (c == 0xFF);
+
+                if (c == 0)
+                {
+                    /* Found FF/00, which represents an FF data byte */
+                    c = 0xFF;
+                }
+                else
+                {
+                    /* Oops, it's actually a marker indicating end of compressed data.
+                     * Save the marker code for later use.
+                     * Fine point: it might appear that we should save the marker into
+                     * bitread working state, not straight into permanent state.  But
+                     * once we have hit a marker, we cannot need to suspend within the
+                     * current MCU, because we will read no more bytes from the data
+                     * source.  So it is OK to update permanent state right away.
+                     */
+                    cinfo->unread_marker = c;
+                    /* See if we need to insert some fake zero bits. */
+                    goto no_more_bytes;
+                }
+            }
+
+            /* OK, load c into get_buffer */
+            get_buffer = (get_buffer << 8) | c;
+            bits_left += 8;
+        } /* end while */
+    }
+    else
+    {
+no_more_bytes:
+        /* We get here if we've read the marker that terminates the compressed
+         * data segment.  There should be enough bits in the buffer register
+         * to satisfy the request; if so, no problem.
+         */
+        if (nbits > bits_left)
+        {
+            /* Uh-oh.  Report corrupted data to user and stuff zeroes into
+             * the data stream, so that we can produce some kind of image.
+             * We use a nonvolatile flag to ensure that only one warning message
+             * appears per data segment.
+             */
+            if (! ((huff_entropy_ptr) cinfo->entropy)->insufficient_data)
+            {
+                WARNMS(cinfo, JWRN_HIT_MARKER);
+                ((huff_entropy_ptr) cinfo->entropy)->insufficient_data = TRUE;
+            }
+            /* Fill the buffer with zero bits */
+            get_buffer <<= MIN_GET_BITS - bits_left;
+            bits_left = MIN_GET_BITS;
+        }
+    }
+
+    /* Unload the local registers */
+    state->next_input_byte = next_input_byte;
+    state->bytes_in_buffer = bytes_in_buffer;
+    state->get_buffer = get_buffer;
+    state->bits_left = bits_left;
+
+    return TRUE;
+}
+
+
+/*
+ * Figure F.12: extend sign bit.
+ * On some machines, a shift and sub will be faster than a table lookup.
+ */
+
+#ifdef AVOID_TABLES
+
+#define BIT_MASK(nbits)   ((1<<(nbits))-1)
+#define HUFF_EXTEND(x,s)  ((x) < (1<<((s)-1)) ? (x) - ((1<<(s))-1) : (x))
+
+#else
+
+#define BIT_MASK(nbits)   bmask[nbits]
+#define HUFF_EXTEND(x,s)  ((x) <= bmask[(s) - 1] ? (x) - bmask[s] : (x))
+
+static const int bmask[16] =	/* bmask[n] is mask for n rightmost bits */
+{
+    0, 0x0001, 0x0003, 0x0007, 0x000F, 0x001F, 0x003F, 0x007F, 0x00FF,
+    0x01FF, 0x03FF, 0x07FF, 0x0FFF, 0x1FFF, 0x3FFF, 0x7FFF
+};
+
+#endif /* AVOID_TABLES */
+
+
+/*
+ * Out-of-line code for Huffman code decoding.
+ */
+
+LOCAL(int)
+jpeg_huff_decode (bitread_working_state * state,
+                  register bit_buf_type get_buffer, register int bits_left,
+                  d_derived_tbl * htbl, int min_bits)
+{
+    register int l = min_bits;
+    register INT32 code;
+
+    /* HUFF_DECODE has determined that the code is at least min_bits */
+    /* bits long, so fetch that many bits in one swoop. */
+
+    CHECK_BIT_BUFFER(*state, l, return -1);
+    code = GET_BITS(l);
+
+    /* Collect the rest of the Huffman code one bit at a time. */
+    /* This is per Figure F.16 in the JPEG spec. */
+
+    while (code > htbl->maxcode[l])
+    {
+        code <<= 1;
+        CHECK_BIT_BUFFER(*state, 1, return -1);
+        code |= GET_BITS(1);
+        l++;
+    }
+
+    /* Unload the local registers */
+    state->get_buffer = get_buffer;
+    state->bits_left = bits_left;
+
+    /* With garbage input we may reach the sentinel value l = 17. */
+
+    if (l > 16)
+    {
+        WARNMS(state->cinfo, JWRN_HUFF_BAD_CODE);
+        return 0;			/* fake a zero as the safest result */
+    }
+
+    return htbl->pub->huffval[ (int) (code + htbl->valoffset[l]) ];
+}
+
+
+/*
+ * Check for a restart marker & resynchronize decoder.
+ * Returns FALSE if must suspend.
+ */
+
+LOCAL(boolean)
+process_restart (j_decompress_ptr cinfo)
+{
+    huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
+    int ci;
+
+    /* Throw away any unused bits remaining in bit buffer; */
+    /* include any full bytes in next_marker's count of discarded bytes */
+    cinfo->marker->discarded_bytes += entropy->bitstate.bits_left / 8;
+    entropy->bitstate.bits_left = 0;
+
+    /* Advance past the RSTn marker */
+    if (! (*cinfo->marker->read_restart_marker) (cinfo))
+    {
+        return FALSE;
+    }
+
+    /* Re-initialize DC predictions to 0 */
+    for (ci = 0; ci < cinfo->comps_in_scan; ci++)
+    {
+        entropy->saved.last_dc_val[ci] = 0;
+    }
+    /* Re-init EOB run count, too */
+    entropy->saved.EOBRUN = 0;
+
+    /* Reset restart counter */
+    entropy->restarts_to_go = cinfo->restart_interval;
+
+    /* Reset out-of-data flag, unless read_restart_marker left us smack up
+     * against a marker.  In that case we will end up treating the next data
+     * segment as empty, and we can avoid producing bogus output pixels by
+     * leaving the flag set.
+     */
+    if (cinfo->unread_marker == 0)
+    {
+        entropy->insufficient_data = FALSE;
+    }
+
+    return TRUE;
+}
+
+
+/*
+ * Huffman MCU decoding.
+ * Each of these routines decodes and returns one MCU's worth of
+ * Huffman-compressed coefficients.
+ * The coefficients are reordered from zigzag order into natural array order,
+ * but are not dequantized.
+ *
+ * The i'th block of the MCU is stored into the block pointed to by
+ * MCU_data[i].  WE ASSUME THIS AREA IS INITIALLY ZEROED BY THE CALLER.
+ * (Wholesale zeroing is usually a little faster than retail...)
+ *
+ * We return FALSE if data source requested suspension.  In that case no
+ * changes have been made to permanent state.  (Exception: some output
+ * coefficients may already have been assigned.  This is harmless for
+ * spectral selection, since we'll just re-assign them on the next call.
+ * Successive approximation AC refinement has to be more careful, however.)
+ */
+
+/*
+ * MCU decoding for DC initial scan (either spectral selection,
+ * or first pass of successive approximation).
+ */
+
+METHODDEF(boolean)
+decode_mcu_DC_first (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
+{
+    huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
+    int Al = cinfo->Al;
+    register int s, r;
+    int blkn, ci;
+    JBLOCKROW block;
+    BITREAD_STATE_VARS;
+    savable_state state;
+    d_derived_tbl * tbl;
+    jpeg_component_info * compptr;
+
+    /* Process restart marker if needed; may have to suspend */
+    if (cinfo->restart_interval)
+    {
+        if (entropy->restarts_to_go == 0)
+            if (! process_restart(cinfo))
+            {
+                return FALSE;
+            }
+    }
+
+    /* If we've run out of data, just leave the MCU set to zeroes.
+     * This way, we return uniform gray for the remainder of the segment.
+     */
+    if (! entropy->insufficient_data)
+    {
+
+        /* Load up working state */
+        BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
+        ASSIGN_STATE(state, entropy->saved);
+
+        /* Outer loop handles each block in the MCU */
+
+        for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++)
+        {
+            block = MCU_data[blkn];
+            ci = cinfo->MCU_membership[blkn];
+            compptr = cinfo->cur_comp_info[ci];
+            tbl = entropy->derived_tbls[compptr->dc_tbl_no];
+
+            /* Decode a single block's worth of coefficients */
+
+            /* Section F.2.2.1: decode the DC coefficient difference */
+            HUFF_DECODE(s, br_state, tbl, return FALSE, label1);
+            if (s)
+            {
+                CHECK_BIT_BUFFER(br_state, s, return FALSE);
+                r = GET_BITS(s);
+                s = HUFF_EXTEND(r, s);
+            }
+
+            /* Convert DC difference to actual value, update last_dc_val */
+            s += state.last_dc_val[ci];
+            state.last_dc_val[ci] = s;
+            /* Scale and output the coefficient (assumes jpeg_natural_order[0]=0) */
+            (*block)[0] = (JCOEF) (s << Al);
+        }
+
+        /* Completed MCU, so update state */
+        BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
+        ASSIGN_STATE(entropy->saved, state);
+    }
+
+    /* Account for restart interval (no-op if not using restarts) */
+    entropy->restarts_to_go--;
+
+    return TRUE;
+}
+
+
+/*
+ * MCU decoding for AC initial scan (either spectral selection,
+ * or first pass of successive approximation).
+ */
+
+METHODDEF(boolean)
+decode_mcu_AC_first (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
+{
+    huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
+    register int s, k, r;
+    unsigned int EOBRUN;
+    int Se, Al;
+    const int * natural_order;
+    JBLOCKROW block;
+    BITREAD_STATE_VARS;
+    d_derived_tbl * tbl;
+
+    /* Process restart marker if needed; may have to suspend */
+    if (cinfo->restart_interval)
+    {
+        if (entropy->restarts_to_go == 0)
+            if (! process_restart(cinfo))
+            {
+                return FALSE;
+            }
+    }
+
+    /* If we've run out of data, just leave the MCU set to zeroes.
+     * This way, we return uniform gray for the remainder of the segment.
+     */
+    if (! entropy->insufficient_data)
+    {
+
+        Se = cinfo->Se;
+        Al = cinfo->Al;
+        natural_order = cinfo->natural_order;
+
+        /* Load up working state.
+         * We can avoid loading/saving bitread state if in an EOB run.
+         */
+        EOBRUN = entropy->saved.EOBRUN;	/* only part of saved state we need */
+
+        /* There is always only one block per MCU */
+
+        if (EOBRUN > 0)		/* if it's a band of zeroes... */
+        {
+            EOBRUN--;    /* ...process it now (we do nothing) */
+        }
+        else
+        {
+            BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
+            block = MCU_data[0];
+            tbl = entropy->ac_derived_tbl;
+
+            for (k = cinfo->Ss; k <= Se; k++)
+            {
+                HUFF_DECODE(s, br_state, tbl, return FALSE, label2);
+                r = s >> 4;
+                s &= 15;
+                if (s)
+                {
+                    k += r;
+                    CHECK_BIT_BUFFER(br_state, s, return FALSE);
+                    r = GET_BITS(s);
+                    s = HUFF_EXTEND(r, s);
+                    /* Scale and output coefficient in natural (dezigzagged) order */
+                    (*block)[natural_order[k]] = (JCOEF) (s << Al);
+                }
+                else
+                {
+                    if (r == 15)  	/* ZRL */
+                    {
+                        k += 15;		/* skip 15 zeroes in band */
+                    }
+                    else  		/* EOBr, run length is 2^r + appended bits */
+                    {
+                        EOBRUN = 1 << r;
+                        if (r)  		/* EOBr, r > 0 */
+                        {
+                            CHECK_BIT_BUFFER(br_state, r, return FALSE);
+                            r = GET_BITS(r);
+                            EOBRUN += r;
+                        }
+                        EOBRUN--;		/* this band is processed at this moment */
+                        break;		/* force end-of-band */
+                    }
+                }
+            }
+
+            BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
+        }
+
+        /* Completed MCU, so update state */
+        entropy->saved.EOBRUN = EOBRUN;	/* only part of saved state we need */
+    }
+
+    /* Account for restart interval (no-op if not using restarts) */
+    entropy->restarts_to_go--;
+
+    return TRUE;
+}
+
+
+/*
+ * MCU decoding for DC successive approximation refinement scan.
+ * Note: we assume such scans can be multi-component, although the spec
+ * is not very clear on the point.
+ */
+
+METHODDEF(boolean)
+decode_mcu_DC_refine (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
+{
+    huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
+    int p1 = 1 << cinfo->Al;	/* 1 in the bit position being coded */
+    int blkn;
+    JBLOCKROW block;
+    BITREAD_STATE_VARS;
+
+    /* Process restart marker if needed; may have to suspend */
+    if (cinfo->restart_interval)
+    {
+        if (entropy->restarts_to_go == 0)
+            if (! process_restart(cinfo))
+            {
+                return FALSE;
+            }
+    }
+
+    /* Not worth the cycles to check insufficient_data here,
+     * since we will not change the data anyway if we read zeroes.
+     */
+
+    /* Load up working state */
+    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
+
+    /* Outer loop handles each block in the MCU */
+
+    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++)
+    {
+        block = MCU_data[blkn];
+
+        /* Encoded data is simply the next bit of the two's-complement DC value */
+        CHECK_BIT_BUFFER(br_state, 1, return FALSE);
+        if (GET_BITS(1))
+        {
+            (*block)[0] |= p1;
+        }
+        /* Note: since we use |=, repeating the assignment later is safe */
+    }
+
+    /* Completed MCU, so update state */
+    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
+
+    /* Account for restart interval (no-op if not using restarts) */
+    entropy->restarts_to_go--;
+
+    return TRUE;
+}
+
+
+/*
+ * MCU decoding for AC successive approximation refinement scan.
+ */
+
+METHODDEF(boolean)
+decode_mcu_AC_refine (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
+{
+    huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
+    register int s, k, r;
+    unsigned int EOBRUN;
+    int Se, p1, m1;
+    const int * natural_order;
+    JBLOCKROW block;
+    JCOEFPTR thiscoef;
+    BITREAD_STATE_VARS;
+    d_derived_tbl * tbl;
+    int num_newnz;
+    int newnz_pos[DCTSIZE2];
+
+    /* Process restart marker if needed; may have to suspend */
+    if (cinfo->restart_interval)
+    {
+        if (entropy->restarts_to_go == 0)
+            if (! process_restart(cinfo))
+            {
+                return FALSE;
+            }
+    }
+
+    /* If we've run out of data, don't modify the MCU.
+     */
+    if (! entropy->insufficient_data)
+    {
+
+        Se = cinfo->Se;
+        p1 = 1 << cinfo->Al;	/* 1 in the bit position being coded */
+        m1 = (-1) << cinfo->Al;	/* -1 in the bit position being coded */
+        natural_order = cinfo->natural_order;
+
+        /* Load up working state */
+        BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
+        EOBRUN = entropy->saved.EOBRUN; /* only part of saved state we need */
+
+        /* There is always only one block per MCU */
+        block = MCU_data[0];
+        tbl = entropy->ac_derived_tbl;
+
+        /* If we are forced to suspend, we must undo the assignments to any newly
+         * nonzero coefficients in the block, because otherwise we'd get confused
+         * next time about which coefficients were already nonzero.
+         * But we need not undo addition of bits to already-nonzero coefficients;
+         * instead, we can test the current bit to see if we already did it.
+         */
+        num_newnz = 0;
+
+        /* initialize coefficient loop counter to start of band */
+        k = cinfo->Ss;
+
+        if (EOBRUN == 0)
+        {
+            for (; k <= Se; k++)
+            {
+                HUFF_DECODE(s, br_state, tbl, goto undoit, label3);
+                r = s >> 4;
+                s &= 15;
+                if (s)
+                {
+                    if (s != 1)		/* size of new coef should always be 1 */
+                    {
+                        WARNMS(cinfo, JWRN_HUFF_BAD_CODE);
+                    }
+                    CHECK_BIT_BUFFER(br_state, 1, goto undoit);
+                    if (GET_BITS(1))
+                    {
+                        s = p1;    /* newly nonzero coef is positive */
+                    }
+                    else
+                    {
+                        s = m1;    /* newly nonzero coef is negative */
+                    }
+                }
+                else
+                {
+                    if (r != 15)
+                    {
+                        EOBRUN = 1 << r;	/* EOBr, run length is 2^r + appended bits */
+                        if (r)
+                        {
+                            CHECK_BIT_BUFFER(br_state, r, goto undoit);
+                            r = GET_BITS(r);
+                            EOBRUN += r;
+                        }
+                        break;		/* rest of block is handled by EOB logic */
+                    }
+                    /* note s = 0 for processing ZRL */
+                }
+                /* Advance over already-nonzero coefs and r still-zero coefs,
+                 * appending correction bits to the nonzeroes.  A correction bit is 1
+                 * if the absolute value of the coefficient must be increased.
+                 */
+                do
+                {
+                    thiscoef = *block + natural_order[k];
+                    if (*thiscoef != 0)
+                    {
+                        CHECK_BIT_BUFFER(br_state, 1, goto undoit);
+                        if (GET_BITS(1))
+                        {
+                            if ((*thiscoef & p1) == 0)   /* do nothing if already set it */
+                            {
+                                if (*thiscoef >= 0)
+                                {
+                                    *thiscoef += p1;
+                                }
+                                else
+                                {
+                                    *thiscoef += m1;
+                                }
+                            }
+                        }
+                    }
+                    else
+                    {
+                        if (--r < 0)
+                        {
+                            break;    /* reached target zero coefficient */
+                        }
+                    }
+                    k++;
+                }
+                while (k <= Se);
+                if (s)
+                {
+                    int pos = natural_order[k];
+                    /* Output newly nonzero coefficient */
+                    (*block)[pos] = (JCOEF) s;
+                    /* Remember its position in case we have to suspend */
+                    newnz_pos[num_newnz++] = pos;
+                }
+            }
+        }
+
+        if (EOBRUN > 0)
+        {
+            /* Scan any remaining coefficient positions after the end-of-band
+             * (the last newly nonzero coefficient, if any).  Append a correction
+             * bit to each already-nonzero coefficient.  A correction bit is 1
+             * if the absolute value of the coefficient must be increased.
+             */
+            for (; k <= Se; k++)
+            {
+                thiscoef = *block + natural_order[k];
+                if (*thiscoef != 0)
+                {
+                    CHECK_BIT_BUFFER(br_state, 1, goto undoit);
+                    if (GET_BITS(1))
+                    {
+                        if ((*thiscoef & p1) == 0)   /* do nothing if already changed it */
+                        {
+                            if (*thiscoef >= 0)
+                            {
+                                *thiscoef += p1;
+                            }
+                            else
+                            {
+                                *thiscoef += m1;
+                            }
+                        }
+                    }
+                }
+            }
+            /* Count one block completed in EOB run */
+            EOBRUN--;
+        }
+
+        /* Completed MCU, so update state */
+        BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
+        entropy->saved.EOBRUN = EOBRUN; /* only part of saved state we need */
+    }
+
+    /* Account for restart interval (no-op if not using restarts) */
+    entropy->restarts_to_go--;
+
+    return TRUE;
+
+undoit:
+    /* Re-zero any output coefficients that we made newly nonzero */
+    while (num_newnz > 0)
+    {
+        (*block)[newnz_pos[--num_newnz]] = 0;
+    }
+
+    return FALSE;
+}
+
+
+/*
+ * Decode one MCU's worth of Huffman-compressed coefficients,
+ * partial blocks.
+ */
+
+METHODDEF(boolean)
+decode_mcu_sub (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
+{
+    huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
+    const int * natural_order;
+    int Se, blkn;
+    BITREAD_STATE_VARS;
+    savable_state state;
+
+    /* Process restart marker if needed; may have to suspend */
+    if (cinfo->restart_interval)
+    {
+        if (entropy->restarts_to_go == 0)
+            if (! process_restart(cinfo))
+            {
+                return FALSE;
+            }
+    }
+
+    /* If we've run out of data, just leave the MCU set to zeroes.
+     * This way, we return uniform gray for the remainder of the segment.
+     */
+    if (! entropy->insufficient_data)
+    {
+
+        natural_order = cinfo->natural_order;
+        Se = cinfo->lim_Se;
+
+        /* Load up working state */
+        BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
+        ASSIGN_STATE(state, entropy->saved);
+
+        /* Outer loop handles each block in the MCU */
+
+        for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++)
+        {
+            JBLOCKROW block = MCU_data[blkn];
+            d_derived_tbl * htbl;
+            register int s, k, r;
+            int coef_limit, ci;
+
+            /* Decode a single block's worth of coefficients */
+
+            /* Section F.2.2.1: decode the DC coefficient difference */
+            htbl = entropy->dc_cur_tbls[blkn];
+            HUFF_DECODE(s, br_state, htbl, return FALSE, label1);
+
+            htbl = entropy->ac_cur_tbls[blkn];
+            k = 1;
+            coef_limit = entropy->coef_limit[blkn];
+            if (coef_limit)
+            {
+                /* Convert DC difference to actual value, update last_dc_val */
+                if (s)
+                {
+                    CHECK_BIT_BUFFER(br_state, s, return FALSE);
+                    r = GET_BITS(s);
+                    s = HUFF_EXTEND(r, s);
+                }
+                ci = cinfo->MCU_membership[blkn];
+                s += state.last_dc_val[ci];
+                state.last_dc_val[ci] = s;
+                /* Output the DC coefficient */
+                (*block)[0] = (JCOEF) s;
+
+                /* Section F.2.2.2: decode the AC coefficients */
+                /* Since zeroes are skipped, output area must be cleared beforehand */
+                for (; k < coef_limit; k++)
+                {
+                    HUFF_DECODE(s, br_state, htbl, return FALSE, label2);
+
+                    r = s >> 4;
+                    s &= 15;
+
+                    if (s)
+                    {
+                        k += r;
+                        CHECK_BIT_BUFFER(br_state, s, return FALSE);
+                        r = GET_BITS(s);
+                        s = HUFF_EXTEND(r, s);
+                        /* Output coefficient in natural (dezigzagged) order.
+                         * Note: the extra entries in natural_order[] will save us
+                         * if k > Se, which could happen if the data is corrupted.
+                         */
+                        (*block)[natural_order[k]] = (JCOEF) s;
+                    }
+                    else
+                    {
+                        if (r != 15)
+                        {
+                            goto EndOfBlock;
+                        }
+                        k += 15;
+                    }
+                }
+            }
+            else
+            {
+                if (s)
+                {
+                    CHECK_BIT_BUFFER(br_state, s, return FALSE);
+                    DROP_BITS(s);
+                }
+            }
+
+            /* Section F.2.2.2: decode the AC coefficients */
+            /* In this path we just discard the values */
+            for (; k <= Se; k++)
+            {
+                HUFF_DECODE(s, br_state, htbl, return FALSE, label3);
+
+                r = s >> 4;
+                s &= 15;
+
+                if (s)
+                {
+                    k += r;
+                    CHECK_BIT_BUFFER(br_state, s, return FALSE);
+                    DROP_BITS(s);
+                }
+                else
+                {
+                    if (r != 15)
+                    {
+                        break;
+                    }
+                    k += 15;
+                }
+            }
+
+EndOfBlock:
+            ;
+        }
+
+        /* Completed MCU, so update state */
+        BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
+        ASSIGN_STATE(entropy->saved, state);
+    }
+
+    /* Account for restart interval (no-op if not using restarts) */
+    entropy->restarts_to_go--;
+
+    return TRUE;
+}
+
+
+/*
+ * Decode one MCU's worth of Huffman-compressed coefficients,
+ * full-size blocks.
+ */
+
+METHODDEF(boolean)
+decode_mcu (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
+{
+    huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
+    int blkn;
+    BITREAD_STATE_VARS;
+    savable_state state;
+
+    /* Process restart marker if needed; may have to suspend */
+    if (cinfo->restart_interval)
+    {
+        if (entropy->restarts_to_go == 0)
+            if (! process_restart(cinfo))
+            {
+                return FALSE;
+            }
+    }
+
+    /* If we've run out of data, just leave the MCU set to zeroes.
+     * This way, we return uniform gray for the remainder of the segment.
+     */
+    if (! entropy->insufficient_data)
+    {
+
+        /* Load up working state */
+        BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
+        ASSIGN_STATE(state, entropy->saved);
+
+        /* Outer loop handles each block in the MCU */
+
+        for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++)
+        {
+            JBLOCKROW block = MCU_data[blkn];
+            d_derived_tbl * htbl;
+            register int s, k, r;
+            int coef_limit, ci;
+
+            /* Decode a single block's worth of coefficients */
+
+            /* Section F.2.2.1: decode the DC coefficient difference */
+            htbl = entropy->dc_cur_tbls[blkn];
+            HUFF_DECODE(s, br_state, htbl, return FALSE, label1);
+
+            htbl = entropy->ac_cur_tbls[blkn];
+            k = 1;
+            coef_limit = entropy->coef_limit[blkn];
+            if (coef_limit)
+            {
+                /* Convert DC difference to actual value, update last_dc_val */
+                if (s)
+                {
+                    CHECK_BIT_BUFFER(br_state, s, return FALSE);
+                    r = GET_BITS(s);
+                    s = HUFF_EXTEND(r, s);
+                }
+                ci = cinfo->MCU_membership[blkn];
+                s += state.last_dc_val[ci];
+                state.last_dc_val[ci] = s;
+                /* Output the DC coefficient */
+                (*block)[0] = (JCOEF) s;
+
+                /* Section F.2.2.2: decode the AC coefficients */
+                /* Since zeroes are skipped, output area must be cleared beforehand */
+                for (; k < coef_limit; k++)
+                {
+                    HUFF_DECODE(s, br_state, htbl, return FALSE, label2);
+
+                    r = s >> 4;
+                    s &= 15;
+
+                    if (s)
+                    {
+                        k += r;
+                        CHECK_BIT_BUFFER(br_state, s, return FALSE);
+                        r = GET_BITS(s);
+                        s = HUFF_EXTEND(r, s);
+                        /* Output coefficient in natural (dezigzagged) order.
+                         * Note: the extra entries in jpeg_natural_order[] will save us
+                         * if k >= DCTSIZE2, which could happen if the data is corrupted.
+                         */
+                        (*block)[jpeg_natural_order[k]] = (JCOEF) s;
+                    }
+                    else
+                    {
+                        if (r != 15)
+                        {
+                            goto EndOfBlock;
+                        }
+                        k += 15;
+                    }
+                }
+            }
+            else
+            {
+                if (s)
+                {
+                    CHECK_BIT_BUFFER(br_state, s, return FALSE);
+                    DROP_BITS(s);
+                }
+            }
+
+            /* Section F.2.2.2: decode the AC coefficients */
+            /* In this path we just discard the values */
+            for (; k < DCTSIZE2; k++)
+            {
+                HUFF_DECODE(s, br_state, htbl, return FALSE, label3);
+
+                r = s >> 4;
+                s &= 15;
+
+                if (s)
+                {
+                    k += r;
+                    CHECK_BIT_BUFFER(br_state, s, return FALSE);
+                    DROP_BITS(s);
+                }
+                else
+                {
+                    if (r != 15)
+                    {
+                        break;
+                    }
+                    k += 15;
+                }
+            }
+
+EndOfBlock:
+            ;
+        }
+
+        /* Completed MCU, so update state */
+        BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
+        ASSIGN_STATE(entropy->saved, state);
+    }
+
+    /* Account for restart interval (no-op if not using restarts) */
+    entropy->restarts_to_go--;
+
+    return TRUE;
+}
+
+
+/*
+ * Initialize for a Huffman-compressed scan.
+ */
+
+METHODDEF(void)
+start_pass_huff_decoder (j_decompress_ptr cinfo)
+{
+    huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
+    int ci, blkn, tbl, i;
+    jpeg_component_info * compptr;
+
+    if (cinfo->progressive_mode)
+    {
+        /* Validate progressive scan parameters */
+        if (cinfo->Ss == 0)
+        {
+            if (cinfo->Se != 0)
+            {
+                goto bad;
+            }
+        }
+        else
+        {
+            /* need not check Ss/Se < 0 since they came from unsigned bytes */
+            if (cinfo->Se < cinfo->Ss || cinfo->Se > cinfo->lim_Se)
+            {
+                goto bad;
+            }
+            /* AC scans may have only one component */
+            if (cinfo->comps_in_scan != 1)
+            {
+                goto bad;
+            }
+        }
+        if (cinfo->Ah != 0)
+        {
+            /* Successive approximation refinement scan: must have Al = Ah-1. */
+            if (cinfo->Ah-1 != cinfo->Al)
+            {
+                goto bad;
+            }
+        }
+        if (cinfo->Al > 13)  	/* need not check for < 0 */
+        {
+            /* Arguably the maximum Al value should be less than 13 for 8-bit precision,
+             * but the spec doesn't say so, and we try to be liberal about what we
+             * accept.  Note: large Al values could result in out-of-range DC
+             * coefficients during early scans, leading to bizarre displays due to
+             * overflows in the IDCT math.  But we won't crash.
+             */
+bad:
+            ERREXIT4(cinfo, JERR_BAD_PROGRESSION,
+                     cinfo->Ss, cinfo->Se, cinfo->Ah, cinfo->Al);
+        }
+        /* Update progression status, and verify that scan order is legal.
+         * Note that inter-scan inconsistencies are treated as warnings
+         * not fatal errors ... not clear if this is right way to behave.
+         */
+        for (ci = 0; ci < cinfo->comps_in_scan; ci++)
+        {
+            int coefi, cindex = cinfo->cur_comp_info[ci]->component_index;
+            int *coef_bit_ptr = & cinfo->coef_bits[cindex][0];
+            if (cinfo->Ss && coef_bit_ptr[0] < 0) /* AC without prior DC scan */
+            {
+                WARNMS2(cinfo, JWRN_BOGUS_PROGRESSION, cindex, 0);
+            }
+            for (coefi = cinfo->Ss; coefi <= cinfo->Se; coefi++)
+            {
+                int expected = (coef_bit_ptr[coefi] < 0) ? 0 : coef_bit_ptr[coefi];
+                if (cinfo->Ah != expected)
+                {
+                    WARNMS2(cinfo, JWRN_BOGUS_PROGRESSION, cindex, coefi);
+                }
+                coef_bit_ptr[coefi] = cinfo->Al;
+            }
+        }
+
+        /* Select MCU decoding routine */
+        if (cinfo->Ah == 0)
+        {
+            if (cinfo->Ss == 0)
+            {
+                entropy->pub.decode_mcu = decode_mcu_DC_first;
+            }
+            else
+            {
+                entropy->pub.decode_mcu = decode_mcu_AC_first;
+            }
+        }
+        else
+        {
+            if (cinfo->Ss == 0)
+            {
+                entropy->pub.decode_mcu = decode_mcu_DC_refine;
+            }
+            else
+            {
+                entropy->pub.decode_mcu = decode_mcu_AC_refine;
+            }
+        }
+
+        for (ci = 0; ci < cinfo->comps_in_scan; ci++)
+        {
+            compptr = cinfo->cur_comp_info[ci];
+            /* Make sure requested tables are present, and compute derived tables.
+             * We may build same derived table more than once, but it's not expensive.
+             */
+            if (cinfo->Ss == 0)
+            {
+                if (cinfo->Ah == 0)  	/* DC refinement needs no table */
+                {
+                    tbl = compptr->dc_tbl_no;
+                    jpeg_make_d_derived_tbl(cinfo, TRUE, tbl,
+                                            & entropy->derived_tbls[tbl]);
+                }
+            }
+            else
+            {
+                tbl = compptr->ac_tbl_no;
+                jpeg_make_d_derived_tbl(cinfo, FALSE, tbl,
+                                        & entropy->derived_tbls[tbl]);
+                /* remember the single active table */
+                entropy->ac_derived_tbl = entropy->derived_tbls[tbl];
+            }
+            /* Initialize DC predictions to 0 */
+            entropy->saved.last_dc_val[ci] = 0;
+        }
+
+        /* Initialize private state variables */
+        entropy->saved.EOBRUN = 0;
+    }
+    else
+    {
+        /* Check that the scan parameters Ss, Se, Ah/Al are OK for sequential JPEG.
+         * This ought to be an error condition, but we make it a warning because
+         * there are some baseline files out there with all zeroes in these bytes.
+         */
+        if (cinfo->Ss != 0 || cinfo->Ah != 0 || cinfo->Al != 0 ||
+                ((cinfo->is_baseline || cinfo->Se < DCTSIZE2) &&
+                 cinfo->Se != cinfo->lim_Se))
+        {
+            WARNMS(cinfo, JWRN_NOT_SEQUENTIAL);
+        }
+
+        /* Select MCU decoding routine */
+        /* We retain the hard-coded case for full-size blocks.
+         * This is not necessary, but it appears that this version is slightly
+         * more performant in the given implementation.
+         * With an improved implementation we would prefer a single optimized
+         * function.
+         */
+        if (cinfo->lim_Se != DCTSIZE2-1)
+        {
+            entropy->pub.decode_mcu = decode_mcu_sub;
+        }
+        else
+        {
+            entropy->pub.decode_mcu = decode_mcu;
+        }
+
+        for (ci = 0; ci < cinfo->comps_in_scan; ci++)
+        {
+            compptr = cinfo->cur_comp_info[ci];
+            /* Compute derived values for Huffman tables */
+            /* We may do this more than once for a table, but it's not expensive */
+            tbl = compptr->dc_tbl_no;
+            jpeg_make_d_derived_tbl(cinfo, TRUE, tbl,
+                                    & entropy->dc_derived_tbls[tbl]);
+            if (cinfo->lim_Se)  	/* AC needs no table when not present */
+            {
+                tbl = compptr->ac_tbl_no;
+                jpeg_make_d_derived_tbl(cinfo, FALSE, tbl,
+                                        & entropy->ac_derived_tbls[tbl]);
+            }
+            /* Initialize DC predictions to 0 */
+            entropy->saved.last_dc_val[ci] = 0;
+        }
+
+        /* Precalculate decoding info for each block in an MCU of this scan */
+        for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++)
+        {
+            ci = cinfo->MCU_membership[blkn];
+            compptr = cinfo->cur_comp_info[ci];
+            /* Precalculate which table to use for each block */
+            entropy->dc_cur_tbls[blkn] = entropy->dc_derived_tbls[compptr->dc_tbl_no];
+            entropy->ac_cur_tbls[blkn] = entropy->ac_derived_tbls[compptr->ac_tbl_no];
+            /* Decide whether we really care about the coefficient values */
+            if (compptr->component_needed)
+            {
+                ci = compptr->DCT_v_scaled_size;
+                i = compptr->DCT_h_scaled_size;
+                switch (cinfo->lim_Se)
+                {
+                case (1*1-1):
+                    entropy->coef_limit[blkn] = 1;
+                    break;
+                case (2*2-1):
+                    if (ci <= 0 || ci > 2)
+                    {
+                        ci = 2;
+                    }
+                    if (i <= 0 || i > 2)
+                    {
+                        i = 2;
+                    }
+                    entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order2[ci - 1][i - 1];
+                    break;
+                case (3*3-1):
+                    if (ci <= 0 || ci > 3)
+                    {
+                        ci = 3;
+                    }
+                    if (i <= 0 || i > 3)
+                    {
+                        i = 3;
+                    }
+                    entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order3[ci - 1][i - 1];
+                    break;
+                case (4*4-1):
+                    if (ci <= 0 || ci > 4)
+                    {
+                        ci = 4;
+                    }
+                    if (i <= 0 || i > 4)
+                    {
+                        i = 4;
+                    }
+                    entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order4[ci - 1][i - 1];
+                    break;
+                case (5*5-1):
+                    if (ci <= 0 || ci > 5)
+                    {
+                        ci = 5;
+                    }
+                    if (i <= 0 || i > 5)
+                    {
+                        i = 5;
+                    }
+                    entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order5[ci - 1][i - 1];
+                    break;
+                case (6*6-1):
+                    if (ci <= 0 || ci > 6)
+                    {
+                        ci = 6;
+                    }
+                    if (i <= 0 || i > 6)
+                    {
+                        i = 6;
+                    }
+                    entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order6[ci - 1][i - 1];
+                    break;
+                case (7*7-1):
+                    if (ci <= 0 || ci > 7)
+                    {
+                        ci = 7;
+                    }
+                    if (i <= 0 || i > 7)
+                    {
+                        i = 7;
+                    }
+                    entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order7[ci - 1][i - 1];
+                    break;
+                default:
+                    if (ci <= 0 || ci > 8)
+                    {
+                        ci = 8;
+                    }
+                    if (i <= 0 || i > 8)
+                    {
+                        i = 8;
+                    }
+                    entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order[ci - 1][i - 1];
+                    break;
+                }
+            }
+            else
+            {
+                entropy->coef_limit[blkn] = 0;
+            }
+        }
+    }
+
+    /* Initialize bitread state variables */
+    entropy->bitstate.bits_left = 0;
+    entropy->bitstate.get_buffer = 0; /* unnecessary, but keeps Purify quiet */
+    entropy->insufficient_data = FALSE;
+
+    /* Initialize restart counter */
+    entropy->restarts_to_go = cinfo->restart_interval;
+}
+
+
+/*
+ * Module initialization routine for Huffman entropy decoding.
+ */
+
+GLOBAL(void)
+jinit_huff_decoder (j_decompress_ptr cinfo)
+{
+    huff_entropy_ptr entropy;
+    int i;
+
+    entropy = (huff_entropy_ptr)
+              (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
+                                          SIZEOF(huff_entropy_decoder));
+    cinfo->entropy = (struct jpeg_entropy_decoder *) entropy;
+    entropy->pub.start_pass = start_pass_huff_decoder;
+
+    if (cinfo->progressive_mode)
+    {
+        /* Create progression status table */
+        int *coef_bit_ptr, ci;
+        cinfo->coef_bits = (int (*)[DCTSIZE2])
+                           (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
+                                   cinfo->num_components*DCTSIZE2*SIZEOF(int));
+        coef_bit_ptr = & cinfo->coef_bits[0][0];
+        for (ci = 0; ci < cinfo->num_components; ci++)
+            for (i = 0; i < DCTSIZE2; i++)
+            {
+                *coef_bit_ptr++ = -1;
+            }
+
+        /* Mark derived tables unallocated */
+        for (i = 0; i < NUM_HUFF_TBLS; i++)
+        {
+            entropy->derived_tbls[i] = NULL;
+        }
+    }
+    else
+    {
+        /* Mark tables unallocated */
+        for (i = 0; i < NUM_HUFF_TBLS; i++)
+        {
+            entropy->dc_derived_tbls[i] = entropy->ac_derived_tbls[i] = NULL;
+        }
+    }
+}
diff -NEaurb neo/renderer/jpeg-8c/jdinput.c neo/renderer/jpeg-8c/jdinput.c
--- neo/renderer/jpeg-8c/jdinput.c	1970-01-01 00:00:00 +0000
+++ neo/renderer/jpeg-8c/jdinput.c	2012-11-17 01:20:40 +0000
@@ -0,0 +1,751 @@
+/*
+ * jdinput.c
+ *
+ * Copyright (C) 1991-1997, Thomas G. Lane.
+ * Modified 2002-2009 by Guido Vollbeding.
+ * This file is part of the Independent JPEG Group's software.
+ * For conditions of distribution and use, see the accompanying README file.
+ *
+ * This file contains input control logic for the JPEG decompressor.
+ * These routines are concerned with controlling the decompressor's input
+ * processing (marker reading and coefficient decoding).  The actual input
+ * reading is done in jdmarker.c, jdhuff.c, and jdarith.c.
+ */
+
+#define JPEG_INTERNALS
+#include "jinclude.h"
+#include "jpeglib.h"
+
+
+/* Private state */
+
+typedef struct
+{
+    struct jpeg_input_controller pub; /* public fields */
+
+    int inheaders;		/* Nonzero until first SOS is reached */
+} my_input_controller;
+
+typedef my_input_controller * my_inputctl_ptr;
+
+
+/* Forward declarations */
+METHODDEF(int) consume_markers JPP((j_decompress_ptr cinfo));
+
+
+/*
+ * Routines to calculate various quantities related to the size of the image.
+ */
+
+
+/*
+ * Compute output image dimensions and related values.
+ * NOTE: this is exported for possible use by application.
+ * Hence it mustn't do anything that can't be done twice.
+ */
+
+GLOBAL(void)
+jpeg_core_output_dimensions (j_decompress_ptr cinfo)
+/* Do computations that are needed before master selection phase.
+ * This function is used for transcoding and full decompression.
+ */
+{
+#ifdef IDCT_SCALING_SUPPORTED
+    int ci;
+    jpeg_component_info *compptr;
+
+    /* Compute actual output image dimensions and DCT scaling choices. */
+    if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom)
+    {
+        /* Provide 1/block_size scaling */
+        cinfo->output_width = (JDIMENSION)
+                              jdiv_round_up((long) cinfo->image_width, (long) cinfo->block_size);
+        cinfo->output_height = (JDIMENSION)
+                               jdiv_round_up((long) cinfo->image_height, (long) cinfo->block_size);
+        cinfo->min_DCT_h_scaled_size = 1;
+        cinfo->min_DCT_v_scaled_size = 1;
+    }
+    else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 2)
+    {
+        /* Provide 2/block_size scaling */
+        cinfo->output_width = (JDIMENSION)
+                              jdiv_round_up((long) cinfo->image_width * 2L, (long) cinfo->block_size);
+        cinfo->output_height = (JDIMENSION)
+                               jdiv_round_up((long) cinfo->image_height * 2L, (long) cinfo->block_size);
+        cinfo->min_DCT_h_scaled_size = 2;
+        cinfo->min_DCT_v_scaled_size = 2;
+    }
+    else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 3)
+    {
+        /* Provide 3/block_size scaling */
+        cinfo->output_width = (JDIMENSION)
+                              jdiv_round_up((long) cinfo->image_width * 3L, (long) cinfo->block_size);
+        cinfo->output_height = (JDIMENSION)
+                               jdiv_round_up((long) cinfo->image_height * 3L, (long) cinfo->block_size);
+        cinfo->min_DCT_h_scaled_size = 3;
+        cinfo->min_DCT_v_scaled_size = 3;
+    }
+    else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 4)
+    {
+        /* Provide 4/block_size scaling */
+        cinfo->output_width = (JDIMENSION)
+                              jdiv_round_up((long) cinfo->image_width * 4L, (long) cinfo->block_size);
+        cinfo->output_height = (JDIMENSION)
+                               jdiv_round_up((long) cinfo->image_height * 4L, (long) cinfo->block_size);
+        cinfo->min_DCT_h_scaled_size = 4;
+        cinfo->min_DCT_v_scaled_size = 4;
+    }
+    else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 5)
+    {
+        /* Provide 5/block_size scaling */
+        cinfo->output_width = (JDIMENSION)
+                              jdiv_round_up((long) cinfo->image_width * 5L, (long) cinfo->block_size);
+        cinfo->output_height = (JDIMENSION)
+                               jdiv_round_up((long) cinfo->image_height * 5L, (long) cinfo->block_size);
+        cinfo->min_DCT_h_scaled_size = 5;
+        cinfo->min_DCT_v_scaled_size = 5;
+    }
+    else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 6)
+    {
+        /* Provide 6/block_size scaling */
+        cinfo->output_width = (JDIMENSION)
+                              jdiv_round_up((long) cinfo->image_width * 6L, (long) cinfo->block_size);
+        cinfo->output_height = (JDIMENSION)
+                               jdiv_round_up((long) cinfo->image_height * 6L, (long) cinfo->block_size);
+        cinfo->min_DCT_h_scaled_size = 6;
+        cinfo->min_DCT_v_scaled_size = 6;
+    }
+    else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 7)
+    {
+        /* Provide 7/block_size scaling */
+        cinfo->output_width = (JDIMENSION)
+                              jdiv_round_up((long) cinfo->image_width * 7L, (long) cinfo->block_size);
+        cinfo->output_height = (JDIMENSION)
+                               jdiv_round_up((long) cinfo->image_height * 7L, (long) cinfo->block_size);
+        cinfo->min_DCT_h_scaled_size = 7;
+        cinfo->min_DCT_v_scaled_size = 7;
+    }
+    else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 8)
+    {
+        /* Provide 8/block_size scaling */
+        cinfo->output_width = (JDIMENSION)
+                              jdiv_round_up((long) cinfo->image_width * 8L, (long) cinfo->block_size);
+        cinfo->output_height = (JDIMENSION)
+                               jdiv_round_up((long) cinfo->image_height * 8L, (long) cinfo->block_size);
+        cinfo->min_DCT_h_scaled_size = 8;
+        cinfo->min_DCT_v_scaled_size = 8;
+    }
+    else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 9)
+    {
+        /* Provide 9/block_size scaling */
+        cinfo->output_width = (JDIMENSION)
+                              jdiv_round_up((long) cinfo->image_width * 9L, (long) cinfo->block_size);
+        cinfo->output_height = (JDIMENSION)
+                               jdiv_round_up((long) cinfo->image_height * 9L, (long) cinfo->block_size);
+        cinfo->min_DCT_h_scaled_size = 9;
+        cinfo->min_DCT_v_scaled_size = 9;
+    }
+    else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 10)
+    {
+        /* Provide 10/block_size scaling */
+        cinfo->output_width = (JDIMENSION)
+                              jdiv_round_up((long) cinfo->image_width * 10L, (long) cinfo->block_size);
+        cinfo->output_height = (JDIMENSION)
+                               jdiv_round_up((long) cinfo->image_height * 10L, (long) cinfo->block_size);
+        cinfo->min_DCT_h_scaled_size = 10;
+        cinfo->min_DCT_v_scaled_size = 10;
+    }
+    else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 11)
+    {
+        /* Provide 11/block_size scaling */
+        cinfo->output_width = (JDIMENSION)
+                              jdiv_round_up((long) cinfo->image_width * 11L, (long) cinfo->block_size);
+        cinfo->output_height = (JDIMENSION)
+                               jdiv_round_up((long) cinfo->image_height * 11L, (long) cinfo->block_size);
+        cinfo->min_DCT_h_scaled_size = 11;
+        cinfo->min_DCT_v_scaled_size = 11;
+    }
+    else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 12)
+    {
+        /* Provide 12/block_size scaling */
+        cinfo->output_width = (JDIMENSION)
+                              jdiv_round_up((long) cinfo->image_width * 12L, (long) cinfo->block_size);
+        cinfo->output_height = (JDIMENSION)
+                               jdiv_round_up((long) cinfo->image_height * 12L, (long) cinfo->block_size);
+        cinfo->min_DCT_h_scaled_size = 12;
+        cinfo->min_DCT_v_scaled_size = 12;
+    }
+    else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 13)
+    {
+        /* Provide 13/block_size scaling */
+        cinfo->output_width = (JDIMENSION)
+                              jdiv_round_up((long) cinfo->image_width * 13L, (long) cinfo->block_size);
+        cinfo->output_height = (JDIMENSION)
+                               jdiv_round_up((long) cinfo->image_height * 13L, (long) cinfo->block_size);
+        cinfo->min_DCT_h_scaled_size = 13;
+        cinfo->min_DCT_v_scaled_size = 13;
+    }
+    else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 14)
+    {
+        /* Provide 14/block_size scaling */
+        cinfo->output_width = (JDIMENSION)
+                              jdiv_round_up((long) cinfo->image_width * 14L, (long) cinfo->block_size);
+        cinfo->output_height = (JDIMENSION)
+                               jdiv_round_up((long) cinfo->image_height * 14L, (long) cinfo->block_size);
+        cinfo->min_DCT_h_scaled_size = 14;
+        cinfo->min_DCT_v_scaled_size = 14;
+    }
+    else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 15)
+    {
+        /* Provide 15/block_size scaling */
+        cinfo->output_width = (JDIMENSION)
+                              jdiv_round_up((long) cinfo->image_width * 15L, (long) cinfo->block_size);
+        cinfo->output_height = (JDIMENSION)
+                               jdiv_round_up((long) cinfo->image_height * 15L, (long) cinfo->block_size);
+        cinfo->min_DCT_h_scaled_size = 15;
+        cinfo->min_DCT_v_scaled_size = 15;
+    }
+    else
+    {
+        /* Provide 16/block_size scaling */
+        cinfo->output_width = (JDIMENSION)
+                              jdiv_round_up((long) cinfo->image_width * 16L, (long) cinfo->block_size);
+        cinfo->output_height = (JDIMENSION)
+                               jdiv_round_up((long) cinfo->image_height * 16L, (long) cinfo->block_size);
+        cinfo->min_DCT_h_scaled_size = 16;
+        cinfo->min_DCT_v_scaled_size = 16;
+    }
+
+    /* Recompute dimensions of components */
+    for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
+            ci++, compptr++)
+    {
+        compptr->DCT_h_scaled_size = cinfo->min_DCT_h_scaled_size;
+        compptr->DCT_v_scaled_size = cinfo->min_DCT_v_scaled_size;
+    }
+
+#else /* !IDCT_SCALING_SUPPORTED */
+
+    /* Hardwire it to "no scaling" */
+    cinfo->output_width = cinfo->image_width;
+    cinfo->output_height = cinfo->image_height;
+    /* jdinput.c has already initialized DCT_scaled_size,
+     * and has computed unscaled downsampled_width and downsampled_height.
+     */
+
+#endif /* IDCT_SCALING_SUPPORTED */
+}
+
+
+LOCAL(void)
+initial_setup (j_decompress_ptr cinfo)
+/* Called once, when first SOS marker is reached */
+{
+    int ci;
+    jpeg_component_info *compptr;
+
+    /* Make sure image isn't bigger than I can handle */
+    if ((long) cinfo->image_height > (long) JPEG_MAX_DIMENSION ||
+            (long) cinfo->image_width > (long) JPEG_MAX_DIMENSION)
+    {
+        ERREXIT1(cinfo, JERR_IMAGE_TOO_BIG, (unsigned int) JPEG_MAX_DIMENSION);
+    }
+
+    /* For now, precision must match compiled-in value... */
+    if (cinfo->data_precision != BITS_IN_JSAMPLE)
+    {
+        ERREXIT1(cinfo, JERR_BAD_PRECISION, cinfo->data_precision);
+    }
+
+    /* Check that number of components won't exceed internal array sizes */
+    if (cinfo->num_components > MAX_COMPONENTS)
+        ERREXIT2(cinfo, JERR_COMPONENT_COUNT, cinfo->num_components,
+                 MAX_COMPONENTS);
+
+    /* Compute maximum sampling factors; check factor validity */
+    cinfo->max_h_samp_factor = 1;
+    cinfo->max_v_samp_factor = 1;
+    for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
+            ci++, compptr++)
+    {
+        if (compptr->h_samp_factor<=0 || compptr->h_samp_factor>MAX_SAMP_FACTOR ||
+                compptr->v_samp_factor<=0 || compptr->v_samp_factor>MAX_SAMP_FACTOR)
+        {
+            ERREXIT(cinfo, JERR_BAD_SAMPLING);
+        }
+        cinfo->max_h_samp_factor = MAX(cinfo->max_h_samp_factor,
+                                       compptr->h_samp_factor);
+        cinfo->max_v_samp_factor = MAX(cinfo->max_v_samp_factor,
+                                       compptr->v_samp_factor);
+    }
+
+    /* Derive block_size, natural_order, and lim_Se */
+    if (cinfo->is_baseline || (cinfo->progressive_mode &&
+                               cinfo->comps_in_scan))   /* no pseudo SOS marker */
+    {
+        cinfo->block_size = DCTSIZE;
+        cinfo->natural_order = jpeg_natural_order;
+        cinfo->lim_Se = DCTSIZE2-1;
+    }
+    else
+        switch (cinfo->Se)
+        {
+        case (1*1-1):
+            cinfo->block_size = 1;
+            cinfo->natural_order = jpeg_natural_order; /* not needed */
+            cinfo->lim_Se = cinfo->Se;
+            break;
+        case (2*2-1):
+            cinfo->block_size = 2;
+            cinfo->natural_order = jpeg_natural_order2;
+            cinfo->lim_Se = cinfo->Se;
+            break;
+        case (3*3-1):
+            cinfo->block_size = 3;
+            cinfo->natural_order = jpeg_natural_order3;
+            cinfo->lim_Se = cinfo->Se;
+            break;
+        case (4*4-1):
+            cinfo->block_size = 4;
+            cinfo->natural_order = jpeg_natural_order4;
+            cinfo->lim_Se = cinfo->Se;
+            break;
+        case (5*5-1):
+            cinfo->block_size = 5;
+            cinfo->natural_order = jpeg_natural_order5;
+            cinfo->lim_Se = cinfo->Se;
+            break;
+        case (6*6-1):
+            cinfo->block_size = 6;
+            cinfo->natural_order = jpeg_natural_order6;
+            cinfo->lim_Se = cinfo->Se;
+            break;
+        case (7*7-1):
+            cinfo->block_size = 7;
+            cinfo->natural_order = jpeg_natural_order7;
+            cinfo->lim_Se = cinfo->Se;
+            break;
+        case (8*8-1):
+            cinfo->block_size = 8;
+            cinfo->natural_order = jpeg_natural_order;
+            cinfo->lim_Se = DCTSIZE2-1;
+            break;
+        case (9*9-1):
+            cinfo->block_size = 9;
+            cinfo->natural_order = jpeg_natural_order;
+            cinfo->lim_Se = DCTSIZE2-1;
+            break;
+        case (10*10-1):
+            cinfo->block_size = 10;
+            cinfo->natural_order = jpeg_natural_order;
+            cinfo->lim_Se = DCTSIZE2-1;
+            break;
+        case (11*11-1):
+            cinfo->block_size = 11;
+            cinfo->natural_order = jpeg_natural_order;
+            cinfo->lim_Se = DCTSIZE2-1;
+            break;
+        case (12*12-1):
+            cinfo->block_size = 12;
+            cinfo->natural_order = jpeg_natural_order;
+            cinfo->lim_Se = DCTSIZE2-1;
+            break;
+        case (13*13-1):
+            cinfo->block_size = 13;
+            cinfo->natural_order = jpeg_natural_order;
+            cinfo->lim_Se = DCTSIZE2-1;
+            break;
+        case (14*14-1):
+            cinfo->block_size = 14;
+            cinfo->natural_order = jpeg_natural_order;
+            cinfo->lim_Se = DCTSIZE2-1;
+            break;
+        case (15*15-1):
+            cinfo->block_size = 15;
+            cinfo->natural_order = jpeg_natural_order;
+            cinfo->lim_Se = DCTSIZE2-1;
+            break;
+        case (16*16-1):
+            cinfo->block_size = 16;
+            cinfo->natural_order = jpeg_natural_order;
+            cinfo->lim_Se = DCTSIZE2-1;
+            break;
+        default:
+            ERREXIT4(cinfo, JERR_BAD_PROGRESSION,
+                     cinfo->Ss, cinfo->Se, cinfo->Ah, cinfo->Al);
+            break;
+        }
+
+    /* We initialize DCT_scaled_size and min_DCT_scaled_size to block_size.
+     * In the full decompressor,
+     * this will be overridden by jpeg_calc_output_dimensions in jdmaster.c;
+     * but in the transcoder,
+     * jpeg_calc_output_dimensions is not used, so we must do it here.
+     */
+    cinfo->min_DCT_h_scaled_size = cinfo->block_size;
+    cinfo->min_DCT_v_scaled_size = cinfo->block_size;
+
+    /* Compute dimensions of components */
+    for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
+            ci++, compptr++)
+    {
+        compptr->DCT_h_scaled_size = cinfo->block_size;
+        compptr->DCT_v_scaled_size = cinfo->block_size;
+        /* Size in DCT blocks */
+        compptr->width_in_blocks = (JDIMENSION)
+                                   jdiv_round_up((long) cinfo->image_width * (long) compptr->h_samp_factor,
+                                           (long) (cinfo->max_h_samp_factor * cinfo->block_size));
+        compptr->height_in_blocks = (JDIMENSION)
+                                    jdiv_round_up((long) cinfo->image_height * (long) compptr->v_samp_factor,
+                                            (long) (cinfo->max_v_samp_factor * cinfo->block_size));
+        /* downsampled_width and downsampled_height will also be overridden by
+         * jdmaster.c if we are doing full decompression.  The transcoder library
+         * doesn't use these values, but the calling application might.
+         */
+        /* Size in samples */
+        compptr->downsampled_width = (JDIMENSION)
+                                     jdiv_round_up((long) cinfo->image_width * (long) compptr->h_samp_factor,
+                                             (long) cinfo->max_h_samp_factor);
+        compptr->downsampled_height = (JDIMENSION)
+                                      jdiv_round_up((long) cinfo->image_height * (long) compptr->v_samp_factor,
+                                              (long) cinfo->max_v_samp_factor);
+        /* Mark component needed, until color conversion says otherwise */
+        compptr->component_needed = TRUE;
+        /* Mark no quantization table yet saved for component */
+        compptr->quant_table = NULL;
+    }
+
+    /* Compute number of fully interleaved MCU rows. */
+    cinfo->total_iMCU_rows = (JDIMENSION)
+                             jdiv_round_up((long) cinfo->image_height,
+                                           (long) (cinfo->max_v_samp_factor * cinfo->block_size));
+
+    /* Decide whether file contains multiple scans */
+    if (cinfo->comps_in_scan < cinfo->num_components || cinfo->progressive_mode)
+    {
+        cinfo->inputctl->has_multiple_scans = TRUE;
+    }
+    else
+    {
+        cinfo->inputctl->has_multiple_scans = FALSE;
+    }
+}
+
+
+LOCAL(void)
+per_scan_setup (j_decompress_ptr cinfo)
+/* Do computations that are needed before processing a JPEG scan */
+/* cinfo->comps_in_scan and cinfo->cur_comp_info[] were set from SOS marker */
+{
+    int ci, mcublks, tmp;
+    jpeg_component_info *compptr;
+
+    if (cinfo->comps_in_scan == 1)
+    {
+
+        /* Noninterleaved (single-component) scan */
+        compptr = cinfo->cur_comp_info[0];
+
+        /* Overall image size in MCUs */
+        cinfo->MCUs_per_row = compptr->width_in_blocks;
+        cinfo->MCU_rows_in_scan = compptr->height_in_blocks;
+
+        /* For noninterleaved scan, always one block per MCU */
+        compptr->MCU_width = 1;
+        compptr->MCU_height = 1;
+        compptr->MCU_blocks = 1;
+        compptr->MCU_sample_width = compptr->DCT_h_scaled_size;
+        compptr->last_col_width = 1;
+        /* For noninterleaved scans, it is convenient to define last_row_height
+         * as the number of block rows present in the last iMCU row.
+         */
+        tmp = (int) (compptr->height_in_blocks % compptr->v_samp_factor);
+        if (tmp == 0)
+        {
+            tmp = compptr->v_samp_factor;
+        }
+        compptr->last_row_height = tmp;
+
+        /* Prepare array describing MCU composition */
+        cinfo->blocks_in_MCU = 1;
+        cinfo->MCU_membership[0] = 0;
+
+    }
+    else
+    {
+
+        /* Interleaved (multi-component) scan */
+        if (cinfo->comps_in_scan <= 0 || cinfo->comps_in_scan > MAX_COMPS_IN_SCAN)
+            ERREXIT2(cinfo, JERR_COMPONENT_COUNT, cinfo->comps_in_scan,
+                     MAX_COMPS_IN_SCAN);
+
+        /* Overall image size in MCUs */
+        cinfo->MCUs_per_row = (JDIMENSION)
+                              jdiv_round_up((long) cinfo->image_width,
+                                            (long) (cinfo->max_h_samp_factor * cinfo->block_size));
+        cinfo->MCU_rows_in_scan = (JDIMENSION)
+                                  jdiv_round_up((long) cinfo->image_height,
+                                                (long) (cinfo->max_v_samp_factor * cinfo->block_size));
+
+        cinfo->blocks_in_MCU = 0;
+
+        for (ci = 0; ci < cinfo->comps_in_scan; ci++)
+        {
+            compptr = cinfo->cur_comp_info[ci];
+            /* Sampling factors give # of blocks of component in each MCU */
+            compptr->MCU_width = compptr->h_samp_factor;
+            compptr->MCU_height = compptr->v_samp_factor;
+            compptr->MCU_blocks = compptr->MCU_width * compptr->MCU_height;
+            compptr->MCU_sample_width = compptr->MCU_width * compptr->DCT_h_scaled_size;
+            /* Figure number of non-dummy blocks in last MCU column & row */
+            tmp = (int) (compptr->width_in_blocks % compptr->MCU_width);
+            if (tmp == 0)
+            {
+                tmp = compptr->MCU_width;
+            }
+            compptr->last_col_width = tmp;
+            tmp = (int) (compptr->height_in_blocks % compptr->MCU_height);
+            if (tmp == 0)
+            {
+                tmp = compptr->MCU_height;
+            }
+            compptr->last_row_height = tmp;
+            /* Prepare array describing MCU composition */
+            mcublks = compptr->MCU_blocks;
+            if (cinfo->blocks_in_MCU + mcublks > D_MAX_BLOCKS_IN_MCU)
+            {
+                ERREXIT(cinfo, JERR_BAD_MCU_SIZE);
+            }
+            while (mcublks-- > 0)
+            {
+                cinfo->MCU_membership[cinfo->blocks_in_MCU++] = ci;
+            }
+        }
+
+    }
+}
+
+
+/*
+ * Save away a copy of the Q-table referenced by each component present
+ * in the current scan, unless already saved during a prior scan.
+ *
+ * In a multiple-scan JPEG file, the encoder could assign different components
+ * the same Q-table slot number, but change table definitions between scans
+ * so that each component uses a different Q-table.  (The IJG encoder is not
+ * currently capable of doing this, but other encoders might.)  Since we want
+ * to be able to dequantize all the components at the end of the file, this
+ * means that we have to save away the table actually used for each component.
+ * We do this by copying the table at the start of the first scan containing
+ * the component.
+ * The JPEG spec prohibits the encoder from changing the contents of a Q-table
+ * slot between scans of a component using that slot.  If the encoder does so
+ * anyway, this decoder will simply use the Q-table values that were current
+ * at the start of the first scan for the component.
+ *
+ * The decompressor output side looks only at the saved quant tables,
+ * not at the current Q-table slots.
+ */
+
+LOCAL(void)
+latch_quant_tables (j_decompress_ptr cinfo)
+{
+    int ci, qtblno;
+    jpeg_component_info *compptr;
+    JQUANT_TBL * qtbl;
+
+    for (ci = 0; ci < cinfo->comps_in_scan; ci++)
+    {
+        compptr = cinfo->cur_comp_info[ci];
+        /* No work if we already saved Q-table for this component */
+        if (compptr->quant_table != NULL)
+        {
+            continue;
+        }
+        /* Make sure specified quantization table is present */
+        qtblno = compptr->quant_tbl_no;
+        if (qtblno < 0 || qtblno >= NUM_QUANT_TBLS ||
+                cinfo->quant_tbl_ptrs[qtblno] == NULL)
+        {
+            ERREXIT1(cinfo, JERR_NO_QUANT_TABLE, qtblno);
+        }
+        /* OK, save away the quantization table */
+        qtbl = (JQUANT_TBL *)
+               (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
+                                           SIZEOF(JQUANT_TBL));
+        MEMCOPY(qtbl, cinfo->quant_tbl_ptrs[qtblno], SIZEOF(JQUANT_TBL));
+        compptr->quant_table = qtbl;
+    }
+}
+
+
+/*
+ * Initialize the input modules to read a scan of compressed data.
+ * The first call to this is done by jdmaster.c after initializing
+ * the entire decompressor (during jpeg_start_decompress).
+ * Subsequent calls come from consume_markers, below.
+ */
+
+METHODDEF(void)
+start_input_pass (j_decompress_ptr cinfo)
+{
+    per_scan_setup(cinfo);
+    latch_quant_tables(cinfo);
+    (*cinfo->entropy->start_pass) (cinfo);
+    (*cinfo->coef->start_input_pass) (cinfo);
+    cinfo->inputctl->consume_input = cinfo->coef->consume_data;
+}
+
+
+/*
+ * Finish up after inputting a compressed-data scan.
+ * This is called by the coefficient controller after it's read all
+ * the expected data of the scan.
+ */
+
+METHODDEF(void)
+finish_input_pass (j_decompress_ptr cinfo)
+{
+    cinfo->inputctl->consume_input = consume_markers;
+}
+
+
+/*
+ * Read JPEG markers before, between, or after compressed-data scans.
+ * Change state as necessary when a new scan is reached.
+ * Return value is JPEG_SUSPENDED, JPEG_REACHED_SOS, or JPEG_REACHED_EOI.
+ *
+ * The consume_input method pointer points either here or to the
+ * coefficient controller's consume_data routine, depending on whether
+ * we are reading a compressed data segment or inter-segment markers.
+ *
+ * Note: This function should NOT return a pseudo SOS marker (with zero
+ * component number) to the caller.  A pseudo marker received by
+ * read_markers is processed and then skipped for other markers.
+ */
+
+METHODDEF(int)
+consume_markers (j_decompress_ptr cinfo)
+{
+    my_inputctl_ptr inputctl = (my_inputctl_ptr) cinfo->inputctl;
+    int val;
+
+    if (inputctl->pub.eoi_reached) /* After hitting EOI, read no further */
+    {
+        return JPEG_REACHED_EOI;
+    }
+
+    for (;;)  			/* Loop to pass pseudo SOS marker */
+    {
+        val = (*cinfo->marker->read_markers) (cinfo);
+
+        switch (val)
+        {
+        case JPEG_REACHED_SOS:	/* Found SOS */
+            if (inputctl->inheaders)   /* 1st SOS */
+            {
+                if (inputctl->inheaders == 1)
+                {
+                    initial_setup(cinfo);
+                }
+                if (cinfo->comps_in_scan == 0)   /* pseudo SOS marker */
+                {
+                    inputctl->inheaders = 2;
+                    break;
+                }
+                inputctl->inheaders = 0;
+                /* Note: start_input_pass must be called by jdmaster.c
+                 * before any more input can be consumed.  jdapimin.c is
+                 * responsible for enforcing this sequencing.
+                 */
+            }
+            else  			/* 2nd or later SOS marker */
+            {
+                if (! inputctl->pub.has_multiple_scans)
+                {
+                    ERREXIT(cinfo, JERR_EOI_EXPECTED);    /* Oops, I wasn't expecting this! */
+                }
+                if (cinfo->comps_in_scan == 0) /* unexpected pseudo SOS marker */
+                {
+                    break;
+                }
+                start_input_pass(cinfo);
+            }
+            return val;
+        case JPEG_REACHED_EOI:	/* Found EOI */
+            inputctl->pub.eoi_reached = TRUE;
+            if (inputctl->inheaders)   /* Tables-only datastream, apparently */
+            {
+                if (cinfo->marker->saw_SOF)
+                {
+                    ERREXIT(cinfo, JERR_SOF_NO_SOS);
+                }
+            }
+            else
+            {
+                /* Prevent infinite loop in coef ctlr's decompress_data routine
+                 * if user set output_scan_number larger than number of scans.
+                 */
+                if (cinfo->output_scan_number > cinfo->input_scan_number)
+                {
+                    cinfo->output_scan_number = cinfo->input_scan_number;
+                }
+            }
+            return val;
+        case JPEG_SUSPENDED:
+            return val;
+        default:
+            return val;
+        }
+    }
+}
+
+
+/*
+ * Reset state to begin a fresh datastream.
+ */
+
+METHODDEF(void)
+reset_input_controller (j_decompress_ptr cinfo)
+{
+    my_inputctl_ptr inputctl = (my_inputctl_ptr) cinfo->inputctl;
+
+    inputctl->pub.consume_input = consume_markers;
+    inputctl->pub.has_multiple_scans = FALSE; /* "unknown" would be better */
+    inputctl->pub.eoi_reached = FALSE;
+    inputctl->inheaders = 1;
+    /* Reset other modules */
+    (*cinfo->err->reset_error_mgr) ((j_common_ptr) cinfo);
+    (*cinfo->marker->reset_marker_reader) (cinfo);
+    /* Reset progression state -- would be cleaner if entropy decoder did this */
+    cinfo->coef_bits = NULL;
+}
+
+
+/*
+ * Initialize the input controller module.
+ * This is called only once, when the decompression object is created.
+ */
+
+GLOBAL(void)
+jinit_input_controller (j_decompress_ptr cinfo)
+{
+    my_inputctl_ptr inputctl;
+
+    /* Create subobject in permanent pool */
+    inputctl = (my_inputctl_ptr)
+               (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
+                                           SIZEOF(my_input_controller));
+    cinfo->inputctl = (struct jpeg_input_controller *) inputctl;
+    /* Initialize method pointers */
+    inputctl->pub.consume_input = consume_markers;
+    inputctl->pub.reset_input_controller = reset_input_controller;
+    inputctl->pub.start_input_pass = start_input_pass;
+    inputctl->pub.finish_input_pass = finish_input_pass;
+    /* Initialize state: can't use reset_input_controller since we don't
+     * want to try to reset other modules yet.
+     */
+    inputctl->pub.has_multiple_scans = FALSE; /* "unknown" would be better */
+    inputctl->pub.eoi_reached = FALSE;
+    inputctl->inheaders = 1;
+}
diff -NEaurb neo/renderer/jpeg-8c/jdmainct.c neo/renderer/jpeg-8c/jdmainct.c
--- neo/renderer/jpeg-8c/jdmainct.c	1970-01-01 00:00:00 +0000
+++ neo/renderer/jpeg-8c/jdmainct.c	2012-11-17 01:20:40 +0000
@@ -0,0 +1,556 @@
+/*
+ * jdmainct.c
+ *
+ * Copyright (C) 1994-1996, Thomas G. Lane.
+ * This file is part of the Independent JPEG Group's software.
+ * For conditions of distribution and use, see the accompanying README file.
+ *
+ * This file contains the main buffer controller for decompression.
+ * The main buffer lies between the JPEG decompressor proper and the
+ * post-processor; it holds downsampled data in the JPEG colorspace.
+ *
+ * Note that this code is bypassed in raw-data mode, since the application
+ * supplies the equivalent of the main buffer in that case.
+ */
+
+#define JPEG_INTERNALS
+#include "jinclude.h"
+#include "jpeglib.h"
+
+
+/*
+ * In the current system design, the main buffer need never be a full-image
+ * buffer; any full-height buffers will be found inside the coefficient or
+ * postprocessing controllers.  Nonetheless, the main controller is not
+ * trivial.  Its responsibility is to provide context rows for upsampling/
+ * rescaling, and doing this in an efficient fashion is a bit tricky.
+ *
+ * Postprocessor input data is counted in "row groups".  A row group
+ * is defined to be (v_samp_factor * DCT_scaled_size / min_DCT_scaled_size)
+ * sample rows of each component.  (We require DCT_scaled_size values to be
+ * chosen such that these numbers are integers.  In practice DCT_scaled_size
+ * values will likely be powers of two, so we actually have the stronger
+ * condition that DCT_scaled_size / min_DCT_scaled_size is an integer.)
+ * Upsampling will typically produce max_v_samp_factor pixel rows from each
+ * row group (times any additional scale factor that the upsampler is
+ * applying).
+ *
+ * The coefficient controller will deliver data to us one iMCU row at a time;
+ * each iMCU row contains v_samp_factor * DCT_scaled_size sample rows, or
+ * exactly min_DCT_scaled_size row groups.  (This amount of data corresponds
+ * to one row of MCUs when the image is fully interleaved.)  Note that the
+ * number of sample rows varies across components, but the number of row
+ * groups does not.  Some garbage sample rows may be included in the last iMCU
+ * row at the bottom of the image.
+ *
+ * Depending on the vertical scaling algorithm used, the upsampler may need
+ * access to the sample row(s) above and below its current input row group.
+ * The upsampler is required to set need_context_rows TRUE at global selection
+ * time if so.  When need_context_rows is FALSE, this controller can simply
+ * obtain one iMCU row at a time from the coefficient controller and dole it
+ * out as row groups to the postprocessor.
+ *
+ * When need_context_rows is TRUE, this controller guarantees that the buffer
+ * passed to postprocessing contains at least one row group's worth of samples
+ * above and below the row group(s) being processed.  Note that the context
+ * rows "above" the first passed row group appear at negative row offsets in
+ * the passed buffer.  At the top and bottom of the image, the required
+ * context rows are manufactured by duplicating the first or last real sample
+ * row; this avoids having special cases in the upsampling inner loops.
+ *
+ * The amount of context is fixed at one row group just because that's a
+ * convenient number for this controller to work with.  The existing
+ * upsamplers really only need one sample row of context.  An upsampler
+ * supporting arbitrary output rescaling might wish for more than one row
+ * group of context when shrinking the image; tough, we don't handle that.
+ * (This is justified by the assumption that downsizing will be handled mostly
+ * by adjusting the DCT_scaled_size values, so that the actual scale factor at
+ * the upsample step needn't be much less than one.)
+ *
+ * To provide the desired context, we have to retain the last two row groups
+ * of one iMCU row while reading in the next iMCU row.  (The last row group
+ * can't be processed until we have another row group for its below-context,
+ * and so we have to save the next-to-last group too for its above-context.)
+ * We could do this most simply by copying data around in our buffer, but
+ * that'd be very slow.  We can avoid copying any data by creating a rather
+ * strange pointer structure.  Here's how it works.  We allocate a workspace
+ * consisting of M+2 row groups (where M = min_DCT_scaled_size is the number
+ * of row groups per iMCU row).  We create two sets of redundant pointers to
+ * the workspace.  Labeling the physical row groups 0 to M+1, the synthesized
+ * pointer lists look like this:
+ *                   M+1                          M-1
+ * master pointer --> 0         master pointer --> 0
+ *                    1                            1
+ *                   ...                          ...
+ *                   M-3                          M-3
+ *                   M-2                           M
+ *                   M-1                          M+1
+ *                    M                           M-2
+ *                   M+1                          M-1
+ *                    0                            0
+ * We read alternate iMCU rows using each master pointer; thus the last two
+ * row groups of the previous iMCU row remain un-overwritten in the workspace.
+ * The pointer lists are set up so that the required context rows appear to
+ * be adjacent to the proper places when we pass the pointer lists to the
+ * upsampler.
+ *
+ * The above pictures describe the normal state of the pointer lists.
+ * At top and bottom of the image, we diddle the pointer lists to duplicate
+ * the first or last sample row as necessary (this is cheaper than copying
+ * sample rows around).
+ *
+ * This scheme breaks down if M < 2, ie, min_DCT_scaled_size is 1.  In that
+ * situation each iMCU row provides only one row group so the buffering logic
+ * must be different (eg, we must read two iMCU rows before we can emit the
+ * first row group).  For now, we simply do not support providing context
+ * rows when min_DCT_scaled_size is 1.  That combination seems unlikely to
+ * be worth providing --- if someone wants a 1/8th-size preview, they probably
+ * want it quick and dirty, so a context-free upsampler is sufficient.
+ */
+
+
+/* Private buffer controller object */
+
+typedef struct
+{
+    struct jpeg_d_main_controller pub; /* public fields */
+
+    /* Pointer to allocated workspace (M or M+2 row groups). */
+    JSAMPARRAY buffer[MAX_COMPONENTS];
+
+    boolean buffer_full;		/* Have we gotten an iMCU row from decoder? */
+    JDIMENSION rowgroup_ctr;	/* counts row groups output to postprocessor */
+
+    /* Remaining fields are only used in the context case. */
+
+    /* These are the master pointers to the funny-order pointer lists. */
+    JSAMPIMAGE xbuffer[2];	/* pointers to weird pointer lists */
+
+    int whichptr;			/* indicates which pointer set is now in use */
+    int context_state;		/* process_data state machine status */
+    JDIMENSION rowgroups_avail;	/* row groups available to postprocessor */
+    JDIMENSION iMCU_row_ctr;	/* counts iMCU rows to detect image top/bot */
+} my_main_controller;
+
+typedef my_main_controller * my_main_ptr;
+
+/* context_state values: */
+#define CTX_PREPARE_FOR_IMCU	0	/* need to prepare for MCU row */
+#define CTX_PROCESS_IMCU	1	/* feeding iMCU to postprocessor */
+#define CTX_POSTPONED_ROW	2	/* feeding postponed row group */
+
+
+/* Forward declarations */
+METHODDEF(void) process_data_simple_main
+JPP((j_decompress_ptr cinfo, JSAMPARRAY output_buf,
+     JDIMENSION *out_row_ctr, JDIMENSION out_rows_avail));
+METHODDEF(void) process_data_context_main
+JPP((j_decompress_ptr cinfo, JSAMPARRAY output_buf,
+     JDIMENSION *out_row_ctr, JDIMENSION out_rows_avail));
+#ifdef QUANT_2PASS_SUPPORTED
+METHODDEF(void) process_data_crank_post
+JPP((j_decompress_ptr cinfo, JSAMPARRAY output_buf,
+     JDIMENSION *out_row_ctr, JDIMENSION out_rows_avail));
+#endif
+
+
+LOCAL(void)
+alloc_funny_pointers (j_decompress_ptr cinfo)
+/* Allocate space for the funny pointer lists.
+ * This is done only once, not once per pass.
+ */
+{
+    my_main_ptr main_ptr = (my_main_ptr) cinfo->main;
+    int ci, rgroup;
+    int M = cinfo->min_DCT_v_scaled_size;
+    jpeg_component_info *compptr;
+    JSAMPARRAY xbuf;
+
+    /* Get top-level space for component array pointers.
+     * We alloc both arrays with one call to save a few cycles.
+     */
+    main_ptr->xbuffer[0] = (JSAMPIMAGE)
+                           (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
+                                   cinfo->num_components * 2 * SIZEOF(JSAMPARRAY));
+    main_ptr->xbuffer[1] = main_ptr->xbuffer[0] + cinfo->num_components;
+
+    for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
+            ci++, compptr++)
+    {
+        rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
+                 cinfo->min_DCT_v_scaled_size; /* height of a row group of component */
+        /* Get space for pointer lists --- M+4 row groups in each list.
+         * We alloc both pointer lists with one call to save a few cycles.
+         */
+        xbuf = (JSAMPARRAY)
+               (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
+                                           2 * (rgroup * (M + 4)) * SIZEOF(JSAMPROW));
+        xbuf += rgroup;		/* want one row group at negative offsets */
+        main_ptr->xbuffer[0][ci] = xbuf;
+        xbuf += rgroup * (M + 4);
+        main_ptr->xbuffer[1][ci] = xbuf;
+    }
+}
+
+
+LOCAL(void)
+make_funny_pointers (j_decompress_ptr cinfo)
+/* Create the funny pointer lists discussed in the comments above.
+ * The actual workspace is already allocated (in main_ptr->buffer),
+ * and the space for the pointer lists is allocated too.
+ * This routine just fills in the curiously ordered lists.
+ * This will be repeated at the beginning of each pass.
+ */
+{
+    my_main_ptr main_ptr = (my_main_ptr) cinfo->main;
+    int ci, i, rgroup;
+    int M = cinfo->min_DCT_v_scaled_size;
+    jpeg_component_info *compptr;
+    JSAMPARRAY buf, xbuf0, xbuf1;
+
+    for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
+            ci++, compptr++)
+    {
+        rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
+                 cinfo->min_DCT_v_scaled_size; /* height of a row group of component */
+        xbuf0 = main_ptr->xbuffer[0][ci];
+        xbuf1 = main_ptr->xbuffer[1][ci];
+        /* First copy the workspace pointers as-is */
+        buf = main_ptr->buffer[ci];
+        for (i = 0; i < rgroup * (M + 2); i++)
+        {
+            xbuf0[i] = xbuf1[i] = buf[i];
+        }
+        /* In the second list, put the last four row groups in swapped order */
+        for (i = 0; i < rgroup * 2; i++)
+        {
+            xbuf1[rgroup*(M-2) + i] = buf[rgroup*M + i];
+            xbuf1[rgroup*M + i] = buf[rgroup*(M-2) + i];
+        }
+        /* The wraparound pointers at top and bottom will be filled later
+         * (see set_wraparound_pointers, below).  Initially we want the "above"
+         * pointers to duplicate the first actual data line.  This only needs
+         * to happen in xbuffer[0].
+         */
+        for (i = 0; i < rgroup; i++)
+        {
+            xbuf0[i - rgroup] = xbuf0[0];
+        }
+    }
+}
+
+
+LOCAL(void)
+set_wraparound_pointers (j_decompress_ptr cinfo)
+/* Set up the "wraparound" pointers at top and bottom of the pointer lists.
+ * This changes the pointer list state from top-of-image to the normal state.
+ */
+{
+    my_main_ptr main_ptr = (my_main_ptr) cinfo->main;
+    int ci, i, rgroup;
+    int M = cinfo->min_DCT_v_scaled_size;
+    jpeg_component_info *compptr;
+    JSAMPARRAY xbuf0, xbuf1;
+
+    for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
+            ci++, compptr++)
+    {
+        rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
+                 cinfo->min_DCT_v_scaled_size; /* height of a row group of component */
+        xbuf0 = main_ptr->xbuffer[0][ci];
+        xbuf1 = main_ptr->xbuffer[1][ci];
+        for (i = 0; i < rgroup; i++)
+        {
+            xbuf0[i - rgroup] = xbuf0[rgroup*(M+1) + i];
+            xbuf1[i - rgroup] = xbuf1[rgroup*(M+1) + i];
+            xbuf0[rgroup*(M+2) + i] = xbuf0[i];
+            xbuf1[rgroup*(M+2) + i] = xbuf1[i];
+        }
+    }
+}
+
+
+LOCAL(void)
+set_bottom_pointers (j_decompress_ptr cinfo)
+/* Change the pointer lists to duplicate the last sample row at the bottom
+ * of the image.  whichptr indicates which xbuffer holds the final iMCU row.
+ * Also sets rowgroups_avail to indicate number of nondummy row groups in row.
+ */
+{
+    my_main_ptr main_ptr = (my_main_ptr) cinfo->main;
+    int ci, i, rgroup, iMCUheight, rows_left;
+    jpeg_component_info *compptr;
+    JSAMPARRAY xbuf;
+
+    for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
+            ci++, compptr++)
+    {
+        /* Count sample rows in one iMCU row and in one row group */
+        iMCUheight = compptr->v_samp_factor * compptr->DCT_v_scaled_size;
+        rgroup = iMCUheight / cinfo->min_DCT_v_scaled_size;
+        /* Count nondummy sample rows remaining for this component */
+        rows_left = (int) (compptr->downsampled_height % (JDIMENSION) iMCUheight);
+        if (rows_left == 0)
+        {
+            rows_left = iMCUheight;
+        }
+        /* Count nondummy row groups.  Should get same answer for each component,
+         * so we need only do it once.
+         */
+        if (ci == 0)
+        {
+            main_ptr->rowgroups_avail = (JDIMENSION) ((rows_left-1) / rgroup + 1);
+        }
+        /* Duplicate the last real sample row rgroup*2 times; this pads out the
+         * last partial rowgroup and ensures at least one full rowgroup of context.
+         */
+        xbuf = main_ptr->xbuffer[main_ptr->whichptr][ci];
+        for (i = 0; i < rgroup * 2; i++)
+        {
+            xbuf[rows_left + i] = xbuf[rows_left-1];
+        }
+    }
+}
+
+
+/*
+ * Initialize for a processing pass.
+ */
+
+METHODDEF(void)
+start_pass_main (j_decompress_ptr cinfo, J_BUF_MODE pass_mode)
+{
+    my_main_ptr main_ptr = (my_main_ptr) cinfo->main;
+
+    switch (pass_mode)
+    {
+    case JBUF_PASS_THRU:
+        if (cinfo->upsample->need_context_rows)
+        {
+            main_ptr->pub.process_data = process_data_context_main;
+            make_funny_pointers(cinfo); /* Create the xbuffer[] lists */
+            main_ptr->whichptr = 0;	/* Read first iMCU row into xbuffer[0] */
+            main_ptr->context_state = CTX_PREPARE_FOR_IMCU;
+            main_ptr->iMCU_row_ctr = 0;
+        }
+        else
+        {
+            /* Simple case with no context needed */
+            main_ptr->pub.process_data = process_data_simple_main;
+        }
+        main_ptr->buffer_full = FALSE;	/* Mark buffer empty */
+        main_ptr->rowgroup_ctr = 0;
+        break;
+#ifdef QUANT_2PASS_SUPPORTED
+    case JBUF_CRANK_DEST:
+        /* For last pass of 2-pass quantization, just crank the postprocessor */
+        main_ptr->pub.process_data = process_data_crank_post;
+        break;
+#endif
+    default:
+        ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
+        break;
+    }
+}
+
+
+/*
+ * Process some data.
+ * This handles the simple case where no context is required.
+ */
+
+METHODDEF(void)
+process_data_simple_main (j_decompress_ptr cinfo,
+                          JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
+                          JDIMENSION out_rows_avail)
+{
+    my_main_ptr main_ptr = (my_main_ptr) cinfo->main;
+    JDIMENSION rowgroups_avail;
+
+    /* Read input data if we haven't filled the main buffer yet */
+    if (! main_ptr->buffer_full)
+    {
+        if (! (*cinfo->coef->decompress_data) (cinfo, main_ptr->buffer))
+        {
+            return;    /* suspension forced, can do nothing more */
+        }
+        main_ptr->buffer_full = TRUE;	/* OK, we have an iMCU row to work with */
+    }
+
+    /* There are always min_DCT_scaled_size row groups in an iMCU row. */
+    rowgroups_avail = (JDIMENSION) cinfo->min_DCT_v_scaled_size;
+    /* Note: at the bottom of the image, we may pass extra garbage row groups
+     * to the postprocessor.  The postprocessor has to check for bottom
+     * of image anyway (at row resolution), so no point in us doing it too.
+     */
+
+    /* Feed the postprocessor */
+    (*cinfo->post->post_process_data) (cinfo, main_ptr->buffer,
+                                       &main_ptr->rowgroup_ctr, rowgroups_avail,
+                                       output_buf, out_row_ctr, out_rows_avail);
+
+    /* Has postprocessor consumed all the data yet? If so, mark buffer empty */
+    if (main_ptr->rowgroup_ctr >= rowgroups_avail)
+    {
+        main_ptr->buffer_full = FALSE;
+        main_ptr->rowgroup_ctr = 0;
+    }
+}
+
+
+/*
+ * Process some data.
+ * This handles the case where context rows must be provided.
+ */
+
+METHODDEF(void)
+process_data_context_main (j_decompress_ptr cinfo,
+                           JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
+                           JDIMENSION out_rows_avail)
+{
+    my_main_ptr main_ptr = (my_main_ptr) cinfo->main;
+
+    /* Read input data if we haven't filled the main buffer yet */
+    if (! main_ptr->buffer_full)
+    {
+        if (! (*cinfo->coef->decompress_data) (cinfo,
+                                               main_ptr->xbuffer[main_ptr->whichptr]))
+        {
+            return;    /* suspension forced, can do nothing more */
+        }
+        main_ptr->buffer_full = TRUE;	/* OK, we have an iMCU row to work with */
+        main_ptr->iMCU_row_ctr++;	/* count rows received */
+    }
+
+    /* Postprocessor typically will not swallow all the input data it is handed
+     * in one call (due to filling the output buffer first).  Must be prepared
+     * to exit and restart.  This switch lets us keep track of how far we got.
+     * Note that each case falls through to the next on successful completion.
+     */
+    switch (main_ptr->context_state)
+    {
+    case CTX_POSTPONED_ROW:
+        /* Call postprocessor using previously set pointers for postponed row */
+        (*cinfo->post->post_process_data) (cinfo, main_ptr->xbuffer[main_ptr->whichptr],
+                                           &main_ptr->rowgroup_ctr, main_ptr->rowgroups_avail,
+                                           output_buf, out_row_ctr, out_rows_avail);
+        if (main_ptr->rowgroup_ctr < main_ptr->rowgroups_avail)
+        {
+            return;    /* Need to suspend */
+        }
+        main_ptr->context_state = CTX_PREPARE_FOR_IMCU;
+        if (*out_row_ctr >= out_rows_avail)
+        {
+            return;    /* Postprocessor exactly filled output buf */
+        }
+        /*FALLTHROUGH*/
+    case CTX_PREPARE_FOR_IMCU:
+        /* Prepare to process first M-1 row groups of this iMCU row */
+        main_ptr->rowgroup_ctr = 0;
+        main_ptr->rowgroups_avail = (JDIMENSION) (cinfo->min_DCT_v_scaled_size - 1);
+        /* Check for bottom of image: if so, tweak pointers to "duplicate"
+         * the last sample row, and adjust rowgroups_avail to ignore padding rows.
+         */
+        if (main_ptr->iMCU_row_ctr == cinfo->total_iMCU_rows)
+        {
+            set_bottom_pointers(cinfo);
+        }
+        main_ptr->context_state = CTX_PROCESS_IMCU;
+        /*FALLTHROUGH*/
+    case CTX_PROCESS_IMCU:
+        /* Call postprocessor using previously set pointers */
+        (*cinfo->post->post_process_data) (cinfo, main_ptr->xbuffer[main_ptr->whichptr],
+                                           &main_ptr->rowgroup_ctr, main_ptr->rowgroups_avail,
+                                           output_buf, out_row_ctr, out_rows_avail);
+        if (main_ptr->rowgroup_ctr < main_ptr->rowgroups_avail)
+        {
+            return;    /* Need to suspend */
+        }
+        /* After the first iMCU, change wraparound pointers to normal state */
+        if (main_ptr->iMCU_row_ctr == 1)
+        {
+            set_wraparound_pointers(cinfo);
+        }
+        /* Prepare to load new iMCU row using other xbuffer list */
+        main_ptr->whichptr ^= 1;	/* 0=>1 or 1=>0 */
+        main_ptr->buffer_full = FALSE;
+        /* Still need to process last row group of this iMCU row, */
+        /* which is saved at index M+1 of the other xbuffer */
+        main_ptr->rowgroup_ctr = (JDIMENSION) (cinfo->min_DCT_v_scaled_size + 1);
+        main_ptr->rowgroups_avail = (JDIMENSION) (cinfo->min_DCT_v_scaled_size + 2);
+        main_ptr->context_state = CTX_POSTPONED_ROW;
+    }
+}
+
+
+/*
+ * Process some data.
+ * Final pass of two-pass quantization: just call the postprocessor.
+ * Source data will be the postprocessor controller's internal buffer.
+ */
+
+#ifdef QUANT_2PASS_SUPPORTED
+
+METHODDEF(void)
+process_data_crank_post (j_decompress_ptr cinfo,
+                         JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
+                         JDIMENSION out_rows_avail)
+{
+    (*cinfo->post->post_process_data) (cinfo, (JSAMPIMAGE) NULL,
+                                       (JDIMENSION *) NULL, (JDIMENSION) 0,
+                                       output_buf, out_row_ctr, out_rows_avail);
+}
+
+#endif /* QUANT_2PASS_SUPPORTED */
+
+
+/*
+ * Initialize main buffer controller.
+ */
+
+GLOBAL(void)
+jinit_d_main_controller (j_decompress_ptr cinfo, boolean need_full_buffer)
+{
+    my_main_ptr main_ptr;
+    int ci, rgroup, ngroups;
+    jpeg_component_info *compptr;
+
+    main_ptr = (my_main_ptr)
+               (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
+                                           SIZEOF(my_main_controller));
+    cinfo->main = (struct jpeg_d_main_controller *) main_ptr;
+    main_ptr->pub.start_pass = start_pass_main;
+
+    if (need_full_buffer)		/* shouldn't happen */
+    {
+        ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
+    }
+
+    /* Allocate the workspace.
+     * ngroups is the number of row groups we need.
+     */
+    if (cinfo->upsample->need_context_rows)
+    {
+        if (cinfo->min_DCT_v_scaled_size < 2) /* unsupported, see comments above */
+        {
+            ERREXIT(cinfo, JERR_NOTIMPL);
+        }
+        alloc_funny_pointers(cinfo); /* Alloc space for xbuffer[] lists */
+        ngroups = cinfo->min_DCT_v_scaled_size + 2;
+    }
+    else
+    {
+        ngroups = cinfo->min_DCT_v_scaled_size;
+    }
+
+    for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
+            ci++, compptr++)
+    {
+        rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
+                 cinfo->min_DCT_v_scaled_size; /* height of a row group of component */
+        main_ptr->buffer[ci] = (*cinfo->mem->alloc_sarray)
+                               ((j_common_ptr) cinfo, JPOOL_IMAGE,
+                                compptr->width_in_blocks * compptr->DCT_h_scaled_size,
+                                (JDIMENSION) (rgroup * ngroups));
+    }
+}
diff -NEaurb neo/renderer/jpeg-8c/jdmarker.c neo/renderer/jpeg-8c/jdmarker.c
--- neo/renderer/jpeg-8c/jdmarker.c	1970-01-01 00:00:00 +0000
+++ neo/renderer/jpeg-8c/jdmarker.c	2012-11-17 01:20:41 +0000
@@ -0,0 +1,1642 @@
+/*
+ * jdmarker.c
+ *
+ * Copyright (C) 1991-1998, Thomas G. Lane.
+ * Modified 2009 by Guido Vollbeding.
+ * This file is part of the Independent JPEG Group's software.
+ * For conditions of distribution and use, see the accompanying README file.
+ *
+ * This file contains routines to decode JPEG datastream markers.
+ * Most of the complexity arises from our desire to support input
+ * suspension: if not all of the data for a marker is available,
+ * we must exit back to the application.  On resumption, we reprocess
+ * the marker.
+ */
+
+#define JPEG_INTERNALS
+#include "jinclude.h"
+#include "jpeglib.h"
+
+
+typedef enum  			/* JPEG marker codes */
+{
+    M_SOF0  = 0xc0,
+    M_SOF1  = 0xc1,
+    M_SOF2  = 0xc2,
+    M_SOF3  = 0xc3,
+
+    M_SOF5  = 0xc5,
+    M_SOF6  = 0xc6,
+    M_SOF7  = 0xc7,
+
+    M_JPG   = 0xc8,
+    M_SOF9  = 0xc9,
+    M_SOF10 = 0xca,
+    M_SOF11 = 0xcb,
+
+    M_SOF13 = 0xcd,
+    M_SOF14 = 0xce,
+    M_SOF15 = 0xcf,
+
+    M_DHT   = 0xc4,
+
+    M_DAC   = 0xcc,
+
+    M_RST0  = 0xd0,
+    M_RST1  = 0xd1,
+    M_RST2  = 0xd2,
+    M_RST3  = 0xd3,
+    M_RST4  = 0xd4,
+    M_RST5  = 0xd5,
+    M_RST6  = 0xd6,
+    M_RST7  = 0xd7,
+
+    M_SOI   = 0xd8,
+    M_EOI   = 0xd9,
+    M_SOS   = 0xda,
+    M_DQT   = 0xdb,
+    M_DNL   = 0xdc,
+    M_DRI   = 0xdd,
+    M_DHP   = 0xde,
+    M_EXP   = 0xdf,
+
+    M_APP0  = 0xe0,
+    M_APP1  = 0xe1,
+    M_APP2  = 0xe2,
+    M_APP3  = 0xe3,
+    M_APP4  = 0xe4,
+    M_APP5  = 0xe5,
+    M_APP6  = 0xe6,
+    M_APP7  = 0xe7,
+    M_APP8  = 0xe8,
+    M_APP9  = 0xe9,
+    M_APP10 = 0xea,
+    M_APP11 = 0xeb,
+    M_APP12 = 0xec,
+    M_APP13 = 0xed,
+    M_APP14 = 0xee,
+    M_APP15 = 0xef,
+
+    M_JPG0  = 0xf0,
+    M_JPG13 = 0xfd,
+    M_COM   = 0xfe,
+
+    M_TEM   = 0x01,
+
+    M_ERROR = 0x100
+} JPEG_MARKER;
+
+
+/* Private state */
+
+typedef struct
+{
+    struct jpeg_marker_reader pub; /* public fields */
+
+    /* Application-overridable marker processing methods */
+    jpeg_marker_parser_method process_COM;
+    jpeg_marker_parser_method process_APPn[16];
+
+    /* Limit on marker data length to save for each marker type */
+    unsigned int length_limit_COM;
+    unsigned int length_limit_APPn[16];
+
+    /* Status of COM/APPn marker saving */
+    jpeg_saved_marker_ptr cur_marker;	/* NULL if not processing a marker */
+    unsigned int bytes_read;		/* data bytes read so far in marker */
+    /* Note: cur_marker is not linked into marker_list until it's all read. */
+} my_marker_reader;
+
+typedef my_marker_reader * my_marker_ptr;
+
+
+/*
+ * Macros for fetching data from the data source module.
+ *
+ * At all times, cinfo->src->next_input_byte and ->bytes_in_buffer reflect
+ * the current restart point; we update them only when we have reached a
+ * suitable place to restart if a suspension occurs.
+ */
+
+/* Declare and initialize local copies of input pointer/count */
+#define INPUT_VARS(cinfo)  \
+	struct jpeg_source_mgr * datasrc = (cinfo)->src;  \
+	const JOCTET * next_input_byte = datasrc->next_input_byte;  \
+	size_t bytes_in_buffer = datasrc->bytes_in_buffer
+
+/* Unload the local copies --- do this only at a restart boundary */
+#define INPUT_SYNC(cinfo)  \
+	( datasrc->next_input_byte = next_input_byte,  \
+	  datasrc->bytes_in_buffer = bytes_in_buffer )
+
+/* Reload the local copies --- used only in MAKE_BYTE_AVAIL */
+#define INPUT_RELOAD(cinfo)  \
+	( next_input_byte = datasrc->next_input_byte,  \
+	  bytes_in_buffer = datasrc->bytes_in_buffer )
+
+/* Internal macro for INPUT_BYTE and INPUT_2BYTES: make a byte available.
+ * Note we do *not* do INPUT_SYNC before calling fill_input_buffer,
+ * but we must reload the local copies after a successful fill.
+ */
+#define MAKE_BYTE_AVAIL(cinfo,action)  \
+	if (bytes_in_buffer == 0) {  \
+	  if (! (*datasrc->fill_input_buffer) (cinfo))  \
+	    { action; }  \
+	  INPUT_RELOAD(cinfo);  \
+	}
+
+/* Read a byte into variable V.
+ * If must suspend, take the specified action (typically "return FALSE").
+ */
+#define INPUT_BYTE(cinfo,V,action)  \
+	MAKESTMT( MAKE_BYTE_AVAIL(cinfo,action); \
+		  bytes_in_buffer--; \
+		  V = GETJOCTET(*next_input_byte++); )
+
+/* As above, but read two bytes interpreted as an unsigned 16-bit integer.
+ * V should be declared unsigned int or perhaps INT32.
+ */
+#define INPUT_2BYTES(cinfo,V,action)  \
+	MAKESTMT( MAKE_BYTE_AVAIL(cinfo,action); \
+		  bytes_in_buffer--; \
+		  V = ((unsigned int) GETJOCTET(*next_input_byte++)) << 8; \
+		  MAKE_BYTE_AVAIL(cinfo,action); \
+		  bytes_in_buffer--; \
+		  V += GETJOCTET(*next_input_byte++); )
+
+
+/*
+ * Routines to process JPEG markers.
+ *
+ * Entry condition: JPEG marker itself has been read and its code saved
+ *   in cinfo->unread_marker; input restart point is just after the marker.
+ *
+ * Exit: if return TRUE, have read and processed any parameters, and have
+ *   updated the restart point to point after the parameters.
+ *   If return FALSE, was forced to suspend before reaching end of
+ *   marker parameters; restart point has not been moved.  Same routine
+ *   will be called again after application supplies more input data.
+ *
+ * This approach to suspension assumes that all of a marker's parameters
+ * can fit into a single input bufferload.  This should hold for "normal"
+ * markers.  Some COM/APPn markers might have large parameter segments
+ * that might not fit.  If we are simply dropping such a marker, we use
+ * skip_input_data to get past it, and thereby put the problem on the
+ * source manager's shoulders.  If we are saving the marker's contents
+ * into memory, we use a slightly different convention: when forced to
+ * suspend, the marker processor updates the restart point to the end of
+ * what it's consumed (ie, the end of the buffer) before returning FALSE.
+ * On resumption, cinfo->unread_marker still contains the marker code,
+ * but the data source will point to the next chunk of marker data.
+ * The marker processor must retain internal state to deal with this.
+ *
+ * Note that we don't bother to avoid duplicate trace messages if a
+ * suspension occurs within marker parameters.  Other side effects
+ * require more care.
+ */
+
+
+LOCAL(boolean)
+get_soi (j_decompress_ptr cinfo)
+/* Process an SOI marker */
+{
+    int i;
+
+    TRACEMS(cinfo, 1, JTRC_SOI);
+
+    if (cinfo->marker->saw_SOI)
+    {
+        ERREXIT(cinfo, JERR_SOI_DUPLICATE);
+    }
+
+    /* Reset all parameters that are defined to be reset by SOI */
+
+    for (i = 0; i < NUM_ARITH_TBLS; i++)
+    {
+        cinfo->arith_dc_L[i] = 0;
+        cinfo->arith_dc_U[i] = 1;
+        cinfo->arith_ac_K[i] = 5;
+    }
+    cinfo->restart_interval = 0;
+
+    /* Set initial assumptions for colorspace etc */
+
+    cinfo->jpeg_color_space = JCS_UNKNOWN;
+    cinfo->CCIR601_sampling = FALSE; /* Assume non-CCIR sampling??? */
+
+    cinfo->saw_JFIF_marker = FALSE;
+    cinfo->JFIF_major_version = 1; /* set default JFIF APP0 values */
+    cinfo->JFIF_minor_version = 1;
+    cinfo->density_unit = 0;
+    cinfo->X_density = 1;
+    cinfo->Y_density = 1;
+    cinfo->saw_Adobe_marker = FALSE;
+    cinfo->Adobe_transform = 0;
+
+    cinfo->marker->saw_SOI = TRUE;
+
+    return TRUE;
+}
+
+
+LOCAL(boolean)
+get_sof (j_decompress_ptr cinfo, boolean is_baseline, boolean is_prog,
+         boolean is_arith)
+/* Process a SOFn marker */
+{
+    INT32 length;
+    int c, ci;
+    jpeg_component_info * compptr;
+    INPUT_VARS(cinfo);
+
+    cinfo->is_baseline = is_baseline;
+    cinfo->progressive_mode = is_prog;
+    cinfo->arith_code = is_arith;
+
+    INPUT_2BYTES(cinfo, length, return FALSE);
+
+    INPUT_BYTE(cinfo, cinfo->data_precision, return FALSE);
+    INPUT_2BYTES(cinfo, cinfo->image_height, return FALSE);
+    INPUT_2BYTES(cinfo, cinfo->image_width, return FALSE);
+    INPUT_BYTE(cinfo, cinfo->num_components, return FALSE);
+
+    length -= 8;
+
+    TRACEMS4(cinfo, 1, JTRC_SOF, cinfo->unread_marker,
+             (int) cinfo->image_width, (int) cinfo->image_height,
+             cinfo->num_components);
+
+    if (cinfo->marker->saw_SOF)
+    {
+        ERREXIT(cinfo, JERR_SOF_DUPLICATE);
+    }
+
+    /* We don't support files in which the image height is initially specified */
+    /* as 0 and is later redefined by DNL.  As long as we have to check that,  */
+    /* might as well have a general sanity check. */
+    if (cinfo->image_height <= 0 || cinfo->image_width <= 0
+            || cinfo->num_components <= 0)
+    {
+        ERREXIT(cinfo, JERR_EMPTY_IMAGE);
+    }
+
+    if (length != (cinfo->num_components * 3))
+    {
+        ERREXIT(cinfo, JERR_BAD_LENGTH);
+    }
+
+    if (cinfo->comp_info == NULL)	/* do only once, even if suspend */
+        cinfo->comp_info = (jpeg_component_info *) (*cinfo->mem->alloc_small)
+                           ((j_common_ptr) cinfo, JPOOL_IMAGE,
+                            cinfo->num_components * SIZEOF(jpeg_component_info));
+
+    for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
+            ci++, compptr++)
+    {
+        compptr->component_index = ci;
+        INPUT_BYTE(cinfo, compptr->component_id, return FALSE);
+        INPUT_BYTE(cinfo, c, return FALSE);
+        compptr->h_samp_factor = (c >> 4) & 15;
+        compptr->v_samp_factor = (c     ) & 15;
+        INPUT_BYTE(cinfo, compptr->quant_tbl_no, return FALSE);
+
+        TRACEMS4(cinfo, 1, JTRC_SOF_COMPONENT,
+                 compptr->component_id, compptr->h_samp_factor,
+                 compptr->v_samp_factor, compptr->quant_tbl_no);
+    }
+
+    cinfo->marker->saw_SOF = TRUE;
+
+    INPUT_SYNC(cinfo);
+    return TRUE;
+}
+
+
+LOCAL(boolean)
+get_sos (j_decompress_ptr cinfo)
+/* Process a SOS marker */
+{
+    INT32 length;
+    int i, ci, n, c, cc;
+    jpeg_component_info * compptr;
+    INPUT_VARS(cinfo);
+
+    if (! cinfo->marker->saw_SOF)
+    {
+        ERREXIT(cinfo, JERR_SOS_NO_SOF);
+    }
+
+    INPUT_2BYTES(cinfo, length, return FALSE);
+
+    INPUT_BYTE(cinfo, n, return FALSE); /* Number of components */
+
+    TRACEMS1(cinfo, 1, JTRC_SOS, n);
+
+    if (length != (n * 2 + 6) || n > MAX_COMPS_IN_SCAN ||
+            (n == 0 && !cinfo->progressive_mode))
+        /* pseudo SOS marker only allowed in progressive mode */
+    {
+        ERREXIT(cinfo, JERR_BAD_LENGTH);
+    }
+
+    cinfo->comps_in_scan = n;
+
+    /* Collect the component-spec parameters */
+
+    for (i = 0; i < n; i++)
+    {
+        INPUT_BYTE(cinfo, cc, return FALSE);
+        INPUT_BYTE(cinfo, c, return FALSE);
+
+        for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
+                ci++, compptr++)
+        {
+            if (cc == compptr->component_id)
+            {
+                goto id_found;
+            }
+        }
+
+        ERREXIT1(cinfo, JERR_BAD_COMPONENT_ID, cc);
+
+id_found:
+
+        cinfo->cur_comp_info[i] = compptr;
+        compptr->dc_tbl_no = (c >> 4) & 15;
+        compptr->ac_tbl_no = (c     ) & 15;
+
+        TRACEMS3(cinfo, 1, JTRC_SOS_COMPONENT, cc,
+                 compptr->dc_tbl_no, compptr->ac_tbl_no);
+    }
+
+    /* Collect the additional scan parameters Ss, Se, Ah/Al. */
+    INPUT_BYTE(cinfo, c, return FALSE);
+    cinfo->Ss = c;
+    INPUT_BYTE(cinfo, c, return FALSE);
+    cinfo->Se = c;
+    INPUT_BYTE(cinfo, c, return FALSE);
+    cinfo->Ah = (c >> 4) & 15;
+    cinfo->Al = (c     ) & 15;
+
+    TRACEMS4(cinfo, 1, JTRC_SOS_PARAMS, cinfo->Ss, cinfo->Se,
+             cinfo->Ah, cinfo->Al);
+
+    /* Prepare to scan data & restart markers */
+    cinfo->marker->next_restart_num = 0;
+
+    /* Count another (non-pseudo) SOS marker */
+    if (n)
+    {
+        cinfo->input_scan_number++;
+    }
+
+    INPUT_SYNC(cinfo);
+    return TRUE;
+}
+
+
+#ifdef D_ARITH_CODING_SUPPORTED
+
+LOCAL(boolean)
+get_dac (j_decompress_ptr cinfo)
+/* Process a DAC marker */
+{
+    INT32 length;
+    int index, val;
+    INPUT_VARS(cinfo);
+
+    INPUT_2BYTES(cinfo, length, return FALSE);
+    length -= 2;
+
+    while (length > 0)
+    {
+        INPUT_BYTE(cinfo, index, return FALSE);
+        INPUT_BYTE(cinfo, val, return FALSE);
+
+        length -= 2;
+
+        TRACEMS2(cinfo, 1, JTRC_DAC, index, val);
+
+        if (index < 0 || index >= (2*NUM_ARITH_TBLS))
+        {
+            ERREXIT1(cinfo, JERR_DAC_INDEX, index);
+        }
+
+        if (index >= NUM_ARITH_TBLS)   /* define AC table */
+        {
+            cinfo->arith_ac_K[index-NUM_ARITH_TBLS] = (UINT8) val;
+        }
+        else  			/* define DC table */
+        {
+            cinfo->arith_dc_L[index] = (UINT8) (val & 0x0F);
+            cinfo->arith_dc_U[index] = (UINT8) (val >> 4);
+            if (cinfo->arith_dc_L[index] > cinfo->arith_dc_U[index])
+            {
+                ERREXIT1(cinfo, JERR_DAC_VALUE, val);
+            }
+        }
+    }
+
+    if (length != 0)
+    {
+        ERREXIT(cinfo, JERR_BAD_LENGTH);
+    }
+
+    INPUT_SYNC(cinfo);
+    return TRUE;
+}
+
+#else /* ! D_ARITH_CODING_SUPPORTED */
+
+#define get_dac(cinfo)  skip_variable(cinfo)
+
+#endif /* D_ARITH_CODING_SUPPORTED */
+
+
+LOCAL(boolean)
+get_dht (j_decompress_ptr cinfo)
+/* Process a DHT marker */
+{
+    INT32 length;
+    UINT8 bits[17];
+    UINT8 huffval[256];
+    int i, index, count;
+    JHUFF_TBL **htblptr;
+    INPUT_VARS(cinfo);
+
+    INPUT_2BYTES(cinfo, length, return FALSE);
+    length -= 2;
+
+    while (length > 16)
+    {
+        INPUT_BYTE(cinfo, index, return FALSE);
+
+        TRACEMS1(cinfo, 1, JTRC_DHT, index);
+
+        bits[0] = 0;
+        count = 0;
+        for (i = 1; i <= 16; i++)
+        {
+            INPUT_BYTE(cinfo, bits[i], return FALSE);
+            count += bits[i];
+        }
+
+        length -= 1 + 16;
+
+        TRACEMS8(cinfo, 2, JTRC_HUFFBITS,
+                 bits[1], bits[2], bits[3], bits[4],
+                 bits[5], bits[6], bits[7], bits[8]);
+        TRACEMS8(cinfo, 2, JTRC_HUFFBITS,
+                 bits[9], bits[10], bits[11], bits[12],
+                 bits[13], bits[14], bits[15], bits[16]);
+
+        /* Here we just do minimal validation of the counts to avoid walking
+         * off the end of our table space.  jdhuff.c will check more carefully.
+         */
+        if (count > 256 || ((INT32) count) > length)
+        {
+            ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
+        }
+
+        for (i = 0; i < count; i++)
+        {
+            INPUT_BYTE(cinfo, huffval[i], return FALSE);
+        }
+
+        length -= count;
+
+        if (index & 0x10)  		/* AC table definition */
+        {
+            index -= 0x10;
+            htblptr = &cinfo->ac_huff_tbl_ptrs[index];
+        }
+        else  			/* DC table definition */
+        {
+            htblptr = &cinfo->dc_huff_tbl_ptrs[index];
+        }
+
+        if (index < 0 || index >= NUM_HUFF_TBLS)
+        {
+            ERREXIT1(cinfo, JERR_DHT_INDEX, index);
+        }
+
+        if (*htblptr == NULL)
+        {
+            *htblptr = jpeg_alloc_huff_table((j_common_ptr) cinfo);
+        }
+
+        MEMCOPY((*htblptr)->bits, bits, SIZEOF((*htblptr)->bits));
+        MEMCOPY((*htblptr)->huffval, huffval, SIZEOF((*htblptr)->huffval));
+    }
+
+    if (length != 0)
+    {
+        ERREXIT(cinfo, JERR_BAD_LENGTH);
+    }
+
+    INPUT_SYNC(cinfo);
+    return TRUE;
+}
+
+
+LOCAL(boolean)
+get_dqt (j_decompress_ptr cinfo)
+/* Process a DQT marker */
+{
+    INT32 length, count, i;
+    int n, prec;
+    unsigned int tmp;
+    JQUANT_TBL *quant_ptr;
+    const int *natural_order;
+    INPUT_VARS(cinfo);
+
+    INPUT_2BYTES(cinfo, length, return FALSE);
+    length -= 2;
+
+    while (length > 0)
+    {
+        length--;
+        INPUT_BYTE(cinfo, n, return FALSE);
+        prec = n >> 4;
+        n &= 0x0F;
+
+        TRACEMS2(cinfo, 1, JTRC_DQT, n, prec);
+
+        if (n >= NUM_QUANT_TBLS)
+        {
+            ERREXIT1(cinfo, JERR_DQT_INDEX, n);
+        }
+
+        if (cinfo->quant_tbl_ptrs[n] == NULL)
+        {
+            cinfo->quant_tbl_ptrs[n] = jpeg_alloc_quant_table((j_common_ptr) cinfo);
+        }
+        quant_ptr = cinfo->quant_tbl_ptrs[n];
+
+        if (prec)
+        {
+            if (length < DCTSIZE2 * 2)
+            {
+                /* Initialize full table for safety. */
+                for (i = 0; i < DCTSIZE2; i++)
+                {
+                    quant_ptr->quantval[i] = 1;
+                }
+                count = length >> 1;
+            }
+            else
+            {
+                count = DCTSIZE2;
+            }
+        }
+        else
+        {
+            if (length < DCTSIZE2)
+            {
+                /* Initialize full table for safety. */
+                for (i = 0; i < DCTSIZE2; i++)
+                {
+                    quant_ptr->quantval[i] = 1;
+                }
+                count = length;
+            }
+            else
+            {
+                count = DCTSIZE2;
+            }
+        }
+
+        switch (count)
+        {
+        case (2*2):
+            natural_order = jpeg_natural_order2;
+            break;
+        case (3*3):
+            natural_order = jpeg_natural_order3;
+            break;
+        case (4*4):
+            natural_order = jpeg_natural_order4;
+            break;
+        case (5*5):
+            natural_order = jpeg_natural_order5;
+            break;
+        case (6*6):
+            natural_order = jpeg_natural_order6;
+            break;
+        case (7*7):
+            natural_order = jpeg_natural_order7;
+            break;
+        default:
+            natural_order = jpeg_natural_order;
+            break;
+        }
+
+        for (i = 0; i < count; i++)
+        {
+            if (prec)
+            {
+                INPUT_2BYTES(cinfo, tmp, return FALSE);
+            }
+            else
+            {
+                INPUT_BYTE(cinfo, tmp, return FALSE);
+            }
+            /* We convert the zigzag-order table to natural array order. */
+            quant_ptr->quantval[natural_order[i]] = (UINT16) tmp;
+        }
+
+        if (cinfo->err->trace_level >= 2)
+        {
+            for (i = 0; i < DCTSIZE2; i += 8)
+            {
+                TRACEMS8(cinfo, 2, JTRC_QUANTVALS,
+                         quant_ptr->quantval[i],   quant_ptr->quantval[i+1],
+                         quant_ptr->quantval[i+2], quant_ptr->quantval[i+3],
+                         quant_ptr->quantval[i+4], quant_ptr->quantval[i+5],
+                         quant_ptr->quantval[i+6], quant_ptr->quantval[i+7]);
+            }
+        }
+
+        length -= count;
+        if (prec)
+        {
+            length -= count;
+        }
+    }
+
+    if (length != 0)
+    {
+        ERREXIT(cinfo, JERR_BAD_LENGTH);
+    }
+
+    INPUT_SYNC(cinfo);
+    return TRUE;
+}
+
+
+LOCAL(boolean)
+get_dri (j_decompress_ptr cinfo)
+/* Process a DRI marker */
+{
+    INT32 length;
+    unsigned int tmp;
+    INPUT_VARS(cinfo);
+
+    INPUT_2BYTES(cinfo, length, return FALSE);
+
+    if (length != 4)
+    {
+        ERREXIT(cinfo, JERR_BAD_LENGTH);
+    }
+
+    INPUT_2BYTES(cinfo, tmp, return FALSE);
+
+    TRACEMS1(cinfo, 1, JTRC_DRI, tmp);
+
+    cinfo->restart_interval = tmp;
+
+    INPUT_SYNC(cinfo);
+    return TRUE;
+}
+
+
+/*
+ * Routines for processing APPn and COM markers.
+ * These are either saved in memory or discarded, per application request.
+ * APP0 and APP14 are specially checked to see if they are
+ * JFIF and Adobe markers, respectively.
+ */
+
+#define APP0_DATA_LEN	14	/* Length of interesting data in APP0 */
+#define APP14_DATA_LEN	12	/* Length of interesting data in APP14 */
+#define APPN_DATA_LEN	14	/* Must be the largest of the above!! */
+
+
+LOCAL(void)
+examine_app0 (j_decompress_ptr cinfo, JOCTET FAR * data,
+              unsigned int datalen, INT32 remaining)
+/* Examine first few bytes from an APP0.
+ * Take appropriate action if it is a JFIF marker.
+ * datalen is # of bytes at data[], remaining is length of rest of marker data.
+ */
+{
+    INT32 totallen = (INT32) datalen + remaining;
+
+    if (datalen >= APP0_DATA_LEN &&
+            GETJOCTET(data[0]) == 0x4A &&
+            GETJOCTET(data[1]) == 0x46 &&
+            GETJOCTET(data[2]) == 0x49 &&
+            GETJOCTET(data[3]) == 0x46 &&
+            GETJOCTET(data[4]) == 0)
+    {
+        /* Found JFIF APP0 marker: save info */
+        cinfo->saw_JFIF_marker = TRUE;
+        cinfo->JFIF_major_version = GETJOCTET(data[5]);
+        cinfo->JFIF_minor_version = GETJOCTET(data[6]);
+        cinfo->density_unit = GETJOCTET(data[7]);
+        cinfo->X_density = (GETJOCTET(data[8]) << 8) + GETJOCTET(data[9]);
+        cinfo->Y_density = (GETJOCTET(data[10]) << 8) + GETJOCTET(data[11]);
+        /* Check version.
+         * Major version must be 1, anything else signals an incompatible change.
+         * (We used to treat this as an error, but now it's a nonfatal warning,
+         * because some bozo at Hijaak couldn't read the spec.)
+         * Minor version should be 0..2, but process anyway if newer.
+         */
+        if (cinfo->JFIF_major_version != 1)
+            WARNMS2(cinfo, JWRN_JFIF_MAJOR,
+                    cinfo->JFIF_major_version, cinfo->JFIF_minor_version);
+        /* Generate trace messages */
+        TRACEMS5(cinfo, 1, JTRC_JFIF,
+                 cinfo->JFIF_major_version, cinfo->JFIF_minor_version,
+                 cinfo->X_density, cinfo->Y_density, cinfo->density_unit);
+        /* Validate thumbnail dimensions and issue appropriate messages */
+        if (GETJOCTET(data[12]) | GETJOCTET(data[13]))
+            TRACEMS2(cinfo, 1, JTRC_JFIF_THUMBNAIL,
+                     GETJOCTET(data[12]), GETJOCTET(data[13]));
+        totallen -= APP0_DATA_LEN;
+        if (totallen !=
+                ((INT32)GETJOCTET(data[12]) * (INT32)GETJOCTET(data[13]) * (INT32) 3))
+        {
+            TRACEMS1(cinfo, 1, JTRC_JFIF_BADTHUMBNAILSIZE, (int) totallen);
+        }
+    }
+    else if (datalen >= 6 &&
+             GETJOCTET(data[0]) == 0x4A &&
+             GETJOCTET(data[1]) == 0x46 &&
+             GETJOCTET(data[2]) == 0x58 &&
+             GETJOCTET(data[3]) == 0x58 &&
+             GETJOCTET(data[4]) == 0)
+    {
+        /* Found JFIF "JFXX" extension APP0 marker */
+        /* The library doesn't actually do anything with these,
+         * but we try to produce a helpful trace message.
+         */
+        switch (GETJOCTET(data[5]))
+        {
+        case 0x10:
+            TRACEMS1(cinfo, 1, JTRC_THUMB_JPEG, (int) totallen);
+            break;
+        case 0x11:
+            TRACEMS1(cinfo, 1, JTRC_THUMB_PALETTE, (int) totallen);
+            break;
+        case 0x13:
+            TRACEMS1(cinfo, 1, JTRC_THUMB_RGB, (int) totallen);
+            break;
+        default:
+            TRACEMS2(cinfo, 1, JTRC_JFIF_EXTENSION,
+                     GETJOCTET(data[5]), (int) totallen);
+            break;
+        }
+    }
+    else
+    {
+        /* Start of APP0 does not match "JFIF" or "JFXX", or too short */
+        TRACEMS1(cinfo, 1, JTRC_APP0, (int) totallen);
+    }
+}
+
+
+LOCAL(void)
+examine_app14 (j_decompress_ptr cinfo, JOCTET FAR * data,
+               unsigned int datalen, INT32 remaining)
+/* Examine first few bytes from an APP14.
+ * Take appropriate action if it is an Adobe marker.
+ * datalen is # of bytes at data[], remaining is length of rest of marker data.
+ */
+{
+    unsigned int version, flags0, flags1, transform;
+
+    if (datalen >= APP14_DATA_LEN &&
+            GETJOCTET(data[0]) == 0x41 &&
+            GETJOCTET(data[1]) == 0x64 &&
+            GETJOCTET(data[2]) == 0x6F &&
+            GETJOCTET(data[3]) == 0x62 &&
+            GETJOCTET(data[4]) == 0x65)
+    {
+        /* Found Adobe APP14 marker */
+        version = (GETJOCTET(data[5]) << 8) + GETJOCTET(data[6]);
+        flags0 = (GETJOCTET(data[7]) << 8) + GETJOCTET(data[8]);
+        flags1 = (GETJOCTET(data[9]) << 8) + GETJOCTET(data[10]);
+        transform = GETJOCTET(data[11]);
+        TRACEMS4(cinfo, 1, JTRC_ADOBE, version, flags0, flags1, transform);
+        cinfo->saw_Adobe_marker = TRUE;
+        cinfo->Adobe_transform = (UINT8) transform;
+    }
+    else
+    {
+        /* Start of APP14 does not match "Adobe", or too short */
+        TRACEMS1(cinfo, 1, JTRC_APP14, (int) (datalen + remaining));
+    }
+}
+
+
+METHODDEF(boolean)
+get_interesting_appn (j_decompress_ptr cinfo)
+/* Process an APP0 or APP14 marker without saving it */
+{
+    INT32 length;
+    JOCTET b[APPN_DATA_LEN];
+    unsigned int i, numtoread;
+    INPUT_VARS(cinfo);
+
+    INPUT_2BYTES(cinfo, length, return FALSE);
+    length -= 2;
+
+    /* get the interesting part of the marker data */
+    if (length >= APPN_DATA_LEN)
+    {
+        numtoread = APPN_DATA_LEN;
+    }
+    else if (length > 0)
+    {
+        numtoread = (unsigned int) length;
+    }
+    else
+    {
+        numtoread = 0;
+    }
+    for (i = 0; i < numtoread; i++)
+    {
+        INPUT_BYTE(cinfo, b[i], return FALSE);
+    }
+    length -= numtoread;
+
+    /* process it */
+    switch (cinfo->unread_marker)
+    {
+    case M_APP0:
+        examine_app0(cinfo, (JOCTET FAR *) b, numtoread, length);
+        break;
+    case M_APP14:
+        examine_app14(cinfo, (JOCTET FAR *) b, numtoread, length);
+        break;
+    default:
+        /* can't get here unless jpeg_save_markers chooses wrong processor */
+        ERREXIT1(cinfo, JERR_UNKNOWN_MARKER, cinfo->unread_marker);
+        break;
+    }
+
+    /* skip any remaining data -- could be lots */
+    INPUT_SYNC(cinfo);
+    if (length > 0)
+    {
+        (*cinfo->src->skip_input_data) (cinfo, (long) length);
+    }
+
+    return TRUE;
+}
+
+
+#ifdef SAVE_MARKERS_SUPPORTED
+
+METHODDEF(boolean)
+save_marker (j_decompress_ptr cinfo)
+/* Save an APPn or COM marker into the marker list */
+{
+    my_marker_ptr marker = (my_marker_ptr) cinfo->marker;
+    jpeg_saved_marker_ptr cur_marker = marker->cur_marker;
+    unsigned int bytes_read, data_length;
+    JOCTET FAR * data;
+    INT32 length = 0;
+    INPUT_VARS(cinfo);
+
+    if (cur_marker == NULL)
+    {
+        /* begin reading a marker */
+        INPUT_2BYTES(cinfo, length, return FALSE);
+        length -= 2;
+        if (length >= 0)  		/* watch out for bogus length word */
+        {
+            /* figure out how much we want to save */
+            unsigned int limit;
+            if (cinfo->unread_marker == (int) M_COM)
+            {
+                limit = marker->length_limit_COM;
+            }
+            else
+            {
+                limit = marker->length_limit_APPn[cinfo->unread_marker - (int) M_APP0];
+            }
+            if ((unsigned int) length < limit)
+            {
+                limit = (unsigned int) length;
+            }
+            /* allocate and initialize the marker item */
+            cur_marker = (jpeg_saved_marker_ptr)
+                         (*cinfo->mem->alloc_large) ((j_common_ptr) cinfo, JPOOL_IMAGE,
+                                 SIZEOF(struct jpeg_marker_struct) + limit);
+            cur_marker->next = NULL;
+            cur_marker->marker = (UINT8) cinfo->unread_marker;
+            cur_marker->original_length = (unsigned int) length;
+            cur_marker->data_length = limit;
+            /* data area is just beyond the jpeg_marker_struct */
+            data = cur_marker->data = (JOCTET FAR *) (cur_marker + 1);
+            marker->cur_marker = cur_marker;
+            marker->bytes_read = 0;
+            bytes_read = 0;
+            data_length = limit;
+        }
+        else
+        {
+            /* deal with bogus length word */
+            bytes_read = data_length = 0;
+            data = NULL;
+        }
+    }
+    else
+    {
+        /* resume reading a marker */
+        bytes_read = marker->bytes_read;
+        data_length = cur_marker->data_length;
+        data = cur_marker->data + bytes_read;
+    }
+
+    while (bytes_read < data_length)
+    {
+        INPUT_SYNC(cinfo);		/* move the restart point to here */
+        marker->bytes_read = bytes_read;
+        /* If there's not at least one byte in buffer, suspend */
+        MAKE_BYTE_AVAIL(cinfo, return FALSE);
+        /* Copy bytes with reasonable rapidity */
+        while (bytes_read < data_length && bytes_in_buffer > 0)
+        {
+            *data++ = *next_input_byte++;
+            bytes_in_buffer--;
+            bytes_read++;
+        }
+    }
+
+    /* Done reading what we want to read */
+    if (cur_marker != NULL)  	/* will be NULL if bogus length word */
+    {
+        /* Add new marker to end of list */
+        if (cinfo->marker_list == NULL)
+        {
+            cinfo->marker_list = cur_marker;
+        }
+        else
+        {
+            jpeg_saved_marker_ptr prev = cinfo->marker_list;
+            while (prev->next != NULL)
+            {
+                prev = prev->next;
+            }
+            prev->next = cur_marker;
+        }
+        /* Reset pointer & calc remaining data length */
+        data = cur_marker->data;
+        length = cur_marker->original_length - data_length;
+    }
+    /* Reset to initial state for next marker */
+    marker->cur_marker = NULL;
+
+    /* Process the marker if interesting; else just make a generic trace msg */
+    switch (cinfo->unread_marker)
+    {
+    case M_APP0:
+        examine_app0(cinfo, data, data_length, length);
+        break;
+    case M_APP14:
+        examine_app14(cinfo, data, data_length, length);
+        break;
+    default:
+        TRACEMS2(cinfo, 1, JTRC_MISC_MARKER, cinfo->unread_marker,
+                 (int) (data_length + length));
+        break;
+    }
+
+    /* skip any remaining data -- could be lots */
+    INPUT_SYNC(cinfo);		/* do before skip_input_data */
+    if (length > 0)
+    {
+        (*cinfo->src->skip_input_data) (cinfo, (long) length);
+    }
+
+    return TRUE;
+}
+
+#endif /* SAVE_MARKERS_SUPPORTED */
+
+
+METHODDEF(boolean)
+skip_variable (j_decompress_ptr cinfo)
+/* Skip over an unknown or uninteresting variable-length marker */
+{
+    INT32 length;
+    INPUT_VARS(cinfo);
+
+    INPUT_2BYTES(cinfo, length, return FALSE);
+    length -= 2;
+
+    TRACEMS2(cinfo, 1, JTRC_MISC_MARKER, cinfo->unread_marker, (int) length);
+
+    INPUT_SYNC(cinfo);		/* do before skip_input_data */
+    if (length > 0)
+    {
+        (*cinfo->src->skip_input_data) (cinfo, (long) length);
+    }
+
+    return TRUE;
+}
+
+
+/*
+ * Find the next JPEG marker, save it in cinfo->unread_marker.
+ * Returns FALSE if had to suspend before reaching a marker;
+ * in that case cinfo->unread_marker is unchanged.
+ *
+ * Note that the result might not be a valid marker code,
+ * but it will never be 0 or FF.
+ */
+
+LOCAL(boolean)
+next_marker (j_decompress_ptr cinfo)
+{
+    int c;
+    INPUT_VARS(cinfo);
+
+    for (;;)
+    {
+        INPUT_BYTE(cinfo, c, return FALSE);
+        /* Skip any non-FF bytes.
+         * This may look a bit inefficient, but it will not occur in a valid file.
+         * We sync after each discarded byte so that a suspending data source
+         * can discard the byte from its buffer.
+         */
+        while (c != 0xFF)
+        {
+            cinfo->marker->discarded_bytes++;
+            INPUT_SYNC(cinfo);
+            INPUT_BYTE(cinfo, c, return FALSE);
+        }
+        /* This loop swallows any duplicate FF bytes.  Extra FFs are legal as
+         * pad bytes, so don't count them in discarded_bytes.  We assume there
+         * will not be so many consecutive FF bytes as to overflow a suspending
+         * data source's input buffer.
+         */
+        do
+        {
+            INPUT_BYTE(cinfo, c, return FALSE);
+        }
+        while (c == 0xFF);
+        if (c != 0)
+        {
+            break;    /* found a valid marker, exit loop */
+        }
+        /* Reach here if we found a stuffed-zero data sequence (FF/00).
+         * Discard it and loop back to try again.
+         */
+        cinfo->marker->discarded_bytes += 2;
+        INPUT_SYNC(cinfo);
+    }
+
+    if (cinfo->marker->discarded_bytes != 0)
+    {
+        WARNMS2(cinfo, JWRN_EXTRANEOUS_DATA, cinfo->marker->discarded_bytes, c);
+        cinfo->marker->discarded_bytes = 0;
+    }
+
+    cinfo->unread_marker = c;
+
+    INPUT_SYNC(cinfo);
+    return TRUE;
+}
+
+
+LOCAL(boolean)
+first_marker (j_decompress_ptr cinfo)
+/* Like next_marker, but used to obtain the initial SOI marker. */
+/* For this marker, we do not allow preceding garbage or fill; otherwise,
+ * we might well scan an entire input file before realizing it ain't JPEG.
+ * If an application wants to process non-JFIF files, it must seek to the
+ * SOI before calling the JPEG library.
+ */
+{
+    int c, c2;
+    INPUT_VARS(cinfo);
+
+    INPUT_BYTE(cinfo, c, return FALSE);
+    INPUT_BYTE(cinfo, c2, return FALSE);
+    if (c != 0xFF || c2 != (int) M_SOI)
+    {
+        ERREXIT2(cinfo, JERR_NO_SOI, c, c2);
+    }
+
+    cinfo->unread_marker = c2;
+
+    INPUT_SYNC(cinfo);
+    return TRUE;
+}
+
+
+/*
+ * Read markers until SOS or EOI.
+ *
+ * Returns same codes as are defined for jpeg_consume_input:
+ * JPEG_SUSPENDED, JPEG_REACHED_SOS, or JPEG_REACHED_EOI.
+ *
+ * Note: This function may return a pseudo SOS marker (with zero
+ * component number) for treat by input controller's consume_input.
+ * consume_input itself should filter out (skip) the pseudo marker
+ * after processing for the caller.
+ */
+
+METHODDEF(int)
+read_markers (j_decompress_ptr cinfo)
+{
+    /* Outer loop repeats once for each marker. */
+    for (;;)
+    {
+        /* Collect the marker proper, unless we already did. */
+        /* NB: first_marker() enforces the requirement that SOI appear first. */
+        if (cinfo->unread_marker == 0)
+        {
+            if (! cinfo->marker->saw_SOI)
+            {
+                if (! first_marker(cinfo))
+                {
+                    return JPEG_SUSPENDED;
+                }
+            }
+            else
+            {
+                if (! next_marker(cinfo))
+                {
+                    return JPEG_SUSPENDED;
+                }
+            }
+        }
+        /* At this point cinfo->unread_marker contains the marker code and the
+         * input point is just past the marker proper, but before any parameters.
+         * A suspension will cause us to return with this state still true.
+         */
+        switch (cinfo->unread_marker)
+        {
+        case M_SOI:
+            if (! get_soi(cinfo))
+            {
+                return JPEG_SUSPENDED;
+            }
+            break;
+
+        case M_SOF0:		/* Baseline */
+            if (! get_sof(cinfo, TRUE, FALSE, FALSE))
+            {
+                return JPEG_SUSPENDED;
+            }
+            break;
+
+        case M_SOF1:		/* Extended sequential, Huffman */
+            if (! get_sof(cinfo, FALSE, FALSE, FALSE))
+            {
+                return JPEG_SUSPENDED;
+            }
+            break;
+
+        case M_SOF2:		/* Progressive, Huffman */
+            if (! get_sof(cinfo, FALSE, TRUE, FALSE))
+            {
+                return JPEG_SUSPENDED;
+            }
+            break;
+
+        case M_SOF9:		/* Extended sequential, arithmetic */
+            if (! get_sof(cinfo, FALSE, FALSE, TRUE))
+            {
+                return JPEG_SUSPENDED;
+            }
+            break;
+
+        case M_SOF10:		/* Progressive, arithmetic */
+            if (! get_sof(cinfo, FALSE, TRUE, TRUE))
+            {
+                return JPEG_SUSPENDED;
+            }
+            break;
+
+            /* Currently unsupported SOFn types */
+        case M_SOF3:		/* Lossless, Huffman */
+        case M_SOF5:		/* Differential sequential, Huffman */
+        case M_SOF6:		/* Differential progressive, Huffman */
+        case M_SOF7:		/* Differential lossless, Huffman */
+        case M_JPG:			/* Reserved for JPEG extensions */
+        case M_SOF11:		/* Lossless, arithmetic */
+        case M_SOF13:		/* Differential sequential, arithmetic */
+        case M_SOF14:		/* Differential progressive, arithmetic */
+        case M_SOF15:		/* Differential lossless, arithmetic */
+            ERREXIT1(cinfo, JERR_SOF_UNSUPPORTED, cinfo->unread_marker);
+            break;
+
+        case M_SOS:
+            if (! get_sos(cinfo))
+            {
+                return JPEG_SUSPENDED;
+            }
+            cinfo->unread_marker = 0;	/* processed the marker */
+            return JPEG_REACHED_SOS;
+
+        case M_EOI:
+            TRACEMS(cinfo, 1, JTRC_EOI);
+            cinfo->unread_marker = 0;	/* processed the marker */
+            return JPEG_REACHED_EOI;
+
+        case M_DAC:
+            if (! get_dac(cinfo))
+            {
+                return JPEG_SUSPENDED;
+            }
+            break;
+
+        case M_DHT:
+            if (! get_dht(cinfo))
+            {
+                return JPEG_SUSPENDED;
+            }
+            break;
+
+        case M_DQT:
+            if (! get_dqt(cinfo))
+            {
+                return JPEG_SUSPENDED;
+            }
+            break;
+
+        case M_DRI:
+            if (! get_dri(cinfo))
+            {
+                return JPEG_SUSPENDED;
+            }
+            break;
+
+        case M_APP0:
+        case M_APP1:
+        case M_APP2:
+        case M_APP3:
+        case M_APP4:
+        case M_APP5:
+        case M_APP6:
+        case M_APP7:
+        case M_APP8:
+        case M_APP9:
+        case M_APP10:
+        case M_APP11:
+        case M_APP12:
+        case M_APP13:
+        case M_APP14:
+        case M_APP15:
+            if (! (*((my_marker_ptr) cinfo->marker)->process_APPn[
+                        cinfo->unread_marker - (int) M_APP0]) (cinfo))
+            {
+                return JPEG_SUSPENDED;
+            }
+            break;
+
+        case M_COM:
+            if (! (*((my_marker_ptr) cinfo->marker)->process_COM) (cinfo))
+            {
+                return JPEG_SUSPENDED;
+            }
+            break;
+
+        case M_RST0:		/* these are all parameterless */
+        case M_RST1:
+        case M_RST2:
+        case M_RST3:
+        case M_RST4:
+        case M_RST5:
+        case M_RST6:
+        case M_RST7:
+        case M_TEM:
+            TRACEMS1(cinfo, 1, JTRC_PARMLESS_MARKER, cinfo->unread_marker);
+            break;
+
+        case M_DNL:			/* Ignore DNL ... perhaps the wrong thing */
+            if (! skip_variable(cinfo))
+            {
+                return JPEG_SUSPENDED;
+            }
+            break;
+
+        default:			/* must be DHP, EXP, JPGn, or RESn */
+            /* For now, we treat the reserved markers as fatal errors since they are
+             * likely to be used to signal incompatible JPEG Part 3 extensions.
+             * Once the JPEG 3 version-number marker is well defined, this code
+             * ought to change!
+             */
+            ERREXIT1(cinfo, JERR_UNKNOWN_MARKER, cinfo->unread_marker);
+            break;
+        }
+        /* Successfully processed marker, so reset state variable */
+        cinfo->unread_marker = 0;
+    } /* end loop */
+}
+
+
+/*
+ * Read a restart marker, which is expected to appear next in the datastream;
+ * if the marker is not there, take appropriate recovery action.
+ * Returns FALSE if suspension is required.
+ *
+ * This is called by the entropy decoder after it has read an appropriate
+ * number of MCUs.  cinfo->unread_marker may be nonzero if the entropy decoder
+ * has already read a marker from the data source.  Under normal conditions
+ * cinfo->unread_marker will be reset to 0 before returning; if not reset,
+ * it holds a marker which the decoder will be unable to read past.
+ */
+
+METHODDEF(boolean)
+read_restart_marker (j_decompress_ptr cinfo)
+{
+    /* Obtain a marker unless we already did. */
+    /* Note that next_marker will complain if it skips any data. */
+    if (cinfo->unread_marker == 0)
+    {
+        if (! next_marker(cinfo))
+        {
+            return FALSE;
+        }
+    }
+
+    if (cinfo->unread_marker ==
+            ((int) M_RST0 + cinfo->marker->next_restart_num))
+    {
+        /* Normal case --- swallow the marker and let entropy decoder continue */
+        TRACEMS1(cinfo, 3, JTRC_RST, cinfo->marker->next_restart_num);
+        cinfo->unread_marker = 0;
+    }
+    else
+    {
+        /* Uh-oh, the restart markers have been messed up. */
+        /* Let the data source manager determine how to resync. */
+        if (! (*cinfo->src->resync_to_restart) (cinfo,
+                                                cinfo->marker->next_restart_num))
+        {
+            return FALSE;
+        }
+    }
+
+    /* Update next-restart state */
+    cinfo->marker->next_restart_num = (cinfo->marker->next_restart_num + 1) & 7;
+
+    return TRUE;
+}
+
+
+/*
+ * This is the default resync_to_restart method for data source managers
+ * to use if they don't have any better approach.  Some data source managers
+ * may be able to back up, or may have additional knowledge about the data
+ * which permits a more intelligent recovery strategy; such managers would
+ * presumably supply their own resync method.
+ *
+ * read_restart_marker calls resync_to_restart if it finds a marker other than
+ * the restart marker it was expecting.  (This code is *not* used unless
+ * a nonzero restart interval has been declared.)  cinfo->unread_marker is
+ * the marker code actually found (might be anything, except 0 or FF).
+ * The desired restart marker number (0..7) is passed as a parameter.
+ * This routine is supposed to apply whatever error recovery strategy seems
+ * appropriate in order to position the input stream to the next data segment.
+ * Note that cinfo->unread_marker is treated as a marker appearing before
+ * the current data-source input point; usually it should be reset to zero
+ * before returning.
+ * Returns FALSE if suspension is required.
+ *
+ * This implementation is substantially constrained by wanting to treat the
+ * input as a data stream; this means we can't back up.  Therefore, we have
+ * only the following actions to work with:
+ *   1. Simply discard the marker and let the entropy decoder resume at next
+ *      byte of file.
+ *   2. Read forward until we find another marker, discarding intervening
+ *      data.  (In theory we could look ahead within the current bufferload,
+ *      without having to discard data if we don't find the desired marker.
+ *      This idea is not implemented here, in part because it makes behavior
+ *      dependent on buffer size and chance buffer-boundary positions.)
+ *   3. Leave the marker unread (by failing to zero cinfo->unread_marker).
+ *      This will cause the entropy decoder to process an empty data segment,
+ *      inserting dummy zeroes, and then we will reprocess the marker.
+ *
+ * #2 is appropriate if we think the desired marker lies ahead, while #3 is
+ * appropriate if the found marker is a future restart marker (indicating
+ * that we have missed the desired restart marker, probably because it got
+ * corrupted).
+ * We apply #2 or #3 if the found marker is a restart marker no more than
+ * two counts behind or ahead of the expected one.  We also apply #2 if the
+ * found marker is not a legal JPEG marker code (it's certainly bogus data).
+ * If the found marker is a restart marker more than 2 counts away, we do #1
+ * (too much risk that the marker is erroneous; with luck we will be able to
+ * resync at some future point).
+ * For any valid non-restart JPEG marker, we apply #3.  This keeps us from
+ * overrunning the end of a scan.  An implementation limited to single-scan
+ * files might find it better to apply #2 for markers other than EOI, since
+ * any other marker would have to be bogus data in that case.
+ */
+
+GLOBAL(boolean)
+jpeg_resync_to_restart (j_decompress_ptr cinfo, int desired)
+{
+    int marker = cinfo->unread_marker;
+    int action = 1;
+
+    /* Always put up a warning. */
+    WARNMS2(cinfo, JWRN_MUST_RESYNC, marker, desired);
+
+    /* Outer loop handles repeated decision after scanning forward. */
+    for (;;)
+    {
+        if (marker < (int) M_SOF0)
+        {
+            action = 2;    /* invalid marker */
+        }
+        else if (marker < (int) M_RST0 || marker > (int) M_RST7)
+        {
+            action = 3;    /* valid non-restart marker */
+        }
+        else
+        {
+            if (marker == ((int) M_RST0 + ((desired+1) & 7)) ||
+                    marker == ((int) M_RST0 + ((desired+2) & 7)))
+            {
+                action = 3;    /* one of the next two expected restarts */
+            }
+            else if (marker == ((int) M_RST0 + ((desired-1) & 7)) ||
+                     marker == ((int) M_RST0 + ((desired-2) & 7)))
+            {
+                action = 2;    /* a prior restart, so advance */
+            }
+            else
+            {
+                action = 1;    /* desired restart or too far away */
+            }
+        }
+        TRACEMS2(cinfo, 4, JTRC_RECOVERY_ACTION, marker, action);
+        switch (action)
+        {
+        case 1:
+            /* Discard marker and let entropy decoder resume processing. */
+            cinfo->unread_marker = 0;
+            return TRUE;
+        case 2:
+            /* Scan to the next marker, and repeat the decision loop. */
+            if (! next_marker(cinfo))
+            {
+                return FALSE;
+            }
+            marker = cinfo->unread_marker;
+            break;
+        case 3:
+            /* Return without advancing past this marker. */
+            /* Entropy decoder will be forced to process an empty segment. */
+            return TRUE;
+        }
+    } /* end loop */
+}
+
+
+/*
+ * Reset marker processing state to begin a fresh datastream.
+ */
+
+METHODDEF(void)
+reset_marker_reader (j_decompress_ptr cinfo)
+{
+    my_marker_ptr marker = (my_marker_ptr) cinfo->marker;
+
+    cinfo->comp_info = NULL;		/* until allocated by get_sof */
+    cinfo->input_scan_number = 0;		/* no SOS seen yet */
+    cinfo->unread_marker = 0;		/* no pending marker */
+    marker->pub.saw_SOI = FALSE;		/* set internal state too */
+    marker->pub.saw_SOF = FALSE;
+    marker->pub.discarded_bytes = 0;
+    marker->cur_marker = NULL;
+}
+
+
+/*
+ * Initialize the marker reader module.
+ * This is called only once, when the decompression object is created.
+ */
+
+GLOBAL(void)
+jinit_marker_reader (j_decompress_ptr cinfo)
+{
+    my_marker_ptr marker;
+    int i;
+
+    /* Create subobject in permanent pool */
+    marker = (my_marker_ptr)
+             (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
+                                         SIZEOF(my_marker_reader));
+    cinfo->marker = (struct jpeg_marker_reader *) marker;
+    /* Initialize public method pointers */
+    marker->pub.reset_marker_reader = reset_marker_reader;
+    marker->pub.read_markers = read_markers;
+    marker->pub.read_restart_marker = read_restart_marker;
+    /* Initialize COM/APPn processing.
+     * By default, we examine and then discard APP0 and APP14,
+     * but simply discard COM and all other APPn.
+     */
+    marker->process_COM = skip_variable;
+    marker->length_limit_COM = 0;
+    for (i = 0; i < 16; i++)
+    {
+        marker->process_APPn[i] = skip_variable;
+        marker->length_limit_APPn[i] = 0;
+    }
+    marker->process_APPn[0] = get_interesting_appn;
+    marker->process_APPn[14] = get_interesting_appn;
+    /* Reset marker processing state */
+    reset_marker_reader(cinfo);
+}
+
+
+/*
+ * Control saving of COM and APPn markers into marker_list.
+ */
+
+#ifdef SAVE_MARKERS_SUPPORTED
+
+GLOBAL(void)
+jpeg_save_markers (j_decompress_ptr cinfo, int marker_code,
+                   unsigned int length_limit)
+{
+    my_marker_ptr marker = (my_marker_ptr) cinfo->marker;
+    long maxlength;
+    jpeg_marker_parser_method processor;
+
+    /* Length limit mustn't be larger than what we can allocate
+     * (should only be a concern in a 16-bit environment).
+     */
+    maxlength = cinfo->mem->max_alloc_chunk - SIZEOF(struct jpeg_marker_struct);
+    if (((long) length_limit) > maxlength)
+    {
+        length_limit = (unsigned int) maxlength;
+    }
+
+    /* Choose processor routine to use.
+     * APP0/APP14 have special requirements.
+     */
+    if (length_limit)
+    {
+        processor = save_marker;
+        /* If saving APP0/APP14, save at least enough for our internal use. */
+        if (marker_code == (int) M_APP0 && length_limit < APP0_DATA_LEN)
+        {
+            length_limit = APP0_DATA_LEN;
+        }
+        else if (marker_code == (int) M_APP14 && length_limit < APP14_DATA_LEN)
+        {
+            length_limit = APP14_DATA_LEN;
+        }
+    }
+    else
+    {
+        processor = skip_variable;
+        /* If discarding APP0/APP14, use our regular on-the-fly processor. */
+        if (marker_code == (int) M_APP0 || marker_code == (int) M_APP14)
+        {
+            processor = get_interesting_appn;
+        }
+    }
+
+    if (marker_code == (int) M_COM)
+    {
+        marker->process_COM = processor;
+        marker->length_limit_COM = length_limit;
+    }
+    else if (marker_code >= (int) M_APP0 && marker_code <= (int) M_APP15)
+    {
+        marker->process_APPn[marker_code - (int) M_APP0] = processor;
+        marker->length_limit_APPn[marker_code - (int) M_APP0] = length_limit;
+    }
+    else
+    {
+        ERREXIT1(cinfo, JERR_UNKNOWN_MARKER, marker_code);
+    }
+}
+
+#endif /* SAVE_MARKERS_SUPPORTED */
+
+
+/*
+ * Install a special processing method for COM or APPn markers.
+ */
+
+GLOBAL(void)
+jpeg_set_marker_processor (j_decompress_ptr cinfo, int marker_code,
+                           jpeg_marker_parser_method routine)
+{
+    my_marker_ptr marker = (my_marker_ptr) cinfo->marker;
+
+    if (marker_code == (int) M_COM)
+    {
+        marker->process_COM = routine;
+    }
+    else if (marker_code >= (int) M_APP0 && marker_code <= (int) M_APP15)
+    {
+        marker->process_APPn[marker_code - (int) M_APP0] = routine;
+    }
+    else
+    {
+        ERREXIT1(cinfo, JERR_UNKNOWN_MARKER, marker_code);
+    }
+}
diff -NEaurb neo/renderer/jpeg-8c/jdmaster.c neo/renderer/jpeg-8c/jdmaster.c
--- neo/renderer/jpeg-8c/jdmaster.c	1970-01-01 00:00:00 +0000
+++ neo/renderer/jpeg-8c/jdmaster.c	2012-11-17 01:20:40 +0000
@@ -0,0 +1,613 @@
+/*
+ * jdmaster.c
+ *
+ * Copyright (C) 1991-1997, Thomas G. Lane.
+ * Modified 2002-2009 by Guido Vollbeding.
+ * This file is part of the Independent JPEG Group's software.
+ * For conditions of distribution and use, see the accompanying README file.
+ *
+ * This file contains master control logic for the JPEG decompressor.
+ * These routines are concerned with selecting the modules to be executed
+ * and with determining the number of passes and the work to be done in each
+ * pass.
+ */
+
+#define JPEG_INTERNALS
+#include "jinclude.h"
+#include "jpeglib.h"
+
+
+/* Private state */
+
+typedef struct
+{
+    struct jpeg_decomp_master pub; /* public fields */
+
+    int pass_number;		/* # of passes completed */
+
+    boolean using_merged_upsample; /* TRUE if using merged upsample/cconvert */
+
+    /* Saved references to initialized quantizer modules,
+     * in case we need to switch modes.
+     */
+    struct jpeg_color_quantizer * quantizer_1pass;
+    struct jpeg_color_quantizer * quantizer_2pass;
+} my_decomp_master;
+
+typedef my_decomp_master * my_master_ptr;
+
+
+/*
+ * Determine whether merged upsample/color conversion should be used.
+ * CRUCIAL: this must match the actual capabilities of jdmerge.c!
+ */
+
+LOCAL(boolean)
+use_merged_upsample (j_decompress_ptr cinfo)
+{
+#ifdef UPSAMPLE_MERGING_SUPPORTED
+    /* Merging is the equivalent of plain box-filter upsampling */
+    if (cinfo->do_fancy_upsampling || cinfo->CCIR601_sampling)
+    {
+        return FALSE;
+    }
+    /* jdmerge.c only supports YCC=>RGB color conversion */
+    if (cinfo->jpeg_color_space != JCS_YCbCr || cinfo->num_components != 3 ||
+            cinfo->out_color_space != JCS_RGB ||
+            cinfo->out_color_components != RGB_PIXELSIZE)
+    {
+        return FALSE;
+    }
+    /* and it only handles 2h1v or 2h2v sampling ratios */
+    if (cinfo->comp_info[0].h_samp_factor != 2 ||
+            cinfo->comp_info[1].h_samp_factor != 1 ||
+            cinfo->comp_info[2].h_samp_factor != 1 ||
+            cinfo->comp_info[0].v_samp_factor >  2 ||
+            cinfo->comp_info[1].v_samp_factor != 1 ||
+            cinfo->comp_info[2].v_samp_factor != 1)
+    {
+        return FALSE;
+    }
+    /* furthermore, it doesn't work if we've scaled the IDCTs differently */
+    if (cinfo->comp_info[0].DCT_h_scaled_size != cinfo->min_DCT_h_scaled_size ||
+            cinfo->comp_info[1].DCT_h_scaled_size != cinfo->min_DCT_h_scaled_size ||
+            cinfo->comp_info[2].DCT_h_scaled_size != cinfo->min_DCT_h_scaled_size ||
+            cinfo->comp_info[0].DCT_v_scaled_size != cinfo->min_DCT_v_scaled_size ||
+            cinfo->comp_info[1].DCT_v_scaled_size != cinfo->min_DCT_v_scaled_size ||
+            cinfo->comp_info[2].DCT_v_scaled_size != cinfo->min_DCT_v_scaled_size)
+    {
+        return FALSE;
+    }
+    /* ??? also need to test for upsample-time rescaling, when & if supported */
+    return TRUE;			/* by golly, it'll work... */
+#else
+    return FALSE;
+#endif
+}
+
+
+/*
+ * Compute output image dimensions and related values.
+ * NOTE: this is exported for possible use by application.
+ * Hence it mustn't do anything that can't be done twice.
+ * Also note that it may be called before the master module is initialized!
+ */
+
+GLOBAL(void)
+jpeg_calc_output_dimensions (j_decompress_ptr cinfo)
+/* Do computations that are needed before master selection phase.
+ * This function is used for full decompression.
+ */
+{
+#ifdef IDCT_SCALING_SUPPORTED
+    int ci;
+    jpeg_component_info *compptr;
+#endif
+
+    /* Prevent application from calling me at wrong times */
+    if (cinfo->global_state != DSTATE_READY)
+    {
+        ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
+    }
+
+    /* Compute core output image dimensions and DCT scaling choices. */
+    jpeg_core_output_dimensions(cinfo);
+
+#ifdef IDCT_SCALING_SUPPORTED
+
+    /* In selecting the actual DCT scaling for each component, we try to
+     * scale up the chroma components via IDCT scaling rather than upsampling.
+     * This saves time if the upsampler gets to use 1:1 scaling.
+     * Note this code adapts subsampling ratios which are powers of 2.
+     */
+    for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
+            ci++, compptr++)
+    {
+        int ssize = 1;
+        while (cinfo->min_DCT_h_scaled_size * ssize <=
+                (cinfo->do_fancy_upsampling ? DCTSIZE : DCTSIZE / 2) &&
+                (cinfo->max_h_samp_factor % (compptr->h_samp_factor * ssize * 2)) == 0)
+        {
+            ssize = ssize * 2;
+        }
+        compptr->DCT_h_scaled_size = cinfo->min_DCT_h_scaled_size * ssize;
+        ssize = 1;
+        while (cinfo->min_DCT_v_scaled_size * ssize <=
+                (cinfo->do_fancy_upsampling ? DCTSIZE : DCTSIZE / 2) &&
+                (cinfo->max_v_samp_factor % (compptr->v_samp_factor * ssize * 2)) == 0)
+        {
+            ssize = ssize * 2;
+        }
+        compptr->DCT_v_scaled_size = cinfo->min_DCT_v_scaled_size * ssize;
+
+        /* We don't support IDCT ratios larger than 2. */
+        if (compptr->DCT_h_scaled_size > compptr->DCT_v_scaled_size * 2)
+        {
+            compptr->DCT_h_scaled_size = compptr->DCT_v_scaled_size * 2;
+        }
+        else if (compptr->DCT_v_scaled_size > compptr->DCT_h_scaled_size * 2)
+        {
+            compptr->DCT_v_scaled_size = compptr->DCT_h_scaled_size * 2;
+        }
+    }
+
+    /* Recompute downsampled dimensions of components;
+     * application needs to know these if using raw downsampled data.
+     */
+    for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
+            ci++, compptr++)
+    {
+        /* Size in samples, after IDCT scaling */
+        compptr->downsampled_width = (JDIMENSION)
+                                     jdiv_round_up((long) cinfo->image_width *
+                                             (long) (compptr->h_samp_factor * compptr->DCT_h_scaled_size),
+                                             (long) (cinfo->max_h_samp_factor * cinfo->block_size));
+        compptr->downsampled_height = (JDIMENSION)
+                                      jdiv_round_up((long) cinfo->image_height *
+                                              (long) (compptr->v_samp_factor * compptr->DCT_v_scaled_size),
+                                              (long) (cinfo->max_v_samp_factor * cinfo->block_size));
+    }
+
+#endif /* IDCT_SCALING_SUPPORTED */
+
+    /* Report number of components in selected colorspace. */
+    /* Probably this should be in the color conversion module... */
+    switch (cinfo->out_color_space)
+    {
+    case JCS_GRAYSCALE:
+        cinfo->out_color_components = 1;
+        break;
+    case JCS_RGB:
+#if RGB_PIXELSIZE != 3
+        cinfo->out_color_components = RGB_PIXELSIZE;
+        break;
+#endif /* else share code with YCbCr */
+    case JCS_YCbCr:
+        cinfo->out_color_components = 3;
+        break;
+    case JCS_CMYK:
+    case JCS_YCCK:
+        cinfo->out_color_components = 4;
+        break;
+    default:			/* else must be same colorspace as in file */
+        cinfo->out_color_components = cinfo->num_components;
+        break;
+    }
+    cinfo->output_components = (cinfo->quantize_colors ? 1 :
+                                cinfo->out_color_components);
+
+    /* See if upsampler will want to emit more than one row at a time */
+    if (use_merged_upsample(cinfo))
+    {
+        cinfo->rec_outbuf_height = cinfo->max_v_samp_factor;
+    }
+    else
+    {
+        cinfo->rec_outbuf_height = 1;
+    }
+}
+
+
+/*
+ * Several decompression processes need to range-limit values to the range
+ * 0..MAXJSAMPLE; the input value may fall somewhat outside this range
+ * due to noise introduced by quantization, roundoff error, etc.  These
+ * processes are inner loops and need to be as fast as possible.  On most
+ * machines, particularly CPUs with pipelines or instruction prefetch,
+ * a (subscript-check-less) C table lookup
+ *		x = sample_range_limit[x];
+ * is faster than explicit tests
+ *		if (x < 0)  x = 0;
+ *		else if (x > MAXJSAMPLE)  x = MAXJSAMPLE;
+ * These processes all use a common table prepared by the routine below.
+ *
+ * For most steps we can mathematically guarantee that the initial value
+ * of x is within MAXJSAMPLE+1 of the legal range, so a table running from
+ * -(MAXJSAMPLE+1) to 2*MAXJSAMPLE+1 is sufficient.  But for the initial
+ * limiting step (just after the IDCT), a wildly out-of-range value is
+ * possible if the input data is corrupt.  To avoid any chance of indexing
+ * off the end of memory and getting a bad-pointer trap, we perform the
+ * post-IDCT limiting thus:
+ *		x = range_limit[x & MASK];
+ * where MASK is 2 bits wider than legal sample data, ie 10 bits for 8-bit
+ * samples.  Under normal circumstances this is more than enough range and
+ * a correct output will be generated; with bogus input data the mask will
+ * cause wraparound, and we will safely generate a bogus-but-in-range output.
+ * For the post-IDCT step, we want to convert the data from signed to unsigned
+ * representation by adding CENTERJSAMPLE at the same time that we limit it.
+ * So the post-IDCT limiting table ends up looking like this:
+ *   CENTERJSAMPLE,CENTERJSAMPLE+1,...,MAXJSAMPLE,
+ *   MAXJSAMPLE (repeat 2*(MAXJSAMPLE+1)-CENTERJSAMPLE times),
+ *   0          (repeat 2*(MAXJSAMPLE+1)-CENTERJSAMPLE times),
+ *   0,1,...,CENTERJSAMPLE-1
+ * Negative inputs select values from the upper half of the table after
+ * masking.
+ *
+ * We can save some space by overlapping the start of the post-IDCT table
+ * with the simpler range limiting table.  The post-IDCT table begins at
+ * sample_range_limit + CENTERJSAMPLE.
+ *
+ * Note that the table is allocated in near data space on PCs; it's small
+ * enough and used often enough to justify this.
+ */
+
+LOCAL(void)
+prepare_range_limit_table (j_decompress_ptr cinfo)
+/* Allocate and fill in the sample_range_limit table */
+{
+    JSAMPLE * table;
+    int i;
+
+    table = (JSAMPLE *)
+            (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
+                                        (5 * (MAXJSAMPLE+1) + CENTERJSAMPLE) * SIZEOF(JSAMPLE));
+    table += (MAXJSAMPLE+1);	/* allow negative subscripts of simple table */
+    cinfo->sample_range_limit = table;
+    /* First segment of "simple" table: limit[x] = 0 for x < 0 */
+    MEMZERO(table - (MAXJSAMPLE+1), (MAXJSAMPLE+1) * SIZEOF(JSAMPLE));
+    /* Main part of "simple" table: limit[x] = x */
+    for (i = 0; i <= MAXJSAMPLE; i++)
+    {
+        table[i] = (JSAMPLE) i;
+    }
+    table += CENTERJSAMPLE;	/* Point to where post-IDCT table starts */
+    /* End of simple table, rest of first half of post-IDCT table */
+    for (i = CENTERJSAMPLE; i < 2*(MAXJSAMPLE+1); i++)
+    {
+        table[i] = MAXJSAMPLE;
+    }
+    /* Second half of post-IDCT table */
+    MEMZERO(table + (2 * (MAXJSAMPLE+1)),
+            (2 * (MAXJSAMPLE+1) - CENTERJSAMPLE) * SIZEOF(JSAMPLE));
+    MEMCOPY(table + (4 * (MAXJSAMPLE+1) - CENTERJSAMPLE),
+            cinfo->sample_range_limit, CENTERJSAMPLE * SIZEOF(JSAMPLE));
+}
+
+
+/*
+ * Master selection of decompression modules.
+ * This is done once at jpeg_start_decompress time.  We determine
+ * which modules will be used and give them appropriate initialization calls.
+ * We also initialize the decompressor input side to begin consuming data.
+ *
+ * Since jpeg_read_header has finished, we know what is in the SOF
+ * and (first) SOS markers.  We also have all the application parameter
+ * settings.
+ */
+
+LOCAL(void)
+master_selection (j_decompress_ptr cinfo)
+{
+    my_master_ptr master = (my_master_ptr) cinfo->master;
+    boolean use_c_buffer;
+    long samplesperrow;
+    JDIMENSION jd_samplesperrow;
+
+    /* Initialize dimensions and other stuff */
+    jpeg_calc_output_dimensions(cinfo);
+    prepare_range_limit_table(cinfo);
+
+    /* Width of an output scanline must be representable as JDIMENSION. */
+    samplesperrow = (long) cinfo->output_width * (long) cinfo->out_color_components;
+    jd_samplesperrow = (JDIMENSION) samplesperrow;
+    if ((long) jd_samplesperrow != samplesperrow)
+    {
+        ERREXIT(cinfo, JERR_WIDTH_OVERFLOW);
+    }
+
+    /* Initialize my private state */
+    master->pass_number = 0;
+    master->using_merged_upsample = use_merged_upsample(cinfo);
+
+    /* Color quantizer selection */
+    master->quantizer_1pass = NULL;
+    master->quantizer_2pass = NULL;
+    /* No mode changes if not using buffered-image mode. */
+    if (! cinfo->quantize_colors || ! cinfo->buffered_image)
+    {
+        cinfo->enable_1pass_quant = FALSE;
+        cinfo->enable_external_quant = FALSE;
+        cinfo->enable_2pass_quant = FALSE;
+    }
+    if (cinfo->quantize_colors)
+    {
+        if (cinfo->raw_data_out)
+        {
+            ERREXIT(cinfo, JERR_NOTIMPL);
+        }
+        /* 2-pass quantizer only works in 3-component color space. */
+        if (cinfo->out_color_components != 3)
+        {
+            cinfo->enable_1pass_quant = TRUE;
+            cinfo->enable_external_quant = FALSE;
+            cinfo->enable_2pass_quant = FALSE;
+            cinfo->colormap = NULL;
+        }
+        else if (cinfo->colormap != NULL)
+        {
+            cinfo->enable_external_quant = TRUE;
+        }
+        else if (cinfo->two_pass_quantize)
+        {
+            cinfo->enable_2pass_quant = TRUE;
+        }
+        else
+        {
+            cinfo->enable_1pass_quant = TRUE;
+        }
+
+        if (cinfo->enable_1pass_quant)
+        {
+#ifdef QUANT_1PASS_SUPPORTED
+            jinit_1pass_quantizer(cinfo);
+            master->quantizer_1pass = cinfo->cquantize;
+#else
+            ERREXIT(cinfo, JERR_NOT_COMPILED);
+#endif
+        }
+
+        /* We use the 2-pass code to map to external colormaps. */
+        if (cinfo->enable_2pass_quant || cinfo->enable_external_quant)
+        {
+#ifdef QUANT_2PASS_SUPPORTED
+            jinit_2pass_quantizer(cinfo);
+            master->quantizer_2pass = cinfo->cquantize;
+#else
+            ERREXIT(cinfo, JERR_NOT_COMPILED);
+#endif
+        }
+        /* If both quantizers are initialized, the 2-pass one is left active;
+         * this is necessary for starting with quantization to an external map.
+         */
+    }
+
+    /* Post-processing: in particular, color conversion first */
+    if (! cinfo->raw_data_out)
+    {
+        if (master->using_merged_upsample)
+        {
+#ifdef UPSAMPLE_MERGING_SUPPORTED
+            jinit_merged_upsampler(cinfo); /* does color conversion too */
+#else
+            ERREXIT(cinfo, JERR_NOT_COMPILED);
+#endif
+        }
+        else
+        {
+            jinit_color_deconverter(cinfo);
+            jinit_upsampler(cinfo);
+        }
+        jinit_d_post_controller(cinfo, cinfo->enable_2pass_quant);
+    }
+    /* Inverse DCT */
+    jinit_inverse_dct(cinfo);
+    /* Entropy decoding: either Huffman or arithmetic coding. */
+    if (cinfo->arith_code)
+    {
+        jinit_arith_decoder(cinfo);
+    }
+    else
+    {
+        jinit_huff_decoder(cinfo);
+    }
+
+    /* Initialize principal buffer controllers. */
+    use_c_buffer = cinfo->inputctl->has_multiple_scans || cinfo->buffered_image;
+    jinit_d_coef_controller(cinfo, use_c_buffer);
+
+    if (! cinfo->raw_data_out)
+    {
+        jinit_d_main_controller(cinfo, FALSE /* never need full buffer here */);
+    }
+
+    /* We can now tell the memory manager to allocate virtual arrays. */
+    (*cinfo->mem->realize_virt_arrays) ((j_common_ptr) cinfo);
+
+    /* Initialize input side of decompressor to consume first scan. */
+    (*cinfo->inputctl->start_input_pass) (cinfo);
+
+#ifdef D_MULTISCAN_FILES_SUPPORTED
+    /* If jpeg_start_decompress will read the whole file, initialize
+     * progress monitoring appropriately.  The input step is counted
+     * as one pass.
+     */
+    if (cinfo->progress != NULL && ! cinfo->buffered_image &&
+            cinfo->inputctl->has_multiple_scans)
+    {
+        int nscans;
+        /* Estimate number of scans to set pass_limit. */
+        if (cinfo->progressive_mode)
+        {
+            /* Arbitrarily estimate 2 interleaved DC scans + 3 AC scans/component. */
+            nscans = 2 + 3 * cinfo->num_components;
+        }
+        else
+        {
+            /* For a nonprogressive multiscan file, estimate 1 scan per component. */
+            nscans = cinfo->num_components;
+        }
+        cinfo->progress->pass_counter = 0L;
+        cinfo->progress->pass_limit = (long) cinfo->total_iMCU_rows * nscans;
+        cinfo->progress->completed_passes = 0;
+        cinfo->progress->total_passes = (cinfo->enable_2pass_quant ? 3 : 2);
+        /* Count the input pass as done */
+        master->pass_number++;
+    }
+#endif /* D_MULTISCAN_FILES_SUPPORTED */
+}
+
+
+/*
+ * Per-pass setup.
+ * This is called at the beginning of each output pass.  We determine which
+ * modules will be active during this pass and give them appropriate
+ * start_pass calls.  We also set is_dummy_pass to indicate whether this
+ * is a "real" output pass or a dummy pass for color quantization.
+ * (In the latter case, jdapistd.c will crank the pass to completion.)
+ */
+
+METHODDEF(void)
+prepare_for_output_pass (j_decompress_ptr cinfo)
+{
+    my_master_ptr master = (my_master_ptr) cinfo->master;
+
+    if (master->pub.is_dummy_pass)
+    {
+#ifdef QUANT_2PASS_SUPPORTED
+        /* Final pass of 2-pass quantization */
+        master->pub.is_dummy_pass = FALSE;
+        (*cinfo->cquantize->start_pass) (cinfo, FALSE);
+        (*cinfo->post->start_pass) (cinfo, JBUF_CRANK_DEST);
+        (*cinfo->main->start_pass) (cinfo, JBUF_CRANK_DEST);
+#else
+        ERREXIT(cinfo, JERR_NOT_COMPILED);
+#endif /* QUANT_2PASS_SUPPORTED */
+    }
+    else
+    {
+        if (cinfo->quantize_colors && cinfo->colormap == NULL)
+        {
+            /* Select new quantization method */
+            if (cinfo->two_pass_quantize && cinfo->enable_2pass_quant)
+            {
+                cinfo->cquantize = master->quantizer_2pass;
+                master->pub.is_dummy_pass = TRUE;
+            }
+            else if (cinfo->enable_1pass_quant)
+            {
+                cinfo->cquantize = master->quantizer_1pass;
+            }
+            else
+            {
+                ERREXIT(cinfo, JERR_MODE_CHANGE);
+            }
+        }
+        (*cinfo->idct->start_pass) (cinfo);
+        (*cinfo->coef->start_output_pass) (cinfo);
+        if (! cinfo->raw_data_out)
+        {
+            if (! master->using_merged_upsample)
+            {
+                (*cinfo->cconvert->start_pass) (cinfo);
+            }
+            (*cinfo->upsample->start_pass) (cinfo);
+            if (cinfo->quantize_colors)
+            {
+                (*cinfo->cquantize->start_pass) (cinfo, master->pub.is_dummy_pass);
+            }
+            (*cinfo->post->start_pass) (cinfo,
+                                        (master->pub.is_dummy_pass ? JBUF_SAVE_AND_PASS : JBUF_PASS_THRU));
+            (*cinfo->main->start_pass) (cinfo, JBUF_PASS_THRU);
+        }
+    }
+
+    /* Set up progress monitor's pass info if present */
+    if (cinfo->progress != NULL)
+    {
+        cinfo->progress->completed_passes = master->pass_number;
+        cinfo->progress->total_passes = master->pass_number +
+                                        (master->pub.is_dummy_pass ? 2 : 1);
+        /* In buffered-image mode, we assume one more output pass if EOI not
+         * yet reached, but no more passes if EOI has been reached.
+         */
+        if (cinfo->buffered_image && ! cinfo->inputctl->eoi_reached)
+        {
+            cinfo->progress->total_passes += (cinfo->enable_2pass_quant ? 2 : 1);
+        }
+    }
+}
+
+
+/*
+ * Finish up at end of an output pass.
+ */
+
+METHODDEF(void)
+finish_output_pass (j_decompress_ptr cinfo)
+{
+    my_master_ptr master = (my_master_ptr) cinfo->master;
+
+    if (cinfo->quantize_colors)
+    {
+        (*cinfo->cquantize->finish_pass) (cinfo);
+    }
+    master->pass_number++;
+}
+
+
+#ifdef D_MULTISCAN_FILES_SUPPORTED
+
+/*
+ * Switch to a new external colormap between output passes.
+ */
+
+GLOBAL(void)
+jpeg_new_colormap (j_decompress_ptr cinfo)
+{
+    my_master_ptr master = (my_master_ptr) cinfo->master;
+
+    /* Prevent application from calling me at wrong times */
+    if (cinfo->global_state != DSTATE_BUFIMAGE)
+    {
+        ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
+    }
+
+    if (cinfo->quantize_colors && cinfo->enable_external_quant &&
+            cinfo->colormap != NULL)
+    {
+        /* Select 2-pass quantizer for external colormap use */
+        cinfo->cquantize = master->quantizer_2pass;
+        /* Notify quantizer of colormap change */
+        (*cinfo->cquantize->new_color_map) (cinfo);
+        master->pub.is_dummy_pass = FALSE; /* just in case */
+    }
+    else
+    {
+        ERREXIT(cinfo, JERR_MODE_CHANGE);
+    }
+}
+
+#endif /* D_MULTISCAN_FILES_SUPPORTED */
+
+
+/*
+ * Initialize master decompression control and select active modules.
+ * This is performed at the start of jpeg_start_decompress.
+ */
+
+GLOBAL(void)
+jinit_master_decompress (j_decompress_ptr cinfo)
+{
+    my_master_ptr master;
+
+    master = (my_master_ptr)
+             (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
+                                         SIZEOF(my_decomp_master));
+    cinfo->master = (struct jpeg_decomp_master *) master;
+    master->pub.prepare_for_output_pass = prepare_for_output_pass;
+    master->pub.finish_output_pass = finish_output_pass;
+
+    master->pub.is_dummy_pass = FALSE;
+
+    master_selection(cinfo);
+}
diff -NEaurb neo/renderer/jpeg-8c/jdmerge.c neo/renderer/jpeg-8c/jdmerge.c
--- neo/renderer/jpeg-8c/jdmerge.c	1970-01-01 00:00:00 +0000
+++ neo/renderer/jpeg-8c/jdmerge.c	2012-11-17 01:20:40 +0000
@@ -0,0 +1,421 @@
+/*
+ * jdmerge.c
+ *
+ * Copyright (C) 1994-1996, Thomas G. Lane.
+ * This file is part of the Independent JPEG Group's software.
+ * For conditions of distribution and use, see the accompanying README file.
+ *
+ * This file contains code for merged upsampling/color conversion.
+ *
+ * This file combines functions from jdsample.c and jdcolor.c;
+ * read those files first to understand what's going on.
+ *
+ * When the chroma components are to be upsampled by simple replication
+ * (ie, box filtering), we can save some work in color conversion by
+ * calculating all the output pixels corresponding to a pair of chroma
+ * samples at one time.  In the conversion equations
+ *	R = Y           + K1 * Cr
+ *	G = Y + K2 * Cb + K3 * Cr
+ *	B = Y + K4 * Cb
+ * only the Y term varies among the group of pixels corresponding to a pair
+ * of chroma samples, so the rest of the terms can be calculated just once.
+ * At typical sampling ratios, this eliminates half or three-quarters of the
+ * multiplications needed for color conversion.
+ *
+ * This file currently provides implementations for the following cases:
+ *	YCbCr => RGB color conversion only.
+ *	Sampling ratios of 2h1v or 2h2v.
+ *	No scaling needed at upsample time.
+ *	Corner-aligned (non-CCIR601) sampling alignment.
+ * Other special cases could be added, but in most applications these are
+ * the only common cases.  (For uncommon cases we fall back on the more
+ * general code in jdsample.c and jdcolor.c.)
+ */
+
+#define JPEG_INTERNALS
+#include "jinclude.h"
+#include "jpeglib.h"
+
+#ifdef UPSAMPLE_MERGING_SUPPORTED
+
+
+/* Private subobject */
+
+typedef struct
+{
+    struct jpeg_upsampler pub;	/* public fields */
+
+    /* Pointer to routine to do actual upsampling/conversion of one row group */
+    JMETHOD(void, upmethod, (j_decompress_ptr cinfo,
+                             JSAMPIMAGE input_buf, JDIMENSION in_row_group_ctr,
+                             JSAMPARRAY output_buf));
+
+    /* Private state for YCC->RGB conversion */
+    int * Cr_r_tab;		/* => table for Cr to R conversion */
+    int * Cb_b_tab;		/* => table for Cb to B conversion */
+    INT32 * Cr_g_tab;		/* => table for Cr to G conversion */
+    INT32 * Cb_g_tab;		/* => table for Cb to G conversion */
+
+    /* For 2:1 vertical sampling, we produce two output rows at a time.
+     * We need a "spare" row buffer to hold the second output row if the
+     * application provides just a one-row buffer; we also use the spare
+     * to discard the dummy last row if the image height is odd.
+     */
+    JSAMPROW spare_row;
+    boolean spare_full;		/* T if spare buffer is occupied */
+
+    JDIMENSION out_row_width;	/* samples per output row */
+    JDIMENSION rows_to_go;	/* counts rows remaining in image */
+} my_upsampler;
+
+typedef my_upsampler * my_upsample_ptr;
+
+#define SCALEBITS	16	/* speediest right-shift on some machines */
+#define ONE_HALF	((INT32) 1 << (SCALEBITS-1))
+#define FIX(x)		((INT32) ((x) * (1L<<SCALEBITS) + 0.5))
+
+
+/*
+ * Initialize tables for YCC->RGB colorspace conversion.
+ * This is taken directly from jdcolor.c; see that file for more info.
+ */
+
+LOCAL(void)
+build_ycc_rgb_table (j_decompress_ptr cinfo)
+{
+    my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
+    int i;
+    INT32 x;
+    SHIFT_TEMPS
+
+    upsample->Cr_r_tab = (int *)
+                         (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
+                                 (MAXJSAMPLE+1) * SIZEOF(int));
+    upsample->Cb_b_tab = (int *)
+                         (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
+                                 (MAXJSAMPLE+1) * SIZEOF(int));
+    upsample->Cr_g_tab = (INT32 *)
+                         (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
+                                 (MAXJSAMPLE+1) * SIZEOF(INT32));
+    upsample->Cb_g_tab = (INT32 *)
+                         (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
+                                 (MAXJSAMPLE+1) * SIZEOF(INT32));
+
+    for (i = 0, x = -CENTERJSAMPLE; i <= MAXJSAMPLE; i++, x++)
+    {
+        /* i is the actual input pixel value, in the range 0..MAXJSAMPLE */
+        /* The Cb or Cr value we are thinking of is x = i - CENTERJSAMPLE */
+        /* Cr=>R value is nearest int to 1.40200 * x */
+        upsample->Cr_r_tab[i] = (int)
+                                RIGHT_SHIFT(FIX(1.40200) * x + ONE_HALF, SCALEBITS);
+        /* Cb=>B value is nearest int to 1.77200 * x */
+        upsample->Cb_b_tab[i] = (int)
+                                RIGHT_SHIFT(FIX(1.77200) * x + ONE_HALF, SCALEBITS);
+        /* Cr=>G value is scaled-up -0.71414 * x */
+        upsample->Cr_g_tab[i] = (- FIX(0.71414)) * x;
+        /* Cb=>G value is scaled-up -0.34414 * x */
+        /* We also add in ONE_HALF so that need not do it in inner loop */
+        upsample->Cb_g_tab[i] = (- FIX(0.34414)) * x + ONE_HALF;
+    }
+}
+
+
+/*
+ * Initialize for an upsampling pass.
+ */
+
+METHODDEF(void)
+start_pass_merged_upsample (j_decompress_ptr cinfo)
+{
+    my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
+
+    /* Mark the spare buffer empty */
+    upsample->spare_full = FALSE;
+    /* Initialize total-height counter for detecting bottom of image */
+    upsample->rows_to_go = cinfo->output_height;
+}
+
+
+/*
+ * Control routine to do upsampling (and color conversion).
+ *
+ * The control routine just handles the row buffering considerations.
+ */
+
+METHODDEF(void)
+merged_2v_upsample (j_decompress_ptr cinfo,
+                    JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr,
+                    JDIMENSION in_row_groups_avail,
+                    JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
+                    JDIMENSION out_rows_avail)
+/* 2:1 vertical sampling case: may need a spare row. */
+{
+    my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
+    JSAMPROW work_ptrs[2];
+    JDIMENSION num_rows;		/* number of rows returned to caller */
+
+    if (upsample->spare_full)
+    {
+        /* If we have a spare row saved from a previous cycle, just return it. */
+        jcopy_sample_rows(& upsample->spare_row, 0, output_buf + *out_row_ctr, 0,
+                          1, upsample->out_row_width);
+        num_rows = 1;
+        upsample->spare_full = FALSE;
+    }
+    else
+    {
+        /* Figure number of rows to return to caller. */
+        num_rows = 2;
+        /* Not more than the distance to the end of the image. */
+        if (num_rows > upsample->rows_to_go)
+        {
+            num_rows = upsample->rows_to_go;
+        }
+        /* And not more than what the client can accept: */
+        out_rows_avail -= *out_row_ctr;
+        if (num_rows > out_rows_avail)
+        {
+            num_rows = out_rows_avail;
+        }
+        /* Create output pointer array for upsampler. */
+        work_ptrs[0] = output_buf[*out_row_ctr];
+        if (num_rows > 1)
+        {
+            work_ptrs[1] = output_buf[*out_row_ctr + 1];
+        }
+        else
+        {
+            work_ptrs[1] = upsample->spare_row;
+            upsample->spare_full = TRUE;
+        }
+        /* Now do the upsampling. */
+        (*upsample->upmethod) (cinfo, input_buf, *in_row_group_ctr, work_ptrs);
+    }
+
+    /* Adjust counts */
+    *out_row_ctr += num_rows;
+    upsample->rows_to_go -= num_rows;
+    /* When the buffer is emptied, declare this input row group consumed */
+    if (! upsample->spare_full)
+    {
+        (*in_row_group_ctr)++;
+    }
+}
+
+
+METHODDEF(void)
+merged_1v_upsample (j_decompress_ptr cinfo,
+                    JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr,
+                    JDIMENSION in_row_groups_avail,
+                    JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
+                    JDIMENSION out_rows_avail)
+/* 1:1 vertical sampling case: much easier, never need a spare row. */
+{
+    my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
+
+    /* Just do the upsampling. */
+    (*upsample->upmethod) (cinfo, input_buf, *in_row_group_ctr,
+                           output_buf + *out_row_ctr);
+    /* Adjust counts */
+    (*out_row_ctr)++;
+    (*in_row_group_ctr)++;
+}
+
+
+/*
+ * These are the routines invoked by the control routines to do
+ * the actual upsampling/conversion.  One row group is processed per call.
+ *
+ * Note: since we may be writing directly into application-supplied buffers,
+ * we have to be honest about the output width; we can't assume the buffer
+ * has been rounded up to an even width.
+ */
+
+
+/*
+ * Upsample and color convert for the case of 2:1 horizontal and 1:1 vertical.
+ */
+
+METHODDEF(void)
+h2v1_merged_upsample (j_decompress_ptr cinfo,
+                      JSAMPIMAGE input_buf, JDIMENSION in_row_group_ctr,
+                      JSAMPARRAY output_buf)
+{
+    my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
+    register int y, cred, cgreen, cblue;
+    int cb, cr;
+    register JSAMPROW outptr;
+    JSAMPROW inptr0, inptr1, inptr2;
+    JDIMENSION col;
+    /* copy these pointers into registers if possible */
+    register JSAMPLE * range_limit = cinfo->sample_range_limit;
+    int * Crrtab = upsample->Cr_r_tab;
+    int * Cbbtab = upsample->Cb_b_tab;
+    INT32 * Crgtab = upsample->Cr_g_tab;
+    INT32 * Cbgtab = upsample->Cb_g_tab;
+    SHIFT_TEMPS
+
+    inptr0 = input_buf[0][in_row_group_ctr];
+    inptr1 = input_buf[1][in_row_group_ctr];
+    inptr2 = input_buf[2][in_row_group_ctr];
+    outptr = output_buf[0];
+    /* Loop for each pair of output pixels */
+    for (col = cinfo->output_width >> 1; col > 0; col--)
+    {
+        /* Do the chroma part of the calculation */
+        cb = GETJSAMPLE(*inptr1++);
+        cr = GETJSAMPLE(*inptr2++);
+        cred = Crrtab[cr];
+        cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
+        cblue = Cbbtab[cb];
+        /* Fetch 2 Y values and emit 2 pixels */
+        y  = GETJSAMPLE(*inptr0++);
+        outptr[RGB_RED] =   range_limit[y + cred];
+        outptr[RGB_GREEN] = range_limit[y + cgreen];
+        outptr[RGB_BLUE] =  range_limit[y + cblue];
+        outptr += RGB_PIXELSIZE;
+        y  = GETJSAMPLE(*inptr0++);
+        outptr[RGB_RED] =   range_limit[y + cred];
+        outptr[RGB_GREEN] = range_limit[y + cgreen];
+        outptr[RGB_BLUE] =  range_limit[y + cblue];
+        outptr += RGB_PIXELSIZE;
+    }
+    /* If image width is odd, do the last output column separately */
+    if (cinfo->output_width & 1)
+    {
+        cb = GETJSAMPLE(*inptr1);
+        cr = GETJSAMPLE(*inptr2);
+        cred = Crrtab[cr];
+        cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
+        cblue = Cbbtab[cb];
+        y  = GETJSAMPLE(*inptr0);
+        outptr[RGB_RED] =   range_limit[y + cred];
+        outptr[RGB_GREEN] = range_limit[y + cgreen];
+        outptr[RGB_BLUE] =  range_limit[y + cblue];
+    }
+}
+
+
+/*
+ * Upsample and color convert for the case of 2:1 horizontal and 2:1 vertical.
+ */
+
+METHODDEF(void)
+h2v2_merged_upsample (j_decompress_ptr cinfo,
+                      JSAMPIMAGE input_buf, JDIMENSION in_row_group_ctr,
+                      JSAMPARRAY output_buf)
+{
+    my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
+    register int y, cred, cgreen, cblue;
+    int cb, cr;
+    register JSAMPROW outptr0, outptr1;
+    JSAMPROW inptr00, inptr01, inptr1, inptr2;
+    JDIMENSION col;
+    /* copy these pointers into registers if possible */
+    register JSAMPLE * range_limit = cinfo->sample_range_limit;
+    int * Crrtab = upsample->Cr_r_tab;
+    int * Cbbtab = upsample->Cb_b_tab;
+    INT32 * Crgtab = upsample->Cr_g_tab;
+    INT32 * Cbgtab = upsample->Cb_g_tab;
+    SHIFT_TEMPS
+
+    inptr00 = input_buf[0][in_row_group_ctr*2];
+    inptr01 = input_buf[0][in_row_group_ctr*2 + 1];
+    inptr1 = input_buf[1][in_row_group_ctr];
+    inptr2 = input_buf[2][in_row_group_ctr];
+    outptr0 = output_buf[0];
+    outptr1 = output_buf[1];
+    /* Loop for each group of output pixels */
+    for (col = cinfo->output_width >> 1; col > 0; col--)
+    {
+        /* Do the chroma part of the calculation */
+        cb = GETJSAMPLE(*inptr1++);
+        cr = GETJSAMPLE(*inptr2++);
+        cred = Crrtab[cr];
+        cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
+        cblue = Cbbtab[cb];
+        /* Fetch 4 Y values and emit 4 pixels */
+        y  = GETJSAMPLE(*inptr00++);
+        outptr0[RGB_RED] =   range_limit[y + cred];
+        outptr0[RGB_GREEN] = range_limit[y + cgreen];
+        outptr0[RGB_BLUE] =  range_limit[y + cblue];
+        outptr0 += RGB_PIXELSIZE;
+        y  = GETJSAMPLE(*inptr00++);
+        outptr0[RGB_RED] =   range_limit[y + cred];
+        outptr0[RGB_GREEN] = range_limit[y + cgreen];
+        outptr0[RGB_BLUE] =  range_limit[y + cblue];
+        outptr0 += RGB_PIXELSIZE;
+        y  = GETJSAMPLE(*inptr01++);
+        outptr1[RGB_RED] =   range_limit[y + cred];
+        outptr1[RGB_GREEN] = range_limit[y + cgreen];
+        outptr1[RGB_BLUE] =  range_limit[y + cblue];
+        outptr1 += RGB_PIXELSIZE;
+        y  = GETJSAMPLE(*inptr01++);
+        outptr1[RGB_RED] =   range_limit[y + cred];
+        outptr1[RGB_GREEN] = range_limit[y + cgreen];
+        outptr1[RGB_BLUE] =  range_limit[y + cblue];
+        outptr1 += RGB_PIXELSIZE;
+    }
+    /* If image width is odd, do the last output column separately */
+    if (cinfo->output_width & 1)
+    {
+        cb = GETJSAMPLE(*inptr1);
+        cr = GETJSAMPLE(*inptr2);
+        cred = Crrtab[cr];
+        cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
+        cblue = Cbbtab[cb];
+        y  = GETJSAMPLE(*inptr00);
+        outptr0[RGB_RED] =   range_limit[y + cred];
+        outptr0[RGB_GREEN] = range_limit[y + cgreen];
+        outptr0[RGB_BLUE] =  range_limit[y + cblue];
+        y  = GETJSAMPLE(*inptr01);
+        outptr1[RGB_RED] =   range_limit[y + cred];
+        outptr1[RGB_GREEN] = range_limit[y + cgreen];
+        outptr1[RGB_BLUE] =  range_limit[y + cblue];
+    }
+}
+
+
+/*
+ * Module initialization routine for merged upsampling/color conversion.
+ *
+ * NB: this is called under the conditions determined by use_merged_upsample()
+ * in jdmaster.c.  That routine MUST correspond to the actual capabilities
+ * of this module; no safety checks are made here.
+ */
+
+GLOBAL(void)
+jinit_merged_upsampler (j_decompress_ptr cinfo)
+{
+    my_upsample_ptr upsample;
+
+    upsample = (my_upsample_ptr)
+               (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
+                                           SIZEOF(my_upsampler));
+    cinfo->upsample = (struct jpeg_upsampler *) upsample;
+    upsample->pub.start_pass = start_pass_merged_upsample;
+    upsample->pub.need_context_rows = FALSE;
+
+    upsample->out_row_width = cinfo->output_width * cinfo->out_color_components;
+
+    if (cinfo->max_v_samp_factor == 2)
+    {
+        upsample->pub.upsample = merged_2v_upsample;
+        upsample->upmethod = h2v2_merged_upsample;
+        /* Allocate a spare row buffer */
+        upsample->spare_row = (JSAMPROW)
+                              (*cinfo->mem->alloc_large) ((j_common_ptr) cinfo, JPOOL_IMAGE,
+                                      (size_t) (upsample->out_row_width * SIZEOF(JSAMPLE)));
+    }
+    else
+    {
+        upsample->pub.upsample = merged_1v_upsample;
+        upsample->upmethod = h2v1_merged_upsample;
+        /* No spare row needed */
+        upsample->spare_row = NULL;
+    }
+
+    build_ycc_rgb_table(cinfo);
+}
+
+#endif /* UPSAMPLE_MERGING_SUPPORTED */
diff -NEaurb neo/renderer/jpeg-8c/jdpostct.c neo/renderer/jpeg-8c/jdpostct.c
--- neo/renderer/jpeg-8c/jdpostct.c	1970-01-01 00:00:00 +0000
+++ neo/renderer/jpeg-8c/jdpostct.c	2012-11-17 01:20:41 +0000
@@ -0,0 +1,315 @@
+/*
+ * jdpostct.c
+ *
+ * Copyright (C) 1994-1996, Thomas G. Lane.
+ * This file is part of the Independent JPEG Group's software.
+ * For conditions of distribution and use, see the accompanying README file.
+ *
+ * This file contains the decompression postprocessing controller.
+ * This controller manages the upsampling, color conversion, and color
+ * quantization/reduction steps; specifically, it controls the buffering
+ * between upsample/color conversion and color quantization/reduction.
+ *
+ * If no color quantization/reduction is required, then this module has no
+ * work to do, and it just hands off to the upsample/color conversion code.
+ * An integrated upsample/convert/quantize process would replace this module
+ * entirely.
+ */
+
+#define JPEG_INTERNALS
+#include "jinclude.h"
+#include "jpeglib.h"
+
+
+/* Private buffer controller object */
+
+typedef struct
+{
+    struct jpeg_d_post_controller pub; /* public fields */
+
+    /* Color quantization source buffer: this holds output data from
+     * the upsample/color conversion step to be passed to the quantizer.
+     * For two-pass color quantization, we need a full-image buffer;
+     * for one-pass operation, a strip buffer is sufficient.
+     */
+    jvirt_sarray_ptr whole_image;	/* virtual array, or NULL if one-pass */
+    JSAMPARRAY buffer;		/* strip buffer, or current strip of virtual */
+    JDIMENSION strip_height;	/* buffer size in rows */
+    /* for two-pass mode only: */
+    JDIMENSION starting_row;	/* row # of first row in current strip */
+    JDIMENSION next_row;		/* index of next row to fill/empty in strip */
+} my_post_controller;
+
+typedef my_post_controller * my_post_ptr;
+
+
+/* Forward declarations */
+METHODDEF(void) post_process_1pass
+JPP((j_decompress_ptr cinfo,
+     JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr,
+     JDIMENSION in_row_groups_avail,
+     JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
+     JDIMENSION out_rows_avail));
+#ifdef QUANT_2PASS_SUPPORTED
+METHODDEF(void) post_process_prepass
+JPP((j_decompress_ptr cinfo,
+     JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr,
+     JDIMENSION in_row_groups_avail,
+     JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
+     JDIMENSION out_rows_avail));
+METHODDEF(void) post_process_2pass
+JPP((j_decompress_ptr cinfo,
+     JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr,
+     JDIMENSION in_row_groups_avail,
+     JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
+     JDIMENSION out_rows_avail));
+#endif
+
+
+/*
+ * Initialize for a processing pass.
+ */
+
+METHODDEF(void)
+start_pass_dpost (j_decompress_ptr cinfo, J_BUF_MODE pass_mode)
+{
+    my_post_ptr post = (my_post_ptr) cinfo->post;
+
+    switch (pass_mode)
+    {
+    case JBUF_PASS_THRU:
+        if (cinfo->quantize_colors)
+        {
+            /* Single-pass processing with color quantization. */
+            post->pub.post_process_data = post_process_1pass;
+            /* We could be doing buffered-image output before starting a 2-pass
+             * color quantization; in that case, jinit_d_post_controller did not
+             * allocate a strip buffer.  Use the virtual-array buffer as workspace.
+             */
+            if (post->buffer == NULL)
+            {
+                post->buffer = (*cinfo->mem->access_virt_sarray)
+                               ((j_common_ptr) cinfo, post->whole_image,
+                                (JDIMENSION) 0, post->strip_height, TRUE);
+            }
+        }
+        else
+        {
+            /* For single-pass processing without color quantization,
+             * I have no work to do; just call the upsampler directly.
+             */
+            post->pub.post_process_data = cinfo->upsample->upsample;
+        }
+        break;
+#ifdef QUANT_2PASS_SUPPORTED
+    case JBUF_SAVE_AND_PASS:
+        /* First pass of 2-pass quantization */
+        if (post->whole_image == NULL)
+        {
+            ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
+        }
+        post->pub.post_process_data = post_process_prepass;
+        break;
+    case JBUF_CRANK_DEST:
+        /* Second pass of 2-pass quantization */
+        if (post->whole_image == NULL)
+        {
+            ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
+        }
+        post->pub.post_process_data = post_process_2pass;
+        break;
+#endif /* QUANT_2PASS_SUPPORTED */
+    default:
+        ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
+        break;
+    }
+    post->starting_row = post->next_row = 0;
+}
+
+
+/*
+ * Process some data in the one-pass (strip buffer) case.
+ * This is used for color precision reduction as well as one-pass quantization.
+ */
+
+METHODDEF(void)
+post_process_1pass (j_decompress_ptr cinfo,
+                    JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr,
+                    JDIMENSION in_row_groups_avail,
+                    JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
+                    JDIMENSION out_rows_avail)
+{
+    my_post_ptr post = (my_post_ptr) cinfo->post;
+    JDIMENSION num_rows, max_rows;
+
+    /* Fill the buffer, but not more than what we can dump out in one go. */
+    /* Note we rely on the upsampler to detect bottom of image. */
+    max_rows = out_rows_avail - *out_row_ctr;
+    if (max_rows > post->strip_height)
+    {
+        max_rows = post->strip_height;
+    }
+    num_rows = 0;
+    (*cinfo->upsample->upsample) (cinfo,
+                                  input_buf, in_row_group_ctr, in_row_groups_avail,
+                                  post->buffer, &num_rows, max_rows);
+    /* Quantize and emit data. */
+    (*cinfo->cquantize->color_quantize) (cinfo,
+                                         post->buffer, output_buf + *out_row_ctr, (int) num_rows);
+    *out_row_ctr += num_rows;
+}
+
+
+#ifdef QUANT_2PASS_SUPPORTED
+
+/*
+ * Process some data in the first pass of 2-pass quantization.
+ */
+
+METHODDEF(void)
+post_process_prepass (j_decompress_ptr cinfo,
+                      JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr,
+                      JDIMENSION in_row_groups_avail,
+                      JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
+                      JDIMENSION out_rows_avail)
+{
+    my_post_ptr post = (my_post_ptr) cinfo->post;
+    JDIMENSION old_next_row, num_rows;
+
+    /* Reposition virtual buffer if at start of strip. */
+    if (post->next_row == 0)
+    {
+        post->buffer = (*cinfo->mem->access_virt_sarray)
+                       ((j_common_ptr) cinfo, post->whole_image,
+                        post->starting_row, post->strip_height, TRUE);
+    }
+
+    /* Upsample some data (up to a strip height's worth). */
+    old_next_row = post->next_row;
+    (*cinfo->upsample->upsample) (cinfo,
+                                  input_buf, in_row_group_ctr, in_row_groups_avail,
+                                  post->buffer, &post->next_row, post->strip_height);
+
+    /* Allow quantizer to scan new data.  No data is emitted, */
+    /* but we advance out_row_ctr so outer loop can tell when we're done. */
+    if (post->next_row > old_next_row)
+    {
+        num_rows = post->next_row - old_next_row;
+        (*cinfo->cquantize->color_quantize) (cinfo, post->buffer + old_next_row,
+                                             (JSAMPARRAY) NULL, (int) num_rows);
+        *out_row_ctr += num_rows;
+    }
+
+    /* Advance if we filled the strip. */
+    if (post->next_row >= post->strip_height)
+    {
+        post->starting_row += post->strip_height;
+        post->next_row = 0;
+    }
+}
+
+
+/*
+ * Process some data in the second pass of 2-pass quantization.
+ */
+
+METHODDEF(void)
+post_process_2pass (j_decompress_ptr cinfo,
+                    JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr,
+                    JDIMENSION in_row_groups_avail,
+                    JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
+                    JDIMENSION out_rows_avail)
+{
+    my_post_ptr post = (my_post_ptr) cinfo->post;
+    JDIMENSION num_rows, max_rows;
+
+    /* Reposition virtual buffer if at start of strip. */
+    if (post->next_row == 0)
+    {
+        post->buffer = (*cinfo->mem->access_virt_sarray)
+                       ((j_common_ptr) cinfo, post->whole_image,
+                        post->starting_row, post->strip_height, FALSE);
+    }
+
+    /* Determine number of rows to emit. */
+    num_rows = post->strip_height - post->next_row; /* available in strip */
+    max_rows = out_rows_avail - *out_row_ctr; /* available in output area */
+    if (num_rows > max_rows)
+    {
+        num_rows = max_rows;
+    }
+    /* We have to check bottom of image here, can't depend on upsampler. */
+    max_rows = cinfo->output_height - post->starting_row;
+    if (num_rows > max_rows)
+    {
+        num_rows = max_rows;
+    }
+
+    /* Quantize and emit data. */
+    (*cinfo->cquantize->color_quantize) (cinfo,
+                                         post->buffer + post->next_row, output_buf + *out_row_ctr,
+                                         (int) num_rows);
+    *out_row_ctr += num_rows;
+
+    /* Advance if we filled the strip. */
+    post->next_row += num_rows;
+    if (post->next_row >= post->strip_height)
+    {
+        post->starting_row += post->strip_height;
+        post->next_row = 0;
+    }
+}
+
+#endif /* QUANT_2PASS_SUPPORTED */
+
+
+/*
+ * Initialize postprocessing controller.
+ */
+
+GLOBAL(void)
+jinit_d_post_controller (j_decompress_ptr cinfo, boolean need_full_buffer)
+{
+    my_post_ptr post;
+
+    post = (my_post_ptr)
+           (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
+                                       SIZEOF(my_post_controller));
+    cinfo->post = (struct jpeg_d_post_controller *) post;
+    post->pub.start_pass = start_pass_dpost;
+    post->whole_image = NULL;	/* flag for no virtual arrays */
+    post->buffer = NULL;		/* flag for no strip buffer */
+
+    /* Create the quantization buffer, if needed */
+    if (cinfo->quantize_colors)
+    {
+        /* The buffer strip height is max_v_samp_factor, which is typically
+         * an efficient number of rows for upsampling to return.
+         * (In the presence of output rescaling, we might want to be smarter?)
+         */
+        post->strip_height = (JDIMENSION) cinfo->max_v_samp_factor;
+        if (need_full_buffer)
+        {
+            /* Two-pass color quantization: need full-image storage. */
+            /* We round up the number of rows to a multiple of the strip height. */
+#ifdef QUANT_2PASS_SUPPORTED
+            post->whole_image = (*cinfo->mem->request_virt_sarray)
+                                ((j_common_ptr) cinfo, JPOOL_IMAGE, FALSE,
+                                 cinfo->output_width * cinfo->out_color_components,
+                                 (JDIMENSION) jround_up((long) cinfo->output_height,
+                                         (long) post->strip_height),
+                                 post->strip_height);
+#else
+            ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
+#endif /* QUANT_2PASS_SUPPORTED */
+        }
+        else
+        {
+            /* One-pass color quantization: just make a strip buffer. */
+            post->buffer = (*cinfo->mem->alloc_sarray)
+                           ((j_common_ptr) cinfo, JPOOL_IMAGE,
+                            cinfo->output_width * cinfo->out_color_components,
+                            post->strip_height);
+        }
+    }
+}
diff -NEaurb neo/renderer/jpeg-8c/jdsample.c neo/renderer/jpeg-8c/jdsample.c
--- neo/renderer/jpeg-8c/jdsample.c	1970-01-01 00:00:00 +0000
+++ neo/renderer/jpeg-8c/jdsample.c	2012-11-17 01:20:41 +0000
@@ -0,0 +1,394 @@
+/*
+ * jdsample.c
+ *
+ * Copyright (C) 1991-1996, Thomas G. Lane.
+ * Modified 2002-2008 by Guido Vollbeding.
+ * This file is part of the Independent JPEG Group's software.
+ * For conditions of distribution and use, see the accompanying README file.
+ *
+ * This file contains upsampling routines.
+ *
+ * Upsampling input data is counted in "row groups".  A row group
+ * is defined to be (v_samp_factor * DCT_v_scaled_size / min_DCT_v_scaled_size)
+ * sample rows of each component.  Upsampling will normally produce
+ * max_v_samp_factor pixel rows from each row group (but this could vary
+ * if the upsampler is applying a scale factor of its own).
+ *
+ * An excellent reference for image resampling is
+ *   Digital Image Warping, George Wolberg, 1990.
+ *   Pub. by IEEE Computer Society Press, Los Alamitos, CA. ISBN 0-8186-8944-7.
+ */
+
+#define JPEG_INTERNALS
+#include "jinclude.h"
+#include "jpeglib.h"
+
+
+/* Pointer to routine to upsample a single component */
+typedef JMETHOD(void, upsample1_ptr,
+                (j_decompress_ptr cinfo, jpeg_component_info * compptr,
+                 JSAMPARRAY input_data, JSAMPARRAY * output_data_ptr));
+
+/* Private subobject */
+
+typedef struct
+{
+    struct jpeg_upsampler pub;	/* public fields */
+
+    /* Color conversion buffer.  When using separate upsampling and color
+     * conversion steps, this buffer holds one upsampled row group until it
+     * has been color converted and output.
+     * Note: we do not allocate any storage for component(s) which are full-size,
+     * ie do not need rescaling.  The corresponding entry of color_buf[] is
+     * simply set to point to the input data array, thereby avoiding copying.
+     */
+    JSAMPARRAY color_buf[MAX_COMPONENTS];
+
+    /* Per-component upsampling method pointers */
+    upsample1_ptr methods[MAX_COMPONENTS];
+
+    int next_row_out;		/* counts rows emitted from color_buf */
+    JDIMENSION rows_to_go;	/* counts rows remaining in image */
+
+    /* Height of an input row group for each component. */
+    int rowgroup_height[MAX_COMPONENTS];
+
+    /* These arrays save pixel expansion factors so that int_expand need not
+     * recompute them each time.  They are unused for other upsampling methods.
+     */
+    UINT8 h_expand[MAX_COMPONENTS];
+    UINT8 v_expand[MAX_COMPONENTS];
+} my_upsampler;
+
+typedef my_upsampler * my_upsample_ptr;
+
+
+/*
+ * Initialize for an upsampling pass.
+ */
+
+METHODDEF(void)
+start_pass_upsample (j_decompress_ptr cinfo)
+{
+    my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
+
+    /* Mark the conversion buffer empty */
+    upsample->next_row_out = cinfo->max_v_samp_factor;
+    /* Initialize total-height counter for detecting bottom of image */
+    upsample->rows_to_go = cinfo->output_height;
+}
+
+
+/*
+ * Control routine to do upsampling (and color conversion).
+ *
+ * In this version we upsample each component independently.
+ * We upsample one row group into the conversion buffer, then apply
+ * color conversion a row at a time.
+ */
+
+METHODDEF(void)
+sep_upsample (j_decompress_ptr cinfo,
+              JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr,
+              JDIMENSION in_row_groups_avail,
+              JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
+              JDIMENSION out_rows_avail)
+{
+    my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
+    int ci;
+    jpeg_component_info * compptr;
+    JDIMENSION num_rows;
+
+    /* Fill the conversion buffer, if it's empty */
+    if (upsample->next_row_out >= cinfo->max_v_samp_factor)
+    {
+        for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
+                ci++, compptr++)
+        {
+            /* Invoke per-component upsample method.  Notice we pass a POINTER
+             * to color_buf[ci], so that fullsize_upsample can change it.
+             */
+            (*upsample->methods[ci]) (cinfo, compptr,
+                                      input_buf[ci] + (*in_row_group_ctr * upsample->rowgroup_height[ci]),
+                                      upsample->color_buf + ci);
+        }
+        upsample->next_row_out = 0;
+    }
+
+    /* Color-convert and emit rows */
+
+    /* How many we have in the buffer: */
+    num_rows = (JDIMENSION) (cinfo->max_v_samp_factor - upsample->next_row_out);
+    /* Not more than the distance to the end of the image.  Need this test
+     * in case the image height is not a multiple of max_v_samp_factor:
+     */
+    if (num_rows > upsample->rows_to_go)
+    {
+        num_rows = upsample->rows_to_go;
+    }
+    /* And not more than what the client can accept: */
+    out_rows_avail -= *out_row_ctr;
+    if (num_rows > out_rows_avail)
+    {
+        num_rows = out_rows_avail;
+    }
+
+    (*cinfo->cconvert->color_convert) (cinfo, upsample->color_buf,
+                                       (JDIMENSION) upsample->next_row_out,
+                                       output_buf + *out_row_ctr,
+                                       (int) num_rows);
+
+    /* Adjust counts */
+    *out_row_ctr += num_rows;
+    upsample->rows_to_go -= num_rows;
+    upsample->next_row_out += num_rows;
+    /* When the buffer is emptied, declare this input row group consumed */
+    if (upsample->next_row_out >= cinfo->max_v_samp_factor)
+    {
+        (*in_row_group_ctr)++;
+    }
+}
+
+
+/*
+ * These are the routines invoked by sep_upsample to upsample pixel values
+ * of a single component.  One row group is processed per call.
+ */
+
+
+/*
+ * For full-size components, we just make color_buf[ci] point at the
+ * input buffer, and thus avoid copying any data.  Note that this is
+ * safe only because sep_upsample doesn't declare the input row group
+ * "consumed" until we are done color converting and emitting it.
+ */
+
+METHODDEF(void)
+fullsize_upsample (j_decompress_ptr cinfo, jpeg_component_info * compptr,
+                   JSAMPARRAY input_data, JSAMPARRAY * output_data_ptr)
+{
+    *output_data_ptr = input_data;
+}
+
+
+/*
+ * This is a no-op version used for "uninteresting" components.
+ * These components will not be referenced by color conversion.
+ */
+
+METHODDEF(void)
+noop_upsample (j_decompress_ptr cinfo, jpeg_component_info * compptr,
+               JSAMPARRAY input_data, JSAMPARRAY * output_data_ptr)
+{
+    *output_data_ptr = NULL;	/* safety check */
+}
+
+
+/*
+ * This version handles any integral sampling ratios.
+ * This is not used for typical JPEG files, so it need not be fast.
+ * Nor, for that matter, is it particularly accurate: the algorithm is
+ * simple replication of the input pixel onto the corresponding output
+ * pixels.  The hi-falutin sampling literature refers to this as a
+ * "box filter".  A box filter tends to introduce visible artifacts,
+ * so if you are actually going to use 3:1 or 4:1 sampling ratios
+ * you would be well advised to improve this code.
+ */
+
+METHODDEF(void)
+int_upsample (j_decompress_ptr cinfo, jpeg_component_info * compptr,
+              JSAMPARRAY input_data, JSAMPARRAY * output_data_ptr)
+{
+    my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
+    JSAMPARRAY output_data = *output_data_ptr;
+    register JSAMPROW inptr, outptr;
+    register JSAMPLE invalue;
+    register int h;
+    JSAMPROW outend;
+    int h_expand, v_expand;
+    int inrow, outrow;
+
+    h_expand = upsample->h_expand[compptr->component_index];
+    v_expand = upsample->v_expand[compptr->component_index];
+
+    inrow = outrow = 0;
+    while (outrow < cinfo->max_v_samp_factor)
+    {
+        /* Generate one output row with proper horizontal expansion */
+        inptr = input_data[inrow];
+        outptr = output_data[outrow];
+        outend = outptr + cinfo->output_width;
+        while (outptr < outend)
+        {
+            invalue = *inptr++;	/* don't need GETJSAMPLE() here */
+            for (h = h_expand; h > 0; h--)
+            {
+                *outptr++ = invalue;
+            }
+        }
+        /* Generate any additional output rows by duplicating the first one */
+        if (v_expand > 1)
+        {
+            jcopy_sample_rows(output_data, outrow, output_data, outrow+1,
+                              v_expand-1, cinfo->output_width);
+        }
+        inrow++;
+        outrow += v_expand;
+    }
+}
+
+
+/*
+ * Fast processing for the common case of 2:1 horizontal and 1:1 vertical.
+ * It's still a box filter.
+ */
+
+METHODDEF(void)
+h2v1_upsample (j_decompress_ptr cinfo, jpeg_component_info * compptr,
+               JSAMPARRAY input_data, JSAMPARRAY * output_data_ptr)
+{
+    JSAMPARRAY output_data = *output_data_ptr;
+    register JSAMPROW inptr, outptr;
+    register JSAMPLE invalue;
+    JSAMPROW outend;
+    int outrow;
+
+    for (outrow = 0; outrow < cinfo->max_v_samp_factor; outrow++)
+    {
+        inptr = input_data[outrow];
+        outptr = output_data[outrow];
+        outend = outptr + cinfo->output_width;
+        while (outptr < outend)
+        {
+            invalue = *inptr++;	/* don't need GETJSAMPLE() here */
+            *outptr++ = invalue;
+            *outptr++ = invalue;
+        }
+    }
+}
+
+
+/*
+ * Fast processing for the common case of 2:1 horizontal and 2:1 vertical.
+ * It's still a box filter.
+ */
+
+METHODDEF(void)
+h2v2_upsample (j_decompress_ptr cinfo, jpeg_component_info * compptr,
+               JSAMPARRAY input_data, JSAMPARRAY * output_data_ptr)
+{
+    JSAMPARRAY output_data = *output_data_ptr;
+    register JSAMPROW inptr, outptr;
+    register JSAMPLE invalue;
+    JSAMPROW outend;
+    int inrow, outrow;
+
+    inrow = outrow = 0;
+    while (outrow < cinfo->max_v_samp_factor)
+    {
+        inptr = input_data[inrow];
+        outptr = output_data[outrow];
+        outend = outptr + cinfo->output_width;
+        while (outptr < outend)
+        {
+            invalue = *inptr++;	/* don't need GETJSAMPLE() here */
+            *outptr++ = invalue;
+            *outptr++ = invalue;
+        }
+        jcopy_sample_rows(output_data, outrow, output_data, outrow+1,
+                          1, cinfo->output_width);
+        inrow++;
+        outrow += 2;
+    }
+}
+
+
+/*
+ * Module initialization routine for upsampling.
+ */
+
+GLOBAL(void)
+jinit_upsampler (j_decompress_ptr cinfo)
+{
+    my_upsample_ptr upsample;
+    int ci;
+    jpeg_component_info * compptr;
+    boolean need_buffer;
+    int h_in_group, v_in_group, h_out_group, v_out_group;
+
+    upsample = (my_upsample_ptr)
+               (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
+                                           SIZEOF(my_upsampler));
+    cinfo->upsample = (struct jpeg_upsampler *) upsample;
+    upsample->pub.start_pass = start_pass_upsample;
+    upsample->pub.upsample = sep_upsample;
+    upsample->pub.need_context_rows = FALSE; /* until we find out differently */
+
+    if (cinfo->CCIR601_sampling)	/* this isn't supported */
+    {
+        ERREXIT(cinfo, JERR_CCIR601_NOTIMPL);
+    }
+
+    /* Verify we can handle the sampling factors, select per-component methods,
+     * and create storage as needed.
+     */
+    for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
+            ci++, compptr++)
+    {
+        /* Compute size of an "input group" after IDCT scaling.  This many samples
+         * are to be converted to max_h_samp_factor * max_v_samp_factor pixels.
+         */
+        h_in_group = (compptr->h_samp_factor * compptr->DCT_h_scaled_size) /
+                     cinfo->min_DCT_h_scaled_size;
+        v_in_group = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
+                     cinfo->min_DCT_v_scaled_size;
+        h_out_group = cinfo->max_h_samp_factor;
+        v_out_group = cinfo->max_v_samp_factor;
+        upsample->rowgroup_height[ci] = v_in_group; /* save for use later */
+        need_buffer = TRUE;
+        if (! compptr->component_needed)
+        {
+            /* Don't bother to upsample an uninteresting component. */
+            upsample->methods[ci] = noop_upsample;
+            need_buffer = FALSE;
+        }
+        else if (h_in_group == h_out_group && v_in_group == v_out_group)
+        {
+            /* Fullsize components can be processed without any work. */
+            upsample->methods[ci] = fullsize_upsample;
+            need_buffer = FALSE;
+        }
+        else if (h_in_group * 2 == h_out_group &&
+                 v_in_group == v_out_group)
+        {
+            /* Special case for 2h1v upsampling */
+            upsample->methods[ci] = h2v1_upsample;
+        }
+        else if (h_in_group * 2 == h_out_group &&
+                 v_in_group * 2 == v_out_group)
+        {
+            /* Special case for 2h2v upsampling */
+            upsample->methods[ci] = h2v2_upsample;
+        }
+        else if ((h_out_group % h_in_group) == 0 &&
+                 (v_out_group % v_in_group) == 0)
+        {
+            /* Generic integral-factors upsampling method */
+            upsample->methods[ci] = int_upsample;
+            upsample->h_expand[ci] = (UINT8) (h_out_group / h_in_group);
+            upsample->v_expand[ci] = (UINT8) (v_out_group / v_in_group);
+        }
+        else
+        {
+            ERREXIT(cinfo, JERR_FRACT_SAMPLE_NOTIMPL);
+        }
+        if (need_buffer)
+        {
+            upsample->color_buf[ci] = (*cinfo->mem->alloc_sarray)
+                                      ((j_common_ptr) cinfo, JPOOL_IMAGE,
+                                       (JDIMENSION) jround_up((long) cinfo->output_width,
+                                               (long) cinfo->max_h_samp_factor),
+                                       (JDIMENSION) cinfo->max_v_samp_factor);
+        }
+    }
+}
diff -NEaurb neo/renderer/jpeg-8c/jdtrans.c neo/renderer/jpeg-8c/jdtrans.c
--- neo/renderer/jpeg-8c/jdtrans.c	1970-01-01 00:00:00 +0000
+++ neo/renderer/jpeg-8c/jdtrans.c	2012-11-17 01:20:40 +0000
@@ -0,0 +1,161 @@
+/*
+ * jdtrans.c
+ *
+ * Copyright (C) 1995-1997, Thomas G. Lane.
+ * Modified 2000-2009 by Guido Vollbeding.
+ * This file is part of the Independent JPEG Group's software.
+ * For conditions of distribution and use, see the accompanying README file.
+ *
+ * This file contains library routines for transcoding decompression,
+ * that is, reading raw DCT coefficient arrays from an input JPEG file.
+ * The routines in jdapimin.c will also be needed by a transcoder.
+ */
+
+#define JPEG_INTERNALS
+#include "jinclude.h"
+#include "jpeglib.h"
+
+
+/* Forward declarations */
+LOCAL(void) transdecode_master_selection JPP((j_decompress_ptr cinfo));
+
+
+/*
+ * Read the coefficient arrays from a JPEG file.
+ * jpeg_read_header must be completed before calling this.
+ *
+ * The entire image is read into a set of virtual coefficient-block arrays,
+ * one per component.  The return value is a pointer to the array of
+ * virtual-array descriptors.  These can be manipulated directly via the
+ * JPEG memory manager, or handed off to jpeg_write_coefficients().
+ * To release the memory occupied by the virtual arrays, call
+ * jpeg_finish_decompress() when done with the data.
+ *
+ * An alternative usage is to simply obtain access to the coefficient arrays
+ * during a buffered-image-mode decompression operation.  This is allowed
+ * after any jpeg_finish_output() call.  The arrays can be accessed until
+ * jpeg_finish_decompress() is called.  (Note that any call to the library
+ * may reposition the arrays, so don't rely on access_virt_barray() results
+ * to stay valid across library calls.)
+ *
+ * Returns NULL if suspended.  This case need be checked only if
+ * a suspending data source is used.
+ */
+
+GLOBAL(jvirt_barray_ptr *)
+jpeg_read_coefficients (j_decompress_ptr cinfo)
+{
+    if (cinfo->global_state == DSTATE_READY)
+    {
+        /* First call: initialize active modules */
+        transdecode_master_selection(cinfo);
+        cinfo->global_state = DSTATE_RDCOEFS;
+    }
+    if (cinfo->global_state == DSTATE_RDCOEFS)
+    {
+        /* Absorb whole file into the coef buffer */
+        for (;;)
+        {
+            int retcode;
+            /* Call progress monitor hook if present */
+            if (cinfo->progress != NULL)
+            {
+                (*cinfo->progress->progress_monitor) ((j_common_ptr) cinfo);
+            }
+            /* Absorb some more input */
+            retcode = (*cinfo->inputctl->consume_input) (cinfo);
+            if (retcode == JPEG_SUSPENDED)
+            {
+                return NULL;
+            }
+            if (retcode == JPEG_REACHED_EOI)
+            {
+                break;
+            }
+            /* Advance progress counter if appropriate */
+            if (cinfo->progress != NULL &&
+                    (retcode == JPEG_ROW_COMPLETED || retcode == JPEG_REACHED_SOS))
+            {
+                if (++cinfo->progress->pass_counter >= cinfo->progress->pass_limit)
+                {
+                    /* startup underestimated number of scans; ratchet up one scan */
+                    cinfo->progress->pass_limit += (long) cinfo->total_iMCU_rows;
+                }
+            }
+        }
+        /* Set state so that jpeg_finish_decompress does the right thing */
+        cinfo->global_state = DSTATE_STOPPING;
+    }
+    /* At this point we should be in state DSTATE_STOPPING if being used
+     * standalone, or in state DSTATE_BUFIMAGE if being invoked to get access
+     * to the coefficients during a full buffered-image-mode decompression.
+     */
+    if ((cinfo->global_state == DSTATE_STOPPING ||
+            cinfo->global_state == DSTATE_BUFIMAGE) && cinfo->buffered_image)
+    {
+        return cinfo->coef->coef_arrays;
+    }
+    /* Oops, improper usage */
+    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
+    return NULL;			/* keep compiler happy */
+}
+
+
+/*
+ * Master selection of decompression modules for transcoding.
+ * This substitutes for jdmaster.c's initialization of the full decompressor.
+ */
+
+LOCAL(void)
+transdecode_master_selection (j_decompress_ptr cinfo)
+{
+    /* This is effectively a buffered-image operation. */
+    cinfo->buffered_image = TRUE;
+
+    /* Compute output image dimensions and related values. */
+    jpeg_core_output_dimensions(cinfo);
+
+    /* Entropy decoding: either Huffman or arithmetic coding. */
+    if (cinfo->arith_code)
+    {
+        jinit_arith_decoder(cinfo);
+    }
+    else
+    {
+        jinit_huff_decoder(cinfo);
+    }
+
+    /* Always get a full-image coefficient buffer. */
+    jinit_d_coef_controller(cinfo, TRUE);
+
+    /* We can now tell the memory manager to allocate virtual arrays. */
+    (*cinfo->mem->realize_virt_arrays) ((j_common_ptr) cinfo);
+
+    /* Initialize input side of decompressor to consume first scan. */
+    (*cinfo->inputctl->start_input_pass) (cinfo);
+
+    /* Initialize progress monitoring. */
+    if (cinfo->progress != NULL)
+    {
+        int nscans;
+        /* Estimate number of scans to set pass_limit. */
+        if (cinfo->progressive_mode)
+        {
+            /* Arbitrarily estimate 2 interleaved DC scans + 3 AC scans/component. */
+            nscans = 2 + 3 * cinfo->num_components;
+        }
+        else if (cinfo->inputctl->has_multiple_scans)
+        {
+            /* For a nonprogressive multiscan file, estimate 1 scan per component. */
+            nscans = cinfo->num_components;
+        }
+        else
+        {
+            nscans = 1;
+        }
+        cinfo->progress->pass_counter = 0L;
+        cinfo->progress->pass_limit = (long) cinfo->total_iMCU_rows * nscans;
+        cinfo->progress->completed_passes = 0;
+        cinfo->progress->total_passes = 1;
+    }
+}
diff -NEaurb neo/renderer/jpeg-8c/jerror.c neo/renderer/jpeg-8c/jerror.c
--- neo/renderer/jpeg-8c/jerror.c	1970-01-01 00:00:00 +0000
+++ neo/renderer/jpeg-8c/jerror.c	2012-11-17 01:20:40 +0000
@@ -0,0 +1,273 @@
+/*
+ * jerror.c
+ *
+ * Copyright (C) 1991-1998, Thomas G. Lane.
+ * This file is part of the Independent JPEG Group's software.
+ * For conditions of distribution and use, see the accompanying README file.
+ *
+ * This file contains simple error-reporting and trace-message routines.
+ * These are suitable for Unix-like systems and others where writing to
+ * stderr is the right thing to do.  Many applications will want to replace
+ * some or all of these routines.
+ *
+ * If you define USE_WINDOWS_MESSAGEBOX in jconfig.h or in the makefile,
+ * you get a Windows-specific hack to display error messages in a dialog box.
+ * It ain't much, but it beats dropping error messages into the bit bucket,
+ * which is what happens to output to stderr under most Windows C compilers.
+ *
+ * These routines are used by both the compression and decompression code.
+ */
+
+/* this is not a core library module, so it doesn't define JPEG_INTERNALS */
+#include "jinclude.h"
+#include "jpeglib.h"
+#include "jversion.h"
+#include "jerror.h"
+
+#include <stdlib.h>
+
+#ifdef USE_WINDOWS_MESSAGEBOX
+#include <windows.h>
+#endif
+
+#ifndef EXIT_FAILURE		/* define exit() codes if not provided */
+#define EXIT_FAILURE  1
+#endif
+
+
+/*
+ * Create the message string table.
+ * We do this from the master message list in jerror.h by re-reading
+ * jerror.h with a suitable definition for macro JMESSAGE.
+ * The message table is made an external symbol just in case any applications
+ * want to refer to it directly.
+ */
+
+#ifdef NEED_SHORT_EXTERNAL_NAMES
+#define jpeg_std_message_table	jMsgTable
+#endif
+
+#define JMESSAGE(code,string)	string ,
+
+const char * const jpeg_std_message_table[] =
+{
+#include "jerror.h"
+    NULL
+};
+
+
+/*
+ * Error exit handler: must not return to caller.
+ *
+ * Applications may override this if they want to get control back after
+ * an error.  Typically one would longjmp somewhere instead of exiting.
+ * The setjmp buffer can be made a private field within an expanded error
+ * handler object.  Note that the info needed to generate an error message
+ * is stored in the error object, so you can generate the message now or
+ * later, at your convenience.
+ * You should make sure that the JPEG object is cleaned up (with jpeg_abort
+ * or jpeg_destroy) at some point.
+ */
+
+METHODDEF(void)
+error_exit (j_common_ptr cinfo)
+{
+    /* Always display the message */
+    (*cinfo->err->output_message) (cinfo);
+
+    /* Let the memory manager delete any temp files before we die */
+    jpeg_destroy(cinfo);
+
+    exit(EXIT_FAILURE);
+}
+
+
+/*
+ * Actual output of an error or trace message.
+ * Applications may override this method to send JPEG messages somewhere
+ * other than stderr.
+ *
+ * On Windows, printing to stderr is generally completely useless,
+ * so we provide optional code to produce an error-dialog popup.
+ * Most Windows applications will still prefer to override this routine,
+ * but if they don't, it'll do something at least marginally useful.
+ *
+ * NOTE: to use the library in an environment that doesn't support the
+ * C stdio library, you may have to delete the call to fprintf() entirely,
+ * not just not use this routine.
+ */
+
+METHODDEF(void)
+output_message (j_common_ptr cinfo)
+{
+    char buffer[JMSG_LENGTH_MAX];
+
+    /* Create the message */
+    (*cinfo->err->format_message) (cinfo, buffer);
+
+#ifdef USE_WINDOWS_MESSAGEBOX
+    /* Display it in a message dialog box */
+    MessageBox(GetActiveWindow(), buffer, "JPEG Library Error",
+               MB_OK | MB_ICONERROR);
+#else
+    /* Send it to stderr, adding a newline */
+    fprintf(stderr, "%s\n", buffer);
+#endif
+}
+
+
+/*
+ * Decide whether to emit a trace or warning message.
+ * msg_level is one of:
+ *   -1: recoverable corrupt-data warning, may want to abort.
+ *    0: important advisory messages (always display to user).
+ *    1: first level of tracing detail.
+ *    2,3,...: successively more detailed tracing messages.
+ * An application might override this method if it wanted to abort on warnings
+ * or change the policy about which messages to display.
+ */
+
+METHODDEF(void)
+emit_message (j_common_ptr cinfo, int msg_level)
+{
+    struct jpeg_error_mgr * err = cinfo->err;
+
+    if (msg_level < 0)
+    {
+        /* It's a warning message.  Since corrupt files may generate many warnings,
+         * the policy implemented here is to show only the first warning,
+         * unless trace_level >= 3.
+         */
+        if (err->num_warnings == 0 || err->trace_level >= 3)
+        {
+            (*err->output_message) (cinfo);
+        }
+        /* Always count warnings in num_warnings. */
+        err->num_warnings++;
+    }
+    else
+    {
+        /* It's a trace message.  Show it if trace_level >= msg_level. */
+        if (err->trace_level >= msg_level)
+        {
+            (*err->output_message) (cinfo);
+        }
+    }
+}
+
+
+/*
+ * Format a message string for the most recent JPEG error or message.
+ * The message is stored into buffer, which should be at least JMSG_LENGTH_MAX
+ * characters.  Note that no '\n' character is added to the string.
+ * Few applications should need to override this method.
+ */
+
+METHODDEF(void)
+format_message (j_common_ptr cinfo, char * buffer)
+{
+    struct jpeg_error_mgr * err = cinfo->err;
+    int msg_code = err->msg_code;
+    const char * msgtext = NULL;
+    const char * msgptr;
+    char ch;
+    boolean isstring;
+
+    /* Look up message string in proper table */
+    if (msg_code > 0 && msg_code <= err->last_jpeg_message)
+    {
+        msgtext = err->jpeg_message_table[msg_code];
+    }
+    else if (err->addon_message_table != NULL &&
+             msg_code >= err->first_addon_message &&
+             msg_code <= err->last_addon_message)
+    {
+        msgtext = err->addon_message_table[msg_code - err->first_addon_message];
+    }
+
+    /* Defend against bogus message number */
+    if (msgtext == NULL)
+    {
+        err->msg_parm.i[0] = msg_code;
+        msgtext = err->jpeg_message_table[0];
+    }
+
+    /* Check for string parameter, as indicated by %s in the message text */
+    isstring = FALSE;
+    msgptr = msgtext;
+    while ((ch = *msgptr++) != '\0')
+    {
+        if (ch == '%')
+        {
+            if (*msgptr == 's')
+            {
+                isstring = TRUE;
+            }
+            break;
+        }
+    }
+
+    /* Format the message into the passed buffer */
+    if (isstring)
+    {
+        sprintf(buffer, msgtext, err->msg_parm.s);
+    }
+    else
+        sprintf(buffer, msgtext,
+                err->msg_parm.i[0], err->msg_parm.i[1],
+                err->msg_parm.i[2], err->msg_parm.i[3],
+                err->msg_parm.i[4], err->msg_parm.i[5],
+                err->msg_parm.i[6], err->msg_parm.i[7]);
+}
+
+
+/*
+ * Reset error state variables at start of a new image.
+ * This is called during compression startup to reset trace/error
+ * processing to default state, without losing any application-specific
+ * method pointers.  An application might possibly want to override
+ * this method if it has additional error processing state.
+ */
+
+METHODDEF(void)
+reset_error_mgr (j_common_ptr cinfo)
+{
+    cinfo->err->num_warnings = 0;
+    /* trace_level is not reset since it is an application-supplied parameter */
+    cinfo->err->msg_code = 0;	/* may be useful as a flag for "no error" */
+}
+
+
+/*
+ * Fill in the standard error-handling methods in a jpeg_error_mgr object.
+ * Typical call is:
+ *	struct jpeg_compress_struct cinfo;
+ *	struct jpeg_error_mgr err;
+ *
+ *	cinfo.err = jpeg_std_error(&err);
+ * after which the application may override some of the methods.
+ */
+
+GLOBAL(struct jpeg_error_mgr *)
+jpeg_std_error (struct jpeg_error_mgr * err)
+{
+    err->error_exit = error_exit;
+    err->emit_message = emit_message;
+    err->output_message = output_message;
+    err->format_message = format_message;
+    err->reset_error_mgr = reset_error_mgr;
+
+    err->trace_level = 0;		/* default = no tracing */
+    err->num_warnings = 0;	/* no warnings emitted yet */
+    err->msg_code = 0;		/* may be useful as a flag for "no error" */
+
+    /* Initialize message table pointers */
+    err->jpeg_message_table = jpeg_std_message_table;
+    err->last_jpeg_message = (int) JMSG_LASTMSGCODE - 1;
+
+    err->addon_message_table = NULL;
+    err->first_addon_message = 0;	/* for safety */
+    err->last_addon_message = 0;
+
+    return err;
+}
diff -NEaurb neo/renderer/jpeg-8c/jerror.h neo/renderer/jpeg-8c/jerror.h
--- neo/renderer/jpeg-8c/jerror.h	1970-01-01 00:00:00 +0000
+++ neo/renderer/jpeg-8c/jerror.h	2012-11-17 01:20:41 +0000
@@ -0,0 +1,305 @@
+/*
+ * jerror.h
+ *
+ * Copyright (C) 1994-1997, Thomas G. Lane.
+ * Modified 1997-2009 by Guido Vollbeding.
+ * This file is part of the Independent JPEG Group's software.
+ * For conditions of distribution and use, see the accompanying README file.
+ *
+ * This file defines the error and message codes for the JPEG library.
+ * Edit this file to add new codes, or to translate the message strings to
+ * some other language.
+ * A set of error-reporting macros are defined too.  Some applications using
+ * the JPEG library may wish to include this file to get the error codes
+ * and/or the macros.
+ */
+
+/*
+ * To define the enum list of message codes, include this file without
+ * defining macro JMESSAGE.  To create a message string table, include it
+ * again with a suitable JMESSAGE definition (see jerror.c for an example).
+ */
+#ifndef JMESSAGE
+#ifndef JERROR_H
+/* First time through, define the enum list */
+#define JMAKE_ENUM_LIST
+#else
+/* Repeated inclusions of this file are no-ops unless JMESSAGE is defined */
+#define JMESSAGE(code,string)
+#endif /* JERROR_H */
+#endif /* JMESSAGE */
+
+#ifdef JMAKE_ENUM_LIST
+
+typedef enum
+{
+
+#define JMESSAGE(code,string)	code ,
+
+#endif /* JMAKE_ENUM_LIST */
+
+    JMESSAGE(JMSG_NOMESSAGE, "Bogus message code %d") /* Must be first entry! */
+
+    /* For maintenance convenience, list is alphabetical by message code name */
+    JMESSAGE(JERR_BAD_ALIGN_TYPE, "ALIGN_TYPE is wrong, please fix")
+    JMESSAGE(JERR_BAD_ALLOC_CHUNK, "MAX_ALLOC_CHUNK is wrong, please fix")
+    JMESSAGE(JERR_BAD_BUFFER_MODE, "Bogus buffer control mode")
+    JMESSAGE(JERR_BAD_COMPONENT_ID, "Invalid component ID %d in SOS")
+    JMESSAGE(JERR_BAD_CROP_SPEC, "Invalid crop request")
+    JMESSAGE(JERR_BAD_DCT_COEF, "DCT coefficient out of range")
+    JMESSAGE(JERR_BAD_DCTSIZE, "DCT scaled block size %dx%d not supported")
+    JMESSAGE(JERR_BAD_DROP_SAMPLING,
+             "Component index %d: mismatching sampling ratio %d:%d, %d:%d, %c")
+    JMESSAGE(JERR_BAD_HUFF_TABLE, "Bogus Huffman table definition")
+    JMESSAGE(JERR_BAD_IN_COLORSPACE, "Bogus input colorspace")
+    JMESSAGE(JERR_BAD_J_COLORSPACE, "Bogus JPEG colorspace")
+    JMESSAGE(JERR_BAD_LENGTH, "Bogus marker length")
+    JMESSAGE(JERR_BAD_LIB_VERSION,
+             "Wrong JPEG library version: library is %d, caller expects %d")
+    JMESSAGE(JERR_BAD_MCU_SIZE, "Sampling factors too large for interleaved scan")
+    JMESSAGE(JERR_BAD_POOL_ID, "Invalid memory pool code %d")
+    JMESSAGE(JERR_BAD_PRECISION, "Unsupported JPEG data precision %d")
+    JMESSAGE(JERR_BAD_PROGRESSION,
+             "Invalid progressive parameters Ss=%d Se=%d Ah=%d Al=%d")
+    JMESSAGE(JERR_BAD_PROG_SCRIPT,
+             "Invalid progressive parameters at scan script entry %d")
+    JMESSAGE(JERR_BAD_SAMPLING, "Bogus sampling factors")
+    JMESSAGE(JERR_BAD_SCAN_SCRIPT, "Invalid scan script at entry %d")
+    JMESSAGE(JERR_BAD_STATE, "Improper call to JPEG library in state %d")
+    JMESSAGE(JERR_BAD_STRUCT_SIZE,
+             "JPEG parameter struct mismatch: library thinks size is %u, caller expects %u")
+    JMESSAGE(JERR_BAD_VIRTUAL_ACCESS, "Bogus virtual array access")
+    JMESSAGE(JERR_BUFFER_SIZE, "Buffer passed to JPEG library is too small")
+    JMESSAGE(JERR_CANT_SUSPEND, "Suspension not allowed here")
+    JMESSAGE(JERR_CCIR601_NOTIMPL, "CCIR601 sampling not implemented yet")
+    JMESSAGE(JERR_COMPONENT_COUNT, "Too many color components: %d, max %d")
+    JMESSAGE(JERR_CONVERSION_NOTIMPL, "Unsupported color conversion request")
+    JMESSAGE(JERR_DAC_INDEX, "Bogus DAC index %d")
+    JMESSAGE(JERR_DAC_VALUE, "Bogus DAC value 0x%x")
+    JMESSAGE(JERR_DHT_INDEX, "Bogus DHT index %d")
+    JMESSAGE(JERR_DQT_INDEX, "Bogus DQT index %d")
+    JMESSAGE(JERR_EMPTY_IMAGE, "Empty JPEG image (DNL not supported)")
+    JMESSAGE(JERR_EMS_READ, "Read from EMS failed")
+    JMESSAGE(JERR_EMS_WRITE, "Write to EMS failed")
+    JMESSAGE(JERR_EOI_EXPECTED, "Didn't expect more than one scan")
+    JMESSAGE(JERR_FILE_READ, "Input file read error")
+    JMESSAGE(JERR_FILE_WRITE, "Output file write error --- out of disk space?")
+    JMESSAGE(JERR_FRACT_SAMPLE_NOTIMPL, "Fractional sampling not implemented yet")
+    JMESSAGE(JERR_HUFF_CLEN_OVERFLOW, "Huffman code size table overflow")
+    JMESSAGE(JERR_HUFF_MISSING_CODE, "Missing Huffman code table entry")
+    JMESSAGE(JERR_IMAGE_TOO_BIG, "Maximum supported image dimension is %u pixels")
+    JMESSAGE(JERR_INPUT_EMPTY, "Empty input file")
+    JMESSAGE(JERR_INPUT_EOF, "Premature end of input file")
+    JMESSAGE(JERR_MISMATCHED_QUANT_TABLE,
+             "Cannot transcode due to multiple use of quantization table %d")
+    JMESSAGE(JERR_MISSING_DATA, "Scan script does not transmit all data")
+    JMESSAGE(JERR_MODE_CHANGE, "Invalid color quantization mode change")
+    JMESSAGE(JERR_NOTIMPL, "Not implemented yet")
+    JMESSAGE(JERR_NOT_COMPILED, "Requested feature was omitted at compile time")
+    JMESSAGE(JERR_NO_ARITH_TABLE, "Arithmetic table 0x%02x was not defined")
+    JMESSAGE(JERR_NO_BACKING_STORE, "Backing store not supported")
+    JMESSAGE(JERR_NO_HUFF_TABLE, "Huffman table 0x%02x was not defined")
+    JMESSAGE(JERR_NO_IMAGE, "JPEG datastream contains no image")
+    JMESSAGE(JERR_NO_QUANT_TABLE, "Quantization table 0x%02x was not defined")
+    JMESSAGE(JERR_NO_SOI, "Not a JPEG file: starts with 0x%02x 0x%02x")
+    JMESSAGE(JERR_OUT_OF_MEMORY, "Insufficient memory (case %d)")
+    JMESSAGE(JERR_QUANT_COMPONENTS,
+             "Cannot quantize more than %d color components")
+    JMESSAGE(JERR_QUANT_FEW_COLORS, "Cannot quantize to fewer than %d colors")
+    JMESSAGE(JERR_QUANT_MANY_COLORS, "Cannot quantize to more than %d colors")
+    JMESSAGE(JERR_SOF_DUPLICATE, "Invalid JPEG file structure: two SOF markers")
+    JMESSAGE(JERR_SOF_NO_SOS, "Invalid JPEG file structure: missing SOS marker")
+    JMESSAGE(JERR_SOF_UNSUPPORTED, "Unsupported JPEG process: SOF type 0x%02x")
+    JMESSAGE(JERR_SOI_DUPLICATE, "Invalid JPEG file structure: two SOI markers")
+    JMESSAGE(JERR_SOS_NO_SOF, "Invalid JPEG file structure: SOS before SOF")
+    JMESSAGE(JERR_TFILE_CREATE, "Failed to create temporary file %s")
+    JMESSAGE(JERR_TFILE_READ, "Read failed on temporary file")
+    JMESSAGE(JERR_TFILE_SEEK, "Seek failed on temporary file")
+    JMESSAGE(JERR_TFILE_WRITE,
+             "Write failed on temporary file --- out of disk space?")
+    JMESSAGE(JERR_TOO_LITTLE_DATA, "Application transferred too few scanlines")
+    JMESSAGE(JERR_UNKNOWN_MARKER, "Unsupported marker type 0x%02x")
+    JMESSAGE(JERR_VIRTUAL_BUG, "Virtual array controller messed up")
+    JMESSAGE(JERR_WIDTH_OVERFLOW, "Image too wide for this implementation")
+    JMESSAGE(JERR_XMS_READ, "Read from XMS failed")
+    JMESSAGE(JERR_XMS_WRITE, "Write to XMS failed")
+    JMESSAGE(JMSG_COPYRIGHT, JCOPYRIGHT)
+    JMESSAGE(JMSG_VERSION, JVERSION)
+    JMESSAGE(JTRC_16BIT_TABLES,
+             "Caution: quantization tables are too coarse for baseline JPEG")
+    JMESSAGE(JTRC_ADOBE,
+             "Adobe APP14 marker: version %d, flags 0x%04x 0x%04x, transform %d")
+    JMESSAGE(JTRC_APP0, "Unknown APP0 marker (not JFIF), length %u")
+    JMESSAGE(JTRC_APP14, "Unknown APP14 marker (not Adobe), length %u")
+    JMESSAGE(JTRC_DAC, "Define Arithmetic Table 0x%02x: 0x%02x")
+    JMESSAGE(JTRC_DHT, "Define Huffman Table 0x%02x")
+    JMESSAGE(JTRC_DQT, "Define Quantization Table %d  precision %d")
+    JMESSAGE(JTRC_DRI, "Define Restart Interval %u")
+    JMESSAGE(JTRC_EMS_CLOSE, "Freed EMS handle %u")
+    JMESSAGE(JTRC_EMS_OPEN, "Obtained EMS handle %u")
+    JMESSAGE(JTRC_EOI, "End Of Image")
+    JMESSAGE(JTRC_HUFFBITS, "        %3d %3d %3d %3d %3d %3d %3d %3d")
+    JMESSAGE(JTRC_JFIF, "JFIF APP0 marker: version %d.%02d, density %dx%d  %d")
+    JMESSAGE(JTRC_JFIF_BADTHUMBNAILSIZE,
+             "Warning: thumbnail image size does not match data length %u")
+    JMESSAGE(JTRC_JFIF_EXTENSION,
+             "JFIF extension marker: type 0x%02x, length %u")
+    JMESSAGE(JTRC_JFIF_THUMBNAIL, "    with %d x %d thumbnail image")
+    JMESSAGE(JTRC_MISC_MARKER, "Miscellaneous marker 0x%02x, length %u")
+    JMESSAGE(JTRC_PARMLESS_MARKER, "Unexpected marker 0x%02x")
+    JMESSAGE(JTRC_QUANTVALS, "        %4u %4u %4u %4u %4u %4u %4u %4u")
+    JMESSAGE(JTRC_QUANT_3_NCOLORS, "Quantizing to %d = %d*%d*%d colors")
+    JMESSAGE(JTRC_QUANT_NCOLORS, "Quantizing to %d colors")
+    JMESSAGE(JTRC_QUANT_SELECTED, "Selected %d colors for quantization")
+    JMESSAGE(JTRC_RECOVERY_ACTION, "At marker 0x%02x, recovery action %d")
+    JMESSAGE(JTRC_RST, "RST%d")
+    JMESSAGE(JTRC_SMOOTH_NOTIMPL,
+             "Smoothing not supported with nonstandard sampling ratios")
+    JMESSAGE(JTRC_SOF, "Start Of Frame 0x%02x: width=%u, height=%u, components=%d")
+    JMESSAGE(JTRC_SOF_COMPONENT, "    Component %d: %dhx%dv q=%d")
+    JMESSAGE(JTRC_SOI, "Start of Image")
+    JMESSAGE(JTRC_SOS, "Start Of Scan: %d components")
+    JMESSAGE(JTRC_SOS_COMPONENT, "    Component %d: dc=%d ac=%d")
+    JMESSAGE(JTRC_SOS_PARAMS, "  Ss=%d, Se=%d, Ah=%d, Al=%d")
+    JMESSAGE(JTRC_TFILE_CLOSE, "Closed temporary file %s")
+    JMESSAGE(JTRC_TFILE_OPEN, "Opened temporary file %s")
+    JMESSAGE(JTRC_THUMB_JPEG,
+             "JFIF extension marker: JPEG-compressed thumbnail image, length %u")
+    JMESSAGE(JTRC_THUMB_PALETTE,
+             "JFIF extension marker: palette thumbnail image, length %u")
+    JMESSAGE(JTRC_THUMB_RGB,
+             "JFIF extension marker: RGB thumbnail image, length %u")
+    JMESSAGE(JTRC_UNKNOWN_IDS,
+             "Unrecognized component IDs %d %d %d, assuming YCbCr")
+    JMESSAGE(JTRC_XMS_CLOSE, "Freed XMS handle %u")
+    JMESSAGE(JTRC_XMS_OPEN, "Obtained XMS handle %u")
+    JMESSAGE(JWRN_ADOBE_XFORM, "Unknown Adobe color transform code %d")
+    JMESSAGE(JWRN_ARITH_BAD_CODE, "Corrupt JPEG data: bad arithmetic code")
+    JMESSAGE(JWRN_BOGUS_PROGRESSION,
+             "Inconsistent progression sequence for component %d coefficient %d")
+    JMESSAGE(JWRN_EXTRANEOUS_DATA,
+             "Corrupt JPEG data: %u extraneous bytes before marker 0x%02x")
+    JMESSAGE(JWRN_HIT_MARKER, "Corrupt JPEG data: premature end of data segment")
+    JMESSAGE(JWRN_HUFF_BAD_CODE, "Corrupt JPEG data: bad Huffman code")
+    JMESSAGE(JWRN_JFIF_MAJOR, "Warning: unknown JFIF revision number %d.%02d")
+    JMESSAGE(JWRN_JPEG_EOF, "Premature end of JPEG file")
+    JMESSAGE(JWRN_MUST_RESYNC,
+             "Corrupt JPEG data: found marker 0x%02x instead of RST%d")
+    JMESSAGE(JWRN_NOT_SEQUENTIAL, "Invalid SOS parameters for sequential JPEG")
+    JMESSAGE(JWRN_TOO_MUCH_DATA, "Application transferred too many scanlines")
+
+#ifdef JMAKE_ENUM_LIST
+
+    JMSG_LASTMSGCODE
+} J_MESSAGE_CODE;
+
+#undef JMAKE_ENUM_LIST
+#endif /* JMAKE_ENUM_LIST */
+
+/* Zap JMESSAGE macro so that future re-inclusions do nothing by default */
+#undef JMESSAGE
+
+
+#ifndef JERROR_H
+#define JERROR_H
+
+/* Macros to simplify using the error and trace message stuff */
+/* The first parameter is either type of cinfo pointer */
+
+/* Fatal errors (print message and exit) */
+#define ERREXIT(cinfo,code)  \
+  ((cinfo)->err->msg_code = (code), \
+   (*(cinfo)->err->error_exit) ((j_common_ptr) (cinfo)))
+#define ERREXIT1(cinfo,code,p1)  \
+  ((cinfo)->err->msg_code = (code), \
+   (cinfo)->err->msg_parm.i[0] = (p1), \
+   (*(cinfo)->err->error_exit) ((j_common_ptr) (cinfo)))
+#define ERREXIT2(cinfo,code,p1,p2)  \
+  ((cinfo)->err->msg_code = (code), \
+   (cinfo)->err->msg_parm.i[0] = (p1), \
+   (cinfo)->err->msg_parm.i[1] = (p2), \
+   (*(cinfo)->err->error_exit) ((j_common_ptr) (cinfo)))
+#define ERREXIT3(cinfo,code,p1,p2,p3)  \
+  ((cinfo)->err->msg_code = (code), \
+   (cinfo)->err->msg_parm.i[0] = (p1), \
+   (cinfo)->err->msg_parm.i[1] = (p2), \
+   (cinfo)->err->msg_parm.i[2] = (p3), \
+   (*(cinfo)->err->error_exit) ((j_common_ptr) (cinfo)))
+#define ERREXIT4(cinfo,code,p1,p2,p3,p4)  \
+  ((cinfo)->err->msg_code = (code), \
+   (cinfo)->err->msg_parm.i[0] = (p1), \
+   (cinfo)->err->msg_parm.i[1] = (p2), \
+   (cinfo)->err->msg_parm.i[2] = (p3), \
+   (cinfo)->err->msg_parm.i[3] = (p4), \
+   (*(cinfo)->err->error_exit) ((j_common_ptr) (cinfo)))
+#define ERREXIT6(cinfo,code,p1,p2,p3,p4,p5,p6)  \
+  ((cinfo)->err->msg_code = (code), \
+   (cinfo)->err->msg_parm.i[0] = (p1), \
+   (cinfo)->err->msg_parm.i[1] = (p2), \
+   (cinfo)->err->msg_parm.i[2] = (p3), \
+   (cinfo)->err->msg_parm.i[3] = (p4), \
+   (cinfo)->err->msg_parm.i[4] = (p5), \
+   (cinfo)->err->msg_parm.i[5] = (p6), \
+   (*(cinfo)->err->error_exit) ((j_common_ptr) (cinfo)))
+#define ERREXITS(cinfo,code,str)  \
+  ((cinfo)->err->msg_code = (code), \
+   strncpy((cinfo)->err->msg_parm.s, (str), JMSG_STR_PARM_MAX), \
+   (*(cinfo)->err->error_exit) ((j_common_ptr) (cinfo)))
+
+#define MAKESTMT(stuff)		do { stuff } while (0)
+
+/* Nonfatal errors (we can keep going, but the data is probably corrupt) */
+#define WARNMS(cinfo,code)  \
+  ((cinfo)->err->msg_code = (code), \
+   (*(cinfo)->err->emit_message) ((j_common_ptr) (cinfo), -1))
+#define WARNMS1(cinfo,code,p1)  \
+  ((cinfo)->err->msg_code = (code), \
+   (cinfo)->err->msg_parm.i[0] = (p1), \
+   (*(cinfo)->err->emit_message) ((j_common_ptr) (cinfo), -1))
+#define WARNMS2(cinfo,code,p1,p2)  \
+  ((cinfo)->err->msg_code = (code), \
+   (cinfo)->err->msg_parm.i[0] = (p1), \
+   (cinfo)->err->msg_parm.i[1] = (p2), \
+   (*(cinfo)->err->emit_message) ((j_common_ptr) (cinfo), -1))
+
+/* Informational/debugging messages */
+#define TRACEMS(cinfo,lvl,code)  \
+  ((cinfo)->err->msg_code = (code), \
+   (*(cinfo)->err->emit_message) ((j_common_ptr) (cinfo), (lvl)))
+#define TRACEMS1(cinfo,lvl,code,p1)  \
+  ((cinfo)->err->msg_code = (code), \
+   (cinfo)->err->msg_parm.i[0] = (p1), \
+   (*(cinfo)->err->emit_message) ((j_common_ptr) (cinfo), (lvl)))
+#define TRACEMS2(cinfo,lvl,code,p1,p2)  \
+  ((cinfo)->err->msg_code = (code), \
+   (cinfo)->err->msg_parm.i[0] = (p1), \
+   (cinfo)->err->msg_parm.i[1] = (p2), \
+   (*(cinfo)->err->emit_message) ((j_common_ptr) (cinfo), (lvl)))
+#define TRACEMS3(cinfo,lvl,code,p1,p2,p3)  \
+  MAKESTMT(int * _mp = (cinfo)->err->msg_parm.i; \
+	   _mp[0] = (p1); _mp[1] = (p2); _mp[2] = (p3); \
+	   (cinfo)->err->msg_code = (code); \
+	   (*(cinfo)->err->emit_message) ((j_common_ptr) (cinfo), (lvl)); )
+#define TRACEMS4(cinfo,lvl,code,p1,p2,p3,p4)  \
+  MAKESTMT(int * _mp = (cinfo)->err->msg_parm.i; \
+	   _mp[0] = (p1); _mp[1] = (p2); _mp[2] = (p3); _mp[3] = (p4); \
+	   (cinfo)->err->msg_code = (code); \
+	   (*(cinfo)->err->emit_message) ((j_common_ptr) (cinfo), (lvl)); )
+#define TRACEMS5(cinfo,lvl,code,p1,p2,p3,p4,p5)  \
+  MAKESTMT(int * _mp = (cinfo)->err->msg_parm.i; \
+	   _mp[0] = (p1); _mp[1] = (p2); _mp[2] = (p3); _mp[3] = (p4); \
+	   _mp[4] = (p5); \
+	   (cinfo)->err->msg_code = (code); \
+	   (*(cinfo)->err->emit_message) ((j_common_ptr) (cinfo), (lvl)); )
+#define TRACEMS8(cinfo,lvl,code,p1,p2,p3,p4,p5,p6,p7,p8)  \
+  MAKESTMT(int * _mp = (cinfo)->err->msg_parm.i; \
+	   _mp[0] = (p1); _mp[1] = (p2); _mp[2] = (p3); _mp[3] = (p4); \
+	   _mp[4] = (p5); _mp[5] = (p6); _mp[6] = (p7); _mp[7] = (p8); \
+	   (cinfo)->err->msg_code = (code); \
+	   (*(cinfo)->err->emit_message) ((j_common_ptr) (cinfo), (lvl)); )
+#define TRACEMSS(cinfo,lvl,code,str)  \
+  ((cinfo)->err->msg_code = (code), \
+   strncpy((cinfo)->err->msg_parm.s, (str), JMSG_STR_PARM_MAX), \
+   (*(cinfo)->err->emit_message) ((j_common_ptr) (cinfo), (lvl)))
+
+#endif /* JERROR_H */
diff -NEaurb neo/renderer/jpeg-8c/jfdctflt.c neo/renderer/jpeg-8c/jfdctflt.c
--- neo/renderer/jpeg-8c/jfdctflt.c	1970-01-01 00:00:00 +0000
+++ neo/renderer/jpeg-8c/jfdctflt.c	2012-11-17 01:20:39 +0000
@@ -0,0 +1,176 @@
+/*
+ * jfdctflt.c
+ *
+ * Copyright (C) 1994-1996, Thomas G. Lane.
+ * Modified 2003-2009 by Guido Vollbeding.
+ * This file is part of the Independent JPEG Group's software.
+ * For conditions of distribution and use, see the accompanying README file.
+ *
+ * This file contains a floating-point implementation of the
+ * forward DCT (Discrete Cosine Transform).
+ *
+ * This implementation should be more accurate than either of the integer
+ * DCT implementations.  However, it may not give the same results on all
+ * machines because of differences in roundoff behavior.  Speed will depend
+ * on the hardware's floating point capacity.
+ *
+ * A 2-D DCT can be done by 1-D DCT on each row followed by 1-D DCT
+ * on each column.  Direct algorithms are also available, but they are
+ * much more complex and seem not to be any faster when reduced to code.
+ *
+ * This implementation is based on Arai, Agui, and Nakajima's algorithm for
+ * scaled DCT.  Their original paper (Trans. IEICE E-71(11):1095) is in
+ * Japanese, but the algorithm is described in the Pennebaker & Mitchell
+ * JPEG textbook (see REFERENCES section in file README).  The following code
+ * is based directly on figure 4-8 in P&M.
+ * While an 8-point DCT cannot be done in less than 11 multiplies, it is
+ * possible to arrange the computation so that many of the multiplies are
+ * simple scalings of the final outputs.  These multiplies can then be
+ * folded into the multiplications or divisions by the JPEG quantization
+ * table entries.  The AA&N method leaves only 5 multiplies and 29 adds
+ * to be done in the DCT itself.
+ * The primary disadvantage of this method is that with a fixed-point
+ * implementation, accuracy is lost due to imprecise representation of the
+ * scaled quantization values.  However, that problem does not arise if
+ * we use floating point arithmetic.
+ */
+
+#define JPEG_INTERNALS
+#include "jinclude.h"
+#include "jpeglib.h"
+#include "jdct.h"		/* Private declarations for DCT subsystem */
+
+#ifdef DCT_FLOAT_SUPPORTED
+
+
+/*
+ * This module is specialized to the case DCTSIZE = 8.
+ */
+
+#if DCTSIZE != 8
+Sorry, this code only copes with 8x8 DCTs. /* deliberate syntax err */
+#endif
+
+
+/*
+ * Perform the forward DCT on one block of samples.
+ */
+
+GLOBAL(void)
+jpeg_fdct_float (FAST_FLOAT * data, JSAMPARRAY sample_data, JDIMENSION start_col)
+{
+    FAST_FLOAT tmp0, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, tmp7;
+    FAST_FLOAT tmp10, tmp11, tmp12, tmp13;
+    FAST_FLOAT z1, z2, z3, z4, z5, z11, z13;
+    FAST_FLOAT *dataptr;
+    JSAMPROW elemptr;
+    int ctr;
+
+    /* Pass 1: process rows. */
+
+    dataptr = data;
+    for (ctr = 0; ctr < DCTSIZE; ctr++)
+    {
+        elemptr = sample_data[ctr] + start_col;
+
+        /* Load data into workspace */
+        tmp0 = (FAST_FLOAT) (GETJSAMPLE(elemptr[0]) + GETJSAMPLE(elemptr[7]));
+        tmp7 = (FAST_FLOAT) (GETJSAMPLE(elemptr[0]) - GETJSAMPLE(elemptr[7]));
+        tmp1 = (FAST_FLOAT) (GETJSAMPLE(elemptr[1]) + GETJSAMPLE(elemptr[6]));
+        tmp6 = (FAST_FLOAT) (GETJSAMPLE(elemptr[1]) - GETJSAMPLE(elemptr[6]));
+        tmp2 = (FAST_FLOAT) (GETJSAMPLE(elemptr[2]) + GETJSAMPLE(elemptr[5]));
+        tmp5 = (FAST_FLOAT) (GETJSAMPLE(elemptr[2]) - GETJSAMPLE(elemptr[5]));
+        tmp3 = (FAST_FLOAT) (GETJSAMPLE(elemptr[3]) + GETJSAMPLE(elemptr[4]));
+        tmp4 = (FAST_FLOAT) (GETJSAMPLE(elemptr[3]) - GETJSAMPLE(elemptr[4]));
+
+        /* Even part */
+
+        tmp10 = tmp0 + tmp3;	/* phase 2 */
+        tmp13 = tmp0 - tmp3;
+        tmp11 = tmp1 + tmp2;
+        tmp12 = tmp1 - tmp2;
+
+        /* Apply unsigned->signed conversion */
+        dataptr[0] = tmp10 + tmp11 - 8 * CENTERJSAMPLE; /* phase 3 */
+        dataptr[4] = tmp10 - tmp11;
+
+        z1 = (tmp12 + tmp13) * ((FAST_FLOAT) 0.707106781); /* c4 */
+        dataptr[2] = tmp13 + z1;	/* phase 5 */
+        dataptr[6] = tmp13 - z1;
+
+        /* Odd part */
+
+        tmp10 = tmp4 + tmp5;	/* phase 2 */
+        tmp11 = tmp5 + tmp6;
+        tmp12 = tmp6 + tmp7;
+
+        /* The rotator is modified from fig 4-8 to avoid extra negations. */
+        z5 = (tmp10 - tmp12) * ((FAST_FLOAT) 0.382683433); /* c6 */
+        z2 = ((FAST_FLOAT) 0.541196100) * tmp10 + z5; /* c2-c6 */
+        z4 = ((FAST_FLOAT) 1.306562965) * tmp12 + z5; /* c2+c6 */
+        z3 = tmp11 * ((FAST_FLOAT) 0.707106781); /* c4 */
+
+        z11 = tmp7 + z3;		/* phase 5 */
+        z13 = tmp7 - z3;
+
+        dataptr[5] = z13 + z2;	/* phase 6 */
+        dataptr[3] = z13 - z2;
+        dataptr[1] = z11 + z4;
+        dataptr[7] = z11 - z4;
+
+        dataptr += DCTSIZE;		/* advance pointer to next row */
+    }
+
+    /* Pass 2: process columns. */
+
+    dataptr = data;
+    for (ctr = DCTSIZE-1; ctr >= 0; ctr--)
+    {
+        tmp0 = dataptr[DCTSIZE*0] + dataptr[DCTSIZE*7];
+        tmp7 = dataptr[DCTSIZE*0] - dataptr[DCTSIZE*7];
+        tmp1 = dataptr[DCTSIZE*1] + dataptr[DCTSIZE*6];
+        tmp6 = dataptr[DCTSIZE*1] - dataptr[DCTSIZE*6];
+        tmp2 = dataptr[DCTSIZE*2] + dataptr[DCTSIZE*5];
+        tmp5 = dataptr[DCTSIZE*2] - dataptr[DCTSIZE*5];
+        tmp3 = dataptr[DCTSIZE*3] + dataptr[DCTSIZE*4];
+        tmp4 = dataptr[DCTSIZE*3] - dataptr[DCTSIZE*4];
+
+        /* Even part */
+
+        tmp10 = tmp0 + tmp3;	/* phase 2 */
+        tmp13 = tmp0 - tmp3;
+        tmp11 = tmp1 + tmp2;
+        tmp12 = tmp1 - tmp2;
+
+        dataptr[DCTSIZE*0] = tmp10 + tmp11; /* phase 3 */
+        dataptr[DCTSIZE*4] = tmp10 - tmp11;
+
+        z1 = (tmp12 + tmp13) * ((FAST_FLOAT) 0.707106781); /* c4 */
+        dataptr[DCTSIZE*2] = tmp13 + z1; /* phase 5 */
+        dataptr[DCTSIZE*6] = tmp13 - z1;
+
+        /* Odd part */
+
+        tmp10 = tmp4 + tmp5;	/* phase 2 */
+        tmp11 = tmp5 + tmp6;
+        tmp12 = tmp6 + tmp7;
+
+        /* The rotator is modified from fig 4-8 to avoid extra negations. */
+        z5 = (tmp10 - tmp12) * ((FAST_FLOAT) 0.382683433); /* c6 */
+        z2 = ((FAST_FLOAT) 0.541196100) * tmp10 + z5; /* c2-c6 */
+        z4 = ((FAST_FLOAT) 1.306562965) * tmp12 + z5; /* c2+c6 */
+        z3 = tmp11 * ((FAST_FLOAT) 0.707106781); /* c4 */
+
+        z11 = tmp7 + z3;		/* phase 5 */
+        z13 = tmp7 - z3;
+
+        dataptr[DCTSIZE*5] = z13 + z2; /* phase 6 */
+        dataptr[DCTSIZE*3] = z13 - z2;
+        dataptr[DCTSIZE*1] = z11 + z4;
+        dataptr[DCTSIZE*7] = z11 - z4;
+
+        dataptr++;			/* advance pointer to next column */
+    }
+}
+
+#endif /* DCT_FLOAT_SUPPORTED */
diff -NEaurb neo/renderer/jpeg-8c/jfdctfst.c neo/renderer/jpeg-8c/jfdctfst.c
--- neo/renderer/jpeg-8c/jfdctfst.c	1970-01-01 00:00:00 +0000
+++ neo/renderer/jpeg-8c/jfdctfst.c	2012-11-17 01:20:40 +0000
@@ -0,0 +1,232 @@
+/*
+ * jfdctfst.c
+ *
+ * Copyright (C) 1994-1996, Thomas G. Lane.
+ * Modified 2003-2009 by Guido Vollbeding.
+ * This file is part of the Independent JPEG Group's software.
+ * For conditions of distribution and use, see the accompanying README file.
+ *
+ * This file contains a fast, not so accurate integer implementation of the
+ * forward DCT (Discrete Cosine Transform).
+ *
+ * A 2-D DCT can be done by 1-D DCT on each row followed by 1-D DCT
+ * on each column.  Direct algorithms are also available, but they are
+ * much more complex and seem not to be any faster when reduced to code.
+ *
+ * This implementation is based on Arai, Agui, and Nakajima's algorithm for
+ * scaled DCT.  Their original paper (Trans. IEICE E-71(11):1095) is in
+ * Japanese, but the algorithm is described in the Pennebaker & Mitchell
+ * JPEG textbook (see REFERENCES section in file README).  The following code
+ * is based directly on figure 4-8 in P&M.
+ * While an 8-point DCT cannot be done in less than 11 multiplies, it is
+ * possible to arrange the computation so that many of the multiplies are
+ * simple scalings of the final outputs.  These multiplies can then be
+ * folded into the multiplications or divisions by the JPEG quantization
+ * table entries.  The AA&N method leaves only 5 multiplies and 29 adds
+ * to be done in the DCT itself.
+ * The primary disadvantage of this method is that with fixed-point math,
+ * accuracy is lost due to imprecise representation of the scaled
+ * quantization values.  The smaller the quantization table entry, the less
+ * precise the scaled value, so this implementation does worse with high-
+ * quality-setting files than with low-quality ones.
+ */
+
+#define JPEG_INTERNALS
+#include "jinclude.h"
+#include "jpeglib.h"
+#include "jdct.h"		/* Private declarations for DCT subsystem */
+
+#ifdef DCT_IFAST_SUPPORTED
+
+
+/*
+ * This module is specialized to the case DCTSIZE = 8.
+ */
+
+#if DCTSIZE != 8
+Sorry, this code only copes with 8x8 DCTs. /* deliberate syntax err */
+#endif
+
+
+/* Scaling decisions are generally the same as in the LL&M algorithm;
+ * see jfdctint.c for more details.  However, we choose to descale
+ * (right shift) multiplication products as soon as they are formed,
+ * rather than carrying additional fractional bits into subsequent additions.
+ * This compromises accuracy slightly, but it lets us save a few shifts.
+ * More importantly, 16-bit arithmetic is then adequate (for 8-bit samples)
+ * everywhere except in the multiplications proper; this saves a good deal
+ * of work on 16-bit-int machines.
+ *
+ * Again to save a few shifts, the intermediate results between pass 1 and
+ * pass 2 are not upscaled, but are represented only to integral precision.
+ *
+ * A final compromise is to represent the multiplicative constants to only
+ * 8 fractional bits, rather than 13.  This saves some shifting work on some
+ * machines, and may also reduce the cost of multiplication (since there
+ * are fewer one-bits in the constants).
+ */
+
+#define CONST_BITS  8
+
+
+/* Some C compilers fail to reduce "FIX(constant)" at compile time, thus
+ * causing a lot of useless floating-point operations at run time.
+ * To get around this we use the following pre-calculated constants.
+ * If you change CONST_BITS you may want to add appropriate values.
+ * (With a reasonable C compiler, you can just rely on the FIX() macro...)
+ */
+
+#if CONST_BITS == 8
+#define FIX_0_382683433  ((INT32)   98)		/* FIX(0.382683433) */
+#define FIX_0_541196100  ((INT32)  139)		/* FIX(0.541196100) */
+#define FIX_0_707106781  ((INT32)  181)		/* FIX(0.707106781) */
+#define FIX_1_306562965  ((INT32)  334)		/* FIX(1.306562965) */
+#else
+#define FIX_0_382683433  FIX(0.382683433)
+#define FIX_0_541196100  FIX(0.541196100)
+#define FIX_0_707106781  FIX(0.707106781)
+#define FIX_1_306562965  FIX(1.306562965)
+#endif
+
+
+/* We can gain a little more speed, with a further compromise in accuracy,
+ * by omitting the addition in a descaling shift.  This yields an incorrectly
+ * rounded result half the time...
+ */
+
+#ifndef USE_ACCURATE_ROUNDING
+#undef DESCALE
+#define DESCALE(x,n)  RIGHT_SHIFT(x, n)
+#endif
+
+
+/* Multiply a DCTELEM variable by an INT32 constant, and immediately
+ * descale to yield a DCTELEM result.
+ */
+
+#define MULTIPLY(var,const)  ((DCTELEM) DESCALE((var) * (const), CONST_BITS))
+
+
+/*
+ * Perform the forward DCT on one block of samples.
+ */
+
+GLOBAL(void)
+jpeg_fdct_ifast (DCTELEM * data, JSAMPARRAY sample_data, JDIMENSION start_col)
+{
+    DCTELEM tmp0, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, tmp7;
+    DCTELEM tmp10, tmp11, tmp12, tmp13;
+    DCTELEM z1, z2, z3, z4, z5, z11, z13;
+    DCTELEM *dataptr;
+    JSAMPROW elemptr;
+    int ctr;
+    SHIFT_TEMPS
+
+    /* Pass 1: process rows. */
+
+    dataptr = data;
+    for (ctr = 0; ctr < DCTSIZE; ctr++)
+    {
+        elemptr = sample_data[ctr] + start_col;
+
+        /* Load data into workspace */
+        tmp0 = GETJSAMPLE(elemptr[0]) + GETJSAMPLE(elemptr[7]);
+        tmp7 = GETJSAMPLE(elemptr[0]) - GETJSAMPLE(elemptr[7]);
+        tmp1 = GETJSAMPLE(elemptr[1]) + GETJSAMPLE(elemptr[6]);
+        tmp6 = GETJSAMPLE(elemptr[1]) - GETJSAMPLE(elemptr[6]);
+        tmp2 = GETJSAMPLE(elemptr[2]) + GETJSAMPLE(elemptr[5]);
+        tmp5 = GETJSAMPLE(elemptr[2]) - GETJSAMPLE(elemptr[5]);
+        tmp3 = GETJSAMPLE(elemptr[3]) + GETJSAMPLE(elemptr[4]);
+        tmp4 = GETJSAMPLE(elemptr[3]) - GETJSAMPLE(elemptr[4]);
+
+        /* Even part */
+
+        tmp10 = tmp0 + tmp3;	/* phase 2 */
+        tmp13 = tmp0 - tmp3;
+        tmp11 = tmp1 + tmp2;
+        tmp12 = tmp1 - tmp2;
+
+        /* Apply unsigned->signed conversion */
+        dataptr[0] = tmp10 + tmp11 - 8 * CENTERJSAMPLE; /* phase 3 */
+        dataptr[4] = tmp10 - tmp11;
+
+        z1 = MULTIPLY(tmp12 + tmp13, FIX_0_707106781); /* c4 */
+        dataptr[2] = tmp13 + z1;	/* phase 5 */
+        dataptr[6] = tmp13 - z1;
+
+        /* Odd part */
+
+        tmp10 = tmp4 + tmp5;	/* phase 2 */
+        tmp11 = tmp5 + tmp6;
+        tmp12 = tmp6 + tmp7;
+
+        /* The rotator is modified from fig 4-8 to avoid extra negations. */
+        z5 = MULTIPLY(tmp10 - tmp12, FIX_0_382683433); /* c6 */
+        z2 = MULTIPLY(tmp10, FIX_0_541196100) + z5; /* c2-c6 */
+        z4 = MULTIPLY(tmp12, FIX_1_306562965) + z5; /* c2+c6 */
+        z3 = MULTIPLY(tmp11, FIX_0_707106781); /* c4 */
+
+        z11 = tmp7 + z3;		/* phase 5 */
+        z13 = tmp7 - z3;
+
+        dataptr[5] = z13 + z2;	/* phase 6 */
+        dataptr[3] = z13 - z2;
+        dataptr[1] = z11 + z4;
+        dataptr[7] = z11 - z4;
+
+        dataptr += DCTSIZE;		/* advance pointer to next row */
+    }
+
+    /* Pass 2: process columns. */
+
+    dataptr = data;
+    for (ctr = DCTSIZE-1; ctr >= 0; ctr--)
+    {
+        tmp0 = dataptr[DCTSIZE*0] + dataptr[DCTSIZE*7];
+        tmp7 = dataptr[DCTSIZE*0] - dataptr[DCTSIZE*7];
+        tmp1 = dataptr[DCTSIZE*1] + dataptr[DCTSIZE*6];
+        tmp6 = dataptr[DCTSIZE*1] - dataptr[DCTSIZE*6];
+        tmp2 = dataptr[DCTSIZE*2] + dataptr[DCTSIZE*5];
+        tmp5 = dataptr[DCTSIZE*2] - dataptr[DCTSIZE*5];
+        tmp3 = dataptr[DCTSIZE*3] + dataptr[DCTSIZE*4];
+        tmp4 = dataptr[DCTSIZE*3] - dataptr[DCTSIZE*4];
+
+        /* Even part */
+
+        tmp10 = tmp0 + tmp3;	/* phase 2 */
+        tmp13 = tmp0 - tmp3;
+        tmp11 = tmp1 + tmp2;
+        tmp12 = tmp1 - tmp2;
+
+        dataptr[DCTSIZE*0] = tmp10 + tmp11; /* phase 3 */
+        dataptr[DCTSIZE*4] = tmp10 - tmp11;
+
+        z1 = MULTIPLY(tmp12 + tmp13, FIX_0_707106781); /* c4 */
+        dataptr[DCTSIZE*2] = tmp13 + z1; /* phase 5 */
+        dataptr[DCTSIZE*6] = tmp13 - z1;
+
+        /* Odd part */
+
+        tmp10 = tmp4 + tmp5;	/* phase 2 */
+        tmp11 = tmp5 + tmp6;
+        tmp12 = tmp6 + tmp7;
+
+        /* The rotator is modified from fig 4-8 to avoid extra negations. */
+        z5 = MULTIPLY(tmp10 - tmp12, FIX_0_382683433); /* c6 */
+        z2 = MULTIPLY(tmp10, FIX_0_541196100) + z5; /* c2-c6 */
+        z4 = MULTIPLY(tmp12, FIX_1_306562965) + z5; /* c2+c6 */
+        z3 = MULTIPLY(tmp11, FIX_0_707106781); /* c4 */
+
+        z11 = tmp7 + z3;		/* phase 5 */
+        z13 = tmp7 - z3;
+
+        dataptr[DCTSIZE*5] = z13 + z2; /* phase 6 */
+        dataptr[DCTSIZE*3] = z13 - z2;
+        dataptr[DCTSIZE*1] = z11 + z4;
+        dataptr[DCTSIZE*7] = z11 - z4;
+
+        dataptr++;			/* advance pointer to next column */
+    }
+}
+
+#endif /* DCT_IFAST_SUPPORTED */
diff -NEaurb neo/renderer/jpeg-8c/jfdctint.c neo/renderer/jpeg-8c/jfdctint.c
--- neo/renderer/jpeg-8c/jfdctint.c	1970-01-01 00:00:00 +0000
+++ neo/renderer/jpeg-8c/jfdctint.c	2012-11-17 01:20:40 +0000
@@ -0,0 +1,4476 @@
+/*
+ * jfdctint.c
+ *
+ * Copyright (C) 1991-1996, Thomas G. Lane.
+ * Modification developed 2003-2009 by Guido Vollbeding.
+ * This file is part of the Independent JPEG Group's software.
+ * For conditions of distribution and use, see the accompanying README file.
+ *
+ * This file contains a slow-but-accurate integer implementation of the
+ * forward DCT (Discrete Cosine Transform).
+ *
+ * A 2-D DCT can be done by 1-D DCT on each row followed by 1-D DCT
+ * on each column.  Direct algorithms are also available, but they are
+ * much more complex and seem not to be any faster when reduced to code.
+ *
+ * This implementation is based on an algorithm described in
+ *   C. Loeffler, A. Ligtenberg and G. Moschytz, "Practical Fast 1-D DCT
+ *   Algorithms with 11 Multiplications", Proc. Int'l. Conf. on Acoustics,
+ *   Speech, and Signal Processing 1989 (ICASSP '89), pp. 988-991.
+ * The primary algorithm described there uses 11 multiplies and 29 adds.
+ * We use their alternate method with 12 multiplies and 32 adds.
+ * The advantage of this method is that no data path contains more than one
+ * multiplication; this allows a very simple and accurate implementation in
+ * scaled fixed-point arithmetic, with a minimal number of shifts.
+ *
+ * We also provide FDCT routines with various input sample block sizes for
+ * direct resolution reduction or enlargement and for direct resolving the
+ * common 2x1 and 1x2 subsampling cases without additional resampling: NxN
+ * (N=1...16), 2NxN, and Nx2N (N=1...8) pixels for one 8x8 output DCT block.
+ *
+ * For N<8 we fill the remaining block coefficients with zero.
+ * For N>8 we apply a partial N-point FDCT on the input samples, computing
+ * just the lower 8 frequency coefficients and discarding the rest.
+ *
+ * We must scale the output coefficients of the N-point FDCT appropriately
+ * to the standard 8-point FDCT level by 8/N per 1-D pass.  This scaling
+ * is folded into the constant multipliers (pass 2) and/or final/initial
+ * shifting.
+ *
+ * CAUTION: We rely on the FIX() macro except for the N=1,2,4,8 cases
+ * since there would be too many additional constants to pre-calculate.
+ */
+
+#define JPEG_INTERNALS
+#include "jinclude.h"
+#include "jpeglib.h"
+#include "jdct.h"		/* Private declarations for DCT subsystem */
+
+#ifdef DCT_ISLOW_SUPPORTED
+
+
+/*
+ * This module is specialized to the case DCTSIZE = 8.
+ */
+
+#if DCTSIZE != 8
+Sorry, this code only copes with 8x8 DCT blocks. /* deliberate syntax err */
+#endif
+
+
+/*
+ * The poop on this scaling stuff is as follows:
+ *
+ * Each 1-D DCT step produces outputs which are a factor of sqrt(N)
+ * larger than the true DCT outputs.  The final outputs are therefore
+ * a factor of N larger than desired; since N=8 this can be cured by
+ * a simple right shift at the end of the algorithm.  The advantage of
+ * this arrangement is that we save two multiplications per 1-D DCT,
+ * because the y0 and y4 outputs need not be divided by sqrt(N).
+ * In the IJG code, this factor of 8 is removed by the quantization step
+ * (in jcdctmgr.c), NOT in this module.
+ *
+ * We have to do addition and subtraction of the integer inputs, which
+ * is no problem, and multiplication by fractional constants, which is
+ * a problem to do in integer arithmetic.  We multiply all the constants
+ * by CONST_SCALE and convert them to integer constants (thus retaining
+ * CONST_BITS bits of precision in the constants).  After doing a
+ * multiplication we have to divide the product by CONST_SCALE, with proper
+ * rounding, to produce the correct output.  This division can be done
+ * cheaply as a right shift of CONST_BITS bits.  We postpone shifting
+ * as long as possible so that partial sums can be added together with
+ * full fractional precision.
+ *
+ * The outputs of the first pass are scaled up by PASS1_BITS bits so that
+ * they are represented to better-than-integral precision.  These outputs
+ * require BITS_IN_JSAMPLE + PASS1_BITS + 3 bits; this fits in a 16-bit word
+ * with the recommended scaling.  (For 12-bit sample data, the intermediate
+ * array is INT32 anyway.)
+ *
+ * To avoid overflow of the 32-bit intermediate results in pass 2, we must
+ * have BITS_IN_JSAMPLE + CONST_BITS + PASS1_BITS <= 26.  Error analysis
+ * shows that the values given below are the most effective.
+ */
+
+#if BITS_IN_JSAMPLE == 8
+#define CONST_BITS  13
+#define PASS1_BITS  2
+#else
+#define CONST_BITS  13
+#define PASS1_BITS  1		/* lose a little precision to avoid overflow */
+#endif
+
+/* Some C compilers fail to reduce "FIX(constant)" at compile time, thus
+ * causing a lot of useless floating-point operations at run time.
+ * To get around this we use the following pre-calculated constants.
+ * If you change CONST_BITS you may want to add appropriate values.
+ * (With a reasonable C compiler, you can just rely on the FIX() macro...)
+ */
+
+#if CONST_BITS == 13
+#define FIX_0_298631336  ((INT32)  2446)	/* FIX(0.298631336) */
+#define FIX_0_390180644  ((INT32)  3196)	/* FIX(0.390180644) */
+#define FIX_0_541196100  ((INT32)  4433)	/* FIX(0.541196100) */
+#define FIX_0_765366865  ((INT32)  6270)	/* FIX(0.765366865) */
+#define FIX_0_899976223  ((INT32)  7373)	/* FIX(0.899976223) */
+#define FIX_1_175875602  ((INT32)  9633)	/* FIX(1.175875602) */
+#define FIX_1_501321110  ((INT32)  12299)	/* FIX(1.501321110) */
+#define FIX_1_847759065  ((INT32)  15137)	/* FIX(1.847759065) */
+#define FIX_1_961570560  ((INT32)  16069)	/* FIX(1.961570560) */
+#define FIX_2_053119869  ((INT32)  16819)	/* FIX(2.053119869) */
+#define FIX_2_562915447  ((INT32)  20995)	/* FIX(2.562915447) */
+#define FIX_3_072711026  ((INT32)  25172)	/* FIX(3.072711026) */
+#else
+#define FIX_0_298631336  FIX(0.298631336)
+#define FIX_0_390180644  FIX(0.390180644)
+#define FIX_0_541196100  FIX(0.541196100)
+#define FIX_0_765366865  FIX(0.765366865)
+#define FIX_0_899976223  FIX(0.899976223)
+#define FIX_1_175875602  FIX(1.175875602)
+#define FIX_1_501321110  FIX(1.501321110)
+#define FIX_1_847759065  FIX(1.847759065)
+#define FIX_1_961570560  FIX(1.961570560)
+#define FIX_2_053119869  FIX(2.053119869)
+#define FIX_2_562915447  FIX(2.562915447)
+#define FIX_3_072711026  FIX(3.072711026)
+#endif
+
+
+/* Multiply an INT32 variable by an INT32 constant to yield an INT32 result.
+ * For 8-bit samples with the recommended scaling, all the variable
+ * and constant values involved are no more than 16 bits wide, so a
+ * 16x16->32 bit multiply can be used instead of a full 32x32 multiply.
+ * For 12-bit samples, a full 32-bit multiplication will be needed.
+ */
+
+#if BITS_IN_JSAMPLE == 8
+#define MULTIPLY(var,const)  MULTIPLY16C16(var,const)
+#else
+#define MULTIPLY(var,const)  ((var) * (const))
+#endif
+
+
+/*
+ * Perform the forward DCT on one block of samples.
+ */
+
+GLOBAL(void)
+jpeg_fdct_islow (DCTELEM * data, JSAMPARRAY sample_data, JDIMENSION start_col)
+{
+    INT32 tmp0, tmp1, tmp2, tmp3;
+    INT32 tmp10, tmp11, tmp12, tmp13;
+    INT32 z1;
+    DCTELEM *dataptr;
+    JSAMPROW elemptr;
+    int ctr;
+    SHIFT_TEMPS
+
+    /* Pass 1: process rows. */
+    /* Note results are scaled up by sqrt(8) compared to a true DCT; */
+    /* furthermore, we scale the results by 2**PASS1_BITS. */
+
+    dataptr = data;
+    for (ctr = 0; ctr < DCTSIZE; ctr++)
+    {
+        elemptr = sample_data[ctr] + start_col;
+
+        /* Even part per LL&M figure 1 --- note that published figure is faulty;
+         * rotator "sqrt(2)*c1" should be "sqrt(2)*c6".
+         */
+
+        tmp0 = GETJSAMPLE(elemptr[0]) + GETJSAMPLE(elemptr[7]);
+        tmp1 = GETJSAMPLE(elemptr[1]) + GETJSAMPLE(elemptr[6]);
+        tmp2 = GETJSAMPLE(elemptr[2]) + GETJSAMPLE(elemptr[5]);
+        tmp3 = GETJSAMPLE(elemptr[3]) + GETJSAMPLE(elemptr[4]);
+
+        tmp10 = tmp0 + tmp3;
+        tmp12 = tmp0 - tmp3;
+        tmp11 = tmp1 + tmp2;
+        tmp13 = tmp1 - tmp2;
+
+        tmp0 = GETJSAMPLE(elemptr[0]) - GETJSAMPLE(elemptr[7]);
+        tmp1 = GETJSAMPLE(elemptr[1]) - GETJSAMPLE(elemptr[6]);
+        tmp2 = GETJSAMPLE(elemptr[2]) - GETJSAMPLE(elemptr[5]);
+        tmp3 = GETJSAMPLE(elemptr[3]) - GETJSAMPLE(elemptr[4]);
+
+        /* Apply unsigned->signed conversion */
+        dataptr[0] = (DCTELEM) ((tmp10 + tmp11 - 8 * CENTERJSAMPLE) << PASS1_BITS);
+        dataptr[4] = (DCTELEM) ((tmp10 - tmp11) << PASS1_BITS);
+
+        z1 = MULTIPLY(tmp12 + tmp13, FIX_0_541196100);
+        /* Add fudge factor here for final descale. */
+        z1 += ONE << (CONST_BITS-PASS1_BITS-1);
+        dataptr[2] = (DCTELEM) RIGHT_SHIFT(z1 + MULTIPLY(tmp12, FIX_0_765366865),
+                                           CONST_BITS-PASS1_BITS);
+        dataptr[6] = (DCTELEM) RIGHT_SHIFT(z1 - MULTIPLY(tmp13, FIX_1_847759065),
+                                           CONST_BITS-PASS1_BITS);
+
+        /* Odd part per figure 8 --- note paper omits factor of sqrt(2).
+         * cK represents sqrt(2) * cos(K*pi/16).
+         * i0..i3 in the paper are tmp0..tmp3 here.
+         */
+
+        tmp10 = tmp0 + tmp3;
+        tmp11 = tmp1 + tmp2;
+        tmp12 = tmp0 + tmp2;
+        tmp13 = tmp1 + tmp3;
+        z1 = MULTIPLY(tmp12 + tmp13, FIX_1_175875602); /*  c3 */
+        /* Add fudge factor here for final descale. */
+        z1 += ONE << (CONST_BITS-PASS1_BITS-1);
+
+        tmp0  = MULTIPLY(tmp0,    FIX_1_501321110);    /*  c1+c3-c5-c7 */
+        tmp1  = MULTIPLY(tmp1,    FIX_3_072711026);    /*  c1+c3+c5-c7 */
+        tmp2  = MULTIPLY(tmp2,    FIX_2_053119869);    /*  c1+c3-c5+c7 */
+        tmp3  = MULTIPLY(tmp3,    FIX_0_298631336);    /* -c1+c3+c5-c7 */
+        tmp10 = MULTIPLY(tmp10, - FIX_0_899976223);    /*  c7-c3 */
+        tmp11 = MULTIPLY(tmp11, - FIX_2_562915447);    /* -c1-c3 */
+        tmp12 = MULTIPLY(tmp12, - FIX_0_390180644);    /*  c5-c3 */
+        tmp13 = MULTIPLY(tmp13, - FIX_1_961570560);    /* -c3-c5 */
+
+        tmp12 += z1;
+        tmp13 += z1;
+
+        dataptr[1] = (DCTELEM)
+                     RIGHT_SHIFT(tmp0 + tmp10 + tmp12, CONST_BITS-PASS1_BITS);
+        dataptr[3] = (DCTELEM)
+                     RIGHT_SHIFT(tmp1 + tmp11 + tmp13, CONST_BITS-PASS1_BITS);
+        dataptr[5] = (DCTELEM)
+                     RIGHT_SHIFT(tmp2 + tmp11 + tmp12, CONST_BITS-PASS1_BITS);
+        dataptr[7] = (DCTELEM)
+                     RIGHT_SHIFT(tmp3 + tmp10 + tmp13, CONST_BITS-PASS1_BITS);
+
+        dataptr += DCTSIZE;		/* advance pointer to next row */
+    }
+
+    /* Pass 2: process columns.
+     * We remove the PASS1_BITS scaling, but leave the results scaled up
+     * by an overall factor of 8.
+     */
+
+    dataptr = data;
+    for (ctr = DCTSIZE-1; ctr >= 0; ctr--)
+    {
+        /* Even part per LL&M figure 1 --- note that published figure is faulty;
+         * rotator "sqrt(2)*c1" should be "sqrt(2)*c6".
+         */
+
+        tmp0 = dataptr[DCTSIZE*0] + dataptr[DCTSIZE*7];
+        tmp1 = dataptr[DCTSIZE*1] + dataptr[DCTSIZE*6];
+        tmp2 = dataptr[DCTSIZE*2] + dataptr[DCTSIZE*5];
+        tmp3 = dataptr[DCTSIZE*3] + dataptr[DCTSIZE*4];
+
+        /* Add fudge factor here for final descale. */
+        tmp10 = tmp0 + tmp3 + (ONE << (PASS1_BITS-1));
+        tmp12 = tmp0 - tmp3;
+        tmp11 = tmp1 + tmp2;
+        tmp13 = tmp1 - tmp2;
+
+        tmp0 = dataptr[DCTSIZE*0] - dataptr[DCTSIZE*7];
+        tmp1 = dataptr[DCTSIZE*1] - dataptr[DCTSIZE*6];
+        tmp2 = dataptr[DCTSIZE*2] - dataptr[DCTSIZE*5];
+        tmp3 = dataptr[DCTSIZE*3] - dataptr[DCTSIZE*4];
+
+        dataptr[DCTSIZE*0] = (DCTELEM) RIGHT_SHIFT(tmp10 + tmp11, PASS1_BITS);
+        dataptr[DCTSIZE*4] = (DCTELEM) RIGHT_SHIFT(tmp10 - tmp11, PASS1_BITS);
+
+        z1 = MULTIPLY(tmp12 + tmp13, FIX_0_541196100);
+        /* Add fudge factor here for final descale. */
+        z1 += ONE << (CONST_BITS+PASS1_BITS-1);
+        dataptr[DCTSIZE*2] = (DCTELEM)
+                             RIGHT_SHIFT(z1 + MULTIPLY(tmp12, FIX_0_765366865), CONST_BITS+PASS1_BITS);
+        dataptr[DCTSIZE*6] = (DCTELEM)
+                             RIGHT_SHIFT(z1 - MULTIPLY(tmp13, FIX_1_847759065), CONST_BITS+PASS1_BITS);
+
+        /* Odd part per figure 8 --- note paper omits factor of sqrt(2).
+         * cK represents sqrt(2) * cos(K*pi/16).
+         * i0..i3 in the paper are tmp0..tmp3 here.
+         */
+
+        tmp10 = tmp0 + tmp3;
+        tmp11 = tmp1 + tmp2;
+        tmp12 = tmp0 + tmp2;
+        tmp13 = tmp1 + tmp3;
+        z1 = MULTIPLY(tmp12 + tmp13, FIX_1_175875602); /*  c3 */
+        /* Add fudge factor here for final descale. */
+        z1 += ONE << (CONST_BITS+PASS1_BITS-1);
+
+        tmp0  = MULTIPLY(tmp0,    FIX_1_501321110);    /*  c1+c3-c5-c7 */
+        tmp1  = MULTIPLY(tmp1,    FIX_3_072711026);    /*  c1+c3+c5-c7 */
+        tmp2  = MULTIPLY(tmp2,    FIX_2_053119869);    /*  c1+c3-c5+c7 */
+        tmp3  = MULTIPLY(tmp3,    FIX_0_298631336);    /* -c1+c3+c5-c7 */
+        tmp10 = MULTIPLY(tmp10, - FIX_0_899976223);    /*  c7-c3 */
+        tmp11 = MULTIPLY(tmp11, - FIX_2_562915447);    /* -c1-c3 */
+        tmp12 = MULTIPLY(tmp12, - FIX_0_390180644);    /*  c5-c3 */
+        tmp13 = MULTIPLY(tmp13, - FIX_1_961570560);    /* -c3-c5 */
+
+        tmp12 += z1;
+        tmp13 += z1;
+
+        dataptr[DCTSIZE*1] = (DCTELEM)
+                             RIGHT_SHIFT(tmp0 + tmp10 + tmp12, CONST_BITS+PASS1_BITS);
+        dataptr[DCTSIZE*3] = (DCTELEM)
+                             RIGHT_SHIFT(tmp1 + tmp11 + tmp13, CONST_BITS+PASS1_BITS);
+        dataptr[DCTSIZE*5] = (DCTELEM)
+                             RIGHT_SHIFT(tmp2 + tmp11 + tmp12, CONST_BITS+PASS1_BITS);
+        dataptr[DCTSIZE*7] = (DCTELEM)
+                             RIGHT_SHIFT(tmp3 + tmp10 + tmp13, CONST_BITS+PASS1_BITS);
+
+        dataptr++;			/* advance pointer to next column */
+    }
+}
+
+#ifdef DCT_SCALING_SUPPORTED
+
+
+/*
+ * Perform the forward DCT on a 7x7 sample block.
+ */
+
+GLOBAL(void)
+jpeg_fdct_7x7 (DCTELEM * data, JSAMPARRAY sample_data, JDIMENSION start_col)
+{
+    INT32 tmp0, tmp1, tmp2, tmp3;
+    INT32 tmp10, tmp11, tmp12;
+    INT32 z1, z2, z3;
+    DCTELEM *dataptr;
+    JSAMPROW elemptr;
+    int ctr;
+    SHIFT_TEMPS
+
+    /* Pre-zero output coefficient block. */
+    MEMZERO(data, SIZEOF(DCTELEM) * DCTSIZE2);
+
+    /* Pass 1: process rows. */
+    /* Note results are scaled up by sqrt(8) compared to a true DCT; */
+    /* furthermore, we scale the results by 2**PASS1_BITS. */
+    /* cK represents sqrt(2) * cos(K*pi/14). */
+
+    dataptr = data;
+    for (ctr = 0; ctr < 7; ctr++)
+    {
+        elemptr = sample_data[ctr] + start_col;
+
+        /* Even part */
+
+        tmp0 = GETJSAMPLE(elemptr[0]) + GETJSAMPLE(elemptr[6]);
+        tmp1 = GETJSAMPLE(elemptr[1]) + GETJSAMPLE(elemptr[5]);
+        tmp2 = GETJSAMPLE(elemptr[2]) + GETJSAMPLE(elemptr[4]);
+        tmp3 = GETJSAMPLE(elemptr[3]);
+
+        tmp10 = GETJSAMPLE(elemptr[0]) - GETJSAMPLE(elemptr[6]);
+        tmp11 = GETJSAMPLE(elemptr[1]) - GETJSAMPLE(elemptr[5]);
+        tmp12 = GETJSAMPLE(elemptr[2]) - GETJSAMPLE(elemptr[4]);
+
+        z1 = tmp0 + tmp2;
+        /* Apply unsigned->signed conversion */
+        dataptr[0] = (DCTELEM)
+                     ((z1 + tmp1 + tmp3 - 7 * CENTERJSAMPLE) << PASS1_BITS);
+        tmp3 += tmp3;
+        z1 -= tmp3;
+        z1 -= tmp3;
+        z1 = MULTIPLY(z1, FIX(0.353553391));                /* (c2+c6-c4)/2 */
+        z2 = MULTIPLY(tmp0 - tmp2, FIX(0.920609002));       /* (c2+c4-c6)/2 */
+        z3 = MULTIPLY(tmp1 - tmp2, FIX(0.314692123));       /* c6 */
+        dataptr[2] = (DCTELEM) DESCALE(z1 + z2 + z3, CONST_BITS-PASS1_BITS);
+        z1 -= z2;
+        z2 = MULTIPLY(tmp0 - tmp1, FIX(0.881747734));       /* c4 */
+        dataptr[4] = (DCTELEM)
+                     DESCALE(z2 + z3 - MULTIPLY(tmp1 - tmp3, FIX(0.707106781)), /* c2+c6-c4 */
+                             CONST_BITS-PASS1_BITS);
+        dataptr[6] = (DCTELEM) DESCALE(z1 + z2, CONST_BITS-PASS1_BITS);
+
+        /* Odd part */
+
+        tmp1 = MULTIPLY(tmp10 + tmp11, FIX(0.935414347));   /* (c3+c1-c5)/2 */
+        tmp2 = MULTIPLY(tmp10 - tmp11, FIX(0.170262339));   /* (c3+c5-c1)/2 */
+        tmp0 = tmp1 - tmp2;
+        tmp1 += tmp2;
+        tmp2 = MULTIPLY(tmp11 + tmp12, - FIX(1.378756276)); /* -c1 */
+        tmp1 += tmp2;
+        tmp3 = MULTIPLY(tmp10 + tmp12, FIX(0.613604268));   /* c5 */
+        tmp0 += tmp3;
+        tmp2 += tmp3 + MULTIPLY(tmp12, FIX(1.870828693));   /* c3+c1-c5 */
+
+        dataptr[1] = (DCTELEM) DESCALE(tmp0, CONST_BITS-PASS1_BITS);
+        dataptr[3] = (DCTELEM) DESCALE(tmp1, CONST_BITS-PASS1_BITS);
+        dataptr[5] = (DCTELEM) DESCALE(tmp2, CONST_BITS-PASS1_BITS);
+
+        dataptr += DCTSIZE;		/* advance pointer to next row */
+    }
+
+    /* Pass 2: process columns.
+     * We remove the PASS1_BITS scaling, but leave the results scaled up
+     * by an overall factor of 8.
+     * We must also scale the output by (8/7)**2 = 64/49, which we fold
+     * into the constant multipliers:
+     * cK now represents sqrt(2) * cos(K*pi/14) * 64/49.
+     */
+
+    dataptr = data;
+    for (ctr = 0; ctr < 7; ctr++)
+    {
+        /* Even part */
+
+        tmp0 = dataptr[DCTSIZE*0] + dataptr[DCTSIZE*6];
+        tmp1 = dataptr[DCTSIZE*1] + dataptr[DCTSIZE*5];
+        tmp2 = dataptr[DCTSIZE*2] + dataptr[DCTSIZE*4];
+        tmp3 = dataptr[DCTSIZE*3];
+
+        tmp10 = dataptr[DCTSIZE*0] - dataptr[DCTSIZE*6];
+        tmp11 = dataptr[DCTSIZE*1] - dataptr[DCTSIZE*5];
+        tmp12 = dataptr[DCTSIZE*2] - dataptr[DCTSIZE*4];
+
+        z1 = tmp0 + tmp2;
+        dataptr[DCTSIZE*0] = (DCTELEM)
+                             DESCALE(MULTIPLY(z1 + tmp1 + tmp3, FIX(1.306122449)), /* 64/49 */
+                                     CONST_BITS+PASS1_BITS);
+        tmp3 += tmp3;
+        z1 -= tmp3;
+        z1 -= tmp3;
+        z1 = MULTIPLY(z1, FIX(0.461784020));                /* (c2+c6-c4)/2 */
+        z2 = MULTIPLY(tmp0 - tmp2, FIX(1.202428084));       /* (c2+c4-c6)/2 */
+        z3 = MULTIPLY(tmp1 - tmp2, FIX(0.411026446));       /* c6 */
+        dataptr[DCTSIZE*2] = (DCTELEM) DESCALE(z1 + z2 + z3, CONST_BITS+PASS1_BITS);
+        z1 -= z2;
+        z2 = MULTIPLY(tmp0 - tmp1, FIX(1.151670509));       /* c4 */
+        dataptr[DCTSIZE*4] = (DCTELEM)
+                             DESCALE(z2 + z3 - MULTIPLY(tmp1 - tmp3, FIX(0.923568041)), /* c2+c6-c4 */
+                                     CONST_BITS+PASS1_BITS);
+        dataptr[DCTSIZE*6] = (DCTELEM) DESCALE(z1 + z2, CONST_BITS+PASS1_BITS);
+
+        /* Odd part */
+
+        tmp1 = MULTIPLY(tmp10 + tmp11, FIX(1.221765677));   /* (c3+c1-c5)/2 */
+        tmp2 = MULTIPLY(tmp10 - tmp11, FIX(0.222383464));   /* (c3+c5-c1)/2 */
+        tmp0 = tmp1 - tmp2;
+        tmp1 += tmp2;
+        tmp2 = MULTIPLY(tmp11 + tmp12, - FIX(1.800824523)); /* -c1 */
+        tmp1 += tmp2;
+        tmp3 = MULTIPLY(tmp10 + tmp12, FIX(0.801442310));   /* c5 */
+        tmp0 += tmp3;
+        tmp2 += tmp3 + MULTIPLY(tmp12, FIX(2.443531355));   /* c3+c1-c5 */
+
+        dataptr[DCTSIZE*1] = (DCTELEM) DESCALE(tmp0, CONST_BITS+PASS1_BITS);
+        dataptr[DCTSIZE*3] = (DCTELEM) DESCALE(tmp1, CONST_BITS+PASS1_BITS);
+        dataptr[DCTSIZE*5] = (DCTELEM) DESCALE(tmp2, CONST_BITS+PASS1_BITS);
+
+        dataptr++;			/* advance pointer to next column */
+    }
+}
+
+
+/*
+ * Perform the forward DCT on a 6x6 sample block.
+ */
+
+GLOBAL(void)
+jpeg_fdct_6x6 (DCTELEM * data, JSAMPARRAY sample_data, JDIMENSION start_col)
+{
+    INT32 tmp0, tmp1, tmp2;
+    INT32 tmp10, tmp11, tmp12;
+    DCTELEM *dataptr;
+    JSAMPROW elemptr;
+    int ctr;
+    SHIFT_TEMPS
+
+    /* Pre-zero output coefficient block. */
+    MEMZERO(data, SIZEOF(DCTELEM) * DCTSIZE2);
+
+    /* Pass 1: process rows. */
+    /* Note results are scaled up by sqrt(8) compared to a true DCT; */
+    /* furthermore, we scale the results by 2**PASS1_BITS. */
+    /* cK represents sqrt(2) * cos(K*pi/12). */
+
+    dataptr = data;
+    for (ctr = 0; ctr < 6; ctr++)
+    {
+        elemptr = sample_data[ctr] + start_col;
+
+        /* Even part */
+
+        tmp0 = GETJSAMPLE(elemptr[0]) + GETJSAMPLE(elemptr[5]);
+        tmp11 = GETJSAMPLE(elemptr[1]) + GETJSAMPLE(elemptr[4]);
+        tmp2 = GETJSAMPLE(elemptr[2]) + GETJSAMPLE(elemptr[3]);
+
+        tmp10 = tmp0 + tmp2;
+        tmp12 = tmp0 - tmp2;
+
+        tmp0 = GETJSAMPLE(elemptr[0]) - GETJSAMPLE(elemptr[5]);
+        tmp1 = GETJSAMPLE(elemptr[1]) - GETJSAMPLE(elemptr[4]);
+        tmp2 = GETJSAMPLE(elemptr[2]) - GETJSAMPLE(elemptr[3]);
+
+        /* Apply unsigned->signed conversion */
+        dataptr[0] = (DCTELEM)
+                     ((tmp10 + tmp11 - 6 * CENTERJSAMPLE) << PASS1_BITS);
+        dataptr[2] = (DCTELEM)
+                     DESCALE(MULTIPLY(tmp12, FIX(1.224744871)),                 /* c2 */
+                             CONST_BITS-PASS1_BITS);
+        dataptr[4] = (DCTELEM)
+                     DESCALE(MULTIPLY(tmp10 - tmp11 - tmp11, FIX(0.707106781)), /* c4 */
+                             CONST_BITS-PASS1_BITS);
+
+        /* Odd part */
+
+        tmp10 = DESCALE(MULTIPLY(tmp0 + tmp2, FIX(0.366025404)),     /* c5 */
+                        CONST_BITS-PASS1_BITS);
+
+        dataptr[1] = (DCTELEM) (tmp10 + ((tmp0 + tmp1) << PASS1_BITS));
+        dataptr[3] = (DCTELEM) ((tmp0 - tmp1 - tmp2) << PASS1_BITS);
+        dataptr[5] = (DCTELEM) (tmp10 + ((tmp2 - tmp1) << PASS1_BITS));
+
+        dataptr += DCTSIZE;		/* advance pointer to next row */
+    }
+
+    /* Pass 2: process columns.
+     * We remove the PASS1_BITS scaling, but leave the results scaled up
+     * by an overall factor of 8.
+     * We must also scale the output by (8/6)**2 = 16/9, which we fold
+     * into the constant multipliers:
+     * cK now represents sqrt(2) * cos(K*pi/12) * 16/9.
+     */
+
+    dataptr = data;
+    for (ctr = 0; ctr < 6; ctr++)
+    {
+        /* Even part */
+
+        tmp0 = dataptr[DCTSIZE*0] + dataptr[DCTSIZE*5];
+        tmp11 = dataptr[DCTSIZE*1] + dataptr[DCTSIZE*4];
+        tmp2 = dataptr[DCTSIZE*2] + dataptr[DCTSIZE*3];
+
+        tmp10 = tmp0 + tmp2;
+        tmp12 = tmp0 - tmp2;
+
+        tmp0 = dataptr[DCTSIZE*0] - dataptr[DCTSIZE*5];
+        tmp1 = dataptr[DCTSIZE*1] - dataptr[DCTSIZE*4];
+        tmp2 = dataptr[DCTSIZE*2] - dataptr[DCTSIZE*3];
+
+        dataptr[DCTSIZE*0] = (DCTELEM)
+                             DESCALE(MULTIPLY(tmp10 + tmp11, FIX(1.777777778)),         /* 16/9 */
+                                     CONST_BITS+PASS1_BITS);
+        dataptr[DCTSIZE*2] = (DCTELEM)
+                             DESCALE(MULTIPLY(tmp12, FIX(2.177324216)),                 /* c2 */
+                                     CONST_BITS+PASS1_BITS);
+        dataptr[DCTSIZE*4] = (DCTELEM)
+                             DESCALE(MULTIPLY(tmp10 - tmp11 - tmp11, FIX(1.257078722)), /* c4 */
+                                     CONST_BITS+PASS1_BITS);
+
+        /* Odd part */
+
+        tmp10 = MULTIPLY(tmp0 + tmp2, FIX(0.650711829));             /* c5 */
+
+        dataptr[DCTSIZE*1] = (DCTELEM)
+                             DESCALE(tmp10 + MULTIPLY(tmp0 + tmp1, FIX(1.777777778)),   /* 16/9 */
+                                     CONST_BITS+PASS1_BITS);
+        dataptr[DCTSIZE*3] = (DCTELEM)
+                             DESCALE(MULTIPLY(tmp0 - tmp1 - tmp2, FIX(1.777777778)),    /* 16/9 */
+                                     CONST_BITS+PASS1_BITS);
+        dataptr[DCTSIZE*5] = (DCTELEM)
+                             DESCALE(tmp10 + MULTIPLY(tmp2 - tmp1, FIX(1.777777778)),   /* 16/9 */
+                                     CONST_BITS+PASS1_BITS);
+
+        dataptr++;			/* advance pointer to next column */
+    }
+}
+
+
+/*
+ * Perform the forward DCT on a 5x5 sample block.
+ */
+
+GLOBAL(void)
+jpeg_fdct_5x5 (DCTELEM * data, JSAMPARRAY sample_data, JDIMENSION start_col)
+{
+    INT32 tmp0, tmp1, tmp2;
+    INT32 tmp10, tmp11;
+    DCTELEM *dataptr;
+    JSAMPROW elemptr;
+    int ctr;
+    SHIFT_TEMPS
+
+    /* Pre-zero output coefficient block. */
+    MEMZERO(data, SIZEOF(DCTELEM) * DCTSIZE2);
+
+    /* Pass 1: process rows. */
+    /* Note results are scaled up by sqrt(8) compared to a true DCT; */
+    /* furthermore, we scale the results by 2**PASS1_BITS. */
+    /* We scale the results further by 2 as part of output adaption */
+    /* scaling for different DCT size. */
+    /* cK represents sqrt(2) * cos(K*pi/10). */
+
+    dataptr = data;
+    for (ctr = 0; ctr < 5; ctr++)
+    {
+        elemptr = sample_data[ctr] + start_col;
+
+        /* Even part */
+
+        tmp0 = GETJSAMPLE(elemptr[0]) + GETJSAMPLE(elemptr[4]);
+        tmp1 = GETJSAMPLE(elemptr[1]) + GETJSAMPLE(elemptr[3]);
+        tmp2 = GETJSAMPLE(elemptr[2]);
+
+        tmp10 = tmp0 + tmp1;
+        tmp11 = tmp0 - tmp1;
+
+        tmp0 = GETJSAMPLE(elemptr[0]) - GETJSAMPLE(elemptr[4]);
+        tmp1 = GETJSAMPLE(elemptr[1]) - GETJSAMPLE(elemptr[3]);
+
+        /* Apply unsigned->signed conversion */
+        dataptr[0] = (DCTELEM)
+                     ((tmp10 + tmp2 - 5 * CENTERJSAMPLE) << (PASS1_BITS+1));
+        tmp11 = MULTIPLY(tmp11, FIX(0.790569415));          /* (c2+c4)/2 */
+        tmp10 -= tmp2 << 2;
+        tmp10 = MULTIPLY(tmp10, FIX(0.353553391));          /* (c2-c4)/2 */
+        dataptr[2] = (DCTELEM) DESCALE(tmp11 + tmp10, CONST_BITS-PASS1_BITS-1);
+        dataptr[4] = (DCTELEM) DESCALE(tmp11 - tmp10, CONST_BITS-PASS1_BITS-1);
+
+        /* Odd part */
+
+        tmp10 = MULTIPLY(tmp0 + tmp1, FIX(0.831253876));    /* c3 */
+
+        dataptr[1] = (DCTELEM)
+                     DESCALE(tmp10 + MULTIPLY(tmp0, FIX(0.513743148)), /* c1-c3 */
+                             CONST_BITS-PASS1_BITS-1);
+        dataptr[3] = (DCTELEM)
+                     DESCALE(tmp10 - MULTIPLY(tmp1, FIX(2.176250899)), /* c1+c3 */
+                             CONST_BITS-PASS1_BITS-1);
+
+        dataptr += DCTSIZE;		/* advance pointer to next row */
+    }
+
+    /* Pass 2: process columns.
+     * We remove the PASS1_BITS scaling, but leave the results scaled up
+     * by an overall factor of 8.
+     * We must also scale the output by (8/5)**2 = 64/25, which we partially
+     * fold into the constant multipliers (other part was done in pass 1):
+     * cK now represents sqrt(2) * cos(K*pi/10) * 32/25.
+     */
+
+    dataptr = data;
+    for (ctr = 0; ctr < 5; ctr++)
+    {
+        /* Even part */
+
+        tmp0 = dataptr[DCTSIZE*0] + dataptr[DCTSIZE*4];
+        tmp1 = dataptr[DCTSIZE*1] + dataptr[DCTSIZE*3];
+        tmp2 = dataptr[DCTSIZE*2];
+
+        tmp10 = tmp0 + tmp1;
+        tmp11 = tmp0 - tmp1;
+
+        tmp0 = dataptr[DCTSIZE*0] - dataptr[DCTSIZE*4];
+        tmp1 = dataptr[DCTSIZE*1] - dataptr[DCTSIZE*3];
+
+        dataptr[DCTSIZE*0] = (DCTELEM)
+                             DESCALE(MULTIPLY(tmp10 + tmp2, FIX(1.28)),        /* 32/25 */
+                                     CONST_BITS+PASS1_BITS);
+        tmp11 = MULTIPLY(tmp11, FIX(1.011928851));          /* (c2+c4)/2 */
+        tmp10 -= tmp2 << 2;
+        tmp10 = MULTIPLY(tmp10, FIX(0.452548340));          /* (c2-c4)/2 */
+        dataptr[DCTSIZE*2] = (DCTELEM) DESCALE(tmp11 + tmp10, CONST_BITS+PASS1_BITS);
+        dataptr[DCTSIZE*4] = (DCTELEM) DESCALE(tmp11 - tmp10, CONST_BITS+PASS1_BITS);
+
+        /* Odd part */
+
+        tmp10 = MULTIPLY(tmp0 + tmp1, FIX(1.064004961));    /* c3 */
+
+        dataptr[DCTSIZE*1] = (DCTELEM)
+                             DESCALE(tmp10 + MULTIPLY(tmp0, FIX(0.657591230)), /* c1-c3 */
+                                     CONST_BITS+PASS1_BITS);
+        dataptr[DCTSIZE*3] = (DCTELEM)
+                             DESCALE(tmp10 - MULTIPLY(tmp1, FIX(2.785601151)), /* c1+c3 */
+                                     CONST_BITS+PASS1_BITS);
+
+        dataptr++;			/* advance pointer to next column */
+    }
+}
+
+
+/*
+ * Perform the forward DCT on a 4x4 sample block.
+ */
+
+GLOBAL(void)
+jpeg_fdct_4x4 (DCTELEM * data, JSAMPARRAY sample_data, JDIMENSION start_col)
+{
+    INT32 tmp0, tmp1;
+    INT32 tmp10, tmp11;
+    DCTELEM *dataptr;
+    JSAMPROW elemptr;
+    int ctr;
+    SHIFT_TEMPS
+
+    /* Pre-zero output coefficient block. */
+    MEMZERO(data, SIZEOF(DCTELEM) * DCTSIZE2);
+
+    /* Pass 1: process rows. */
+    /* Note results are scaled up by sqrt(8) compared to a true DCT; */
+    /* furthermore, we scale the results by 2**PASS1_BITS. */
+    /* We must also scale the output by (8/4)**2 = 2**2, which we add here. */
+    /* cK represents sqrt(2) * cos(K*pi/16) [refers to 8-point FDCT]. */
+
+    dataptr = data;
+    for (ctr = 0; ctr < 4; ctr++)
+    {
+        elemptr = sample_data[ctr] + start_col;
+
+        /* Even part */
+
+        tmp0 = GETJSAMPLE(elemptr[0]) + GETJSAMPLE(elemptr[3]);
+        tmp1 = GETJSAMPLE(elemptr[1]) + GETJSAMPLE(elemptr[2]);
+
+        tmp10 = GETJSAMPLE(elemptr[0]) - GETJSAMPLE(elemptr[3]);
+        tmp11 = GETJSAMPLE(elemptr[1]) - GETJSAMPLE(elemptr[2]);
+
+        /* Apply unsigned->signed conversion */
+        dataptr[0] = (DCTELEM)
+                     ((tmp0 + tmp1 - 4 * CENTERJSAMPLE) << (PASS1_BITS+2));
+        dataptr[2] = (DCTELEM) ((tmp0 - tmp1) << (PASS1_BITS+2));
+
+        /* Odd part */
+
+        tmp0 = MULTIPLY(tmp10 + tmp11, FIX_0_541196100);       /* c6 */
+        /* Add fudge factor here for final descale. */
+        tmp0 += ONE << (CONST_BITS-PASS1_BITS-3);
+
+        dataptr[1] = (DCTELEM)
+                     RIGHT_SHIFT(tmp0 + MULTIPLY(tmp10, FIX_0_765366865), /* c2-c6 */
+                                 CONST_BITS-PASS1_BITS-2);
+        dataptr[3] = (DCTELEM)
+                     RIGHT_SHIFT(tmp0 - MULTIPLY(tmp11, FIX_1_847759065), /* c2+c6 */
+                                 CONST_BITS-PASS1_BITS-2);
+
+        dataptr += DCTSIZE;		/* advance pointer to next row */
+    }
+
+    /* Pass 2: process columns.
+     * We remove the PASS1_BITS scaling, but leave the results scaled up
+     * by an overall factor of 8.
+     */
+
+    dataptr = data;
+    for (ctr = 0; ctr < 4; ctr++)
+    {
+        /* Even part */
+
+        /* Add fudge factor here for final descale. */
+        tmp0 = dataptr[DCTSIZE*0] + dataptr[DCTSIZE*3] + (ONE << (PASS1_BITS-1));
+        tmp1 = dataptr[DCTSIZE*1] + dataptr[DCTSIZE*2];
+
+        tmp10 = dataptr[DCTSIZE*0] - dataptr[DCTSIZE*3];
+        tmp11 = dataptr[DCTSIZE*1] - dataptr[DCTSIZE*2];
+
+        dataptr[DCTSIZE*0] = (DCTELEM) RIGHT_SHIFT(tmp0 + tmp1, PASS1_BITS);
+        dataptr[DCTSIZE*2] = (DCTELEM) RIGHT_SHIFT(tmp0 - tmp1, PASS1_BITS);
+
+        /* Odd part */
+
+        tmp0 = MULTIPLY(tmp10 + tmp11, FIX_0_541196100);       /* c6 */
+        /* Add fudge factor here for final descale. */
+        tmp0 += ONE << (CONST_BITS+PASS1_BITS-1);
+
+        dataptr[DCTSIZE*1] = (DCTELEM)
+                             RIGHT_SHIFT(tmp0 + MULTIPLY(tmp10, FIX_0_765366865), /* c2-c6 */
+                                         CONST_BITS+PASS1_BITS);
+        dataptr[DCTSIZE*3] = (DCTELEM)
+                             RIGHT_SHIFT(tmp0 - MULTIPLY(tmp11, FIX_1_847759065), /* c2+c6 */
+                                         CONST_BITS+PASS1_BITS);
+
+        dataptr++;			/* advance pointer to next column */
+    }
+}
+
+
+/*
+ * Perform the forward DCT on a 3x3 sample block.
+ */
+
+GLOBAL(void)
+jpeg_fdct_3x3 (DCTELEM * data, JSAMPARRAY sample_data, JDIMENSION start_col)
+{
+    INT32 tmp0, tmp1, tmp2;
+    DCTELEM *dataptr;
+    JSAMPROW elemptr;
+    int ctr;
+    SHIFT_TEMPS
+
+    /* Pre-zero output coefficient block. */
+    MEMZERO(data, SIZEOF(DCTELEM) * DCTSIZE2);
+
+    /* Pass 1: process rows. */
+    /* Note results are scaled up by sqrt(8) compared to a true DCT; */
+    /* furthermore, we scale the results by 2**PASS1_BITS. */
+    /* We scale the results further by 2**2 as part of output adaption */
+    /* scaling for different DCT size. */
+    /* cK represents sqrt(2) * cos(K*pi/6). */
+
+    dataptr = data;
+    for (ctr = 0; ctr < 3; ctr++)
+    {
+        elemptr = sample_data[ctr] + start_col;
+
+        /* Even part */
+
+        tmp0 = GETJSAMPLE(elemptr[0]) + GETJSAMPLE(elemptr[2]);
+        tmp1 = GETJSAMPLE(elemptr[1]);
+
+        tmp2 = GETJSAMPLE(elemptr[0]) - GETJSAMPLE(elemptr[2]);
+
+        /* Apply unsigned->signed conversion */
+        dataptr[0] = (DCTELEM)
+                     ((tmp0 + tmp1 - 3 * CENTERJSAMPLE) << (PASS1_BITS+2));
+        dataptr[2] = (DCTELEM)
+                     DESCALE(MULTIPLY(tmp0 - tmp1 - tmp1, FIX(0.707106781)), /* c2 */
+                             CONST_BITS-PASS1_BITS-2);
+
+        /* Odd part */
+
+        dataptr[1] = (DCTELEM)
+                     DESCALE(MULTIPLY(tmp2, FIX(1.224744871)),               /* c1 */
+                             CONST_BITS-PASS1_BITS-2);
+
+        dataptr += DCTSIZE;		/* advance pointer to next row */
+    }
+
+    /* Pass 2: process columns.
+     * We remove the PASS1_BITS scaling, but leave the results scaled up
+     * by an overall factor of 8.
+     * We must also scale the output by (8/3)**2 = 64/9, which we partially
+     * fold into the constant multipliers (other part was done in pass 1):
+     * cK now represents sqrt(2) * cos(K*pi/6) * 16/9.
+     */
+
+    dataptr = data;
+    for (ctr = 0; ctr < 3; ctr++)
+    {
+        /* Even part */
+
+        tmp0 = dataptr[DCTSIZE*0] + dataptr[DCTSIZE*2];
+        tmp1 = dataptr[DCTSIZE*1];
+
+        tmp2 = dataptr[DCTSIZE*0] - dataptr[DCTSIZE*2];
+
+        dataptr[DCTSIZE*0] = (DCTELEM)
+                             DESCALE(MULTIPLY(tmp0 + tmp1, FIX(1.777777778)),        /* 16/9 */
+                                     CONST_BITS+PASS1_BITS);
+        dataptr[DCTSIZE*2] = (DCTELEM)
+                             DESCALE(MULTIPLY(tmp0 - tmp1 - tmp1, FIX(1.257078722)), /* c2 */
+                                     CONST_BITS+PASS1_BITS);
+
+        /* Odd part */
+
+        dataptr[DCTSIZE*1] = (DCTELEM)
+                             DESCALE(MULTIPLY(tmp2, FIX(2.177324216)),               /* c1 */
+                                     CONST_BITS+PASS1_BITS);
+
+        dataptr++;			/* advance pointer to next column */
+    }
+}
+
+
+/*
+ * Perform the forward DCT on a 2x2 sample block.
+ */
+
+GLOBAL(void)
+jpeg_fdct_2x2 (DCTELEM * data, JSAMPARRAY sample_data, JDIMENSION start_col)
+{
+    INT32 tmp0, tmp1, tmp2, tmp3;
+    JSAMPROW elemptr;
+
+    /* Pre-zero output coefficient block. */
+    MEMZERO(data, SIZEOF(DCTELEM) * DCTSIZE2);
+
+    /* Pass 1: process rows. */
+    /* Note results are scaled up by sqrt(8) compared to a true DCT. */
+
+    /* Row 0 */
+    elemptr = sample_data[0] + start_col;
+
+    tmp0 = GETJSAMPLE(elemptr[0]) + GETJSAMPLE(elemptr[1]);
+    tmp1 = GETJSAMPLE(elemptr[0]) - GETJSAMPLE(elemptr[1]);
+
+    /* Row 1 */
+    elemptr = sample_data[1] + start_col;
+
+    tmp2 = GETJSAMPLE(elemptr[0]) + GETJSAMPLE(elemptr[1]);
+    tmp3 = GETJSAMPLE(elemptr[0]) - GETJSAMPLE(elemptr[1]);
+
+    /* Pass 2: process columns.
+     * We leave the results scaled up by an overall factor of 8.
+     * We must also scale the output by (8/2)**2 = 2**4.
+     */
+
+    /* Column 0 */
+    /* Apply unsigned->signed conversion */
+    data[DCTSIZE*0] = (DCTELEM) ((tmp0 + tmp2 - 4 * CENTERJSAMPLE) << 4);
+    data[DCTSIZE*1] = (DCTELEM) ((tmp0 - tmp2) << 4);
+
+    /* Column 1 */
+    data[DCTSIZE*0+1] = (DCTELEM) ((tmp1 + tmp3) << 4);
+    data[DCTSIZE*1+1] = (DCTELEM) ((tmp1 - tmp3) << 4);
+}
+
+
+/*
+ * Perform the forward DCT on a 1x1 sample block.
+ */
+
+GLOBAL(void)
+jpeg_fdct_1x1 (DCTELEM * data, JSAMPARRAY sample_data, JDIMENSION start_col)
+{
+    /* Pre-zero output coefficient block. */
+    MEMZERO(data, SIZEOF(DCTELEM) * DCTSIZE2);
+
+    /* We leave the result scaled up by an overall factor of 8. */
+    /* We must also scale the output by (8/1)**2 = 2**6. */
+    /* Apply unsigned->signed conversion */
+    data[0] = (DCTELEM)
+              ((GETJSAMPLE(sample_data[0][start_col]) - CENTERJSAMPLE) << 6);
+}
+
+
+/*
+ * Perform the forward DCT on a 9x9 sample block.
+ */
+
+GLOBAL(void)
+jpeg_fdct_9x9 (DCTELEM * data, JSAMPARRAY sample_data, JDIMENSION start_col)
+{
+    INT32 tmp0, tmp1, tmp2, tmp3, tmp4;
+    INT32 tmp10, tmp11, tmp12, tmp13;
+    INT32 z1, z2;
+    DCTELEM workspace[8];
+    DCTELEM *dataptr;
+    DCTELEM *wsptr;
+    JSAMPROW elemptr;
+    int ctr;
+    SHIFT_TEMPS
+
+    /* Pass 1: process rows. */
+    /* Note results are scaled up by sqrt(8) compared to a true DCT; */
+    /* we scale the results further by 2 as part of output adaption */
+    /* scaling for different DCT size. */
+    /* cK represents sqrt(2) * cos(K*pi/18). */
+
+    dataptr = data;
+    ctr = 0;
+    for (;;)
+    {
+        elemptr = sample_data[ctr] + start_col;
+
+        /* Even part */
+
+        tmp0 = GETJSAMPLE(elemptr[0]) + GETJSAMPLE(elemptr[8]);
+        tmp1 = GETJSAMPLE(elemptr[1]) + GETJSAMPLE(elemptr[7]);
+        tmp2 = GETJSAMPLE(elemptr[2]) + GETJSAMPLE(elemptr[6]);
+        tmp3 = GETJSAMPLE(elemptr[3]) + GETJSAMPLE(elemptr[5]);
+        tmp4 = GETJSAMPLE(elemptr[4]);
+
+        tmp10 = GETJSAMPLE(elemptr[0]) - GETJSAMPLE(elemptr[8]);
+        tmp11 = GETJSAMPLE(elemptr[1]) - GETJSAMPLE(elemptr[7]);
+        tmp12 = GETJSAMPLE(elemptr[2]) - GETJSAMPLE(elemptr[6]);
+        tmp13 = GETJSAMPLE(elemptr[3]) - GETJSAMPLE(elemptr[5]);
+
+        z1 = tmp0 + tmp2 + tmp3;
+        z2 = tmp1 + tmp4;
+        /* Apply unsigned->signed conversion */
+        dataptr[0] = (DCTELEM) ((z1 + z2 - 9 * CENTERJSAMPLE) << 1);
+        dataptr[6] = (DCTELEM)
+                     DESCALE(MULTIPLY(z1 - z2 - z2, FIX(0.707106781)),  /* c6 */
+                             CONST_BITS-1);
+        z1 = MULTIPLY(tmp0 - tmp2, FIX(1.328926049));        /* c2 */
+        z2 = MULTIPLY(tmp1 - tmp4 - tmp4, FIX(0.707106781)); /* c6 */
+        dataptr[2] = (DCTELEM)
+                     DESCALE(MULTIPLY(tmp2 - tmp3, FIX(1.083350441))    /* c4 */
+                             + z1 + z2, CONST_BITS-1);
+        dataptr[4] = (DCTELEM)
+                     DESCALE(MULTIPLY(tmp3 - tmp0, FIX(0.245575608))    /* c8 */
+                             + z1 - z2, CONST_BITS-1);
+
+        /* Odd part */
+
+        dataptr[3] = (DCTELEM)
+                     DESCALE(MULTIPLY(tmp10 - tmp12 - tmp13, FIX(1.224744871)), /* c3 */
+                             CONST_BITS-1);
+
+        tmp11 = MULTIPLY(tmp11, FIX(1.224744871));        /* c3 */
+        tmp0 = MULTIPLY(tmp10 + tmp12, FIX(0.909038955)); /* c5 */
+        tmp1 = MULTIPLY(tmp10 + tmp13, FIX(0.483689525)); /* c7 */
+
+        dataptr[1] = (DCTELEM) DESCALE(tmp11 + tmp0 + tmp1, CONST_BITS-1);
+
+        tmp2 = MULTIPLY(tmp12 - tmp13, FIX(1.392728481)); /* c1 */
+
+        dataptr[5] = (DCTELEM) DESCALE(tmp0 - tmp11 - tmp2, CONST_BITS-1);
+        dataptr[7] = (DCTELEM) DESCALE(tmp1 - tmp11 + tmp2, CONST_BITS-1);
+
+        ctr++;
+
+        if (ctr != DCTSIZE)
+        {
+            if (ctr == 9)
+            {
+                break;    /* Done. */
+            }
+            dataptr += DCTSIZE;	/* advance pointer to next row */
+        }
+        else
+        {
+            dataptr = workspace;    /* switch pointer to extended workspace */
+        }
+    }
+
+    /* Pass 2: process columns.
+     * We leave the results scaled up by an overall factor of 8.
+     * We must also scale the output by (8/9)**2 = 64/81, which we partially
+     * fold into the constant multipliers and final/initial shifting:
+     * cK now represents sqrt(2) * cos(K*pi/18) * 128/81.
+     */
+
+    dataptr = data;
+    wsptr = workspace;
+    for (ctr = DCTSIZE-1; ctr >= 0; ctr--)
+    {
+        /* Even part */
+
+        tmp0 = dataptr[DCTSIZE*0] + wsptr[DCTSIZE*0];
+        tmp1 = dataptr[DCTSIZE*1] + dataptr[DCTSIZE*7];
+        tmp2 = dataptr[DCTSIZE*2] + dataptr[DCTSIZE*6];
+        tmp3 = dataptr[DCTSIZE*3] + dataptr[DCTSIZE*5];
+        tmp4 = dataptr[DCTSIZE*4];
+
+        tmp10 = dataptr[DCTSIZE*0] - wsptr[DCTSIZE*0];
+        tmp11 = dataptr[DCTSIZE*1] - dataptr[DCTSIZE*7];
+        tmp12 = dataptr[DCTSIZE*2] - dataptr[DCTSIZE*6];
+        tmp13 = dataptr[DCTSIZE*3] - dataptr[DCTSIZE*5];
+
+        z1 = tmp0 + tmp2 + tmp3;
+        z2 = tmp1 + tmp4;
+        dataptr[DCTSIZE*0] = (DCTELEM)
+                             DESCALE(MULTIPLY(z1 + z2, FIX(1.580246914)),       /* 128/81 */
+                                     CONST_BITS+2);
+        dataptr[DCTSIZE*6] = (DCTELEM)
+                             DESCALE(MULTIPLY(z1 - z2 - z2, FIX(1.117403309)),  /* c6 */
+                                     CONST_BITS+2);
+        z1 = MULTIPLY(tmp0 - tmp2, FIX(2.100031287));        /* c2 */
+        z2 = MULTIPLY(tmp1 - tmp4 - tmp4, FIX(1.117403309)); /* c6 */
+        dataptr[DCTSIZE*2] = (DCTELEM)
+                             DESCALE(MULTIPLY(tmp2 - tmp3, FIX(1.711961190))    /* c4 */
+                                     + z1 + z2, CONST_BITS+2);
+        dataptr[DCTSIZE*4] = (DCTELEM)
+                             DESCALE(MULTIPLY(tmp3 - tmp0, FIX(0.388070096))    /* c8 */
+                                     + z1 - z2, CONST_BITS+2);
+
+        /* Odd part */
+
+        dataptr[DCTSIZE*3] = (DCTELEM)
+                             DESCALE(MULTIPLY(tmp10 - tmp12 - tmp13, FIX(1.935399303)), /* c3 */
+                                     CONST_BITS+2);
+
+        tmp11 = MULTIPLY(tmp11, FIX(1.935399303));        /* c3 */
+        tmp0 = MULTIPLY(tmp10 + tmp12, FIX(1.436506004)); /* c5 */
+        tmp1 = MULTIPLY(tmp10 + tmp13, FIX(0.764348879)); /* c7 */
+
+        dataptr[DCTSIZE*1] = (DCTELEM)
+                             DESCALE(tmp11 + tmp0 + tmp1, CONST_BITS+2);
+
+        tmp2 = MULTIPLY(tmp12 - tmp13, FIX(2.200854883)); /* c1 */
+
+        dataptr[DCTSIZE*5] = (DCTELEM)
+                             DESCALE(tmp0 - tmp11 - tmp2, CONST_BITS+2);
+        dataptr[DCTSIZE*7] = (DCTELEM)
+                             DESCALE(tmp1 - tmp11 + tmp2, CONST_BITS+2);
+
+        dataptr++;			/* advance pointer to next column */
+        wsptr++;			/* advance pointer to next column */
+    }
+}
+
+
+/*
+ * Perform the forward DCT on a 10x10 sample block.
+ */
+
+GLOBAL(void)
+jpeg_fdct_10x10 (DCTELEM * data, JSAMPARRAY sample_data, JDIMENSION start_col)
+{
+    INT32 tmp0, tmp1, tmp2, tmp3, tmp4;
+    INT32 tmp10, tmp11, tmp12, tmp13, tmp14;
+    DCTELEM workspace[8*2];
+    DCTELEM *dataptr;
+    DCTELEM *wsptr;
+    JSAMPROW elemptr;
+    int ctr;
+    SHIFT_TEMPS
+
+    /* Pass 1: process rows. */
+    /* Note results are scaled up by sqrt(8) compared to a true DCT; */
+    /* we scale the results further by 2 as part of output adaption */
+    /* scaling for different DCT size. */
+    /* cK represents sqrt(2) * cos(K*pi/20). */
+
+    dataptr = data;
+    ctr = 0;
+    for (;;)
+    {
+        elemptr = sample_data[ctr] + start_col;
+
+        /* Even part */
+
+        tmp0 = GETJSAMPLE(elemptr[0]) + GETJSAMPLE(elemptr[9]);
+        tmp1 = GETJSAMPLE(elemptr[1]) + GETJSAMPLE(elemptr[8]);
+        tmp12 = GETJSAMPLE(elemptr[2]) + GETJSAMPLE(elemptr[7]);
+        tmp3 = GETJSAMPLE(elemptr[3]) + GETJSAMPLE(elemptr[6]);
+        tmp4 = GETJSAMPLE(elemptr[4]) + GETJSAMPLE(elemptr[5]);
+
+        tmp10 = tmp0 + tmp4;
+        tmp13 = tmp0 - tmp4;
+        tmp11 = tmp1 + tmp3;
+        tmp14 = tmp1 - tmp3;
+
+        tmp0 = GETJSAMPLE(elemptr[0]) - GETJSAMPLE(elemptr[9]);
+        tmp1 = GETJSAMPLE(elemptr[1]) - GETJSAMPLE(elemptr[8]);
+        tmp2 = GETJSAMPLE(elemptr[2]) - GETJSAMPLE(elemptr[7]);
+        tmp3 = GETJSAMPLE(elemptr[3]) - GETJSAMPLE(elemptr[6]);
+        tmp4 = GETJSAMPLE(elemptr[4]) - GETJSAMPLE(elemptr[5]);
+
+        /* Apply unsigned->signed conversion */
+        dataptr[0] = (DCTELEM)
+                     ((tmp10 + tmp11 + tmp12 - 10 * CENTERJSAMPLE) << 1);
+        tmp12 += tmp12;
+        dataptr[4] = (DCTELEM)
+                     DESCALE(MULTIPLY(tmp10 - tmp12, FIX(1.144122806)) - /* c4 */
+                             MULTIPLY(tmp11 - tmp12, FIX(0.437016024)),  /* c8 */
+                             CONST_BITS-1);
+        tmp10 = MULTIPLY(tmp13 + tmp14, FIX(0.831253876));    /* c6 */
+        dataptr[2] = (DCTELEM)
+                     DESCALE(tmp10 + MULTIPLY(tmp13, FIX(0.513743148)),  /* c2-c6 */
+                             CONST_BITS-1);
+        dataptr[6] = (DCTELEM)
+                     DESCALE(tmp10 - MULTIPLY(tmp14, FIX(2.176250899)),  /* c2+c6 */
+                             CONST_BITS-1);
+
+        /* Odd part */
+
+        tmp10 = tmp0 + tmp4;
+        tmp11 = tmp1 - tmp3;
+        dataptr[5] = (DCTELEM) ((tmp10 - tmp11 - tmp2) << 1);
+        tmp2 <<= CONST_BITS;
+        dataptr[1] = (DCTELEM)
+                     DESCALE(MULTIPLY(tmp0, FIX(1.396802247)) +          /* c1 */
+                             MULTIPLY(tmp1, FIX(1.260073511)) + tmp2 +   /* c3 */
+                             MULTIPLY(tmp3, FIX(0.642039522)) +          /* c7 */
+                             MULTIPLY(tmp4, FIX(0.221231742)),           /* c9 */
+                             CONST_BITS-1);
+        tmp12 = MULTIPLY(tmp0 - tmp4, FIX(0.951056516)) -     /* (c3+c7)/2 */
+                MULTIPLY(tmp1 + tmp3, FIX(0.587785252));      /* (c1-c9)/2 */
+        tmp13 = MULTIPLY(tmp10 + tmp11, FIX(0.309016994)) +   /* (c3-c7)/2 */
+                (tmp11 << (CONST_BITS - 1)) - tmp2;
+        dataptr[3] = (DCTELEM) DESCALE(tmp12 + tmp13, CONST_BITS-1);
+        dataptr[7] = (DCTELEM) DESCALE(tmp12 - tmp13, CONST_BITS-1);
+
+        ctr++;
+
+        if (ctr != DCTSIZE)
+        {
+            if (ctr == 10)
+            {
+                break;    /* Done. */
+            }
+            dataptr += DCTSIZE;	/* advance pointer to next row */
+        }
+        else
+        {
+            dataptr = workspace;    /* switch pointer to extended workspace */
+        }
+    }
+
+    /* Pass 2: process columns.
+     * We leave the results scaled up by an overall factor of 8.
+     * We must also scale the output by (8/10)**2 = 16/25, which we partially
+     * fold into the constant multipliers and final/initial shifting:
+     * cK now represents sqrt(2) * cos(K*pi/20) * 32/25.
+     */
+
+    dataptr = data;
+    wsptr = workspace;
+    for (ctr = DCTSIZE-1; ctr >= 0; ctr--)
+    {
+        /* Even part */
+
+        tmp0 = dataptr[DCTSIZE*0] + wsptr[DCTSIZE*1];
+        tmp1 = dataptr[DCTSIZE*1] + wsptr[DCTSIZE*0];
+        tmp12 = dataptr[DCTSIZE*2] + dataptr[DCTSIZE*7];
+        tmp3 = dataptr[DCTSIZE*3] + dataptr[DCTSIZE*6];
+        tmp4 = dataptr[DCTSIZE*4] + dataptr[DCTSIZE*5];
+
+        tmp10 = tmp0 + tmp4;
+        tmp13 = tmp0 - tmp4;
+        tmp11 = tmp1 + tmp3;
+        tmp14 = tmp1 - tmp3;
+
+        tmp0 = dataptr[DCTSIZE*0] - wsptr[DCTSIZE*1];
+        tmp1 = dataptr[DCTSIZE*1] - wsptr[DCTSIZE*0];
+        tmp2 = dataptr[DCTSIZE*2] - dataptr[DCTSIZE*7];
+        tmp3 = dataptr[DCTSIZE*3] - dataptr[DCTSIZE*6];
+        tmp4 = dataptr[DCTSIZE*4] - dataptr[DCTSIZE*5];
+
+        dataptr[DCTSIZE*0] = (DCTELEM)
+                             DESCALE(MULTIPLY(tmp10 + tmp11 + tmp12, FIX(1.28)), /* 32/25 */
+                                     CONST_BITS+2);
+        tmp12 += tmp12;
+        dataptr[DCTSIZE*4] = (DCTELEM)
+                             DESCALE(MULTIPLY(tmp10 - tmp12, FIX(1.464477191)) - /* c4 */
+                                     MULTIPLY(tmp11 - tmp12, FIX(0.559380511)),  /* c8 */
+                                     CONST_BITS+2);
+        tmp10 = MULTIPLY(tmp13 + tmp14, FIX(1.064004961));    /* c6 */
+        dataptr[DCTSIZE*2] = (DCTELEM)
+                             DESCALE(tmp10 + MULTIPLY(tmp13, FIX(0.657591230)),  /* c2-c6 */
+                                     CONST_BITS+2);
+        dataptr[DCTSIZE*6] = (DCTELEM)
+                             DESCALE(tmp10 - MULTIPLY(tmp14, FIX(2.785601151)),  /* c2+c6 */
+                                     CONST_BITS+2);
+
+        /* Odd part */
+
+        tmp10 = tmp0 + tmp4;
+        tmp11 = tmp1 - tmp3;
+        dataptr[DCTSIZE*5] = (DCTELEM)
+                             DESCALE(MULTIPLY(tmp10 - tmp11 - tmp2, FIX(1.28)),  /* 32/25 */
+                                     CONST_BITS+2);
+        tmp2 = MULTIPLY(tmp2, FIX(1.28));                     /* 32/25 */
+        dataptr[DCTSIZE*1] = (DCTELEM)
+                             DESCALE(MULTIPLY(tmp0, FIX(1.787906876)) +          /* c1 */
+                                     MULTIPLY(tmp1, FIX(1.612894094)) + tmp2 +   /* c3 */
+                                     MULTIPLY(tmp3, FIX(0.821810588)) +          /* c7 */
+                                     MULTIPLY(tmp4, FIX(0.283176630)),           /* c9 */
+                                     CONST_BITS+2);
+        tmp12 = MULTIPLY(tmp0 - tmp4, FIX(1.217352341)) -     /* (c3+c7)/2 */
+                MULTIPLY(tmp1 + tmp3, FIX(0.752365123));      /* (c1-c9)/2 */
+        tmp13 = MULTIPLY(tmp10 + tmp11, FIX(0.395541753)) +   /* (c3-c7)/2 */
+                MULTIPLY(tmp11, FIX(0.64)) - tmp2;            /* 16/25 */
+        dataptr[DCTSIZE*3] = (DCTELEM) DESCALE(tmp12 + tmp13, CONST_BITS+2);
+        dataptr[DCTSIZE*7] = (DCTELEM) DESCALE(tmp12 - tmp13, CONST_BITS+2);
+
+        dataptr++;			/* advance pointer to next column */
+        wsptr++;			/* advance pointer to next column */
+    }
+}
+
+
+/*
+ * Perform the forward DCT on an 11x11 sample block.
+ */
+
+GLOBAL(void)
+jpeg_fdct_11x11 (DCTELEM * data, JSAMPARRAY sample_data, JDIMENSION start_col)
+{
+    INT32 tmp0, tmp1, tmp2, tmp3, tmp4, tmp5;
+    INT32 tmp10, tmp11, tmp12, tmp13, tmp14;
+    INT32 z1, z2, z3;
+    DCTELEM workspace[8*3];
+    DCTELEM *dataptr;
+    DCTELEM *wsptr;
+    JSAMPROW elemptr;
+    int ctr;
+    SHIFT_TEMPS
+
+    /* Pass 1: process rows. */
+    /* Note results are scaled up by sqrt(8) compared to a true DCT; */
+    /* we scale the results further by 2 as part of output adaption */
+    /* scaling for different DCT size. */
+    /* cK represents sqrt(2) * cos(K*pi/22). */
+
+    dataptr = data;
+    ctr = 0;
+    for (;;)
+    {
+        elemptr = sample_data[ctr] + start_col;
+
+        /* Even part */
+
+        tmp0 = GETJSAMPLE(elemptr[0]) + GETJSAMPLE(elemptr[10]);
+        tmp1 = GETJSAMPLE(elemptr[1]) + GETJSAMPLE(elemptr[9]);
+        tmp2 = GETJSAMPLE(elemptr[2]) + GETJSAMPLE(elemptr[8]);
+        tmp3 = GETJSAMPLE(elemptr[3]) + GETJSAMPLE(elemptr[7]);
+        tmp4 = GETJSAMPLE(elemptr[4]) + GETJSAMPLE(elemptr[6]);
+        tmp5 = GETJSAMPLE(elemptr[5]);
+
+        tmp10 = GETJSAMPLE(elemptr[0]) - GETJSAMPLE(elemptr[10]);
+        tmp11 = GETJSAMPLE(elemptr[1]) - GETJSAMPLE(elemptr[9]);
+        tmp12 = GETJSAMPLE(elemptr[2]) - GETJSAMPLE(elemptr[8]);
+        tmp13 = GETJSAMPLE(elemptr[3]) - GETJSAMPLE(elemptr[7]);
+        tmp14 = GETJSAMPLE(elemptr[4]) - GETJSAMPLE(elemptr[6]);
+
+        /* Apply unsigned->signed conversion */
+        dataptr[0] = (DCTELEM)
+                     ((tmp0 + tmp1 + tmp2 + tmp3 + tmp4 + tmp5 - 11 * CENTERJSAMPLE) << 1);
+        tmp5 += tmp5;
+        tmp0 -= tmp5;
+        tmp1 -= tmp5;
+        tmp2 -= tmp5;
+        tmp3 -= tmp5;
+        tmp4 -= tmp5;
+        z1 = MULTIPLY(tmp0 + tmp3, FIX(1.356927976)) +       /* c2 */
+             MULTIPLY(tmp2 + tmp4, FIX(0.201263574));        /* c10 */
+        z2 = MULTIPLY(tmp1 - tmp3, FIX(0.926112931));        /* c6 */
+        z3 = MULTIPLY(tmp0 - tmp1, FIX(1.189712156));        /* c4 */
+        dataptr[2] = (DCTELEM)
+                     DESCALE(z1 + z2 - MULTIPLY(tmp3, FIX(1.018300590)) /* c2+c8-c6 */
+                             - MULTIPLY(tmp4, FIX(1.390975730)),        /* c4+c10 */
+                             CONST_BITS-1);
+        dataptr[4] = (DCTELEM)
+                     DESCALE(z2 + z3 + MULTIPLY(tmp1, FIX(0.062335650)) /* c4-c6-c10 */
+                             - MULTIPLY(tmp2, FIX(1.356927976))         /* c2 */
+                             + MULTIPLY(tmp4, FIX(0.587485545)),        /* c8 */
+                             CONST_BITS-1);
+        dataptr[6] = (DCTELEM)
+                     DESCALE(z1 + z3 - MULTIPLY(tmp0, FIX(1.620527200)) /* c2+c4-c6 */
+                             - MULTIPLY(tmp2, FIX(0.788749120)),        /* c8+c10 */
+                             CONST_BITS-1);
+
+        /* Odd part */
+
+        tmp1 = MULTIPLY(tmp10 + tmp11, FIX(1.286413905));    /* c3 */
+        tmp2 = MULTIPLY(tmp10 + tmp12, FIX(1.068791298));    /* c5 */
+        tmp3 = MULTIPLY(tmp10 + tmp13, FIX(0.764581576));    /* c7 */
+        tmp0 = tmp1 + tmp2 + tmp3 - MULTIPLY(tmp10, FIX(1.719967871)) /* c7+c5+c3-c1 */
+               + MULTIPLY(tmp14, FIX(0.398430003));          /* c9 */
+        tmp4 = MULTIPLY(tmp11 + tmp12, - FIX(0.764581576));  /* -c7 */
+        tmp5 = MULTIPLY(tmp11 + tmp13, - FIX(1.399818907));  /* -c1 */
+        tmp1 += tmp4 + tmp5 + MULTIPLY(tmp11, FIX(1.276416582)) /* c9+c7+c1-c3 */
+                - MULTIPLY(tmp14, FIX(1.068791298));         /* c5 */
+        tmp10 = MULTIPLY(tmp12 + tmp13, FIX(0.398430003));   /* c9 */
+        tmp2 += tmp4 + tmp10 - MULTIPLY(tmp12, FIX(1.989053629)) /* c9+c5+c3-c7 */
+                + MULTIPLY(tmp14, FIX(1.399818907));         /* c1 */
+        tmp3 += tmp5 + tmp10 + MULTIPLY(tmp13, FIX(1.305598626)) /* c1+c5-c9-c7 */
+                - MULTIPLY(tmp14, FIX(1.286413905));         /* c3 */
+
+        dataptr[1] = (DCTELEM) DESCALE(tmp0, CONST_BITS-1);
+        dataptr[3] = (DCTELEM) DESCALE(tmp1, CONST_BITS-1);
+        dataptr[5] = (DCTELEM) DESCALE(tmp2, CONST_BITS-1);
+        dataptr[7] = (DCTELEM) DESCALE(tmp3, CONST_BITS-1);
+
+        ctr++;
+
+        if (ctr != DCTSIZE)
+        {
+            if (ctr == 11)
+            {
+                break;    /* Done. */
+            }
+            dataptr += DCTSIZE;	/* advance pointer to next row */
+        }
+        else
+        {
+            dataptr = workspace;    /* switch pointer to extended workspace */
+        }
+    }
+
+    /* Pass 2: process columns.
+     * We leave the results scaled up by an overall factor of 8.
+     * We must also scale the output by (8/11)**2 = 64/121, which we partially
+     * fold into the constant multipliers and final/initial shifting:
+     * cK now represents sqrt(2) * cos(K*pi/22) * 128/121.
+     */
+
+    dataptr = data;
+    wsptr = workspace;
+    for (ctr = DCTSIZE-1; ctr >= 0; ctr--)
+    {
+        /* Even part */
+
+        tmp0 = dataptr[DCTSIZE*0] + wsptr[DCTSIZE*2];
+        tmp1 = dataptr[DCTSIZE*1] + wsptr[DCTSIZE*1];
+        tmp2 = dataptr[DCTSIZE*2] + wsptr[DCTSIZE*0];
+        tmp3 = dataptr[DCTSIZE*3] + dataptr[DCTSIZE*7];
+        tmp4 = dataptr[DCTSIZE*4] + dataptr[DCTSIZE*6];
+        tmp5 = dataptr[DCTSIZE*5];
+
+        tmp10 = dataptr[DCTSIZE*0] - wsptr[DCTSIZE*2];
+        tmp11 = dataptr[DCTSIZE*1] - wsptr[DCTSIZE*1];
+        tmp12 = dataptr[DCTSIZE*2] - wsptr[DCTSIZE*0];
+        tmp13 = dataptr[DCTSIZE*3] - dataptr[DCTSIZE*7];
+        tmp14 = dataptr[DCTSIZE*4] - dataptr[DCTSIZE*6];
+
+        dataptr[DCTSIZE*0] = (DCTELEM)
+                             DESCALE(MULTIPLY(tmp0 + tmp1 + tmp2 + tmp3 + tmp4 + tmp5,
+                                              FIX(1.057851240)),                /* 128/121 */
+                                     CONST_BITS+2);
+        tmp5 += tmp5;
+        tmp0 -= tmp5;
+        tmp1 -= tmp5;
+        tmp2 -= tmp5;
+        tmp3 -= tmp5;
+        tmp4 -= tmp5;
+        z1 = MULTIPLY(tmp0 + tmp3, FIX(1.435427942)) +       /* c2 */
+             MULTIPLY(tmp2 + tmp4, FIX(0.212906922));        /* c10 */
+        z2 = MULTIPLY(tmp1 - tmp3, FIX(0.979689713));        /* c6 */
+        z3 = MULTIPLY(tmp0 - tmp1, FIX(1.258538479));        /* c4 */
+        dataptr[DCTSIZE*2] = (DCTELEM)
+                             DESCALE(z1 + z2 - MULTIPLY(tmp3, FIX(1.077210542)) /* c2+c8-c6 */
+                                     - MULTIPLY(tmp4, FIX(1.471445400)),        /* c4+c10 */
+                                     CONST_BITS+2);
+        dataptr[DCTSIZE*4] = (DCTELEM)
+                             DESCALE(z2 + z3 + MULTIPLY(tmp1, FIX(0.065941844)) /* c4-c6-c10 */
+                                     - MULTIPLY(tmp2, FIX(1.435427942))         /* c2 */
+                                     + MULTIPLY(tmp4, FIX(0.621472312)),        /* c8 */
+                                     CONST_BITS+2);
+        dataptr[DCTSIZE*6] = (DCTELEM)
+                             DESCALE(z1 + z3 - MULTIPLY(tmp0, FIX(1.714276708)) /* c2+c4-c6 */
+                                     - MULTIPLY(tmp2, FIX(0.834379234)),        /* c8+c10 */
+                                     CONST_BITS+2);
+
+        /* Odd part */
+
+        tmp1 = MULTIPLY(tmp10 + tmp11, FIX(1.360834544));    /* c3 */
+        tmp2 = MULTIPLY(tmp10 + tmp12, FIX(1.130622199));    /* c5 */
+        tmp3 = MULTIPLY(tmp10 + tmp13, FIX(0.808813568));    /* c7 */
+        tmp0 = tmp1 + tmp2 + tmp3 - MULTIPLY(tmp10, FIX(1.819470145)) /* c7+c5+c3-c1 */
+               + MULTIPLY(tmp14, FIX(0.421479672));          /* c9 */
+        tmp4 = MULTIPLY(tmp11 + tmp12, - FIX(0.808813568));  /* -c7 */
+        tmp5 = MULTIPLY(tmp11 + tmp13, - FIX(1.480800167));  /* -c1 */
+        tmp1 += tmp4 + tmp5 + MULTIPLY(tmp11, FIX(1.350258864)) /* c9+c7+c1-c3 */
+                - MULTIPLY(tmp14, FIX(1.130622199));         /* c5 */
+        tmp10 = MULTIPLY(tmp12 + tmp13, FIX(0.421479672));   /* c9 */
+        tmp2 += tmp4 + tmp10 - MULTIPLY(tmp12, FIX(2.104122847)) /* c9+c5+c3-c7 */
+                + MULTIPLY(tmp14, FIX(1.480800167));         /* c1 */
+        tmp3 += tmp5 + tmp10 + MULTIPLY(tmp13, FIX(1.381129125)) /* c1+c5-c9-c7 */
+                - MULTIPLY(tmp14, FIX(1.360834544));         /* c3 */
+
+        dataptr[DCTSIZE*1] = (DCTELEM) DESCALE(tmp0, CONST_BITS+2);
+        dataptr[DCTSIZE*3] = (DCTELEM) DESCALE(tmp1, CONST_BITS+2);
+        dataptr[DCTSIZE*5] = (DCTELEM) DESCALE(tmp2, CONST_BITS+2);
+        dataptr[DCTSIZE*7] = (DCTELEM) DESCALE(tmp3, CONST_BITS+2);
+
+        dataptr++;			/* advance pointer to next column */
+        wsptr++;			/* advance pointer to next column */
+    }
+}
+
+
+/*
+ * Perform the forward DCT on a 12x12 sample block.
+ */
+
+GLOBAL(void)
+jpeg_fdct_12x12 (DCTELEM * data, JSAMPARRAY sample_data, JDIMENSION start_col)
+{
+    INT32 tmp0, tmp1, tmp2, tmp3, tmp4, tmp5;
+    INT32 tmp10, tmp11, tmp12, tmp13, tmp14, tmp15;
+    DCTELEM workspace[8*4];
+    DCTELEM *dataptr;
+    DCTELEM *wsptr;
+    JSAMPROW elemptr;
+    int ctr;
+    SHIFT_TEMPS
+
+    /* Pass 1: process rows. */
+    /* Note results are scaled up by sqrt(8) compared to a true DCT. */
+    /* cK represents sqrt(2) * cos(K*pi/24). */
+
+    dataptr = data;
+    ctr = 0;
+    for (;;)
+    {
+        elemptr = sample_data[ctr] + start_col;
+
+        /* Even part */
+
+        tmp0 = GETJSAMPLE(elemptr[0]) + GETJSAMPLE(elemptr[11]);
+        tmp1 = GETJSAMPLE(elemptr[1]) + GETJSAMPLE(elemptr[10]);
+        tmp2 = GETJSAMPLE(elemptr[2]) + GETJSAMPLE(elemptr[9]);
+        tmp3 = GETJSAMPLE(elemptr[3]) + GETJSAMPLE(elemptr[8]);
+        tmp4 = GETJSAMPLE(elemptr[4]) + GETJSAMPLE(elemptr[7]);
+        tmp5 = GETJSAMPLE(elemptr[5]) + GETJSAMPLE(elemptr[6]);
+
+        tmp10 = tmp0 + tmp5;
+        tmp13 = tmp0 - tmp5;
+        tmp11 = tmp1 + tmp4;
+        tmp14 = tmp1 - tmp4;
+        tmp12 = tmp2 + tmp3;
+        tmp15 = tmp2 - tmp3;
+
+        tmp0 = GETJSAMPLE(elemptr[0]) - GETJSAMPLE(elemptr[11]);
+        tmp1 = GETJSAMPLE(elemptr[1]) - GETJSAMPLE(elemptr[10]);
+        tmp2 = GETJSAMPLE(elemptr[2]) - GETJSAMPLE(elemptr[9]);
+        tmp3 = GETJSAMPLE(elemptr[3]) - GETJSAMPLE(elemptr[8]);
+        tmp4 = GETJSAMPLE(elemptr[4]) - GETJSAMPLE(elemptr[7]);
+        tmp5 = GETJSAMPLE(elemptr[5]) - GETJSAMPLE(elemptr[6]);
+
+        /* Apply unsigned->signed conversion */
+        dataptr[0] = (DCTELEM) (tmp10 + tmp11 + tmp12 - 12 * CENTERJSAMPLE);
+        dataptr[6] = (DCTELEM) (tmp13 - tmp14 - tmp15);
+        dataptr[4] = (DCTELEM)
+                     DESCALE(MULTIPLY(tmp10 - tmp12, FIX(1.224744871)), /* c4 */
+                             CONST_BITS);
+        dataptr[2] = (DCTELEM)
+                     DESCALE(tmp14 - tmp15 + MULTIPLY(tmp13 + tmp15, FIX(1.366025404)), /* c2 */
+                             CONST_BITS);
+
+        /* Odd part */
+
+        tmp10 = MULTIPLY(tmp1 + tmp4, FIX_0_541196100);    /* c9 */
+        tmp14 = tmp10 + MULTIPLY(tmp1, FIX_0_765366865);   /* c3-c9 */
+        tmp15 = tmp10 - MULTIPLY(tmp4, FIX_1_847759065);   /* c3+c9 */
+        tmp12 = MULTIPLY(tmp0 + tmp2, FIX(1.121971054));   /* c5 */
+        tmp13 = MULTIPLY(tmp0 + tmp3, FIX(0.860918669));   /* c7 */
+        tmp10 = tmp12 + tmp13 + tmp14 - MULTIPLY(tmp0, FIX(0.580774953)) /* c5+c7-c1 */
+                + MULTIPLY(tmp5, FIX(0.184591911));        /* c11 */
+        tmp11 = MULTIPLY(tmp2 + tmp3, - FIX(0.184591911)); /* -c11 */
+        tmp12 += tmp11 - tmp15 - MULTIPLY(tmp2, FIX(2.339493912)) /* c1+c5-c11 */
+                 + MULTIPLY(tmp5, FIX(0.860918669));        /* c7 */
+        tmp13 += tmp11 - tmp14 + MULTIPLY(tmp3, FIX(0.725788011)) /* c1+c11-c7 */
+                 - MULTIPLY(tmp5, FIX(1.121971054));        /* c5 */
+        tmp11 = tmp15 + MULTIPLY(tmp0 - tmp3, FIX(1.306562965)) /* c3 */
+                - MULTIPLY(tmp2 + tmp5, FIX_0_541196100);  /* c9 */
+
+        dataptr[1] = (DCTELEM) DESCALE(tmp10, CONST_BITS);
+        dataptr[3] = (DCTELEM) DESCALE(tmp11, CONST_BITS);
+        dataptr[5] = (DCTELEM) DESCALE(tmp12, CONST_BITS);
+        dataptr[7] = (DCTELEM) DESCALE(tmp13, CONST_BITS);
+
+        ctr++;
+
+        if (ctr != DCTSIZE)
+        {
+            if (ctr == 12)
+            {
+                break;    /* Done. */
+            }
+            dataptr += DCTSIZE;	/* advance pointer to next row */
+        }
+        else
+        {
+            dataptr = workspace;    /* switch pointer to extended workspace */
+        }
+    }
+
+    /* Pass 2: process columns.
+     * We leave the results scaled up by an overall factor of 8.
+     * We must also scale the output by (8/12)**2 = 4/9, which we partially
+     * fold into the constant multipliers and final shifting:
+     * cK now represents sqrt(2) * cos(K*pi/24) * 8/9.
+     */
+
+    dataptr = data;
+    wsptr = workspace;
+    for (ctr = DCTSIZE-1; ctr >= 0; ctr--)
+    {
+        /* Even part */
+
+        tmp0 = dataptr[DCTSIZE*0] + wsptr[DCTSIZE*3];
+        tmp1 = dataptr[DCTSIZE*1] + wsptr[DCTSIZE*2];
+        tmp2 = dataptr[DCTSIZE*2] + wsptr[DCTSIZE*1];
+        tmp3 = dataptr[DCTSIZE*3] + wsptr[DCTSIZE*0];
+        tmp4 = dataptr[DCTSIZE*4] + dataptr[DCTSIZE*7];
+        tmp5 = dataptr[DCTSIZE*5] + dataptr[DCTSIZE*6];
+
+        tmp10 = tmp0 + tmp5;
+        tmp13 = tmp0 - tmp5;
+        tmp11 = tmp1 + tmp4;
+        tmp14 = tmp1 - tmp4;
+        tmp12 = tmp2 + tmp3;
+        tmp15 = tmp2 - tmp3;
+
+        tmp0 = dataptr[DCTSIZE*0] - wsptr[DCTSIZE*3];
+        tmp1 = dataptr[DCTSIZE*1] - wsptr[DCTSIZE*2];
+        tmp2 = dataptr[DCTSIZE*2] - wsptr[DCTSIZE*1];
+        tmp3 = dataptr[DCTSIZE*3] - wsptr[DCTSIZE*0];
+        tmp4 = dataptr[DCTSIZE*4] - dataptr[DCTSIZE*7];
+        tmp5 = dataptr[DCTSIZE*5] - dataptr[DCTSIZE*6];
+
+        dataptr[DCTSIZE*0] = (DCTELEM)
+                             DESCALE(MULTIPLY(tmp10 + tmp11 + tmp12, FIX(0.888888889)), /* 8/9 */
+                                     CONST_BITS+1);
+        dataptr[DCTSIZE*6] = (DCTELEM)
+                             DESCALE(MULTIPLY(tmp13 - tmp14 - tmp15, FIX(0.888888889)), /* 8/9 */
+                                     CONST_BITS+1);
+        dataptr[DCTSIZE*4] = (DCTELEM)
+                             DESCALE(MULTIPLY(tmp10 - tmp12, FIX(1.088662108)),         /* c4 */
+                                     CONST_BITS+1);
+        dataptr[DCTSIZE*2] = (DCTELEM)
+                             DESCALE(MULTIPLY(tmp14 - tmp15, FIX(0.888888889)) +        /* 8/9 */
+                                     MULTIPLY(tmp13 + tmp15, FIX(1.214244803)),         /* c2 */
+                                     CONST_BITS+1);
+
+        /* Odd part */
+
+        tmp10 = MULTIPLY(tmp1 + tmp4, FIX(0.481063200));   /* c9 */
+        tmp14 = tmp10 + MULTIPLY(tmp1, FIX(0.680326102));  /* c3-c9 */
+        tmp15 = tmp10 - MULTIPLY(tmp4, FIX(1.642452502));  /* c3+c9 */
+        tmp12 = MULTIPLY(tmp0 + tmp2, FIX(0.997307603));   /* c5 */
+        tmp13 = MULTIPLY(tmp0 + tmp3, FIX(0.765261039));   /* c7 */
+        tmp10 = tmp12 + tmp13 + tmp14 - MULTIPLY(tmp0, FIX(0.516244403)) /* c5+c7-c1 */
+                + MULTIPLY(tmp5, FIX(0.164081699));        /* c11 */
+        tmp11 = MULTIPLY(tmp2 + tmp3, - FIX(0.164081699)); /* -c11 */
+        tmp12 += tmp11 - tmp15 - MULTIPLY(tmp2, FIX(2.079550144)) /* c1+c5-c11 */
+                 + MULTIPLY(tmp5, FIX(0.765261039));        /* c7 */
+        tmp13 += tmp11 - tmp14 + MULTIPLY(tmp3, FIX(0.645144899)) /* c1+c11-c7 */
+                 - MULTIPLY(tmp5, FIX(0.997307603));        /* c5 */
+        tmp11 = tmp15 + MULTIPLY(tmp0 - tmp3, FIX(1.161389302)) /* c3 */
+                - MULTIPLY(tmp2 + tmp5, FIX(0.481063200)); /* c9 */
+
+        dataptr[DCTSIZE*1] = (DCTELEM) DESCALE(tmp10, CONST_BITS+1);
+        dataptr[DCTSIZE*3] = (DCTELEM) DESCALE(tmp11, CONST_BITS+1);
+        dataptr[DCTSIZE*5] = (DCTELEM) DESCALE(tmp12, CONST_BITS+1);
+        dataptr[DCTSIZE*7] = (DCTELEM) DESCALE(tmp13, CONST_BITS+1);
+
+        dataptr++;			/* advance pointer to next column */
+        wsptr++;			/* advance pointer to next column */
+    }
+}
+
+
+/*
+ * Perform the forward DCT on a 13x13 sample block.
+ */
+
+GLOBAL(void)
+jpeg_fdct_13x13 (DCTELEM * data, JSAMPARRAY sample_data, JDIMENSION start_col)
+{
+    INT32 tmp0, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6;
+    INT32 tmp10, tmp11, tmp12, tmp13, tmp14, tmp15;
+    INT32 z1, z2;
+    DCTELEM workspace[8*5];
+    DCTELEM *dataptr;
+    DCTELEM *wsptr;
+    JSAMPROW elemptr;
+    int ctr;
+    SHIFT_TEMPS
+
+    /* Pass 1: process rows. */
+    /* Note results are scaled up by sqrt(8) compared to a true DCT. */
+    /* cK represents sqrt(2) * cos(K*pi/26). */
+
+    dataptr = data;
+    ctr = 0;
+    for (;;)
+    {
+        elemptr = sample_data[ctr] + start_col;
+
+        /* Even part */
+
+        tmp0 = GETJSAMPLE(elemptr[0]) + GETJSAMPLE(elemptr[12]);
+        tmp1 = GETJSAMPLE(elemptr[1]) + GETJSAMPLE(elemptr[11]);
+        tmp2 = GETJSAMPLE(elemptr[2]) + GETJSAMPLE(elemptr[10]);
+        tmp3 = GETJSAMPLE(elemptr[3]) + GETJSAMPLE(elemptr[9]);
+        tmp4 = GETJSAMPLE(elemptr[4]) + GETJSAMPLE(elemptr[8]);
+        tmp5 = GETJSAMPLE(elemptr[5]) + GETJSAMPLE(elemptr[7]);
+        tmp6 = GETJSAMPLE(elemptr[6]);
+
+        tmp10 = GETJSAMPLE(elemptr[0]) - GETJSAMPLE(elemptr[12]);
+        tmp11 = GETJSAMPLE(elemptr[1]) - GETJSAMPLE(elemptr[11]);
+        tmp12 = GETJSAMPLE(elemptr[2]) - GETJSAMPLE(elemptr[10]);
+        tmp13 = GETJSAMPLE(elemptr[3]) - GETJSAMPLE(elemptr[9]);
+        tmp14 = GETJSAMPLE(elemptr[4]) - GETJSAMPLE(elemptr[8]);
+        tmp15 = GETJSAMPLE(elemptr[5]) - GETJSAMPLE(elemptr[7]);
+
+        /* Apply unsigned->signed conversion */
+        dataptr[0] = (DCTELEM)
+                     (tmp0 + tmp1 + tmp2 + tmp3 + tmp4 + tmp5 + tmp6 - 13 * CENTERJSAMPLE);
+        tmp6 += tmp6;
+        tmp0 -= tmp6;
+        tmp1 -= tmp6;
+        tmp2 -= tmp6;
+        tmp3 -= tmp6;
+        tmp4 -= tmp6;
+        tmp5 -= tmp6;
+        dataptr[2] = (DCTELEM)
+                     DESCALE(MULTIPLY(tmp0, FIX(1.373119086)) +   /* c2 */
+                             MULTIPLY(tmp1, FIX(1.058554052)) +   /* c6 */
+                             MULTIPLY(tmp2, FIX(0.501487041)) -   /* c10 */
+                             MULTIPLY(tmp3, FIX(0.170464608)) -   /* c12 */
+                             MULTIPLY(tmp4, FIX(0.803364869)) -   /* c8 */
+                             MULTIPLY(tmp5, FIX(1.252223920)),    /* c4 */
+                             CONST_BITS);
+        z1 = MULTIPLY(tmp0 - tmp2, FIX(1.155388986)) - /* (c4+c6)/2 */
+             MULTIPLY(tmp3 - tmp4, FIX(0.435816023)) - /* (c2-c10)/2 */
+             MULTIPLY(tmp1 - tmp5, FIX(0.316450131));  /* (c8-c12)/2 */
+        z2 = MULTIPLY(tmp0 + tmp2, FIX(0.096834934)) - /* (c4-c6)/2 */
+             MULTIPLY(tmp3 + tmp4, FIX(0.937303064)) + /* (c2+c10)/2 */
+             MULTIPLY(tmp1 + tmp5, FIX(0.486914739));  /* (c8+c12)/2 */
+
+        dataptr[4] = (DCTELEM) DESCALE(z1 + z2, CONST_BITS);
+        dataptr[6] = (DCTELEM) DESCALE(z1 - z2, CONST_BITS);
+
+        /* Odd part */
+
+        tmp1 = MULTIPLY(tmp10 + tmp11, FIX(1.322312651));   /* c3 */
+        tmp2 = MULTIPLY(tmp10 + tmp12, FIX(1.163874945));   /* c5 */
+        tmp3 = MULTIPLY(tmp10 + tmp13, FIX(0.937797057)) +  /* c7 */
+               MULTIPLY(tmp14 + tmp15, FIX(0.338443458));   /* c11 */
+        tmp0 = tmp1 + tmp2 + tmp3 -
+               MULTIPLY(tmp10, FIX(2.020082300)) +          /* c3+c5+c7-c1 */
+               MULTIPLY(tmp14, FIX(0.318774355));           /* c9-c11 */
+        tmp4 = MULTIPLY(tmp14 - tmp15, FIX(0.937797057)) -  /* c7 */
+               MULTIPLY(tmp11 + tmp12, FIX(0.338443458));   /* c11 */
+        tmp5 = MULTIPLY(tmp11 + tmp13, - FIX(1.163874945)); /* -c5 */
+        tmp1 += tmp4 + tmp5 +
+                MULTIPLY(tmp11, FIX(0.837223564)) -         /* c5+c9+c11-c3 */
+                MULTIPLY(tmp14, FIX(2.341699410));          /* c1+c7 */
+        tmp6 = MULTIPLY(tmp12 + tmp13, - FIX(0.657217813)); /* -c9 */
+        tmp2 += tmp4 + tmp6 -
+                MULTIPLY(tmp12, FIX(1.572116027)) +         /* c1+c5-c9-c11 */
+                MULTIPLY(tmp15, FIX(2.260109708));          /* c3+c7 */
+        tmp3 += tmp5 + tmp6 +
+                MULTIPLY(tmp13, FIX(2.205608352)) -         /* c3+c5+c9-c7 */
+                MULTIPLY(tmp15, FIX(1.742345811));          /* c1+c11 */
+
+        dataptr[1] = (DCTELEM) DESCALE(tmp0, CONST_BITS);
+        dataptr[3] = (DCTELEM) DESCALE(tmp1, CONST_BITS);
+        dataptr[5] = (DCTELEM) DESCALE(tmp2, CONST_BITS);
+        dataptr[7] = (DCTELEM) DESCALE(tmp3, CONST_BITS);
+
+        ctr++;
+
+        if (ctr != DCTSIZE)
+        {
+            if (ctr == 13)
+            {
+                break;    /* Done. */
+            }
+            dataptr += DCTSIZE;	/* advance pointer to next row */
+        }
+        else
+        {
+            dataptr = workspace;    /* switch pointer to extended workspace */
+        }
+    }
+
+    /* Pass 2: process columns.
+     * We leave the results scaled up by an overall factor of 8.
+     * We must also scale the output by (8/13)**2 = 64/169, which we partially
+     * fold into the constant multipliers and final shifting:
+     * cK now represents sqrt(2) * cos(K*pi/26) * 128/169.
+     */
+
+    dataptr = data;
+    wsptr = workspace;
+    for (ctr = DCTSIZE-1; ctr >= 0; ctr--)
+    {
+        /* Even part */
+
+        tmp0 = dataptr[DCTSIZE*0] + wsptr[DCTSIZE*4];
+        tmp1 = dataptr[DCTSIZE*1] + wsptr[DCTSIZE*3];
+        tmp2 = dataptr[DCTSIZE*2] + wsptr[DCTSIZE*2];
+        tmp3 = dataptr[DCTSIZE*3] + wsptr[DCTSIZE*1];
+        tmp4 = dataptr[DCTSIZE*4] + wsptr[DCTSIZE*0];
+        tmp5 = dataptr[DCTSIZE*5] + dataptr[DCTSIZE*7];
+        tmp6 = dataptr[DCTSIZE*6];
+
+        tmp10 = dataptr[DCTSIZE*0] - wsptr[DCTSIZE*4];
+        tmp11 = dataptr[DCTSIZE*1] - wsptr[DCTSIZE*3];
+        tmp12 = dataptr[DCTSIZE*2] - wsptr[DCTSIZE*2];
+        tmp13 = dataptr[DCTSIZE*3] - wsptr[DCTSIZE*1];
+        tmp14 = dataptr[DCTSIZE*4] - wsptr[DCTSIZE*0];
+        tmp15 = dataptr[DCTSIZE*5] - dataptr[DCTSIZE*7];
+
+        dataptr[DCTSIZE*0] = (DCTELEM)
+                             DESCALE(MULTIPLY(tmp0 + tmp1 + tmp2 + tmp3 + tmp4 + tmp5 + tmp6,
+                                              FIX(0.757396450)),          /* 128/169 */
+                                     CONST_BITS+1);
+        tmp6 += tmp6;
+        tmp0 -= tmp6;
+        tmp1 -= tmp6;
+        tmp2 -= tmp6;
+        tmp3 -= tmp6;
+        tmp4 -= tmp6;
+        tmp5 -= tmp6;
+        dataptr[DCTSIZE*2] = (DCTELEM)
+                             DESCALE(MULTIPLY(tmp0, FIX(1.039995521)) +   /* c2 */
+                                     MULTIPLY(tmp1, FIX(0.801745081)) +   /* c6 */
+                                     MULTIPLY(tmp2, FIX(0.379824504)) -   /* c10 */
+                                     MULTIPLY(tmp3, FIX(0.129109289)) -   /* c12 */
+                                     MULTIPLY(tmp4, FIX(0.608465700)) -   /* c8 */
+                                     MULTIPLY(tmp5, FIX(0.948429952)),    /* c4 */
+                                     CONST_BITS+1);
+        z1 = MULTIPLY(tmp0 - tmp2, FIX(0.875087516)) - /* (c4+c6)/2 */
+             MULTIPLY(tmp3 - tmp4, FIX(0.330085509)) - /* (c2-c10)/2 */
+             MULTIPLY(tmp1 - tmp5, FIX(0.239678205));  /* (c8-c12)/2 */
+        z2 = MULTIPLY(tmp0 + tmp2, FIX(0.073342435)) - /* (c4-c6)/2 */
+             MULTIPLY(tmp3 + tmp4, FIX(0.709910013)) + /* (c2+c10)/2 */
+             MULTIPLY(tmp1 + tmp5, FIX(0.368787494));  /* (c8+c12)/2 */
+
+        dataptr[DCTSIZE*4] = (DCTELEM) DESCALE(z1 + z2, CONST_BITS+1);
+        dataptr[DCTSIZE*6] = (DCTELEM) DESCALE(z1 - z2, CONST_BITS+1);
+
+        /* Odd part */
+
+        tmp1 = MULTIPLY(tmp10 + tmp11, FIX(1.001514908));   /* c3 */
+        tmp2 = MULTIPLY(tmp10 + tmp12, FIX(0.881514751));   /* c5 */
+        tmp3 = MULTIPLY(tmp10 + tmp13, FIX(0.710284161)) +  /* c7 */
+               MULTIPLY(tmp14 + tmp15, FIX(0.256335874));   /* c11 */
+        tmp0 = tmp1 + tmp2 + tmp3 -
+               MULTIPLY(tmp10, FIX(1.530003162)) +          /* c3+c5+c7-c1 */
+               MULTIPLY(tmp14, FIX(0.241438564));           /* c9-c11 */
+        tmp4 = MULTIPLY(tmp14 - tmp15, FIX(0.710284161)) -  /* c7 */
+               MULTIPLY(tmp11 + tmp12, FIX(0.256335874));   /* c11 */
+        tmp5 = MULTIPLY(tmp11 + tmp13, - FIX(0.881514751)); /* -c5 */
+        tmp1 += tmp4 + tmp5 +
+                MULTIPLY(tmp11, FIX(0.634110155)) -         /* c5+c9+c11-c3 */
+                MULTIPLY(tmp14, FIX(1.773594819));          /* c1+c7 */
+        tmp6 = MULTIPLY(tmp12 + tmp13, - FIX(0.497774438)); /* -c9 */
+        tmp2 += tmp4 + tmp6 -
+                MULTIPLY(tmp12, FIX(1.190715098)) +         /* c1+c5-c9-c11 */
+                MULTIPLY(tmp15, FIX(1.711799069));          /* c3+c7 */
+        tmp3 += tmp5 + tmp6 +
+                MULTIPLY(tmp13, FIX(1.670519935)) -         /* c3+c5+c9-c7 */
+                MULTIPLY(tmp15, FIX(1.319646532));          /* c1+c11 */
+
+        dataptr[DCTSIZE*1] = (DCTELEM) DESCALE(tmp0, CONST_BITS+1);
+        dataptr[DCTSIZE*3] = (DCTELEM) DESCALE(tmp1, CONST_BITS+1);
+        dataptr[DCTSIZE*5] = (DCTELEM) DESCALE(tmp2, CONST_BITS+1);
+        dataptr[DCTSIZE*7] = (DCTELEM) DESCALE(tmp3, CONST_BITS+1);
+
+        dataptr++;			/* advance pointer to next column */
+        wsptr++;			/* advance pointer to next column */
+    }
+}
+
+
+/*
+ * Perform the forward DCT on a 14x14 sample block.
+ */
+
+GLOBAL(void)
+jpeg_fdct_14x14 (DCTELEM * data, JSAMPARRAY sample_data, JDIMENSION start_col)
+{
+    INT32 tmp0, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6;
+    INT32 tmp10, tmp11, tmp12, tmp13, tmp14, tmp15, tmp16;
+    DCTELEM workspace[8*6];
+    DCTELEM *dataptr;
+    DCTELEM *wsptr;
+    JSAMPROW elemptr;
+    int ctr;
+    SHIFT_TEMPS
+
+    /* Pass 1: process rows. */
+    /* Note results are scaled up by sqrt(8) compared to a true DCT. */
+    /* cK represents sqrt(2) * cos(K*pi/28). */
+
+    dataptr = data;
+    ctr = 0;
+    for (;;)
+    {
+        elemptr = sample_data[ctr] + start_col;
+
+        /* Even part */
+
+        tmp0 = GETJSAMPLE(elemptr[0]) + GETJSAMPLE(elemptr[13]);
+        tmp1 = GETJSAMPLE(elemptr[1]) + GETJSAMPLE(elemptr[12]);
+        tmp2 = GETJSAMPLE(elemptr[2]) + GETJSAMPLE(elemptr[11]);
+        tmp13 = GETJSAMPLE(elemptr[3]) + GETJSAMPLE(elemptr[10]);
+        tmp4 = GETJSAMPLE(elemptr[4]) + GETJSAMPLE(elemptr[9]);
+        tmp5 = GETJSAMPLE(elemptr[5]) + GETJSAMPLE(elemptr[8]);
+        tmp6 = GETJSAMPLE(elemptr[6]) + GETJSAMPLE(elemptr[7]);
+
+        tmp10 = tmp0 + tmp6;
+        tmp14 = tmp0 - tmp6;
+        tmp11 = tmp1 + tmp5;
+        tmp15 = tmp1 - tmp5;
+        tmp12 = tmp2 + tmp4;
+        tmp16 = tmp2 - tmp4;
+
+        tmp0 = GETJSAMPLE(elemptr[0]) - GETJSAMPLE(elemptr[13]);
+        tmp1 = GETJSAMPLE(elemptr[1]) - GETJSAMPLE(elemptr[12]);
+        tmp2 = GETJSAMPLE(elemptr[2]) - GETJSAMPLE(elemptr[11]);
+        tmp3 = GETJSAMPLE(elemptr[3]) - GETJSAMPLE(elemptr[10]);
+        tmp4 = GETJSAMPLE(elemptr[4]) - GETJSAMPLE(elemptr[9]);
+        tmp5 = GETJSAMPLE(elemptr[5]) - GETJSAMPLE(elemptr[8]);
+        tmp6 = GETJSAMPLE(elemptr[6]) - GETJSAMPLE(elemptr[7]);
+
+        /* Apply unsigned->signed conversion */
+        dataptr[0] = (DCTELEM)
+                     (tmp10 + tmp11 + tmp12 + tmp13 - 14 * CENTERJSAMPLE);
+        tmp13 += tmp13;
+        dataptr[4] = (DCTELEM)
+                     DESCALE(MULTIPLY(tmp10 - tmp13, FIX(1.274162392)) + /* c4 */
+                             MULTIPLY(tmp11 - tmp13, FIX(0.314692123)) - /* c12 */
+                             MULTIPLY(tmp12 - tmp13, FIX(0.881747734)),  /* c8 */
+                             CONST_BITS);
+
+        tmp10 = MULTIPLY(tmp14 + tmp15, FIX(1.105676686));    /* c6 */
+
+        dataptr[2] = (DCTELEM)
+                     DESCALE(tmp10 + MULTIPLY(tmp14, FIX(0.273079590))   /* c2-c6 */
+                             + MULTIPLY(tmp16, FIX(0.613604268)),        /* c10 */
+                             CONST_BITS);
+        dataptr[6] = (DCTELEM)
+                     DESCALE(tmp10 - MULTIPLY(tmp15, FIX(1.719280954))   /* c6+c10 */
+                             - MULTIPLY(tmp16, FIX(1.378756276)),        /* c2 */
+                             CONST_BITS);
+
+        /* Odd part */
+
+        tmp10 = tmp1 + tmp2;
+        tmp11 = tmp5 - tmp4;
+        dataptr[7] = (DCTELEM) (tmp0 - tmp10 + tmp3 - tmp11 - tmp6);
+        tmp3 <<= CONST_BITS;
+        tmp10 = MULTIPLY(tmp10, - FIX(0.158341681));          /* -c13 */
+        tmp11 = MULTIPLY(tmp11, FIX(1.405321284));            /* c1 */
+        tmp10 += tmp11 - tmp3;
+        tmp11 = MULTIPLY(tmp0 + tmp2, FIX(1.197448846)) +     /* c5 */
+                MULTIPLY(tmp4 + tmp6, FIX(0.752406978));      /* c9 */
+        dataptr[5] = (DCTELEM)
+                     DESCALE(tmp10 + tmp11 - MULTIPLY(tmp2, FIX(2.373959773)) /* c3+c5-c13 */
+                             + MULTIPLY(tmp4, FIX(1.119999435)),         /* c1+c11-c9 */
+                             CONST_BITS);
+        tmp12 = MULTIPLY(tmp0 + tmp1, FIX(1.334852607)) +     /* c3 */
+                MULTIPLY(tmp5 - tmp6, FIX(0.467085129));      /* c11 */
+        dataptr[3] = (DCTELEM)
+                     DESCALE(tmp10 + tmp12 - MULTIPLY(tmp1, FIX(0.424103948)) /* c3-c9-c13 */
+                             - MULTIPLY(tmp5, FIX(3.069855259)),         /* c1+c5+c11 */
+                             CONST_BITS);
+        dataptr[1] = (DCTELEM)
+                     DESCALE(tmp11 + tmp12 + tmp3 + tmp6 -
+                             MULTIPLY(tmp0 + tmp6, FIX(1.126980169)),    /* c3+c5-c1 */
+                             CONST_BITS);
+
+        ctr++;
+
+        if (ctr != DCTSIZE)
+        {
+            if (ctr == 14)
+            {
+                break;    /* Done. */
+            }
+            dataptr += DCTSIZE;	/* advance pointer to next row */
+        }
+        else
+        {
+            dataptr = workspace;    /* switch pointer to extended workspace */
+        }
+    }
+
+    /* Pass 2: process columns.
+     * We leave the results scaled up by an overall factor of 8.
+     * We must also scale the output by (8/14)**2 = 16/49, which we partially
+     * fold into the constant multipliers and final shifting:
+     * cK now represents sqrt(2) * cos(K*pi/28) * 32/49.
+     */
+
+    dataptr = data;
+    wsptr = workspace;
+    for (ctr = DCTSIZE-1; ctr >= 0; ctr--)
+    {
+        /* Even part */
+
+        tmp0 = dataptr[DCTSIZE*0] + wsptr[DCTSIZE*5];
+        tmp1 = dataptr[DCTSIZE*1] + wsptr[DCTSIZE*4];
+        tmp2 = dataptr[DCTSIZE*2] + wsptr[DCTSIZE*3];
+        tmp13 = dataptr[DCTSIZE*3] + wsptr[DCTSIZE*2];
+        tmp4 = dataptr[DCTSIZE*4] + wsptr[DCTSIZE*1];
+        tmp5 = dataptr[DCTSIZE*5] + wsptr[DCTSIZE*0];
+        tmp6 = dataptr[DCTSIZE*6] + dataptr[DCTSIZE*7];
+
+        tmp10 = tmp0 + tmp6;
+        tmp14 = tmp0 - tmp6;
+        tmp11 = tmp1 + tmp5;
+        tmp15 = tmp1 - tmp5;
+        tmp12 = tmp2 + tmp4;
+        tmp16 = tmp2 - tmp4;
+
+        tmp0 = dataptr[DCTSIZE*0] - wsptr[DCTSIZE*5];
+        tmp1 = dataptr[DCTSIZE*1] - wsptr[DCTSIZE*4];
+        tmp2 = dataptr[DCTSIZE*2] - wsptr[DCTSIZE*3];
+        tmp3 = dataptr[DCTSIZE*3] - wsptr[DCTSIZE*2];
+        tmp4 = dataptr[DCTSIZE*4] - wsptr[DCTSIZE*1];
+        tmp5 = dataptr[DCTSIZE*5] - wsptr[DCTSIZE*0];
+        tmp6 = dataptr[DCTSIZE*6] - dataptr[DCTSIZE*7];
+
+        dataptr[DCTSIZE*0] = (DCTELEM)
+                             DESCALE(MULTIPLY(tmp10 + tmp11 + tmp12 + tmp13,
+                                              FIX(0.653061224)),                 /* 32/49 */
+                                     CONST_BITS+1);
+        tmp13 += tmp13;
+        dataptr[DCTSIZE*4] = (DCTELEM)
+                             DESCALE(MULTIPLY(tmp10 - tmp13, FIX(0.832106052)) + /* c4 */
+                                     MULTIPLY(tmp11 - tmp13, FIX(0.205513223)) - /* c12 */
+                                     MULTIPLY(tmp12 - tmp13, FIX(0.575835255)),  /* c8 */
+                                     CONST_BITS+1);
+
+        tmp10 = MULTIPLY(tmp14 + tmp15, FIX(0.722074570));    /* c6 */
+
+        dataptr[DCTSIZE*2] = (DCTELEM)
+                             DESCALE(tmp10 + MULTIPLY(tmp14, FIX(0.178337691))   /* c2-c6 */
+                                     + MULTIPLY(tmp16, FIX(0.400721155)),        /* c10 */
+                                     CONST_BITS+1);
+        dataptr[DCTSIZE*6] = (DCTELEM)
+                             DESCALE(tmp10 - MULTIPLY(tmp15, FIX(1.122795725))   /* c6+c10 */
+                                     - MULTIPLY(tmp16, FIX(0.900412262)),        /* c2 */
+                                     CONST_BITS+1);
+
+        /* Odd part */
+
+        tmp10 = tmp1 + tmp2;
+        tmp11 = tmp5 - tmp4;
+        dataptr[DCTSIZE*7] = (DCTELEM)
+                             DESCALE(MULTIPLY(tmp0 - tmp10 + tmp3 - tmp11 - tmp6,
+                                              FIX(0.653061224)),                 /* 32/49 */
+                                     CONST_BITS+1);
+        tmp3  = MULTIPLY(tmp3 , FIX(0.653061224));            /* 32/49 */
+        tmp10 = MULTIPLY(tmp10, - FIX(0.103406812));          /* -c13 */
+        tmp11 = MULTIPLY(tmp11, FIX(0.917760839));            /* c1 */
+        tmp10 += tmp11 - tmp3;
+        tmp11 = MULTIPLY(tmp0 + tmp2, FIX(0.782007410)) +     /* c5 */
+                MULTIPLY(tmp4 + tmp6, FIX(0.491367823));      /* c9 */
+        dataptr[DCTSIZE*5] = (DCTELEM)
+                             DESCALE(tmp10 + tmp11 - MULTIPLY(tmp2, FIX(1.550341076)) /* c3+c5-c13 */
+                                     + MULTIPLY(tmp4, FIX(0.731428202)),         /* c1+c11-c9 */
+                                     CONST_BITS+1);
+        tmp12 = MULTIPLY(tmp0 + tmp1, FIX(0.871740478)) +     /* c3 */
+                MULTIPLY(tmp5 - tmp6, FIX(0.305035186));      /* c11 */
+        dataptr[DCTSIZE*3] = (DCTELEM)
+                             DESCALE(tmp10 + tmp12 - MULTIPLY(tmp1, FIX(0.276965844)) /* c3-c9-c13 */
+                                     - MULTIPLY(tmp5, FIX(2.004803435)),         /* c1+c5+c11 */
+                                     CONST_BITS+1);
+        dataptr[DCTSIZE*1] = (DCTELEM)
+                             DESCALE(tmp11 + tmp12 + tmp3
+                                     - MULTIPLY(tmp0, FIX(0.735987049))          /* c3+c5-c1 */
+                                     - MULTIPLY(tmp6, FIX(0.082925825)),         /* c9-c11-c13 */
+                                     CONST_BITS+1);
+
+        dataptr++;			/* advance pointer to next column */
+        wsptr++;			/* advance pointer to next column */
+    }
+}
+
+
+/*
+ * Perform the forward DCT on a 15x15 sample block.
+ */
+
+GLOBAL(void)
+jpeg_fdct_15x15 (DCTELEM * data, JSAMPARRAY sample_data, JDIMENSION start_col)
+{
+    INT32 tmp0, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, tmp7;
+    INT32 tmp10, tmp11, tmp12, tmp13, tmp14, tmp15, tmp16;
+    INT32 z1, z2, z3;
+    DCTELEM workspace[8*7];
+    DCTELEM *dataptr;
+    DCTELEM *wsptr;
+    JSAMPROW elemptr;
+    int ctr;
+    SHIFT_TEMPS
+
+    /* Pass 1: process rows. */
+    /* Note results are scaled up by sqrt(8) compared to a true DCT. */
+    /* cK represents sqrt(2) * cos(K*pi/30). */
+
+    dataptr = data;
+    ctr = 0;
+    for (;;)
+    {
+        elemptr = sample_data[ctr] + start_col;
+
+        /* Even part */
+
+        tmp0 = GETJSAMPLE(elemptr[0]) + GETJSAMPLE(elemptr[14]);
+        tmp1 = GETJSAMPLE(elemptr[1]) + GETJSAMPLE(elemptr[13]);
+        tmp2 = GETJSAMPLE(elemptr[2]) + GETJSAMPLE(elemptr[12]);
+        tmp3 = GETJSAMPLE(elemptr[3]) + GETJSAMPLE(elemptr[11]);
+        tmp4 = GETJSAMPLE(elemptr[4]) + GETJSAMPLE(elemptr[10]);
+        tmp5 = GETJSAMPLE(elemptr[5]) + GETJSAMPLE(elemptr[9]);
+        tmp6 = GETJSAMPLE(elemptr[6]) + GETJSAMPLE(elemptr[8]);
+        tmp7 = GETJSAMPLE(elemptr[7]);
+
+        tmp10 = GETJSAMPLE(elemptr[0]) - GETJSAMPLE(elemptr[14]);
+        tmp11 = GETJSAMPLE(elemptr[1]) - GETJSAMPLE(elemptr[13]);
+        tmp12 = GETJSAMPLE(elemptr[2]) - GETJSAMPLE(elemptr[12]);
+        tmp13 = GETJSAMPLE(elemptr[3]) - GETJSAMPLE(elemptr[11]);
+        tmp14 = GETJSAMPLE(elemptr[4]) - GETJSAMPLE(elemptr[10]);
+        tmp15 = GETJSAMPLE(elemptr[5]) - GETJSAMPLE(elemptr[9]);
+        tmp16 = GETJSAMPLE(elemptr[6]) - GETJSAMPLE(elemptr[8]);
+
+        z1 = tmp0 + tmp4 + tmp5;
+        z2 = tmp1 + tmp3 + tmp6;
+        z3 = tmp2 + tmp7;
+        /* Apply unsigned->signed conversion */
+        dataptr[0] = (DCTELEM) (z1 + z2 + z3 - 15 * CENTERJSAMPLE);
+        z3 += z3;
+        dataptr[6] = (DCTELEM)
+                     DESCALE(MULTIPLY(z1 - z3, FIX(1.144122806)) - /* c6 */
+                             MULTIPLY(z2 - z3, FIX(0.437016024)),  /* c12 */
+                             CONST_BITS);
+        tmp2 += ((tmp1 + tmp4) >> 1) - tmp7 - tmp7;
+        z1 = MULTIPLY(tmp3 - tmp2, FIX(1.531135173)) -  /* c2+c14 */
+             MULTIPLY(tmp6 - tmp2, FIX(2.238241955));   /* c4+c8 */
+        z2 = MULTIPLY(tmp5 - tmp2, FIX(0.798468008)) -  /* c8-c14 */
+             MULTIPLY(tmp0 - tmp2, FIX(0.091361227));   /* c2-c4 */
+        z3 = MULTIPLY(tmp0 - tmp3, FIX(1.383309603)) +  /* c2 */
+             MULTIPLY(tmp6 - tmp5, FIX(0.946293579)) +  /* c8 */
+             MULTIPLY(tmp1 - tmp4, FIX(0.790569415));   /* (c6+c12)/2 */
+
+        dataptr[2] = (DCTELEM) DESCALE(z1 + z3, CONST_BITS);
+        dataptr[4] = (DCTELEM) DESCALE(z2 + z3, CONST_BITS);
+
+        /* Odd part */
+
+        tmp2 = MULTIPLY(tmp10 - tmp12 - tmp13 + tmp15 + tmp16,
+                        FIX(1.224744871));                         /* c5 */
+        tmp1 = MULTIPLY(tmp10 - tmp14 - tmp15, FIX(1.344997024)) + /* c3 */
+               MULTIPLY(tmp11 - tmp13 - tmp16, FIX(0.831253876));  /* c9 */
+        tmp12 = MULTIPLY(tmp12, FIX(1.224744871));                 /* c5 */
+        tmp4 = MULTIPLY(tmp10 - tmp16, FIX(1.406466353)) +         /* c1 */
+               MULTIPLY(tmp11 + tmp14, FIX(1.344997024)) +         /* c3 */
+               MULTIPLY(tmp13 + tmp15, FIX(0.575212477));          /* c11 */
+        tmp0 = MULTIPLY(tmp13, FIX(0.475753014)) -                 /* c7-c11 */
+               MULTIPLY(tmp14, FIX(0.513743148)) +                 /* c3-c9 */
+               MULTIPLY(tmp16, FIX(1.700497885)) + tmp4 + tmp12;   /* c1+c13 */
+        tmp3 = MULTIPLY(tmp10, - FIX(0.355500862)) -               /* -(c1-c7) */
+               MULTIPLY(tmp11, FIX(2.176250899)) -                 /* c3+c9 */
+               MULTIPLY(tmp15, FIX(0.869244010)) + tmp4 - tmp12;   /* c11+c13 */
+
+        dataptr[1] = (DCTELEM) DESCALE(tmp0, CONST_BITS);
+        dataptr[3] = (DCTELEM) DESCALE(tmp1, CONST_BITS);
+        dataptr[5] = (DCTELEM) DESCALE(tmp2, CONST_BITS);
+        dataptr[7] = (DCTELEM) DESCALE(tmp3, CONST_BITS);
+
+        ctr++;
+
+        if (ctr != DCTSIZE)
+        {
+            if (ctr == 15)
+            {
+                break;    /* Done. */
+            }
+            dataptr += DCTSIZE;	/* advance pointer to next row */
+        }
+        else
+        {
+            dataptr = workspace;    /* switch pointer to extended workspace */
+        }
+    }
+
+    /* Pass 2: process columns.
+     * We leave the results scaled up by an overall factor of 8.
+     * We must also scale the output by (8/15)**2 = 64/225, which we partially
+     * fold into the constant multipliers and final shifting:
+     * cK now represents sqrt(2) * cos(K*pi/30) * 256/225.
+     */
+
+    dataptr = data;
+    wsptr = workspace;
+    for (ctr = DCTSIZE-1; ctr >= 0; ctr--)
+    {
+        /* Even part */
+
+        tmp0 = dataptr[DCTSIZE*0] + wsptr[DCTSIZE*6];
+        tmp1 = dataptr[DCTSIZE*1] + wsptr[DCTSIZE*5];
+        tmp2 = dataptr[DCTSIZE*2] + wsptr[DCTSIZE*4];
+        tmp3 = dataptr[DCTSIZE*3] + wsptr[DCTSIZE*3];
+        tmp4 = dataptr[DCTSIZE*4] + wsptr[DCTSIZE*2];
+        tmp5 = dataptr[DCTSIZE*5] + wsptr[DCTSIZE*1];
+        tmp6 = dataptr[DCTSIZE*6] + wsptr[DCTSIZE*0];
+        tmp7 = dataptr[DCTSIZE*7];
+
+        tmp10 = dataptr[DCTSIZE*0] - wsptr[DCTSIZE*6];
+        tmp11 = dataptr[DCTSIZE*1] - wsptr[DCTSIZE*5];
+        tmp12 = dataptr[DCTSIZE*2] - wsptr[DCTSIZE*4];
+        tmp13 = dataptr[DCTSIZE*3] - wsptr[DCTSIZE*3];
+        tmp14 = dataptr[DCTSIZE*4] - wsptr[DCTSIZE*2];
+        tmp15 = dataptr[DCTSIZE*5] - wsptr[DCTSIZE*1];
+        tmp16 = dataptr[DCTSIZE*6] - wsptr[DCTSIZE*0];
+
+        z1 = tmp0 + tmp4 + tmp5;
+        z2 = tmp1 + tmp3 + tmp6;
+        z3 = tmp2 + tmp7;
+        dataptr[DCTSIZE*0] = (DCTELEM)
+                             DESCALE(MULTIPLY(z1 + z2 + z3, FIX(1.137777778)), /* 256/225 */
+                                     CONST_BITS+2);
+        z3 += z3;
+        dataptr[DCTSIZE*6] = (DCTELEM)
+                             DESCALE(MULTIPLY(z1 - z3, FIX(1.301757503)) - /* c6 */
+                                     MULTIPLY(z2 - z3, FIX(0.497227121)),  /* c12 */
+                                     CONST_BITS+2);
+        tmp2 += ((tmp1 + tmp4) >> 1) - tmp7 - tmp7;
+        z1 = MULTIPLY(tmp3 - tmp2, FIX(1.742091575)) -  /* c2+c14 */
+             MULTIPLY(tmp6 - tmp2, FIX(2.546621957));   /* c4+c8 */
+        z2 = MULTIPLY(tmp5 - tmp2, FIX(0.908479156)) -  /* c8-c14 */
+             MULTIPLY(tmp0 - tmp2, FIX(0.103948774));   /* c2-c4 */
+        z3 = MULTIPLY(tmp0 - tmp3, FIX(1.573898926)) +  /* c2 */
+             MULTIPLY(tmp6 - tmp5, FIX(1.076671805)) +  /* c8 */
+             MULTIPLY(tmp1 - tmp4, FIX(0.899492312));   /* (c6+c12)/2 */
+
+        dataptr[DCTSIZE*2] = (DCTELEM) DESCALE(z1 + z3, CONST_BITS+2);
+        dataptr[DCTSIZE*4] = (DCTELEM) DESCALE(z2 + z3, CONST_BITS+2);
+
+        /* Odd part */
+
+        tmp2 = MULTIPLY(tmp10 - tmp12 - tmp13 + tmp15 + tmp16,
+                        FIX(1.393487498));                         /* c5 */
+        tmp1 = MULTIPLY(tmp10 - tmp14 - tmp15, FIX(1.530307725)) + /* c3 */
+               MULTIPLY(tmp11 - tmp13 - tmp16, FIX(0.945782187));  /* c9 */
+        tmp12 = MULTIPLY(tmp12, FIX(1.393487498));                 /* c5 */
+        tmp4 = MULTIPLY(tmp10 - tmp16, FIX(1.600246161)) +         /* c1 */
+               MULTIPLY(tmp11 + tmp14, FIX(1.530307725)) +         /* c3 */
+               MULTIPLY(tmp13 + tmp15, FIX(0.654463974));          /* c11 */
+        tmp0 = MULTIPLY(tmp13, FIX(0.541301207)) -                 /* c7-c11 */
+               MULTIPLY(tmp14, FIX(0.584525538)) +                 /* c3-c9 */
+               MULTIPLY(tmp16, FIX(1.934788705)) + tmp4 + tmp12;   /* c1+c13 */
+        tmp3 = MULTIPLY(tmp10, - FIX(0.404480980)) -               /* -(c1-c7) */
+               MULTIPLY(tmp11, FIX(2.476089912)) -                 /* c3+c9 */
+               MULTIPLY(tmp15, FIX(0.989006518)) + tmp4 - tmp12;   /* c11+c13 */
+
+        dataptr[DCTSIZE*1] = (DCTELEM) DESCALE(tmp0, CONST_BITS+2);
+        dataptr[DCTSIZE*3] = (DCTELEM) DESCALE(tmp1, CONST_BITS+2);
+        dataptr[DCTSIZE*5] = (DCTELEM) DESCALE(tmp2, CONST_BITS+2);
+        dataptr[DCTSIZE*7] = (DCTELEM) DESCALE(tmp3, CONST_BITS+2);
+
+        dataptr++;			/* advance pointer to next column */
+        wsptr++;			/* advance pointer to next column */
+    }
+}
+
+
+/*
+ * Perform the forward DCT on a 16x16 sample block.
+ */
+
+GLOBAL(void)
+jpeg_fdct_16x16 (DCTELEM * data, JSAMPARRAY sample_data, JDIMENSION start_col)
+{
+    INT32 tmp0, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, tmp7;
+    INT32 tmp10, tmp11, tmp12, tmp13, tmp14, tmp15, tmp16, tmp17;
+    DCTELEM workspace[DCTSIZE2];
+    DCTELEM *dataptr;
+    DCTELEM *wsptr;
+    JSAMPROW elemptr;
+    int ctr;
+    SHIFT_TEMPS
+
+    /* Pass 1: process rows. */
+    /* Note results are scaled up by sqrt(8) compared to a true DCT; */
+    /* furthermore, we scale the results by 2**PASS1_BITS. */
+    /* cK represents sqrt(2) * cos(K*pi/32). */
+
+    dataptr = data;
+    ctr = 0;
+    for (;;)
+    {
+        elemptr = sample_data[ctr] + start_col;
+
+        /* Even part */
+
+        tmp0 = GETJSAMPLE(elemptr[0]) + GETJSAMPLE(elemptr[15]);
+        tmp1 = GETJSAMPLE(elemptr[1]) + GETJSAMPLE(elemptr[14]);
+        tmp2 = GETJSAMPLE(elemptr[2]) + GETJSAMPLE(elemptr[13]);
+        tmp3 = GETJSAMPLE(elemptr[3]) + GETJSAMPLE(elemptr[12]);
+        tmp4 = GETJSAMPLE(elemptr[4]) + GETJSAMPLE(elemptr[11]);
+        tmp5 = GETJSAMPLE(elemptr[5]) + GETJSAMPLE(elemptr[10]);
+        tmp6 = GETJSAMPLE(elemptr[6]) + GETJSAMPLE(elemptr[9]);
+        tmp7 = GETJSAMPLE(elemptr[7]) + GETJSAMPLE(elemptr[8]);
+
+        tmp10 = tmp0 + tmp7;
+        tmp14 = tmp0 - tmp7;
+        tmp11 = tmp1 + tmp6;
+        tmp15 = tmp1 - tmp6;
+        tmp12 = tmp2 + tmp5;
+        tmp16 = tmp2 - tmp5;
+        tmp13 = tmp3 + tmp4;
+        tmp17 = tmp3 - tmp4;
+
+        tmp0 = GETJSAMPLE(elemptr[0]) - GETJSAMPLE(elemptr[15]);
+        tmp1 = GETJSAMPLE(elemptr[1]) - GETJSAMPLE(elemptr[14]);
+        tmp2 = GETJSAMPLE(elemptr[2]) - GETJSAMPLE(elemptr[13]);
+        tmp3 = GETJSAMPLE(elemptr[3]) - GETJSAMPLE(elemptr[12]);
+        tmp4 = GETJSAMPLE(elemptr[4]) - GETJSAMPLE(elemptr[11]);
+        tmp5 = GETJSAMPLE(elemptr[5]) - GETJSAMPLE(elemptr[10]);
+        tmp6 = GETJSAMPLE(elemptr[6]) - GETJSAMPLE(elemptr[9]);
+        tmp7 = GETJSAMPLE(elemptr[7]) - GETJSAMPLE(elemptr[8]);
+
+        /* Apply unsigned->signed conversion */
+        dataptr[0] = (DCTELEM)
+                     ((tmp10 + tmp11 + tmp12 + tmp13 - 16 * CENTERJSAMPLE) << PASS1_BITS);
+        dataptr[4] = (DCTELEM)
+                     DESCALE(MULTIPLY(tmp10 - tmp13, FIX(1.306562965)) + /* c4[16] = c2[8] */
+                             MULTIPLY(tmp11 - tmp12, FIX_0_541196100),   /* c12[16] = c6[8] */
+                             CONST_BITS-PASS1_BITS);
+
+        tmp10 = MULTIPLY(tmp17 - tmp15, FIX(0.275899379)) +   /* c14[16] = c7[8] */
+                MULTIPLY(tmp14 - tmp16, FIX(1.387039845));    /* c2[16] = c1[8] */
+
+        dataptr[2] = (DCTELEM)
+                     DESCALE(tmp10 + MULTIPLY(tmp15, FIX(1.451774982))   /* c6+c14 */
+                             + MULTIPLY(tmp16, FIX(2.172734804)),        /* c2+c10 */
+                             CONST_BITS-PASS1_BITS);
+        dataptr[6] = (DCTELEM)
+                     DESCALE(tmp10 - MULTIPLY(tmp14, FIX(0.211164243))   /* c2-c6 */
+                             - MULTIPLY(tmp17, FIX(1.061594338)),        /* c10+c14 */
+                             CONST_BITS-PASS1_BITS);
+
+        /* Odd part */
+
+        tmp11 = MULTIPLY(tmp0 + tmp1, FIX(1.353318001)) +         /* c3 */
+                MULTIPLY(tmp6 - tmp7, FIX(0.410524528));          /* c13 */
+        tmp12 = MULTIPLY(tmp0 + tmp2, FIX(1.247225013)) +         /* c5 */
+                MULTIPLY(tmp5 + tmp7, FIX(0.666655658));          /* c11 */
+        tmp13 = MULTIPLY(tmp0 + tmp3, FIX(1.093201867)) +         /* c7 */
+                MULTIPLY(tmp4 - tmp7, FIX(0.897167586));          /* c9 */
+        tmp14 = MULTIPLY(tmp1 + tmp2, FIX(0.138617169)) +         /* c15 */
+                MULTIPLY(tmp6 - tmp5, FIX(1.407403738));          /* c1 */
+        tmp15 = MULTIPLY(tmp1 + tmp3, - FIX(0.666655658)) +       /* -c11 */
+                MULTIPLY(tmp4 + tmp6, - FIX(1.247225013));        /* -c5 */
+        tmp16 = MULTIPLY(tmp2 + tmp3, - FIX(1.353318001)) +       /* -c3 */
+                MULTIPLY(tmp5 - tmp4, FIX(0.410524528));          /* c13 */
+        tmp10 = tmp11 + tmp12 + tmp13 -
+                MULTIPLY(tmp0, FIX(2.286341144)) +                /* c7+c5+c3-c1 */
+                MULTIPLY(tmp7, FIX(0.779653625));                 /* c15+c13-c11+c9 */
+        tmp11 += tmp14 + tmp15 + MULTIPLY(tmp1, FIX(0.071888074)) /* c9-c3-c15+c11 */
+                 - MULTIPLY(tmp6, FIX(1.663905119));              /* c7+c13+c1-c5 */
+        tmp12 += tmp14 + tmp16 - MULTIPLY(tmp2, FIX(1.125726048)) /* c7+c5+c15-c3 */
+                 + MULTIPLY(tmp5, FIX(1.227391138));              /* c9-c11+c1-c13 */
+        tmp13 += tmp15 + tmp16 + MULTIPLY(tmp3, FIX(1.065388962)) /* c15+c3+c11-c7 */
+                 + MULTIPLY(tmp4, FIX(2.167985692));              /* c1+c13+c5-c9 */
+
+        dataptr[1] = (DCTELEM) DESCALE(tmp10, CONST_BITS-PASS1_BITS);
+        dataptr[3] = (DCTELEM) DESCALE(tmp11, CONST_BITS-PASS1_BITS);
+        dataptr[5] = (DCTELEM) DESCALE(tmp12, CONST_BITS-PASS1_BITS);
+        dataptr[7] = (DCTELEM) DESCALE(tmp13, CONST_BITS-PASS1_BITS);
+
+        ctr++;
+
+        if (ctr != DCTSIZE)
+        {
+            if (ctr == DCTSIZE * 2)
+            {
+                break;    /* Done. */
+            }
+            dataptr += DCTSIZE;	/* advance pointer to next row */
+        }
+        else
+        {
+            dataptr = workspace;    /* switch pointer to extended workspace */
+        }
+    }
+
+    /* Pass 2: process columns.
+     * We remove the PASS1_BITS scaling, but leave the results scaled up
+     * by an overall factor of 8.
+     * We must also scale the output by (8/16)**2 = 1/2**2.
+     */
+
+    dataptr = data;
+    wsptr = workspace;
+    for (ctr = DCTSIZE-1; ctr >= 0; ctr--)
+    {
+        /* Even part */
+
+        tmp0 = dataptr[DCTSIZE*0] + wsptr[DCTSIZE*7];
+        tmp1 = dataptr[DCTSIZE*1] + wsptr[DCTSIZE*6];
+        tmp2 = dataptr[DCTSIZE*2] + wsptr[DCTSIZE*5];
+        tmp3 = dataptr[DCTSIZE*3] + wsptr[DCTSIZE*4];
+        tmp4 = dataptr[DCTSIZE*4] + wsptr[DCTSIZE*3];
+        tmp5 = dataptr[DCTSIZE*5] + wsptr[DCTSIZE*2];
+        tmp6 = dataptr[DCTSIZE*6] + wsptr[DCTSIZE*1];
+        tmp7 = dataptr[DCTSIZE*7] + wsptr[DCTSIZE*0];
+
+        tmp10 = tmp0 + tmp7;
+        tmp14 = tmp0 - tmp7;
+        tmp11 = tmp1 + tmp6;
+        tmp15 = tmp1 - tmp6;
+        tmp12 = tmp2 + tmp5;
+        tmp16 = tmp2 - tmp5;
+        tmp13 = tmp3 + tmp4;
+        tmp17 = tmp3 - tmp4;
+
+        tmp0 = dataptr[DCTSIZE*0] - wsptr[DCTSIZE*7];
+        tmp1 = dataptr[DCTSIZE*1] - wsptr[DCTSIZE*6];
+        tmp2 = dataptr[DCTSIZE*2] - wsptr[DCTSIZE*5];
+        tmp3 = dataptr[DCTSIZE*3] - wsptr[DCTSIZE*4];
+        tmp4 = dataptr[DCTSIZE*4] - wsptr[DCTSIZE*3];
+        tmp5 = dataptr[DCTSIZE*5] - wsptr[DCTSIZE*2];
+        tmp6 = dataptr[DCTSIZE*6] - wsptr[DCTSIZE*1];
+        tmp7 = dataptr[DCTSIZE*7] - wsptr[DCTSIZE*0];
+
+        dataptr[DCTSIZE*0] = (DCTELEM)
+                             DESCALE(tmp10 + tmp11 + tmp12 + tmp13, PASS1_BITS+2);
+        dataptr[DCTSIZE*4] = (DCTELEM)
+                             DESCALE(MULTIPLY(tmp10 - tmp13, FIX(1.306562965)) + /* c4[16] = c2[8] */
+                                     MULTIPLY(tmp11 - tmp12, FIX_0_541196100),   /* c12[16] = c6[8] */
+                                     CONST_BITS+PASS1_BITS+2);
+
+        tmp10 = MULTIPLY(tmp17 - tmp15, FIX(0.275899379)) +   /* c14[16] = c7[8] */
+                MULTIPLY(tmp14 - tmp16, FIX(1.387039845));    /* c2[16] = c1[8] */
+
+        dataptr[DCTSIZE*2] = (DCTELEM)
+                             DESCALE(tmp10 + MULTIPLY(tmp15, FIX(1.451774982))   /* c6+c14 */
+                                     + MULTIPLY(tmp16, FIX(2.172734804)),        /* c2+10 */
+                                     CONST_BITS+PASS1_BITS+2);
+        dataptr[DCTSIZE*6] = (DCTELEM)
+                             DESCALE(tmp10 - MULTIPLY(tmp14, FIX(0.211164243))   /* c2-c6 */
+                                     - MULTIPLY(tmp17, FIX(1.061594338)),        /* c10+c14 */
+                                     CONST_BITS+PASS1_BITS+2);
+
+        /* Odd part */
+
+        tmp11 = MULTIPLY(tmp0 + tmp1, FIX(1.353318001)) +         /* c3 */
+                MULTIPLY(tmp6 - tmp7, FIX(0.410524528));          /* c13 */
+        tmp12 = MULTIPLY(tmp0 + tmp2, FIX(1.247225013)) +         /* c5 */
+                MULTIPLY(tmp5 + tmp7, FIX(0.666655658));          /* c11 */
+        tmp13 = MULTIPLY(tmp0 + tmp3, FIX(1.093201867)) +         /* c7 */
+                MULTIPLY(tmp4 - tmp7, FIX(0.897167586));          /* c9 */
+        tmp14 = MULTIPLY(tmp1 + tmp2, FIX(0.138617169)) +         /* c15 */
+                MULTIPLY(tmp6 - tmp5, FIX(1.407403738));          /* c1 */
+        tmp15 = MULTIPLY(tmp1 + tmp3, - FIX(0.666655658)) +       /* -c11 */
+                MULTIPLY(tmp4 + tmp6, - FIX(1.247225013));        /* -c5 */
+        tmp16 = MULTIPLY(tmp2 + tmp3, - FIX(1.353318001)) +       /* -c3 */
+                MULTIPLY(tmp5 - tmp4, FIX(0.410524528));          /* c13 */
+        tmp10 = tmp11 + tmp12 + tmp13 -
+                MULTIPLY(tmp0, FIX(2.286341144)) +                /* c7+c5+c3-c1 */
+                MULTIPLY(tmp7, FIX(0.779653625));                 /* c15+c13-c11+c9 */
+        tmp11 += tmp14 + tmp15 + MULTIPLY(tmp1, FIX(0.071888074)) /* c9-c3-c15+c11 */
+                 - MULTIPLY(tmp6, FIX(1.663905119));              /* c7+c13+c1-c5 */
+        tmp12 += tmp14 + tmp16 - MULTIPLY(tmp2, FIX(1.125726048)) /* c7+c5+c15-c3 */
+                 + MULTIPLY(tmp5, FIX(1.227391138));              /* c9-c11+c1-c13 */
+        tmp13 += tmp15 + tmp16 + MULTIPLY(tmp3, FIX(1.065388962)) /* c15+c3+c11-c7 */
+                 + MULTIPLY(tmp4, FIX(2.167985692));              /* c1+c13+c5-c9 */
+
+        dataptr[DCTSIZE*1] = (DCTELEM) DESCALE(tmp10, CONST_BITS+PASS1_BITS+2);
+        dataptr[DCTSIZE*3] = (DCTELEM) DESCALE(tmp11, CONST_BITS+PASS1_BITS+2);
+        dataptr[DCTSIZE*5] = (DCTELEM) DESCALE(tmp12, CONST_BITS+PASS1_BITS+2);
+        dataptr[DCTSIZE*7] = (DCTELEM) DESCALE(tmp13, CONST_BITS+PASS1_BITS+2);
+
+        dataptr++;			/* advance pointer to next column */
+        wsptr++;			/* advance pointer to next column */
+    }
+}
+
+
+/*
+ * Perform the forward DCT on a 16x8 sample block.
+ *
+ * 16-point FDCT in pass 1 (rows), 8-point in pass 2 (columns).
+ */
+
+GLOBAL(void)
+jpeg_fdct_16x8 (DCTELEM * data, JSAMPARRAY sample_data, JDIMENSION start_col)
+{
+    INT32 tmp0, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, tmp7;
+    INT32 tmp10, tmp11, tmp12, tmp13, tmp14, tmp15, tmp16, tmp17;
+    INT32 z1;
+    DCTELEM *dataptr;
+    JSAMPROW elemptr;
+    int ctr;
+    SHIFT_TEMPS
+
+    /* Pass 1: process rows. */
+    /* Note results are scaled up by sqrt(8) compared to a true DCT; */
+    /* furthermore, we scale the results by 2**PASS1_BITS. */
+    /* 16-point FDCT kernel, cK represents sqrt(2) * cos(K*pi/32). */
+
+    dataptr = data;
+    ctr = 0;
+    for (ctr = 0; ctr < DCTSIZE; ctr++)
+    {
+        elemptr = sample_data[ctr] + start_col;
+
+        /* Even part */
+
+        tmp0 = GETJSAMPLE(elemptr[0]) + GETJSAMPLE(elemptr[15]);
+        tmp1 = GETJSAMPLE(elemptr[1]) + GETJSAMPLE(elemptr[14]);
+        tmp2 = GETJSAMPLE(elemptr[2]) + GETJSAMPLE(elemptr[13]);
+        tmp3 = GETJSAMPLE(elemptr[3]) + GETJSAMPLE(elemptr[12]);
+        tmp4 = GETJSAMPLE(elemptr[4]) + GETJSAMPLE(elemptr[11]);
+        tmp5 = GETJSAMPLE(elemptr[5]) + GETJSAMPLE(elemptr[10]);
+        tmp6 = GETJSAMPLE(elemptr[6]) + GETJSAMPLE(elemptr[9]);
+        tmp7 = GETJSAMPLE(elemptr[7]) + GETJSAMPLE(elemptr[8]);
+
+        tmp10 = tmp0 + tmp7;
+        tmp14 = tmp0 - tmp7;
+        tmp11 = tmp1 + tmp6;
+        tmp15 = tmp1 - tmp6;
+        tmp12 = tmp2 + tmp5;
+        tmp16 = tmp2 - tmp5;
+        tmp13 = tmp3 + tmp4;
+        tmp17 = tmp3 - tmp4;
+
+        tmp0 = GETJSAMPLE(elemptr[0]) - GETJSAMPLE(elemptr[15]);
+        tmp1 = GETJSAMPLE(elemptr[1]) - GETJSAMPLE(elemptr[14]);
+        tmp2 = GETJSAMPLE(elemptr[2]) - GETJSAMPLE(elemptr[13]);
+        tmp3 = GETJSAMPLE(elemptr[3]) - GETJSAMPLE(elemptr[12]);
+        tmp4 = GETJSAMPLE(elemptr[4]) - GETJSAMPLE(elemptr[11]);
+        tmp5 = GETJSAMPLE(elemptr[5]) - GETJSAMPLE(elemptr[10]);
+        tmp6 = GETJSAMPLE(elemptr[6]) - GETJSAMPLE(elemptr[9]);
+        tmp7 = GETJSAMPLE(elemptr[7]) - GETJSAMPLE(elemptr[8]);
+
+        /* Apply unsigned->signed conversion */
+        dataptr[0] = (DCTELEM)
+                     ((tmp10 + tmp11 + tmp12 + tmp13 - 16 * CENTERJSAMPLE) << PASS1_BITS);
+        dataptr[4] = (DCTELEM)
+                     DESCALE(MULTIPLY(tmp10 - tmp13, FIX(1.306562965)) + /* c4[16] = c2[8] */
+                             MULTIPLY(tmp11 - tmp12, FIX_0_541196100),   /* c12[16] = c6[8] */
+                             CONST_BITS-PASS1_BITS);
+
+        tmp10 = MULTIPLY(tmp17 - tmp15, FIX(0.275899379)) +   /* c14[16] = c7[8] */
+                MULTIPLY(tmp14 - tmp16, FIX(1.387039845));    /* c2[16] = c1[8] */
+
+        dataptr[2] = (DCTELEM)
+                     DESCALE(tmp10 + MULTIPLY(tmp15, FIX(1.451774982))   /* c6+c14 */
+                             + MULTIPLY(tmp16, FIX(2.172734804)),        /* c2+c10 */
+                             CONST_BITS-PASS1_BITS);
+        dataptr[6] = (DCTELEM)
+                     DESCALE(tmp10 - MULTIPLY(tmp14, FIX(0.211164243))   /* c2-c6 */
+                             - MULTIPLY(tmp17, FIX(1.061594338)),        /* c10+c14 */
+                             CONST_BITS-PASS1_BITS);
+
+        /* Odd part */
+
+        tmp11 = MULTIPLY(tmp0 + tmp1, FIX(1.353318001)) +         /* c3 */
+                MULTIPLY(tmp6 - tmp7, FIX(0.410524528));          /* c13 */
+        tmp12 = MULTIPLY(tmp0 + tmp2, FIX(1.247225013)) +         /* c5 */
+                MULTIPLY(tmp5 + tmp7, FIX(0.666655658));          /* c11 */
+        tmp13 = MULTIPLY(tmp0 + tmp3, FIX(1.093201867)) +         /* c7 */
+                MULTIPLY(tmp4 - tmp7, FIX(0.897167586));          /* c9 */
+        tmp14 = MULTIPLY(tmp1 + tmp2, FIX(0.138617169)) +         /* c15 */
+                MULTIPLY(tmp6 - tmp5, FIX(1.407403738));          /* c1 */
+        tmp15 = MULTIPLY(tmp1 + tmp3, - FIX(0.666655658)) +       /* -c11 */
+                MULTIPLY(tmp4 + tmp6, - FIX(1.247225013));        /* -c5 */
+        tmp16 = MULTIPLY(tmp2 + tmp3, - FIX(1.353318001)) +       /* -c3 */
+                MULTIPLY(tmp5 - tmp4, FIX(0.410524528));          /* c13 */
+        tmp10 = tmp11 + tmp12 + tmp13 -
+                MULTIPLY(tmp0, FIX(2.286341144)) +                /* c7+c5+c3-c1 */
+                MULTIPLY(tmp7, FIX(0.779653625));                 /* c15+c13-c11+c9 */
+        tmp11 += tmp14 + tmp15 + MULTIPLY(tmp1, FIX(0.071888074)) /* c9-c3-c15+c11 */
+                 - MULTIPLY(tmp6, FIX(1.663905119));              /* c7+c13+c1-c5 */
+        tmp12 += tmp14 + tmp16 - MULTIPLY(tmp2, FIX(1.125726048)) /* c7+c5+c15-c3 */
+                 + MULTIPLY(tmp5, FIX(1.227391138));              /* c9-c11+c1-c13 */
+        tmp13 += tmp15 + tmp16 + MULTIPLY(tmp3, FIX(1.065388962)) /* c15+c3+c11-c7 */
+                 + MULTIPLY(tmp4, FIX(2.167985692));              /* c1+c13+c5-c9 */
+
+        dataptr[1] = (DCTELEM) DESCALE(tmp10, CONST_BITS-PASS1_BITS);
+        dataptr[3] = (DCTELEM) DESCALE(tmp11, CONST_BITS-PASS1_BITS);
+        dataptr[5] = (DCTELEM) DESCALE(tmp12, CONST_BITS-PASS1_BITS);
+        dataptr[7] = (DCTELEM) DESCALE(tmp13, CONST_BITS-PASS1_BITS);
+
+        dataptr += DCTSIZE;		/* advance pointer to next row */
+    }
+
+    /* Pass 2: process columns.
+     * We remove the PASS1_BITS scaling, but leave the results scaled up
+     * by an overall factor of 8.
+     * We must also scale the output by 8/16 = 1/2.
+     */
+
+    dataptr = data;
+    for (ctr = DCTSIZE-1; ctr >= 0; ctr--)
+    {
+        /* Even part per LL&M figure 1 --- note that published figure is faulty;
+         * rotator "sqrt(2)*c1" should be "sqrt(2)*c6".
+         */
+
+        tmp0 = dataptr[DCTSIZE*0] + dataptr[DCTSIZE*7];
+        tmp1 = dataptr[DCTSIZE*1] + dataptr[DCTSIZE*6];
+        tmp2 = dataptr[DCTSIZE*2] + dataptr[DCTSIZE*5];
+        tmp3 = dataptr[DCTSIZE*3] + dataptr[DCTSIZE*4];
+
+        tmp10 = tmp0 + tmp3;
+        tmp12 = tmp0 - tmp3;
+        tmp11 = tmp1 + tmp2;
+        tmp13 = tmp1 - tmp2;
+
+        tmp0 = dataptr[DCTSIZE*0] - dataptr[DCTSIZE*7];
+        tmp1 = dataptr[DCTSIZE*1] - dataptr[DCTSIZE*6];
+        tmp2 = dataptr[DCTSIZE*2] - dataptr[DCTSIZE*5];
+        tmp3 = dataptr[DCTSIZE*3] - dataptr[DCTSIZE*4];
+
+        dataptr[DCTSIZE*0] = (DCTELEM) DESCALE(tmp10 + tmp11, PASS1_BITS+1);
+        dataptr[DCTSIZE*4] = (DCTELEM) DESCALE(tmp10 - tmp11, PASS1_BITS+1);
+
+        z1 = MULTIPLY(tmp12 + tmp13, FIX_0_541196100);
+        dataptr[DCTSIZE*2] = (DCTELEM) DESCALE(z1 + MULTIPLY(tmp12, FIX_0_765366865),
+                                               CONST_BITS+PASS1_BITS+1);
+        dataptr[DCTSIZE*6] = (DCTELEM) DESCALE(z1 - MULTIPLY(tmp13, FIX_1_847759065),
+                                               CONST_BITS+PASS1_BITS+1);
+
+        /* Odd part per figure 8 --- note paper omits factor of sqrt(2).
+         * 8-point FDCT kernel, cK represents sqrt(2) * cos(K*pi/16).
+         * i0..i3 in the paper are tmp0..tmp3 here.
+         */
+
+        tmp10 = tmp0 + tmp3;
+        tmp11 = tmp1 + tmp2;
+        tmp12 = tmp0 + tmp2;
+        tmp13 = tmp1 + tmp3;
+        z1 = MULTIPLY(tmp12 + tmp13, FIX_1_175875602); /*  c3 */
+
+        tmp0  = MULTIPLY(tmp0,    FIX_1_501321110);    /*  c1+c3-c5-c7 */
+        tmp1  = MULTIPLY(tmp1,    FIX_3_072711026);    /*  c1+c3+c5-c7 */
+        tmp2  = MULTIPLY(tmp2,    FIX_2_053119869);    /*  c1+c3-c5+c7 */
+        tmp3  = MULTIPLY(tmp3,    FIX_0_298631336);    /* -c1+c3+c5-c7 */
+        tmp10 = MULTIPLY(tmp10, - FIX_0_899976223);    /*  c7-c3 */
+        tmp11 = MULTIPLY(tmp11, - FIX_2_562915447);    /* -c1-c3 */
+        tmp12 = MULTIPLY(tmp12, - FIX_0_390180644);    /*  c5-c3 */
+        tmp13 = MULTIPLY(tmp13, - FIX_1_961570560);    /* -c3-c5 */
+
+        tmp12 += z1;
+        tmp13 += z1;
+
+        dataptr[DCTSIZE*1] = (DCTELEM) DESCALE(tmp0 + tmp10 + tmp12,
+                                               CONST_BITS+PASS1_BITS+1);
+        dataptr[DCTSIZE*3] = (DCTELEM) DESCALE(tmp1 + tmp11 + tmp13,
+                                               CONST_BITS+PASS1_BITS+1);
+        dataptr[DCTSIZE*5] = (DCTELEM) DESCALE(tmp2 + tmp11 + tmp12,
+                                               CONST_BITS+PASS1_BITS+1);
+        dataptr[DCTSIZE*7] = (DCTELEM) DESCALE(tmp3 + tmp10 + tmp13,
+                                               CONST_BITS+PASS1_BITS+1);
+
+        dataptr++;			/* advance pointer to next column */
+    }
+}
+
+
+/*
+ * Perform the forward DCT on a 14x7 sample block.
+ *
+ * 14-point FDCT in pass 1 (rows), 7-point in pass 2 (columns).
+ */
+
+GLOBAL(void)
+jpeg_fdct_14x7 (DCTELEM * data, JSAMPARRAY sample_data, JDIMENSION start_col)
+{
+    INT32 tmp0, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6;
+    INT32 tmp10, tmp11, tmp12, tmp13, tmp14, tmp15, tmp16;
+    INT32 z1, z2, z3;
+    DCTELEM *dataptr;
+    JSAMPROW elemptr;
+    int ctr;
+    SHIFT_TEMPS
+
+    /* Zero bottom row of output coefficient block. */
+    MEMZERO(&data[DCTSIZE*7], SIZEOF(DCTELEM) * DCTSIZE);
+
+    /* Pass 1: process rows. */
+    /* Note results are scaled up by sqrt(8) compared to a true DCT; */
+    /* furthermore, we scale the results by 2**PASS1_BITS. */
+    /* 14-point FDCT kernel, cK represents sqrt(2) * cos(K*pi/28). */
+
+    dataptr = data;
+    for (ctr = 0; ctr < 7; ctr++)
+    {
+        elemptr = sample_data[ctr] + start_col;
+
+        /* Even part */
+
+        tmp0 = GETJSAMPLE(elemptr[0]) + GETJSAMPLE(elemptr[13]);
+        tmp1 = GETJSAMPLE(elemptr[1]) + GETJSAMPLE(elemptr[12]);
+        tmp2 = GETJSAMPLE(elemptr[2]) + GETJSAMPLE(elemptr[11]);
+        tmp13 = GETJSAMPLE(elemptr[3]) + GETJSAMPLE(elemptr[10]);
+        tmp4 = GETJSAMPLE(elemptr[4]) + GETJSAMPLE(elemptr[9]);
+        tmp5 = GETJSAMPLE(elemptr[5]) + GETJSAMPLE(elemptr[8]);
+        tmp6 = GETJSAMPLE(elemptr[6]) + GETJSAMPLE(elemptr[7]);
+
+        tmp10 = tmp0 + tmp6;
+        tmp14 = tmp0 - tmp6;
+        tmp11 = tmp1 + tmp5;
+        tmp15 = tmp1 - tmp5;
+        tmp12 = tmp2 + tmp4;
+        tmp16 = tmp2 - tmp4;
+
+        tmp0 = GETJSAMPLE(elemptr[0]) - GETJSAMPLE(elemptr[13]);
+        tmp1 = GETJSAMPLE(elemptr[1]) - GETJSAMPLE(elemptr[12]);
+        tmp2 = GETJSAMPLE(elemptr[2]) - GETJSAMPLE(elemptr[11]);
+        tmp3 = GETJSAMPLE(elemptr[3]) - GETJSAMPLE(elemptr[10]);
+        tmp4 = GETJSAMPLE(elemptr[4]) - GETJSAMPLE(elemptr[9]);
+        tmp5 = GETJSAMPLE(elemptr[5]) - GETJSAMPLE(elemptr[8]);
+        tmp6 = GETJSAMPLE(elemptr[6]) - GETJSAMPLE(elemptr[7]);
+
+        /* Apply unsigned->signed conversion */
+        dataptr[0] = (DCTELEM)
+                     ((tmp10 + tmp11 + tmp12 + tmp13 - 14 * CENTERJSAMPLE) << PASS1_BITS);
+        tmp13 += tmp13;
+        dataptr[4] = (DCTELEM)
+                     DESCALE(MULTIPLY(tmp10 - tmp13, FIX(1.274162392)) + /* c4 */
+                             MULTIPLY(tmp11 - tmp13, FIX(0.314692123)) - /* c12 */
+                             MULTIPLY(tmp12 - tmp13, FIX(0.881747734)),  /* c8 */
+                             CONST_BITS-PASS1_BITS);
+
+        tmp10 = MULTIPLY(tmp14 + tmp15, FIX(1.105676686));    /* c6 */
+
+        dataptr[2] = (DCTELEM)
+                     DESCALE(tmp10 + MULTIPLY(tmp14, FIX(0.273079590))   /* c2-c6 */
+                             + MULTIPLY(tmp16, FIX(0.613604268)),        /* c10 */
+                             CONST_BITS-PASS1_BITS);
+        dataptr[6] = (DCTELEM)
+                     DESCALE(tmp10 - MULTIPLY(tmp15, FIX(1.719280954))   /* c6+c10 */
+                             - MULTIPLY(tmp16, FIX(1.378756276)),        /* c2 */
+                             CONST_BITS-PASS1_BITS);
+
+        /* Odd part */
+
+        tmp10 = tmp1 + tmp2;
+        tmp11 = tmp5 - tmp4;
+        dataptr[7] = (DCTELEM) ((tmp0 - tmp10 + tmp3 - tmp11 - tmp6) << PASS1_BITS);
+        tmp3 <<= CONST_BITS;
+        tmp10 = MULTIPLY(tmp10, - FIX(0.158341681));          /* -c13 */
+        tmp11 = MULTIPLY(tmp11, FIX(1.405321284));            /* c1 */
+        tmp10 += tmp11 - tmp3;
+        tmp11 = MULTIPLY(tmp0 + tmp2, FIX(1.197448846)) +     /* c5 */
+                MULTIPLY(tmp4 + tmp6, FIX(0.752406978));      /* c9 */
+        dataptr[5] = (DCTELEM)
+                     DESCALE(tmp10 + tmp11 - MULTIPLY(tmp2, FIX(2.373959773)) /* c3+c5-c13 */
+                             + MULTIPLY(tmp4, FIX(1.119999435)),         /* c1+c11-c9 */
+                             CONST_BITS-PASS1_BITS);
+        tmp12 = MULTIPLY(tmp0 + tmp1, FIX(1.334852607)) +     /* c3 */
+                MULTIPLY(tmp5 - tmp6, FIX(0.467085129));      /* c11 */
+        dataptr[3] = (DCTELEM)
+                     DESCALE(tmp10 + tmp12 - MULTIPLY(tmp1, FIX(0.424103948)) /* c3-c9-c13 */
+                             - MULTIPLY(tmp5, FIX(3.069855259)),         /* c1+c5+c11 */
+                             CONST_BITS-PASS1_BITS);
+        dataptr[1] = (DCTELEM)
+                     DESCALE(tmp11 + tmp12 + tmp3 + tmp6 -
+                             MULTIPLY(tmp0 + tmp6, FIX(1.126980169)),    /* c3+c5-c1 */
+                             CONST_BITS-PASS1_BITS);
+
+        dataptr += DCTSIZE;		/* advance pointer to next row */
+    }
+
+    /* Pass 2: process columns.
+     * We remove the PASS1_BITS scaling, but leave the results scaled up
+     * by an overall factor of 8.
+     * We must also scale the output by (8/14)*(8/7) = 32/49, which we
+     * partially fold into the constant multipliers and final shifting:
+     * 7-point FDCT kernel, cK represents sqrt(2) * cos(K*pi/14) * 64/49.
+     */
+
+    dataptr = data;
+    for (ctr = DCTSIZE-1; ctr >= 0; ctr--)
+    {
+        /* Even part */
+
+        tmp0 = dataptr[DCTSIZE*0] + dataptr[DCTSIZE*6];
+        tmp1 = dataptr[DCTSIZE*1] + dataptr[DCTSIZE*5];
+        tmp2 = dataptr[DCTSIZE*2] + dataptr[DCTSIZE*4];
+        tmp3 = dataptr[DCTSIZE*3];
+
+        tmp10 = dataptr[DCTSIZE*0] - dataptr[DCTSIZE*6];
+        tmp11 = dataptr[DCTSIZE*1] - dataptr[DCTSIZE*5];
+        tmp12 = dataptr[DCTSIZE*2] - dataptr[DCTSIZE*4];
+
+        z1 = tmp0 + tmp2;
+        dataptr[DCTSIZE*0] = (DCTELEM)
+                             DESCALE(MULTIPLY(z1 + tmp1 + tmp3, FIX(1.306122449)), /* 64/49 */
+                                     CONST_BITS+PASS1_BITS+1);
+        tmp3 += tmp3;
+        z1 -= tmp3;
+        z1 -= tmp3;
+        z1 = MULTIPLY(z1, FIX(0.461784020));                /* (c2+c6-c4)/2 */
+        z2 = MULTIPLY(tmp0 - tmp2, FIX(1.202428084));       /* (c2+c4-c6)/2 */
+        z3 = MULTIPLY(tmp1 - tmp2, FIX(0.411026446));       /* c6 */
+        dataptr[DCTSIZE*2] = (DCTELEM) DESCALE(z1 + z2 + z3, CONST_BITS+PASS1_BITS+1);
+        z1 -= z2;
+        z2 = MULTIPLY(tmp0 - tmp1, FIX(1.151670509));       /* c4 */
+        dataptr[DCTSIZE*4] = (DCTELEM)
+                             DESCALE(z2 + z3 - MULTIPLY(tmp1 - tmp3, FIX(0.923568041)), /* c2+c6-c4 */
+                                     CONST_BITS+PASS1_BITS+1);
+        dataptr[DCTSIZE*6] = (DCTELEM) DESCALE(z1 + z2, CONST_BITS+PASS1_BITS+1);
+
+        /* Odd part */
+
+        tmp1 = MULTIPLY(tmp10 + tmp11, FIX(1.221765677));   /* (c3+c1-c5)/2 */
+        tmp2 = MULTIPLY(tmp10 - tmp11, FIX(0.222383464));   /* (c3+c5-c1)/2 */
+        tmp0 = tmp1 - tmp2;
+        tmp1 += tmp2;
+        tmp2 = MULTIPLY(tmp11 + tmp12, - FIX(1.800824523)); /* -c1 */
+        tmp1 += tmp2;
+        tmp3 = MULTIPLY(tmp10 + tmp12, FIX(0.801442310));   /* c5 */
+        tmp0 += tmp3;
+        tmp2 += tmp3 + MULTIPLY(tmp12, FIX(2.443531355));   /* c3+c1-c5 */
+
+        dataptr[DCTSIZE*1] = (DCTELEM) DESCALE(tmp0, CONST_BITS+PASS1_BITS+1);
+        dataptr[DCTSIZE*3] = (DCTELEM) DESCALE(tmp1, CONST_BITS+PASS1_BITS+1);
+        dataptr[DCTSIZE*5] = (DCTELEM) DESCALE(tmp2, CONST_BITS+PASS1_BITS+1);
+
+        dataptr++;			/* advance pointer to next column */
+    }
+}
+
+
+/*
+ * Perform the forward DCT on a 12x6 sample block.
+ *
+ * 12-point FDCT in pass 1 (rows), 6-point in pass 2 (columns).
+ */
+
+GLOBAL(void)
+jpeg_fdct_12x6 (DCTELEM * data, JSAMPARRAY sample_data, JDIMENSION start_col)
+{
+    INT32 tmp0, tmp1, tmp2, tmp3, tmp4, tmp5;
+    INT32 tmp10, tmp11, tmp12, tmp13, tmp14, tmp15;
+    DCTELEM *dataptr;
+    JSAMPROW elemptr;
+    int ctr;
+    SHIFT_TEMPS
+
+    /* Zero 2 bottom rows of output coefficient block. */
+    MEMZERO(&data[DCTSIZE*6], SIZEOF(DCTELEM) * DCTSIZE * 2);
+
+    /* Pass 1: process rows. */
+    /* Note results are scaled up by sqrt(8) compared to a true DCT; */
+    /* furthermore, we scale the results by 2**PASS1_BITS. */
+    /* 12-point FDCT kernel, cK represents sqrt(2) * cos(K*pi/24). */
+
+    dataptr = data;
+    for (ctr = 0; ctr < 6; ctr++)
+    {
+        elemptr = sample_data[ctr] + start_col;
+
+        /* Even part */
+
+        tmp0 = GETJSAMPLE(elemptr[0]) + GETJSAMPLE(elemptr[11]);
+        tmp1 = GETJSAMPLE(elemptr[1]) + GETJSAMPLE(elemptr[10]);
+        tmp2 = GETJSAMPLE(elemptr[2]) + GETJSAMPLE(elemptr[9]);
+        tmp3 = GETJSAMPLE(elemptr[3]) + GETJSAMPLE(elemptr[8]);
+        tmp4 = GETJSAMPLE(elemptr[4]) + GETJSAMPLE(elemptr[7]);
+        tmp5 = GETJSAMPLE(elemptr[5]) + GETJSAMPLE(elemptr[6]);
+
+        tmp10 = tmp0 + tmp5;
+        tmp13 = tmp0 - tmp5;
+        tmp11 = tmp1 + tmp4;
+        tmp14 = tmp1 - tmp4;
+        tmp12 = tmp2 + tmp3;
+        tmp15 = tmp2 - tmp3;
+
+        tmp0 = GETJSAMPLE(elemptr[0]) - GETJSAMPLE(elemptr[11]);
+        tmp1 = GETJSAMPLE(elemptr[1]) - GETJSAMPLE(elemptr[10]);
+        tmp2 = GETJSAMPLE(elemptr[2]) - GETJSAMPLE(elemptr[9]);
+        tmp3 = GETJSAMPLE(elemptr[3]) - GETJSAMPLE(elemptr[8]);
+        tmp4 = GETJSAMPLE(elemptr[4]) - GETJSAMPLE(elemptr[7]);
+        tmp5 = GETJSAMPLE(elemptr[5]) - GETJSAMPLE(elemptr[6]);
+
+        /* Apply unsigned->signed conversion */
+        dataptr[0] = (DCTELEM)
+                     ((tmp10 + tmp11 + tmp12 - 12 * CENTERJSAMPLE) << PASS1_BITS);
+        dataptr[6] = (DCTELEM) ((tmp13 - tmp14 - tmp15) << PASS1_BITS);
+        dataptr[4] = (DCTELEM)
+                     DESCALE(MULTIPLY(tmp10 - tmp12, FIX(1.224744871)), /* c4 */
+                             CONST_BITS-PASS1_BITS);
+        dataptr[2] = (DCTELEM)
+                     DESCALE(tmp14 - tmp15 + MULTIPLY(tmp13 + tmp15, FIX(1.366025404)), /* c2 */
+                             CONST_BITS-PASS1_BITS);
+
+        /* Odd part */
+
+        tmp10 = MULTIPLY(tmp1 + tmp4, FIX_0_541196100);    /* c9 */
+        tmp14 = tmp10 + MULTIPLY(tmp1, FIX_0_765366865);   /* c3-c9 */
+        tmp15 = tmp10 - MULTIPLY(tmp4, FIX_1_847759065);   /* c3+c9 */
+        tmp12 = MULTIPLY(tmp0 + tmp2, FIX(1.121971054));   /* c5 */
+        tmp13 = MULTIPLY(tmp0 + tmp3, FIX(0.860918669));   /* c7 */
+        tmp10 = tmp12 + tmp13 + tmp14 - MULTIPLY(tmp0, FIX(0.580774953)) /* c5+c7-c1 */
+                + MULTIPLY(tmp5, FIX(0.184591911));        /* c11 */
+        tmp11 = MULTIPLY(tmp2 + tmp3, - FIX(0.184591911)); /* -c11 */
+        tmp12 += tmp11 - tmp15 - MULTIPLY(tmp2, FIX(2.339493912)) /* c1+c5-c11 */
+                 + MULTIPLY(tmp5, FIX(0.860918669));        /* c7 */
+        tmp13 += tmp11 - tmp14 + MULTIPLY(tmp3, FIX(0.725788011)) /* c1+c11-c7 */
+                 - MULTIPLY(tmp5, FIX(1.121971054));        /* c5 */
+        tmp11 = tmp15 + MULTIPLY(tmp0 - tmp3, FIX(1.306562965)) /* c3 */
+                - MULTIPLY(tmp2 + tmp5, FIX_0_541196100);  /* c9 */
+
+        dataptr[1] = (DCTELEM) DESCALE(tmp10, CONST_BITS-PASS1_BITS);
+        dataptr[3] = (DCTELEM) DESCALE(tmp11, CONST_BITS-PASS1_BITS);
+        dataptr[5] = (DCTELEM) DESCALE(tmp12, CONST_BITS-PASS1_BITS);
+        dataptr[7] = (DCTELEM) DESCALE(tmp13, CONST_BITS-PASS1_BITS);
+
+        dataptr += DCTSIZE;		/* advance pointer to next row */
+    }
+
+    /* Pass 2: process columns.
+     * We remove the PASS1_BITS scaling, but leave the results scaled up
+     * by an overall factor of 8.
+     * We must also scale the output by (8/12)*(8/6) = 8/9, which we
+     * partially fold into the constant multipliers and final shifting:
+     * 6-point FDCT kernel, cK represents sqrt(2) * cos(K*pi/12) * 16/9.
+     */
+
+    dataptr = data;
+    for (ctr = DCTSIZE-1; ctr >= 0; ctr--)
+    {
+        /* Even part */
+
+        tmp0 = dataptr[DCTSIZE*0] + dataptr[DCTSIZE*5];
+        tmp11 = dataptr[DCTSIZE*1] + dataptr[DCTSIZE*4];
+        tmp2 = dataptr[DCTSIZE*2] + dataptr[DCTSIZE*3];
+
+        tmp10 = tmp0 + tmp2;
+        tmp12 = tmp0 - tmp2;
+
+        tmp0 = dataptr[DCTSIZE*0] - dataptr[DCTSIZE*5];
+        tmp1 = dataptr[DCTSIZE*1] - dataptr[DCTSIZE*4];
+        tmp2 = dataptr[DCTSIZE*2] - dataptr[DCTSIZE*3];
+
+        dataptr[DCTSIZE*0] = (DCTELEM)
+                             DESCALE(MULTIPLY(tmp10 + tmp11, FIX(1.777777778)),         /* 16/9 */
+                                     CONST_BITS+PASS1_BITS+1);
+        dataptr[DCTSIZE*2] = (DCTELEM)
+                             DESCALE(MULTIPLY(tmp12, FIX(2.177324216)),                 /* c2 */
+                                     CONST_BITS+PASS1_BITS+1);
+        dataptr[DCTSIZE*4] = (DCTELEM)
+                             DESCALE(MULTIPLY(tmp10 - tmp11 - tmp11, FIX(1.257078722)), /* c4 */
+                                     CONST_BITS+PASS1_BITS+1);
+
+        /* Odd part */
+
+        tmp10 = MULTIPLY(tmp0 + tmp2, FIX(0.650711829));             /* c5 */
+
+        dataptr[DCTSIZE*1] = (DCTELEM)
+                             DESCALE(tmp10 + MULTIPLY(tmp0 + tmp1, FIX(1.777777778)),   /* 16/9 */
+                                     CONST_BITS+PASS1_BITS+1);
+        dataptr[DCTSIZE*3] = (DCTELEM)
+                             DESCALE(MULTIPLY(tmp0 - tmp1 - tmp2, FIX(1.777777778)),    /* 16/9 */
+                                     CONST_BITS+PASS1_BITS+1);
+        dataptr[DCTSIZE*5] = (DCTELEM)
+                             DESCALE(tmp10 + MULTIPLY(tmp2 - tmp1, FIX(1.777777778)),   /* 16/9 */
+                                     CONST_BITS+PASS1_BITS+1);
+
+        dataptr++;			/* advance pointer to next column */
+    }
+}
+
+
+/*
+ * Perform the forward DCT on a 10x5 sample block.
+ *
+ * 10-point FDCT in pass 1 (rows), 5-point in pass 2 (columns).
+ */
+
+GLOBAL(void)
+jpeg_fdct_10x5 (DCTELEM * data, JSAMPARRAY sample_data, JDIMENSION start_col)
+{
+    INT32 tmp0, tmp1, tmp2, tmp3, tmp4;
+    INT32 tmp10, tmp11, tmp12, tmp13, tmp14;
+    DCTELEM *dataptr;
+    JSAMPROW elemptr;
+    int ctr;
+    SHIFT_TEMPS
+
+    /* Zero 3 bottom rows of output coefficient block. */
+    MEMZERO(&data[DCTSIZE*5], SIZEOF(DCTELEM) * DCTSIZE * 3);
+
+    /* Pass 1: process rows. */
+    /* Note results are scaled up by sqrt(8) compared to a true DCT; */
+    /* furthermore, we scale the results by 2**PASS1_BITS. */
+    /* 10-point FDCT kernel, cK represents sqrt(2) * cos(K*pi/20). */
+
+    dataptr = data;
+    for (ctr = 0; ctr < 5; ctr++)
+    {
+        elemptr = sample_data[ctr] + start_col;
+
+        /* Even part */
+
+        tmp0 = GETJSAMPLE(elemptr[0]) + GETJSAMPLE(elemptr[9]);
+        tmp1 = GETJSAMPLE(elemptr[1]) + GETJSAMPLE(elemptr[8]);
+        tmp12 = GETJSAMPLE(elemptr[2]) + GETJSAMPLE(elemptr[7]);
+        tmp3 = GETJSAMPLE(elemptr[3]) + GETJSAMPLE(elemptr[6]);
+        tmp4 = GETJSAMPLE(elemptr[4]) + GETJSAMPLE(elemptr[5]);
+
+        tmp10 = tmp0 + tmp4;
+        tmp13 = tmp0 - tmp4;
+        tmp11 = tmp1 + tmp3;
+        tmp14 = tmp1 - tmp3;
+
+        tmp0 = GETJSAMPLE(elemptr[0]) - GETJSAMPLE(elemptr[9]);
+        tmp1 = GETJSAMPLE(elemptr[1]) - GETJSAMPLE(elemptr[8]);
+        tmp2 = GETJSAMPLE(elemptr[2]) - GETJSAMPLE(elemptr[7]);
+        tmp3 = GETJSAMPLE(elemptr[3]) - GETJSAMPLE(elemptr[6]);
+        tmp4 = GETJSAMPLE(elemptr[4]) - GETJSAMPLE(elemptr[5]);
+
+        /* Apply unsigned->signed conversion */
+        dataptr[0] = (DCTELEM)
+                     ((tmp10 + tmp11 + tmp12 - 10 * CENTERJSAMPLE) << PASS1_BITS);
+        tmp12 += tmp12;
+        dataptr[4] = (DCTELEM)
+                     DESCALE(MULTIPLY(tmp10 - tmp12, FIX(1.144122806)) - /* c4 */
+                             MULTIPLY(tmp11 - tmp12, FIX(0.437016024)),  /* c8 */
+                             CONST_BITS-PASS1_BITS);
+        tmp10 = MULTIPLY(tmp13 + tmp14, FIX(0.831253876));    /* c6 */
+        dataptr[2] = (DCTELEM)
+                     DESCALE(tmp10 + MULTIPLY(tmp13, FIX(0.513743148)),  /* c2-c6 */
+                             CONST_BITS-PASS1_BITS);
+        dataptr[6] = (DCTELEM)
+                     DESCALE(tmp10 - MULTIPLY(tmp14, FIX(2.176250899)),  /* c2+c6 */
+                             CONST_BITS-PASS1_BITS);
+
+        /* Odd part */
+
+        tmp10 = tmp0 + tmp4;
+        tmp11 = tmp1 - tmp3;
+        dataptr[5] = (DCTELEM) ((tmp10 - tmp11 - tmp2) << PASS1_BITS);
+        tmp2 <<= CONST_BITS;
+        dataptr[1] = (DCTELEM)
+                     DESCALE(MULTIPLY(tmp0, FIX(1.396802247)) +          /* c1 */
+                             MULTIPLY(tmp1, FIX(1.260073511)) + tmp2 +   /* c3 */
+                             MULTIPLY(tmp3, FIX(0.642039522)) +          /* c7 */
+                             MULTIPLY(tmp4, FIX(0.221231742)),           /* c9 */
+                             CONST_BITS-PASS1_BITS);
+        tmp12 = MULTIPLY(tmp0 - tmp4, FIX(0.951056516)) -     /* (c3+c7)/2 */
+                MULTIPLY(tmp1 + tmp3, FIX(0.587785252));      /* (c1-c9)/2 */
+        tmp13 = MULTIPLY(tmp10 + tmp11, FIX(0.309016994)) +   /* (c3-c7)/2 */
+                (tmp11 << (CONST_BITS - 1)) - tmp2;
+        dataptr[3] = (DCTELEM) DESCALE(tmp12 + tmp13, CONST_BITS-PASS1_BITS);
+        dataptr[7] = (DCTELEM) DESCALE(tmp12 - tmp13, CONST_BITS-PASS1_BITS);
+
+        dataptr += DCTSIZE;		/* advance pointer to next row */
+    }
+
+    /* Pass 2: process columns.
+     * We remove the PASS1_BITS scaling, but leave the results scaled up
+     * by an overall factor of 8.
+     * We must also scale the output by (8/10)*(8/5) = 32/25, which we
+     * fold into the constant multipliers:
+     * 5-point FDCT kernel, cK represents sqrt(2) * cos(K*pi/10) * 32/25.
+     */
+
+    dataptr = data;
+    for (ctr = DCTSIZE-1; ctr >= 0; ctr--)
+    {
+        /* Even part */
+
+        tmp0 = dataptr[DCTSIZE*0] + dataptr[DCTSIZE*4];
+        tmp1 = dataptr[DCTSIZE*1] + dataptr[DCTSIZE*3];
+        tmp2 = dataptr[DCTSIZE*2];
+
+        tmp10 = tmp0 + tmp1;
+        tmp11 = tmp0 - tmp1;
+
+        tmp0 = dataptr[DCTSIZE*0] - dataptr[DCTSIZE*4];
+        tmp1 = dataptr[DCTSIZE*1] - dataptr[DCTSIZE*3];
+
+        dataptr[DCTSIZE*0] = (DCTELEM)
+                             DESCALE(MULTIPLY(tmp10 + tmp2, FIX(1.28)),        /* 32/25 */
+                                     CONST_BITS+PASS1_BITS);
+        tmp11 = MULTIPLY(tmp11, FIX(1.011928851));          /* (c2+c4)/2 */
+        tmp10 -= tmp2 << 2;
+        tmp10 = MULTIPLY(tmp10, FIX(0.452548340));          /* (c2-c4)/2 */
+        dataptr[DCTSIZE*2] = (DCTELEM) DESCALE(tmp11 + tmp10, CONST_BITS+PASS1_BITS);
+        dataptr[DCTSIZE*4] = (DCTELEM) DESCALE(tmp11 - tmp10, CONST_BITS+PASS1_BITS);
+
+        /* Odd part */
+
+        tmp10 = MULTIPLY(tmp0 + tmp1, FIX(1.064004961));    /* c3 */
+
+        dataptr[DCTSIZE*1] = (DCTELEM)
+                             DESCALE(tmp10 + MULTIPLY(tmp0, FIX(0.657591230)), /* c1-c3 */
+                                     CONST_BITS+PASS1_BITS);
+        dataptr[DCTSIZE*3] = (DCTELEM)
+                             DESCALE(tmp10 - MULTIPLY(tmp1, FIX(2.785601151)), /* c1+c3 */
+                                     CONST_BITS+PASS1_BITS);
+
+        dataptr++;			/* advance pointer to next column */
+    }
+}
+
+
+/*
+ * Perform the forward DCT on an 8x4 sample block.
+ *
+ * 8-point FDCT in pass 1 (rows), 4-point in pass 2 (columns).
+ */
+
+GLOBAL(void)
+jpeg_fdct_8x4 (DCTELEM * data, JSAMPARRAY sample_data, JDIMENSION start_col)
+{
+    INT32 tmp0, tmp1, tmp2, tmp3;
+    INT32 tmp10, tmp11, tmp12, tmp13;
+    INT32 z1;
+    DCTELEM *dataptr;
+    JSAMPROW elemptr;
+    int ctr;
+    SHIFT_TEMPS
+
+    /* Zero 4 bottom rows of output coefficient block. */
+    MEMZERO(&data[DCTSIZE*4], SIZEOF(DCTELEM) * DCTSIZE * 4);
+
+    /* Pass 1: process rows. */
+    /* Note results are scaled up by sqrt(8) compared to a true DCT; */
+    /* furthermore, we scale the results by 2**PASS1_BITS. */
+    /* We must also scale the output by 8/4 = 2, which we add here. */
+
+    dataptr = data;
+    for (ctr = 0; ctr < 4; ctr++)
+    {
+        elemptr = sample_data[ctr] + start_col;
+
+        /* Even part per LL&M figure 1 --- note that published figure is faulty;
+         * rotator "sqrt(2)*c1" should be "sqrt(2)*c6".
+         */
+
+        tmp0 = GETJSAMPLE(elemptr[0]) + GETJSAMPLE(elemptr[7]);
+        tmp1 = GETJSAMPLE(elemptr[1]) + GETJSAMPLE(elemptr[6]);
+        tmp2 = GETJSAMPLE(elemptr[2]) + GETJSAMPLE(elemptr[5]);
+        tmp3 = GETJSAMPLE(elemptr[3]) + GETJSAMPLE(elemptr[4]);
+
+        tmp10 = tmp0 + tmp3;
+        tmp12 = tmp0 - tmp3;
+        tmp11 = tmp1 + tmp2;
+        tmp13 = tmp1 - tmp2;
+
+        tmp0 = GETJSAMPLE(elemptr[0]) - GETJSAMPLE(elemptr[7]);
+        tmp1 = GETJSAMPLE(elemptr[1]) - GETJSAMPLE(elemptr[6]);
+        tmp2 = GETJSAMPLE(elemptr[2]) - GETJSAMPLE(elemptr[5]);
+        tmp3 = GETJSAMPLE(elemptr[3]) - GETJSAMPLE(elemptr[4]);
+
+        /* Apply unsigned->signed conversion */
+        dataptr[0] = (DCTELEM)
+                     ((tmp10 + tmp11 - 8 * CENTERJSAMPLE) << (PASS1_BITS+1));
+        dataptr[4] = (DCTELEM) ((tmp10 - tmp11) << (PASS1_BITS+1));
+
+        z1 = MULTIPLY(tmp12 + tmp13, FIX_0_541196100);
+        /* Add fudge factor here for final descale. */
+        z1 += ONE << (CONST_BITS-PASS1_BITS-2);
+        dataptr[2] = (DCTELEM) RIGHT_SHIFT(z1 + MULTIPLY(tmp12, FIX_0_765366865),
+                                           CONST_BITS-PASS1_BITS-1);
+        dataptr[6] = (DCTELEM) RIGHT_SHIFT(z1 - MULTIPLY(tmp13, FIX_1_847759065),
+                                           CONST_BITS-PASS1_BITS-1);
+
+        /* Odd part per figure 8 --- note paper omits factor of sqrt(2).
+         * 8-point FDCT kernel, cK represents sqrt(2) * cos(K*pi/16).
+         * i0..i3 in the paper are tmp0..tmp3 here.
+         */
+
+        tmp10 = tmp0 + tmp3;
+        tmp11 = tmp1 + tmp2;
+        tmp12 = tmp0 + tmp2;
+        tmp13 = tmp1 + tmp3;
+        z1 = MULTIPLY(tmp12 + tmp13, FIX_1_175875602); /*  c3 */
+        /* Add fudge factor here for final descale. */
+        z1 += ONE << (CONST_BITS-PASS1_BITS-2);
+
+        tmp0  = MULTIPLY(tmp0,    FIX_1_501321110);    /*  c1+c3-c5-c7 */
+        tmp1  = MULTIPLY(tmp1,    FIX_3_072711026);    /*  c1+c3+c5-c7 */
+        tmp2  = MULTIPLY(tmp2,    FIX_2_053119869);    /*  c1+c3-c5+c7 */
+        tmp3  = MULTIPLY(tmp3,    FIX_0_298631336);    /* -c1+c3+c5-c7 */
+        tmp10 = MULTIPLY(tmp10, - FIX_0_899976223);    /*  c7-c3 */
+        tmp11 = MULTIPLY(tmp11, - FIX_2_562915447);    /* -c1-c3 */
+        tmp12 = MULTIPLY(tmp12, - FIX_0_390180644);    /*  c5-c3 */
+        tmp13 = MULTIPLY(tmp13, - FIX_1_961570560);    /* -c3-c5 */
+
+        tmp12 += z1;
+        tmp13 += z1;
+
+        dataptr[1] = (DCTELEM)
+                     RIGHT_SHIFT(tmp0 + tmp10 + tmp12, CONST_BITS-PASS1_BITS-1);
+        dataptr[3] = (DCTELEM)
+                     RIGHT_SHIFT(tmp1 + tmp11 + tmp13, CONST_BITS-PASS1_BITS-1);
+        dataptr[5] = (DCTELEM)
+                     RIGHT_SHIFT(tmp2 + tmp11 + tmp12, CONST_BITS-PASS1_BITS-1);
+        dataptr[7] = (DCTELEM)
+                     RIGHT_SHIFT(tmp3 + tmp10 + tmp13, CONST_BITS-PASS1_BITS-1);
+
+        dataptr += DCTSIZE;		/* advance pointer to next row */
+    }
+
+    /* Pass 2: process columns.
+     * We remove the PASS1_BITS scaling, but leave the results scaled up
+     * by an overall factor of 8.
+     * 4-point FDCT kernel, cK represents sqrt(2) * cos(K*pi/16).
+     */
+
+    dataptr = data;
+    for (ctr = DCTSIZE-1; ctr >= 0; ctr--)
+    {
+        /* Even part */
+
+        /* Add fudge factor here for final descale. */
+        tmp0 = dataptr[DCTSIZE*0] + dataptr[DCTSIZE*3] + (ONE << (PASS1_BITS-1));
+        tmp1 = dataptr[DCTSIZE*1] + dataptr[DCTSIZE*2];
+
+        tmp10 = dataptr[DCTSIZE*0] - dataptr[DCTSIZE*3];
+        tmp11 = dataptr[DCTSIZE*1] - dataptr[DCTSIZE*2];
+
+        dataptr[DCTSIZE*0] = (DCTELEM) RIGHT_SHIFT(tmp0 + tmp1, PASS1_BITS);
+        dataptr[DCTSIZE*2] = (DCTELEM) RIGHT_SHIFT(tmp0 - tmp1, PASS1_BITS);
+
+        /* Odd part */
+
+        tmp0 = MULTIPLY(tmp10 + tmp11, FIX_0_541196100);   /* c6 */
+        /* Add fudge factor here for final descale. */
+        tmp0 += ONE << (CONST_BITS+PASS1_BITS-1);
+
+        dataptr[DCTSIZE*1] = (DCTELEM)
+                             RIGHT_SHIFT(tmp0 + MULTIPLY(tmp10, FIX_0_765366865), /* c2-c6 */
+                                         CONST_BITS+PASS1_BITS);
+        dataptr[DCTSIZE*3] = (DCTELEM)
+                             RIGHT_SHIFT(tmp0 - MULTIPLY(tmp11, FIX_1_847759065), /* c2+c6 */
+                                         CONST_BITS+PASS1_BITS);
+
+        dataptr++;			/* advance pointer to next column */
+    }
+}
+
+
+/*
+ * Perform the forward DCT on a 6x3 sample block.
+ *
+ * 6-point FDCT in pass 1 (rows), 3-point in pass 2 (columns).
+ */
+
+GLOBAL(void)
+jpeg_fdct_6x3 (DCTELEM * data, JSAMPARRAY sample_data, JDIMENSION start_col)
+{
+    INT32 tmp0, tmp1, tmp2;
+    INT32 tmp10, tmp11, tmp12;
+    DCTELEM *dataptr;
+    JSAMPROW elemptr;
+    int ctr;
+    SHIFT_TEMPS
+
+    /* Pre-zero output coefficient block. */
+    MEMZERO(data, SIZEOF(DCTELEM) * DCTSIZE2);
+
+    /* Pass 1: process rows. */
+    /* Note results are scaled up by sqrt(8) compared to a true DCT; */
+    /* furthermore, we scale the results by 2**PASS1_BITS. */
+    /* We scale the results further by 2 as part of output adaption */
+    /* scaling for different DCT size. */
+    /* 6-point FDCT kernel, cK represents sqrt(2) * cos(K*pi/12). */
+
+    dataptr = data;
+    for (ctr = 0; ctr < 3; ctr++)
+    {
+        elemptr = sample_data[ctr] + start_col;
+
+        /* Even part */
+
+        tmp0 = GETJSAMPLE(elemptr[0]) + GETJSAMPLE(elemptr[5]);
+        tmp11 = GETJSAMPLE(elemptr[1]) + GETJSAMPLE(elemptr[4]);
+        tmp2 = GETJSAMPLE(elemptr[2]) + GETJSAMPLE(elemptr[3]);
+
+        tmp10 = tmp0 + tmp2;
+        tmp12 = tmp0 - tmp2;
+
+        tmp0 = GETJSAMPLE(elemptr[0]) - GETJSAMPLE(elemptr[5]);
+        tmp1 = GETJSAMPLE(elemptr[1]) - GETJSAMPLE(elemptr[4]);
+        tmp2 = GETJSAMPLE(elemptr[2]) - GETJSAMPLE(elemptr[3]);
+
+        /* Apply unsigned->signed conversion */
+        dataptr[0] = (DCTELEM)
+                     ((tmp10 + tmp11 - 6 * CENTERJSAMPLE) << (PASS1_BITS+1));
+        dataptr[2] = (DCTELEM)
+                     DESCALE(MULTIPLY(tmp12, FIX(1.224744871)),                 /* c2 */
+                             CONST_BITS-PASS1_BITS-1);
+        dataptr[4] = (DCTELEM)
+                     DESCALE(MULTIPLY(tmp10 - tmp11 - tmp11, FIX(0.707106781)), /* c4 */
+                             CONST_BITS-PASS1_BITS-1);
+
+        /* Odd part */
+
+        tmp10 = DESCALE(MULTIPLY(tmp0 + tmp2, FIX(0.366025404)),     /* c5 */
+                        CONST_BITS-PASS1_BITS-1);
+
+        dataptr[1] = (DCTELEM) (tmp10 + ((tmp0 + tmp1) << (PASS1_BITS+1)));
+        dataptr[3] = (DCTELEM) ((tmp0 - tmp1 - tmp2) << (PASS1_BITS+1));
+        dataptr[5] = (DCTELEM) (tmp10 + ((tmp2 - tmp1) << (PASS1_BITS+1)));
+
+        dataptr += DCTSIZE;		/* advance pointer to next row */
+    }
+
+    /* Pass 2: process columns.
+     * We remove the PASS1_BITS scaling, but leave the results scaled up
+     * by an overall factor of 8.
+     * We must also scale the output by (8/6)*(8/3) = 32/9, which we partially
+     * fold into the constant multipliers (other part was done in pass 1):
+     * 3-point FDCT kernel, cK represents sqrt(2) * cos(K*pi/6) * 16/9.
+     */
+
+    dataptr = data;
+    for (ctr = 0; ctr < 6; ctr++)
+    {
+        /* Even part */
+
+        tmp0 = dataptr[DCTSIZE*0] + dataptr[DCTSIZE*2];
+        tmp1 = dataptr[DCTSIZE*1];
+
+        tmp2 = dataptr[DCTSIZE*0] - dataptr[DCTSIZE*2];
+
+        dataptr[DCTSIZE*0] = (DCTELEM)
+                             DESCALE(MULTIPLY(tmp0 + tmp1, FIX(1.777777778)),        /* 16/9 */
+                                     CONST_BITS+PASS1_BITS);
+        dataptr[DCTSIZE*2] = (DCTELEM)
+                             DESCALE(MULTIPLY(tmp0 - tmp1 - tmp1, FIX(1.257078722)), /* c2 */
+                                     CONST_BITS+PASS1_BITS);
+
+        /* Odd part */
+
+        dataptr[DCTSIZE*1] = (DCTELEM)
+                             DESCALE(MULTIPLY(tmp2, FIX(2.177324216)),               /* c1 */
+                                     CONST_BITS+PASS1_BITS);
+
+        dataptr++;			/* advance pointer to next column */
+    }
+}
+
+
+/*
+ * Perform the forward DCT on a 4x2 sample block.
+ *
+ * 4-point FDCT in pass 1 (rows), 2-point in pass 2 (columns).
+ */
+
+GLOBAL(void)
+jpeg_fdct_4x2 (DCTELEM * data, JSAMPARRAY sample_data, JDIMENSION start_col)
+{
+    INT32 tmp0, tmp1;
+    INT32 tmp10, tmp11;
+    DCTELEM *dataptr;
+    JSAMPROW elemptr;
+    int ctr;
+    SHIFT_TEMPS
+
+    /* Pre-zero output coefficient block. */
+    MEMZERO(data, SIZEOF(DCTELEM) * DCTSIZE2);
+
+    /* Pass 1: process rows. */
+    /* Note results are scaled up by sqrt(8) compared to a true DCT; */
+    /* furthermore, we scale the results by 2**PASS1_BITS. */
+    /* We must also scale the output by (8/4)*(8/2) = 2**3, which we add here. */
+    /* 4-point FDCT kernel, */
+    /* cK represents sqrt(2) * cos(K*pi/16) [refers to 8-point FDCT]. */
+
+    dataptr = data;
+    for (ctr = 0; ctr < 2; ctr++)
+    {
+        elemptr = sample_data[ctr] + start_col;
+
+        /* Even part */
+
+        tmp0 = GETJSAMPLE(elemptr[0]) + GETJSAMPLE(elemptr[3]);
+        tmp1 = GETJSAMPLE(elemptr[1]) + GETJSAMPLE(elemptr[2]);
+
+        tmp10 = GETJSAMPLE(elemptr[0]) - GETJSAMPLE(elemptr[3]);
+        tmp11 = GETJSAMPLE(elemptr[1]) - GETJSAMPLE(elemptr[2]);
+
+        /* Apply unsigned->signed conversion */
+        dataptr[0] = (DCTELEM)
+                     ((tmp0 + tmp1 - 4 * CENTERJSAMPLE) << (PASS1_BITS+3));
+        dataptr[2] = (DCTELEM) ((tmp0 - tmp1) << (PASS1_BITS+3));
+
+        /* Odd part */
+
+        tmp0 = MULTIPLY(tmp10 + tmp11, FIX_0_541196100);       /* c6 */
+        /* Add fudge factor here for final descale. */
+        tmp0 += ONE << (CONST_BITS-PASS1_BITS-4);
+
+        dataptr[1] = (DCTELEM)
+                     RIGHT_SHIFT(tmp0 + MULTIPLY(tmp10, FIX_0_765366865), /* c2-c6 */
+                                 CONST_BITS-PASS1_BITS-3);
+        dataptr[3] = (DCTELEM)
+                     RIGHT_SHIFT(tmp0 - MULTIPLY(tmp11, FIX_1_847759065), /* c2+c6 */
+                                 CONST_BITS-PASS1_BITS-3);
+
+        dataptr += DCTSIZE;		/* advance pointer to next row */
+    }
+
+    /* Pass 2: process columns.
+     * We remove the PASS1_BITS scaling, but leave the results scaled up
+     * by an overall factor of 8.
+     */
+
+    dataptr = data;
+    for (ctr = 0; ctr < 4; ctr++)
+    {
+        /* Even part */
+
+        /* Add fudge factor here for final descale. */
+        tmp0 = dataptr[DCTSIZE*0] + (ONE << (PASS1_BITS-1));
+        tmp1 = dataptr[DCTSIZE*1];
+
+        dataptr[DCTSIZE*0] = (DCTELEM) RIGHT_SHIFT(tmp0 + tmp1, PASS1_BITS);
+
+        /* Odd part */
+
+        dataptr[DCTSIZE*1] = (DCTELEM) RIGHT_SHIFT(tmp0 - tmp1, PASS1_BITS);
+
+        dataptr++;			/* advance pointer to next column */
+    }
+}
+
+
+/*
+ * Perform the forward DCT on a 2x1 sample block.
+ *
+ * 2-point FDCT in pass 1 (rows), 1-point in pass 2 (columns).
+ */
+
+GLOBAL(void)
+jpeg_fdct_2x1 (DCTELEM * data, JSAMPARRAY sample_data, JDIMENSION start_col)
+{
+    INT32 tmp0, tmp1;
+    JSAMPROW elemptr;
+
+    /* Pre-zero output coefficient block. */
+    MEMZERO(data, SIZEOF(DCTELEM) * DCTSIZE2);
+
+    elemptr = sample_data[0] + start_col;
+
+    tmp0 = GETJSAMPLE(elemptr[0]);
+    tmp1 = GETJSAMPLE(elemptr[1]);
+
+    /* We leave the results scaled up by an overall factor of 8.
+     * We must also scale the output by (8/2)*(8/1) = 2**5.
+     */
+
+    /* Even part */
+    /* Apply unsigned->signed conversion */
+    data[0] = (DCTELEM) ((tmp0 + tmp1 - 2 * CENTERJSAMPLE) << 5);
+
+    /* Odd part */
+    data[1] = (DCTELEM) ((tmp0 - tmp1) << 5);
+}
+
+
+/*
+ * Perform the forward DCT on an 8x16 sample block.
+ *
+ * 8-point FDCT in pass 1 (rows), 16-point in pass 2 (columns).
+ */
+
+GLOBAL(void)
+jpeg_fdct_8x16 (DCTELEM * data, JSAMPARRAY sample_data, JDIMENSION start_col)
+{
+    INT32 tmp0, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, tmp7;
+    INT32 tmp10, tmp11, tmp12, tmp13, tmp14, tmp15, tmp16, tmp17;
+    INT32 z1;
+    DCTELEM workspace[DCTSIZE2];
+    DCTELEM *dataptr;
+    DCTELEM *wsptr;
+    JSAMPROW elemptr;
+    int ctr;
+    SHIFT_TEMPS
+
+    /* Pass 1: process rows. */
+    /* Note results are scaled up by sqrt(8) compared to a true DCT; */
+    /* furthermore, we scale the results by 2**PASS1_BITS. */
+
+    dataptr = data;
+    ctr = 0;
+    for (;;)
+    {
+        elemptr = sample_data[ctr] + start_col;
+
+        /* Even part per LL&M figure 1 --- note that published figure is faulty;
+         * rotator "sqrt(2)*c1" should be "sqrt(2)*c6".
+         */
+
+        tmp0 = GETJSAMPLE(elemptr[0]) + GETJSAMPLE(elemptr[7]);
+        tmp1 = GETJSAMPLE(elemptr[1]) + GETJSAMPLE(elemptr[6]);
+        tmp2 = GETJSAMPLE(elemptr[2]) + GETJSAMPLE(elemptr[5]);
+        tmp3 = GETJSAMPLE(elemptr[3]) + GETJSAMPLE(elemptr[4]);
+
+        tmp10 = tmp0 + tmp3;
+        tmp12 = tmp0 - tmp3;
+        tmp11 = tmp1 + tmp2;
+        tmp13 = tmp1 - tmp2;
+
+        tmp0 = GETJSAMPLE(elemptr[0]) - GETJSAMPLE(elemptr[7]);
+        tmp1 = GETJSAMPLE(elemptr[1]) - GETJSAMPLE(elemptr[6]);
+        tmp2 = GETJSAMPLE(elemptr[2]) - GETJSAMPLE(elemptr[5]);
+        tmp3 = GETJSAMPLE(elemptr[3]) - GETJSAMPLE(elemptr[4]);
+
+        /* Apply unsigned->signed conversion */
+        dataptr[0] = (DCTELEM) ((tmp10 + tmp11 - 8 * CENTERJSAMPLE) << PASS1_BITS);
+        dataptr[4] = (DCTELEM) ((tmp10 - tmp11) << PASS1_BITS);
+
+        z1 = MULTIPLY(tmp12 + tmp13, FIX_0_541196100);
+        dataptr[2] = (DCTELEM) DESCALE(z1 + MULTIPLY(tmp12, FIX_0_765366865),
+                                       CONST_BITS-PASS1_BITS);
+        dataptr[6] = (DCTELEM) DESCALE(z1 - MULTIPLY(tmp13, FIX_1_847759065),
+                                       CONST_BITS-PASS1_BITS);
+
+        /* Odd part per figure 8 --- note paper omits factor of sqrt(2).
+         * 8-point FDCT kernel, cK represents sqrt(2) * cos(K*pi/16).
+         * i0..i3 in the paper are tmp0..tmp3 here.
+         */
+
+        tmp10 = tmp0 + tmp3;
+        tmp11 = tmp1 + tmp2;
+        tmp12 = tmp0 + tmp2;
+        tmp13 = tmp1 + tmp3;
+        z1 = MULTIPLY(tmp12 + tmp13, FIX_1_175875602); /*  c3 */
+
+        tmp0  = MULTIPLY(tmp0,    FIX_1_501321110);    /*  c1+c3-c5-c7 */
+        tmp1  = MULTIPLY(tmp1,    FIX_3_072711026);    /*  c1+c3+c5-c7 */
+        tmp2  = MULTIPLY(tmp2,    FIX_2_053119869);    /*  c1+c3-c5+c7 */
+        tmp3  = MULTIPLY(tmp3,    FIX_0_298631336);    /* -c1+c3+c5-c7 */
+        tmp10 = MULTIPLY(tmp10, - FIX_0_899976223);    /*  c7-c3 */
+        tmp11 = MULTIPLY(tmp11, - FIX_2_562915447);    /* -c1-c3 */
+        tmp12 = MULTIPLY(tmp12, - FIX_0_390180644);    /*  c5-c3 */
+        tmp13 = MULTIPLY(tmp13, - FIX_1_961570560);    /* -c3-c5 */
+
+        tmp12 += z1;
+        tmp13 += z1;
+
+        dataptr[1] = (DCTELEM) DESCALE(tmp0 + tmp10 + tmp12, CONST_BITS-PASS1_BITS);
+        dataptr[3] = (DCTELEM) DESCALE(tmp1 + tmp11 + tmp13, CONST_BITS-PASS1_BITS);
+        dataptr[5] = (DCTELEM) DESCALE(tmp2 + tmp11 + tmp12, CONST_BITS-PASS1_BITS);
+        dataptr[7] = (DCTELEM) DESCALE(tmp3 + tmp10 + tmp13, CONST_BITS-PASS1_BITS);
+
+        ctr++;
+
+        if (ctr != DCTSIZE)
+        {
+            if (ctr == DCTSIZE * 2)
+            {
+                break;    /* Done. */
+            }
+            dataptr += DCTSIZE;	/* advance pointer to next row */
+        }
+        else
+        {
+            dataptr = workspace;    /* switch pointer to extended workspace */
+        }
+    }
+
+    /* Pass 2: process columns.
+     * We remove the PASS1_BITS scaling, but leave the results scaled up
+     * by an overall factor of 8.
+     * We must also scale the output by 8/16 = 1/2.
+     * 16-point FDCT kernel, cK represents sqrt(2) * cos(K*pi/32).
+     */
+
+    dataptr = data;
+    wsptr = workspace;
+    for (ctr = DCTSIZE-1; ctr >= 0; ctr--)
+    {
+        /* Even part */
+
+        tmp0 = dataptr[DCTSIZE*0] + wsptr[DCTSIZE*7];
+        tmp1 = dataptr[DCTSIZE*1] + wsptr[DCTSIZE*6];
+        tmp2 = dataptr[DCTSIZE*2] + wsptr[DCTSIZE*5];
+        tmp3 = dataptr[DCTSIZE*3] + wsptr[DCTSIZE*4];
+        tmp4 = dataptr[DCTSIZE*4] + wsptr[DCTSIZE*3];
+        tmp5 = dataptr[DCTSIZE*5] + wsptr[DCTSIZE*2];
+        tmp6 = dataptr[DCTSIZE*6] + wsptr[DCTSIZE*1];
+        tmp7 = dataptr[DCTSIZE*7] + wsptr[DCTSIZE*0];
+
+        tmp10 = tmp0 + tmp7;
+        tmp14 = tmp0 - tmp7;
+        tmp11 = tmp1 + tmp6;
+        tmp15 = tmp1 - tmp6;
+        tmp12 = tmp2 + tmp5;
+        tmp16 = tmp2 - tmp5;
+        tmp13 = tmp3 + tmp4;
+        tmp17 = tmp3 - tmp4;
+
+        tmp0 = dataptr[DCTSIZE*0] - wsptr[DCTSIZE*7];
+        tmp1 = dataptr[DCTSIZE*1] - wsptr[DCTSIZE*6];
+        tmp2 = dataptr[DCTSIZE*2] - wsptr[DCTSIZE*5];
+        tmp3 = dataptr[DCTSIZE*3] - wsptr[DCTSIZE*4];
+        tmp4 = dataptr[DCTSIZE*4] - wsptr[DCTSIZE*3];
+        tmp5 = dataptr[DCTSIZE*5] - wsptr[DCTSIZE*2];
+        tmp6 = dataptr[DCTSIZE*6] - wsptr[DCTSIZE*1];
+        tmp7 = dataptr[DCTSIZE*7] - wsptr[DCTSIZE*0];
+
+        dataptr[DCTSIZE*0] = (DCTELEM)
+                             DESCALE(tmp10 + tmp11 + tmp12 + tmp13, PASS1_BITS+1);
+        dataptr[DCTSIZE*4] = (DCTELEM)
+                             DESCALE(MULTIPLY(tmp10 - tmp13, FIX(1.306562965)) + /* c4[16] = c2[8] */
+                                     MULTIPLY(tmp11 - tmp12, FIX_0_541196100),   /* c12[16] = c6[8] */
+                                     CONST_BITS+PASS1_BITS+1);
+
+        tmp10 = MULTIPLY(tmp17 - tmp15, FIX(0.275899379)) +   /* c14[16] = c7[8] */
+                MULTIPLY(tmp14 - tmp16, FIX(1.387039845));    /* c2[16] = c1[8] */
+
+        dataptr[DCTSIZE*2] = (DCTELEM)
+                             DESCALE(tmp10 + MULTIPLY(tmp15, FIX(1.451774982))   /* c6+c14 */
+                                     + MULTIPLY(tmp16, FIX(2.172734804)),        /* c2+c10 */
+                                     CONST_BITS+PASS1_BITS+1);
+        dataptr[DCTSIZE*6] = (DCTELEM)
+                             DESCALE(tmp10 - MULTIPLY(tmp14, FIX(0.211164243))   /* c2-c6 */
+                                     - MULTIPLY(tmp17, FIX(1.061594338)),        /* c10+c14 */
+                                     CONST_BITS+PASS1_BITS+1);
+
+        /* Odd part */
+
+        tmp11 = MULTIPLY(tmp0 + tmp1, FIX(1.353318001)) +         /* c3 */
+                MULTIPLY(tmp6 - tmp7, FIX(0.410524528));          /* c13 */
+        tmp12 = MULTIPLY(tmp0 + tmp2, FIX(1.247225013)) +         /* c5 */
+                MULTIPLY(tmp5 + tmp7, FIX(0.666655658));          /* c11 */
+        tmp13 = MULTIPLY(tmp0 + tmp3, FIX(1.093201867)) +         /* c7 */
+                MULTIPLY(tmp4 - tmp7, FIX(0.897167586));          /* c9 */
+        tmp14 = MULTIPLY(tmp1 + tmp2, FIX(0.138617169)) +         /* c15 */
+                MULTIPLY(tmp6 - tmp5, FIX(1.407403738));          /* c1 */
+        tmp15 = MULTIPLY(tmp1 + tmp3, - FIX(0.666655658)) +       /* -c11 */
+                MULTIPLY(tmp4 + tmp6, - FIX(1.247225013));        /* -c5 */
+        tmp16 = MULTIPLY(tmp2 + tmp3, - FIX(1.353318001)) +       /* -c3 */
+                MULTIPLY(tmp5 - tmp4, FIX(0.410524528));          /* c13 */
+        tmp10 = tmp11 + tmp12 + tmp13 -
+                MULTIPLY(tmp0, FIX(2.286341144)) +                /* c7+c5+c3-c1 */
+                MULTIPLY(tmp7, FIX(0.779653625));                 /* c15+c13-c11+c9 */
+        tmp11 += tmp14 + tmp15 + MULTIPLY(tmp1, FIX(0.071888074)) /* c9-c3-c15+c11 */
+                 - MULTIPLY(tmp6, FIX(1.663905119));              /* c7+c13+c1-c5 */
+        tmp12 += tmp14 + tmp16 - MULTIPLY(tmp2, FIX(1.125726048)) /* c7+c5+c15-c3 */
+                 + MULTIPLY(tmp5, FIX(1.227391138));              /* c9-c11+c1-c13 */
+        tmp13 += tmp15 + tmp16 + MULTIPLY(tmp3, FIX(1.065388962)) /* c15+c3+c11-c7 */
+                 + MULTIPLY(tmp4, FIX(2.167985692));              /* c1+c13+c5-c9 */
+
+        dataptr[DCTSIZE*1] = (DCTELEM) DESCALE(tmp10, CONST_BITS+PASS1_BITS+1);
+        dataptr[DCTSIZE*3] = (DCTELEM) DESCALE(tmp11, CONST_BITS+PASS1_BITS+1);
+        dataptr[DCTSIZE*5] = (DCTELEM) DESCALE(tmp12, CONST_BITS+PASS1_BITS+1);
+        dataptr[DCTSIZE*7] = (DCTELEM) DESCALE(tmp13, CONST_BITS+PASS1_BITS+1);
+
+        dataptr++;			/* advance pointer to next column */
+        wsptr++;			/* advance pointer to next column */
+    }
+}
+
+
+/*
+ * Perform the forward DCT on a 7x14 sample block.
+ *
+ * 7-point FDCT in pass 1 (rows), 14-point in pass 2 (columns).
+ */
+
+GLOBAL(void)
+jpeg_fdct_7x14 (DCTELEM * data, JSAMPARRAY sample_data, JDIMENSION start_col)
+{
+    INT32 tmp0, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6;
+    INT32 tmp10, tmp11, tmp12, tmp13, tmp14, tmp15, tmp16;
+    INT32 z1, z2, z3;
+    DCTELEM workspace[8*6];
+    DCTELEM *dataptr;
+    DCTELEM *wsptr;
+    JSAMPROW elemptr;
+    int ctr;
+    SHIFT_TEMPS
+
+    /* Pre-zero output coefficient block. */
+    MEMZERO(data, SIZEOF(DCTELEM) * DCTSIZE2);
+
+    /* Pass 1: process rows. */
+    /* Note results are scaled up by sqrt(8) compared to a true DCT; */
+    /* furthermore, we scale the results by 2**PASS1_BITS. */
+    /* 7-point FDCT kernel, cK represents sqrt(2) * cos(K*pi/14). */
+
+    dataptr = data;
+    ctr = 0;
+    for (;;)
+    {
+        elemptr = sample_data[ctr] + start_col;
+
+        /* Even part */
+
+        tmp0 = GETJSAMPLE(elemptr[0]) + GETJSAMPLE(elemptr[6]);
+        tmp1 = GETJSAMPLE(elemptr[1]) + GETJSAMPLE(elemptr[5]);
+        tmp2 = GETJSAMPLE(elemptr[2]) + GETJSAMPLE(elemptr[4]);
+        tmp3 = GETJSAMPLE(elemptr[3]);
+
+        tmp10 = GETJSAMPLE(elemptr[0]) - GETJSAMPLE(elemptr[6]);
+        tmp11 = GETJSAMPLE(elemptr[1]) - GETJSAMPLE(elemptr[5]);
+        tmp12 = GETJSAMPLE(elemptr[2]) - GETJSAMPLE(elemptr[4]);
+
+        z1 = tmp0 + tmp2;
+        /* Apply unsigned->signed conversion */
+        dataptr[0] = (DCTELEM)
+                     ((z1 + tmp1 + tmp3 - 7 * CENTERJSAMPLE) << PASS1_BITS);
+        tmp3 += tmp3;
+        z1 -= tmp3;
+        z1 -= tmp3;
+        z1 = MULTIPLY(z1, FIX(0.353553391));                /* (c2+c6-c4)/2 */
+        z2 = MULTIPLY(tmp0 - tmp2, FIX(0.920609002));       /* (c2+c4-c6)/2 */
+        z3 = MULTIPLY(tmp1 - tmp2, FIX(0.314692123));       /* c6 */
+        dataptr[2] = (DCTELEM) DESCALE(z1 + z2 + z3, CONST_BITS-PASS1_BITS);
+        z1 -= z2;
+        z2 = MULTIPLY(tmp0 - tmp1, FIX(0.881747734));       /* c4 */
+        dataptr[4] = (DCTELEM)
+                     DESCALE(z2 + z3 - MULTIPLY(tmp1 - tmp3, FIX(0.707106781)), /* c2+c6-c4 */
+                             CONST_BITS-PASS1_BITS);
+        dataptr[6] = (DCTELEM) DESCALE(z1 + z2, CONST_BITS-PASS1_BITS);
+
+        /* Odd part */
+
+        tmp1 = MULTIPLY(tmp10 + tmp11, FIX(0.935414347));   /* (c3+c1-c5)/2 */
+        tmp2 = MULTIPLY(tmp10 - tmp11, FIX(0.170262339));   /* (c3+c5-c1)/2 */
+        tmp0 = tmp1 - tmp2;
+        tmp1 += tmp2;
+        tmp2 = MULTIPLY(tmp11 + tmp12, - FIX(1.378756276)); /* -c1 */
+        tmp1 += tmp2;
+        tmp3 = MULTIPLY(tmp10 + tmp12, FIX(0.613604268));   /* c5 */
+        tmp0 += tmp3;
+        tmp2 += tmp3 + MULTIPLY(tmp12, FIX(1.870828693));   /* c3+c1-c5 */
+
+        dataptr[1] = (DCTELEM) DESCALE(tmp0, CONST_BITS-PASS1_BITS);
+        dataptr[3] = (DCTELEM) DESCALE(tmp1, CONST_BITS-PASS1_BITS);
+        dataptr[5] = (DCTELEM) DESCALE(tmp2, CONST_BITS-PASS1_BITS);
+
+        ctr++;
+
+        if (ctr != DCTSIZE)
+        {
+            if (ctr == 14)
+            {
+                break;    /* Done. */
+            }
+            dataptr += DCTSIZE;	/* advance pointer to next row */
+        }
+        else
+        {
+            dataptr = workspace;    /* switch pointer to extended workspace */
+        }
+    }
+
+    /* Pass 2: process columns.
+     * We remove the PASS1_BITS scaling, but leave the results scaled up
+     * by an overall factor of 8.
+     * We must also scale the output by (8/7)*(8/14) = 32/49, which we
+     * fold into the constant multipliers:
+     * 14-point FDCT kernel, cK represents sqrt(2) * cos(K*pi/28) * 32/49.
+     */
+
+    dataptr = data;
+    wsptr = workspace;
+    for (ctr = 0; ctr < 7; ctr++)
+    {
+        /* Even part */
+
+        tmp0 = dataptr[DCTSIZE*0] + wsptr[DCTSIZE*5];
+        tmp1 = dataptr[DCTSIZE*1] + wsptr[DCTSIZE*4];
+        tmp2 = dataptr[DCTSIZE*2] + wsptr[DCTSIZE*3];
+        tmp13 = dataptr[DCTSIZE*3] + wsptr[DCTSIZE*2];
+        tmp4 = dataptr[DCTSIZE*4] + wsptr[DCTSIZE*1];
+        tmp5 = dataptr[DCTSIZE*5] + wsptr[DCTSIZE*0];
+        tmp6 = dataptr[DCTSIZE*6] + dataptr[DCTSIZE*7];
+
+        tmp10 = tmp0 + tmp6;
+        tmp14 = tmp0 - tmp6;
+        tmp11 = tmp1 + tmp5;
+        tmp15 = tmp1 - tmp5;
+        tmp12 = tmp2 + tmp4;
+        tmp16 = tmp2 - tmp4;
+
+        tmp0 = dataptr[DCTSIZE*0] - wsptr[DCTSIZE*5];
+        tmp1 = dataptr[DCTSIZE*1] - wsptr[DCTSIZE*4];
+        tmp2 = dataptr[DCTSIZE*2] - wsptr[DCTSIZE*3];
+        tmp3 = dataptr[DCTSIZE*3] - wsptr[DCTSIZE*2];
+        tmp4 = dataptr[DCTSIZE*4] - wsptr[DCTSIZE*1];
+        tmp5 = dataptr[DCTSIZE*5] - wsptr[DCTSIZE*0];
+        tmp6 = dataptr[DCTSIZE*6] - dataptr[DCTSIZE*7];
+
+        dataptr[DCTSIZE*0] = (DCTELEM)
+                             DESCALE(MULTIPLY(tmp10 + tmp11 + tmp12 + tmp13,
+                                              FIX(0.653061224)),                 /* 32/49 */
+                                     CONST_BITS+PASS1_BITS);
+        tmp13 += tmp13;
+        dataptr[DCTSIZE*4] = (DCTELEM)
+                             DESCALE(MULTIPLY(tmp10 - tmp13, FIX(0.832106052)) + /* c4 */
+                                     MULTIPLY(tmp11 - tmp13, FIX(0.205513223)) - /* c12 */
+                                     MULTIPLY(tmp12 - tmp13, FIX(0.575835255)),  /* c8 */
+                                     CONST_BITS+PASS1_BITS);
+
+        tmp10 = MULTIPLY(tmp14 + tmp15, FIX(0.722074570));    /* c6 */
+
+        dataptr[DCTSIZE*2] = (DCTELEM)
+                             DESCALE(tmp10 + MULTIPLY(tmp14, FIX(0.178337691))   /* c2-c6 */
+                                     + MULTIPLY(tmp16, FIX(0.400721155)),        /* c10 */
+                                     CONST_BITS+PASS1_BITS);
+        dataptr[DCTSIZE*6] = (DCTELEM)
+                             DESCALE(tmp10 - MULTIPLY(tmp15, FIX(1.122795725))   /* c6+c10 */
+                                     - MULTIPLY(tmp16, FIX(0.900412262)),        /* c2 */
+                                     CONST_BITS+PASS1_BITS);
+
+        /* Odd part */
+
+        tmp10 = tmp1 + tmp2;
+        tmp11 = tmp5 - tmp4;
+        dataptr[DCTSIZE*7] = (DCTELEM)
+                             DESCALE(MULTIPLY(tmp0 - tmp10 + tmp3 - tmp11 - tmp6,
+                                              FIX(0.653061224)),                 /* 32/49 */
+                                     CONST_BITS+PASS1_BITS);
+        tmp3  = MULTIPLY(tmp3 , FIX(0.653061224));            /* 32/49 */
+        tmp10 = MULTIPLY(tmp10, - FIX(0.103406812));          /* -c13 */
+        tmp11 = MULTIPLY(tmp11, FIX(0.917760839));            /* c1 */
+        tmp10 += tmp11 - tmp3;
+        tmp11 = MULTIPLY(tmp0 + tmp2, FIX(0.782007410)) +     /* c5 */
+                MULTIPLY(tmp4 + tmp6, FIX(0.491367823));      /* c9 */
+        dataptr[DCTSIZE*5] = (DCTELEM)
+                             DESCALE(tmp10 + tmp11 - MULTIPLY(tmp2, FIX(1.550341076)) /* c3+c5-c13 */
+                                     + MULTIPLY(tmp4, FIX(0.731428202)),         /* c1+c11-c9 */
+                                     CONST_BITS+PASS1_BITS);
+        tmp12 = MULTIPLY(tmp0 + tmp1, FIX(0.871740478)) +     /* c3 */
+                MULTIPLY(tmp5 - tmp6, FIX(0.305035186));      /* c11 */
+        dataptr[DCTSIZE*3] = (DCTELEM)
+                             DESCALE(tmp10 + tmp12 - MULTIPLY(tmp1, FIX(0.276965844)) /* c3-c9-c13 */
+                                     - MULTIPLY(tmp5, FIX(2.004803435)),         /* c1+c5+c11 */
+                                     CONST_BITS+PASS1_BITS);
+        dataptr[DCTSIZE*1] = (DCTELEM)
+                             DESCALE(tmp11 + tmp12 + tmp3
+                                     - MULTIPLY(tmp0, FIX(0.735987049))          /* c3+c5-c1 */
+                                     - MULTIPLY(tmp6, FIX(0.082925825)),         /* c9-c11-c13 */
+                                     CONST_BITS+PASS1_BITS);
+
+        dataptr++;			/* advance pointer to next column */
+        wsptr++;			/* advance pointer to next column */
+    }
+}
+
+
+/*
+ * Perform the forward DCT on a 6x12 sample block.
+ *
+ * 6-point FDCT in pass 1 (rows), 12-point in pass 2 (columns).
+ */
+
+GLOBAL(void)
+jpeg_fdct_6x12 (DCTELEM * data, JSAMPARRAY sample_data, JDIMENSION start_col)
+{
+    INT32 tmp0, tmp1, tmp2, tmp3, tmp4, tmp5;
+    INT32 tmp10, tmp11, tmp12, tmp13, tmp14, tmp15;
+    DCTELEM workspace[8*4];
+    DCTELEM *dataptr;
+    DCTELEM *wsptr;
+    JSAMPROW elemptr;
+    int ctr;
+    SHIFT_TEMPS
+
+    /* Pre-zero output coefficient block. */
+    MEMZERO(data, SIZEOF(DCTELEM) * DCTSIZE2);
+
+    /* Pass 1: process rows. */
+    /* Note results are scaled up by sqrt(8) compared to a true DCT; */
+    /* furthermore, we scale the results by 2**PASS1_BITS. */
+    /* 6-point FDCT kernel, cK represents sqrt(2) * cos(K*pi/12). */
+
+    dataptr = data;
+    ctr = 0;
+    for (;;)
+    {
+        elemptr = sample_data[ctr] + start_col;
+
+        /* Even part */
+
+        tmp0 = GETJSAMPLE(elemptr[0]) + GETJSAMPLE(elemptr[5]);
+        tmp11 = GETJSAMPLE(elemptr[1]) + GETJSAMPLE(elemptr[4]);
+        tmp2 = GETJSAMPLE(elemptr[2]) + GETJSAMPLE(elemptr[3]);
+
+        tmp10 = tmp0 + tmp2;
+        tmp12 = tmp0 - tmp2;
+
+        tmp0 = GETJSAMPLE(elemptr[0]) - GETJSAMPLE(elemptr[5]);
+        tmp1 = GETJSAMPLE(elemptr[1]) - GETJSAMPLE(elemptr[4]);
+        tmp2 = GETJSAMPLE(elemptr[2]) - GETJSAMPLE(elemptr[3]);
+
+        /* Apply unsigned->signed conversion */
+        dataptr[0] = (DCTELEM)
+                     ((tmp10 + tmp11 - 6 * CENTERJSAMPLE) << PASS1_BITS);
+        dataptr[2] = (DCTELEM)
+                     DESCALE(MULTIPLY(tmp12, FIX(1.224744871)),                 /* c2 */
+                             CONST_BITS-PASS1_BITS);
+        dataptr[4] = (DCTELEM)
+                     DESCALE(MULTIPLY(tmp10 - tmp11 - tmp11, FIX(0.707106781)), /* c4 */
+                             CONST_BITS-PASS1_BITS);
+
+        /* Odd part */
+
+        tmp10 = DESCALE(MULTIPLY(tmp0 + tmp2, FIX(0.366025404)),     /* c5 */
+                        CONST_BITS-PASS1_BITS);
+
+        dataptr[1] = (DCTELEM) (tmp10 + ((tmp0 + tmp1) << PASS1_BITS));
+        dataptr[3] = (DCTELEM) ((tmp0 - tmp1 - tmp2) << PASS1_BITS);
+        dataptr[5] = (DCTELEM) (tmp10 + ((tmp2 - tmp1) << PASS1_BITS));
+
+        ctr++;
+
+        if (ctr != DCTSIZE)
+        {
+            if (ctr == 12)
+            {
+                break;    /* Done. */
+            }
+            dataptr += DCTSIZE;	/* advance pointer to next row */
+        }
+        else
+        {
+            dataptr = workspace;    /* switch pointer to extended workspace */
+        }
+    }
+
+    /* Pass 2: process columns.
+     * We remove the PASS1_BITS scaling, but leave the results scaled up
+     * by an overall factor of 8.
+     * We must also scale the output by (8/6)*(8/12) = 8/9, which we
+     * fold into the constant multipliers:
+     * 12-point FDCT kernel, cK represents sqrt(2) * cos(K*pi/24) * 8/9.
+     */
+
+    dataptr = data;
+    wsptr = workspace;
+    for (ctr = 0; ctr < 6; ctr++)
+    {
+        /* Even part */
+
+        tmp0 = dataptr[DCTSIZE*0] + wsptr[DCTSIZE*3];
+        tmp1 = dataptr[DCTSIZE*1] + wsptr[DCTSIZE*2];
+        tmp2 = dataptr[DCTSIZE*2] + wsptr[DCTSIZE*1];
+        tmp3 = dataptr[DCTSIZE*3] + wsptr[DCTSIZE*0];
+        tmp4 = dataptr[DCTSIZE*4] + dataptr[DCTSIZE*7];
+        tmp5 = dataptr[DCTSIZE*5] + dataptr[DCTSIZE*6];
+
+        tmp10 = tmp0 + tmp5;
+        tmp13 = tmp0 - tmp5;
+        tmp11 = tmp1 + tmp4;
+        tmp14 = tmp1 - tmp4;
+        tmp12 = tmp2 + tmp3;
+        tmp15 = tmp2 - tmp3;
+
+        tmp0 = dataptr[DCTSIZE*0] - wsptr[DCTSIZE*3];
+        tmp1 = dataptr[DCTSIZE*1] - wsptr[DCTSIZE*2];
+        tmp2 = dataptr[DCTSIZE*2] - wsptr[DCTSIZE*1];
+        tmp3 = dataptr[DCTSIZE*3] - wsptr[DCTSIZE*0];
+        tmp4 = dataptr[DCTSIZE*4] - dataptr[DCTSIZE*7];
+        tmp5 = dataptr[DCTSIZE*5] - dataptr[DCTSIZE*6];
+
+        dataptr[DCTSIZE*0] = (DCTELEM)
+                             DESCALE(MULTIPLY(tmp10 + tmp11 + tmp12, FIX(0.888888889)), /* 8/9 */
+                                     CONST_BITS+PASS1_BITS);
+        dataptr[DCTSIZE*6] = (DCTELEM)
+                             DESCALE(MULTIPLY(tmp13 - tmp14 - tmp15, FIX(0.888888889)), /* 8/9 */
+                                     CONST_BITS+PASS1_BITS);
+        dataptr[DCTSIZE*4] = (DCTELEM)
+                             DESCALE(MULTIPLY(tmp10 - tmp12, FIX(1.088662108)),         /* c4 */
+                                     CONST_BITS+PASS1_BITS);
+        dataptr[DCTSIZE*2] = (DCTELEM)
+                             DESCALE(MULTIPLY(tmp14 - tmp15, FIX(0.888888889)) +        /* 8/9 */
+                                     MULTIPLY(tmp13 + tmp15, FIX(1.214244803)),         /* c2 */
+                                     CONST_BITS+PASS1_BITS);
+
+        /* Odd part */
+
+        tmp10 = MULTIPLY(tmp1 + tmp4, FIX(0.481063200));   /* c9 */
+        tmp14 = tmp10 + MULTIPLY(tmp1, FIX(0.680326102));  /* c3-c9 */
+        tmp15 = tmp10 - MULTIPLY(tmp4, FIX(1.642452502));  /* c3+c9 */
+        tmp12 = MULTIPLY(tmp0 + tmp2, FIX(0.997307603));   /* c5 */
+        tmp13 = MULTIPLY(tmp0 + tmp3, FIX(0.765261039));   /* c7 */
+        tmp10 = tmp12 + tmp13 + tmp14 - MULTIPLY(tmp0, FIX(0.516244403)) /* c5+c7-c1 */
+                + MULTIPLY(tmp5, FIX(0.164081699));        /* c11 */
+        tmp11 = MULTIPLY(tmp2 + tmp3, - FIX(0.164081699)); /* -c11 */
+        tmp12 += tmp11 - tmp15 - MULTIPLY(tmp2, FIX(2.079550144)) /* c1+c5-c11 */
+                 + MULTIPLY(tmp5, FIX(0.765261039));        /* c7 */
+        tmp13 += tmp11 - tmp14 + MULTIPLY(tmp3, FIX(0.645144899)) /* c1+c11-c7 */
+                 - MULTIPLY(tmp5, FIX(0.997307603));        /* c5 */
+        tmp11 = tmp15 + MULTIPLY(tmp0 - tmp3, FIX(1.161389302)) /* c3 */
+                - MULTIPLY(tmp2 + tmp5, FIX(0.481063200)); /* c9 */
+
+        dataptr[DCTSIZE*1] = (DCTELEM) DESCALE(tmp10, CONST_BITS+PASS1_BITS);
+        dataptr[DCTSIZE*3] = (DCTELEM) DESCALE(tmp11, CONST_BITS+PASS1_BITS);
+        dataptr[DCTSIZE*5] = (DCTELEM) DESCALE(tmp12, CONST_BITS+PASS1_BITS);
+        dataptr[DCTSIZE*7] = (DCTELEM) DESCALE(tmp13, CONST_BITS+PASS1_BITS);
+
+        dataptr++;			/* advance pointer to next column */
+        wsptr++;			/* advance pointer to next column */
+    }
+}
+
+
+/*
+ * Perform the forward DCT on a 5x10 sample block.
+ *
+ * 5-point FDCT in pass 1 (rows), 10-point in pass 2 (columns).
+ */
+
+GLOBAL(void)
+jpeg_fdct_5x10 (DCTELEM * data, JSAMPARRAY sample_data, JDIMENSION start_col)
+{
+    INT32 tmp0, tmp1, tmp2, tmp3, tmp4;
+    INT32 tmp10, tmp11, tmp12, tmp13, tmp14;
+    DCTELEM workspace[8*2];
+    DCTELEM *dataptr;
+    DCTELEM *wsptr;
+    JSAMPROW elemptr;
+    int ctr;
+    SHIFT_TEMPS
+
+    /* Pre-zero output coefficient block. */
+    MEMZERO(data, SIZEOF(DCTELEM) * DCTSIZE2);
+
+    /* Pass 1: process rows. */
+    /* Note results are scaled up by sqrt(8) compared to a true DCT; */
+    /* furthermore, we scale the results by 2**PASS1_BITS. */
+    /* 5-point FDCT kernel, cK represents sqrt(2) * cos(K*pi/10). */
+
+    dataptr = data;
+    ctr = 0;
+    for (;;)
+    {
+        elemptr = sample_data[ctr] + start_col;
+
+        /* Even part */
+
+        tmp0 = GETJSAMPLE(elemptr[0]) + GETJSAMPLE(elemptr[4]);
+        tmp1 = GETJSAMPLE(elemptr[1]) + GETJSAMPLE(elemptr[3]);
+        tmp2 = GETJSAMPLE(elemptr[2]);
+
+        tmp10 = tmp0 + tmp1;
+        tmp11 = tmp0 - tmp1;
+
+        tmp0 = GETJSAMPLE(elemptr[0]) - GETJSAMPLE(elemptr[4]);
+        tmp1 = GETJSAMPLE(elemptr[1]) - GETJSAMPLE(elemptr[3]);
+
+        /* Apply unsigned->signed conversion */
+        dataptr[0] = (DCTELEM)
+                     ((tmp10 + tmp2 - 5 * CENTERJSAMPLE) << PASS1_BITS);
+        tmp11 = MULTIPLY(tmp11, FIX(0.790569415));          /* (c2+c4)/2 */
+        tmp10 -= tmp2 << 2;
+        tmp10 = MULTIPLY(tmp10, FIX(0.353553391));          /* (c2-c4)/2 */
+        dataptr[2] = (DCTELEM) DESCALE(tmp11 + tmp10, CONST_BITS-PASS1_BITS);
+        dataptr[4] = (DCTELEM) DESCALE(tmp11 - tmp10, CONST_BITS-PASS1_BITS);
+
+        /* Odd part */
+
+        tmp10 = MULTIPLY(tmp0 + tmp1, FIX(0.831253876));    /* c3 */
+
+        dataptr[1] = (DCTELEM)
+                     DESCALE(tmp10 + MULTIPLY(tmp0, FIX(0.513743148)), /* c1-c3 */
+                             CONST_BITS-PASS1_BITS);
+        dataptr[3] = (DCTELEM)
+                     DESCALE(tmp10 - MULTIPLY(tmp1, FIX(2.176250899)), /* c1+c3 */
+                             CONST_BITS-PASS1_BITS);
+
+        ctr++;
+
+        if (ctr != DCTSIZE)
+        {
+            if (ctr == 10)
+            {
+                break;    /* Done. */
+            }
+            dataptr += DCTSIZE;	/* advance pointer to next row */
+        }
+        else
+        {
+            dataptr = workspace;    /* switch pointer to extended workspace */
+        }
+    }
+
+    /* Pass 2: process columns.
+     * We remove the PASS1_BITS scaling, but leave the results scaled up
+     * by an overall factor of 8.
+     * We must also scale the output by (8/5)*(8/10) = 32/25, which we
+     * fold into the constant multipliers:
+     * 10-point FDCT kernel, cK represents sqrt(2) * cos(K*pi/20) * 32/25.
+     */
+
+    dataptr = data;
+    wsptr = workspace;
+    for (ctr = 0; ctr < 5; ctr++)
+    {
+        /* Even part */
+
+        tmp0 = dataptr[DCTSIZE*0] + wsptr[DCTSIZE*1];
+        tmp1 = dataptr[DCTSIZE*1] + wsptr[DCTSIZE*0];
+        tmp12 = dataptr[DCTSIZE*2] + dataptr[DCTSIZE*7];
+        tmp3 = dataptr[DCTSIZE*3] + dataptr[DCTSIZE*6];
+        tmp4 = dataptr[DCTSIZE*4] + dataptr[DCTSIZE*5];
+
+        tmp10 = tmp0 + tmp4;
+        tmp13 = tmp0 - tmp4;
+        tmp11 = tmp1 + tmp3;
+        tmp14 = tmp1 - tmp3;
+
+        tmp0 = dataptr[DCTSIZE*0] - wsptr[DCTSIZE*1];
+        tmp1 = dataptr[DCTSIZE*1] - wsptr[DCTSIZE*0];
+        tmp2 = dataptr[DCTSIZE*2] - dataptr[DCTSIZE*7];
+        tmp3 = dataptr[DCTSIZE*3] - dataptr[DCTSIZE*6];
+        tmp4 = dataptr[DCTSIZE*4] - dataptr[DCTSIZE*5];
+
+        dataptr[DCTSIZE*0] = (DCTELEM)
+                             DESCALE(MULTIPLY(tmp10 + tmp11 + tmp12, FIX(1.28)), /* 32/25 */
+                                     CONST_BITS+PASS1_BITS);
+        tmp12 += tmp12;
+        dataptr[DCTSIZE*4] = (DCTELEM)
+                             DESCALE(MULTIPLY(tmp10 - tmp12, FIX(1.464477191)) - /* c4 */
+                                     MULTIPLY(tmp11 - tmp12, FIX(0.559380511)),  /* c8 */
+                                     CONST_BITS+PASS1_BITS);
+        tmp10 = MULTIPLY(tmp13 + tmp14, FIX(1.064004961));    /* c6 */
+        dataptr[DCTSIZE*2] = (DCTELEM)
+                             DESCALE(tmp10 + MULTIPLY(tmp13, FIX(0.657591230)),  /* c2-c6 */
+                                     CONST_BITS+PASS1_BITS);
+        dataptr[DCTSIZE*6] = (DCTELEM)
+                             DESCALE(tmp10 - MULTIPLY(tmp14, FIX(2.785601151)),  /* c2+c6 */
+                                     CONST_BITS+PASS1_BITS);
+
+        /* Odd part */
+
+        tmp10 = tmp0 + tmp4;
+        tmp11 = tmp1 - tmp3;
+        dataptr[DCTSIZE*5] = (DCTELEM)
+                             DESCALE(MULTIPLY(tmp10 - tmp11 - tmp2, FIX(1.28)),  /* 32/25 */
+                                     CONST_BITS+PASS1_BITS);
+        tmp2 = MULTIPLY(tmp2, FIX(1.28));                     /* 32/25 */
+        dataptr[DCTSIZE*1] = (DCTELEM)
+                             DESCALE(MULTIPLY(tmp0, FIX(1.787906876)) +          /* c1 */
+                                     MULTIPLY(tmp1, FIX(1.612894094)) + tmp2 +   /* c3 */
+                                     MULTIPLY(tmp3, FIX(0.821810588)) +          /* c7 */
+                                     MULTIPLY(tmp4, FIX(0.283176630)),           /* c9 */
+                                     CONST_BITS+PASS1_BITS);
+        tmp12 = MULTIPLY(tmp0 - tmp4, FIX(1.217352341)) -     /* (c3+c7)/2 */
+                MULTIPLY(tmp1 + tmp3, FIX(0.752365123));      /* (c1-c9)/2 */
+        tmp13 = MULTIPLY(tmp10 + tmp11, FIX(0.395541753)) +   /* (c3-c7)/2 */
+                MULTIPLY(tmp11, FIX(0.64)) - tmp2;            /* 16/25 */
+        dataptr[DCTSIZE*3] = (DCTELEM) DESCALE(tmp12 + tmp13, CONST_BITS+PASS1_BITS);
+        dataptr[DCTSIZE*7] = (DCTELEM) DESCALE(tmp12 - tmp13, CONST_BITS+PASS1_BITS);
+
+        dataptr++;			/* advance pointer to next column */
+        wsptr++;			/* advance pointer to next column */
+    }
+}
+
+
+/*
+ * Perform the forward DCT on a 4x8 sample block.
+ *
+ * 4-point FDCT in pass 1 (rows), 8-point in pass 2 (columns).
+ */
+
+GLOBAL(void)
+jpeg_fdct_4x8 (DCTELEM * data, JSAMPARRAY sample_data, JDIMENSION start_col)
+{
+    INT32 tmp0, tmp1, tmp2, tmp3;
+    INT32 tmp10, tmp11, tmp12, tmp13;
+    INT32 z1;
+    DCTELEM *dataptr;
+    JSAMPROW elemptr;
+    int ctr;
+    SHIFT_TEMPS
+
+    /* Pre-zero output coefficient block. */
+    MEMZERO(data, SIZEOF(DCTELEM) * DCTSIZE2);
+
+    /* Pass 1: process rows. */
+    /* Note results are scaled up by sqrt(8) compared to a true DCT; */
+    /* furthermore, we scale the results by 2**PASS1_BITS. */
+    /* We must also scale the output by 8/4 = 2, which we add here. */
+    /* 4-point FDCT kernel, cK represents sqrt(2) * cos(K*pi/16). */
+
+    dataptr = data;
+    for (ctr = 0; ctr < DCTSIZE; ctr++)
+    {
+        elemptr = sample_data[ctr] + start_col;
+
+        /* Even part */
+
+        tmp0 = GETJSAMPLE(elemptr[0]) + GETJSAMPLE(elemptr[3]);
+        tmp1 = GETJSAMPLE(elemptr[1]) + GETJSAMPLE(elemptr[2]);
+
+        tmp10 = GETJSAMPLE(elemptr[0]) - GETJSAMPLE(elemptr[3]);
+        tmp11 = GETJSAMPLE(elemptr[1]) - GETJSAMPLE(elemptr[2]);
+
+        /* Apply unsigned->signed conversion */
+        dataptr[0] = (DCTELEM)
+                     ((tmp0 + tmp1 - 4 * CENTERJSAMPLE) << (PASS1_BITS+1));
+        dataptr[2] = (DCTELEM) ((tmp0 - tmp1) << (PASS1_BITS+1));
+
+        /* Odd part */
+
+        tmp0 = MULTIPLY(tmp10 + tmp11, FIX_0_541196100);       /* c6 */
+        /* Add fudge factor here for final descale. */
+        tmp0 += ONE << (CONST_BITS-PASS1_BITS-2);
+
+        dataptr[1] = (DCTELEM)
+                     RIGHT_SHIFT(tmp0 + MULTIPLY(tmp10, FIX_0_765366865), /* c2-c6 */
+                                 CONST_BITS-PASS1_BITS-1);
+        dataptr[3] = (DCTELEM)
+                     RIGHT_SHIFT(tmp0 - MULTIPLY(tmp11, FIX_1_847759065), /* c2+c6 */
+                                 CONST_BITS-PASS1_BITS-1);
+
+        dataptr += DCTSIZE;		/* advance pointer to next row */
+    }
+
+    /* Pass 2: process columns.
+     * We remove the PASS1_BITS scaling, but leave the results scaled up
+     * by an overall factor of 8.
+     */
+
+    dataptr = data;
+    for (ctr = 0; ctr < 4; ctr++)
+    {
+        /* Even part per LL&M figure 1 --- note that published figure is faulty;
+         * rotator "sqrt(2)*c1" should be "sqrt(2)*c6".
+         */
+
+        tmp0 = dataptr[DCTSIZE*0] + dataptr[DCTSIZE*7];
+        tmp1 = dataptr[DCTSIZE*1] + dataptr[DCTSIZE*6];
+        tmp2 = dataptr[DCTSIZE*2] + dataptr[DCTSIZE*5];
+        tmp3 = dataptr[DCTSIZE*3] + dataptr[DCTSIZE*4];
+
+        /* Add fudge factor here for final descale. */
+        tmp10 = tmp0 + tmp3 + (ONE << (PASS1_BITS-1));
+        tmp12 = tmp0 - tmp3;
+        tmp11 = tmp1 + tmp2;
+        tmp13 = tmp1 - tmp2;
+
+        tmp0 = dataptr[DCTSIZE*0] - dataptr[DCTSIZE*7];
+        tmp1 = dataptr[DCTSIZE*1] - dataptr[DCTSIZE*6];
+        tmp2 = dataptr[DCTSIZE*2] - dataptr[DCTSIZE*5];
+        tmp3 = dataptr[DCTSIZE*3] - dataptr[DCTSIZE*4];
+
+        dataptr[DCTSIZE*0] = (DCTELEM) RIGHT_SHIFT(tmp10 + tmp11, PASS1_BITS);
+        dataptr[DCTSIZE*4] = (DCTELEM) RIGHT_SHIFT(tmp10 - tmp11, PASS1_BITS);
+
+        z1 = MULTIPLY(tmp12 + tmp13, FIX_0_541196100);
+        /* Add fudge factor here for final descale. */
+        z1 += ONE << (CONST_BITS+PASS1_BITS-1);
+        dataptr[DCTSIZE*2] = (DCTELEM)
+                             RIGHT_SHIFT(z1 + MULTIPLY(tmp12, FIX_0_765366865), CONST_BITS+PASS1_BITS);
+        dataptr[DCTSIZE*6] = (DCTELEM)
+                             RIGHT_SHIFT(z1 - MULTIPLY(tmp13, FIX_1_847759065), CONST_BITS+PASS1_BITS);
+
+        /* Odd part per figure 8 --- note paper omits factor of sqrt(2).
+         * 8-point FDCT kernel, cK represents sqrt(2) * cos(K*pi/16).
+         * i0..i3 in the paper are tmp0..tmp3 here.
+         */
+
+        tmp10 = tmp0 + tmp3;
+        tmp11 = tmp1 + tmp2;
+        tmp12 = tmp0 + tmp2;
+        tmp13 = tmp1 + tmp3;
+        z1 = MULTIPLY(tmp12 + tmp13, FIX_1_175875602); /*  c3 */
+        /* Add fudge factor here for final descale. */
+        z1 += ONE << (CONST_BITS+PASS1_BITS-1);
+
+        tmp0  = MULTIPLY(tmp0,    FIX_1_501321110);    /*  c1+c3-c5-c7 */
+        tmp1  = MULTIPLY(tmp1,    FIX_3_072711026);    /*  c1+c3+c5-c7 */
+        tmp2  = MULTIPLY(tmp2,    FIX_2_053119869);    /*  c1+c3-c5+c7 */
+        tmp3  = MULTIPLY(tmp3,    FIX_0_298631336);    /* -c1+c3+c5-c7 */
+        tmp10 = MULTIPLY(tmp10, - FIX_0_899976223);    /*  c7-c3 */
+        tmp11 = MULTIPLY(tmp11, - FIX_2_562915447);    /* -c1-c3 */
+        tmp12 = MULTIPLY(tmp12, - FIX_0_390180644);    /*  c5-c3 */
+        tmp13 = MULTIPLY(tmp13, - FIX_1_961570560);    /* -c3-c5 */
+
+        tmp12 += z1;
+        tmp13 += z1;
+
+        dataptr[DCTSIZE*1] = (DCTELEM)
+                             RIGHT_SHIFT(tmp0 + tmp10 + tmp12, CONST_BITS+PASS1_BITS);
+        dataptr[DCTSIZE*3] = (DCTELEM)
+                             RIGHT_SHIFT(tmp1 + tmp11 + tmp13, CONST_BITS+PASS1_BITS);
+        dataptr[DCTSIZE*5] = (DCTELEM)
+                             RIGHT_SHIFT(tmp2 + tmp11 + tmp12, CONST_BITS+PASS1_BITS);
+        dataptr[DCTSIZE*7] = (DCTELEM)
+                             RIGHT_SHIFT(tmp3 + tmp10 + tmp13, CONST_BITS+PASS1_BITS);
+
+        dataptr++;			/* advance pointer to next column */
+    }
+}
+
+
+/*
+ * Perform the forward DCT on a 3x6 sample block.
+ *
+ * 3-point FDCT in pass 1 (rows), 6-point in pass 2 (columns).
+ */
+
+GLOBAL(void)
+jpeg_fdct_3x6 (DCTELEM * data, JSAMPARRAY sample_data, JDIMENSION start_col)
+{
+    INT32 tmp0, tmp1, tmp2;
+    INT32 tmp10, tmp11, tmp12;
+    DCTELEM *dataptr;
+    JSAMPROW elemptr;
+    int ctr;
+    SHIFT_TEMPS
+
+    /* Pre-zero output coefficient block. */
+    MEMZERO(data, SIZEOF(DCTELEM) * DCTSIZE2);
+
+    /* Pass 1: process rows. */
+    /* Note results are scaled up by sqrt(8) compared to a true DCT; */
+    /* furthermore, we scale the results by 2**PASS1_BITS. */
+    /* We scale the results further by 2 as part of output adaption */
+    /* scaling for different DCT size. */
+    /* 3-point FDCT kernel, cK represents sqrt(2) * cos(K*pi/6). */
+
+    dataptr = data;
+    for (ctr = 0; ctr < 6; ctr++)
+    {
+        elemptr = sample_data[ctr] + start_col;
+
+        /* Even part */
+
+        tmp0 = GETJSAMPLE(elemptr[0]) + GETJSAMPLE(elemptr[2]);
+        tmp1 = GETJSAMPLE(elemptr[1]);
+
+        tmp2 = GETJSAMPLE(elemptr[0]) - GETJSAMPLE(elemptr[2]);
+
+        /* Apply unsigned->signed conversion */
+        dataptr[0] = (DCTELEM)
+                     ((tmp0 + tmp1 - 3 * CENTERJSAMPLE) << (PASS1_BITS+1));
+        dataptr[2] = (DCTELEM)
+                     DESCALE(MULTIPLY(tmp0 - tmp1 - tmp1, FIX(0.707106781)), /* c2 */
+                             CONST_BITS-PASS1_BITS-1);
+
+        /* Odd part */
+
+        dataptr[1] = (DCTELEM)
+                     DESCALE(MULTIPLY(tmp2, FIX(1.224744871)),               /* c1 */
+                             CONST_BITS-PASS1_BITS-1);
+
+        dataptr += DCTSIZE;		/* advance pointer to next row */
+    }
+
+    /* Pass 2: process columns.
+     * We remove the PASS1_BITS scaling, but leave the results scaled up
+     * by an overall factor of 8.
+     * We must also scale the output by (8/6)*(8/3) = 32/9, which we partially
+     * fold into the constant multipliers (other part was done in pass 1):
+     * 6-point FDCT kernel, cK represents sqrt(2) * cos(K*pi/12) * 16/9.
+     */
+
+    dataptr = data;
+    for (ctr = 0; ctr < 3; ctr++)
+    {
+        /* Even part */
+
+        tmp0 = dataptr[DCTSIZE*0] + dataptr[DCTSIZE*5];
+        tmp11 = dataptr[DCTSIZE*1] + dataptr[DCTSIZE*4];
+        tmp2 = dataptr[DCTSIZE*2] + dataptr[DCTSIZE*3];
+
+        tmp10 = tmp0 + tmp2;
+        tmp12 = tmp0 - tmp2;
+
+        tmp0 = dataptr[DCTSIZE*0] - dataptr[DCTSIZE*5];
+        tmp1 = dataptr[DCTSIZE*1] - dataptr[DCTSIZE*4];
+        tmp2 = dataptr[DCTSIZE*2] - dataptr[DCTSIZE*3];
+
+        dataptr[DCTSIZE*0] = (DCTELEM)
+                             DESCALE(MULTIPLY(tmp10 + tmp11, FIX(1.777777778)),         /* 16/9 */
+                                     CONST_BITS+PASS1_BITS);
+        dataptr[DCTSIZE*2] = (DCTELEM)
+                             DESCALE(MULTIPLY(tmp12, FIX(2.177324216)),                 /* c2 */
+                                     CONST_BITS+PASS1_BITS);
+        dataptr[DCTSIZE*4] = (DCTELEM)
+                             DESCALE(MULTIPLY(tmp10 - tmp11 - tmp11, FIX(1.257078722)), /* c4 */
+                                     CONST_BITS+PASS1_BITS);
+
+        /* Odd part */
+
+        tmp10 = MULTIPLY(tmp0 + tmp2, FIX(0.650711829));             /* c5 */
+
+        dataptr[DCTSIZE*1] = (DCTELEM)
+                             DESCALE(tmp10 + MULTIPLY(tmp0 + tmp1, FIX(1.777777778)),   /* 16/9 */
+                                     CONST_BITS+PASS1_BITS);
+        dataptr[DCTSIZE*3] = (DCTELEM)
+                             DESCALE(MULTIPLY(tmp0 - tmp1 - tmp2, FIX(1.777777778)),    /* 16/9 */
+                                     CONST_BITS+PASS1_BITS);
+        dataptr[DCTSIZE*5] = (DCTELEM)
+                             DESCALE(tmp10 + MULTIPLY(tmp2 - tmp1, FIX(1.777777778)),   /* 16/9 */
+                                     CONST_BITS+PASS1_BITS);
+
+        dataptr++;			/* advance pointer to next column */
+    }
+}
+
+
+/*
+ * Perform the forward DCT on a 2x4 sample block.
+ *
+ * 2-point FDCT in pass 1 (rows), 4-point in pass 2 (columns).
+ */
+
+GLOBAL(void)
+jpeg_fdct_2x4 (DCTELEM * data, JSAMPARRAY sample_data, JDIMENSION start_col)
+{
+    INT32 tmp0, tmp1;
+    INT32 tmp10, tmp11;
+    DCTELEM *dataptr;
+    JSAMPROW elemptr;
+    int ctr;
+    SHIFT_TEMPS
+
+    /* Pre-zero output coefficient block. */
+    MEMZERO(data, SIZEOF(DCTELEM) * DCTSIZE2);
+
+    /* Pass 1: process rows. */
+    /* Note results are scaled up by sqrt(8) compared to a true DCT. */
+    /* We must also scale the output by (8/2)*(8/4) = 2**3, which we add here. */
+
+    dataptr = data;
+    for (ctr = 0; ctr < 4; ctr++)
+    {
+        elemptr = sample_data[ctr] + start_col;
+
+        /* Even part */
+
+        tmp0 = GETJSAMPLE(elemptr[0]);
+        tmp1 = GETJSAMPLE(elemptr[1]);
+
+        /* Apply unsigned->signed conversion */
+        dataptr[0] = (DCTELEM) ((tmp0 + tmp1 - 2 * CENTERJSAMPLE) << 3);
+
+        /* Odd part */
+
+        dataptr[1] = (DCTELEM) ((tmp0 - tmp1) << 3);
+
+        dataptr += DCTSIZE;		/* advance pointer to next row */
+    }
+
+    /* Pass 2: process columns.
+     * We leave the results scaled up by an overall factor of 8.
+     * 4-point FDCT kernel,
+     * cK represents sqrt(2) * cos(K*pi/16) [refers to 8-point FDCT].
+     */
+
+    dataptr = data;
+    for (ctr = 0; ctr < 2; ctr++)
+    {
+        /* Even part */
+
+        tmp0 = dataptr[DCTSIZE*0] + dataptr[DCTSIZE*3];
+        tmp1 = dataptr[DCTSIZE*1] + dataptr[DCTSIZE*2];
+
+        tmp10 = dataptr[DCTSIZE*0] - dataptr[DCTSIZE*3];
+        tmp11 = dataptr[DCTSIZE*1] - dataptr[DCTSIZE*2];
+
+        dataptr[DCTSIZE*0] = (DCTELEM) (tmp0 + tmp1);
+        dataptr[DCTSIZE*2] = (DCTELEM) (tmp0 - tmp1);
+
+        /* Odd part */
+
+        tmp0 = MULTIPLY(tmp10 + tmp11, FIX_0_541196100);       /* c6 */
+        /* Add fudge factor here for final descale. */
+        tmp0 += ONE << (CONST_BITS-1);
+
+        dataptr[DCTSIZE*1] = (DCTELEM)
+                             RIGHT_SHIFT(tmp0 + MULTIPLY(tmp10, FIX_0_765366865), /* c2-c6 */
+                                         CONST_BITS);
+        dataptr[DCTSIZE*3] = (DCTELEM)
+                             RIGHT_SHIFT(tmp0 - MULTIPLY(tmp11, FIX_1_847759065), /* c2+c6 */
+                                         CONST_BITS);
+
+        dataptr++;			/* advance pointer to next column */
+    }
+}
+
+
+/*
+ * Perform the forward DCT on a 1x2 sample block.
+ *
+ * 1-point FDCT in pass 1 (rows), 2-point in pass 2 (columns).
+ */
+
+GLOBAL(void)
+jpeg_fdct_1x2 (DCTELEM * data, JSAMPARRAY sample_data, JDIMENSION start_col)
+{
+    INT32 tmp0, tmp1;
+
+    /* Pre-zero output coefficient block. */
+    MEMZERO(data, SIZEOF(DCTELEM) * DCTSIZE2);
+
+    tmp0 = GETJSAMPLE(sample_data[0][start_col]);
+    tmp1 = GETJSAMPLE(sample_data[1][start_col]);
+
+    /* We leave the results scaled up by an overall factor of 8.
+     * We must also scale the output by (8/1)*(8/2) = 2**5.
+     */
+
+    /* Even part */
+    /* Apply unsigned->signed conversion */
+    data[DCTSIZE*0] = (DCTELEM) ((tmp0 + tmp1 - 2 * CENTERJSAMPLE) << 5);
+
+    /* Odd part */
+    data[DCTSIZE*1] = (DCTELEM) ((tmp0 - tmp1) << 5);
+}
+
+#endif /* DCT_SCALING_SUPPORTED */
+#endif /* DCT_ISLOW_SUPPORTED */
diff -NEaurb neo/renderer/jpeg-8c/jidctflt.c neo/renderer/jpeg-8c/jidctflt.c
--- neo/renderer/jpeg-8c/jidctflt.c	1970-01-01 00:00:00 +0000
+++ neo/renderer/jpeg-8c/jidctflt.c	2012-11-17 01:20:41 +0000
@@ -0,0 +1,238 @@
+/*
+ * jidctflt.c
+ *
+ * Copyright (C) 1994-1998, Thomas G. Lane.
+ * Modified 2010 by Guido Vollbeding.
+ * This file is part of the Independent JPEG Group's software.
+ * For conditions of distribution and use, see the accompanying README file.
+ *
+ * This file contains a floating-point implementation of the
+ * inverse DCT (Discrete Cosine Transform).  In the IJG code, this routine
+ * must also perform dequantization of the input coefficients.
+ *
+ * This implementation should be more accurate than either of the integer
+ * IDCT implementations.  However, it may not give the same results on all
+ * machines because of differences in roundoff behavior.  Speed will depend
+ * on the hardware's floating point capacity.
+ *
+ * A 2-D IDCT can be done by 1-D IDCT on each column followed by 1-D IDCT
+ * on each row (or vice versa, but it's more convenient to emit a row at
+ * a time).  Direct algorithms are also available, but they are much more
+ * complex and seem not to be any faster when reduced to code.
+ *
+ * This implementation is based on Arai, Agui, and Nakajima's algorithm for
+ * scaled DCT.  Their original paper (Trans. IEICE E-71(11):1095) is in
+ * Japanese, but the algorithm is described in the Pennebaker & Mitchell
+ * JPEG textbook (see REFERENCES section in file README).  The following code
+ * is based directly on figure 4-8 in P&M.
+ * While an 8-point DCT cannot be done in less than 11 multiplies, it is
+ * possible to arrange the computation so that many of the multiplies are
+ * simple scalings of the final outputs.  These multiplies can then be
+ * folded into the multiplications or divisions by the JPEG quantization
+ * table entries.  The AA&N method leaves only 5 multiplies and 29 adds
+ * to be done in the DCT itself.
+ * The primary disadvantage of this method is that with a fixed-point
+ * implementation, accuracy is lost due to imprecise representation of the
+ * scaled quantization values.  However, that problem does not arise if
+ * we use floating point arithmetic.
+ */
+
+#define JPEG_INTERNALS
+#include "jinclude.h"
+#include "jpeglib.h"
+#include "jdct.h"		/* Private declarations for DCT subsystem */
+
+#ifdef DCT_FLOAT_SUPPORTED
+
+
+/*
+ * This module is specialized to the case DCTSIZE = 8.
+ */
+
+#if DCTSIZE != 8
+Sorry, this code only copes with 8x8 DCTs. /* deliberate syntax err */
+#endif
+
+
+/* Dequantize a coefficient by multiplying it by the multiplier-table
+ * entry; produce a float result.
+ */
+
+#define DEQUANTIZE(coef,quantval)  (((FAST_FLOAT) (coef)) * (quantval))
+
+
+/*
+ * Perform dequantization and inverse DCT on one block of coefficients.
+ */
+
+GLOBAL(void)
+jpeg_idct_float (j_decompress_ptr cinfo, jpeg_component_info * compptr,
+                 JCOEFPTR coef_block,
+                 JSAMPARRAY output_buf, JDIMENSION output_col)
+{
+    FAST_FLOAT tmp0, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, tmp7;
+    FAST_FLOAT tmp10, tmp11, tmp12, tmp13;
+    FAST_FLOAT z5, z10, z11, z12, z13;
+    JCOEFPTR inptr;
+    FLOAT_MULT_TYPE * quantptr;
+    FAST_FLOAT * wsptr;
+    JSAMPROW outptr;
+    JSAMPLE *range_limit = cinfo->sample_range_limit;
+    int ctr;
+    FAST_FLOAT workspace[DCTSIZE2]; /* buffers data between passes */
+
+    /* Pass 1: process columns from input, store into work array. */
+
+    inptr = coef_block;
+    quantptr = (FLOAT_MULT_TYPE *) compptr->dct_table;
+    wsptr = workspace;
+    for (ctr = DCTSIZE; ctr > 0; ctr--)
+    {
+        /* Due to quantization, we will usually find that many of the input
+         * coefficients are zero, especially the AC terms.  We can exploit this
+         * by short-circuiting the IDCT calculation for any column in which all
+         * the AC terms are zero.  In that case each output is equal to the
+         * DC coefficient (with scale factor as needed).
+         * With typical images and quantization tables, half or more of the
+         * column DCT calculations can be simplified this way.
+         */
+
+        if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
+                inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
+                inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
+                inptr[DCTSIZE*7] == 0)
+        {
+            /* AC terms all zero */
+            FAST_FLOAT dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
+
+            wsptr[DCTSIZE*0] = dcval;
+            wsptr[DCTSIZE*1] = dcval;
+            wsptr[DCTSIZE*2] = dcval;
+            wsptr[DCTSIZE*3] = dcval;
+            wsptr[DCTSIZE*4] = dcval;
+            wsptr[DCTSIZE*5] = dcval;
+            wsptr[DCTSIZE*6] = dcval;
+            wsptr[DCTSIZE*7] = dcval;
+
+            inptr++;			/* advance pointers to next column */
+            quantptr++;
+            wsptr++;
+            continue;
+        }
+
+        /* Even part */
+
+        tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
+        tmp1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
+        tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
+        tmp3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
+
+        tmp10 = tmp0 + tmp2;	/* phase 3 */
+        tmp11 = tmp0 - tmp2;
+
+        tmp13 = tmp1 + tmp3;	/* phases 5-3 */
+        tmp12 = (tmp1 - tmp3) * ((FAST_FLOAT) 1.414213562) - tmp13; /* 2*c4 */
+
+        tmp0 = tmp10 + tmp13;	/* phase 2 */
+        tmp3 = tmp10 - tmp13;
+        tmp1 = tmp11 + tmp12;
+        tmp2 = tmp11 - tmp12;
+
+        /* Odd part */
+
+        tmp4 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
+        tmp5 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
+        tmp6 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
+        tmp7 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
+
+        z13 = tmp6 + tmp5;		/* phase 6 */
+        z10 = tmp6 - tmp5;
+        z11 = tmp4 + tmp7;
+        z12 = tmp4 - tmp7;
+
+        tmp7 = z11 + z13;		/* phase 5 */
+        tmp11 = (z11 - z13) * ((FAST_FLOAT) 1.414213562); /* 2*c4 */
+
+        z5 = (z10 + z12) * ((FAST_FLOAT) 1.847759065); /* 2*c2 */
+        tmp10 = z5 - z12 * ((FAST_FLOAT) 1.082392200); /* 2*(c2-c6) */
+        tmp12 = z5 - z10 * ((FAST_FLOAT) 2.613125930); /* 2*(c2+c6) */
+
+        tmp6 = tmp12 - tmp7;	/* phase 2 */
+        tmp5 = tmp11 - tmp6;
+        tmp4 = tmp10 - tmp5;
+
+        wsptr[DCTSIZE*0] = tmp0 + tmp7;
+        wsptr[DCTSIZE*7] = tmp0 - tmp7;
+        wsptr[DCTSIZE*1] = tmp1 + tmp6;
+        wsptr[DCTSIZE*6] = tmp1 - tmp6;
+        wsptr[DCTSIZE*2] = tmp2 + tmp5;
+        wsptr[DCTSIZE*5] = tmp2 - tmp5;
+        wsptr[DCTSIZE*3] = tmp3 + tmp4;
+        wsptr[DCTSIZE*4] = tmp3 - tmp4;
+
+        inptr++;			/* advance pointers to next column */
+        quantptr++;
+        wsptr++;
+    }
+
+    /* Pass 2: process rows from work array, store into output array. */
+
+    wsptr = workspace;
+    for (ctr = 0; ctr < DCTSIZE; ctr++)
+    {
+        outptr = output_buf[ctr] + output_col;
+        /* Rows of zeroes can be exploited in the same way as we did with columns.
+         * However, the column calculation has created many nonzero AC terms, so
+         * the simplification applies less often (typically 5% to 10% of the time).
+         * And testing floats for zero is relatively expensive, so we don't bother.
+         */
+
+        /* Even part */
+
+        /* Apply signed->unsigned and prepare float->int conversion */
+        z5 = wsptr[0] + ((FAST_FLOAT) CENTERJSAMPLE + (FAST_FLOAT) 0.5);
+        tmp10 = z5 + wsptr[4];
+        tmp11 = z5 - wsptr[4];
+
+        tmp13 = wsptr[2] + wsptr[6];
+        tmp12 = (wsptr[2] - wsptr[6]) * ((FAST_FLOAT) 1.414213562) - tmp13;
+
+        tmp0 = tmp10 + tmp13;
+        tmp3 = tmp10 - tmp13;
+        tmp1 = tmp11 + tmp12;
+        tmp2 = tmp11 - tmp12;
+
+        /* Odd part */
+
+        z13 = wsptr[5] + wsptr[3];
+        z10 = wsptr[5] - wsptr[3];
+        z11 = wsptr[1] + wsptr[7];
+        z12 = wsptr[1] - wsptr[7];
+
+        tmp7 = z11 + z13;
+        tmp11 = (z11 - z13) * ((FAST_FLOAT) 1.414213562);
+
+        z5 = (z10 + z12) * ((FAST_FLOAT) 1.847759065); /* 2*c2 */
+        tmp10 = z5 - z12 * ((FAST_FLOAT) 1.082392200); /* 2*(c2-c6) */
+        tmp12 = z5 - z10 * ((FAST_FLOAT) 2.613125930); /* 2*(c2+c6) */
+
+        tmp6 = tmp12 - tmp7;
+        tmp5 = tmp11 - tmp6;
+        tmp4 = tmp10 - tmp5;
+
+        /* Final output stage: float->int conversion and range-limit */
+
+        outptr[0] = range_limit[((int) (tmp0 + tmp7)) & RANGE_MASK];
+        outptr[7] = range_limit[((int) (tmp0 - tmp7)) & RANGE_MASK];
+        outptr[1] = range_limit[((int) (tmp1 + tmp6)) & RANGE_MASK];
+        outptr[6] = range_limit[((int) (tmp1 - tmp6)) & RANGE_MASK];
+        outptr[2] = range_limit[((int) (tmp2 + tmp5)) & RANGE_MASK];
+        outptr[5] = range_limit[((int) (tmp2 - tmp5)) & RANGE_MASK];
+        outptr[3] = range_limit[((int) (tmp3 + tmp4)) & RANGE_MASK];
+        outptr[4] = range_limit[((int) (tmp3 - tmp4)) & RANGE_MASK];
+
+        wsptr += DCTSIZE;		/* advance pointer to next row */
+    }
+}
+
+#endif /* DCT_FLOAT_SUPPORTED */
diff -NEaurb neo/renderer/jpeg-8c/jidctfst.c neo/renderer/jpeg-8c/jidctfst.c
--- neo/renderer/jpeg-8c/jidctfst.c	1970-01-01 00:00:00 +0000
+++ neo/renderer/jpeg-8c/jidctfst.c	2012-11-17 01:20:39 +0000
@@ -0,0 +1,372 @@
+/*
+ * jidctfst.c
+ *
+ * Copyright (C) 1994-1998, Thomas G. Lane.
+ * This file is part of the Independent JPEG Group's software.
+ * For conditions of distribution and use, see the accompanying README file.
+ *
+ * This file contains a fast, not so accurate integer implementation of the
+ * inverse DCT (Discrete Cosine Transform).  In the IJG code, this routine
+ * must also perform dequantization of the input coefficients.
+ *
+ * A 2-D IDCT can be done by 1-D IDCT on each column followed by 1-D IDCT
+ * on each row (or vice versa, but it's more convenient to emit a row at
+ * a time).  Direct algorithms are also available, but they are much more
+ * complex and seem not to be any faster when reduced to code.
+ *
+ * This implementation is based on Arai, Agui, and Nakajima's algorithm for
+ * scaled DCT.  Their original paper (Trans. IEICE E-71(11):1095) is in
+ * Japanese, but the algorithm is described in the Pennebaker & Mitchell
+ * JPEG textbook (see REFERENCES section in file README).  The following code
+ * is based directly on figure 4-8 in P&M.
+ * While an 8-point DCT cannot be done in less than 11 multiplies, it is
+ * possible to arrange the computation so that many of the multiplies are
+ * simple scalings of the final outputs.  These multiplies can then be
+ * folded into the multiplications or divisions by the JPEG quantization
+ * table entries.  The AA&N method leaves only 5 multiplies and 29 adds
+ * to be done in the DCT itself.
+ * The primary disadvantage of this method is that with fixed-point math,
+ * accuracy is lost due to imprecise representation of the scaled
+ * quantization values.  The smaller the quantization table entry, the less
+ * precise the scaled value, so this implementation does worse with high-
+ * quality-setting files than with low-quality ones.
+ */
+
+#define JPEG_INTERNALS
+#include "jinclude.h"
+#include "jpeglib.h"
+#include "jdct.h"		/* Private declarations for DCT subsystem */
+
+#ifdef DCT_IFAST_SUPPORTED
+
+
+/*
+ * This module is specialized to the case DCTSIZE = 8.
+ */
+
+#if DCTSIZE != 8
+Sorry, this code only copes with 8x8 DCTs. /* deliberate syntax err */
+#endif
+
+
+/* Scaling decisions are generally the same as in the LL&M algorithm;
+ * see jidctint.c for more details.  However, we choose to descale
+ * (right shift) multiplication products as soon as they are formed,
+ * rather than carrying additional fractional bits into subsequent additions.
+ * This compromises accuracy slightly, but it lets us save a few shifts.
+ * More importantly, 16-bit arithmetic is then adequate (for 8-bit samples)
+ * everywhere except in the multiplications proper; this saves a good deal
+ * of work on 16-bit-int machines.
+ *
+ * The dequantized coefficients are not integers because the AA&N scaling
+ * factors have been incorporated.  We represent them scaled up by PASS1_BITS,
+ * so that the first and second IDCT rounds have the same input scaling.
+ * For 8-bit JSAMPLEs, we choose IFAST_SCALE_BITS = PASS1_BITS so as to
+ * avoid a descaling shift; this compromises accuracy rather drastically
+ * for small quantization table entries, but it saves a lot of shifts.
+ * For 12-bit JSAMPLEs, there's no hope of using 16x16 multiplies anyway,
+ * so we use a much larger scaling factor to preserve accuracy.
+ *
+ * A final compromise is to represent the multiplicative constants to only
+ * 8 fractional bits, rather than 13.  This saves some shifting work on some
+ * machines, and may also reduce the cost of multiplication (since there
+ * are fewer one-bits in the constants).
+ */
+
+#if BITS_IN_JSAMPLE == 8
+#define CONST_BITS  8
+#define PASS1_BITS  2
+#else
+#define CONST_BITS  8
+#define PASS1_BITS  1		/* lose a little precision to avoid overflow */
+#endif
+
+/* Some C compilers fail to reduce "FIX(constant)" at compile time, thus
+ * causing a lot of useless floating-point operations at run time.
+ * To get around this we use the following pre-calculated constants.
+ * If you change CONST_BITS you may want to add appropriate values.
+ * (With a reasonable C compiler, you can just rely on the FIX() macro...)
+ */
+
+#if CONST_BITS == 8
+#define FIX_1_082392200  ((INT32)  277)		/* FIX(1.082392200) */
+#define FIX_1_414213562  ((INT32)  362)		/* FIX(1.414213562) */
+#define FIX_1_847759065  ((INT32)  473)		/* FIX(1.847759065) */
+#define FIX_2_613125930  ((INT32)  669)		/* FIX(2.613125930) */
+#else
+#define FIX_1_082392200  FIX(1.082392200)
+#define FIX_1_414213562  FIX(1.414213562)
+#define FIX_1_847759065  FIX(1.847759065)
+#define FIX_2_613125930  FIX(2.613125930)
+#endif
+
+
+/* We can gain a little more speed, with a further compromise in accuracy,
+ * by omitting the addition in a descaling shift.  This yields an incorrectly
+ * rounded result half the time...
+ */
+
+#ifndef USE_ACCURATE_ROUNDING
+#undef DESCALE
+#define DESCALE(x,n)  RIGHT_SHIFT(x, n)
+#endif
+
+
+/* Multiply a DCTELEM variable by an INT32 constant, and immediately
+ * descale to yield a DCTELEM result.
+ */
+
+#define MULTIPLY(var,const)  ((DCTELEM) DESCALE((var) * (const), CONST_BITS))
+
+
+/* Dequantize a coefficient by multiplying it by the multiplier-table
+ * entry; produce a DCTELEM result.  For 8-bit data a 16x16->16
+ * multiplication will do.  For 12-bit data, the multiplier table is
+ * declared INT32, so a 32-bit multiply will be used.
+ */
+
+#if BITS_IN_JSAMPLE == 8
+#define DEQUANTIZE(coef,quantval)  (((IFAST_MULT_TYPE) (coef)) * (quantval))
+#else
+#define DEQUANTIZE(coef,quantval)  \
+	DESCALE((coef)*(quantval), IFAST_SCALE_BITS-PASS1_BITS)
+#endif
+
+
+/* Like DESCALE, but applies to a DCTELEM and produces an int.
+ * We assume that int right shift is unsigned if INT32 right shift is.
+ */
+
+#ifdef RIGHT_SHIFT_IS_UNSIGNED
+#define ISHIFT_TEMPS	DCTELEM ishift_temp;
+#if BITS_IN_JSAMPLE == 8
+#define DCTELEMBITS  16		/* DCTELEM may be 16 or 32 bits */
+#else
+#define DCTELEMBITS  32		/* DCTELEM must be 32 bits */
+#endif
+#define IRIGHT_SHIFT(x,shft)  \
+    ((ishift_temp = (x)) < 0 ? \
+     (ishift_temp >> (shft)) | ((~((DCTELEM) 0)) << (DCTELEMBITS-(shft))) : \
+     (ishift_temp >> (shft)))
+#else
+#define ISHIFT_TEMPS
+#define IRIGHT_SHIFT(x,shft)	((x) >> (shft))
+#endif
+
+#ifdef USE_ACCURATE_ROUNDING
+#define IDESCALE(x,n)  ((int) IRIGHT_SHIFT((x) + (1 << ((n)-1)), n))
+#else
+#define IDESCALE(x,n)  ((int) IRIGHT_SHIFT(x, n))
+#endif
+
+
+/*
+ * Perform dequantization and inverse DCT on one block of coefficients.
+ */
+
+GLOBAL(void)
+jpeg_idct_ifast (j_decompress_ptr cinfo, jpeg_component_info * compptr,
+                 JCOEFPTR coef_block,
+                 JSAMPARRAY output_buf, JDIMENSION output_col)
+{
+    DCTELEM tmp0, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, tmp7;
+    DCTELEM tmp10, tmp11, tmp12, tmp13;
+    DCTELEM z5, z10, z11, z12, z13;
+    JCOEFPTR inptr;
+    IFAST_MULT_TYPE * quantptr;
+    int * wsptr;
+    JSAMPROW outptr;
+    JSAMPLE *range_limit = IDCT_range_limit(cinfo);
+    int ctr;
+    int workspace[DCTSIZE2];	/* buffers data between passes */
+    SHIFT_TEMPS			/* for DESCALE */
+    ISHIFT_TEMPS			/* for IDESCALE */
+
+    /* Pass 1: process columns from input, store into work array. */
+
+    inptr = coef_block;
+    quantptr = (IFAST_MULT_TYPE *) compptr->dct_table;
+    wsptr = workspace;
+    for (ctr = DCTSIZE; ctr > 0; ctr--)
+    {
+        /* Due to quantization, we will usually find that many of the input
+         * coefficients are zero, especially the AC terms.  We can exploit this
+         * by short-circuiting the IDCT calculation for any column in which all
+         * the AC terms are zero.  In that case each output is equal to the
+         * DC coefficient (with scale factor as needed).
+         * With typical images and quantization tables, half or more of the
+         * column DCT calculations can be simplified this way.
+         */
+
+        if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
+                inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
+                inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
+                inptr[DCTSIZE*7] == 0)
+        {
+            /* AC terms all zero */
+            int dcval = (int) DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
+
+            wsptr[DCTSIZE*0] = dcval;
+            wsptr[DCTSIZE*1] = dcval;
+            wsptr[DCTSIZE*2] = dcval;
+            wsptr[DCTSIZE*3] = dcval;
+            wsptr[DCTSIZE*4] = dcval;
+            wsptr[DCTSIZE*5] = dcval;
+            wsptr[DCTSIZE*6] = dcval;
+            wsptr[DCTSIZE*7] = dcval;
+
+            inptr++;			/* advance pointers to next column */
+            quantptr++;
+            wsptr++;
+            continue;
+        }
+
+        /* Even part */
+
+        tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
+        tmp1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
+        tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
+        tmp3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
+
+        tmp10 = tmp0 + tmp2;	/* phase 3 */
+        tmp11 = tmp0 - tmp2;
+
+        tmp13 = tmp1 + tmp3;	/* phases 5-3 */
+        tmp12 = MULTIPLY(tmp1 - tmp3, FIX_1_414213562) - tmp13; /* 2*c4 */
+
+        tmp0 = tmp10 + tmp13;	/* phase 2 */
+        tmp3 = tmp10 - tmp13;
+        tmp1 = tmp11 + tmp12;
+        tmp2 = tmp11 - tmp12;
+
+        /* Odd part */
+
+        tmp4 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
+        tmp5 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
+        tmp6 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
+        tmp7 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
+
+        z13 = tmp6 + tmp5;		/* phase 6 */
+        z10 = tmp6 - tmp5;
+        z11 = tmp4 + tmp7;
+        z12 = tmp4 - tmp7;
+
+        tmp7 = z11 + z13;		/* phase 5 */
+        tmp11 = MULTIPLY(z11 - z13, FIX_1_414213562); /* 2*c4 */
+
+        z5 = MULTIPLY(z10 + z12, FIX_1_847759065); /* 2*c2 */
+        tmp10 = MULTIPLY(z12, FIX_1_082392200) - z5; /* 2*(c2-c6) */
+        tmp12 = MULTIPLY(z10, - FIX_2_613125930) + z5; /* -2*(c2+c6) */
+
+        tmp6 = tmp12 - tmp7;	/* phase 2 */
+        tmp5 = tmp11 - tmp6;
+        tmp4 = tmp10 + tmp5;
+
+        wsptr[DCTSIZE*0] = (int) (tmp0 + tmp7);
+        wsptr[DCTSIZE*7] = (int) (tmp0 - tmp7);
+        wsptr[DCTSIZE*1] = (int) (tmp1 + tmp6);
+        wsptr[DCTSIZE*6] = (int) (tmp1 - tmp6);
+        wsptr[DCTSIZE*2] = (int) (tmp2 + tmp5);
+        wsptr[DCTSIZE*5] = (int) (tmp2 - tmp5);
+        wsptr[DCTSIZE*4] = (int) (tmp3 + tmp4);
+        wsptr[DCTSIZE*3] = (int) (tmp3 - tmp4);
+
+        inptr++;			/* advance pointers to next column */
+        quantptr++;
+        wsptr++;
+    }
+
+    /* Pass 2: process rows from work array, store into output array. */
+    /* Note that we must descale the results by a factor of 8 == 2**3, */
+    /* and also undo the PASS1_BITS scaling. */
+
+    wsptr = workspace;
+    for (ctr = 0; ctr < DCTSIZE; ctr++)
+    {
+        outptr = output_buf[ctr] + output_col;
+        /* Rows of zeroes can be exploited in the same way as we did with columns.
+         * However, the column calculation has created many nonzero AC terms, so
+         * the simplification applies less often (typically 5% to 10% of the time).
+         * On machines with very fast multiplication, it's possible that the
+         * test takes more time than it's worth.  In that case this section
+         * may be commented out.
+         */
+
+#ifndef NO_ZERO_ROW_TEST
+        if (wsptr[1] == 0 && wsptr[2] == 0 && wsptr[3] == 0 && wsptr[4] == 0 &&
+                wsptr[5] == 0 && wsptr[6] == 0 && wsptr[7] == 0)
+        {
+            /* AC terms all zero */
+            JSAMPLE dcval = range_limit[IDESCALE(wsptr[0], PASS1_BITS+3)
+                                        & RANGE_MASK];
+
+            outptr[0] = dcval;
+            outptr[1] = dcval;
+            outptr[2] = dcval;
+            outptr[3] = dcval;
+            outptr[4] = dcval;
+            outptr[5] = dcval;
+            outptr[6] = dcval;
+            outptr[7] = dcval;
+
+            wsptr += DCTSIZE;		/* advance pointer to next row */
+            continue;
+        }
+#endif
+
+        /* Even part */
+
+        tmp10 = ((DCTELEM) wsptr[0] + (DCTELEM) wsptr[4]);
+        tmp11 = ((DCTELEM) wsptr[0] - (DCTELEM) wsptr[4]);
+
+        tmp13 = ((DCTELEM) wsptr[2] + (DCTELEM) wsptr[6]);
+        tmp12 = MULTIPLY((DCTELEM) wsptr[2] - (DCTELEM) wsptr[6], FIX_1_414213562)
+                - tmp13;
+
+        tmp0 = tmp10 + tmp13;
+        tmp3 = tmp10 - tmp13;
+        tmp1 = tmp11 + tmp12;
+        tmp2 = tmp11 - tmp12;
+
+        /* Odd part */
+
+        z13 = (DCTELEM) wsptr[5] + (DCTELEM) wsptr[3];
+        z10 = (DCTELEM) wsptr[5] - (DCTELEM) wsptr[3];
+        z11 = (DCTELEM) wsptr[1] + (DCTELEM) wsptr[7];
+        z12 = (DCTELEM) wsptr[1] - (DCTELEM) wsptr[7];
+
+        tmp7 = z11 + z13;		/* phase 5 */
+        tmp11 = MULTIPLY(z11 - z13, FIX_1_414213562); /* 2*c4 */
+
+        z5 = MULTIPLY(z10 + z12, FIX_1_847759065); /* 2*c2 */
+        tmp10 = MULTIPLY(z12, FIX_1_082392200) - z5; /* 2*(c2-c6) */
+        tmp12 = MULTIPLY(z10, - FIX_2_613125930) + z5; /* -2*(c2+c6) */
+
+        tmp6 = tmp12 - tmp7;	/* phase 2 */
+        tmp5 = tmp11 - tmp6;
+        tmp4 = tmp10 + tmp5;
+
+        /* Final output stage: scale down by a factor of 8 and range-limit */
+
+        outptr[0] = range_limit[IDESCALE(tmp0 + tmp7, PASS1_BITS+3)
+                                & RANGE_MASK];
+        outptr[7] = range_limit[IDESCALE(tmp0 - tmp7, PASS1_BITS+3)
+                                & RANGE_MASK];
+        outptr[1] = range_limit[IDESCALE(tmp1 + tmp6, PASS1_BITS+3)
+                                & RANGE_MASK];
+        outptr[6] = range_limit[IDESCALE(tmp1 - tmp6, PASS1_BITS+3)
+                                & RANGE_MASK];
+        outptr[2] = range_limit[IDESCALE(tmp2 + tmp5, PASS1_BITS+3)
+                                & RANGE_MASK];
+        outptr[5] = range_limit[IDESCALE(tmp2 - tmp5, PASS1_BITS+3)
+                                & RANGE_MASK];
+        outptr[4] = range_limit[IDESCALE(tmp3 + tmp4, PASS1_BITS+3)
+                                & RANGE_MASK];
+        outptr[3] = range_limit[IDESCALE(tmp3 - tmp4, PASS1_BITS+3)
+                                & RANGE_MASK];
+
+        wsptr += DCTSIZE;		/* advance pointer to next row */
+    }
+}
+
+#endif /* DCT_IFAST_SUPPORTED */
diff -NEaurb neo/renderer/jpeg-8c/jidctint.c neo/renderer/jpeg-8c/jidctint.c
--- neo/renderer/jpeg-8c/jidctint.c	1970-01-01 00:00:00 +0000
+++ neo/renderer/jpeg-8c/jidctint.c	2012-11-17 01:20:40 +0000
@@ -0,0 +1,5197 @@
+/*
+ * jidctint.c
+ *
+ * Copyright (C) 1991-1998, Thomas G. Lane.
+ * Modification developed 2002-2009 by Guido Vollbeding.
+ * This file is part of the Independent JPEG Group's software.
+ * For conditions of distribution and use, see the accompanying README file.
+ *
+ * This file contains a slow-but-accurate integer implementation of the
+ * inverse DCT (Discrete Cosine Transform).  In the IJG code, this routine
+ * must also perform dequantization of the input coefficients.
+ *
+ * A 2-D IDCT can be done by 1-D IDCT on each column followed by 1-D IDCT
+ * on each row (or vice versa, but it's more convenient to emit a row at
+ * a time).  Direct algorithms are also available, but they are much more
+ * complex and seem not to be any faster when reduced to code.
+ *
+ * This implementation is based on an algorithm described in
+ *   C. Loeffler, A. Ligtenberg and G. Moschytz, "Practical Fast 1-D DCT
+ *   Algorithms with 11 Multiplications", Proc. Int'l. Conf. on Acoustics,
+ *   Speech, and Signal Processing 1989 (ICASSP '89), pp. 988-991.
+ * The primary algorithm described there uses 11 multiplies and 29 adds.
+ * We use their alternate method with 12 multiplies and 32 adds.
+ * The advantage of this method is that no data path contains more than one
+ * multiplication; this allows a very simple and accurate implementation in
+ * scaled fixed-point arithmetic, with a minimal number of shifts.
+ *
+ * We also provide IDCT routines with various output sample block sizes for
+ * direct resolution reduction or enlargement and for direct resolving the
+ * common 2x1 and 1x2 subsampling cases without additional resampling: NxN
+ * (N=1...16), 2NxN, and Nx2N (N=1...8) pixels for one 8x8 input DCT block.
+ *
+ * For N<8 we simply take the corresponding low-frequency coefficients of
+ * the 8x8 input DCT block and apply an NxN point IDCT on the sub-block
+ * to yield the downscaled outputs.
+ * This can be seen as direct low-pass downsampling from the DCT domain
+ * point of view rather than the usual spatial domain point of view,
+ * yielding significant computational savings and results at least
+ * as good as common bilinear (averaging) spatial downsampling.
+ *
+ * For N>8 we apply a partial NxN IDCT on the 8 input coefficients as
+ * lower frequencies and higher frequencies assumed to be zero.
+ * It turns out that the computational effort is similar to the 8x8 IDCT
+ * regarding the output size.
+ * Furthermore, the scaling and descaling is the same for all IDCT sizes.
+ *
+ * CAUTION: We rely on the FIX() macro except for the N=1,2,4,8 cases
+ * since there would be too many additional constants to pre-calculate.
+ */
+
+#define JPEG_INTERNALS
+#include "jinclude.h"
+#include "jpeglib.h"
+#include "jdct.h"		/* Private declarations for DCT subsystem */
+
+#ifdef DCT_ISLOW_SUPPORTED
+
+
+/*
+ * This module is specialized to the case DCTSIZE = 8.
+ */
+
+#if DCTSIZE != 8
+Sorry, this code only copes with 8x8 DCT blocks. /* deliberate syntax err */
+#endif
+
+
+/*
+ * The poop on this scaling stuff is as follows:
+ *
+ * Each 1-D IDCT step produces outputs which are a factor of sqrt(N)
+ * larger than the true IDCT outputs.  The final outputs are therefore
+ * a factor of N larger than desired; since N=8 this can be cured by
+ * a simple right shift at the end of the algorithm.  The advantage of
+ * this arrangement is that we save two multiplications per 1-D IDCT,
+ * because the y0 and y4 inputs need not be divided by sqrt(N).
+ *
+ * We have to do addition and subtraction of the integer inputs, which
+ * is no problem, and multiplication by fractional constants, which is
+ * a problem to do in integer arithmetic.  We multiply all the constants
+ * by CONST_SCALE and convert them to integer constants (thus retaining
+ * CONST_BITS bits of precision in the constants).  After doing a
+ * multiplication we have to divide the product by CONST_SCALE, with proper
+ * rounding, to produce the correct output.  This division can be done
+ * cheaply as a right shift of CONST_BITS bits.  We postpone shifting
+ * as long as possible so that partial sums can be added together with
+ * full fractional precision.
+ *
+ * The outputs of the first pass are scaled up by PASS1_BITS bits so that
+ * they are represented to better-than-integral precision.  These outputs
+ * require BITS_IN_JSAMPLE + PASS1_BITS + 3 bits; this fits in a 16-bit word
+ * with the recommended scaling.  (To scale up 12-bit sample data further, an
+ * intermediate INT32 array would be needed.)
+ *
+ * To avoid overflow of the 32-bit intermediate results in pass 2, we must
+ * have BITS_IN_JSAMPLE + CONST_BITS + PASS1_BITS <= 26.  Error analysis
+ * shows that the values given below are the most effective.
+ */
+
+#if BITS_IN_JSAMPLE == 8
+#define CONST_BITS  13
+#define PASS1_BITS  2
+#else
+#define CONST_BITS  13
+#define PASS1_BITS  1		/* lose a little precision to avoid overflow */
+#endif
+
+/* Some C compilers fail to reduce "FIX(constant)" at compile time, thus
+ * causing a lot of useless floating-point operations at run time.
+ * To get around this we use the following pre-calculated constants.
+ * If you change CONST_BITS you may want to add appropriate values.
+ * (With a reasonable C compiler, you can just rely on the FIX() macro...)
+ */
+
+#if CONST_BITS == 13
+#define FIX_0_298631336  ((INT32)  2446)	/* FIX(0.298631336) */
+#define FIX_0_390180644  ((INT32)  3196)	/* FIX(0.390180644) */
+#define FIX_0_541196100  ((INT32)  4433)	/* FIX(0.541196100) */
+#define FIX_0_765366865  ((INT32)  6270)	/* FIX(0.765366865) */
+#define FIX_0_899976223  ((INT32)  7373)	/* FIX(0.899976223) */
+#define FIX_1_175875602  ((INT32)  9633)	/* FIX(1.175875602) */
+#define FIX_1_501321110  ((INT32)  12299)	/* FIX(1.501321110) */
+#define FIX_1_847759065  ((INT32)  15137)	/* FIX(1.847759065) */
+#define FIX_1_961570560  ((INT32)  16069)	/* FIX(1.961570560) */
+#define FIX_2_053119869  ((INT32)  16819)	/* FIX(2.053119869) */
+#define FIX_2_562915447  ((INT32)  20995)	/* FIX(2.562915447) */
+#define FIX_3_072711026  ((INT32)  25172)	/* FIX(3.072711026) */
+#else
+#define FIX_0_298631336  FIX(0.298631336)
+#define FIX_0_390180644  FIX(0.390180644)
+#define FIX_0_541196100  FIX(0.541196100)
+#define FIX_0_765366865  FIX(0.765366865)
+#define FIX_0_899976223  FIX(0.899976223)
+#define FIX_1_175875602  FIX(1.175875602)
+#define FIX_1_501321110  FIX(1.501321110)
+#define FIX_1_847759065  FIX(1.847759065)
+#define FIX_1_961570560  FIX(1.961570560)
+#define FIX_2_053119869  FIX(2.053119869)
+#define FIX_2_562915447  FIX(2.562915447)
+#define FIX_3_072711026  FIX(3.072711026)
+#endif
+
+
+/* Multiply an INT32 variable by an INT32 constant to yield an INT32 result.
+ * For 8-bit samples with the recommended scaling, all the variable
+ * and constant values involved are no more than 16 bits wide, so a
+ * 16x16->32 bit multiply can be used instead of a full 32x32 multiply.
+ * For 12-bit samples, a full 32-bit multiplication will be needed.
+ */
+
+#if BITS_IN_JSAMPLE == 8
+#define MULTIPLY(var,const)  MULTIPLY16C16(var,const)
+#else
+#define MULTIPLY(var,const)  ((var) * (const))
+#endif
+
+
+/* Dequantize a coefficient by multiplying it by the multiplier-table
+ * entry; produce an int result.  In this module, both inputs and result
+ * are 16 bits or less, so either int or short multiply will work.
+ */
+
+#define DEQUANTIZE(coef,quantval)  (((ISLOW_MULT_TYPE) (coef)) * (quantval))
+
+
+/*
+ * Perform dequantization and inverse DCT on one block of coefficients.
+ */
+
+GLOBAL(void)
+jpeg_idct_islow (j_decompress_ptr cinfo, jpeg_component_info * compptr,
+                 JCOEFPTR coef_block,
+                 JSAMPARRAY output_buf, JDIMENSION output_col)
+{
+    INT32 tmp0, tmp1, tmp2, tmp3;
+    INT32 tmp10, tmp11, tmp12, tmp13;
+    INT32 z1, z2, z3;
+    JCOEFPTR inptr;
+    ISLOW_MULT_TYPE * quantptr;
+    int * wsptr;
+    JSAMPROW outptr;
+    JSAMPLE *range_limit = IDCT_range_limit(cinfo);
+    int ctr;
+    int workspace[DCTSIZE2];	/* buffers data between passes */
+    SHIFT_TEMPS
+
+    /* Pass 1: process columns from input, store into work array. */
+    /* Note results are scaled up by sqrt(8) compared to a true IDCT; */
+    /* furthermore, we scale the results by 2**PASS1_BITS. */
+
+    inptr = coef_block;
+    quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
+    wsptr = workspace;
+    for (ctr = DCTSIZE; ctr > 0; ctr--)
+    {
+        /* Due to quantization, we will usually find that many of the input
+         * coefficients are zero, especially the AC terms.  We can exploit this
+         * by short-circuiting the IDCT calculation for any column in which all
+         * the AC terms are zero.  In that case each output is equal to the
+         * DC coefficient (with scale factor as needed).
+         * With typical images and quantization tables, half or more of the
+         * column DCT calculations can be simplified this way.
+         */
+
+        if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
+                inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
+                inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
+                inptr[DCTSIZE*7] == 0)
+        {
+            /* AC terms all zero */
+            int dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]) << PASS1_BITS;
+
+            wsptr[DCTSIZE*0] = dcval;
+            wsptr[DCTSIZE*1] = dcval;
+            wsptr[DCTSIZE*2] = dcval;
+            wsptr[DCTSIZE*3] = dcval;
+            wsptr[DCTSIZE*4] = dcval;
+            wsptr[DCTSIZE*5] = dcval;
+            wsptr[DCTSIZE*6] = dcval;
+            wsptr[DCTSIZE*7] = dcval;
+
+            inptr++;			/* advance pointers to next column */
+            quantptr++;
+            wsptr++;
+            continue;
+        }
+
+        /* Even part: reverse the even part of the forward DCT. */
+        /* The rotator is sqrt(2)*c(-6). */
+
+        z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
+        z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
+
+        z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
+        tmp2 = z1 + MULTIPLY(z2, FIX_0_765366865);
+        tmp3 = z1 - MULTIPLY(z3, FIX_1_847759065);
+
+        z2 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
+        z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
+        z2 <<= CONST_BITS;
+        z3 <<= CONST_BITS;
+        /* Add fudge factor here for final descale. */
+        z2 += ONE << (CONST_BITS-PASS1_BITS-1);
+
+        tmp0 = z2 + z3;
+        tmp1 = z2 - z3;
+
+        tmp10 = tmp0 + tmp2;
+        tmp13 = tmp0 - tmp2;
+        tmp11 = tmp1 + tmp3;
+        tmp12 = tmp1 - tmp3;
+
+        /* Odd part per figure 8; the matrix is unitary and hence its
+         * transpose is its inverse.  i0..i3 are y7,y5,y3,y1 respectively.
+         */
+
+        tmp0 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
+        tmp1 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
+        tmp2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
+        tmp3 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
+
+        z2 = tmp0 + tmp2;
+        z3 = tmp1 + tmp3;
+
+        z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
+        z2 = MULTIPLY(z2, - FIX_1_961570560); /* sqrt(2) * (-c3-c5) */
+        z3 = MULTIPLY(z3, - FIX_0_390180644); /* sqrt(2) * (c5-c3) */
+        z2 += z1;
+        z3 += z1;
+
+        z1 = MULTIPLY(tmp0 + tmp3, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
+        tmp0 = MULTIPLY(tmp0, FIX_0_298631336); /* sqrt(2) * (-c1+c3+c5-c7) */
+        tmp3 = MULTIPLY(tmp3, FIX_1_501321110); /* sqrt(2) * ( c1+c3-c5-c7) */
+        tmp0 += z1 + z2;
+        tmp3 += z1 + z3;
+
+        z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
+        tmp1 = MULTIPLY(tmp1, FIX_2_053119869); /* sqrt(2) * ( c1+c3-c5+c7) */
+        tmp2 = MULTIPLY(tmp2, FIX_3_072711026); /* sqrt(2) * ( c1+c3+c5-c7) */
+        tmp1 += z1 + z3;
+        tmp2 += z1 + z2;
+
+        /* Final output stage: inputs are tmp10..tmp13, tmp0..tmp3 */
+
+        wsptr[DCTSIZE*0] = (int) RIGHT_SHIFT(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
+        wsptr[DCTSIZE*7] = (int) RIGHT_SHIFT(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
+        wsptr[DCTSIZE*1] = (int) RIGHT_SHIFT(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
+        wsptr[DCTSIZE*6] = (int) RIGHT_SHIFT(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
+        wsptr[DCTSIZE*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
+        wsptr[DCTSIZE*5] = (int) RIGHT_SHIFT(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
+        wsptr[DCTSIZE*3] = (int) RIGHT_SHIFT(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
+        wsptr[DCTSIZE*4] = (int) RIGHT_SHIFT(tmp13 - tmp0, CONST_BITS-PASS1_BITS);
+
+        inptr++;			/* advance pointers to next column */
+        quantptr++;
+        wsptr++;
+    }
+
+    /* Pass 2: process rows from work array, store into output array. */
+    /* Note that we must descale the results by a factor of 8 == 2**3, */
+    /* and also undo the PASS1_BITS scaling. */
+
+    wsptr = workspace;
+    for (ctr = 0; ctr < DCTSIZE; ctr++)
+    {
+        outptr = output_buf[ctr] + output_col;
+        /* Rows of zeroes can be exploited in the same way as we did with columns.
+         * However, the column calculation has created many nonzero AC terms, so
+         * the simplification applies less often (typically 5% to 10% of the time).
+         * On machines with very fast multiplication, it's possible that the
+         * test takes more time than it's worth.  In that case this section
+         * may be commented out.
+         */
+
+#ifndef NO_ZERO_ROW_TEST
+        if (wsptr[1] == 0 && wsptr[2] == 0 && wsptr[3] == 0 && wsptr[4] == 0 &&
+                wsptr[5] == 0 && wsptr[6] == 0 && wsptr[7] == 0)
+        {
+            /* AC terms all zero */
+            JSAMPLE dcval = range_limit[(int) DESCALE((INT32) wsptr[0], PASS1_BITS+3)
+                                        & RANGE_MASK];
+
+            outptr[0] = dcval;
+            outptr[1] = dcval;
+            outptr[2] = dcval;
+            outptr[3] = dcval;
+            outptr[4] = dcval;
+            outptr[5] = dcval;
+            outptr[6] = dcval;
+            outptr[7] = dcval;
+
+            wsptr += DCTSIZE;		/* advance pointer to next row */
+            continue;
+        }
+#endif
+
+        /* Even part: reverse the even part of the forward DCT. */
+        /* The rotator is sqrt(2)*c(-6). */
+
+        z2 = (INT32) wsptr[2];
+        z3 = (INT32) wsptr[6];
+
+        z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
+        tmp2 = z1 + MULTIPLY(z2, FIX_0_765366865);
+        tmp3 = z1 - MULTIPLY(z3, FIX_1_847759065);
+
+        /* Add fudge factor here for final descale. */
+        z2 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
+        z3 = (INT32) wsptr[4];
+
+        tmp0 = (z2 + z3) << CONST_BITS;
+        tmp1 = (z2 - z3) << CONST_BITS;
+
+        tmp10 = tmp0 + tmp2;
+        tmp13 = tmp0 - tmp2;
+        tmp11 = tmp1 + tmp3;
+        tmp12 = tmp1 - tmp3;
+
+        /* Odd part per figure 8; the matrix is unitary and hence its
+         * transpose is its inverse.  i0..i3 are y7,y5,y3,y1 respectively.
+         */
+
+        tmp0 = (INT32) wsptr[7];
+        tmp1 = (INT32) wsptr[5];
+        tmp2 = (INT32) wsptr[3];
+        tmp3 = (INT32) wsptr[1];
+
+        z2 = tmp0 + tmp2;
+        z3 = tmp1 + tmp3;
+
+        z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
+        z2 = MULTIPLY(z2, - FIX_1_961570560); /* sqrt(2) * (-c3-c5) */
+        z3 = MULTIPLY(z3, - FIX_0_390180644); /* sqrt(2) * (c5-c3) */
+        z2 += z1;
+        z3 += z1;
+
+        z1 = MULTIPLY(tmp0 + tmp3, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
+        tmp0 = MULTIPLY(tmp0, FIX_0_298631336); /* sqrt(2) * (-c1+c3+c5-c7) */
+        tmp3 = MULTIPLY(tmp3, FIX_1_501321110); /* sqrt(2) * ( c1+c3-c5-c7) */
+        tmp0 += z1 + z2;
+        tmp3 += z1 + z3;
+
+        z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
+        tmp1 = MULTIPLY(tmp1, FIX_2_053119869); /* sqrt(2) * ( c1+c3-c5+c7) */
+        tmp2 = MULTIPLY(tmp2, FIX_3_072711026); /* sqrt(2) * ( c1+c3+c5-c7) */
+        tmp1 += z1 + z3;
+        tmp2 += z1 + z2;
+
+        /* Final output stage: inputs are tmp10..tmp13, tmp0..tmp3 */
+
+        outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
+                                CONST_BITS+PASS1_BITS+3)
+                                & RANGE_MASK];
+        outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp3,
+                                CONST_BITS+PASS1_BITS+3)
+                                & RANGE_MASK];
+        outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp2,
+                                CONST_BITS+PASS1_BITS+3)
+                                & RANGE_MASK];
+        outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp2,
+                                CONST_BITS+PASS1_BITS+3)
+                                & RANGE_MASK];
+        outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
+                                CONST_BITS+PASS1_BITS+3)
+                                & RANGE_MASK];
+        outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp1,
+                                CONST_BITS+PASS1_BITS+3)
+                                & RANGE_MASK];
+        outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp0,
+                                CONST_BITS+PASS1_BITS+3)
+                                & RANGE_MASK];
+        outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp0,
+                                CONST_BITS+PASS1_BITS+3)
+                                & RANGE_MASK];
+
+        wsptr += DCTSIZE;		/* advance pointer to next row */
+    }
+}
+
+#ifdef IDCT_SCALING_SUPPORTED
+
+
+/*
+ * Perform dequantization and inverse DCT on one block of coefficients,
+ * producing a 7x7 output block.
+ *
+ * Optimized algorithm with 12 multiplications in the 1-D kernel.
+ * cK represents sqrt(2) * cos(K*pi/14).
+ */
+
+GLOBAL(void)
+jpeg_idct_7x7 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
+               JCOEFPTR coef_block,
+               JSAMPARRAY output_buf, JDIMENSION output_col)
+{
+    INT32 tmp0, tmp1, tmp2, tmp10, tmp11, tmp12, tmp13;
+    INT32 z1, z2, z3;
+    JCOEFPTR inptr;
+    ISLOW_MULT_TYPE * quantptr;
+    int * wsptr;
+    JSAMPROW outptr;
+    JSAMPLE *range_limit = IDCT_range_limit(cinfo);
+    int ctr;
+    int workspace[7*7];	/* buffers data between passes */
+    SHIFT_TEMPS
+
+    /* Pass 1: process columns from input, store into work array. */
+
+    inptr = coef_block;
+    quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
+    wsptr = workspace;
+    for (ctr = 0; ctr < 7; ctr++, inptr++, quantptr++, wsptr++)
+    {
+        /* Even part */
+
+        tmp13 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
+        tmp13 <<= CONST_BITS;
+        /* Add fudge factor here for final descale. */
+        tmp13 += ONE << (CONST_BITS-PASS1_BITS-1);
+
+        z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
+        z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
+        z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
+
+        tmp10 = MULTIPLY(z2 - z3, FIX(0.881747734));     /* c4 */
+        tmp12 = MULTIPLY(z1 - z2, FIX(0.314692123));     /* c6 */
+        tmp11 = tmp10 + tmp12 + tmp13 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
+        tmp0 = z1 + z3;
+        z2 -= tmp0;
+        tmp0 = MULTIPLY(tmp0, FIX(1.274162392)) + tmp13; /* c2 */
+        tmp10 += tmp0 - MULTIPLY(z3, FIX(0.077722536));  /* c2-c4-c6 */
+        tmp12 += tmp0 - MULTIPLY(z1, FIX(2.470602249));  /* c2+c4+c6 */
+        tmp13 += MULTIPLY(z2, FIX(1.414213562));         /* c0 */
+
+        /* Odd part */
+
+        z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
+        z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
+        z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
+
+        tmp1 = MULTIPLY(z1 + z2, FIX(0.935414347));      /* (c3+c1-c5)/2 */
+        tmp2 = MULTIPLY(z1 - z2, FIX(0.170262339));      /* (c3+c5-c1)/2 */
+        tmp0 = tmp1 - tmp2;
+        tmp1 += tmp2;
+        tmp2 = MULTIPLY(z2 + z3, - FIX(1.378756276));    /* -c1 */
+        tmp1 += tmp2;
+        z2 = MULTIPLY(z1 + z3, FIX(0.613604268));        /* c5 */
+        tmp0 += z2;
+        tmp2 += z2 + MULTIPLY(z3, FIX(1.870828693));     /* c3+c1-c5 */
+
+        /* Final output stage */
+
+        wsptr[7*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
+        wsptr[7*6] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
+        wsptr[7*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
+        wsptr[7*5] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
+        wsptr[7*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
+        wsptr[7*4] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
+        wsptr[7*3] = (int) RIGHT_SHIFT(tmp13, CONST_BITS-PASS1_BITS);
+    }
+
+    /* Pass 2: process 7 rows from work array, store into output array. */
+
+    wsptr = workspace;
+    for (ctr = 0; ctr < 7; ctr++)
+    {
+        outptr = output_buf[ctr] + output_col;
+
+        /* Even part */
+
+        /* Add fudge factor here for final descale. */
+        tmp13 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
+        tmp13 <<= CONST_BITS;
+
+        z1 = (INT32) wsptr[2];
+        z2 = (INT32) wsptr[4];
+        z3 = (INT32) wsptr[6];
+
+        tmp10 = MULTIPLY(z2 - z3, FIX(0.881747734));     /* c4 */
+        tmp12 = MULTIPLY(z1 - z2, FIX(0.314692123));     /* c6 */
+        tmp11 = tmp10 + tmp12 + tmp13 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
+        tmp0 = z1 + z3;
+        z2 -= tmp0;
+        tmp0 = MULTIPLY(tmp0, FIX(1.274162392)) + tmp13; /* c2 */
+        tmp10 += tmp0 - MULTIPLY(z3, FIX(0.077722536));  /* c2-c4-c6 */
+        tmp12 += tmp0 - MULTIPLY(z1, FIX(2.470602249));  /* c2+c4+c6 */
+        tmp13 += MULTIPLY(z2, FIX(1.414213562));         /* c0 */
+
+        /* Odd part */
+
+        z1 = (INT32) wsptr[1];
+        z2 = (INT32) wsptr[3];
+        z3 = (INT32) wsptr[5];
+
+        tmp1 = MULTIPLY(z1 + z2, FIX(0.935414347));      /* (c3+c1-c5)/2 */
+        tmp2 = MULTIPLY(z1 - z2, FIX(0.170262339));      /* (c3+c5-c1)/2 */
+        tmp0 = tmp1 - tmp2;
+        tmp1 += tmp2;
+        tmp2 = MULTIPLY(z2 + z3, - FIX(1.378756276));    /* -c1 */
+        tmp1 += tmp2;
+        z2 = MULTIPLY(z1 + z3, FIX(0.613604268));        /* c5 */
+        tmp0 += z2;
+        tmp2 += z2 + MULTIPLY(z3, FIX(1.870828693));     /* c3+c1-c5 */
+
+        /* Final output stage */
+
+        outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
+                                CONST_BITS+PASS1_BITS+3)
+                                & RANGE_MASK];
+        outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
+                                CONST_BITS+PASS1_BITS+3)
+                                & RANGE_MASK];
+        outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
+                                CONST_BITS+PASS1_BITS+3)
+                                & RANGE_MASK];
+        outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
+                                CONST_BITS+PASS1_BITS+3)
+                                & RANGE_MASK];
+        outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
+                                CONST_BITS+PASS1_BITS+3)
+                                & RANGE_MASK];
+        outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
+                                CONST_BITS+PASS1_BITS+3)
+                                & RANGE_MASK];
+        outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13,
+                                CONST_BITS+PASS1_BITS+3)
+                                & RANGE_MASK];
+
+        wsptr += 7;		/* advance pointer to next row */
+    }
+}
+
+
+/*
+ * Perform dequantization and inverse DCT on one block of coefficients,
+ * producing a reduced-size 6x6 output block.
+ *
+ * Optimized algorithm with 3 multiplications in the 1-D kernel.
+ * cK represents sqrt(2) * cos(K*pi/12).
+ */
+
+GLOBAL(void)
+jpeg_idct_6x6 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
+               JCOEFPTR coef_block,
+               JSAMPARRAY output_buf, JDIMENSION output_col)
+{
+    INT32 tmp0, tmp1, tmp2, tmp10, tmp11, tmp12;
+    INT32 z1, z2, z3;
+    JCOEFPTR inptr;
+    ISLOW_MULT_TYPE * quantptr;
+    int * wsptr;
+    JSAMPROW outptr;
+    JSAMPLE *range_limit = IDCT_range_limit(cinfo);
+    int ctr;
+    int workspace[6*6];	/* buffers data between passes */
+    SHIFT_TEMPS
+
+    /* Pass 1: process columns from input, store into work array. */
+
+    inptr = coef_block;
+    quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
+    wsptr = workspace;
+    for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++)
+    {
+        /* Even part */
+
+        tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
+        tmp0 <<= CONST_BITS;
+        /* Add fudge factor here for final descale. */
+        tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);
+        tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
+        tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
+        tmp1 = tmp0 + tmp10;
+        tmp11 = RIGHT_SHIFT(tmp0 - tmp10 - tmp10, CONST_BITS-PASS1_BITS);
+        tmp10 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
+        tmp0 = MULTIPLY(tmp10, FIX(1.224744871));   /* c2 */
+        tmp10 = tmp1 + tmp0;
+        tmp12 = tmp1 - tmp0;
+
+        /* Odd part */
+
+        z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
+        z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
+        z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
+        tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
+        tmp0 = tmp1 + ((z1 + z2) << CONST_BITS);
+        tmp2 = tmp1 + ((z3 - z2) << CONST_BITS);
+        tmp1 = (z1 - z2 - z3) << PASS1_BITS;
+
+        /* Final output stage */
+
+        wsptr[6*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
+        wsptr[6*5] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
+        wsptr[6*1] = (int) (tmp11 + tmp1);
+        wsptr[6*4] = (int) (tmp11 - tmp1);
+        wsptr[6*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
+        wsptr[6*3] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
+    }
+
+    /* Pass 2: process 6 rows from work array, store into output array. */
+
+    wsptr = workspace;
+    for (ctr = 0; ctr < 6; ctr++)
+    {
+        outptr = output_buf[ctr] + output_col;
+
+        /* Even part */
+
+        /* Add fudge factor here for final descale. */
+        tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
+        tmp0 <<= CONST_BITS;
+        tmp2 = (INT32) wsptr[4];
+        tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
+        tmp1 = tmp0 + tmp10;
+        tmp11 = tmp0 - tmp10 - tmp10;
+        tmp10 = (INT32) wsptr[2];
+        tmp0 = MULTIPLY(tmp10, FIX(1.224744871));   /* c2 */
+        tmp10 = tmp1 + tmp0;
+        tmp12 = tmp1 - tmp0;
+
+        /* Odd part */
+
+        z1 = (INT32) wsptr[1];
+        z2 = (INT32) wsptr[3];
+        z3 = (INT32) wsptr[5];
+        tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
+        tmp0 = tmp1 + ((z1 + z2) << CONST_BITS);
+        tmp2 = tmp1 + ((z3 - z2) << CONST_BITS);
+        tmp1 = (z1 - z2 - z3) << CONST_BITS;
+
+        /* Final output stage */
+
+        outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
+                                CONST_BITS+PASS1_BITS+3)
+                                & RANGE_MASK];
+        outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
+                                CONST_BITS+PASS1_BITS+3)
+                                & RANGE_MASK];
+        outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
+                                CONST_BITS+PASS1_BITS+3)
+                                & RANGE_MASK];
+        outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
+                                CONST_BITS+PASS1_BITS+3)
+                                & RANGE_MASK];
+        outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
+                                CONST_BITS+PASS1_BITS+3)
+                                & RANGE_MASK];
+        outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
+                                CONST_BITS+PASS1_BITS+3)
+                                & RANGE_MASK];
+
+        wsptr += 6;		/* advance pointer to next row */
+    }
+}
+
+
+/*
+ * Perform dequantization and inverse DCT on one block of coefficients,
+ * producing a reduced-size 5x5 output block.
+ *
+ * Optimized algorithm with 5 multiplications in the 1-D kernel.
+ * cK represents sqrt(2) * cos(K*pi/10).
+ */
+
+GLOBAL(void)
+jpeg_idct_5x5 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
+               JCOEFPTR coef_block,
+               JSAMPARRAY output_buf, JDIMENSION output_col)
+{
+    INT32 tmp0, tmp1, tmp10, tmp11, tmp12;
+    INT32 z1, z2, z3;
+    JCOEFPTR inptr;
+    ISLOW_MULT_TYPE * quantptr;
+    int * wsptr;
+    JSAMPROW outptr;
+    JSAMPLE *range_limit = IDCT_range_limit(cinfo);
+    int ctr;
+    int workspace[5*5];	/* buffers data between passes */
+    SHIFT_TEMPS
+
+    /* Pass 1: process columns from input, store into work array. */
+
+    inptr = coef_block;
+    quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
+    wsptr = workspace;
+    for (ctr = 0; ctr < 5; ctr++, inptr++, quantptr++, wsptr++)
+    {
+        /* Even part */
+
+        tmp12 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
+        tmp12 <<= CONST_BITS;
+        /* Add fudge factor here for final descale. */
+        tmp12 += ONE << (CONST_BITS-PASS1_BITS-1);
+        tmp0 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
+        tmp1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
+        z1 = MULTIPLY(tmp0 + tmp1, FIX(0.790569415)); /* (c2+c4)/2 */
+        z2 = MULTIPLY(tmp0 - tmp1, FIX(0.353553391)); /* (c2-c4)/2 */
+        z3 = tmp12 + z2;
+        tmp10 = z3 + z1;
+        tmp11 = z3 - z1;
+        tmp12 -= z2 << 2;
+
+        /* Odd part */
+
+        z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
+        z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
+
+        z1 = MULTIPLY(z2 + z3, FIX(0.831253876));     /* c3 */
+        tmp0 = z1 + MULTIPLY(z2, FIX(0.513743148));   /* c1-c3 */
+        tmp1 = z1 - MULTIPLY(z3, FIX(2.176250899));   /* c1+c3 */
+
+        /* Final output stage */
+
+        wsptr[5*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
+        wsptr[5*4] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
+        wsptr[5*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
+        wsptr[5*3] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
+        wsptr[5*2] = (int) RIGHT_SHIFT(tmp12, CONST_BITS-PASS1_BITS);
+    }
+
+    /* Pass 2: process 5 rows from work array, store into output array. */
+
+    wsptr = workspace;
+    for (ctr = 0; ctr < 5; ctr++)
+    {
+        outptr = output_buf[ctr] + output_col;
+
+        /* Even part */
+
+        /* Add fudge factor here for final descale. */
+        tmp12 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
+        tmp12 <<= CONST_BITS;
+        tmp0 = (INT32) wsptr[2];
+        tmp1 = (INT32) wsptr[4];
+        z1 = MULTIPLY(tmp0 + tmp1, FIX(0.790569415)); /* (c2+c4)/2 */
+        z2 = MULTIPLY(tmp0 - tmp1, FIX(0.353553391)); /* (c2-c4)/2 */
+        z3 = tmp12 + z2;
+        tmp10 = z3 + z1;
+        tmp11 = z3 - z1;
+        tmp12 -= z2 << 2;
+
+        /* Odd part */
+
+        z2 = (INT32) wsptr[1];
+        z3 = (INT32) wsptr[3];
+
+        z1 = MULTIPLY(z2 + z3, FIX(0.831253876));     /* c3 */
+        tmp0 = z1 + MULTIPLY(z2, FIX(0.513743148));   /* c1-c3 */
+        tmp1 = z1 - MULTIPLY(z3, FIX(2.176250899));   /* c1+c3 */
+
+        /* Final output stage */
+
+        outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
+                                CONST_BITS+PASS1_BITS+3)
+                                & RANGE_MASK];
+        outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
+                                CONST_BITS+PASS1_BITS+3)
+                                & RANGE_MASK];
+        outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
+                                CONST_BITS+PASS1_BITS+3)
+                                & RANGE_MASK];
+        outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
+                                CONST_BITS+PASS1_BITS+3)
+                                & RANGE_MASK];
+        outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12,
+                                CONST_BITS+PASS1_BITS+3)
+                                & RANGE_MASK];
+
+        wsptr += 5;		/* advance pointer to next row */
+    }
+}
+
+
+/*
+ * Perform dequantization and inverse DCT on one block of coefficients,
+ * producing a reduced-size 4x4 output block.
+ *
+ * Optimized algorithm with 3 multiplications in the 1-D kernel.
+ * cK represents sqrt(2) * cos(K*pi/16) [refers to 8-point IDCT].
+ */
+
+GLOBAL(void)
+jpeg_idct_4x4 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
+               JCOEFPTR coef_block,
+               JSAMPARRAY output_buf, JDIMENSION output_col)
+{
+    INT32 tmp0, tmp2, tmp10, tmp12;
+    INT32 z1, z2, z3;
+    JCOEFPTR inptr;
+    ISLOW_MULT_TYPE * quantptr;
+    int * wsptr;
+    JSAMPROW outptr;
+    JSAMPLE *range_limit = IDCT_range_limit(cinfo);
+    int ctr;
+    int workspace[4*4];	/* buffers data between passes */
+    SHIFT_TEMPS
+
+    /* Pass 1: process columns from input, store into work array. */
+
+    inptr = coef_block;
+    quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
+    wsptr = workspace;
+    for (ctr = 0; ctr < 4; ctr++, inptr++, quantptr++, wsptr++)
+    {
+        /* Even part */
+
+        tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
+        tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
+
+        tmp10 = (tmp0 + tmp2) << PASS1_BITS;
+        tmp12 = (tmp0 - tmp2) << PASS1_BITS;
+
+        /* Odd part */
+        /* Same rotation as in the even part of the 8x8 LL&M IDCT */
+
+        z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
+        z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
+
+        z1 = MULTIPLY(z2 + z3, FIX_0_541196100);               /* c6 */
+        /* Add fudge factor here for final descale. */
+        z1 += ONE << (CONST_BITS-PASS1_BITS-1);
+        tmp0 = RIGHT_SHIFT(z1 + MULTIPLY(z2, FIX_0_765366865), /* c2-c6 */
+                           CONST_BITS-PASS1_BITS);
+        tmp2 = RIGHT_SHIFT(z1 - MULTIPLY(z3, FIX_1_847759065), /* c2+c6 */
+                           CONST_BITS-PASS1_BITS);
+
+        /* Final output stage */
+
+        wsptr[4*0] = (int) (tmp10 + tmp0);
+        wsptr[4*3] = (int) (tmp10 - tmp0);
+        wsptr[4*1] = (int) (tmp12 + tmp2);
+        wsptr[4*2] = (int) (tmp12 - tmp2);
+    }
+
+    /* Pass 2: process 4 rows from work array, store into output array. */
+
+    wsptr = workspace;
+    for (ctr = 0; ctr < 4; ctr++)
+    {
+        outptr = output_buf[ctr] + output_col;
+
+        /* Even part */
+
+        /* Add fudge factor here for final descale. */
+        tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
+        tmp2 = (INT32) wsptr[2];
+
+        tmp10 = (tmp0 + tmp2) << CONST_BITS;
+        tmp12 = (tmp0 - tmp2) << CONST_BITS;
+
+        /* Odd part */
+        /* Same rotation as in the even part of the 8x8 LL&M IDCT */
+
+        z2 = (INT32) wsptr[1];
+        z3 = (INT32) wsptr[3];
+
+        z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
+        tmp0 = z1 + MULTIPLY(z2, FIX_0_765366865); /* c2-c6 */
+        tmp2 = z1 - MULTIPLY(z3, FIX_1_847759065); /* c2+c6 */
+
+        /* Final output stage */
+
+        outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
+                                CONST_BITS+PASS1_BITS+3)
+                                & RANGE_MASK];
+        outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
+                                CONST_BITS+PASS1_BITS+3)
+                                & RANGE_MASK];
+        outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
+                                CONST_BITS+PASS1_BITS+3)
+                                & RANGE_MASK];
+        outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
+                                CONST_BITS+PASS1_BITS+3)
+                                & RANGE_MASK];
+
+        wsptr += 4;		/* advance pointer to next row */
+    }
+}
+
+
+/*
+ * Perform dequantization and inverse DCT on one block of coefficients,
+ * producing a reduced-size 3x3 output block.
+ *
+ * Optimized algorithm with 2 multiplications in the 1-D kernel.
+ * cK represents sqrt(2) * cos(K*pi/6).
+ */
+
+GLOBAL(void)
+jpeg_idct_3x3 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
+               JCOEFPTR coef_block,
+               JSAMPARRAY output_buf, JDIMENSION output_col)
+{
+    INT32 tmp0, tmp2, tmp10, tmp12;
+    JCOEFPTR inptr;
+    ISLOW_MULT_TYPE * quantptr;
+    int * wsptr;
+    JSAMPROW outptr;
+    JSAMPLE *range_limit = IDCT_range_limit(cinfo);
+    int ctr;
+    int workspace[3*3];	/* buffers data between passes */
+    SHIFT_TEMPS
+
+    /* Pass 1: process columns from input, store into work array. */
+
+    inptr = coef_block;
+    quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
+    wsptr = workspace;
+    for (ctr = 0; ctr < 3; ctr++, inptr++, quantptr++, wsptr++)
+    {
+        /* Even part */
+
+        tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
+        tmp0 <<= CONST_BITS;
+        /* Add fudge factor here for final descale. */
+        tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);
+        tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
+        tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
+        tmp10 = tmp0 + tmp12;
+        tmp2 = tmp0 - tmp12 - tmp12;
+
+        /* Odd part */
+
+        tmp12 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
+        tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
+
+        /* Final output stage */
+
+        wsptr[3*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
+        wsptr[3*2] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
+        wsptr[3*1] = (int) RIGHT_SHIFT(tmp2, CONST_BITS-PASS1_BITS);
+    }
+
+    /* Pass 2: process 3 rows from work array, store into output array. */
+
+    wsptr = workspace;
+    for (ctr = 0; ctr < 3; ctr++)
+    {
+        outptr = output_buf[ctr] + output_col;
+
+        /* Even part */
+
+        /* Add fudge factor here for final descale. */
+        tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
+        tmp0 <<= CONST_BITS;
+        tmp2 = (INT32) wsptr[2];
+        tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
+        tmp10 = tmp0 + tmp12;
+        tmp2 = tmp0 - tmp12 - tmp12;
+
+        /* Odd part */
+
+        tmp12 = (INT32) wsptr[1];
+        tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
+
+        /* Final output stage */
+
+        outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
+                                CONST_BITS+PASS1_BITS+3)
+                                & RANGE_MASK];
+        outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
+                                CONST_BITS+PASS1_BITS+3)
+                                & RANGE_MASK];
+        outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp2,
+                                CONST_BITS+PASS1_BITS+3)
+                                & RANGE_MASK];
+
+        wsptr += 3;		/* advance pointer to next row */
+    }
+}
+
+
+/*
+ * Perform dequantization and inverse DCT on one block of coefficients,
+ * producing a reduced-size 2x2 output block.
+ *
+ * Multiplication-less algorithm.
+ */
+
+GLOBAL(void)
+jpeg_idct_2x2 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
+               JCOEFPTR coef_block,
+               JSAMPARRAY output_buf, JDIMENSION output_col)
+{
+    INT32 tmp0, tmp1, tmp2, tmp3, tmp4, tmp5;
+    ISLOW_MULT_TYPE * quantptr;
+    JSAMPROW outptr;
+    JSAMPLE *range_limit = IDCT_range_limit(cinfo);
+    SHIFT_TEMPS
+
+    /* Pass 1: process columns from input. */
+
+    quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
+
+    /* Column 0 */
+    tmp4 = DEQUANTIZE(coef_block[DCTSIZE*0], quantptr[DCTSIZE*0]);
+    tmp5 = DEQUANTIZE(coef_block[DCTSIZE*1], quantptr[DCTSIZE*1]);
+    /* Add fudge factor here for final descale. */
+    tmp4 += ONE << 2;
+
+    tmp0 = tmp4 + tmp5;
+    tmp2 = tmp4 - tmp5;
+
+    /* Column 1 */
+    tmp4 = DEQUANTIZE(coef_block[DCTSIZE*0+1], quantptr[DCTSIZE*0+1]);
+    tmp5 = DEQUANTIZE(coef_block[DCTSIZE*1+1], quantptr[DCTSIZE*1+1]);
+
+    tmp1 = tmp4 + tmp5;
+    tmp3 = tmp4 - tmp5;
+
+    /* Pass 2: process 2 rows, store into output array. */
+
+    /* Row 0 */
+    outptr = output_buf[0] + output_col;
+
+    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp0 + tmp1, 3) & RANGE_MASK];
+    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp0 - tmp1, 3) & RANGE_MASK];
+
+    /* Row 1 */
+    outptr = output_buf[1] + output_col;
+
+    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp2 + tmp3, 3) & RANGE_MASK];
+    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp2 - tmp3, 3) & RANGE_MASK];
+}
+
+
+/*
+ * Perform dequantization and inverse DCT on one block of coefficients,
+ * producing a reduced-size 1x1 output block.
+ *
+ * We hardly need an inverse DCT routine for this: just take the
+ * average pixel value, which is one-eighth of the DC coefficient.
+ */
+
+GLOBAL(void)
+jpeg_idct_1x1 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
+               JCOEFPTR coef_block,
+               JSAMPARRAY output_buf, JDIMENSION output_col)
+{
+    int dcval;
+    ISLOW_MULT_TYPE * quantptr;
+    JSAMPLE *range_limit = IDCT_range_limit(cinfo);
+    SHIFT_TEMPS
+
+    /* 1x1 is trivial: just take the DC coefficient divided by 8. */
+    quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
+    dcval = DEQUANTIZE(coef_block[0], quantptr[0]);
+    dcval = (int) DESCALE((INT32) dcval, 3);
+
+    output_buf[0][output_col] = range_limit[dcval & RANGE_MASK];
+}
+
+
+/*
+ * Perform dequantization and inverse DCT on one block of coefficients,
+ * producing a 9x9 output block.
+ *
+ * Optimized algorithm with 10 multiplications in the 1-D kernel.
+ * cK represents sqrt(2) * cos(K*pi/18).
+ */
+
+GLOBAL(void)
+jpeg_idct_9x9 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
+               JCOEFPTR coef_block,
+               JSAMPARRAY output_buf, JDIMENSION output_col)
+{
+    INT32 tmp0, tmp1, tmp2, tmp3, tmp10, tmp11, tmp12, tmp13, tmp14;
+    INT32 z1, z2, z3, z4;
+    JCOEFPTR inptr;
+    ISLOW_MULT_TYPE * quantptr;
+    int * wsptr;
+    JSAMPROW outptr;
+    JSAMPLE *range_limit = IDCT_range_limit(cinfo);
+    int ctr;
+    int workspace[8*9];	/* buffers data between passes */
+    SHIFT_TEMPS
+
+    /* Pass 1: process columns from input, store into work array. */
+
+    inptr = coef_block;
+    quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
+    wsptr = workspace;
+    for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++)
+    {
+        /* Even part */
+
+        tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
+        tmp0 <<= CONST_BITS;
+        /* Add fudge factor here for final descale. */
+        tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);
+
+        z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
+        z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
+        z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
+
+        tmp3 = MULTIPLY(z3, FIX(0.707106781));      /* c6 */
+        tmp1 = tmp0 + tmp3;
+        tmp2 = tmp0 - tmp3 - tmp3;
+
+        tmp0 = MULTIPLY(z1 - z2, FIX(0.707106781)); /* c6 */
+        tmp11 = tmp2 + tmp0;
+        tmp14 = tmp2 - tmp0 - tmp0;
+
+        tmp0 = MULTIPLY(z1 + z2, FIX(1.328926049)); /* c2 */
+        tmp2 = MULTIPLY(z1, FIX(1.083350441));      /* c4 */
+        tmp3 = MULTIPLY(z2, FIX(0.245575608));      /* c8 */
+
+        tmp10 = tmp1 + tmp0 - tmp3;
+        tmp12 = tmp1 - tmp0 + tmp2;
+        tmp13 = tmp1 - tmp2 + tmp3;
+
+        /* Odd part */
+
+        z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
+        z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
+        z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
+        z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
+
+        z2 = MULTIPLY(z2, - FIX(1.224744871));           /* -c3 */
+
+        tmp2 = MULTIPLY(z1 + z3, FIX(0.909038955));      /* c5 */
+        tmp3 = MULTIPLY(z1 + z4, FIX(0.483689525));      /* c7 */
+        tmp0 = tmp2 + tmp3 - z2;
+        tmp1 = MULTIPLY(z3 - z4, FIX(1.392728481));      /* c1 */
+        tmp2 += z2 - tmp1;
+        tmp3 += z2 + tmp1;
+        tmp1 = MULTIPLY(z1 - z3 - z4, FIX(1.224744871)); /* c3 */
+
+        /* Final output stage */
+
+        wsptr[8*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
+        wsptr[8*8] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
+        wsptr[8*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
+        wsptr[8*7] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
+        wsptr[8*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
+        wsptr[8*6] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
+        wsptr[8*3] = (int) RIGHT_SHIFT(tmp13 + tmp3, CONST_BITS-PASS1_BITS);
+        wsptr[8*5] = (int) RIGHT_SHIFT(tmp13 - tmp3, CONST_BITS-PASS1_BITS);
+        wsptr[8*4] = (int) RIGHT_SHIFT(tmp14, CONST_BITS-PASS1_BITS);
+    }
+
+    /* Pass 2: process 9 rows from work array, store into output array. */
+
+    wsptr = workspace;
+    for (ctr = 0; ctr < 9; ctr++)
+    {
+        outptr = output_buf[ctr] + output_col;
+
+        /* Even part */
+
+        /* Add fudge factor here for final descale. */
+        tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
+        tmp0 <<= CONST_BITS;
+
+        z1 = (INT32) wsptr[2];
+        z2 = (INT32) wsptr[4];
+        z3 = (INT32) wsptr[6];
+
+        tmp3 = MULTIPLY(z3, FIX(0.707106781));      /* c6 */
+        tmp1 = tmp0 + tmp3;
+        tmp2 = tmp0 - tmp3 - tmp3;
+
+        tmp0 = MULTIPLY(z1 - z2, FIX(0.707106781)); /* c6 */
+        tmp11 = tmp2 + tmp0;
+        tmp14 = tmp2 - tmp0 - tmp0;
+
+        tmp0 = MULTIPLY(z1 + z2, FIX(1.328926049)); /* c2 */
+        tmp2 = MULTIPLY(z1, FIX(1.083350441));      /* c4 */
+        tmp3 = MULTIPLY(z2, FIX(0.245575608));      /* c8 */
+
+        tmp10 = tmp1 + tmp0 - tmp3;
+        tmp12 = tmp1 - tmp0 + tmp2;
+        tmp13 = tmp1 - tmp2 + tmp3;
+
+        /* Odd part */
+
+        z1 = (INT32) wsptr[1];
+        z2 = (INT32) wsptr[3];
+        z3 = (INT32) wsptr[5];
+        z4 = (INT32) wsptr[7];
+
+        z2 = MULTIPLY(z2, - FIX(1.224744871));           /* -c3 */
+
+        tmp2 = MULTIPLY(z1 + z3, FIX(0.909038955));      /* c5 */
+        tmp3 = MULTIPLY(z1 + z4, FIX(0.483689525));      /* c7 */
+        tmp0 = tmp2 + tmp3 - z2;
+        tmp1 = MULTIPLY(z3 - z4, FIX(1.392728481));      /* c1 */
+        tmp2 += z2 - tmp1;
+        tmp3 += z2 + tmp1;
+        tmp1 = MULTIPLY(z1 - z3 - z4, FIX(1.224744871)); /* c3 */
+
+        /* Final output stage */
+
+        outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
+                                CONST_BITS+PASS1_BITS+3)
+                                & RANGE_MASK];
+        outptr[8] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
+                                CONST_BITS+PASS1_BITS+3)
+                                & RANGE_MASK];
+        outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
+                                CONST_BITS+PASS1_BITS+3)
+                                & RANGE_MASK];
+        outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
+                                CONST_BITS+PASS1_BITS+3)
+                                & RANGE_MASK];
+        outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
+                                CONST_BITS+PASS1_BITS+3)
+                                & RANGE_MASK];
+        outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
+                                CONST_BITS+PASS1_BITS+3)
+                                & RANGE_MASK];
+        outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp3,
+                                CONST_BITS+PASS1_BITS+3)
+                                & RANGE_MASK];
+        outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp3,
+                                CONST_BITS+PASS1_BITS+3)
+                                & RANGE_MASK];
+        outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp14,
+                                CONST_BITS+PASS1_BITS+3)
+                                & RANGE_MASK];
+
+        wsptr += 8;		/* advance pointer to next row */
+    }
+}
+
+
+/*
+ * Perform dequantization and inverse DCT on one block of coefficients,
+ * producing a 10x10 output block.
+ *
+ * Optimized algorithm with 12 multiplications in the 1-D kernel.
+ * cK represents sqrt(2) * cos(K*pi/20).
+ */
+
+GLOBAL(void)
+jpeg_idct_10x10 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
+                 JCOEFPTR coef_block,
+                 JSAMPARRAY output_buf, JDIMENSION output_col)
+{
+    INT32 tmp10, tmp11, tmp12, tmp13, tmp14;
+    INT32 tmp20, tmp21, tmp22, tmp23, tmp24;
+    INT32 z1, z2, z3, z4, z5;
+    JCOEFPTR inptr;
+    ISLOW_MULT_TYPE * quantptr;
+    int * wsptr;
+    JSAMPROW outptr;
+    JSAMPLE *range_limit = IDCT_range_limit(cinfo);
+    int ctr;
+    int workspace[8*10];	/* buffers data between passes */
+    SHIFT_TEMPS
+
+    /* Pass 1: process columns from input, store into work array. */
+
+    inptr = coef_block;
+    quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
+    wsptr = workspace;
+    for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++)
+    {
+        /* Even part */
+
+        z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
+        z3 <<= CONST_BITS;
+        /* Add fudge factor here for final descale. */
+        z3 += ONE << (CONST_BITS-PASS1_BITS-1);
+        z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
+        z1 = MULTIPLY(z4, FIX(1.144122806));         /* c4 */
+        z2 = MULTIPLY(z4, FIX(0.437016024));         /* c8 */
+        tmp10 = z3 + z1;
+        tmp11 = z3 - z2;
+
+        tmp22 = RIGHT_SHIFT(z3 - ((z1 - z2) << 1),   /* c0 = (c4-c8)*2 */
+                            CONST_BITS-PASS1_BITS);
+
+        z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
+        z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
+
+        z1 = MULTIPLY(z2 + z3, FIX(0.831253876));    /* c6 */
+        tmp12 = z1 + MULTIPLY(z2, FIX(0.513743148)); /* c2-c6 */
+        tmp13 = z1 - MULTIPLY(z3, FIX(2.176250899)); /* c2+c6 */
+
+        tmp20 = tmp10 + tmp12;
+        tmp24 = tmp10 - tmp12;
+        tmp21 = tmp11 + tmp13;
+        tmp23 = tmp11 - tmp13;
+
+        /* Odd part */
+
+        z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
+        z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
+        z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
+        z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
+
+        tmp11 = z2 + z4;
+        tmp13 = z2 - z4;
+
+        tmp12 = MULTIPLY(tmp13, FIX(0.309016994));        /* (c3-c7)/2 */
+        z5 = z3 << CONST_BITS;
+
+        z2 = MULTIPLY(tmp11, FIX(0.951056516));           /* (c3+c7)/2 */
+        z4 = z5 + tmp12;
+
+        tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
+        tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
+
+        z2 = MULTIPLY(tmp11, FIX(0.587785252));           /* (c1-c9)/2 */
+        z4 = z5 - tmp12 - (tmp13 << (CONST_BITS - 1));
+
+        tmp12 = (z1 - tmp13 - z3) << PASS1_BITS;
+
+        tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
+        tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
+
+        /* Final output stage */
+
+        wsptr[8*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
+        wsptr[8*9] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
+        wsptr[8*1] = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
+        wsptr[8*8] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
+        wsptr[8*2] = (int) (tmp22 + tmp12);
+        wsptr[8*7] = (int) (tmp22 - tmp12);
+        wsptr[8*3] = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
+        wsptr[8*6] = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
+        wsptr[8*4] = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
+        wsptr[8*5] = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
+    }
+
+    /* Pass 2: process 10 rows from work array, store into output array. */
+
+    wsptr = workspace;
+    for (ctr = 0; ctr < 10; ctr++)
+    {
+        outptr = output_buf[ctr] + output_col;
+
+        /* Even part */
+
+        /* Add fudge factor here for final descale. */
+        z3 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
+        z3 <<= CONST_BITS;
+        z4 = (INT32) wsptr[4];
+        z1 = MULTIPLY(z4, FIX(1.144122806));         /* c4 */
+        z2 = MULTIPLY(z4, FIX(0.437016024));         /* c8 */
+        tmp10 = z3 + z1;
+        tmp11 = z3 - z2;
+
+        tmp22 = z3 - ((z1 - z2) << 1);               /* c0 = (c4-c8)*2 */
+
+        z2 = (INT32) wsptr[2];
+        z3 = (INT32) wsptr[6];
+
+        z1 = MULTIPLY(z2 + z3, FIX(0.831253876));    /* c6 */
+        tmp12 = z1 + MULTIPLY(z2, FIX(0.513743148)); /* c2-c6 */
+        tmp13 = z1 - MULTIPLY(z3, FIX(2.176250899)); /* c2+c6 */
+
+        tmp20 = tmp10 + tmp12;
+        tmp24 = tmp10 - tmp12;
+        tmp21 = tmp11 + tmp13;
+        tmp23 = tmp11 - tmp13;
+
+        /* Odd part */
+
+        z1 = (INT32) wsptr[1];
+        z2 = (INT32) wsptr[3];
+        z3 = (INT32) wsptr[5];
+        z3 <<= CONST_BITS;
+        z4 = (INT32) wsptr[7];
+
+        tmp11 = z2 + z4;
+        tmp13 = z2 - z4;
+
+        tmp12 = MULTIPLY(tmp13, FIX(0.309016994));        /* (c3-c7)/2 */
+
+        z2 = MULTIPLY(tmp11, FIX(0.951056516));           /* (c3+c7)/2 */
+        z4 = z3 + tmp12;
+
+        tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
+        tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
+
+        z2 = MULTIPLY(tmp11, FIX(0.587785252));           /* (c1-c9)/2 */
+        z4 = z3 - tmp12 - (tmp13 << (CONST_BITS - 1));
+
+        tmp12 = ((z1 - tmp13) << CONST_BITS) - z3;
+
+        tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
+        tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
+
+        /* Final output stage */
+
+        outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
+                                CONST_BITS+PASS1_BITS+3)
+                                & RANGE_MASK];
+        outptr[9] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
+                                CONST_BITS+PASS1_BITS+3)
+                                & RANGE_MASK];
+        outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
+                                CONST_BITS+PASS1_BITS+3)
+                                & RANGE_MASK];
+        outptr[8] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
+                                CONST_BITS+PASS1_BITS+3)
+                                & RANGE_MASK];
+        outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
+                                CONST_BITS+PASS1_BITS+3)
+                                & RANGE_MASK];
+        outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
+                                CONST_BITS+PASS1_BITS+3)
+                                & RANGE_MASK];
+        outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
+                                CONST_BITS+PASS1_BITS+3)
+                                & RANGE_MASK];
+        outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
+                                CONST_BITS+PASS1_BITS+3)
+                                & RANGE_MASK];
+        outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
+                                CONST_BITS+PASS1_BITS+3)
+                                & RANGE_MASK];
+        outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
+                                CONST_BITS+PASS1_BITS+3)
+                                & RANGE_MASK];
+
+        wsptr += 8;		/* advance pointer to next row */
+    }
+}
+
+
+/*
+ * Perform dequantization and inverse DCT on one block of coefficients,
+ * producing a 11x11 output block.
+ *
+ * Optimized algorithm with 24 multiplications in the 1-D kernel.
+ * cK represents sqrt(2) * cos(K*pi/22).
+ */
+
+GLOBAL(void)
+jpeg_idct_11x11 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
+                 JCOEFPTR coef_block,
+                 JSAMPARRAY output_buf, JDIMENSION output_col)
+{
+    INT32 tmp10, tmp11, tmp12, tmp13, tmp14;
+    INT32 tmp20, tmp21, tmp22, tmp23, tmp24, tmp25;
+    INT32 z1, z2, z3, z4;
+    JCOEFPTR inptr;
+    ISLOW_MULT_TYPE * quantptr;
+    int * wsptr;
+    JSAMPROW outptr;
+    JSAMPLE *range_limit = IDCT_range_limit(cinfo);
+    int ctr;
+    int workspace[8*11];	/* buffers data between passes */
+    SHIFT_TEMPS
+
+    /* Pass 1: process columns from input, store into work array. */
+
+    inptr = coef_block;
+    quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
+    wsptr = workspace;
+    for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++)
+    {
+        /* Even part */
+
+        tmp10 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
+        tmp10 <<= CONST_BITS;
+        /* Add fudge factor here for final descale. */
+        tmp10 += ONE << (CONST_BITS-PASS1_BITS-1);
+
+        z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
+        z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
+        z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
+
+        tmp20 = MULTIPLY(z2 - z3, FIX(2.546640132));     /* c2+c4 */
+        tmp23 = MULTIPLY(z2 - z1, FIX(0.430815045));     /* c2-c6 */
+        z4 = z1 + z3;
+        tmp24 = MULTIPLY(z4, - FIX(1.155664402));        /* -(c2-c10) */
+        z4 -= z2;
+        tmp25 = tmp10 + MULTIPLY(z4, FIX(1.356927976));  /* c2 */
+        tmp21 = tmp20 + tmp23 + tmp25 -
+                MULTIPLY(z2, FIX(1.821790775));          /* c2+c4+c10-c6 */
+        tmp20 += tmp25 + MULTIPLY(z3, FIX(2.115825087)); /* c4+c6 */
+        tmp23 += tmp25 - MULTIPLY(z1, FIX(1.513598477)); /* c6+c8 */
+        tmp24 += tmp25;
+        tmp22 = tmp24 - MULTIPLY(z3, FIX(0.788749120));  /* c8+c10 */
+        tmp24 += MULTIPLY(z2, FIX(1.944413522)) -        /* c2+c8 */
+                 MULTIPLY(z1, FIX(1.390975730));         /* c4+c10 */
+        tmp25 = tmp10 - MULTIPLY(z4, FIX(1.414213562));  /* c0 */
+
+        /* Odd part */
+
+        z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
+        z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
+        z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
+        z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
+
+        tmp11 = z1 + z2;
+        tmp14 = MULTIPLY(tmp11 + z3 + z4, FIX(0.398430003)); /* c9 */
+        tmp11 = MULTIPLY(tmp11, FIX(0.887983902));           /* c3-c9 */
+        tmp12 = MULTIPLY(z1 + z3, FIX(0.670361295));         /* c5-c9 */
+        tmp13 = tmp14 + MULTIPLY(z1 + z4, FIX(0.366151574)); /* c7-c9 */
+        tmp10 = tmp11 + tmp12 + tmp13 -
+                MULTIPLY(z1, FIX(0.923107866));              /* c7+c5+c3-c1-2*c9 */
+        z1    = tmp14 - MULTIPLY(z2 + z3, FIX(1.163011579)); /* c7+c9 */
+        tmp11 += z1 + MULTIPLY(z2, FIX(2.073276588));        /* c1+c7+3*c9-c3 */
+        tmp12 += z1 - MULTIPLY(z3, FIX(1.192193623));        /* c3+c5-c7-c9 */
+        z1    = MULTIPLY(z2 + z4, - FIX(1.798248910));       /* -(c1+c9) */
+        tmp11 += z1;
+        tmp13 += z1 + MULTIPLY(z4, FIX(2.102458632));        /* c1+c5+c9-c7 */
+        tmp14 += MULTIPLY(z2, - FIX(1.467221301)) +          /* -(c5+c9) */
+                 MULTIPLY(z3, FIX(1.001388905)) -            /* c1-c9 */
+                 MULTIPLY(z4, FIX(1.684843907));             /* c3+c9 */
+
+        /* Final output stage */
+
+        wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
+        wsptr[8*10] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
+        wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
+        wsptr[8*9]  = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
+        wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
+        wsptr[8*8]  = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
+        wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
+        wsptr[8*7]  = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
+        wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
+        wsptr[8*6]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
+        wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25, CONST_BITS-PASS1_BITS);
+    }
+
+    /* Pass 2: process 11 rows from work array, store into output array. */
+
+    wsptr = workspace;
+    for (ctr = 0; ctr < 11; ctr++)
+    {
+        outptr = output_buf[ctr] + output_col;
+
+        /* Even part */
+
+        /* Add fudge factor here for final descale. */
+        tmp10 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
+        tmp10 <<= CONST_BITS;
+
+        z1 = (INT32) wsptr[2];
+        z2 = (INT32) wsptr[4];
+        z3 = (INT32) wsptr[6];
+
+        tmp20 = MULTIPLY(z2 - z3, FIX(2.546640132));     /* c2+c4 */
+        tmp23 = MULTIPLY(z2 - z1, FIX(0.430815045));     /* c2-c6 */
+        z4 = z1 + z3;
+        tmp24 = MULTIPLY(z4, - FIX(1.155664402));        /* -(c2-c10) */
+        z4 -= z2;
+        tmp25 = tmp10 + MULTIPLY(z4, FIX(1.356927976));  /* c2 */
+        tmp21 = tmp20 + tmp23 + tmp25 -
+                MULTIPLY(z2, FIX(1.821790775));          /* c2+c4+c10-c6 */
+        tmp20 += tmp25 + MULTIPLY(z3, FIX(2.115825087)); /* c4+c6 */
+        tmp23 += tmp25 - MULTIPLY(z1, FIX(1.513598477)); /* c6+c8 */
+        tmp24 += tmp25;
+        tmp22 = tmp24 - MULTIPLY(z3, FIX(0.788749120));  /* c8+c10 */
+        tmp24 += MULTIPLY(z2, FIX(1.944413522)) -        /* c2+c8 */
+                 MULTIPLY(z1, FIX(1.390975730));         /* c4+c10 */
+        tmp25 = tmp10 - MULTIPLY(z4, FIX(1.414213562));  /* c0 */
+
+        /* Odd part */
+
+        z1 = (INT32) wsptr[1];
+        z2 = (INT32) wsptr[3];
+        z3 = (INT32) wsptr[5];
+        z4 = (INT32) wsptr[7];
+
+        tmp11 = z1 + z2;
+        tmp14 = MULTIPLY(tmp11 + z3 + z4, FIX(0.398430003)); /* c9 */
+        tmp11 = MULTIPLY(tmp11, FIX(0.887983902));           /* c3-c9 */
+        tmp12 = MULTIPLY(z1 + z3, FIX(0.670361295));         /* c5-c9 */
+        tmp13 = tmp14 + MULTIPLY(z1 + z4, FIX(0.366151574)); /* c7-c9 */
+        tmp10 = tmp11 + tmp12 + tmp13 -
+                MULTIPLY(z1, FIX(0.923107866));              /* c7+c5+c3-c1-2*c9 */
+        z1    = tmp14 - MULTIPLY(z2 + z3, FIX(1.163011579)); /* c7+c9 */
+        tmp11 += z1 + MULTIPLY(z2, FIX(2.073276588));        /* c1+c7+3*c9-c3 */
+        tmp12 += z1 - MULTIPLY(z3, FIX(1.192193623));        /* c3+c5-c7-c9 */
+        z1    = MULTIPLY(z2 + z4, - FIX(1.798248910));       /* -(c1+c9) */
+        tmp11 += z1;
+        tmp13 += z1 + MULTIPLY(z4, FIX(2.102458632));        /* c1+c5+c9-c7 */
+        tmp14 += MULTIPLY(z2, - FIX(1.467221301)) +          /* -(c5+c9) */
+                 MULTIPLY(z3, FIX(1.001388905)) -            /* c1-c9 */
+                 MULTIPLY(z4, FIX(1.684843907));             /* c3+c9 */
+
+        /* Final output stage */
+
+        outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
+                                 CONST_BITS+PASS1_BITS+3)
+                                 & RANGE_MASK];
+        outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
+                                 CONST_BITS+PASS1_BITS+3)
+                                 & RANGE_MASK];
+        outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
+                                 CONST_BITS+PASS1_BITS+3)
+                                 & RANGE_MASK];
+        outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
+                                 CONST_BITS+PASS1_BITS+3)
+                                 & RANGE_MASK];
+        outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
+                                 CONST_BITS+PASS1_BITS+3)
+                                 & RANGE_MASK];
+        outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
+                                 CONST_BITS+PASS1_BITS+3)
+                                 & RANGE_MASK];
+        outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
+                                 CONST_BITS+PASS1_BITS+3)
+                                 & RANGE_MASK];
+        outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
+                                 CONST_BITS+PASS1_BITS+3)
+                                 & RANGE_MASK];
+        outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
+                                 CONST_BITS+PASS1_BITS+3)
+                                 & RANGE_MASK];
+        outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
+                                 CONST_BITS+PASS1_BITS+3)
+                                 & RANGE_MASK];
+        outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25,
+                                 CONST_BITS+PASS1_BITS+3)
+                                 & RANGE_MASK];
+
+        wsptr += 8;		/* advance pointer to next row */
+    }
+}
+
+
+/*
+ * Perform dequantization and inverse DCT on one block of coefficients,
+ * producing a 12x12 output block.
+ *
+ * Optimized algorithm with 15 multiplications in the 1-D kernel.
+ * cK represents sqrt(2) * cos(K*pi/24).
+ */
+
+GLOBAL(void)
+jpeg_idct_12x12 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
+                 JCOEFPTR coef_block,
+                 JSAMPARRAY output_buf, JDIMENSION output_col)
+{
+    INT32 tmp10, tmp11, tmp12, tmp13, tmp14, tmp15;
+    INT32 tmp20, tmp21, tmp22, tmp23, tmp24, tmp25;
+    INT32 z1, z2, z3, z4;
+    JCOEFPTR inptr;
+    ISLOW_MULT_TYPE * quantptr;
+    int * wsptr;
+    JSAMPROW outptr;
+    JSAMPLE *range_limit = IDCT_range_limit(cinfo);
+    int ctr;
+    int workspace[8*12];	/* buffers data between passes */
+    SHIFT_TEMPS
+
+    /* Pass 1: process columns from input, store into work array. */
+
+    inptr = coef_block;
+    quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
+    wsptr = workspace;
+    for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++)
+    {
+        /* Even part */
+
+        z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
+        z3 <<= CONST_BITS;
+        /* Add fudge factor here for final descale. */
+        z3 += ONE << (CONST_BITS-PASS1_BITS-1);
+
+        z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
+        z4 = MULTIPLY(z4, FIX(1.224744871)); /* c4 */
+
+        tmp10 = z3 + z4;
+        tmp11 = z3 - z4;
+
+        z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
+        z4 = MULTIPLY(z1, FIX(1.366025404)); /* c2 */
+        z1 <<= CONST_BITS;
+        z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
+        z2 <<= CONST_BITS;
+
+        tmp12 = z1 - z2;
+
+        tmp21 = z3 + tmp12;
+        tmp24 = z3 - tmp12;
+
+        tmp12 = z4 + z2;
+
+        tmp20 = tmp10 + tmp12;
+        tmp25 = tmp10 - tmp12;
+
+        tmp12 = z4 - z1 - z2;
+
+        tmp22 = tmp11 + tmp12;
+        tmp23 = tmp11 - tmp12;
+
+        /* Odd part */
+
+        z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
+        z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
+        z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
+        z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
+
+        tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
+        tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */
+
+        tmp10 = z1 + z3;
+        tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
+        tmp12 = tmp15 + MULTIPLY(tmp10, FIX(0.261052384));       /* c5-c7 */
+        tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
+        tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
+        tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
+        tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
+        tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
+                 MULTIPLY(z4, FIX(1.982889723));                 /* c5+c7 */
+
+        z1 -= z4;
+        z2 -= z3;
+        z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
+        tmp11 = z3 + MULTIPLY(z1, FIX_0_765366865);              /* c3-c9 */
+        tmp14 = z3 - MULTIPLY(z2, FIX_1_847759065);              /* c3+c9 */
+
+        /* Final output stage */
+
+        wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
+        wsptr[8*11] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
+        wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
+        wsptr[8*10] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
+        wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
+        wsptr[8*9]  = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
+        wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
+        wsptr[8*8]  = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
+        wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
+        wsptr[8*7]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
+        wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
+        wsptr[8*6]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
+    }
+
+    /* Pass 2: process 12 rows from work array, store into output array. */
+
+    wsptr = workspace;
+    for (ctr = 0; ctr < 12; ctr++)
+    {
+        outptr = output_buf[ctr] + output_col;
+
+        /* Even part */
+
+        /* Add fudge factor here for final descale. */
+        z3 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
+        z3 <<= CONST_BITS;
+
+        z4 = (INT32) wsptr[4];
+        z4 = MULTIPLY(z4, FIX(1.224744871)); /* c4 */
+
+        tmp10 = z3 + z4;
+        tmp11 = z3 - z4;
+
+        z1 = (INT32) wsptr[2];
+        z4 = MULTIPLY(z1, FIX(1.366025404)); /* c2 */
+        z1 <<= CONST_BITS;
+        z2 = (INT32) wsptr[6];
+        z2 <<= CONST_BITS;
+
+        tmp12 = z1 - z2;
+
+        tmp21 = z3 + tmp12;
+        tmp24 = z3 - tmp12;
+
+        tmp12 = z4 + z2;
+
+        tmp20 = tmp10 + tmp12;
+        tmp25 = tmp10 - tmp12;
+
+        tmp12 = z4 - z1 - z2;
+
+        tmp22 = tmp11 + tmp12;
+        tmp23 = tmp11 - tmp12;
+
+        /* Odd part */
+
+        z1 = (INT32) wsptr[1];
+        z2 = (INT32) wsptr[3];
+        z3 = (INT32) wsptr[5];
+        z4 = (INT32) wsptr[7];
+
+        tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
+        tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */
+
+        tmp10 = z1 + z3;
+        tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
+        tmp12 = tmp15 + MULTIPLY(tmp10, FIX(0.261052384));       /* c5-c7 */
+        tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
+        tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
+        tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
+        tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
+        tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
+                 MULTIPLY(z4, FIX(1.982889723));                 /* c5+c7 */
+
+        z1 -= z4;
+        z2 -= z3;
+        z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
+        tmp11 = z3 + MULTIPLY(z1, FIX_0_765366865);              /* c3-c9 */
+        tmp14 = z3 - MULTIPLY(z2, FIX_1_847759065);              /* c3+c9 */
+
+        /* Final output stage */
+
+        outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
+                                 CONST_BITS+PASS1_BITS+3)
+                                 & RANGE_MASK];
+        outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
+                                 CONST_BITS+PASS1_BITS+3)
+                                 & RANGE_MASK];
+        outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
+                                 CONST_BITS+PASS1_BITS+3)
+                                 & RANGE_MASK];
+        outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
+                                 CONST_BITS+PASS1_BITS+3)
+                                 & RANGE_MASK];
+        outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
+                                 CONST_BITS+PASS1_BITS+3)
+                                 & RANGE_MASK];
+        outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
+                                 CONST_BITS+PASS1_BITS+3)
+                                 & RANGE_MASK];
+        outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
+                                 CONST_BITS+PASS1_BITS+3)
+                                 & RANGE_MASK];
+        outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
+                                 CONST_BITS+PASS1_BITS+3)
+                                 & RANGE_MASK];
+        outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
+                                 CONST_BITS+PASS1_BITS+3)
+                                 & RANGE_MASK];
+        outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
+                                 CONST_BITS+PASS1_BITS+3)
+                                 & RANGE_MASK];
+        outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
+                                 CONST_BITS+PASS1_BITS+3)
+                                 & RANGE_MASK];
+        outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
+                                 CONST_BITS+PASS1_BITS+3)
+                                 & RANGE_MASK];
+
+        wsptr += 8;		/* advance pointer to next row */
+    }
+}
+
+
+/*
+ * Perform dequantization and inverse DCT on one block of coefficients,
+ * producing a 13x13 output block.
+ *
+ * Optimized algorithm with 29 multiplications in the 1-D kernel.
+ * cK represents sqrt(2) * cos(K*pi/26).
+ */
+
+GLOBAL(void)
+jpeg_idct_13x13 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
+                 JCOEFPTR coef_block,
+                 JSAMPARRAY output_buf, JDIMENSION output_col)
+{
+    INT32 tmp10, tmp11, tmp12, tmp13, tmp14, tmp15;
+    INT32 tmp20, tmp21, tmp22, tmp23, tmp24, tmp25, tmp26;
+    INT32 z1, z2, z3, z4;
+    JCOEFPTR inptr;
+    ISLOW_MULT_TYPE * quantptr;
+    int * wsptr;
+    JSAMPROW outptr;
+    JSAMPLE *range_limit = IDCT_range_limit(cinfo);
+    int ctr;
+    int workspace[8*13];	/* buffers data between passes */
+    SHIFT_TEMPS
+
+    /* Pass 1: process columns from input, store into work array. */
+
+    inptr = coef_block;
+    quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
+    wsptr = workspace;
+    for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++)
+    {
+        /* Even part */
+
+        z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
+        z1 <<= CONST_BITS;
+        /* Add fudge factor here for final descale. */
+        z1 += ONE << (CONST_BITS-PASS1_BITS-1);
+
+        z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
+        z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
+        z4 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
+
+        tmp10 = z3 + z4;
+        tmp11 = z3 - z4;
+
+        tmp12 = MULTIPLY(tmp10, FIX(1.155388986));                /* (c4+c6)/2 */
+        tmp13 = MULTIPLY(tmp11, FIX(0.096834934)) + z1;           /* (c4-c6)/2 */
+
+        tmp20 = MULTIPLY(z2, FIX(1.373119086)) + tmp12 + tmp13;   /* c2 */
+        tmp22 = MULTIPLY(z2, FIX(0.501487041)) - tmp12 + tmp13;   /* c10 */
+
+        tmp12 = MULTIPLY(tmp10, FIX(0.316450131));                /* (c8-c12)/2 */
+        tmp13 = MULTIPLY(tmp11, FIX(0.486914739)) + z1;           /* (c8+c12)/2 */
+
+        tmp21 = MULTIPLY(z2, FIX(1.058554052)) - tmp12 + tmp13;   /* c6 */
+        tmp25 = MULTIPLY(z2, - FIX(1.252223920)) + tmp12 + tmp13; /* c4 */
+
+        tmp12 = MULTIPLY(tmp10, FIX(0.435816023));                /* (c2-c10)/2 */
+        tmp13 = MULTIPLY(tmp11, FIX(0.937303064)) - z1;           /* (c2+c10)/2 */
+
+        tmp23 = MULTIPLY(z2, - FIX(0.170464608)) - tmp12 - tmp13; /* c12 */
+        tmp24 = MULTIPLY(z2, - FIX(0.803364869)) + tmp12 - tmp13; /* c8 */
+
+        tmp26 = MULTIPLY(tmp11 - z2, FIX(1.414213562)) + z1;      /* c0 */
+
+        /* Odd part */
+
+        z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
+        z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
+        z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
+        z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
+
+        tmp11 = MULTIPLY(z1 + z2, FIX(1.322312651));     /* c3 */
+        tmp12 = MULTIPLY(z1 + z3, FIX(1.163874945));     /* c5 */
+        tmp15 = z1 + z4;
+        tmp13 = MULTIPLY(tmp15, FIX(0.937797057));       /* c7 */
+        tmp10 = tmp11 + tmp12 + tmp13 -
+                MULTIPLY(z1, FIX(2.020082300));          /* c7+c5+c3-c1 */
+        tmp14 = MULTIPLY(z2 + z3, - FIX(0.338443458));   /* -c11 */
+        tmp11 += tmp14 + MULTIPLY(z2, FIX(0.837223564)); /* c5+c9+c11-c3 */
+        tmp12 += tmp14 - MULTIPLY(z3, FIX(1.572116027)); /* c1+c5-c9-c11 */
+        tmp14 = MULTIPLY(z2 + z4, - FIX(1.163874945));   /* -c5 */
+        tmp11 += tmp14;
+        tmp13 += tmp14 + MULTIPLY(z4, FIX(2.205608352)); /* c3+c5+c9-c7 */
+        tmp14 = MULTIPLY(z3 + z4, - FIX(0.657217813));   /* -c9 */
+        tmp12 += tmp14;
+        tmp13 += tmp14;
+        tmp15 = MULTIPLY(tmp15, FIX(0.338443458));       /* c11 */
+        tmp14 = tmp15 + MULTIPLY(z1, FIX(0.318774355)) - /* c9-c11 */
+                MULTIPLY(z2, FIX(0.466105296));          /* c1-c7 */
+        z1    = MULTIPLY(z3 - z2, FIX(0.937797057));     /* c7 */
+        tmp14 += z1;
+        tmp15 += z1 + MULTIPLY(z3, FIX(0.384515595)) -   /* c3-c7 */
+                 MULTIPLY(z4, FIX(1.742345811));         /* c1+c11 */
+
+        /* Final output stage */
+
+        wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
+        wsptr[8*12] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
+        wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
+        wsptr[8*11] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
+        wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
+        wsptr[8*10] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
+        wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
+        wsptr[8*9]  = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
+        wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
+        wsptr[8*8]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
+        wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
+        wsptr[8*7]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
+        wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26, CONST_BITS-PASS1_BITS);
+    }
+
+    /* Pass 2: process 13 rows from work array, store into output array. */
+
+    wsptr = workspace;
+    for (ctr = 0; ctr < 13; ctr++)
+    {
+        outptr = output_buf[ctr] + output_col;
+
+        /* Even part */
+
+        /* Add fudge factor here for final descale. */
+        z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
+        z1 <<= CONST_BITS;
+
+        z2 = (INT32) wsptr[2];
+        z3 = (INT32) wsptr[4];
+        z4 = (INT32) wsptr[6];
+
+        tmp10 = z3 + z4;
+        tmp11 = z3 - z4;
+
+        tmp12 = MULTIPLY(tmp10, FIX(1.155388986));                /* (c4+c6)/2 */
+        tmp13 = MULTIPLY(tmp11, FIX(0.096834934)) + z1;           /* (c4-c6)/2 */
+
+        tmp20 = MULTIPLY(z2, FIX(1.373119086)) + tmp12 + tmp13;   /* c2 */
+        tmp22 = MULTIPLY(z2, FIX(0.501487041)) - tmp12 + tmp13;   /* c10 */
+
+        tmp12 = MULTIPLY(tmp10, FIX(0.316450131));                /* (c8-c12)/2 */
+        tmp13 = MULTIPLY(tmp11, FIX(0.486914739)) + z1;           /* (c8+c12)/2 */
+
+        tmp21 = MULTIPLY(z2, FIX(1.058554052)) - tmp12 + tmp13;   /* c6 */
+        tmp25 = MULTIPLY(z2, - FIX(1.252223920)) + tmp12 + tmp13; /* c4 */
+
+        tmp12 = MULTIPLY(tmp10, FIX(0.435816023));                /* (c2-c10)/2 */
+        tmp13 = MULTIPLY(tmp11, FIX(0.937303064)) - z1;           /* (c2+c10)/2 */
+
+        tmp23 = MULTIPLY(z2, - FIX(0.170464608)) - tmp12 - tmp13; /* c12 */
+        tmp24 = MULTIPLY(z2, - FIX(0.803364869)) + tmp12 - tmp13; /* c8 */
+
+        tmp26 = MULTIPLY(tmp11 - z2, FIX(1.414213562)) + z1;      /* c0 */
+
+        /* Odd part */
+
+        z1 = (INT32) wsptr[1];
+        z2 = (INT32) wsptr[3];
+        z3 = (INT32) wsptr[5];
+        z4 = (INT32) wsptr[7];
+
+        tmp11 = MULTIPLY(z1 + z2, FIX(1.322312651));     /* c3 */
+        tmp12 = MULTIPLY(z1 + z3, FIX(1.163874945));     /* c5 */
+        tmp15 = z1 + z4;
+        tmp13 = MULTIPLY(tmp15, FIX(0.937797057));       /* c7 */
+        tmp10 = tmp11 + tmp12 + tmp13 -
+                MULTIPLY(z1, FIX(2.020082300));          /* c7+c5+c3-c1 */
+        tmp14 = MULTIPLY(z2 + z3, - FIX(0.338443458));   /* -c11 */
+        tmp11 += tmp14 + MULTIPLY(z2, FIX(0.837223564)); /* c5+c9+c11-c3 */
+        tmp12 += tmp14 - MULTIPLY(z3, FIX(1.572116027)); /* c1+c5-c9-c11 */
+        tmp14 = MULTIPLY(z2 + z4, - FIX(1.163874945));   /* -c5 */
+        tmp11 += tmp14;
+        tmp13 += tmp14 + MULTIPLY(z4, FIX(2.205608352)); /* c3+c5+c9-c7 */
+        tmp14 = MULTIPLY(z3 + z4, - FIX(0.657217813));   /* -c9 */
+        tmp12 += tmp14;
+        tmp13 += tmp14;
+        tmp15 = MULTIPLY(tmp15, FIX(0.338443458));       /* c11 */
+        tmp14 = tmp15 + MULTIPLY(z1, FIX(0.318774355)) - /* c9-c11 */
+                MULTIPLY(z2, FIX(0.466105296));          /* c1-c7 */
+        z1    = MULTIPLY(z3 - z2, FIX(0.937797057));     /* c7 */
+        tmp14 += z1;
+        tmp15 += z1 + MULTIPLY(z3, FIX(0.384515595)) -   /* c3-c7 */
+                 MULTIPLY(z4, FIX(1.742345811));         /* c1+c11 */
+
+        /* Final output stage */
+
+        outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
+                                 CONST_BITS+PASS1_BITS+3)
+                                 & RANGE_MASK];
+        outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
+                                 CONST_BITS+PASS1_BITS+3)
+                                 & RANGE_MASK];
+        outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
+                                 CONST_BITS+PASS1_BITS+3)
+                                 & RANGE_MASK];
+        outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
+                                 CONST_BITS+PASS1_BITS+3)
+                                 & RANGE_MASK];
+        outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
+                                 CONST_BITS+PASS1_BITS+3)
+                                 & RANGE_MASK];
+        outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
+                                 CONST_BITS+PASS1_BITS+3)
+                                 & RANGE_MASK];
+        outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
+                                 CONST_BITS+PASS1_BITS+3)
+                                 & RANGE_MASK];
+        outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
+                                 CONST_BITS+PASS1_BITS+3)
+                                 & RANGE_MASK];
+        outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
+                                 CONST_BITS+PASS1_BITS+3)
+                                 & RANGE_MASK];
+        outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
+                                 CONST_BITS+PASS1_BITS+3)
+                                 & RANGE_MASK];
+        outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
+                                 CONST_BITS+PASS1_BITS+3)
+                                 & RANGE_MASK];
+        outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
+                                 CONST_BITS+PASS1_BITS+3)
+                                 & RANGE_MASK];
+        outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26,
+                                 CONST_BITS+PASS1_BITS+3)
+                                 & RANGE_MASK];
+
+        wsptr += 8;		/* advance pointer to next row */
+    }
+}
+
+
+/*
+ * Perform dequantization and inverse DCT on one block of coefficients,
+ * producing a 14x14 output block.
+ *
+ * Optimized algorithm with 20 multiplications in the 1-D kernel.
+ * cK represents sqrt(2) * cos(K*pi/28).
+ */
+
+GLOBAL(void)
+jpeg_idct_14x14 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
+                 JCOEFPTR coef_block,
+                 JSAMPARRAY output_buf, JDIMENSION output_col)
+{
+    INT32 tmp10, tmp11, tmp12, tmp13, tmp14, tmp15, tmp16;
+    INT32 tmp20, tmp21, tmp22, tmp23, tmp24, tmp25, tmp26;
+    INT32 z1, z2, z3, z4;
+    JCOEFPTR inptr;
+    ISLOW_MULT_TYPE * quantptr;
+    int * wsptr;
+    JSAMPROW outptr;
+    JSAMPLE *range_limit = IDCT_range_limit(cinfo);
+    int ctr;
+    int workspace[8*14];	/* buffers data between passes */
+    SHIFT_TEMPS
+
+    /* Pass 1: process columns from input, store into work array. */
+
+    inptr = coef_block;
+    quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
+    wsptr = workspace;
+    for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++)
+    {
+        /* Even part */
+
+        z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
+        z1 <<= CONST_BITS;
+        /* Add fudge factor here for final descale. */
+        z1 += ONE << (CONST_BITS-PASS1_BITS-1);
+        z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
+        z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
+        z3 = MULTIPLY(z4, FIX(0.314692123));         /* c12 */
+        z4 = MULTIPLY(z4, FIX(0.881747734));         /* c8 */
+
+        tmp10 = z1 + z2;
+        tmp11 = z1 + z3;
+        tmp12 = z1 - z4;
+
+        tmp23 = RIGHT_SHIFT(z1 - ((z2 + z3 - z4) << 1), /* c0 = (c4+c12-c8)*2 */
+                            CONST_BITS-PASS1_BITS);
+
+        z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
+        z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
+
+        z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */
+
+        tmp13 = z3 + MULTIPLY(z1, FIX(0.273079590)); /* c2-c6 */
+        tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
+        tmp15 = MULTIPLY(z1, FIX(0.613604268)) -     /* c10 */
+                MULTIPLY(z2, FIX(1.378756276));      /* c2 */
+
+        tmp20 = tmp10 + tmp13;
+        tmp26 = tmp10 - tmp13;
+        tmp21 = tmp11 + tmp14;
+        tmp25 = tmp11 - tmp14;
+        tmp22 = tmp12 + tmp15;
+        tmp24 = tmp12 - tmp15;
+
+        /* Odd part */
+
+        z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
+        z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
+        z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
+        z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
+        tmp13 = z4 << CONST_BITS;
+
+        tmp14 = z1 + z3;
+        tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
+        tmp12 = MULTIPLY(tmp14, FIX(1.197448846));             /* c5 */
+        tmp10 = tmp11 + tmp12 + tmp13 - MULTIPLY(z1, FIX(1.126980169)); /* c3+c5-c1 */
+        tmp14 = MULTIPLY(tmp14, FIX(0.752406978));             /* c9 */
+        tmp16 = tmp14 - MULTIPLY(z1, FIX(1.061150426));        /* c9+c11-c13 */
+        z1    -= z2;
+        tmp15 = MULTIPLY(z1, FIX(0.467085129)) - tmp13;        /* c11 */
+        tmp16 += tmp15;
+        z1    += z4;
+        z4    = MULTIPLY(z2 + z3, - FIX(0.158341681)) - tmp13; /* -c13 */
+        tmp11 += z4 - MULTIPLY(z2, FIX(0.424103948));          /* c3-c9-c13 */
+        tmp12 += z4 - MULTIPLY(z3, FIX(2.373959773));          /* c3+c5-c13 */
+        z4    = MULTIPLY(z3 - z2, FIX(1.405321284));           /* c1 */
+        tmp14 += z4 + tmp13 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
+        tmp15 += z4 + MULTIPLY(z2, FIX(0.674957567));          /* c1+c11-c5 */
+
+        tmp13 = (z1 - z3) << PASS1_BITS;
+
+        /* Final output stage */
+
+        wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
+        wsptr[8*13] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
+        wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
+        wsptr[8*12] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
+        wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
+        wsptr[8*11] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
+        wsptr[8*3]  = (int) (tmp23 + tmp13);
+        wsptr[8*10] = (int) (tmp23 - tmp13);
+        wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
+        wsptr[8*9]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
+        wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
+        wsptr[8*8]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
+        wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp16, CONST_BITS-PASS1_BITS);
+        wsptr[8*7]  = (int) RIGHT_SHIFT(tmp26 - tmp16, CONST_BITS-PASS1_BITS);
+    }
+
+    /* Pass 2: process 14 rows from work array, store into output array. */
+
+    wsptr = workspace;
+    for (ctr = 0; ctr < 14; ctr++)
+    {
+        outptr = output_buf[ctr] + output_col;
+
+        /* Even part */
+
+        /* Add fudge factor here for final descale. */
+        z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
+        z1 <<= CONST_BITS;
+        z4 = (INT32) wsptr[4];
+        z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
+        z3 = MULTIPLY(z4, FIX(0.314692123));         /* c12 */
+        z4 = MULTIPLY(z4, FIX(0.881747734));         /* c8 */
+
+        tmp10 = z1 + z2;
+        tmp11 = z1 + z3;
+        tmp12 = z1 - z4;
+
+        tmp23 = z1 - ((z2 + z3 - z4) << 1);          /* c0 = (c4+c12-c8)*2 */
+
+        z1 = (INT32) wsptr[2];
+        z2 = (INT32) wsptr[6];
+
+        z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */
+
+        tmp13 = z3 + MULTIPLY(z1, FIX(0.273079590)); /* c2-c6 */
+        tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
+        tmp15 = MULTIPLY(z1, FIX(0.613604268)) -     /* c10 */
+                MULTIPLY(z2, FIX(1.378756276));      /* c2 */
+
+        tmp20 = tmp10 + tmp13;
+        tmp26 = tmp10 - tmp13;
+        tmp21 = tmp11 + tmp14;
+        tmp25 = tmp11 - tmp14;
+        tmp22 = tmp12 + tmp15;
+        tmp24 = tmp12 - tmp15;
+
+        /* Odd part */
+
+        z1 = (INT32) wsptr[1];
+        z2 = (INT32) wsptr[3];
+        z3 = (INT32) wsptr[5];
+        z4 = (INT32) wsptr[7];
+        z4 <<= CONST_BITS;
+
+        tmp14 = z1 + z3;
+        tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
+        tmp12 = MULTIPLY(tmp14, FIX(1.197448846));             /* c5 */
+        tmp10 = tmp11 + tmp12 + z4 - MULTIPLY(z1, FIX(1.126980169)); /* c3+c5-c1 */
+        tmp14 = MULTIPLY(tmp14, FIX(0.752406978));             /* c9 */
+        tmp16 = tmp14 - MULTIPLY(z1, FIX(1.061150426));        /* c9+c11-c13 */
+        z1    -= z2;
+        tmp15 = MULTIPLY(z1, FIX(0.467085129)) - z4;           /* c11 */
+        tmp16 += tmp15;
+        tmp13 = MULTIPLY(z2 + z3, - FIX(0.158341681)) - z4;    /* -c13 */
+        tmp11 += tmp13 - MULTIPLY(z2, FIX(0.424103948));       /* c3-c9-c13 */
+        tmp12 += tmp13 - MULTIPLY(z3, FIX(2.373959773));       /* c3+c5-c13 */
+        tmp13 = MULTIPLY(z3 - z2, FIX(1.405321284));           /* c1 */
+        tmp14 += tmp13 + z4 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
+        tmp15 += tmp13 + MULTIPLY(z2, FIX(0.674957567));       /* c1+c11-c5 */
+
+        tmp13 = ((z1 - z3) << CONST_BITS) + z4;
+
+        /* Final output stage */
+
+        outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
+                                 CONST_BITS+PASS1_BITS+3)
+                                 & RANGE_MASK];
+        outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
+                                 CONST_BITS+PASS1_BITS+3)
+                                 & RANGE_MASK];
+        outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
+                                 CONST_BITS+PASS1_BITS+3)
+                                 & RANGE_MASK];
+        outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
+                                 CONST_BITS+PASS1_BITS+3)
+                                 & RANGE_MASK];
+        outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
+                                 CONST_BITS+PASS1_BITS+3)
+                                 & RANGE_MASK];
+        outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
+                                 CONST_BITS+PASS1_BITS+3)
+                                 & RANGE_MASK];
+        outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
+                                 CONST_BITS+PASS1_BITS+3)
+                                 & RANGE_MASK];
+        outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
+                                 CONST_BITS+PASS1_BITS+3)
+                                 & RANGE_MASK];
+        outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
+                                 CONST_BITS+PASS1_BITS+3)
+                                 & RANGE_MASK];
+        outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
+                                 CONST_BITS+PASS1_BITS+3)
+                                 & RANGE_MASK];
+        outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
+                                 CONST_BITS+PASS1_BITS+3)
+                                 & RANGE_MASK];
+        outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
+                                 CONST_BITS+PASS1_BITS+3)
+                                 & RANGE_MASK];
+        outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp16,
+                                 CONST_BITS+PASS1_BITS+3)
+                                 & RANGE_MASK];
+        outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp16,
+                                 CONST_BITS+PASS1_BITS+3)
+                                 & RANGE_MASK];
+
+        wsptr += 8;		/* advance pointer to next row */
+    }
+}
+
+
+/*
+ * Perform dequantization and inverse DCT on one block of coefficients,
+ * producing a 15x15 output block.
+ *
+ * Optimized algorithm with 22 multiplications in the 1-D kernel.
+ * cK represents sqrt(2) * cos(K*pi/30).
+ */
+
+GLOBAL(void)
+jpeg_idct_15x15 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
+                 JCOEFPTR coef_block,
+                 JSAMPARRAY output_buf, JDIMENSION output_col)
+{
+    INT32 tmp10, tmp11, tmp12, tmp13, tmp14, tmp15, tmp16;
+    INT32 tmp20, tmp21, tmp22, tmp23, tmp24, tmp25, tmp26, tmp27;
+    INT32 z1, z2, z3, z4;
+    JCOEFPTR inptr;
+    ISLOW_MULT_TYPE * quantptr;
+    int * wsptr;
+    JSAMPROW outptr;
+    JSAMPLE *range_limit = IDCT_range_limit(cinfo);
+    int ctr;
+    int workspace[8*15];	/* buffers data between passes */
+    SHIFT_TEMPS
+
+    /* Pass 1: process columns from input, store into work array. */
+
+    inptr = coef_block;
+    quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
+    wsptr = workspace;
+    for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++)
+    {
+        /* Even part */
+
+        z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
+        z1 <<= CONST_BITS;
+        /* Add fudge factor here for final descale. */
+        z1 += ONE << (CONST_BITS-PASS1_BITS-1);
+
+        z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
+        z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
+        z4 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
+
+        tmp10 = MULTIPLY(z4, FIX(0.437016024)); /* c12 */
+        tmp11 = MULTIPLY(z4, FIX(1.144122806)); /* c6 */
+
+        tmp12 = z1 - tmp10;
+        tmp13 = z1 + tmp11;
+        z1 -= (tmp11 - tmp10) << 1;             /* c0 = (c6-c12)*2 */
+
+        z4 = z2 - z3;
+        z3 += z2;
+        tmp10 = MULTIPLY(z3, FIX(1.337628990)); /* (c2+c4)/2 */
+        tmp11 = MULTIPLY(z4, FIX(0.045680613)); /* (c2-c4)/2 */
+        z2 = MULTIPLY(z2, FIX(1.439773946));    /* c4+c14 */
+
+        tmp20 = tmp13 + tmp10 + tmp11;
+        tmp23 = tmp12 - tmp10 + tmp11 + z2;
+
+        tmp10 = MULTIPLY(z3, FIX(0.547059574)); /* (c8+c14)/2 */
+        tmp11 = MULTIPLY(z4, FIX(0.399234004)); /* (c8-c14)/2 */
+
+        tmp25 = tmp13 - tmp10 - tmp11;
+        tmp26 = tmp12 + tmp10 - tmp11 - z2;
+
+        tmp10 = MULTIPLY(z3, FIX(0.790569415)); /* (c6+c12)/2 */
+        tmp11 = MULTIPLY(z4, FIX(0.353553391)); /* (c6-c12)/2 */
+
+        tmp21 = tmp12 + tmp10 + tmp11;
+        tmp24 = tmp13 - tmp10 + tmp11;
+        tmp11 += tmp11;
+        tmp22 = z1 + tmp11;                     /* c10 = c6-c12 */
+        tmp27 = z1 - tmp11 - tmp11;             /* c0 = (c6-c12)*2 */
+
+        /* Odd part */
+
+        z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
+        z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
+        z4 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
+        z3 = MULTIPLY(z4, FIX(1.224744871));                    /* c5 */
+        z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
+
+        tmp13 = z2 - z4;
+        tmp15 = MULTIPLY(z1 + tmp13, FIX(0.831253876));         /* c9 */
+        tmp11 = tmp15 + MULTIPLY(z1, FIX(0.513743148));         /* c3-c9 */
+        tmp14 = tmp15 - MULTIPLY(tmp13, FIX(2.176250899));      /* c3+c9 */
+
+        tmp13 = MULTIPLY(z2, - FIX(0.831253876));               /* -c9 */
+        tmp15 = MULTIPLY(z2, - FIX(1.344997024));               /* -c3 */
+        z2 = z1 - z4;
+        tmp12 = z3 + MULTIPLY(z2, FIX(1.406466353));            /* c1 */
+
+        tmp10 = tmp12 + MULTIPLY(z4, FIX(2.457431844)) - tmp15; /* c1+c7 */
+        tmp16 = tmp12 - MULTIPLY(z1, FIX(1.112434820)) + tmp13; /* c1-c13 */
+        tmp12 = MULTIPLY(z2, FIX(1.224744871)) - z3;            /* c5 */
+        z2 = MULTIPLY(z1 + z4, FIX(0.575212477));               /* c11 */
+        tmp13 += z2 + MULTIPLY(z1, FIX(0.475753014)) - z3;      /* c7-c11 */
+        tmp15 += z2 - MULTIPLY(z4, FIX(0.869244010)) + z3;      /* c11+c13 */
+
+        /* Final output stage */
+
+        wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
+        wsptr[8*14] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
+        wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
+        wsptr[8*13] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
+        wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
+        wsptr[8*12] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
+        wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
+        wsptr[8*11] = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
+        wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
+        wsptr[8*10] = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
+        wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
+        wsptr[8*9]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
+        wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp16, CONST_BITS-PASS1_BITS);
+        wsptr[8*8]  = (int) RIGHT_SHIFT(tmp26 - tmp16, CONST_BITS-PASS1_BITS);
+        wsptr[8*7]  = (int) RIGHT_SHIFT(tmp27, CONST_BITS-PASS1_BITS);
+    }
+
+    /* Pass 2: process 15 rows from work array, store into output array. */
+
+    wsptr = workspace;
+    for (ctr = 0; ctr < 15; ctr++)
+    {
+        outptr = output_buf[ctr] + output_col;
+
+        /* Even part */
+
+        /* Add fudge factor here for final descale. */
+        z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
+        z1 <<= CONST_BITS;
+
+        z2 = (INT32) wsptr[2];
+        z3 = (INT32) wsptr[4];
+        z4 = (INT32) wsptr[6];
+
+        tmp10 = MULTIPLY(z4, FIX(0.437016024)); /* c12 */
+        tmp11 = MULTIPLY(z4, FIX(1.144122806)); /* c6 */
+
+        tmp12 = z1 - tmp10;
+        tmp13 = z1 + tmp11;
+        z1 -= (tmp11 - tmp10) << 1;             /* c0 = (c6-c12)*2 */
+
+        z4 = z2 - z3;
+        z3 += z2;
+        tmp10 = MULTIPLY(z3, FIX(1.337628990)); /* (c2+c4)/2 */
+        tmp11 = MULTIPLY(z4, FIX(0.045680613)); /* (c2-c4)/2 */
+        z2 = MULTIPLY(z2, FIX(1.439773946));    /* c4+c14 */
+
+        tmp20 = tmp13 + tmp10 + tmp11;
+        tmp23 = tmp12 - tmp10 + tmp11 + z2;
+
+        tmp10 = MULTIPLY(z3, FIX(0.547059574)); /* (c8+c14)/2 */
+        tmp11 = MULTIPLY(z4, FIX(0.399234004)); /* (c8-c14)/2 */
+
+        tmp25 = tmp13 - tmp10 - tmp11;
+        tmp26 = tmp12 + tmp10 - tmp11 - z2;
+
+        tmp10 = MULTIPLY(z3, FIX(0.790569415)); /* (c6+c12)/2 */
+        tmp11 = MULTIPLY(z4, FIX(0.353553391)); /* (c6-c12)/2 */
+
+        tmp21 = tmp12 + tmp10 + tmp11;
+        tmp24 = tmp13 - tmp10 + tmp11;
+        tmp11 += tmp11;
+        tmp22 = z1 + tmp11;                     /* c10 = c6-c12 */
+        tmp27 = z1 - tmp11 - tmp11;             /* c0 = (c6-c12)*2 */
+
+        /* Odd part */
+
+        z1 = (INT32) wsptr[1];
+        z2 = (INT32) wsptr[3];
+        z4 = (INT32) wsptr[5];
+        z3 = MULTIPLY(z4, FIX(1.224744871));                    /* c5 */
+        z4 = (INT32) wsptr[7];
+
+        tmp13 = z2 - z4;
+        tmp15 = MULTIPLY(z1 + tmp13, FIX(0.831253876));         /* c9 */
+        tmp11 = tmp15 + MULTIPLY(z1, FIX(0.513743148));         /* c3-c9 */
+        tmp14 = tmp15 - MULTIPLY(tmp13, FIX(2.176250899));      /* c3+c9 */
+
+        tmp13 = MULTIPLY(z2, - FIX(0.831253876));               /* -c9 */
+        tmp15 = MULTIPLY(z2, - FIX(1.344997024));               /* -c3 */
+        z2 = z1 - z4;
+        tmp12 = z3 + MULTIPLY(z2, FIX(1.406466353));            /* c1 */
+
+        tmp10 = tmp12 + MULTIPLY(z4, FIX(2.457431844)) - tmp15; /* c1+c7 */
+        tmp16 = tmp12 - MULTIPLY(z1, FIX(1.112434820)) + tmp13; /* c1-c13 */
+        tmp12 = MULTIPLY(z2, FIX(1.224744871)) - z3;            /* c5 */
+        z2 = MULTIPLY(z1 + z4, FIX(0.575212477));               /* c11 */
+        tmp13 += z2 + MULTIPLY(z1, FIX(0.475753014)) - z3;      /* c7-c11 */
+        tmp15 += z2 - MULTIPLY(z4, FIX(0.869244010)) + z3;      /* c11+c13 */
+
+        /* Final output stage */
+
+        outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
+                                 CONST_BITS+PASS1_BITS+3)
+                                 & RANGE_MASK];
+        outptr[14] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
+                                 CONST_BITS+PASS1_BITS+3)
+                                 & RANGE_MASK];
+        outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
+                                 CONST_BITS+PASS1_BITS+3)
+                                 & RANGE_MASK];
+        outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
+                                 CONST_BITS+PASS1_BITS+3)
+                                 & RANGE_MASK];
+        outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
+                                 CONST_BITS+PASS1_BITS+3)
+                                 & RANGE_MASK];
+        outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
+                                 CONST_BITS+PASS1_BITS+3)
+                                 & RANGE_MASK];
+        outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
+                                 CONST_BITS+PASS1_BITS+3)
+                                 & RANGE_MASK];
+        outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
+                                 CONST_BITS+PASS1_BITS+3)
+                                 & RANGE_MASK];
+        outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
+                                 CONST_BITS+PASS1_BITS+3)
+                                 & RANGE_MASK];
+        outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
+                                 CONST_BITS+PASS1_BITS+3)
+                                 & RANGE_MASK];
+        outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
+                                 CONST_BITS+PASS1_BITS+3)
+                                 & RANGE_MASK];
+        outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
+                                 CONST_BITS+PASS1_BITS+3)
+                                 & RANGE_MASK];
+        outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp16,
+                                 CONST_BITS+PASS1_BITS+3)
+                                 & RANGE_MASK];
+        outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp16,
+                                 CONST_BITS+PASS1_BITS+3)
+                                 & RANGE_MASK];
+        outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp27,
+                                 CONST_BITS+PASS1_BITS+3)
+                                 & RANGE_MASK];
+
+        wsptr += 8;		/* advance pointer to next row */
+    }
+}
+
+
+/*
+ * Perform dequantization and inverse DCT on one block of coefficients,
+ * producing a 16x16 output block.
+ *
+ * Optimized algorithm with 28 multiplications in the 1-D kernel.
+ * cK represents sqrt(2) * cos(K*pi/32).
+ */
+
+GLOBAL(void)
+jpeg_idct_16x16 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
+                 JCOEFPTR coef_block,
+                 JSAMPARRAY output_buf, JDIMENSION output_col)
+{
+    INT32 tmp0, tmp1, tmp2, tmp3, tmp10, tmp11, tmp12, tmp13;
+    INT32 tmp20, tmp21, tmp22, tmp23, tmp24, tmp25, tmp26, tmp27;
+    INT32 z1, z2, z3, z4;
+    JCOEFPTR inptr;
+    ISLOW_MULT_TYPE * quantptr;
+    int * wsptr;
+    JSAMPROW outptr;
+    JSAMPLE *range_limit = IDCT_range_limit(cinfo);
+    int ctr;
+    int workspace[8*16];	/* buffers data between passes */
+    SHIFT_TEMPS
+
+    /* Pass 1: process columns from input, store into work array. */
+
+    inptr = coef_block;
+    quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
+    wsptr = workspace;
+    for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++)
+    {
+        /* Even part */
+
+        tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
+        tmp0 <<= CONST_BITS;
+        /* Add fudge factor here for final descale. */
+        tmp0 += 1 << (CONST_BITS-PASS1_BITS-1);
+
+        z1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
+        tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
+        tmp2 = MULTIPLY(z1, FIX_0_541196100);       /* c12[16] = c6[8] */
+
+        tmp10 = tmp0 + tmp1;
+        tmp11 = tmp0 - tmp1;
+        tmp12 = tmp0 + tmp2;
+        tmp13 = tmp0 - tmp2;
+
+        z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
+        z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
+        z3 = z1 - z2;
+        z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
+        z3 = MULTIPLY(z3, FIX(1.387039845));        /* c2[16] = c1[8] */
+
+        tmp0 = z3 + MULTIPLY(z2, FIX_2_562915447);  /* (c6+c2)[16] = (c3+c1)[8] */
+        tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
+        tmp2 = z3 - MULTIPLY(z1, FIX(0.601344887)); /* (c2-c10)[16] = (c1-c5)[8] */
+        tmp3 = z4 - MULTIPLY(z2, FIX(0.509795579)); /* (c10-c14)[16] = (c5-c7)[8] */
+
+        tmp20 = tmp10 + tmp0;
+        tmp27 = tmp10 - tmp0;
+        tmp21 = tmp12 + tmp1;
+        tmp26 = tmp12 - tmp1;
+        tmp22 = tmp13 + tmp2;
+        tmp25 = tmp13 - tmp2;
+        tmp23 = tmp11 + tmp3;
+        tmp24 = tmp11 - tmp3;
+
+        /* Odd part */
+
+        z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
+        z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
+        z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
+        z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
+
+        tmp11 = z1 + z3;
+
+        tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
+        tmp2  = MULTIPLY(tmp11,   FIX(1.247225013));   /* c5 */
+        tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
+        tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
+        tmp11 = MULTIPLY(tmp11,   FIX(0.666655658));   /* c11 */
+        tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
+        tmp0  = tmp1 + tmp2 + tmp3 -
+                MULTIPLY(z1, FIX(2.286341144));        /* c7+c5+c3-c1 */
+        tmp13 = tmp10 + tmp11 + tmp12 -
+                MULTIPLY(z1, FIX(1.835730603));        /* c9+c11+c13-c15 */
+        z1    = MULTIPLY(z2 + z3, FIX(0.138617169));   /* c15 */
+        tmp1  += z1 + MULTIPLY(z2, FIX(0.071888074));  /* c9+c11-c3-c15 */
+        tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
+        z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
+        tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
+        tmp12 += z1 + MULTIPLY(z2, FIX(1.971951411));  /* c1+c5+c13-c7 */
+        z2    += z4;
+        z1    = MULTIPLY(z2, - FIX(0.666655658));      /* -c11 */
+        tmp1  += z1;
+        tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
+        z2    = MULTIPLY(z2, - FIX(1.247225013));      /* -c5 */
+        tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
+        tmp12 += z2;
+        z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
+        tmp2  += z2;
+        tmp3  += z2;
+        z2    = MULTIPLY(z4 - z3, FIX(0.410524528));   /* c13 */
+        tmp10 += z2;
+        tmp11 += z2;
+
+        /* Final output stage */
+
+        wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp0,  CONST_BITS-PASS1_BITS);
+        wsptr[8*15] = (int) RIGHT_SHIFT(tmp20 - tmp0,  CONST_BITS-PASS1_BITS);
+        wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp1,  CONST_BITS-PASS1_BITS);
+        wsptr[8*14] = (int) RIGHT_SHIFT(tmp21 - tmp1,  CONST_BITS-PASS1_BITS);
+        wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp2,  CONST_BITS-PASS1_BITS);
+        wsptr[8*13] = (int) RIGHT_SHIFT(tmp22 - tmp2,  CONST_BITS-PASS1_BITS);
+        wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp3,  CONST_BITS-PASS1_BITS);
+        wsptr[8*12] = (int) RIGHT_SHIFT(tmp23 - tmp3,  CONST_BITS-PASS1_BITS);
+        wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp10, CONST_BITS-PASS1_BITS);
+        wsptr[8*11] = (int) RIGHT_SHIFT(tmp24 - tmp10, CONST_BITS-PASS1_BITS);
+        wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp11, CONST_BITS-PASS1_BITS);
+        wsptr[8*10] = (int) RIGHT_SHIFT(tmp25 - tmp11, CONST_BITS-PASS1_BITS);
+        wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp12, CONST_BITS-PASS1_BITS);
+        wsptr[8*9]  = (int) RIGHT_SHIFT(tmp26 - tmp12, CONST_BITS-PASS1_BITS);
+        wsptr[8*7]  = (int) RIGHT_SHIFT(tmp27 + tmp13, CONST_BITS-PASS1_BITS);
+        wsptr[8*8]  = (int) RIGHT_SHIFT(tmp27 - tmp13, CONST_BITS-PASS1_BITS);
+    }
+
+    /* Pass 2: process 16 rows from work array, store into output array. */
+
+    wsptr = workspace;
+    for (ctr = 0; ctr < 16; ctr++)
+    {
+        outptr = output_buf[ctr] + output_col;
+
+        /* Even part */
+
+        /* Add fudge factor here for final descale. */
+        tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
+        tmp0 <<= CONST_BITS;
+
+        z1 = (INT32) wsptr[4];
+        tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
+        tmp2 = MULTIPLY(z1, FIX_0_541196100);       /* c12[16] = c6[8] */
+
+        tmp10 = tmp0 + tmp1;
+        tmp11 = tmp0 - tmp1;
+        tmp12 = tmp0 + tmp2;
+        tmp13 = tmp0 - tmp2;
+
+        z1 = (INT32) wsptr[2];
+        z2 = (INT32) wsptr[6];
+        z3 = z1 - z2;
+        z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
+        z3 = MULTIPLY(z3, FIX(1.387039845));        /* c2[16] = c1[8] */
+
+        tmp0 = z3 + MULTIPLY(z2, FIX_2_562915447);  /* (c6+c2)[16] = (c3+c1)[8] */
+        tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
+        tmp2 = z3 - MULTIPLY(z1, FIX(0.601344887)); /* (c2-c10)[16] = (c1-c5)[8] */
+        tmp3 = z4 - MULTIPLY(z2, FIX(0.509795579)); /* (c10-c14)[16] = (c5-c7)[8] */
+
+        tmp20 = tmp10 + tmp0;
+        tmp27 = tmp10 - tmp0;
+        tmp21 = tmp12 + tmp1;
+        tmp26 = tmp12 - tmp1;
+        tmp22 = tmp13 + tmp2;
+        tmp25 = tmp13 - tmp2;
+        tmp23 = tmp11 + tmp3;
+        tmp24 = tmp11 - tmp3;
+
+        /* Odd part */
+
+        z1 = (INT32) wsptr[1];
+        z2 = (INT32) wsptr[3];
+        z3 = (INT32) wsptr[5];
+        z4 = (INT32) wsptr[7];
+
+        tmp11 = z1 + z3;
+
+        tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
+        tmp2  = MULTIPLY(tmp11,   FIX(1.247225013));   /* c5 */
+        tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
+        tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
+        tmp11 = MULTIPLY(tmp11,   FIX(0.666655658));   /* c11 */
+        tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
+        tmp0  = tmp1 + tmp2 + tmp3 -
+                MULTIPLY(z1, FIX(2.286341144));        /* c7+c5+c3-c1 */
+        tmp13 = tmp10 + tmp11 + tmp12 -
+                MULTIPLY(z1, FIX(1.835730603));        /* c9+c11+c13-c15 */
+        z1    = MULTIPLY(z2 + z3, FIX(0.138617169));   /* c15 */
+        tmp1  += z1 + MULTIPLY(z2, FIX(0.071888074));  /* c9+c11-c3-c15 */
+        tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
+        z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
+        tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
+        tmp12 += z1 + MULTIPLY(z2, FIX(1.971951411));  /* c1+c5+c13-c7 */
+        z2    += z4;
+        z1    = MULTIPLY(z2, - FIX(0.666655658));      /* -c11 */
+        tmp1  += z1;
+        tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
+        z2    = MULTIPLY(z2, - FIX(1.247225013));      /* -c5 */
+        tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
+        tmp12 += z2;
+        z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
+        tmp2  += z2;
+        tmp3  += z2;
+        z2    = MULTIPLY(z4 - z3, FIX(0.410524528));   /* c13 */
+        tmp10 += z2;
+        tmp11 += z2;
+
+        /* Final output stage */
+
+        outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp0,
+                                 CONST_BITS+PASS1_BITS+3)
+                                 & RANGE_MASK];
+        outptr[15] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp0,
+                                 CONST_BITS+PASS1_BITS+3)
+                                 & RANGE_MASK];
+        outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp1,
+                                 CONST_BITS+PASS1_BITS+3)
+                                 & RANGE_MASK];
+        outptr[14] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp1,
+                                 CONST_BITS+PASS1_BITS+3)
+                                 & RANGE_MASK];
+        outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp2,
+                                 CONST_BITS+PASS1_BITS+3)
+                                 & RANGE_MASK];
+        outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp2,
+                                 CONST_BITS+PASS1_BITS+3)
+                                 & RANGE_MASK];
+        outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp3,
+                                 CONST_BITS+PASS1_BITS+3)
+                                 & RANGE_MASK];
+        outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp3,
+                                 CONST_BITS+PASS1_BITS+3)
+                                 & RANGE_MASK];
+        outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp10,
+                                 CONST_BITS+PASS1_BITS+3)
+                                 & RANGE_MASK];
+        outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp10,
+                                 CONST_BITS+PASS1_BITS+3)
+                                 & RANGE_MASK];
+        outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp11,
+                                 CONST_BITS+PASS1_BITS+3)
+                                 & RANGE_MASK];
+        outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp11,
+                                 CONST_BITS+PASS1_BITS+3)
+                                 & RANGE_MASK];
+        outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp12,
+                                 CONST_BITS+PASS1_BITS+3)
+                                 & RANGE_MASK];
+        outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp12,
+                                 CONST_BITS+PASS1_BITS+3)
+                                 & RANGE_MASK];
+        outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp27 + tmp13,
+                                 CONST_BITS+PASS1_BITS+3)
+                                 & RANGE_MASK];
+        outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp27 - tmp13,
+                                 CONST_BITS+PASS1_BITS+3)
+                                 & RANGE_MASK];
+
+        wsptr += 8;		/* advance pointer to next row */
+    }
+}
+
+
+/*
+ * Perform dequantization and inverse DCT on one block of coefficients,
+ * producing a 16x8 output block.
+ *
+ * 8-point IDCT in pass 1 (columns), 16-point in pass 2 (rows).
+ */
+
+GLOBAL(void)
+jpeg_idct_16x8 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
+                JCOEFPTR coef_block,
+                JSAMPARRAY output_buf, JDIMENSION output_col)
+{
+    INT32 tmp0, tmp1, tmp2, tmp3, tmp10, tmp11, tmp12, tmp13;
+    INT32 tmp20, tmp21, tmp22, tmp23, tmp24, tmp25, tmp26, tmp27;
+    INT32 z1, z2, z3, z4;
+    JCOEFPTR inptr;
+    ISLOW_MULT_TYPE * quantptr;
+    int * wsptr;
+    JSAMPROW outptr;
+    JSAMPLE *range_limit = IDCT_range_limit(cinfo);
+    int ctr;
+    int workspace[8*8];	/* buffers data between passes */
+    SHIFT_TEMPS
+
+    /* Pass 1: process columns from input, store into work array. */
+    /* Note results are scaled up by sqrt(8) compared to a true IDCT; */
+    /* furthermore, we scale the results by 2**PASS1_BITS. */
+
+    inptr = coef_block;
+    quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
+    wsptr = workspace;
+    for (ctr = DCTSIZE; ctr > 0; ctr--)
+    {
+        /* Due to quantization, we will usually find that many of the input
+         * coefficients are zero, especially the AC terms.  We can exploit this
+         * by short-circuiting the IDCT calculation for any column in which all
+         * the AC terms are zero.  In that case each output is equal to the
+         * DC coefficient (with scale factor as needed).
+         * With typical images and quantization tables, half or more of the
+         * column DCT calculations can be simplified this way.
+         */
+
+        if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
+                inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
+                inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
+                inptr[DCTSIZE*7] == 0)
+        {
+            /* AC terms all zero */
+            int dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]) << PASS1_BITS;
+
+            wsptr[DCTSIZE*0] = dcval;
+            wsptr[DCTSIZE*1] = dcval;
+            wsptr[DCTSIZE*2] = dcval;
+            wsptr[DCTSIZE*3] = dcval;
+            wsptr[DCTSIZE*4] = dcval;
+            wsptr[DCTSIZE*5] = dcval;
+            wsptr[DCTSIZE*6] = dcval;
+            wsptr[DCTSIZE*7] = dcval;
+
+            inptr++;			/* advance pointers to next column */
+            quantptr++;
+            wsptr++;
+            continue;
+        }
+
+        /* Even part: reverse the even part of the forward DCT. */
+        /* The rotator is sqrt(2)*c(-6). */
+
+        z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
+        z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
+
+        z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
+        tmp2 = z1 + MULTIPLY(z2, FIX_0_765366865);
+        tmp3 = z1 - MULTIPLY(z3, FIX_1_847759065);
+
+        z2 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
+        z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
+        z2 <<= CONST_BITS;
+        z3 <<= CONST_BITS;
+        /* Add fudge factor here for final descale. */
+        z2 += ONE << (CONST_BITS-PASS1_BITS-1);
+
+        tmp0 = z2 + z3;
+        tmp1 = z2 - z3;
+
+        tmp10 = tmp0 + tmp2;
+        tmp13 = tmp0 - tmp2;
+        tmp11 = tmp1 + tmp3;
+        tmp12 = tmp1 - tmp3;
+
+        /* Odd part per figure 8; the matrix is unitary and hence its
+         * transpose is its inverse.  i0..i3 are y7,y5,y3,y1 respectively.
+         */
+
+        tmp0 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
+        tmp1 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
+        tmp2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
+        tmp3 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
+
+        z2 = tmp0 + tmp2;
+        z3 = tmp1 + tmp3;
+
+        z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
+        z2 = MULTIPLY(z2, - FIX_1_961570560); /* sqrt(2) * (-c3-c5) */
+        z3 = MULTIPLY(z3, - FIX_0_390180644); /* sqrt(2) * (c5-c3) */
+        z2 += z1;
+        z3 += z1;
+
+        z1 = MULTIPLY(tmp0 + tmp3, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
+        tmp0 = MULTIPLY(tmp0, FIX_0_298631336); /* sqrt(2) * (-c1+c3+c5-c7) */
+        tmp3 = MULTIPLY(tmp3, FIX_1_501321110); /* sqrt(2) * ( c1+c3-c5-c7) */
+        tmp0 += z1 + z2;
+        tmp3 += z1 + z3;
+
+        z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
+        tmp1 = MULTIPLY(tmp1, FIX_2_053119869); /* sqrt(2) * ( c1+c3-c5+c7) */
+        tmp2 = MULTIPLY(tmp2, FIX_3_072711026); /* sqrt(2) * ( c1+c3+c5-c7) */
+        tmp1 += z1 + z3;
+        tmp2 += z1 + z2;
+
+        /* Final output stage: inputs are tmp10..tmp13, tmp0..tmp3 */
+
+        wsptr[DCTSIZE*0] = (int) RIGHT_SHIFT(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
+        wsptr[DCTSIZE*7] = (int) RIGHT_SHIFT(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
+        wsptr[DCTSIZE*1] = (int) RIGHT_SHIFT(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
+        wsptr[DCTSIZE*6] = (int) RIGHT_SHIFT(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
+        wsptr[DCTSIZE*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
+        wsptr[DCTSIZE*5] = (int) RIGHT_SHIFT(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
+        wsptr[DCTSIZE*3] = (int) RIGHT_SHIFT(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
+        wsptr[DCTSIZE*4] = (int) RIGHT_SHIFT(tmp13 - tmp0, CONST_BITS-PASS1_BITS);
+
+        inptr++;			/* advance pointers to next column */
+        quantptr++;
+        wsptr++;
+    }
+
+    /* Pass 2: process 8 rows from work array, store into output array.
+     * 16-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/32).
+     */
+    wsptr = workspace;
+    for (ctr = 0; ctr < 8; ctr++)
+    {
+        outptr = output_buf[ctr] + output_col;
+
+        /* Even part */
+
+        /* Add fudge factor here for final descale. */
+        tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
+        tmp0 <<= CONST_BITS;
+
+        z1 = (INT32) wsptr[4];
+        tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
+        tmp2 = MULTIPLY(z1, FIX_0_541196100);       /* c12[16] = c6[8] */
+
+        tmp10 = tmp0 + tmp1;
+        tmp11 = tmp0 - tmp1;
+        tmp12 = tmp0 + tmp2;
+        tmp13 = tmp0 - tmp2;
+
+        z1 = (INT32) wsptr[2];
+        z2 = (INT32) wsptr[6];
+        z3 = z1 - z2;
+        z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
+        z3 = MULTIPLY(z3, FIX(1.387039845));        /* c2[16] = c1[8] */
+
+        tmp0 = z3 + MULTIPLY(z2, FIX_2_562915447);  /* (c6+c2)[16] = (c3+c1)[8] */
+        tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
+        tmp2 = z3 - MULTIPLY(z1, FIX(0.601344887)); /* (c2-c10)[16] = (c1-c5)[8] */
+        tmp3 = z4 - MULTIPLY(z2, FIX(0.509795579)); /* (c10-c14)[16] = (c5-c7)[8] */
+
+        tmp20 = tmp10 + tmp0;
+        tmp27 = tmp10 - tmp0;
+        tmp21 = tmp12 + tmp1;
+        tmp26 = tmp12 - tmp1;
+        tmp22 = tmp13 + tmp2;
+        tmp25 = tmp13 - tmp2;
+        tmp23 = tmp11 + tmp3;
+        tmp24 = tmp11 - tmp3;
+
+        /* Odd part */
+
+        z1 = (INT32) wsptr[1];
+        z2 = (INT32) wsptr[3];
+        z3 = (INT32) wsptr[5];
+        z4 = (INT32) wsptr[7];
+
+        tmp11 = z1 + z3;
+
+        tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
+        tmp2  = MULTIPLY(tmp11,   FIX(1.247225013));   /* c5 */
+        tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
+        tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
+        tmp11 = MULTIPLY(tmp11,   FIX(0.666655658));   /* c11 */
+        tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
+        tmp0  = tmp1 + tmp2 + tmp3 -
+                MULTIPLY(z1, FIX(2.286341144));        /* c7+c5+c3-c1 */
+        tmp13 = tmp10 + tmp11 + tmp12 -
+                MULTIPLY(z1, FIX(1.835730603));        /* c9+c11+c13-c15 */
+        z1    = MULTIPLY(z2 + z3, FIX(0.138617169));   /* c15 */
+        tmp1  += z1 + MULTIPLY(z2, FIX(0.071888074));  /* c9+c11-c3-c15 */
+        tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
+        z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
+        tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
+        tmp12 += z1 + MULTIPLY(z2, FIX(1.971951411));  /* c1+c5+c13-c7 */
+        z2    += z4;
+        z1    = MULTIPLY(z2, - FIX(0.666655658));      /* -c11 */
+        tmp1  += z1;
+        tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
+        z2    = MULTIPLY(z2, - FIX(1.247225013));      /* -c5 */
+        tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
+        tmp12 += z2;
+        z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
+        tmp2  += z2;
+        tmp3  += z2;
+        z2    = MULTIPLY(z4 - z3, FIX(0.410524528));   /* c13 */
+        tmp10 += z2;
+        tmp11 += z2;
+
+        /* Final output stage */
+
+        outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp0,
+                                 CONST_BITS+PASS1_BITS+3)
+                                 & RANGE_MASK];
+        outptr[15] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp0,
+                                 CONST_BITS+PASS1_BITS+3)
+                                 & RANGE_MASK];
+        outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp1,
+                                 CONST_BITS+PASS1_BITS+3)
+                                 & RANGE_MASK];
+        outptr[14] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp1,
+                                 CONST_BITS+PASS1_BITS+3)
+                                 & RANGE_MASK];
+        outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp2,
+                                 CONST_BITS+PASS1_BITS+3)
+                                 & RANGE_MASK];
+        outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp2,
+                                 CONST_BITS+PASS1_BITS+3)
+                                 & RANGE_MASK];
+        outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp3,
+                                 CONST_BITS+PASS1_BITS+3)
+                                 & RANGE_MASK];
+        outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp3,
+                                 CONST_BITS+PASS1_BITS+3)
+                                 & RANGE_MASK];
+        outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp10,
+                                 CONST_BITS+PASS1_BITS+3)
+                                 & RANGE_MASK];
+        outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp10,
+                                 CONST_BITS+PASS1_BITS+3)
+                                 & RANGE_MASK];
+        outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp11,
+                                 CONST_BITS+PASS1_BITS+3)
+                                 & RANGE_MASK];
+        outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp11,
+                                 CONST_BITS+PASS1_BITS+3)
+                                 & RANGE_MASK];
+        outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp12,
+                                 CONST_BITS+PASS1_BITS+3)
+                                 & RANGE_MASK];
+        outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp12,
+                                 CONST_BITS+PASS1_BITS+3)
+                                 & RANGE_MASK];
+        outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp27 + tmp13,
+                                 CONST_BITS+PASS1_BITS+3)
+                                 & RANGE_MASK];
+        outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp27 - tmp13,
+                                 CONST_BITS+PASS1_BITS+3)
+                                 & RANGE_MASK];
+
+        wsptr += 8;		/* advance pointer to next row */
+    }
+}
+
+
+/*
+ * Perform dequantization and inverse DCT on one block of coefficients,
+ * producing a 14x7 output block.
+ *
+ * 7-point IDCT in pass 1 (columns), 14-point in pass 2 (rows).
+ */
+
+GLOBAL(void)
+jpeg_idct_14x7 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
+                JCOEFPTR coef_block,
+                JSAMPARRAY output_buf, JDIMENSION output_col)
+{
+    INT32 tmp10, tmp11, tmp12, tmp13, tmp14, tmp15, tmp16;
+    INT32 tmp20, tmp21, tmp22, tmp23, tmp24, tmp25, tmp26;
+    INT32 z1, z2, z3, z4;
+    JCOEFPTR inptr;
+    ISLOW_MULT_TYPE * quantptr;
+    int * wsptr;
+    JSAMPROW outptr;
+    JSAMPLE *range_limit = IDCT_range_limit(cinfo);
+    int ctr;
+    int workspace[8*7];	/* buffers data between passes */
+    SHIFT_TEMPS
+
+    /* Pass 1: process columns from input, store into work array.
+     * 7-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/14).
+     */
+    inptr = coef_block;
+    quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
+    wsptr = workspace;
+    for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++)
+    {
+        /* Even part */
+
+        tmp23 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
+        tmp23 <<= CONST_BITS;
+        /* Add fudge factor here for final descale. */
+        tmp23 += ONE << (CONST_BITS-PASS1_BITS-1);
+
+        z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
+        z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
+        z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
+
+        tmp20 = MULTIPLY(z2 - z3, FIX(0.881747734));       /* c4 */
+        tmp22 = MULTIPLY(z1 - z2, FIX(0.314692123));       /* c6 */
+        tmp21 = tmp20 + tmp22 + tmp23 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
+        tmp10 = z1 + z3;
+        z2 -= tmp10;
+        tmp10 = MULTIPLY(tmp10, FIX(1.274162392)) + tmp23; /* c2 */
+        tmp20 += tmp10 - MULTIPLY(z3, FIX(0.077722536));   /* c2-c4-c6 */
+        tmp22 += tmp10 - MULTIPLY(z1, FIX(2.470602249));   /* c2+c4+c6 */
+        tmp23 += MULTIPLY(z2, FIX(1.414213562));           /* c0 */
+
+        /* Odd part */
+
+        z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
+        z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
+        z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
+
+        tmp11 = MULTIPLY(z1 + z2, FIX(0.935414347));       /* (c3+c1-c5)/2 */
+        tmp12 = MULTIPLY(z1 - z2, FIX(0.170262339));       /* (c3+c5-c1)/2 */
+        tmp10 = tmp11 - tmp12;
+        tmp11 += tmp12;
+        tmp12 = MULTIPLY(z2 + z3, - FIX(1.378756276));     /* -c1 */
+        tmp11 += tmp12;
+        z2 = MULTIPLY(z1 + z3, FIX(0.613604268));          /* c5 */
+        tmp10 += z2;
+        tmp12 += z2 + MULTIPLY(z3, FIX(1.870828693));      /* c3+c1-c5 */
+
+        /* Final output stage */
+
+        wsptr[8*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
+        wsptr[8*6] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
+        wsptr[8*1] = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
+        wsptr[8*5] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
+        wsptr[8*2] = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
+        wsptr[8*4] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
+        wsptr[8*3] = (int) RIGHT_SHIFT(tmp23, CONST_BITS-PASS1_BITS);
+    }
+
+    /* Pass 2: process 7 rows from work array, store into output array.
+     * 14-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/28).
+     */
+    wsptr = workspace;
+    for (ctr = 0; ctr < 7; ctr++)
+    {
+        outptr = output_buf[ctr] + output_col;
+
+        /* Even part */
+
+        /* Add fudge factor here for final descale. */
+        z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
+        z1 <<= CONST_BITS;
+        z4 = (INT32) wsptr[4];
+        z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
+        z3 = MULTIPLY(z4, FIX(0.314692123));         /* c12 */
+        z4 = MULTIPLY(z4, FIX(0.881747734));         /* c8 */
+
+        tmp10 = z1 + z2;
+        tmp11 = z1 + z3;
+        tmp12 = z1 - z4;
+
+        tmp23 = z1 - ((z2 + z3 - z4) << 1);          /* c0 = (c4+c12-c8)*2 */
+
+        z1 = (INT32) wsptr[2];
+        z2 = (INT32) wsptr[6];
+
+        z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */
+
+        tmp13 = z3 + MULTIPLY(z1, FIX(0.273079590)); /* c2-c6 */
+        tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
+        tmp15 = MULTIPLY(z1, FIX(0.613604268)) -     /* c10 */
+                MULTIPLY(z2, FIX(1.378756276));      /* c2 */
+
+        tmp20 = tmp10 + tmp13;
+        tmp26 = tmp10 - tmp13;
+        tmp21 = tmp11 + tmp14;
+        tmp25 = tmp11 - tmp14;
+        tmp22 = tmp12 + tmp15;
+        tmp24 = tmp12 - tmp15;
+
+        /* Odd part */
+
+        z1 = (INT32) wsptr[1];
+        z2 = (INT32) wsptr[3];
+        z3 = (INT32) wsptr[5];
+        z4 = (INT32) wsptr[7];
+        z4 <<= CONST_BITS;
+
+        tmp14 = z1 + z3;
+        tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
+        tmp12 = MULTIPLY(tmp14, FIX(1.197448846));             /* c5 */
+        tmp10 = tmp11 + tmp12 + z4 - MULTIPLY(z1, FIX(1.126980169)); /* c3+c5-c1 */
+        tmp14 = MULTIPLY(tmp14, FIX(0.752406978));             /* c9 */
+        tmp16 = tmp14 - MULTIPLY(z1, FIX(1.061150426));        /* c9+c11-c13 */
+        z1    -= z2;
+        tmp15 = MULTIPLY(z1, FIX(0.467085129)) - z4;           /* c11 */
+        tmp16 += tmp15;
+        tmp13 = MULTIPLY(z2 + z3, - FIX(0.158341681)) - z4;    /* -c13 */
+        tmp11 += tmp13 - MULTIPLY(z2, FIX(0.424103948));       /* c3-c9-c13 */
+        tmp12 += tmp13 - MULTIPLY(z3, FIX(2.373959773));       /* c3+c5-c13 */
+        tmp13 = MULTIPLY(z3 - z2, FIX(1.405321284));           /* c1 */
+        tmp14 += tmp13 + z4 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
+        tmp15 += tmp13 + MULTIPLY(z2, FIX(0.674957567));       /* c1+c11-c5 */
+
+        tmp13 = ((z1 - z3) << CONST_BITS) + z4;
+
+        /* Final output stage */
+
+        outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
+                                 CONST_BITS+PASS1_BITS+3)
+                                 & RANGE_MASK];
+        outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
+                                 CONST_BITS+PASS1_BITS+3)
+                                 & RANGE_MASK];
+        outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
+                                 CONST_BITS+PASS1_BITS+3)
+                                 & RANGE_MASK];
+        outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
+                                 CONST_BITS+PASS1_BITS+3)
+                                 & RANGE_MASK];
+        outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
+                                 CONST_BITS+PASS1_BITS+3)
+                                 & RANGE_MASK];
+        outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
+                                 CONST_BITS+PASS1_BITS+3)
+                                 & RANGE_MASK];
+        outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
+                                 CONST_BITS+PASS1_BITS+3)
+                                 & RANGE_MASK];
+        outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
+                                 CONST_BITS+PASS1_BITS+3)
+                                 & RANGE_MASK];
+        outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
+                                 CONST_BITS+PASS1_BITS+3)
+                                 & RANGE_MASK];
+        outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
+                                 CONST_BITS+PASS1_BITS+3)
+                                 & RANGE_MASK];
+        outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
+                                 CONST_BITS+PASS1_BITS+3)
+                                 & RANGE_MASK];
+        outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
+                                 CONST_BITS+PASS1_BITS+3)
+                                 & RANGE_MASK];
+        outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp16,
+                                 CONST_BITS+PASS1_BITS+3)
+                                 & RANGE_MASK];
+        outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp16,
+                                 CONST_BITS+PASS1_BITS+3)
+                                 & RANGE_MASK];
+
+        wsptr += 8;		/* advance pointer to next row */
+    }
+}
+
+
+/*
+ * Perform dequantization and inverse DCT on one block of coefficients,
+ * producing a 12x6 output block.
+ *
+ * 6-point IDCT in pass 1 (columns), 12-point in pass 2 (rows).
+ */
+
+GLOBAL(void)
+jpeg_idct_12x6 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
+                JCOEFPTR coef_block,
+                JSAMPARRAY output_buf, JDIMENSION output_col)
+{
+    INT32 tmp10, tmp11, tmp12, tmp13, tmp14, tmp15;
+    INT32 tmp20, tmp21, tmp22, tmp23, tmp24, tmp25;
+    INT32 z1, z2, z3, z4;
+    JCOEFPTR inptr;
+    ISLOW_MULT_TYPE * quantptr;
+    int * wsptr;
+    JSAMPROW outptr;
+    JSAMPLE *range_limit = IDCT_range_limit(cinfo);
+    int ctr;
+    int workspace[8*6];	/* buffers data between passes */
+    SHIFT_TEMPS
+
+    /* Pass 1: process columns from input, store into work array.
+     * 6-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/12).
+     */
+    inptr = coef_block;
+    quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
+    wsptr = workspace;
+    for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++)
+    {
+        /* Even part */
+
+        tmp10 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
+        tmp10 <<= CONST_BITS;
+        /* Add fudge factor here for final descale. */
+        tmp10 += ONE << (CONST_BITS-PASS1_BITS-1);
+        tmp12 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
+        tmp20 = MULTIPLY(tmp12, FIX(0.707106781));   /* c4 */
+        tmp11 = tmp10 + tmp20;
+        tmp21 = RIGHT_SHIFT(tmp10 - tmp20 - tmp20, CONST_BITS-PASS1_BITS);
+        tmp20 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
+        tmp10 = MULTIPLY(tmp20, FIX(1.224744871));   /* c2 */
+        tmp20 = tmp11 + tmp10;
+        tmp22 = tmp11 - tmp10;
+
+        /* Odd part */
+
+        z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
+        z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
+        z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
+        tmp11 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
+        tmp10 = tmp11 + ((z1 + z2) << CONST_BITS);
+        tmp12 = tmp11 + ((z3 - z2) << CONST_BITS);
+        tmp11 = (z1 - z2 - z3) << PASS1_BITS;
+
+        /* Final output stage */
+
+        wsptr[8*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
+        wsptr[8*5] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
+        wsptr[8*1] = (int) (tmp21 + tmp11);
+        wsptr[8*4] = (int) (tmp21 - tmp11);
+        wsptr[8*2] = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
+        wsptr[8*3] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
+    }
+
+    /* Pass 2: process 6 rows from work array, store into output array.
+     * 12-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/24).
+     */
+    wsptr = workspace;
+    for (ctr = 0; ctr < 6; ctr++)
+    {
+        outptr = output_buf[ctr] + output_col;
+
+        /* Even part */
+
+        /* Add fudge factor here for final descale. */
+        z3 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
+        z3 <<= CONST_BITS;
+
+        z4 = (INT32) wsptr[4];
+        z4 = MULTIPLY(z4, FIX(1.224744871)); /* c4 */
+
+        tmp10 = z3 + z4;
+        tmp11 = z3 - z4;
+
+        z1 = (INT32) wsptr[2];
+        z4 = MULTIPLY(z1, FIX(1.366025404)); /* c2 */
+        z1 <<= CONST_BITS;
+        z2 = (INT32) wsptr[6];
+        z2 <<= CONST_BITS;
+
+        tmp12 = z1 - z2;
+
+        tmp21 = z3 + tmp12;
+        tmp24 = z3 - tmp12;
+
+        tmp12 = z4 + z2;
+
+        tmp20 = tmp10 + tmp12;
+        tmp25 = tmp10 - tmp12;
+
+        tmp12 = z4 - z1 - z2;
+
+        tmp22 = tmp11 + tmp12;
+        tmp23 = tmp11 - tmp12;
+
+        /* Odd part */
+
+        z1 = (INT32) wsptr[1];
+        z2 = (INT32) wsptr[3];
+        z3 = (INT32) wsptr[5];
+        z4 = (INT32) wsptr[7];
+
+        tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
+        tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */
+
+        tmp10 = z1 + z3;
+        tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
+        tmp12 = tmp15 + MULTIPLY(tmp10, FIX(0.261052384));       /* c5-c7 */
+        tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
+        tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
+        tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
+        tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
+        tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
+                 MULTIPLY(z4, FIX(1.982889723));                 /* c5+c7 */
+
+        z1 -= z4;
+        z2 -= z3;
+        z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
+        tmp11 = z3 + MULTIPLY(z1, FIX_0_765366865);              /* c3-c9 */
+        tmp14 = z3 - MULTIPLY(z2, FIX_1_847759065);              /* c3+c9 */
+
+        /* Final output stage */
+
+        outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
+                                 CONST_BITS+PASS1_BITS+3)
+                                 & RANGE_MASK];
+        outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
+                                 CONST_BITS+PASS1_BITS+3)
+                                 & RANGE_MASK];
+        outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
+                                 CONST_BITS+PASS1_BITS+3)
+                                 & RANGE_MASK];
+        outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
+                                 CONST_BITS+PASS1_BITS+3)
+                                 & RANGE_MASK];
+        outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
+                                 CONST_BITS+PASS1_BITS+3)
+                                 & RANGE_MASK];
+        outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
+                                 CONST_BITS+PASS1_BITS+3)
+                                 & RANGE_MASK];
+        outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
+                                 CONST_BITS+PASS1_BITS+3)
+                                 & RANGE_MASK];
+        outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
+                                 CONST_BITS+PASS1_BITS+3)
+                                 & RANGE_MASK];
+        outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
+                                 CONST_BITS+PASS1_BITS+3)
+                                 & RANGE_MASK];
+        outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
+                                 CONST_BITS+PASS1_BITS+3)
+                                 & RANGE_MASK];
+        outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
+                                 CONST_BITS+PASS1_BITS+3)
+                                 & RANGE_MASK];
+        outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
+                                 CONST_BITS+PASS1_BITS+3)
+                                 & RANGE_MASK];
+
+        wsptr += 8;		/* advance pointer to next row */
+    }
+}
+
+
+/*
+ * Perform dequantization and inverse DCT on one block of coefficients,
+ * producing a 10x5 output block.
+ *
+ * 5-point IDCT in pass 1 (columns), 10-point in pass 2 (rows).
+ */
+
+GLOBAL(void)
+jpeg_idct_10x5 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
+                JCOEFPTR coef_block,
+                JSAMPARRAY output_buf, JDIMENSION output_col)
+{
+    INT32 tmp10, tmp11, tmp12, tmp13, tmp14;
+    INT32 tmp20, tmp21, tmp22, tmp23, tmp24;
+    INT32 z1, z2, z3, z4;
+    JCOEFPTR inptr;
+    ISLOW_MULT_TYPE * quantptr;
+    int * wsptr;
+    JSAMPROW outptr;
+    JSAMPLE *range_limit = IDCT_range_limit(cinfo);
+    int ctr;
+    int workspace[8*5];	/* buffers data between passes */
+    SHIFT_TEMPS
+
+    /* Pass 1: process columns from input, store into work array.
+     * 5-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/10).
+     */
+    inptr = coef_block;
+    quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
+    wsptr = workspace;
+    for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++)
+    {
+        /* Even part */
+
+        tmp12 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
+        tmp12 <<= CONST_BITS;
+        /* Add fudge factor here for final descale. */
+        tmp12 += ONE << (CONST_BITS-PASS1_BITS-1);
+        tmp13 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
+        tmp14 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
+        z1 = MULTIPLY(tmp13 + tmp14, FIX(0.790569415)); /* (c2+c4)/2 */
+        z2 = MULTIPLY(tmp13 - tmp14, FIX(0.353553391)); /* (c2-c4)/2 */
+        z3 = tmp12 + z2;
+        tmp10 = z3 + z1;
+        tmp11 = z3 - z1;
+        tmp12 -= z2 << 2;
+
+        /* Odd part */
+
+        z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
+        z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
+
+        z1 = MULTIPLY(z2 + z3, FIX(0.831253876));       /* c3 */
+        tmp13 = z1 + MULTIPLY(z2, FIX(0.513743148));    /* c1-c3 */
+        tmp14 = z1 - MULTIPLY(z3, FIX(2.176250899));    /* c1+c3 */
+
+        /* Final output stage */
+
+        wsptr[8*0] = (int) RIGHT_SHIFT(tmp10 + tmp13, CONST_BITS-PASS1_BITS);
+        wsptr[8*4] = (int) RIGHT_SHIFT(tmp10 - tmp13, CONST_BITS-PASS1_BITS);
+        wsptr[8*1] = (int) RIGHT_SHIFT(tmp11 + tmp14, CONST_BITS-PASS1_BITS);
+        wsptr[8*3] = (int) RIGHT_SHIFT(tmp11 - tmp14, CONST_BITS-PASS1_BITS);
+        wsptr[8*2] = (int) RIGHT_SHIFT(tmp12, CONST_BITS-PASS1_BITS);
+    }
+
+    /* Pass 2: process 5 rows from work array, store into output array.
+     * 10-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/20).
+     */
+    wsptr = workspace;
+    for (ctr = 0; ctr < 5; ctr++)
+    {
+        outptr = output_buf[ctr] + output_col;
+
+        /* Even part */
+
+        /* Add fudge factor here for final descale. */
+        z3 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
+        z3 <<= CONST_BITS;
+        z4 = (INT32) wsptr[4];
+        z1 = MULTIPLY(z4, FIX(1.144122806));         /* c4 */
+        z2 = MULTIPLY(z4, FIX(0.437016024));         /* c8 */
+        tmp10 = z3 + z1;
+        tmp11 = z3 - z2;
+
+        tmp22 = z3 - ((z1 - z2) << 1);               /* c0 = (c4-c8)*2 */
+
+        z2 = (INT32) wsptr[2];
+        z3 = (INT32) wsptr[6];
+
+        z1 = MULTIPLY(z2 + z3, FIX(0.831253876));    /* c6 */
+        tmp12 = z1 + MULTIPLY(z2, FIX(0.513743148)); /* c2-c6 */
+        tmp13 = z1 - MULTIPLY(z3, FIX(2.176250899)); /* c2+c6 */
+
+        tmp20 = tmp10 + tmp12;
+        tmp24 = tmp10 - tmp12;
+        tmp21 = tmp11 + tmp13;
+        tmp23 = tmp11 - tmp13;
+
+        /* Odd part */
+
+        z1 = (INT32) wsptr[1];
+        z2 = (INT32) wsptr[3];
+        z3 = (INT32) wsptr[5];
+        z3 <<= CONST_BITS;
+        z4 = (INT32) wsptr[7];
+
+        tmp11 = z2 + z4;
+        tmp13 = z2 - z4;
+
+        tmp12 = MULTIPLY(tmp13, FIX(0.309016994));        /* (c3-c7)/2 */
+
+        z2 = MULTIPLY(tmp11, FIX(0.951056516));           /* (c3+c7)/2 */
+        z4 = z3 + tmp12;
+
+        tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
+        tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
+
+        z2 = MULTIPLY(tmp11, FIX(0.587785252));           /* (c1-c9)/2 */
+        z4 = z3 - tmp12 - (tmp13 << (CONST_BITS - 1));
+
+        tmp12 = ((z1 - tmp13) << CONST_BITS) - z3;
+
+        tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
+        tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
+
+        /* Final output stage */
+
+        outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
+                                CONST_BITS+PASS1_BITS+3)
+                                & RANGE_MASK];
+        outptr[9] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
+                                CONST_BITS+PASS1_BITS+3)
+                                & RANGE_MASK];
+        outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
+                                CONST_BITS+PASS1_BITS+3)
+                                & RANGE_MASK];
+        outptr[8] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
+                                CONST_BITS+PASS1_BITS+3)
+                                & RANGE_MASK];
+        outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
+                                CONST_BITS+PASS1_BITS+3)
+                                & RANGE_MASK];
+        outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
+                                CONST_BITS+PASS1_BITS+3)
+                                & RANGE_MASK];
+        outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
+                                CONST_BITS+PASS1_BITS+3)
+                                & RANGE_MASK];
+        outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
+                                CONST_BITS+PASS1_BITS+3)
+                                & RANGE_MASK];
+        outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
+                                CONST_BITS+PASS1_BITS+3)
+                                & RANGE_MASK];
+        outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
+                                CONST_BITS+PASS1_BITS+3)
+                                & RANGE_MASK];
+
+        wsptr += 8;		/* advance pointer to next row */
+    }
+}
+
+
+/*
+ * Perform dequantization and inverse DCT on one block of coefficients,
+ * producing a 8x4 output block.
+ *
+ * 4-point IDCT in pass 1 (columns), 8-point in pass 2 (rows).
+ */
+
+GLOBAL(void)
+jpeg_idct_8x4 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
+               JCOEFPTR coef_block,
+               JSAMPARRAY output_buf, JDIMENSION output_col)
+{
+    INT32 tmp0, tmp1, tmp2, tmp3;
+    INT32 tmp10, tmp11, tmp12, tmp13;
+    INT32 z1, z2, z3;
+    JCOEFPTR inptr;
+    ISLOW_MULT_TYPE * quantptr;
+    int * wsptr;
+    JSAMPROW outptr;
+    JSAMPLE *range_limit = IDCT_range_limit(cinfo);
+    int ctr;
+    int workspace[8*4];	/* buffers data between passes */
+    SHIFT_TEMPS
+
+    /* Pass 1: process columns from input, store into work array.
+     * 4-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/16).
+     */
+    inptr = coef_block;
+    quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
+    wsptr = workspace;
+    for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++)
+    {
+        /* Even part */
+
+        tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
+        tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
+
+        tmp10 = (tmp0 + tmp2) << PASS1_BITS;
+        tmp12 = (tmp0 - tmp2) << PASS1_BITS;
+
+        /* Odd part */
+        /* Same rotation as in the even part of the 8x8 LL&M IDCT */
+
+        z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
+        z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
+
+        z1 = MULTIPLY(z2 + z3, FIX_0_541196100);               /* c6 */
+        /* Add fudge factor here for final descale. */
+        z1 += ONE << (CONST_BITS-PASS1_BITS-1);
+        tmp0 = RIGHT_SHIFT(z1 + MULTIPLY(z2, FIX_0_765366865), /* c2-c6 */
+                           CONST_BITS-PASS1_BITS);
+        tmp2 = RIGHT_SHIFT(z1 - MULTIPLY(z3, FIX_1_847759065), /* c2+c6 */
+                           CONST_BITS-PASS1_BITS);
+
+        /* Final output stage */
+
+        wsptr[8*0] = (int) (tmp10 + tmp0);
+        wsptr[8*3] = (int) (tmp10 - tmp0);
+        wsptr[8*1] = (int) (tmp12 + tmp2);
+        wsptr[8*2] = (int) (tmp12 - tmp2);
+    }
+
+    /* Pass 2: process rows from work array, store into output array. */
+    /* Note that we must descale the results by a factor of 8 == 2**3, */
+    /* and also undo the PASS1_BITS scaling. */
+
+    wsptr = workspace;
+    for (ctr = 0; ctr < 4; ctr++)
+    {
+        outptr = output_buf[ctr] + output_col;
+
+        /* Even part: reverse the even part of the forward DCT. */
+        /* The rotator is sqrt(2)*c(-6). */
+
+        z2 = (INT32) wsptr[2];
+        z3 = (INT32) wsptr[6];
+
+        z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
+        tmp2 = z1 + MULTIPLY(z2, FIX_0_765366865);
+        tmp3 = z1 - MULTIPLY(z3, FIX_1_847759065);
+
+        /* Add fudge factor here for final descale. */
+        z2 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
+        z3 = (INT32) wsptr[4];
+
+        tmp0 = (z2 + z3) << CONST_BITS;
+        tmp1 = (z2 - z3) << CONST_BITS;
+
+        tmp10 = tmp0 + tmp2;
+        tmp13 = tmp0 - tmp2;
+        tmp11 = tmp1 + tmp3;
+        tmp12 = tmp1 - tmp3;
+
+        /* Odd part per figure 8; the matrix is unitary and hence its
+         * transpose is its inverse.  i0..i3 are y7,y5,y3,y1 respectively.
+         */
+
+        tmp0 = (INT32) wsptr[7];
+        tmp1 = (INT32) wsptr[5];
+        tmp2 = (INT32) wsptr[3];
+        tmp3 = (INT32) wsptr[1];
+
+        z2 = tmp0 + tmp2;
+        z3 = tmp1 + tmp3;
+
+        z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
+        z2 = MULTIPLY(z2, - FIX_1_961570560); /* sqrt(2) * (-c3-c5) */
+        z3 = MULTIPLY(z3, - FIX_0_390180644); /* sqrt(2) * (c5-c3) */
+        z2 += z1;
+        z3 += z1;
+
+        z1 = MULTIPLY(tmp0 + tmp3, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
+        tmp0 = MULTIPLY(tmp0, FIX_0_298631336); /* sqrt(2) * (-c1+c3+c5-c7) */
+        tmp3 = MULTIPLY(tmp3, FIX_1_501321110); /* sqrt(2) * ( c1+c3-c5-c7) */
+        tmp0 += z1 + z2;
+        tmp3 += z1 + z3;
+
+        z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
+        tmp1 = MULTIPLY(tmp1, FIX_2_053119869); /* sqrt(2) * ( c1+c3-c5+c7) */
+        tmp2 = MULTIPLY(tmp2, FIX_3_072711026); /* sqrt(2) * ( c1+c3+c5-c7) */
+        tmp1 += z1 + z3;
+        tmp2 += z1 + z2;
+
+        /* Final output stage: inputs are tmp10..tmp13, tmp0..tmp3 */
+
+        outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
+                                CONST_BITS+PASS1_BITS+3)
+                                & RANGE_MASK];
+        outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp3,
+                                CONST_BITS+PASS1_BITS+3)
+                                & RANGE_MASK];
+        outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp2,
+                                CONST_BITS+PASS1_BITS+3)
+                                & RANGE_MASK];
+        outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp2,
+                                CONST_BITS+PASS1_BITS+3)
+                                & RANGE_MASK];
+        outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
+                                CONST_BITS+PASS1_BITS+3)
+                                & RANGE_MASK];
+        outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp1,
+                                CONST_BITS+PASS1_BITS+3)
+                                & RANGE_MASK];
+        outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp0,
+                                CONST_BITS+PASS1_BITS+3)
+                                & RANGE_MASK];
+        outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp0,
+                                CONST_BITS+PASS1_BITS+3)
+                                & RANGE_MASK];
+
+        wsptr += DCTSIZE;		/* advance pointer to next row */
+    }
+}
+
+
+/*
+ * Perform dequantization and inverse DCT on one block of coefficients,
+ * producing a reduced-size 6x3 output block.
+ *
+ * 3-point IDCT in pass 1 (columns), 6-point in pass 2 (rows).
+ */
+
+GLOBAL(void)
+jpeg_idct_6x3 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
+               JCOEFPTR coef_block,
+               JSAMPARRAY output_buf, JDIMENSION output_col)
+{
+    INT32 tmp0, tmp1, tmp2, tmp10, tmp11, tmp12;
+    INT32 z1, z2, z3;
+    JCOEFPTR inptr;
+    ISLOW_MULT_TYPE * quantptr;
+    int * wsptr;
+    JSAMPROW outptr;
+    JSAMPLE *range_limit = IDCT_range_limit(cinfo);
+    int ctr;
+    int workspace[6*3];	/* buffers data between passes */
+    SHIFT_TEMPS
+
+    /* Pass 1: process columns from input, store into work array.
+     * 3-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/6).
+     */
+    inptr = coef_block;
+    quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
+    wsptr = workspace;
+    for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++)
+    {
+        /* Even part */
+
+        tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
+        tmp0 <<= CONST_BITS;
+        /* Add fudge factor here for final descale. */
+        tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);
+        tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
+        tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
+        tmp10 = tmp0 + tmp12;
+        tmp2 = tmp0 - tmp12 - tmp12;
+
+        /* Odd part */
+
+        tmp12 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
+        tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
+
+        /* Final output stage */
+
+        wsptr[6*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
+        wsptr[6*2] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
+        wsptr[6*1] = (int) RIGHT_SHIFT(tmp2, CONST_BITS-PASS1_BITS);
+    }
+
+    /* Pass 2: process 3 rows from work array, store into output array.
+     * 6-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/12).
+     */
+    wsptr = workspace;
+    for (ctr = 0; ctr < 3; ctr++)
+    {
+        outptr = output_buf[ctr] + output_col;
+
+        /* Even part */
+
+        /* Add fudge factor here for final descale. */
+        tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
+        tmp0 <<= CONST_BITS;
+        tmp2 = (INT32) wsptr[4];
+        tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
+        tmp1 = tmp0 + tmp10;
+        tmp11 = tmp0 - tmp10 - tmp10;
+        tmp10 = (INT32) wsptr[2];
+        tmp0 = MULTIPLY(tmp10, FIX(1.224744871));   /* c2 */
+        tmp10 = tmp1 + tmp0;
+        tmp12 = tmp1 - tmp0;
+
+        /* Odd part */
+
+        z1 = (INT32) wsptr[1];
+        z2 = (INT32) wsptr[3];
+        z3 = (INT32) wsptr[5];
+        tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
+        tmp0 = tmp1 + ((z1 + z2) << CONST_BITS);
+        tmp2 = tmp1 + ((z3 - z2) << CONST_BITS);
+        tmp1 = (z1 - z2 - z3) << CONST_BITS;
+
+        /* Final output stage */
+
+        outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
+                                CONST_BITS+PASS1_BITS+3)
+                                & RANGE_MASK];
+        outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
+                                CONST_BITS+PASS1_BITS+3)
+                                & RANGE_MASK];
+        outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
+                                CONST_BITS+PASS1_BITS+3)
+                                & RANGE_MASK];
+        outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
+                                CONST_BITS+PASS1_BITS+3)
+                                & RANGE_MASK];
+        outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
+                                CONST_BITS+PASS1_BITS+3)
+                                & RANGE_MASK];
+        outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
+                                CONST_BITS+PASS1_BITS+3)
+                                & RANGE_MASK];
+
+        wsptr += 6;		/* advance pointer to next row */
+    }
+}
+
+
+/*
+ * Perform dequantization and inverse DCT on one block of coefficients,
+ * producing a 4x2 output block.
+ *
+ * 2-point IDCT in pass 1 (columns), 4-point in pass 2 (rows).
+ */
+
+GLOBAL(void)
+jpeg_idct_4x2 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
+               JCOEFPTR coef_block,
+               JSAMPARRAY output_buf, JDIMENSION output_col)
+{
+    INT32 tmp0, tmp2, tmp10, tmp12;
+    INT32 z1, z2, z3;
+    JCOEFPTR inptr;
+    ISLOW_MULT_TYPE * quantptr;
+    INT32 * wsptr;
+    JSAMPROW outptr;
+    JSAMPLE *range_limit = IDCT_range_limit(cinfo);
+    int ctr;
+    INT32 workspace[4*2];	/* buffers data between passes */
+    SHIFT_TEMPS
+
+    /* Pass 1: process columns from input, store into work array. */
+
+    inptr = coef_block;
+    quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
+    wsptr = workspace;
+    for (ctr = 0; ctr < 4; ctr++, inptr++, quantptr++, wsptr++)
+    {
+        /* Even part */
+
+        tmp10 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
+
+        /* Odd part */
+
+        tmp0 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
+
+        /* Final output stage */
+
+        wsptr[4*0] = tmp10 + tmp0;
+        wsptr[4*1] = tmp10 - tmp0;
+    }
+
+    /* Pass 2: process 2 rows from work array, store into output array.
+     * 4-point IDCT kernel,
+     * cK represents sqrt(2) * cos(K*pi/16) [refers to 8-point IDCT].
+     */
+    wsptr = workspace;
+    for (ctr = 0; ctr < 2; ctr++)
+    {
+        outptr = output_buf[ctr] + output_col;
+
+        /* Even part */
+
+        /* Add fudge factor here for final descale. */
+        tmp0 = wsptr[0] + (ONE << 2);
+        tmp2 = wsptr[2];
+
+        tmp10 = (tmp0 + tmp2) << CONST_BITS;
+        tmp12 = (tmp0 - tmp2) << CONST_BITS;
+
+        /* Odd part */
+        /* Same rotation as in the even part of the 8x8 LL&M IDCT */
+
+        z2 = wsptr[1];
+        z3 = wsptr[3];
+
+        z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
+        tmp0 = z1 + MULTIPLY(z2, FIX_0_765366865); /* c2-c6 */
+        tmp2 = z1 - MULTIPLY(z3, FIX_1_847759065); /* c2+c6 */
+
+        /* Final output stage */
+
+        outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
+                                CONST_BITS+3)
+                                & RANGE_MASK];
+        outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
+                                CONST_BITS+3)
+                                & RANGE_MASK];
+        outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
+                                CONST_BITS+3)
+                                & RANGE_MASK];
+        outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
+                                CONST_BITS+3)
+                                & RANGE_MASK];
+
+        wsptr += 4;		/* advance pointer to next row */
+    }
+}
+
+
+/*
+ * Perform dequantization and inverse DCT on one block of coefficients,
+ * producing a 2x1 output block.
+ *
+ * 1-point IDCT in pass 1 (columns), 2-point in pass 2 (rows).
+ */
+
+GLOBAL(void)
+jpeg_idct_2x1 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
+               JCOEFPTR coef_block,
+               JSAMPARRAY output_buf, JDIMENSION output_col)
+{
+    INT32 tmp0, tmp10;
+    ISLOW_MULT_TYPE * quantptr;
+    JSAMPROW outptr;
+    JSAMPLE *range_limit = IDCT_range_limit(cinfo);
+    SHIFT_TEMPS
+
+    /* Pass 1: empty. */
+
+    /* Pass 2: process 1 row from input, store into output array. */
+
+    quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
+    outptr = output_buf[0] + output_col;
+
+    /* Even part */
+
+    tmp10 = DEQUANTIZE(coef_block[0], quantptr[0]);
+    /* Add fudge factor here for final descale. */
+    tmp10 += ONE << 2;
+
+    /* Odd part */
+
+    tmp0 = DEQUANTIZE(coef_block[1], quantptr[1]);
+
+    /* Final output stage */
+
+    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0, 3) & RANGE_MASK];
+    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0, 3) & RANGE_MASK];
+}
+
+
+/*
+ * Perform dequantization and inverse DCT on one block of coefficients,
+ * producing a 8x16 output block.
+ *
+ * 16-point IDCT in pass 1 (columns), 8-point in pass 2 (rows).
+ */
+
+GLOBAL(void)
+jpeg_idct_8x16 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
+                JCOEFPTR coef_block,
+                JSAMPARRAY output_buf, JDIMENSION output_col)
+{
+    INT32 tmp0, tmp1, tmp2, tmp3, tmp10, tmp11, tmp12, tmp13;
+    INT32 tmp20, tmp21, tmp22, tmp23, tmp24, tmp25, tmp26, tmp27;
+    INT32 z1, z2, z3, z4;
+    JCOEFPTR inptr;
+    ISLOW_MULT_TYPE * quantptr;
+    int * wsptr;
+    JSAMPROW outptr;
+    JSAMPLE *range_limit = IDCT_range_limit(cinfo);
+    int ctr;
+    int workspace[8*16];	/* buffers data between passes */
+    SHIFT_TEMPS
+
+    /* Pass 1: process columns from input, store into work array.
+     * 16-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/32).
+     */
+    inptr = coef_block;
+    quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
+    wsptr = workspace;
+    for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++)
+    {
+        /* Even part */
+
+        tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
+        tmp0 <<= CONST_BITS;
+        /* Add fudge factor here for final descale. */
+        tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);
+
+        z1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
+        tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
+        tmp2 = MULTIPLY(z1, FIX_0_541196100);       /* c12[16] = c6[8] */
+
+        tmp10 = tmp0 + tmp1;
+        tmp11 = tmp0 - tmp1;
+        tmp12 = tmp0 + tmp2;
+        tmp13 = tmp0 - tmp2;
+
+        z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
+        z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
+        z3 = z1 - z2;
+        z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
+        z3 = MULTIPLY(z3, FIX(1.387039845));        /* c2[16] = c1[8] */
+
+        tmp0 = z3 + MULTIPLY(z2, FIX_2_562915447);  /* (c6+c2)[16] = (c3+c1)[8] */
+        tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
+        tmp2 = z3 - MULTIPLY(z1, FIX(0.601344887)); /* (c2-c10)[16] = (c1-c5)[8] */
+        tmp3 = z4 - MULTIPLY(z2, FIX(0.509795579)); /* (c10-c14)[16] = (c5-c7)[8] */
+
+        tmp20 = tmp10 + tmp0;
+        tmp27 = tmp10 - tmp0;
+        tmp21 = tmp12 + tmp1;
+        tmp26 = tmp12 - tmp1;
+        tmp22 = tmp13 + tmp2;
+        tmp25 = tmp13 - tmp2;
+        tmp23 = tmp11 + tmp3;
+        tmp24 = tmp11 - tmp3;
+
+        /* Odd part */
+
+        z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
+        z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
+        z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
+        z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
+
+        tmp11 = z1 + z3;
+
+        tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
+        tmp2  = MULTIPLY(tmp11,   FIX(1.247225013));   /* c5 */
+        tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
+        tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
+        tmp11 = MULTIPLY(tmp11,   FIX(0.666655658));   /* c11 */
+        tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
+        tmp0  = tmp1 + tmp2 + tmp3 -
+                MULTIPLY(z1, FIX(2.286341144));        /* c7+c5+c3-c1 */
+        tmp13 = tmp10 + tmp11 + tmp12 -
+                MULTIPLY(z1, FIX(1.835730603));        /* c9+c11+c13-c15 */
+        z1    = MULTIPLY(z2 + z3, FIX(0.138617169));   /* c15 */
+        tmp1  += z1 + MULTIPLY(z2, FIX(0.071888074));  /* c9+c11-c3-c15 */
+        tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
+        z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
+        tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
+        tmp12 += z1 + MULTIPLY(z2, FIX(1.971951411));  /* c1+c5+c13-c7 */
+        z2    += z4;
+        z1    = MULTIPLY(z2, - FIX(0.666655658));      /* -c11 */
+        tmp1  += z1;
+        tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
+        z2    = MULTIPLY(z2, - FIX(1.247225013));      /* -c5 */
+        tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
+        tmp12 += z2;
+        z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
+        tmp2  += z2;
+        tmp3  += z2;
+        z2    = MULTIPLY(z4 - z3, FIX(0.410524528));   /* c13 */
+        tmp10 += z2;
+        tmp11 += z2;
+
+        /* Final output stage */
+
+        wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp0,  CONST_BITS-PASS1_BITS);
+        wsptr[8*15] = (int) RIGHT_SHIFT(tmp20 - tmp0,  CONST_BITS-PASS1_BITS);
+        wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp1,  CONST_BITS-PASS1_BITS);
+        wsptr[8*14] = (int) RIGHT_SHIFT(tmp21 - tmp1,  CONST_BITS-PASS1_BITS);
+        wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp2,  CONST_BITS-PASS1_BITS);
+        wsptr[8*13] = (int) RIGHT_SHIFT(tmp22 - tmp2,  CONST_BITS-PASS1_BITS);
+        wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp3,  CONST_BITS-PASS1_BITS);
+        wsptr[8*12] = (int) RIGHT_SHIFT(tmp23 - tmp3,  CONST_BITS-PASS1_BITS);
+        wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp10, CONST_BITS-PASS1_BITS);
+        wsptr[8*11] = (int) RIGHT_SHIFT(tmp24 - tmp10, CONST_BITS-PASS1_BITS);
+        wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp11, CONST_BITS-PASS1_BITS);
+        wsptr[8*10] = (int) RIGHT_SHIFT(tmp25 - tmp11, CONST_BITS-PASS1_BITS);
+        wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp12, CONST_BITS-PASS1_BITS);
+        wsptr[8*9]  = (int) RIGHT_SHIFT(tmp26 - tmp12, CONST_BITS-PASS1_BITS);
+        wsptr[8*7]  = (int) RIGHT_SHIFT(tmp27 + tmp13, CONST_BITS-PASS1_BITS);
+        wsptr[8*8]  = (int) RIGHT_SHIFT(tmp27 - tmp13, CONST_BITS-PASS1_BITS);
+    }
+
+    /* Pass 2: process rows from work array, store into output array. */
+    /* Note that we must descale the results by a factor of 8 == 2**3, */
+    /* and also undo the PASS1_BITS scaling. */
+
+    wsptr = workspace;
+    for (ctr = 0; ctr < 16; ctr++)
+    {
+        outptr = output_buf[ctr] + output_col;
+
+        /* Even part: reverse the even part of the forward DCT. */
+        /* The rotator is sqrt(2)*c(-6). */
+
+        z2 = (INT32) wsptr[2];
+        z3 = (INT32) wsptr[6];
+
+        z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
+        tmp2 = z1 + MULTIPLY(z2, FIX_0_765366865);
+        tmp3 = z1 - MULTIPLY(z3, FIX_1_847759065);
+
+        /* Add fudge factor here for final descale. */
+        z2 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
+        z3 = (INT32) wsptr[4];
+
+        tmp0 = (z2 + z3) << CONST_BITS;
+        tmp1 = (z2 - z3) << CONST_BITS;
+
+        tmp10 = tmp0 + tmp2;
+        tmp13 = tmp0 - tmp2;
+        tmp11 = tmp1 + tmp3;
+        tmp12 = tmp1 - tmp3;
+
+        /* Odd part per figure 8; the matrix is unitary and hence its
+         * transpose is its inverse.  i0..i3 are y7,y5,y3,y1 respectively.
+         */
+
+        tmp0 = (INT32) wsptr[7];
+        tmp1 = (INT32) wsptr[5];
+        tmp2 = (INT32) wsptr[3];
+        tmp3 = (INT32) wsptr[1];
+
+        z2 = tmp0 + tmp2;
+        z3 = tmp1 + tmp3;
+
+        z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
+        z2 = MULTIPLY(z2, - FIX_1_961570560); /* sqrt(2) * (-c3-c5) */
+        z3 = MULTIPLY(z3, - FIX_0_390180644); /* sqrt(2) * (c5-c3) */
+        z2 += z1;
+        z3 += z1;
+
+        z1 = MULTIPLY(tmp0 + tmp3, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
+        tmp0 = MULTIPLY(tmp0, FIX_0_298631336); /* sqrt(2) * (-c1+c3+c5-c7) */
+        tmp3 = MULTIPLY(tmp3, FIX_1_501321110); /* sqrt(2) * ( c1+c3-c5-c7) */
+        tmp0 += z1 + z2;
+        tmp3 += z1 + z3;
+
+        z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
+        tmp1 = MULTIPLY(tmp1, FIX_2_053119869); /* sqrt(2) * ( c1+c3-c5+c7) */
+        tmp2 = MULTIPLY(tmp2, FIX_3_072711026); /* sqrt(2) * ( c1+c3+c5-c7) */
+        tmp1 += z1 + z3;
+        tmp2 += z1 + z2;
+
+        /* Final output stage: inputs are tmp10..tmp13, tmp0..tmp3 */
+
+        outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
+                                CONST_BITS+PASS1_BITS+3)
+                                & RANGE_MASK];
+        outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp3,
+                                CONST_BITS+PASS1_BITS+3)
+                                & RANGE_MASK];
+        outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp2,
+                                CONST_BITS+PASS1_BITS+3)
+                                & RANGE_MASK];
+        outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp2,
+                                CONST_BITS+PASS1_BITS+3)
+                                & RANGE_MASK];
+        outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
+                                CONST_BITS+PASS1_BITS+3)
+                                & RANGE_MASK];
+        outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp1,
+                                CONST_BITS+PASS1_BITS+3)
+                                & RANGE_MASK];
+        outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp0,
+                                CONST_BITS+PASS1_BITS+3)
+                                & RANGE_MASK];
+        outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp0,
+                                CONST_BITS+PASS1_BITS+3)
+                                & RANGE_MASK];
+
+        wsptr += DCTSIZE;		/* advance pointer to next row */
+    }
+}
+
+
+/*
+ * Perform dequantization and inverse DCT on one block of coefficients,
+ * producing a 7x14 output block.
+ *
+ * 14-point IDCT in pass 1 (columns), 7-point in pass 2 (rows).
+ */
+
+GLOBAL(void)
+jpeg_idct_7x14 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
+                JCOEFPTR coef_block,
+                JSAMPARRAY output_buf, JDIMENSION output_col)
+{
+    INT32 tmp10, tmp11, tmp12, tmp13, tmp14, tmp15, tmp16;
+    INT32 tmp20, tmp21, tmp22, tmp23, tmp24, tmp25, tmp26;
+    INT32 z1, z2, z3, z4;
+    JCOEFPTR inptr;
+    ISLOW_MULT_TYPE * quantptr;
+    int * wsptr;
+    JSAMPROW outptr;
+    JSAMPLE *range_limit = IDCT_range_limit(cinfo);
+    int ctr;
+    int workspace[7*14];	/* buffers data between passes */
+    SHIFT_TEMPS
+
+    /* Pass 1: process columns from input, store into work array.
+     * 14-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/28).
+     */
+    inptr = coef_block;
+    quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
+    wsptr = workspace;
+    for (ctr = 0; ctr < 7; ctr++, inptr++, quantptr++, wsptr++)
+    {
+        /* Even part */
+
+        z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
+        z1 <<= CONST_BITS;
+        /* Add fudge factor here for final descale. */
+        z1 += ONE << (CONST_BITS-PASS1_BITS-1);
+        z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
+        z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
+        z3 = MULTIPLY(z4, FIX(0.314692123));         /* c12 */
+        z4 = MULTIPLY(z4, FIX(0.881747734));         /* c8 */
+
+        tmp10 = z1 + z2;
+        tmp11 = z1 + z3;
+        tmp12 = z1 - z4;
+
+        tmp23 = RIGHT_SHIFT(z1 - ((z2 + z3 - z4) << 1), /* c0 = (c4+c12-c8)*2 */
+                            CONST_BITS-PASS1_BITS);
+
+        z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
+        z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
+
+        z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */
+
+        tmp13 = z3 + MULTIPLY(z1, FIX(0.273079590)); /* c2-c6 */
+        tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
+        tmp15 = MULTIPLY(z1, FIX(0.613604268)) -     /* c10 */
+                MULTIPLY(z2, FIX(1.378756276));      /* c2 */
+
+        tmp20 = tmp10 + tmp13;
+        tmp26 = tmp10 - tmp13;
+        tmp21 = tmp11 + tmp14;
+        tmp25 = tmp11 - tmp14;
+        tmp22 = tmp12 + tmp15;
+        tmp24 = tmp12 - tmp15;
+
+        /* Odd part */
+
+        z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
+        z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
+        z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
+        z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
+        tmp13 = z4 << CONST_BITS;
+
+        tmp14 = z1 + z3;
+        tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
+        tmp12 = MULTIPLY(tmp14, FIX(1.197448846));             /* c5 */
+        tmp10 = tmp11 + tmp12 + tmp13 - MULTIPLY(z1, FIX(1.126980169)); /* c3+c5-c1 */
+        tmp14 = MULTIPLY(tmp14, FIX(0.752406978));             /* c9 */
+        tmp16 = tmp14 - MULTIPLY(z1, FIX(1.061150426));        /* c9+c11-c13 */
+        z1    -= z2;
+        tmp15 = MULTIPLY(z1, FIX(0.467085129)) - tmp13;        /* c11 */
+        tmp16 += tmp15;
+        z1    += z4;
+        z4    = MULTIPLY(z2 + z3, - FIX(0.158341681)) - tmp13; /* -c13 */
+        tmp11 += z4 - MULTIPLY(z2, FIX(0.424103948));          /* c3-c9-c13 */
+        tmp12 += z4 - MULTIPLY(z3, FIX(2.373959773));          /* c3+c5-c13 */
+        z4    = MULTIPLY(z3 - z2, FIX(1.405321284));           /* c1 */
+        tmp14 += z4 + tmp13 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
+        tmp15 += z4 + MULTIPLY(z2, FIX(0.674957567));          /* c1+c11-c5 */
+
+        tmp13 = (z1 - z3) << PASS1_BITS;
+
+        /* Final output stage */
+
+        wsptr[7*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
+        wsptr[7*13] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
+        wsptr[7*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
+        wsptr[7*12] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
+        wsptr[7*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
+        wsptr[7*11] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
+        wsptr[7*3]  = (int) (tmp23 + tmp13);
+        wsptr[7*10] = (int) (tmp23 - tmp13);
+        wsptr[7*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
+        wsptr[7*9]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
+        wsptr[7*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
+        wsptr[7*8]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
+        wsptr[7*6]  = (int) RIGHT_SHIFT(tmp26 + tmp16, CONST_BITS-PASS1_BITS);
+        wsptr[7*7]  = (int) RIGHT_SHIFT(tmp26 - tmp16, CONST_BITS-PASS1_BITS);
+    }
+
+    /* Pass 2: process 14 rows from work array, store into output array.
+     * 7-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/14).
+     */
+    wsptr = workspace;
+    for (ctr = 0; ctr < 14; ctr++)
+    {
+        outptr = output_buf[ctr] + output_col;
+
+        /* Even part */
+
+        /* Add fudge factor here for final descale. */
+        tmp23 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
+        tmp23 <<= CONST_BITS;
+
+        z1 = (INT32) wsptr[2];
+        z2 = (INT32) wsptr[4];
+        z3 = (INT32) wsptr[6];
+
+        tmp20 = MULTIPLY(z2 - z3, FIX(0.881747734));       /* c4 */
+        tmp22 = MULTIPLY(z1 - z2, FIX(0.314692123));       /* c6 */
+        tmp21 = tmp20 + tmp22 + tmp23 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
+        tmp10 = z1 + z3;
+        z2 -= tmp10;
+        tmp10 = MULTIPLY(tmp10, FIX(1.274162392)) + tmp23; /* c2 */
+        tmp20 += tmp10 - MULTIPLY(z3, FIX(0.077722536));   /* c2-c4-c6 */
+        tmp22 += tmp10 - MULTIPLY(z1, FIX(2.470602249));   /* c2+c4+c6 */
+        tmp23 += MULTIPLY(z2, FIX(1.414213562));           /* c0 */
+
+        /* Odd part */
+
+        z1 = (INT32) wsptr[1];
+        z2 = (INT32) wsptr[3];
+        z3 = (INT32) wsptr[5];
+
+        tmp11 = MULTIPLY(z1 + z2, FIX(0.935414347));       /* (c3+c1-c5)/2 */
+        tmp12 = MULTIPLY(z1 - z2, FIX(0.170262339));       /* (c3+c5-c1)/2 */
+        tmp10 = tmp11 - tmp12;
+        tmp11 += tmp12;
+        tmp12 = MULTIPLY(z2 + z3, - FIX(1.378756276));     /* -c1 */
+        tmp11 += tmp12;
+        z2 = MULTIPLY(z1 + z3, FIX(0.613604268));          /* c5 */
+        tmp10 += z2;
+        tmp12 += z2 + MULTIPLY(z3, FIX(1.870828693));      /* c3+c1-c5 */
+
+        /* Final output stage */
+
+        outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
+                                CONST_BITS+PASS1_BITS+3)
+                                & RANGE_MASK];
+        outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
+                                CONST_BITS+PASS1_BITS+3)
+                                & RANGE_MASK];
+        outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
+                                CONST_BITS+PASS1_BITS+3)
+                                & RANGE_MASK];
+        outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
+                                CONST_BITS+PASS1_BITS+3)
+                                & RANGE_MASK];
+        outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
+                                CONST_BITS+PASS1_BITS+3)
+                                & RANGE_MASK];
+        outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
+                                CONST_BITS+PASS1_BITS+3)
+                                & RANGE_MASK];
+        outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp23,
+                                CONST_BITS+PASS1_BITS+3)
+                                & RANGE_MASK];
+
+        wsptr += 7;		/* advance pointer to next row */
+    }
+}
+
+
+/*
+ * Perform dequantization and inverse DCT on one block of coefficients,
+ * producing a 6x12 output block.
+ *
+ * 12-point IDCT in pass 1 (columns), 6-point in pass 2 (rows).
+ */
+
+GLOBAL(void)
+jpeg_idct_6x12 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
+                JCOEFPTR coef_block,
+                JSAMPARRAY output_buf, JDIMENSION output_col)
+{
+    INT32 tmp10, tmp11, tmp12, tmp13, tmp14, tmp15;
+    INT32 tmp20, tmp21, tmp22, tmp23, tmp24, tmp25;
+    INT32 z1, z2, z3, z4;
+    JCOEFPTR inptr;
+    ISLOW_MULT_TYPE * quantptr;
+    int * wsptr;
+    JSAMPROW outptr;
+    JSAMPLE *range_limit = IDCT_range_limit(cinfo);
+    int ctr;
+    int workspace[6*12];	/* buffers data between passes */
+    SHIFT_TEMPS
+
+    /* Pass 1: process columns from input, store into work array.
+     * 12-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/24).
+     */
+    inptr = coef_block;
+    quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
+    wsptr = workspace;
+    for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++)
+    {
+        /* Even part */
+
+        z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
+        z3 <<= CONST_BITS;
+        /* Add fudge factor here for final descale. */
+        z3 += ONE << (CONST_BITS-PASS1_BITS-1);
+
+        z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
+        z4 = MULTIPLY(z4, FIX(1.224744871)); /* c4 */
+
+        tmp10 = z3 + z4;
+        tmp11 = z3 - z4;
+
+        z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
+        z4 = MULTIPLY(z1, FIX(1.366025404)); /* c2 */
+        z1 <<= CONST_BITS;
+        z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
+        z2 <<= CONST_BITS;
+
+        tmp12 = z1 - z2;
+
+        tmp21 = z3 + tmp12;
+        tmp24 = z3 - tmp12;
+
+        tmp12 = z4 + z2;
+
+        tmp20 = tmp10 + tmp12;
+        tmp25 = tmp10 - tmp12;
+
+        tmp12 = z4 - z1 - z2;
+
+        tmp22 = tmp11 + tmp12;
+        tmp23 = tmp11 - tmp12;
+
+        /* Odd part */
+
+        z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
+        z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
+        z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
+        z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
+
+        tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
+        tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */
+
+        tmp10 = z1 + z3;
+        tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
+        tmp12 = tmp15 + MULTIPLY(tmp10, FIX(0.261052384));       /* c5-c7 */
+        tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
+        tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
+        tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
+        tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
+        tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
+                 MULTIPLY(z4, FIX(1.982889723));                 /* c5+c7 */
+
+        z1 -= z4;
+        z2 -= z3;
+        z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
+        tmp11 = z3 + MULTIPLY(z1, FIX_0_765366865);              /* c3-c9 */
+        tmp14 = z3 - MULTIPLY(z2, FIX_1_847759065);              /* c3+c9 */
+
+        /* Final output stage */
+
+        wsptr[6*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
+        wsptr[6*11] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
+        wsptr[6*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
+        wsptr[6*10] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
+        wsptr[6*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
+        wsptr[6*9]  = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
+        wsptr[6*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
+        wsptr[6*8]  = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
+        wsptr[6*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
+        wsptr[6*7]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
+        wsptr[6*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
+        wsptr[6*6]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
+    }
+
+    /* Pass 2: process 12 rows from work array, store into output array.
+     * 6-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/12).
+     */
+    wsptr = workspace;
+    for (ctr = 0; ctr < 12; ctr++)
+    {
+        outptr = output_buf[ctr] + output_col;
+
+        /* Even part */
+
+        /* Add fudge factor here for final descale. */
+        tmp10 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
+        tmp10 <<= CONST_BITS;
+        tmp12 = (INT32) wsptr[4];
+        tmp20 = MULTIPLY(tmp12, FIX(0.707106781));   /* c4 */
+        tmp11 = tmp10 + tmp20;
+        tmp21 = tmp10 - tmp20 - tmp20;
+        tmp20 = (INT32) wsptr[2];
+        tmp10 = MULTIPLY(tmp20, FIX(1.224744871));   /* c2 */
+        tmp20 = tmp11 + tmp10;
+        tmp22 = tmp11 - tmp10;
+
+        /* Odd part */
+
+        z1 = (INT32) wsptr[1];
+        z2 = (INT32) wsptr[3];
+        z3 = (INT32) wsptr[5];
+        tmp11 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
+        tmp10 = tmp11 + ((z1 + z2) << CONST_BITS);
+        tmp12 = tmp11 + ((z3 - z2) << CONST_BITS);
+        tmp11 = (z1 - z2 - z3) << CONST_BITS;
+
+        /* Final output stage */
+
+        outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
+                                CONST_BITS+PASS1_BITS+3)
+                                & RANGE_MASK];
+        outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
+                                CONST_BITS+PASS1_BITS+3)
+                                & RANGE_MASK];
+        outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
+                                CONST_BITS+PASS1_BITS+3)
+                                & RANGE_MASK];
+        outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
+                                CONST_BITS+PASS1_BITS+3)
+                                & RANGE_MASK];
+        outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
+                                CONST_BITS+PASS1_BITS+3)
+                                & RANGE_MASK];
+        outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
+                                CONST_BITS+PASS1_BITS+3)
+                                & RANGE_MASK];
+
+        wsptr += 6;		/* advance pointer to next row */
+    }
+}
+
+
+/*
+ * Perform dequantization and inverse DCT on one block of coefficients,
+ * producing a 5x10 output block.
+ *
+ * 10-point IDCT in pass 1 (columns), 5-point in pass 2 (rows).
+ */
+
+GLOBAL(void)
+jpeg_idct_5x10 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
+                JCOEFPTR coef_block,
+                JSAMPARRAY output_buf, JDIMENSION output_col)
+{
+    INT32 tmp10, tmp11, tmp12, tmp13, tmp14;
+    INT32 tmp20, tmp21, tmp22, tmp23, tmp24;
+    INT32 z1, z2, z3, z4, z5;
+    JCOEFPTR inptr;
+    ISLOW_MULT_TYPE * quantptr;
+    int * wsptr;
+    JSAMPROW outptr;
+    JSAMPLE *range_limit = IDCT_range_limit(cinfo);
+    int ctr;
+    int workspace[5*10];	/* buffers data between passes */
+    SHIFT_TEMPS
+
+    /* Pass 1: process columns from input, store into work array.
+     * 10-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/20).
+     */
+    inptr = coef_block;
+    quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
+    wsptr = workspace;
+    for (ctr = 0; ctr < 5; ctr++, inptr++, quantptr++, wsptr++)
+    {
+        /* Even part */
+
+        z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
+        z3 <<= CONST_BITS;
+        /* Add fudge factor here for final descale. */
+        z3 += ONE << (CONST_BITS-PASS1_BITS-1);
+        z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
+        z1 = MULTIPLY(z4, FIX(1.144122806));         /* c4 */
+        z2 = MULTIPLY(z4, FIX(0.437016024));         /* c8 */
+        tmp10 = z3 + z1;
+        tmp11 = z3 - z2;
+
+        tmp22 = RIGHT_SHIFT(z3 - ((z1 - z2) << 1),   /* c0 = (c4-c8)*2 */
+                            CONST_BITS-PASS1_BITS);
+
+        z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
+        z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
+
+        z1 = MULTIPLY(z2 + z3, FIX(0.831253876));    /* c6 */
+        tmp12 = z1 + MULTIPLY(z2, FIX(0.513743148)); /* c2-c6 */
+        tmp13 = z1 - MULTIPLY(z3, FIX(2.176250899)); /* c2+c6 */
+
+        tmp20 = tmp10 + tmp12;
+        tmp24 = tmp10 - tmp12;
+        tmp21 = tmp11 + tmp13;
+        tmp23 = tmp11 - tmp13;
+
+        /* Odd part */
+
+        z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
+        z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
+        z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
+        z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
+
+        tmp11 = z2 + z4;
+        tmp13 = z2 - z4;
+
+        tmp12 = MULTIPLY(tmp13, FIX(0.309016994));        /* (c3-c7)/2 */
+        z5 = z3 << CONST_BITS;
+
+        z2 = MULTIPLY(tmp11, FIX(0.951056516));           /* (c3+c7)/2 */
+        z4 = z5 + tmp12;
+
+        tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
+        tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
+
+        z2 = MULTIPLY(tmp11, FIX(0.587785252));           /* (c1-c9)/2 */
+        z4 = z5 - tmp12 - (tmp13 << (CONST_BITS - 1));
+
+        tmp12 = (z1 - tmp13 - z3) << PASS1_BITS;
+
+        tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
+        tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
+
+        /* Final output stage */
+
+        wsptr[5*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
+        wsptr[5*9] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
+        wsptr[5*1] = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
+        wsptr[5*8] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
+        wsptr[5*2] = (int) (tmp22 + tmp12);
+        wsptr[5*7] = (int) (tmp22 - tmp12);
+        wsptr[5*3] = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
+        wsptr[5*6] = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
+        wsptr[5*4] = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
+        wsptr[5*5] = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
+    }
+
+    /* Pass 2: process 10 rows from work array, store into output array.
+     * 5-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/10).
+     */
+    wsptr = workspace;
+    for (ctr = 0; ctr < 10; ctr++)
+    {
+        outptr = output_buf[ctr] + output_col;
+
+        /* Even part */
+
+        /* Add fudge factor here for final descale. */
+        tmp12 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
+        tmp12 <<= CONST_BITS;
+        tmp13 = (INT32) wsptr[2];
+        tmp14 = (INT32) wsptr[4];
+        z1 = MULTIPLY(tmp13 + tmp14, FIX(0.790569415)); /* (c2+c4)/2 */
+        z2 = MULTIPLY(tmp13 - tmp14, FIX(0.353553391)); /* (c2-c4)/2 */
+        z3 = tmp12 + z2;
+        tmp10 = z3 + z1;
+        tmp11 = z3 - z1;
+        tmp12 -= z2 << 2;
+
+        /* Odd part */
+
+        z2 = (INT32) wsptr[1];
+        z3 = (INT32) wsptr[3];
+
+        z1 = MULTIPLY(z2 + z3, FIX(0.831253876));       /* c3 */
+        tmp13 = z1 + MULTIPLY(z2, FIX(0.513743148));    /* c1-c3 */
+        tmp14 = z1 - MULTIPLY(z3, FIX(2.176250899));    /* c1+c3 */
+
+        /* Final output stage */
+
+        outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp13,
+                                CONST_BITS+PASS1_BITS+3)
+                                & RANGE_MASK];
+        outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp13,
+                                CONST_BITS+PASS1_BITS+3)
+                                & RANGE_MASK];
+        outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp14,
+                                CONST_BITS+PASS1_BITS+3)
+                                & RANGE_MASK];
+        outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp14,
+                                CONST_BITS+PASS1_BITS+3)
+                                & RANGE_MASK];
+        outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12,
+                                CONST_BITS+PASS1_BITS+3)
+                                & RANGE_MASK];
+
+        wsptr += 5;		/* advance pointer to next row */
+    }
+}
+
+
+/*
+ * Perform dequantization and inverse DCT on one block of coefficients,
+ * producing a 4x8 output block.
+ *
+ * 8-point IDCT in pass 1 (columns), 4-point in pass 2 (rows).
+ */
+
+GLOBAL(void)
+jpeg_idct_4x8 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
+               JCOEFPTR coef_block,
+               JSAMPARRAY output_buf, JDIMENSION output_col)
+{
+    INT32 tmp0, tmp1, tmp2, tmp3;
+    INT32 tmp10, tmp11, tmp12, tmp13;
+    INT32 z1, z2, z3;
+    JCOEFPTR inptr;
+    ISLOW_MULT_TYPE * quantptr;
+    int * wsptr;
+    JSAMPROW outptr;
+    JSAMPLE *range_limit = IDCT_range_limit(cinfo);
+    int ctr;
+    int workspace[4*8];	/* buffers data between passes */
+    SHIFT_TEMPS
+
+    /* Pass 1: process columns from input, store into work array. */
+    /* Note results are scaled up by sqrt(8) compared to a true IDCT; */
+    /* furthermore, we scale the results by 2**PASS1_BITS. */
+
+    inptr = coef_block;
+    quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
+    wsptr = workspace;
+    for (ctr = 4; ctr > 0; ctr--)
+    {
+        /* Due to quantization, we will usually find that many of the input
+         * coefficients are zero, especially the AC terms.  We can exploit this
+         * by short-circuiting the IDCT calculation for any column in which all
+         * the AC terms are zero.  In that case each output is equal to the
+         * DC coefficient (with scale factor as needed).
+         * With typical images and quantization tables, half or more of the
+         * column DCT calculations can be simplified this way.
+         */
+
+        if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
+                inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
+                inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
+                inptr[DCTSIZE*7] == 0)
+        {
+            /* AC terms all zero */
+            int dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]) << PASS1_BITS;
+
+            wsptr[4*0] = dcval;
+            wsptr[4*1] = dcval;
+            wsptr[4*2] = dcval;
+            wsptr[4*3] = dcval;
+            wsptr[4*4] = dcval;
+            wsptr[4*5] = dcval;
+            wsptr[4*6] = dcval;
+            wsptr[4*7] = dcval;
+
+            inptr++;			/* advance pointers to next column */
+            quantptr++;
+            wsptr++;
+            continue;
+        }
+
+        /* Even part: reverse the even part of the forward DCT. */
+        /* The rotator is sqrt(2)*c(-6). */
+
+        z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
+        z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
+
+        z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
+        tmp2 = z1 + MULTIPLY(z2, FIX_0_765366865);
+        tmp3 = z1 - MULTIPLY(z3, FIX_1_847759065);
+
+        z2 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
+        z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
+        z2 <<= CONST_BITS;
+        z3 <<= CONST_BITS;
+        /* Add fudge factor here for final descale. */
+        z2 += ONE << (CONST_BITS-PASS1_BITS-1);
+
+        tmp0 = z2 + z3;
+        tmp1 = z2 - z3;
+
+        tmp10 = tmp0 + tmp2;
+        tmp13 = tmp0 - tmp2;
+        tmp11 = tmp1 + tmp3;
+        tmp12 = tmp1 - tmp3;
+
+        /* Odd part per figure 8; the matrix is unitary and hence its
+         * transpose is its inverse.  i0..i3 are y7,y5,y3,y1 respectively.
+         */
+
+        tmp0 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
+        tmp1 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
+        tmp2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
+        tmp3 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
+
+        z2 = tmp0 + tmp2;
+        z3 = tmp1 + tmp3;
+
+        z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
+        z2 = MULTIPLY(z2, - FIX_1_961570560); /* sqrt(2) * (-c3-c5) */
+        z3 = MULTIPLY(z3, - FIX_0_390180644); /* sqrt(2) * (c5-c3) */
+        z2 += z1;
+        z3 += z1;
+
+        z1 = MULTIPLY(tmp0 + tmp3, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
+        tmp0 = MULTIPLY(tmp0, FIX_0_298631336); /* sqrt(2) * (-c1+c3+c5-c7) */
+        tmp3 = MULTIPLY(tmp3, FIX_1_501321110); /* sqrt(2) * ( c1+c3-c5-c7) */
+        tmp0 += z1 + z2;
+        tmp3 += z1 + z3;
+
+        z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
+        tmp1 = MULTIPLY(tmp1, FIX_2_053119869); /* sqrt(2) * ( c1+c3-c5+c7) */
+        tmp2 = MULTIPLY(tmp2, FIX_3_072711026); /* sqrt(2) * ( c1+c3+c5-c7) */
+        tmp1 += z1 + z3;
+        tmp2 += z1 + z2;
+
+        /* Final output stage: inputs are tmp10..tmp13, tmp0..tmp3 */
+
+        wsptr[4*0] = (int) RIGHT_SHIFT(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
+        wsptr[4*7] = (int) RIGHT_SHIFT(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
+        wsptr[4*1] = (int) RIGHT_SHIFT(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
+        wsptr[4*6] = (int) RIGHT_SHIFT(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
+        wsptr[4*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
+        wsptr[4*5] = (int) RIGHT_SHIFT(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
+        wsptr[4*3] = (int) RIGHT_SHIFT(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
+        wsptr[4*4] = (int) RIGHT_SHIFT(tmp13 - tmp0, CONST_BITS-PASS1_BITS);
+
+        inptr++;			/* advance pointers to next column */
+        quantptr++;
+        wsptr++;
+    }
+
+    /* Pass 2: process 8 rows from work array, store into output array.
+     * 4-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/16).
+     */
+    wsptr = workspace;
+    for (ctr = 0; ctr < 8; ctr++)
+    {
+        outptr = output_buf[ctr] + output_col;
+
+        /* Even part */
+
+        /* Add fudge factor here for final descale. */
+        tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
+        tmp2 = (INT32) wsptr[2];
+
+        tmp10 = (tmp0 + tmp2) << CONST_BITS;
+        tmp12 = (tmp0 - tmp2) << CONST_BITS;
+
+        /* Odd part */
+        /* Same rotation as in the even part of the 8x8 LL&M IDCT */
+
+        z2 = (INT32) wsptr[1];
+        z3 = (INT32) wsptr[3];
+
+        z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
+        tmp0 = z1 + MULTIPLY(z2, FIX_0_765366865); /* c2-c6 */
+        tmp2 = z1 - MULTIPLY(z3, FIX_1_847759065); /* c2+c6 */
+
+        /* Final output stage */
+
+        outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
+                                CONST_BITS+PASS1_BITS+3)
+                                & RANGE_MASK];
+        outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
+                                CONST_BITS+PASS1_BITS+3)
+                                & RANGE_MASK];
+        outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
+                                CONST_BITS+PASS1_BITS+3)
+                                & RANGE_MASK];
+        outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
+                                CONST_BITS+PASS1_BITS+3)
+                                & RANGE_MASK];
+
+        wsptr += 4;		/* advance pointer to next row */
+    }
+}
+
+
+/*
+ * Perform dequantization and inverse DCT on one block of coefficients,
+ * producing a reduced-size 3x6 output block.
+ *
+ * 6-point IDCT in pass 1 (columns), 3-point in pass 2 (rows).
+ */
+
+GLOBAL(void)
+jpeg_idct_3x6 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
+               JCOEFPTR coef_block,
+               JSAMPARRAY output_buf, JDIMENSION output_col)
+{
+    INT32 tmp0, tmp1, tmp2, tmp10, tmp11, tmp12;
+    INT32 z1, z2, z3;
+    JCOEFPTR inptr;
+    ISLOW_MULT_TYPE * quantptr;
+    int * wsptr;
+    JSAMPROW outptr;
+    JSAMPLE *range_limit = IDCT_range_limit(cinfo);
+    int ctr;
+    int workspace[3*6];	/* buffers data between passes */
+    SHIFT_TEMPS
+
+    /* Pass 1: process columns from input, store into work array.
+     * 6-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/12).
+     */
+    inptr = coef_block;
+    quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
+    wsptr = workspace;
+    for (ctr = 0; ctr < 3; ctr++, inptr++, quantptr++, wsptr++)
+    {
+        /* Even part */
+
+        tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
+        tmp0 <<= CONST_BITS;
+        /* Add fudge factor here for final descale. */
+        tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);
+        tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
+        tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
+        tmp1 = tmp0 + tmp10;
+        tmp11 = RIGHT_SHIFT(tmp0 - tmp10 - tmp10, CONST_BITS-PASS1_BITS);
+        tmp10 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
+        tmp0 = MULTIPLY(tmp10, FIX(1.224744871));   /* c2 */
+        tmp10 = tmp1 + tmp0;
+        tmp12 = tmp1 - tmp0;
+
+        /* Odd part */
+
+        z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
+        z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
+        z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
+        tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
+        tmp0 = tmp1 + ((z1 + z2) << CONST_BITS);
+        tmp2 = tmp1 + ((z3 - z2) << CONST_BITS);
+        tmp1 = (z1 - z2 - z3) << PASS1_BITS;
+
+        /* Final output stage */
+
+        wsptr[3*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
+        wsptr[3*5] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
+        wsptr[3*1] = (int) (tmp11 + tmp1);
+        wsptr[3*4] = (int) (tmp11 - tmp1);
+        wsptr[3*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
+        wsptr[3*3] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
+    }
+
+    /* Pass 2: process 6 rows from work array, store into output array.
+     * 3-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/6).
+     */
+    wsptr = workspace;
+    for (ctr = 0; ctr < 6; ctr++)
+    {
+        outptr = output_buf[ctr] + output_col;
+
+        /* Even part */
+
+        /* Add fudge factor here for final descale. */
+        tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
+        tmp0 <<= CONST_BITS;
+        tmp2 = (INT32) wsptr[2];
+        tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
+        tmp10 = tmp0 + tmp12;
+        tmp2 = tmp0 - tmp12 - tmp12;
+
+        /* Odd part */
+
+        tmp12 = (INT32) wsptr[1];
+        tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
+
+        /* Final output stage */
+
+        outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
+                                CONST_BITS+PASS1_BITS+3)
+                                & RANGE_MASK];
+        outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
+                                CONST_BITS+PASS1_BITS+3)
+                                & RANGE_MASK];
+        outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp2,
+                                CONST_BITS+PASS1_BITS+3)
+                                & RANGE_MASK];
+
+        wsptr += 3;		/* advance pointer to next row */
+    }
+}
+
+
+/*
+ * Perform dequantization and inverse DCT on one block of coefficients,
+ * producing a 2x4 output block.
+ *
+ * 4-point IDCT in pass 1 (columns), 2-point in pass 2 (rows).
+ */
+
+GLOBAL(void)
+jpeg_idct_2x4 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
+               JCOEFPTR coef_block,
+               JSAMPARRAY output_buf, JDIMENSION output_col)
+{
+    INT32 tmp0, tmp2, tmp10, tmp12;
+    INT32 z1, z2, z3;
+    JCOEFPTR inptr;
+    ISLOW_MULT_TYPE * quantptr;
+    INT32 * wsptr;
+    JSAMPROW outptr;
+    JSAMPLE *range_limit = IDCT_range_limit(cinfo);
+    int ctr;
+    INT32 workspace[2*4];	/* buffers data between passes */
+    SHIFT_TEMPS
+
+    /* Pass 1: process columns from input, store into work array.
+     * 4-point IDCT kernel,
+     * cK represents sqrt(2) * cos(K*pi/16) [refers to 8-point IDCT].
+     */
+    inptr = coef_block;
+    quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
+    wsptr = workspace;
+    for (ctr = 0; ctr < 2; ctr++, inptr++, quantptr++, wsptr++)
+    {
+        /* Even part */
+
+        tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
+        tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
+
+        tmp10 = (tmp0 + tmp2) << CONST_BITS;
+        tmp12 = (tmp0 - tmp2) << CONST_BITS;
+
+        /* Odd part */
+        /* Same rotation as in the even part of the 8x8 LL&M IDCT */
+
+        z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
+        z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
+
+        z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
+        tmp0 = z1 + MULTIPLY(z2, FIX_0_765366865); /* c2-c6 */
+        tmp2 = z1 - MULTIPLY(z3, FIX_1_847759065); /* c2+c6 */
+
+        /* Final output stage */
+
+        wsptr[2*0] = tmp10 + tmp0;
+        wsptr[2*3] = tmp10 - tmp0;
+        wsptr[2*1] = tmp12 + tmp2;
+        wsptr[2*2] = tmp12 - tmp2;
+    }
+
+    /* Pass 2: process 4 rows from work array, store into output array. */
+
+    wsptr = workspace;
+    for (ctr = 0; ctr < 4; ctr++)
+    {
+        outptr = output_buf[ctr] + output_col;
+
+        /* Even part */
+
+        /* Add fudge factor here for final descale. */
+        tmp10 = wsptr[0] + (ONE << (CONST_BITS+2));
+
+        /* Odd part */
+
+        tmp0 = wsptr[1];
+
+        /* Final output stage */
+
+        outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS+3)
+                                & RANGE_MASK];
+        outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS+3)
+                                & RANGE_MASK];
+
+        wsptr += 2;		/* advance pointer to next row */
+    }
+}
+
+
+/*
+ * Perform dequantization and inverse DCT on one block of coefficients,
+ * producing a 1x2 output block.
+ *
+ * 2-point IDCT in pass 1 (columns), 1-point in pass 2 (rows).
+ */
+
+GLOBAL(void)
+jpeg_idct_1x2 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
+               JCOEFPTR coef_block,
+               JSAMPARRAY output_buf, JDIMENSION output_col)
+{
+    INT32 tmp0, tmp10;
+    ISLOW_MULT_TYPE * quantptr;
+    JSAMPLE *range_limit = IDCT_range_limit(cinfo);
+    SHIFT_TEMPS
+
+    /* Process 1 column from input, store into output array. */
+
+    quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
+
+    /* Even part */
+
+    tmp10 = DEQUANTIZE(coef_block[DCTSIZE*0], quantptr[DCTSIZE*0]);
+    /* Add fudge factor here for final descale. */
+    tmp10 += ONE << 2;
+
+    /* Odd part */
+
+    tmp0 = DEQUANTIZE(coef_block[DCTSIZE*1], quantptr[DCTSIZE*1]);
+
+    /* Final output stage */
+
+    output_buf[0][output_col] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0, 3)
+                                            & RANGE_MASK];
+    output_buf[1][output_col] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0, 3)
+                                            & RANGE_MASK];
+}
+
+#endif /* IDCT_SCALING_SUPPORTED */
+#endif /* DCT_ISLOW_SUPPORTED */
diff -NEaurb neo/renderer/jpeg-8c/jinclude.h neo/renderer/jpeg-8c/jinclude.h
--- neo/renderer/jpeg-8c/jinclude.h	1970-01-01 00:00:00 +0000
+++ neo/renderer/jpeg-8c/jinclude.h	2012-11-17 01:20:40 +0000
@@ -0,0 +1,91 @@
+/*
+ * jinclude.h
+ *
+ * Copyright (C) 1991-1994, Thomas G. Lane.
+ * This file is part of the Independent JPEG Group's software.
+ * For conditions of distribution and use, see the accompanying README file.
+ *
+ * This file exists to provide a single place to fix any problems with
+ * including the wrong system include files.  (Common problems are taken
+ * care of by the standard jconfig symbols, but on really weird systems
+ * you may have to edit this file.)
+ *
+ * NOTE: this file is NOT intended to be included by applications using the
+ * JPEG library.  Most applications need only include jpeglib.h.
+ */
+
+
+/* Include auto-config file to find out which system include files we need. */
+
+#include "jconfig.h"		/* auto configuration options */
+#define JCONFIG_INCLUDED	/* so that jpeglib.h doesn't do it again */
+
+/*
+ * We need the NULL macro and size_t typedef.
+ * On an ANSI-conforming system it is sufficient to include <stddef.h>.
+ * Otherwise, we get them from <stdlib.h> or <stdio.h>; we may have to
+ * pull in <sys/types.h> as well.
+ * Note that the core JPEG library does not require <stdio.h>;
+ * only the default error handler and data source/destination modules do.
+ * But we must pull it in because of the references to FILE in jpeglib.h.
+ * You can remove those references if you want to compile without <stdio.h>.
+ */
+
+#ifdef HAVE_STDDEF_H
+#include <stddef.h>
+#endif
+
+#ifdef HAVE_STDLIB_H
+#include <stdlib.h>
+#endif
+
+#ifdef NEED_SYS_TYPES_H
+#include <sys/types.h>
+#endif
+
+#include <stdio.h>
+
+/*
+ * We need memory copying and zeroing functions, plus strncpy().
+ * ANSI and System V implementations declare these in <string.h>.
+ * BSD doesn't have the mem() functions, but it does have bcopy()/bzero().
+ * Some systems may declare memset and memcpy in <memory.h>.
+ *
+ * NOTE: we assume the size parameters to these functions are of type size_t.
+ * Change the casts in these macros if not!
+ */
+
+#ifdef NEED_BSD_STRINGS
+
+#include <strings.h>
+#define MEMZERO(target,size)	bzero((void *)(target), (size_t)(size))
+#define MEMCOPY(dest,src,size)	bcopy((const void *)(src), (void *)(dest), (size_t)(size))
+
+#else /* not BSD, assume ANSI/SysV string lib */
+
+#include <string.h>
+#define MEMZERO(target,size)	memset((void *)(target), 0, (size_t)(size))
+#define MEMCOPY(dest,src,size)	memcpy((void *)(dest), (const void *)(src), (size_t)(size))
+
+#endif
+
+/*
+ * In ANSI C, and indeed any rational implementation, size_t is also the
+ * type returned by sizeof().  However, it seems there are some irrational
+ * implementations out there, in which sizeof() returns an int even though
+ * size_t is defined as long or unsigned long.  To ensure consistent results
+ * we always use this SIZEOF() macro in place of using sizeof() directly.
+ */
+
+#define SIZEOF(object)	((size_t) sizeof(object))
+
+/*
+ * The modules that use fread() and fwrite() always invoke them through
+ * these macros.  On some systems you may need to twiddle the argument casts.
+ * CAUTION: argument order is different from underlying functions!
+ */
+
+#define JFREAD(file,buf,sizeofbuf)  \
+  ((size_t) fread((void *) (buf), (size_t) 1, (size_t) (sizeofbuf), (file)))
+#define JFWRITE(file,buf,sizeofbuf)  \
+  ((size_t) fwrite((const void *) (buf), (size_t) 1, (size_t) (sizeofbuf), (file)))
diff -NEaurb neo/renderer/jpeg-8c/jmemmgr.c neo/renderer/jpeg-8c/jmemmgr.c
--- neo/renderer/jpeg-8c/jmemmgr.c	1970-01-01 00:00:00 +0000
+++ neo/renderer/jpeg-8c/jmemmgr.c	2012-11-29 08:12:10 +0000
@@ -0,0 +1,1283 @@
+/*
+ * jmemmgr.c
+ *
+ * Copyright (C) 1991-1997, Thomas G. Lane.
+ * This file is part of the Independent JPEG Group's software.
+ * For conditions of distribution and use, see the accompanying README file.
+ *
+ * This file contains the JPEG system-independent memory management
+ * routines.  This code is usable across a wide variety of machines; most
+ * of the system dependencies have been isolated in a separate file.
+ * The major functions provided here are:
+ *   * pool-based allocation and freeing of memory;
+ *   * policy decisions about how to divide available memory among the
+ *     virtual arrays;
+ *   * control logic for swapping virtual arrays between main memory and
+ *     backing storage.
+ * The separate system-dependent file provides the actual backing-storage
+ * access code, and it contains the policy decision about how much total
+ * main memory to use.
+ * This file is system-dependent in the sense that some of its functions
+ * are unnecessary in some systems.  For example, if there is enough virtual
+ * memory so that backing storage will never be used, much of the virtual
+ * array control logic could be removed.  (Of course, if you have that much
+ * memory then you shouldn't care about a little bit of unused code...)
+ */
+
+#define JPEG_INTERNALS
+#define AM_MEMORY_MANAGER	/* we define jvirt_Xarray_control structs */
+#include "jinclude.h"
+#include "jpeglib.h"
+#include "jmemsys.h"		/* import the system-dependent declarations */
+
+#ifndef NO_GETENV
+#ifndef HAVE_STDLIB_H		/* <stdlib.h> should declare getenv() */
+extern char * getenv JPP((const char * name));
+#endif
+#endif
+
+
+/*
+ * Some important notes:
+ *   The allocation routines provided here must never return NULL.
+ *   They should exit to error_exit if unsuccessful.
+ *
+ *   It's not a good idea to try to merge the sarray and barray routines,
+ *   even though they are textually almost the same, because samples are
+ *   usually stored as bytes while coefficients are shorts or ints.  Thus,
+ *   in machines where byte pointers have a different representation from
+ *   word pointers, the resulting machine code could not be the same.
+ */
+
+
+/*
+ * Many machines require storage alignment: longs must start on 4-byte
+ * boundaries, doubles on 8-byte boundaries, etc.  On such machines, malloc()
+ * always returns pointers that are multiples of the worst-case alignment
+ * requirement, and we had better do so too.
+ * There isn't any really portable way to determine the worst-case alignment
+ * requirement.  This module assumes that the alignment requirement is
+ * multiples of sizeof(ALIGN_TYPE).
+ * By default, we define ALIGN_TYPE as double.  This is necessary on some
+ * workstations (where doubles really do need 8-byte alignment) and will work
+ * fine on nearly everything.  If your machine has lesser alignment needs,
+ * you can save a few bytes by making ALIGN_TYPE smaller.
+ * The only place I know of where this will NOT work is certain Macintosh
+ * 680x0 compilers that define double as a 10-byte IEEE extended float.
+ * Doing 10-byte alignment is counterproductive because longwords won't be
+ * aligned well.  Put "#define ALIGN_TYPE long" in jconfig.h if you have
+ * such a compiler.
+ */
+
+#ifndef ALIGN_TYPE		/* so can override from jconfig.h */
+#define ALIGN_TYPE  double
+#endif
+
+
+/*
+ * We allocate objects from "pools", where each pool is gotten with a single
+ * request to jpeg_get_small() or jpeg_get_large().  There is no per-object
+ * overhead within a pool, except for alignment padding.  Each pool has a
+ * header with a link to the next pool of the same class.
+ * Small and large pool headers are identical except that the latter's
+ * link pointer must be FAR on 80x86 machines.
+ * Notice that the "real" header fields are union'ed with a dummy ALIGN_TYPE
+ * field.  This forces the compiler to make SIZEOF(small_pool_hdr) a multiple
+ * of the alignment requirement of ALIGN_TYPE.
+ */
+
+typedef union small_pool_struct * small_pool_ptr;
+
+typedef union small_pool_struct
+{
+    struct
+    {
+        small_pool_ptr next;	/* next in list of pools */
+        size_t bytes_used;		/* how many bytes already used within pool */
+        size_t bytes_left;		/* bytes still available in this pool */
+    } hdr;
+    ALIGN_TYPE dummy;		/* included in union to ensure alignment */
+} small_pool_hdr;
+
+typedef union large_pool_struct FAR * large_pool_ptr;
+
+typedef union large_pool_struct
+{
+    struct
+    {
+        large_pool_ptr next;	/* next in list of pools */
+        size_t bytes_used;		/* how many bytes already used within pool */
+        size_t bytes_left;		/* bytes still available in this pool */
+    } hdr;
+    ALIGN_TYPE dummy;		/* included in union to ensure alignment */
+} large_pool_hdr;
+
+
+/*
+ * Here is the full definition of a memory manager object.
+ */
+
+typedef struct
+{
+    struct jpeg_memory_mgr pub;	/* public fields */
+
+    /* Each pool identifier (lifetime class) names a linked list of pools. */
+    small_pool_ptr small_list[JPOOL_NUMPOOLS];
+    large_pool_ptr large_list[JPOOL_NUMPOOLS];
+
+    /* Since we only have one lifetime class of virtual arrays, only one
+     * linked list is necessary (for each datatype).  Note that the virtual
+     * array control blocks being linked together are actually stored somewhere
+     * in the small-pool list.
+     */
+    jvirt_sarray_ptr virt_sarray_list;
+    jvirt_barray_ptr virt_barray_list;
+
+    /* This counts total space obtained from jpeg_get_small/large */
+    long total_space_allocated;
+
+    /* alloc_sarray and alloc_barray set this value for use by virtual
+     * array routines.
+     */
+    JDIMENSION last_rowsperchunk;	/* from most recent alloc_sarray/barray */
+} my_memory_mgr;
+
+typedef my_memory_mgr * my_mem_ptr;
+
+
+/*
+ * The control blocks for virtual arrays.
+ * Note that these blocks are allocated in the "small" pool area.
+ * System-dependent info for the associated backing store (if any) is hidden
+ * inside the backing_store_info struct.
+ */
+
+struct jvirt_sarray_control
+{
+    JSAMPARRAY mem_buffer;	/* => the in-memory buffer */
+    JDIMENSION rows_in_array;	/* total virtual array height */
+    JDIMENSION samplesperrow;	/* width of array (and of memory buffer) */
+    JDIMENSION maxaccess;		/* max rows accessed by access_virt_sarray */
+    JDIMENSION rows_in_mem;	/* height of memory buffer */
+    JDIMENSION rowsperchunk;	/* allocation chunk size in mem_buffer */
+    JDIMENSION cur_start_row;	/* first logical row # in the buffer */
+    JDIMENSION first_undef_row;	/* row # of first uninitialized row */
+    boolean pre_zero;		/* pre-zero mode requested? */
+    boolean dirty;		/* do current buffer contents need written? */
+    boolean b_s_open;		/* is backing-store data valid? */
+    jvirt_sarray_ptr next;	/* link to next virtual sarray control block */
+    backing_store_info b_s_info;	/* System-dependent control info */
+};
+
+struct jvirt_barray_control
+{
+    JBLOCKARRAY mem_buffer;	/* => the in-memory buffer */
+    JDIMENSION rows_in_array;	/* total virtual array height */
+    JDIMENSION blocksperrow;	/* width of array (and of memory buffer) */
+    JDIMENSION maxaccess;		/* max rows accessed by access_virt_barray */
+    JDIMENSION rows_in_mem;	/* height of memory buffer */
+    JDIMENSION rowsperchunk;	/* allocation chunk size in mem_buffer */
+    JDIMENSION cur_start_row;	/* first logical row # in the buffer */
+    JDIMENSION first_undef_row;	/* row # of first uninitialized row */
+    boolean pre_zero;		/* pre-zero mode requested? */
+    boolean dirty;		/* do current buffer contents need written? */
+    boolean b_s_open;		/* is backing-store data valid? */
+    jvirt_barray_ptr next;	/* link to next virtual barray control block */
+    backing_store_info b_s_info;	/* System-dependent control info */
+};
+
+
+#ifdef MEM_STATS		/* optional extra stuff for statistics */
+
+LOCAL(void)
+print_mem_stats (j_common_ptr cinfo, int pool_id)
+{
+    my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
+    small_pool_ptr shdr_ptr;
+    large_pool_ptr lhdr_ptr;
+
+    /* Since this is only a debugging stub, we can cheat a little by using
+     * fprintf directly rather than going through the trace message code.
+     * This is helpful because message parm array can't handle longs.
+     */
+    fprintf(stderr, "Freeing pool %d, total space = %ld\n",
+            pool_id, mem->total_space_allocated);
+
+    for (lhdr_ptr = mem->large_list[pool_id]; lhdr_ptr != NULL;
+            lhdr_ptr = lhdr_ptr->hdr.next)
+    {
+        fprintf(stderr, "  Large chunk used %ld\n",
+                (long) lhdr_ptr->hdr.bytes_used);
+    }
+
+    for (shdr_ptr = mem->small_list[pool_id]; shdr_ptr != NULL;
+            shdr_ptr = shdr_ptr->hdr.next)
+    {
+        fprintf(stderr, "  Small chunk used %ld free %ld\n",
+                (long) shdr_ptr->hdr.bytes_used,
+                (long) shdr_ptr->hdr.bytes_left);
+    }
+}
+
+#endif /* MEM_STATS */
+
+
+LOCAL(void)
+out_of_memory (j_common_ptr cinfo, int which)
+/* Report an out-of-memory error and stop execution */
+/* If we compiled MEM_STATS support, report alloc requests before dying */
+{
+#ifdef MEM_STATS
+    cinfo->err->trace_level = 2;	/* force self_destruct to report stats */
+#endif
+    ERREXIT1(cinfo, JERR_OUT_OF_MEMORY, which);
+}
+
+
+/*
+ * Allocation of "small" objects.
+ *
+ * For these, we use pooled storage.  When a new pool must be created,
+ * we try to get enough space for the current request plus a "slop" factor,
+ * where the slop will be the amount of leftover space in the new pool.
+ * The speed vs. space tradeoff is largely determined by the slop values.
+ * A different slop value is provided for each pool class (lifetime),
+ * and we also distinguish the first pool of a class from later ones.
+ * NOTE: the values given work fairly well on both 16- and 32-bit-int
+ * machines, but may be too small if longs are 64 bits or more.
+ */
+
+static const size_t first_pool_slop[JPOOL_NUMPOOLS] =
+{
+    1600,			/* first PERMANENT pool */
+    16000			/* first IMAGE pool */
+};
+
+static const size_t extra_pool_slop[JPOOL_NUMPOOLS] =
+{
+    0,			/* additional PERMANENT pools */
+    5000			/* additional IMAGE pools */
+};
+
+#define MIN_SLOP  50		/* greater than 0 to avoid futile looping */
+
+
+METHODDEF(void *)
+alloc_small (j_common_ptr cinfo, int pool_id, size_t sizeofobject)
+/* Allocate a "small" object */
+{
+    my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
+    small_pool_ptr hdr_ptr, prev_hdr_ptr;
+    char * data_ptr;
+    size_t odd_bytes, min_request, slop;
+
+    /* Check for unsatisfiable request (do now to ensure no overflow below) */
+    if (sizeofobject > (size_t) (MAX_ALLOC_CHUNK-SIZEOF(small_pool_hdr)))
+    {
+        out_of_memory(cinfo, 1);    /* request exceeds malloc's ability */
+    }
+
+    /* Round up the requested size to a multiple of SIZEOF(ALIGN_TYPE) */
+    odd_bytes = sizeofobject % SIZEOF(ALIGN_TYPE);
+    if (odd_bytes > 0)
+    {
+        sizeofobject += SIZEOF(ALIGN_TYPE) - odd_bytes;
+    }
+
+    /* See if space is available in any existing pool */
+    if (pool_id < 0 || pool_id >= JPOOL_NUMPOOLS)
+    {
+        ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id);    /* safety check */
+    }
+    prev_hdr_ptr = NULL;
+    hdr_ptr = mem->small_list[pool_id];
+    while (hdr_ptr != NULL)
+    {
+        if (hdr_ptr->hdr.bytes_left >= sizeofobject)
+        {
+            break;    /* found pool with enough space */
+        }
+        prev_hdr_ptr = hdr_ptr;
+        hdr_ptr = hdr_ptr->hdr.next;
+    }
+
+    /* Time to make a new pool? */
+    if (hdr_ptr == NULL)
+    {
+        /* min_request is what we need now, slop is what will be leftover */
+        min_request = sizeofobject + SIZEOF(small_pool_hdr);
+        if (prev_hdr_ptr == NULL)	/* first pool in class? */
+        {
+            slop = first_pool_slop[pool_id];
+        }
+        else
+        {
+            slop = extra_pool_slop[pool_id];
+        }
+        /* Don't ask for more than MAX_ALLOC_CHUNK */
+        if (slop > (size_t) (MAX_ALLOC_CHUNK-min_request))
+        {
+            slop = (size_t) (MAX_ALLOC_CHUNK-min_request);
+        }
+        /* Try to get space, if fail reduce slop and try again */
+        for (;;)
+        {
+            hdr_ptr = (small_pool_ptr) jpeg_get_small(cinfo, min_request + slop);
+            if (hdr_ptr != NULL)
+            {
+                break;
+            }
+            slop /= 2;
+            if (slop < MIN_SLOP)	/* give up when it gets real small */
+            {
+                out_of_memory(cinfo, 2);    /* jpeg_get_small failed */
+            }
+        }
+        mem->total_space_allocated += min_request + slop;
+        /* Success, initialize the new pool header and add to end of list */
+        hdr_ptr->hdr.next = NULL;
+        hdr_ptr->hdr.bytes_used = 0;
+        hdr_ptr->hdr.bytes_left = sizeofobject + slop;
+        if (prev_hdr_ptr == NULL)	/* first pool in class? */
+        {
+            mem->small_list[pool_id] = hdr_ptr;
+        }
+        else
+        {
+            prev_hdr_ptr->hdr.next = hdr_ptr;
+        }
+    }
+
+    /* OK, allocate the object from the current pool */
+    data_ptr = (char *) (hdr_ptr + 1); /* point to first data byte in pool */
+    data_ptr += hdr_ptr->hdr.bytes_used; /* point to place for object */
+    hdr_ptr->hdr.bytes_used += sizeofobject;
+    hdr_ptr->hdr.bytes_left -= sizeofobject;
+
+    return (void *) data_ptr;
+}
+
+
+/*
+ * Allocation of "large" objects.
+ *
+ * The external semantics of these are the same as "small" objects,
+ * except that FAR pointers are used on 80x86.  However the pool
+ * management heuristics are quite different.  We assume that each
+ * request is large enough that it may as well be passed directly to
+ * jpeg_get_large; the pool management just links everything together
+ * so that we can free it all on demand.
+ * Note: the major use of "large" objects is in JSAMPARRAY and JBLOCKARRAY
+ * structures.  The routines that create these structures (see below)
+ * deliberately bunch rows together to ensure a large request size.
+ */
+
+METHODDEF(void FAR *)
+alloc_large (j_common_ptr cinfo, int pool_id, size_t sizeofobject)
+/* Allocate a "large" object */
+{
+    my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
+    large_pool_ptr hdr_ptr;
+    size_t odd_bytes;
+
+    /* Check for unsatisfiable request (do now to ensure no overflow below) */
+    if (sizeofobject > (size_t) (MAX_ALLOC_CHUNK-SIZEOF(large_pool_hdr)))
+    {
+        out_of_memory(cinfo, 3);    /* request exceeds malloc's ability */
+    }
+
+    /* Round up the requested size to a multiple of SIZEOF(ALIGN_TYPE) */
+    odd_bytes = sizeofobject % SIZEOF(ALIGN_TYPE);
+    if (odd_bytes > 0)
+    {
+        sizeofobject += SIZEOF(ALIGN_TYPE) - odd_bytes;
+    }
+
+    /* Always make a new pool */
+    if (pool_id < 0 || pool_id >= JPOOL_NUMPOOLS)
+    {
+        ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id);    /* safety check */
+    }
+
+    hdr_ptr = (large_pool_ptr) jpeg_get_large(cinfo, sizeofobject +
+              SIZEOF(large_pool_hdr));
+    if (hdr_ptr == NULL)
+    {
+        out_of_memory(cinfo, 4);    /* jpeg_get_large failed */
+    }
+    mem->total_space_allocated += sizeofobject + SIZEOF(large_pool_hdr);
+
+    /* Success, initialize the new pool header and add to list */
+    hdr_ptr->hdr.next = mem->large_list[pool_id];
+    /* We maintain space counts in each pool header for statistical purposes,
+     * even though they are not needed for allocation.
+     */
+    hdr_ptr->hdr.bytes_used = sizeofobject;
+    hdr_ptr->hdr.bytes_left = 0;
+    mem->large_list[pool_id] = hdr_ptr;
+
+    return (void FAR *) (hdr_ptr + 1); /* point to first data byte in pool */
+}
+
+
+/*
+ * Creation of 2-D sample arrays.
+ * The pointers are in near heap, the samples themselves in FAR heap.
+ *
+ * To minimize allocation overhead and to allow I/O of large contiguous
+ * blocks, we allocate the sample rows in groups of as many rows as possible
+ * without exceeding MAX_ALLOC_CHUNK total bytes per allocation request.
+ * NB: the virtual array control routines, later in this file, know about
+ * this chunking of rows.  The rowsperchunk value is left in the mem manager
+ * object so that it can be saved away if this sarray is the workspace for
+ * a virtual array.
+ */
+
+METHODDEF(JSAMPARRAY)
+alloc_sarray (j_common_ptr cinfo, int pool_id,
+              JDIMENSION samplesperrow, JDIMENSION numrows)
+/* Allocate a 2-D sample array */
+{
+    my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
+    JSAMPARRAY result;
+    JSAMPROW workspace;
+    JDIMENSION rowsperchunk, currow, i;
+    long ltemp;
+
+    /* Calculate max # of rows allowed in one allocation chunk */
+    ltemp = (MAX_ALLOC_CHUNK-SIZEOF(large_pool_hdr)) /
+            ((long) samplesperrow * SIZEOF(JSAMPLE));
+    if (ltemp <= 0)
+    {
+        ERREXIT(cinfo, JERR_WIDTH_OVERFLOW);
+    }
+    if (ltemp < (long) numrows)
+    {
+        rowsperchunk = (JDIMENSION) ltemp;
+    }
+    else
+    {
+        rowsperchunk = numrows;
+    }
+    mem->last_rowsperchunk = rowsperchunk;
+
+    /* Get space for row pointers (small object) */
+    result = (JSAMPARRAY) alloc_small(cinfo, pool_id,
+                                      (size_t) (numrows * SIZEOF(JSAMPROW)));
+
+    /* Get the rows themselves (large objects) */
+    currow = 0;
+    while (currow < numrows)
+    {
+        rowsperchunk = MIN(rowsperchunk, numrows - currow);
+        workspace = (JSAMPROW) alloc_large(cinfo, pool_id,
+                                           (size_t) ((size_t) rowsperchunk * (size_t) samplesperrow
+                                                   * SIZEOF(JSAMPLE)));
+        for (i = rowsperchunk; i > 0; i--)
+        {
+            result[currow++] = workspace;
+            workspace += samplesperrow;
+        }
+    }
+
+    return result;
+}
+
+
+/*
+ * Creation of 2-D coefficient-block arrays.
+ * This is essentially the same as the code for sample arrays, above.
+ */
+
+METHODDEF(JBLOCKARRAY)
+alloc_barray (j_common_ptr cinfo, int pool_id,
+              JDIMENSION blocksperrow, JDIMENSION numrows)
+/* Allocate a 2-D coefficient-block array */
+{
+    my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
+    JBLOCKARRAY result;
+    JBLOCKROW workspace;
+    JDIMENSION rowsperchunk, currow, i;
+    long ltemp;
+
+    /* Calculate max # of rows allowed in one allocation chunk */
+    ltemp = (MAX_ALLOC_CHUNK-SIZEOF(large_pool_hdr)) /
+            ((long) blocksperrow * SIZEOF(JBLOCK));
+    if (ltemp <= 0)
+    {
+        ERREXIT(cinfo, JERR_WIDTH_OVERFLOW);
+    }
+    if (ltemp < (long) numrows)
+    {
+        rowsperchunk = (JDIMENSION) ltemp;
+    }
+    else
+    {
+        rowsperchunk = numrows;
+    }
+    mem->last_rowsperchunk = rowsperchunk;
+
+    /* Get space for row pointers (small object) */
+    result = (JBLOCKARRAY) alloc_small(cinfo, pool_id,
+                                       (size_t) (numrows * SIZEOF(JBLOCKROW)));
+
+    /* Get the rows themselves (large objects) */
+    currow = 0;
+    while (currow < numrows)
+    {
+        rowsperchunk = MIN(rowsperchunk, numrows - currow);
+        workspace = (JBLOCKROW) alloc_large(cinfo, pool_id,
+                                            (size_t) ((size_t) rowsperchunk * (size_t) blocksperrow
+                                                    * SIZEOF(JBLOCK)));
+        for (i = rowsperchunk; i > 0; i--)
+        {
+            result[currow++] = workspace;
+            workspace += blocksperrow;
+        }
+    }
+
+    return result;
+}
+
+
+/*
+ * About virtual array management:
+ *
+ * The above "normal" array routines are only used to allocate strip buffers
+ * (as wide as the image, but just a few rows high).  Full-image-sized buffers
+ * are handled as "virtual" arrays.  The array is still accessed a strip at a
+ * time, but the memory manager must save the whole array for repeated
+ * accesses.  The intended implementation is that there is a strip buffer in
+ * memory (as high as is possible given the desired memory limit), plus a
+ * backing file that holds the rest of the array.
+ *
+ * The request_virt_array routines are told the total size of the image and
+ * the maximum number of rows that will be accessed at once.  The in-memory
+ * buffer must be at least as large as the maxaccess value.
+ *
+ * The request routines create control blocks but not the in-memory buffers.
+ * That is postponed until realize_virt_arrays is called.  At that time the
+ * total amount of space needed is known (approximately, anyway), so free
+ * memory can be divided up fairly.
+ *
+ * The access_virt_array routines are responsible for making a specific strip
+ * area accessible (after reading or writing the backing file, if necessary).
+ * Note that the access routines are told whether the caller intends to modify
+ * the accessed strip; during a read-only pass this saves having to rewrite
+ * data to disk.  The access routines are also responsible for pre-zeroing
+ * any newly accessed rows, if pre-zeroing was requested.
+ *
+ * In current usage, the access requests are usually for nonoverlapping
+ * strips; that is, successive access start_row numbers differ by exactly
+ * num_rows = maxaccess.  This means we can get good performance with simple
+ * buffer dump/reload logic, by making the in-memory buffer be a multiple
+ * of the access height; then there will never be accesses across bufferload
+ * boundaries.  The code will still work with overlapping access requests,
+ * but it doesn't handle bufferload overlaps very efficiently.
+ */
+
+
+METHODDEF(jvirt_sarray_ptr)
+request_virt_sarray (j_common_ptr cinfo, int pool_id, boolean pre_zero,
+                     JDIMENSION samplesperrow, JDIMENSION numrows,
+                     JDIMENSION maxaccess)
+/* Request a virtual 2-D sample array */
+{
+    my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
+    jvirt_sarray_ptr result;
+
+    /* Only IMAGE-lifetime virtual arrays are currently supported */
+    if (pool_id != JPOOL_IMAGE)
+    {
+        ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id);    /* safety check */
+    }
+
+    /* get control block */
+    result = (jvirt_sarray_ptr) alloc_small(cinfo, pool_id,
+                                            SIZEOF(struct jvirt_sarray_control));
+
+    result->mem_buffer = NULL;	/* marks array not yet realized */
+    result->rows_in_array = numrows;
+    result->samplesperrow = samplesperrow;
+    result->maxaccess = maxaccess;
+    result->pre_zero = pre_zero;
+    result->b_s_open = FALSE;	/* no associated backing-store object */
+    result->next = mem->virt_sarray_list; /* add to list of virtual arrays */
+    mem->virt_sarray_list = result;
+
+    return result;
+}
+
+
+METHODDEF(jvirt_barray_ptr)
+request_virt_barray (j_common_ptr cinfo, int pool_id, boolean pre_zero,
+                     JDIMENSION blocksperrow, JDIMENSION numrows,
+                     JDIMENSION maxaccess)
+/* Request a virtual 2-D coefficient-block array */
+{
+    my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
+    jvirt_barray_ptr result;
+
+    /* Only IMAGE-lifetime virtual arrays are currently supported */
+    if (pool_id != JPOOL_IMAGE)
+    {
+        ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id);    /* safety check */
+    }
+
+    /* get control block */
+    result = (jvirt_barray_ptr) alloc_small(cinfo, pool_id,
+                                            SIZEOF(struct jvirt_barray_control));
+
+    result->mem_buffer = NULL;	/* marks array not yet realized */
+    result->rows_in_array = numrows;
+    result->blocksperrow = blocksperrow;
+    result->maxaccess = maxaccess;
+    result->pre_zero = pre_zero;
+    result->b_s_open = FALSE;	/* no associated backing-store object */
+    result->next = mem->virt_barray_list; /* add to list of virtual arrays */
+    mem->virt_barray_list = result;
+
+    return result;
+}
+
+
+METHODDEF(void)
+realize_virt_arrays (j_common_ptr cinfo)
+/* Allocate the in-memory buffers for any unrealized virtual arrays */
+{
+    my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
+    long space_per_minheight, maximum_space, avail_mem;
+    long minheights, max_minheights;
+    jvirt_sarray_ptr sptr;
+    jvirt_barray_ptr bptr;
+
+    /* Compute the minimum space needed (maxaccess rows in each buffer)
+     * and the maximum space needed (full image height in each buffer).
+     * These may be of use to the system-dependent jpeg_mem_available routine.
+     */
+    space_per_minheight = 0;
+    maximum_space = 0;
+    for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next)
+    {
+        if (sptr->mem_buffer == NULL)   /* if not realized yet */
+        {
+            space_per_minheight += (long) sptr->maxaccess *
+                                   (long) sptr->samplesperrow * SIZEOF(JSAMPLE);
+            maximum_space += (long) sptr->rows_in_array *
+                             (long) sptr->samplesperrow * SIZEOF(JSAMPLE);
+        }
+    }
+    for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next)
+    {
+        if (bptr->mem_buffer == NULL)   /* if not realized yet */
+        {
+            space_per_minheight += (long) bptr->maxaccess *
+                                   (long) bptr->blocksperrow * SIZEOF(JBLOCK);
+            maximum_space += (long) bptr->rows_in_array *
+                             (long) bptr->blocksperrow * SIZEOF(JBLOCK);
+        }
+    }
+
+    if (space_per_minheight <= 0)
+    {
+        return;    /* no unrealized arrays, no work */
+    }
+
+    /* Determine amount of memory to actually use; this is system-dependent. */
+    avail_mem = jpeg_mem_available(cinfo, space_per_minheight, maximum_space,
+                                   mem->total_space_allocated);
+
+    /* If the maximum space needed is available, make all the buffers full
+     * height; otherwise parcel it out with the same number of minheights
+     * in each buffer.
+     */
+    if (avail_mem >= maximum_space)
+    {
+        max_minheights = 1000000000L;
+    }
+    else
+    {
+        max_minheights = avail_mem / space_per_minheight;
+        /* If there doesn't seem to be enough space, try to get the minimum
+         * anyway.  This allows a "stub" implementation of jpeg_mem_available().
+         */
+        if (max_minheights <= 0)
+        {
+            max_minheights = 1;
+        }
+    }
+
+    /* Allocate the in-memory buffers and initialize backing store as needed. */
+
+    for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next)
+    {
+        if (sptr->mem_buffer == NULL)   /* if not realized yet */
+        {
+            minheights = ((long) sptr->rows_in_array - 1L) / sptr->maxaccess + 1L;
+            if (minheights <= max_minheights)
+            {
+                /* This buffer fits in memory */
+                sptr->rows_in_mem = sptr->rows_in_array;
+            }
+            else
+            {
+                /* It doesn't fit in memory, create backing store. */
+                sptr->rows_in_mem = (JDIMENSION) (max_minheights * sptr->maxaccess);
+                jpeg_open_backing_store(cinfo, & sptr->b_s_info,
+                                        (long) sptr->rows_in_array *
+                                        (long) sptr->samplesperrow *
+                                        (long) SIZEOF(JSAMPLE));
+                sptr->b_s_open = TRUE;
+            }
+            sptr->mem_buffer = alloc_sarray(cinfo, JPOOL_IMAGE,
+                                            sptr->samplesperrow, sptr->rows_in_mem);
+            sptr->rowsperchunk = mem->last_rowsperchunk;
+            sptr->cur_start_row = 0;
+            sptr->first_undef_row = 0;
+            sptr->dirty = FALSE;
+        }
+    }
+
+    for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next)
+    {
+        if (bptr->mem_buffer == NULL)   /* if not realized yet */
+        {
+            minheights = ((long) bptr->rows_in_array - 1L) / bptr->maxaccess + 1L;
+            if (minheights <= max_minheights)
+            {
+                /* This buffer fits in memory */
+                bptr->rows_in_mem = bptr->rows_in_array;
+            }
+            else
+            {
+                /* It doesn't fit in memory, create backing store. */
+                bptr->rows_in_mem = (JDIMENSION) (max_minheights * bptr->maxaccess);
+                jpeg_open_backing_store(cinfo, & bptr->b_s_info,
+                                        (long) bptr->rows_in_array *
+                                        (long) bptr->blocksperrow *
+                                        (long) SIZEOF(JBLOCK));
+                bptr->b_s_open = TRUE;
+            }
+            bptr->mem_buffer = alloc_barray(cinfo, JPOOL_IMAGE,
+                                            bptr->blocksperrow, bptr->rows_in_mem);
+            bptr->rowsperchunk = mem->last_rowsperchunk;
+            bptr->cur_start_row = 0;
+            bptr->first_undef_row = 0;
+            bptr->dirty = FALSE;
+        }
+    }
+}
+
+
+LOCAL(void)
+do_sarray_io (j_common_ptr cinfo, jvirt_sarray_ptr ptr, boolean writing)
+/* Do backing store read or write of a virtual sample array */
+{
+    long bytesperrow, file_offset, byte_count, rows, thisrow, i;
+
+    bytesperrow = (long) ptr->samplesperrow * SIZEOF(JSAMPLE);
+    file_offset = ptr->cur_start_row * bytesperrow;
+    /* Loop to read or write each allocation chunk in mem_buffer */
+    for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk)
+    {
+        /* One chunk, but check for short chunk at end of buffer */
+        rows = MIN((long) ptr->rowsperchunk, (long) ptr->rows_in_mem - i);
+        /* Transfer no more than is currently defined */
+        thisrow = (long) ptr->cur_start_row + i;
+        rows = MIN(rows, (long) ptr->first_undef_row - thisrow);
+        /* Transfer no more than fits in file */
+        rows = MIN(rows, (long) ptr->rows_in_array - thisrow);
+        if (rows <= 0)		/* this chunk might be past end of file! */
+        {
+            break;
+        }
+        byte_count = rows * bytesperrow;
+        if (writing)
+            (*ptr->b_s_info.write_backing_store) (cinfo, & ptr->b_s_info,
+                                                  (void FAR *) ptr->mem_buffer[i],
+                                                  file_offset, byte_count);
+        else
+            (*ptr->b_s_info.read_backing_store) (cinfo, & ptr->b_s_info,
+                                                 (void FAR *) ptr->mem_buffer[i],
+                                                 file_offset, byte_count);
+        file_offset += byte_count;
+    }
+}
+
+
+LOCAL(void)
+do_barray_io (j_common_ptr cinfo, jvirt_barray_ptr ptr, boolean writing)
+/* Do backing store read or write of a virtual coefficient-block array */
+{
+    long bytesperrow, file_offset, byte_count, rows, thisrow, i;
+
+    bytesperrow = (long) ptr->blocksperrow * SIZEOF(JBLOCK);
+    file_offset = ptr->cur_start_row * bytesperrow;
+    /* Loop to read or write each allocation chunk in mem_buffer */
+    for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk)
+    {
+        /* One chunk, but check for short chunk at end of buffer */
+        rows = MIN((long) ptr->rowsperchunk, (long) ptr->rows_in_mem - i);
+        /* Transfer no more than is currently defined */
+        thisrow = (long) ptr->cur_start_row + i;
+        rows = MIN(rows, (long) ptr->first_undef_row - thisrow);
+        /* Transfer no more than fits in file */
+        rows = MIN(rows, (long) ptr->rows_in_array - thisrow);
+        if (rows <= 0)		/* this chunk might be past end of file! */
+        {
+            break;
+        }
+        byte_count = rows * bytesperrow;
+        if (writing)
+            (*ptr->b_s_info.write_backing_store) (cinfo, & ptr->b_s_info,
+                                                  (void FAR *) ptr->mem_buffer[i],
+                                                  file_offset, byte_count);
+        else
+            (*ptr->b_s_info.read_backing_store) (cinfo, & ptr->b_s_info,
+                                                 (void FAR *) ptr->mem_buffer[i],
+                                                 file_offset, byte_count);
+        file_offset += byte_count;
+    }
+}
+
+
+METHODDEF(JSAMPARRAY)
+access_virt_sarray (j_common_ptr cinfo, jvirt_sarray_ptr ptr,
+                    JDIMENSION start_row, JDIMENSION num_rows,
+                    boolean writable)
+/* Access the part of a virtual sample array starting at start_row */
+/* and extending for num_rows rows.  writable is true if  */
+/* caller intends to modify the accessed area. */
+{
+    JDIMENSION end_row = start_row + num_rows;
+    JDIMENSION undef_row;
+
+    /* debugging check */
+    if (end_row > ptr->rows_in_array || num_rows > ptr->maxaccess ||
+            ptr->mem_buffer == NULL)
+    {
+        ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
+    }
+
+    /* Make the desired part of the virtual array accessible */
+    if (start_row < ptr->cur_start_row ||
+            end_row > ptr->cur_start_row+ptr->rows_in_mem)
+    {
+        if (! ptr->b_s_open)
+        {
+            ERREXIT(cinfo, JERR_VIRTUAL_BUG);
+        }
+        /* Flush old buffer contents if necessary */
+        if (ptr->dirty)
+        {
+            do_sarray_io(cinfo, ptr, TRUE);
+            ptr->dirty = FALSE;
+        }
+        /* Decide what part of virtual array to access.
+         * Algorithm: if target address > current window, assume forward scan,
+         * load starting at target address.  If target address < current window,
+         * assume backward scan, load so that target area is top of window.
+         * Note that when switching from forward write to forward read, will have
+         * start_row = 0, so the limiting case applies and we load from 0 anyway.
+         */
+        if (start_row > ptr->cur_start_row)
+        {
+            ptr->cur_start_row = start_row;
+        }
+        else
+        {
+            /* use long arithmetic here to avoid overflow & unsigned problems */
+            long ltemp;
+
+            ltemp = (long) end_row - (long) ptr->rows_in_mem;
+            if (ltemp < 0)
+            {
+                ltemp = 0;    /* don't fall off front end of file */
+            }
+            ptr->cur_start_row = (JDIMENSION) ltemp;
+        }
+        /* Read in the selected part of the array.
+         * During the initial write pass, we will do no actual read
+         * because the selected part is all undefined.
+         */
+        do_sarray_io(cinfo, ptr, FALSE);
+    }
+    /* Ensure the accessed part of the array is defined; prezero if needed.
+     * To improve locality of access, we only prezero the part of the array
+     * that the caller is about to access, not the entire in-memory array.
+     */
+    if (ptr->first_undef_row < end_row)
+    {
+        if (ptr->first_undef_row < start_row)
+        {
+            if (writable)		/* writer skipped over a section of array */
+            {
+                ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
+            }
+            undef_row = start_row;	/* but reader is allowed to read ahead */
+        }
+        else
+        {
+            undef_row = ptr->first_undef_row;
+        }
+        if (writable)
+        {
+            ptr->first_undef_row = end_row;
+        }
+        if (ptr->pre_zero)
+        {
+            size_t bytesperrow = (size_t) ptr->samplesperrow * SIZEOF(JSAMPLE);
+            undef_row -= ptr->cur_start_row; /* make indexes relative to buffer */
+            end_row -= ptr->cur_start_row;
+            while (undef_row < end_row)
+            {
+                jzero_far((void FAR *) ptr->mem_buffer[undef_row], bytesperrow);
+                undef_row++;
+            }
+        }
+        else
+        {
+            if (! writable)		/* reader looking at undefined data */
+            {
+                ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
+            }
+        }
+    }
+    /* Flag the buffer dirty if caller will write in it */
+    if (writable)
+    {
+        ptr->dirty = TRUE;
+    }
+    /* Return address of proper part of the buffer */
+    return ptr->mem_buffer + (start_row - ptr->cur_start_row);
+}
+
+
+METHODDEF(JBLOCKARRAY)
+access_virt_barray (j_common_ptr cinfo, jvirt_barray_ptr ptr,
+                    JDIMENSION start_row, JDIMENSION num_rows,
+                    boolean writable)
+/* Access the part of a virtual block array starting at start_row */
+/* and extending for num_rows rows.  writable is true if  */
+/* caller intends to modify the accessed area. */
+{
+    JDIMENSION end_row = start_row + num_rows;
+    JDIMENSION undef_row;
+
+    /* debugging check */
+    if (end_row > ptr->rows_in_array || num_rows > ptr->maxaccess ||
+            ptr->mem_buffer == NULL)
+    {
+        ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
+    }
+
+    /* Make the desired part of the virtual array accessible */
+    if (start_row < ptr->cur_start_row ||
+            end_row > ptr->cur_start_row+ptr->rows_in_mem)
+    {
+        if (! ptr->b_s_open)
+        {
+            ERREXIT(cinfo, JERR_VIRTUAL_BUG);
+        }
+        /* Flush old buffer contents if necessary */
+        if (ptr->dirty)
+        {
+            do_barray_io(cinfo, ptr, TRUE);
+            ptr->dirty = FALSE;
+        }
+        /* Decide what part of virtual array to access.
+         * Algorithm: if target address > current window, assume forward scan,
+         * load starting at target address.  If target address < current window,
+         * assume backward scan, load so that target area is top of window.
+         * Note that when switching from forward write to forward read, will have
+         * start_row = 0, so the limiting case applies and we load from 0 anyway.
+         */
+        if (start_row > ptr->cur_start_row)
+        {
+            ptr->cur_start_row = start_row;
+        }
+        else
+        {
+            /* use long arithmetic here to avoid overflow & unsigned problems */
+            long ltemp;
+
+            ltemp = (long) end_row - (long) ptr->rows_in_mem;
+            if (ltemp < 0)
+            {
+                ltemp = 0;    /* don't fall off front end of file */
+            }
+            ptr->cur_start_row = (JDIMENSION) ltemp;
+        }
+        /* Read in the selected part of the array.
+         * During the initial write pass, we will do no actual read
+         * because the selected part is all undefined.
+         */
+        do_barray_io(cinfo, ptr, FALSE);
+    }
+    /* Ensure the accessed part of the array is defined; prezero if needed.
+     * To improve locality of access, we only prezero the part of the array
+     * that the caller is about to access, not the entire in-memory array.
+     */
+    if (ptr->first_undef_row < end_row)
+    {
+        if (ptr->first_undef_row < start_row)
+        {
+            if (writable)		/* writer skipped over a section of array */
+            {
+                ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
+            }
+            undef_row = start_row;	/* but reader is allowed to read ahead */
+        }
+        else
+        {
+            undef_row = ptr->first_undef_row;
+        }
+        if (writable)
+        {
+            ptr->first_undef_row = end_row;
+        }
+        if (ptr->pre_zero)
+        {
+            size_t bytesperrow = (size_t) ptr->blocksperrow * SIZEOF(JBLOCK);
+            undef_row -= ptr->cur_start_row; /* make indexes relative to buffer */
+            end_row -= ptr->cur_start_row;
+            while (undef_row < end_row)
+            {
+                jzero_far((void FAR *) ptr->mem_buffer[undef_row], bytesperrow);
+                undef_row++;
+            }
+        }
+        else
+        {
+            if (! writable)		/* reader looking at undefined data */
+            {
+                ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
+            }
+        }
+    }
+    /* Flag the buffer dirty if caller will write in it */
+    if (writable)
+    {
+        ptr->dirty = TRUE;
+    }
+    /* Return address of proper part of the buffer */
+    return ptr->mem_buffer + (start_row - ptr->cur_start_row);
+}
+
+
+/*
+ * Release all objects belonging to a specified pool.
+ */
+
+METHODDEF(void)
+free_pool (j_common_ptr cinfo, int pool_id)
+{
+    my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
+    small_pool_ptr shdr_ptr;
+    large_pool_ptr lhdr_ptr;
+    size_t space_freed;
+
+    if (pool_id < 0 || pool_id >= JPOOL_NUMPOOLS)
+    {
+        ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id);    /* safety check */
+    }
+
+#ifdef MEM_STATS
+    if (cinfo->err->trace_level > 1)
+    {
+        print_mem_stats(cinfo, pool_id);    /* print pool's memory usage statistics */
+    }
+#endif
+
+    /* If freeing IMAGE pool, close any virtual arrays first */
+    if (pool_id == JPOOL_IMAGE)
+    {
+        jvirt_sarray_ptr sptr;
+        jvirt_barray_ptr bptr;
+
+        for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next)
+        {
+            if (sptr->b_s_open)  	/* there may be no backing store */
+            {
+                sptr->b_s_open = FALSE;	/* prevent recursive close if error */
+                (*sptr->b_s_info.close_backing_store) (cinfo, & sptr->b_s_info);
+            }
+        }
+        mem->virt_sarray_list = NULL;
+        for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next)
+        {
+            if (bptr->b_s_open)  	/* there may be no backing store */
+            {
+                bptr->b_s_open = FALSE;	/* prevent recursive close if error */
+                (*bptr->b_s_info.close_backing_store) (cinfo, & bptr->b_s_info);
+            }
+        }
+        mem->virt_barray_list = NULL;
+    }
+
+    /* Release large objects */
+    lhdr_ptr = mem->large_list[pool_id];
+    mem->large_list[pool_id] = NULL;
+
+    while (lhdr_ptr != NULL)
+    {
+        large_pool_ptr next_lhdr_ptr = lhdr_ptr->hdr.next;
+        space_freed = lhdr_ptr->hdr.bytes_used +
+                      lhdr_ptr->hdr.bytes_left +
+                      SIZEOF(large_pool_hdr);
+        jpeg_free_large(cinfo, (void FAR *) lhdr_ptr, space_freed);
+        mem->total_space_allocated -= space_freed;
+        lhdr_ptr = next_lhdr_ptr;
+    }
+
+    /* Release small objects */
+    shdr_ptr = mem->small_list[pool_id];
+    mem->small_list[pool_id] = NULL;
+
+    while (shdr_ptr != NULL)
+    {
+        small_pool_ptr next_shdr_ptr = shdr_ptr->hdr.next;
+        space_freed = shdr_ptr->hdr.bytes_used +
+                      shdr_ptr->hdr.bytes_left +
+                      SIZEOF(small_pool_hdr);
+        jpeg_free_small(cinfo, (void *) shdr_ptr, space_freed);
+        mem->total_space_allocated -= space_freed;
+        shdr_ptr = next_shdr_ptr;
+    }
+}
+
+
+/*
+ * Close up shop entirely.
+ * Note that this cannot be called unless cinfo->mem is non-NULL.
+ */
+
+METHODDEF(void)
+self_destruct (j_common_ptr cinfo)
+{
+    int pool;
+
+    /* Close all backing store, release all memory.
+     * Releasing pools in reverse order might help avoid fragmentation
+     * with some (brain-damaged) malloc libraries.
+     */
+    for (pool = JPOOL_NUMPOOLS-1; pool >= JPOOL_PERMANENT; pool--)
+    {
+        free_pool(cinfo, pool);
+    }
+
+    /* Release the memory manager control block too. */
+    jpeg_free_small(cinfo, (void *) cinfo->mem, SIZEOF(my_memory_mgr));
+    cinfo->mem = NULL;		/* ensures I will be called only once */
+
+    jpeg_mem_term(cinfo);		/* system-dependent cleanup */
+}
+
+
+/*
+ * Memory manager initialization.
+ * When this is called, only the error manager pointer is valid in cinfo!
+ */
+
+GLOBAL(void)
+jinit_memory_mgr (j_common_ptr cinfo)
+{
+    my_mem_ptr mem;
+    long max_to_use;
+    int pool;
+    size_t test_mac;
+
+    cinfo->mem = NULL;		/* for safety if init fails */
+
+    /* Check for configuration errors.
+     * SIZEOF(ALIGN_TYPE) should be a power of 2; otherwise, it probably
+     * doesn't reflect any real hardware alignment requirement.
+     * The test is a little tricky: for X>0, X and X-1 have no one-bits
+     * in common if and only if X is a power of 2, ie has only one one-bit.
+     * Some compilers may give an "unreachable code" warning here; ignore it.
+     */
+    if ((SIZEOF(ALIGN_TYPE) & (SIZEOF(ALIGN_TYPE)-1)) != 0)
+    {
+        ERREXIT(cinfo, JERR_BAD_ALIGN_TYPE);
+    }
+    /* MAX_ALLOC_CHUNK must be representable as type size_t, and must be
+     * a multiple of SIZEOF(ALIGN_TYPE).
+     * Again, an "unreachable code" warning may be ignored here.
+     * But a "constant too large" warning means you need to fix MAX_ALLOC_CHUNK.
+     */
+    test_mac = (size_t) MAX_ALLOC_CHUNK;
+    if ((long) test_mac != MAX_ALLOC_CHUNK || (MAX_ALLOC_CHUNK % SIZEOF(ALIGN_TYPE)) != 0)
+    {
+        ERREXIT(cinfo, JERR_BAD_ALLOC_CHUNK);
+    }
+
+    max_to_use = jpeg_mem_init(cinfo); /* system-dependent initialization */
+
+    /* Attempt to allocate memory manager's control block */
+    mem = (my_mem_ptr) jpeg_get_small(cinfo, SIZEOF(my_memory_mgr));
+
+    if (mem == NULL)
+    {
+        jpeg_mem_term(cinfo);	/* system-dependent cleanup */
+        ERREXIT1(cinfo, JERR_OUT_OF_MEMORY, 0);
+    }
+
+    /* OK, fill in the method pointers */
+    mem->pub.alloc_small = alloc_small;
+    mem->pub.alloc_large = alloc_large;
+    mem->pub.alloc_sarray = alloc_sarray;
+    mem->pub.alloc_barray = alloc_barray;
+    mem->pub.request_virt_sarray = request_virt_sarray;
+    mem->pub.request_virt_barray = request_virt_barray;
+    mem->pub.realize_virt_arrays = realize_virt_arrays;
+    mem->pub.access_virt_sarray = access_virt_sarray;
+    mem->pub.access_virt_barray = access_virt_barray;
+    mem->pub.free_pool = free_pool;
+    mem->pub.self_destruct = self_destruct;
+
+    /* Make MAX_ALLOC_CHUNK accessible to other modules */
+    mem->pub.max_alloc_chunk = MAX_ALLOC_CHUNK;
+
+    /* Initialize working state */
+    mem->pub.max_memory_to_use = max_to_use;
+
+    for (pool = JPOOL_NUMPOOLS-1; pool >= JPOOL_PERMANENT; pool--)
+    {
+        mem->small_list[pool] = NULL;
+        mem->large_list[pool] = NULL;
+    }
+    mem->virt_sarray_list = NULL;
+    mem->virt_barray_list = NULL;
+
+    mem->total_space_allocated = SIZEOF(my_memory_mgr);
+
+    /* Declare ourselves open for business */
+    cinfo->mem = & mem->pub;
+
+    /* Check for an environment variable JPEGMEM; if found, override the
+     * default max_memory setting from jpeg_mem_init.  Note that the
+     * surrounding application may again override this value.
+     * If your system doesn't support getenv(), define NO_GETENV to disable
+     * this feature.
+     */
+#ifndef NO_GETENV
+    {
+        char * memenv;
+
+        if ((memenv = getenv("JPEGMEM")) != NULL)
+        {
+            char ch = 'x';
+
+            if (sscanf(memenv, "%ld%c", &max_to_use, &ch) > 0)
+            {
+                if (ch == 'm' || ch == 'M')
+                {
+                    max_to_use *= 1000L;
+                }
+                mem->pub.max_memory_to_use = max_to_use * 1000L;
+            }
+        }
+    }
+#endif
+
+}
diff -NEaurb neo/renderer/jpeg-8c/jmemnobs.c neo/renderer/jpeg-8c/jmemnobs.c
--- neo/renderer/jpeg-8c/jmemnobs.c	1970-01-01 00:00:00 +0000
+++ neo/renderer/jpeg-8c/jmemnobs.c	2012-11-17 01:20:40 +0000
@@ -0,0 +1,109 @@
+/*
+ * jmemnobs.c
+ *
+ * Copyright (C) 1992-1996, Thomas G. Lane.
+ * This file is part of the Independent JPEG Group's software.
+ * For conditions of distribution and use, see the accompanying README file.
+ *
+ * This file provides a really simple implementation of the system-
+ * dependent portion of the JPEG memory manager.  This implementation
+ * assumes that no backing-store files are needed: all required space
+ * can be obtained from malloc().
+ * This is very portable in the sense that it'll compile on almost anything,
+ * but you'd better have lots of main memory (or virtual memory) if you want
+ * to process big images.
+ * Note that the max_memory_to_use option is ignored by this implementation.
+ */
+
+#define JPEG_INTERNALS
+#include "jinclude.h"
+#include "jpeglib.h"
+#include "jmemsys.h"		/* import the system-dependent declarations */
+
+#ifndef HAVE_STDLIB_H		/* <stdlib.h> should declare malloc(),free() */
+extern void * malloc JPP((size_t size));
+extern void free JPP((void *ptr));
+#endif
+
+
+/*
+ * Memory allocation and freeing are controlled by the regular library
+ * routines malloc() and free().
+ */
+
+GLOBAL(void *)
+jpeg_get_small (j_common_ptr cinfo, size_t sizeofobject)
+{
+    return (void *) malloc(sizeofobject);
+}
+
+GLOBAL(void)
+jpeg_free_small (j_common_ptr cinfo, void * object, size_t sizeofobject)
+{
+    free(object);
+}
+
+
+/*
+ * "Large" objects are treated the same as "small" ones.
+ * NB: although we include FAR keywords in the routine declarations,
+ * this file won't actually work in 80x86 small/medium model; at least,
+ * you probably won't be able to process useful-size images in only 64KB.
+ */
+
+GLOBAL(void FAR *)
+jpeg_get_large (j_common_ptr cinfo, size_t sizeofobject)
+{
+    return (void FAR *) malloc(sizeofobject);
+}
+
+GLOBAL(void)
+jpeg_free_large (j_common_ptr cinfo, void FAR * object, size_t sizeofobject)
+{
+    free(object);
+}
+
+
+/*
+ * This routine computes the total memory space available for allocation.
+ * Here we always say, "we got all you want bud!"
+ */
+
+GLOBAL(long)
+jpeg_mem_available (j_common_ptr cinfo, long min_bytes_needed,
+                    long max_bytes_needed, long already_allocated)
+{
+    return max_bytes_needed;
+}
+
+
+/*
+ * Backing store (temporary file) management.
+ * Since jpeg_mem_available always promised the moon,
+ * this should never be called and we can just error out.
+ */
+
+GLOBAL(void)
+jpeg_open_backing_store (j_common_ptr cinfo, backing_store_ptr info,
+                         long total_bytes_needed)
+{
+    ERREXIT(cinfo, JERR_NO_BACKING_STORE);
+}
+
+
+/*
+ * These routines take care of any system-dependent initialization and
+ * cleanup required.  Here, there isn't any.
+ */
+
+GLOBAL(long)
+jpeg_mem_init (j_common_ptr cinfo)
+{
+    return 0;			/* just set max_memory_to_use to 0 */
+}
+
+GLOBAL(void)
+jpeg_mem_term (j_common_ptr cinfo)
+{
+    /* no work */
+}
diff -NEaurb neo/renderer/jpeg-8c/jmemsys.h neo/renderer/jpeg-8c/jmemsys.h
--- neo/renderer/jpeg-8c/jmemsys.h	1970-01-01 00:00:00 +0000
+++ neo/renderer/jpeg-8c/jmemsys.h	2013-08-11 00:20:45 +0000
@@ -0,0 +1,200 @@
+/*
+ * jmemsys.h
+ *
+ * Copyright (C) 1992-1997, Thomas G. Lane.
+ * This file is part of the Independent JPEG Group's software.
+ * For conditions of distribution and use, see the accompanying README file.
+ *
+ * This include file defines the interface between the system-independent
+ * and system-dependent portions of the JPEG memory manager.  No other
+ * modules need include it.  (The system-independent portion is jmemmgr.c;
+ * there are several different versions of the system-dependent portion.)
+ *
+ * This file works as-is for the system-dependent memory managers supplied
+ * in the IJG distribution.  You may need to modify it if you write a
+ * custom memory manager.  If system-dependent changes are needed in
+ * this file, the best method is to #ifdef them based on a configuration
+ * symbol supplied in jconfig.h, as we have done with USE_MSDOS_MEMMGR
+ * and USE_MAC_MEMMGR.
+ */
+
+
+/* Short forms of external names for systems with brain-damaged linkers. */
+
+#ifdef NEED_SHORT_EXTERNAL_NAMES
+#define jpeg_get_small		jGetSmall
+#define jpeg_free_small		jFreeSmall
+#define jpeg_get_large		jGetLarge
+#define jpeg_free_large		jFreeLarge
+#define jpeg_mem_available	jMemAvail
+#define jpeg_open_backing_store	jOpenBackStore
+#define jpeg_mem_init		jMemInit
+#define jpeg_mem_term		jMemTerm
+#endif /* NEED_SHORT_EXTERNAL_NAMES */
+
+
+/*
+ * These two functions are used to allocate and release small chunks of
+ * memory.  (Typically the total amount requested through jpeg_get_small is
+ * no more than 20K or so; this will be requested in chunks of a few K each.)
+ * Behavior should be the same as for the standard library functions malloc
+ * and free; in particular, jpeg_get_small must return NULL on failure.
+ * On most systems, these ARE malloc and free.  jpeg_free_small is passed the
+ * size of the object being freed, just in case it's needed.
+ * On an 80x86 machine using small-data memory model, these manage near heap.
+ */
+
+EXTERN(void *) jpeg_get_small JPP((j_common_ptr cinfo, size_t sizeofobject));
+EXTERN(void) jpeg_free_small JPP((j_common_ptr cinfo, void * object,
+                                  size_t sizeofobject));
+
+/*
+ * These two functions are used to allocate and release large chunks of
+ * memory (up to the total free space designated by jpeg_mem_available).
+ * The interface is the same as above, except that on an 80x86 machine,
+ * far pointers are used.  On most other machines these are identical to
+ * the jpeg_get/free_small routines; but we keep them separate anyway,
+ * in case a different allocation strategy is desirable for large chunks.
+ */
+
+EXTERN(void FAR *) jpeg_get_large JPP((j_common_ptr cinfo,
+                                       size_t sizeofobject));
+EXTERN(void) jpeg_free_large JPP((j_common_ptr cinfo, void FAR * object,
+                                  size_t sizeofobject));
+
+/*
+ * The macro MAX_ALLOC_CHUNK designates the maximum number of bytes that may
+ * be requested in a single call to jpeg_get_large (and jpeg_get_small for that
+ * matter, but that case should never come into play).  This macro is needed
+ * to model the 64Kb-segment-size limit of far addressing on 80x86 machines.
+ * On those machines, we expect that jconfig.h will provide a proper value.
+ * On machines with 32-bit flat address spaces, any large constant may be used.
+ *
+ * NB: jmemmgr.c expects that MAX_ALLOC_CHUNK will be representable as type
+ * size_t and will be a multiple of sizeof(align_type).
+ */
+
+#ifndef MAX_ALLOC_CHUNK		/* may be overridden in jconfig.h */
+#define MAX_ALLOC_CHUNK  1000000000L
+#endif
+
+/*
+ * This routine computes the total space still available for allocation by
+ * jpeg_get_large.  If more space than this is needed, backing store will be
+ * used.  NOTE: any memory already allocated must not be counted.
+ *
+ * There is a minimum space requirement, corresponding to the minimum
+ * feasible buffer sizes; jmemmgr.c will request that much space even if
+ * jpeg_mem_available returns zero.  The maximum space needed, enough to hold
+ * all working storage in memory, is also passed in case it is useful.
+ * Finally, the total space already allocated is passed.  If no better
+ * method is available, cinfo->mem->max_memory_to_use - already_allocated
+ * is often a suitable calculation.
+ *
+ * It is OK for jpeg_mem_available to underestimate the space available
+ * (that'll just lead to more backing-store access than is really necessary).
+ * However, an overestimate will lead to failure.  Hence it's wise to subtract
+ * a slop factor from the true available space.  5% should be enough.
+ *
+ * On machines with lots of virtual memory, any large constant may be returned.
+ * Conversely, zero may be returned to always use the minimum amount of memory.
+ */
+
+EXTERN(long) jpeg_mem_available JPP((j_common_ptr cinfo,
+                                     long min_bytes_needed,
+                                     long max_bytes_needed,
+                                     long already_allocated));
+
+
+/*
+ * This structure holds whatever state is needed to access a single
+ * backing-store object.  The read/write/close method pointers are called
+ * by jmemmgr.c to manipulate the backing-store object; all other fields
+ * are private to the system-dependent backing store routines.
+ */
+
+#define TEMP_NAME_LENGTH   64	/* max length of a temporary file's name */
+
+
+#ifdef USE_MSDOS_MEMMGR		/* DOS-specific junk */
+
+typedef unsigned short XMSH;	/* type of extended-memory handles */
+typedef unsigned short EMSH;	/* type of expanded-memory handles */
+
+typedef union
+{
+    short file_handle;		/* DOS file handle if it's a temp file */
+    XMSH xms_handle;		/* handle if it's a chunk of XMS */
+    EMSH ems_handle;		/* handle if it's a chunk of EMS */
+} handle_union;
+
+#endif /* USE_MSDOS_MEMMGR */
+
+#ifdef USE_MAC_MEMMGR		/* Mac-specific junk */
+#include <Files.h>
+#endif /* USE_MAC_MEMMGR */
+
+
+typedef struct backing_store_struct * backing_store_ptr;
+
+typedef struct backing_store_struct
+{
+    /* Methods for reading/writing/closing this backing-store object */
+    JMETHOD(void, read_backing_store, (j_common_ptr cinfo,
+                                       backing_store_ptr info,
+                                       void FAR * buffer_address,
+                                       long file_offset, long byte_count));
+    JMETHOD(void, write_backing_store, (j_common_ptr cinfo,
+                                        backing_store_ptr info,
+                                        void FAR * buffer_address,
+                                        long file_offset, long byte_count));
+    JMETHOD(void, close_backing_store, (j_common_ptr cinfo,
+                                        backing_store_ptr info));
+
+    /* Private fields for system-dependent backing-store management */
+#ifdef USE_MSDOS_MEMMGR
+    /* For the MS-DOS manager (jmemdos.c), we need: */
+    handle_union handle;		/* reference to backing-store storage object */
+    char temp_name[TEMP_NAME_LENGTH]; /* name if it's a file */
+#else
+#ifdef USE_MAC_MEMMGR
+    /* For the Mac manager (jmemmac.c), we need: */
+    short temp_file;		/* file reference number to temp file */
+    FSSpec tempSpec;		/* the FSSpec for the temp file */
+    char temp_name[TEMP_NAME_LENGTH]; /* name if it's a file */
+#else
+    /* For a typical implementation with temp files, we need: */
+    FILE * temp_file;		/* stdio reference to temp file */
+    char temp_name[TEMP_NAME_LENGTH]; /* name of temp file */
+#endif
+#endif
+} backing_store_info;
+
+
+/*
+ * Initial opening of a backing-store object.  This must fill in the
+ * read/write/close pointers in the object.  The read/write routines
+ * may take an error exit if the specified maximum file size is exceeded.
+ * (If jpeg_mem_available always returns a large value, this routine can
+ * just take an error exit.)
+ */
+
+EXTERN(void) jpeg_open_backing_store JPP((j_common_ptr cinfo,
+        backing_store_ptr info,
+        long total_bytes_needed));
+
+
+/*
+ * These routines take care of any system-dependent initialization and
+ * cleanup required.  jpeg_mem_init will be called before anything is
+ * allocated (and, therefore, nothing in cinfo is of use except the error
+ * manager pointer).  It should return a suitable default value for
+ * max_memory_to_use; this may subsequently be overridden by the surrounding
+ * application.  (Note that max_memory_to_use is only important if
+ * jpeg_mem_available chooses to consult it ... no one else will.)
+ * jpeg_mem_term may assume that all requested memory has been freed and that
+ * all opened backing-store objects have been closed.
+ */
+
+EXTERN(long) jpeg_mem_init JPP((j_common_ptr cinfo));
+EXTERN(void) jpeg_mem_term JPP((j_common_ptr cinfo));
diff -NEaurb neo/renderer/jpeg-8c/jmorecfg.h neo/renderer/jpeg-8c/jmorecfg.h
--- neo/renderer/jpeg-8c/jmorecfg.h	1970-01-01 00:00:00 +0000
+++ neo/renderer/jpeg-8c/jmorecfg.h	2012-11-17 01:20:40 +0000
@@ -0,0 +1,371 @@
+/*
+ * jmorecfg.h
+ *
+ * Copyright (C) 1991-1997, Thomas G. Lane.
+ * Modified 1997-2009 by Guido Vollbeding.
+ * This file is part of the Independent JPEG Group's software.
+ * For conditions of distribution and use, see the accompanying README file.
+ *
+ * This file contains additional configuration options that customize the
+ * JPEG software for special applications or support machine-dependent
+ * optimizations.  Most users will not need to touch this file.
+ */
+
+
+/*
+ * Define BITS_IN_JSAMPLE as either
+ *   8   for 8-bit sample values (the usual setting)
+ *   12  for 12-bit sample values
+ * Only 8 and 12 are legal data precisions for lossy JPEG according to the
+ * JPEG standard, and the IJG code does not support anything else!
+ * We do not support run-time selection of data precision, sorry.
+ */
+
+#define BITS_IN_JSAMPLE  8	/* use 8 or 12 */
+
+
+/*
+ * Maximum number of components (color channels) allowed in JPEG image.
+ * To meet the letter of the JPEG spec, set this to 255.  However, darn
+ * few applications need more than 4 channels (maybe 5 for CMYK + alpha
+ * mask).  We recommend 10 as a reasonable compromise; use 4 if you are
+ * really short on memory.  (Each allowed component costs a hundred or so
+ * bytes of storage, whether actually used in an image or not.)
+ */
+
+#define MAX_COMPONENTS  10	/* maximum number of image components */
+
+
+/*
+ * Basic data types.
+ * You may need to change these if you have a machine with unusual data
+ * type sizes; for example, "char" not 8 bits, "short" not 16 bits,
+ * or "long" not 32 bits.  We don't care whether "int" is 16 or 32 bits,
+ * but it had better be at least 16.
+ */
+
+/* Representation of a single sample (pixel element value).
+ * We frequently allocate large arrays of these, so it's important to keep
+ * them small.  But if you have memory to burn and access to char or short
+ * arrays is very slow on your hardware, you might want to change these.
+ */
+
+#if BITS_IN_JSAMPLE == 8
+/* JSAMPLE should be the smallest type that will hold the values 0..255.
+ * You can use a signed char by having GETJSAMPLE mask it with 0xFF.
+ */
+
+#ifdef HAVE_UNSIGNED_CHAR
+
+typedef unsigned char JSAMPLE;
+#define GETJSAMPLE(value)  ((int) (value))
+
+#else /* not HAVE_UNSIGNED_CHAR */
+
+typedef char JSAMPLE;
+#ifdef CHAR_IS_UNSIGNED
+#define GETJSAMPLE(value)  ((int) (value))
+#else
+#define GETJSAMPLE(value)  ((int) (value) & 0xFF)
+#endif /* CHAR_IS_UNSIGNED */
+
+#endif /* HAVE_UNSIGNED_CHAR */
+
+#define MAXJSAMPLE	255
+#define CENTERJSAMPLE	128
+
+#endif /* BITS_IN_JSAMPLE == 8 */
+
+
+#if BITS_IN_JSAMPLE == 12
+/* JSAMPLE should be the smallest type that will hold the values 0..4095.
+ * On nearly all machines "short" will do nicely.
+ */
+
+typedef short JSAMPLE;
+#define GETJSAMPLE(value)  ((int) (value))
+
+#define MAXJSAMPLE	4095
+#define CENTERJSAMPLE	2048
+
+#endif /* BITS_IN_JSAMPLE == 12 */
+
+
+/* Representation of a DCT frequency coefficient.
+ * This should be a signed value of at least 16 bits; "short" is usually OK.
+ * Again, we allocate large arrays of these, but you can change to int
+ * if you have memory to burn and "short" is really slow.
+ */
+
+typedef short JCOEF;
+
+
+/* Compressed datastreams are represented as arrays of JOCTET.
+ * These must be EXACTLY 8 bits wide, at least once they are written to
+ * external storage.  Note that when using the stdio data source/destination
+ * managers, this is also the data type passed to fread/fwrite.
+ */
+
+#ifdef HAVE_UNSIGNED_CHAR
+
+typedef unsigned char JOCTET;
+#define GETJOCTET(value)  (value)
+
+#else /* not HAVE_UNSIGNED_CHAR */
+
+typedef char JOCTET;
+#ifdef CHAR_IS_UNSIGNED
+#define GETJOCTET(value)  (value)
+#else
+#define GETJOCTET(value)  ((value) & 0xFF)
+#endif /* CHAR_IS_UNSIGNED */
+
+#endif /* HAVE_UNSIGNED_CHAR */
+
+
+/* These typedefs are used for various table entries and so forth.
+ * They must be at least as wide as specified; but making them too big
+ * won't cost a huge amount of memory, so we don't provide special
+ * extraction code like we did for JSAMPLE.  (In other words, these
+ * typedefs live at a different point on the speed/space tradeoff curve.)
+ */
+
+/* UINT8 must hold at least the values 0..255. */
+
+#ifdef HAVE_UNSIGNED_CHAR
+typedef unsigned char UINT8;
+#else /* not HAVE_UNSIGNED_CHAR */
+#ifdef CHAR_IS_UNSIGNED
+typedef char UINT8;
+#else /* not CHAR_IS_UNSIGNED */
+typedef short UINT8;
+#endif /* CHAR_IS_UNSIGNED */
+#endif /* HAVE_UNSIGNED_CHAR */
+
+/* UINT16 must hold at least the values 0..65535. */
+
+#ifdef HAVE_UNSIGNED_SHORT
+typedef unsigned short UINT16;
+#else /* not HAVE_UNSIGNED_SHORT */
+typedef unsigned int UINT16;
+#endif /* HAVE_UNSIGNED_SHORT */
+
+/* INT16 must hold at least the values -32768..32767. */
+
+#ifndef XMD_H			/* X11/xmd.h correctly defines INT16 */
+typedef short INT16;
+#endif
+
+/* INT32 must hold at least signed 32-bit values. */
+
+#ifndef XMD_H			/* X11/xmd.h correctly defines INT32 */
+#ifndef _BASETSD_H_		/* Microsoft defines it in basetsd.h */
+#ifndef _BASETSD_H		/* MinGW is slightly different */
+#ifndef QGLOBAL_H		/* Qt defines it in qglobal.h */
+typedef long INT32;
+#endif
+#endif
+#endif
+#endif
+
+/* Datatype used for image dimensions.  The JPEG standard only supports
+ * images up to 64K*64K due to 16-bit fields in SOF markers.  Therefore
+ * "unsigned int" is sufficient on all machines.  However, if you need to
+ * handle larger images and you don't mind deviating from the spec, you
+ * can change this datatype.
+ */
+
+typedef unsigned int JDIMENSION;
+
+#define JPEG_MAX_DIMENSION  65500L  /* a tad under 64K to prevent overflows */
+
+
+/* These macros are used in all function definitions and extern declarations.
+ * You could modify them if you need to change function linkage conventions;
+ * in particular, you'll need to do that to make the library a Windows DLL.
+ * Another application is to make all functions global for use with debuggers
+ * or code profilers that require it.
+ */
+
+/* a function called through method pointers: */
+#define METHODDEF(type)	static type
+/* a function used only in its module: */
+#define LOCAL(type)		static type
+/* a function referenced thru EXTERNs: */
+#define GLOBAL(type)	type
+/* a reference to a GLOBAL function: */
+#define EXTERN(type)	extern type
+
+
+/* This macro is used to declare a "method", that is, a function pointer.
+ * We want to supply prototype parameters if the compiler can cope.
+ * Note that the arglist parameter must be parenthesized!
+ * Again, you can customize this if you need special linkage keywords.
+ */
+
+#ifdef HAVE_PROTOTYPES
+#define JMETHOD(type,methodname,arglist)  type (*methodname) arglist
+#else
+#define JMETHOD(type,methodname,arglist)  type (*methodname) ()
+#endif
+
+
+/* Here is the pseudo-keyword for declaring pointers that must be "far"
+ * on 80x86 machines.  Most of the specialized coding for 80x86 is handled
+ * by just saying "FAR *" where such a pointer is needed.  In a few places
+ * explicit coding is needed; see uses of the NEED_FAR_POINTERS symbol.
+ */
+
+#ifndef FAR
+#ifdef NEED_FAR_POINTERS
+#define FAR  far
+#else
+#define FAR
+#endif
+#endif
+
+
+/*
+ * On a few systems, type boolean and/or its values FALSE, TRUE may appear
+ * in standard header files.  Or you may have conflicts with application-
+ * specific header files that you want to include together with these files.
+ * Defining HAVE_BOOLEAN before including jpeglib.h should make it work.
+ */
+
+#ifndef HAVE_BOOLEAN
+typedef int boolean;
+#endif
+#ifndef FALSE			/* in case these macros already exist */
+#define FALSE	0		/* values of boolean */
+#endif
+#ifndef TRUE
+#define TRUE	1
+#endif
+
+
+/*
+ * The remaining options affect code selection within the JPEG library,
+ * but they don't need to be visible to most applications using the library.
+ * To minimize application namespace pollution, the symbols won't be
+ * defined unless JPEG_INTERNALS or JPEG_INTERNAL_OPTIONS has been defined.
+ */
+
+#ifdef JPEG_INTERNALS
+#define JPEG_INTERNAL_OPTIONS
+#endif
+
+#ifdef JPEG_INTERNAL_OPTIONS
+
+
+/*
+ * These defines indicate whether to include various optional functions.
+ * Undefining some of these symbols will produce a smaller but less capable
+ * library.  Note that you can leave certain source files out of the
+ * compilation/linking process if you've #undef'd the corresponding symbols.
+ * (You may HAVE to do that if your compiler doesn't like null source files.)
+ */
+
+/* Capability options common to encoder and decoder: */
+
+#define DCT_ISLOW_SUPPORTED	/* slow but accurate integer algorithm */
+#define DCT_IFAST_SUPPORTED	/* faster, less accurate integer method */
+#define DCT_FLOAT_SUPPORTED	/* floating-point: accurate, fast on fast HW */
+
+/* Encoder capability options: */
+
+#define C_ARITH_CODING_SUPPORTED    /* Arithmetic coding back end? */
+#define C_MULTISCAN_FILES_SUPPORTED /* Multiple-scan JPEG files? */
+#define C_PROGRESSIVE_SUPPORTED	    /* Progressive JPEG? (Requires MULTISCAN)*/
+#define DCT_SCALING_SUPPORTED	    /* Input rescaling via DCT? (Requires DCT_ISLOW)*/
+#define ENTROPY_OPT_SUPPORTED	    /* Optimization of entropy coding parms? */
+/* Note: if you selected 12-bit data precision, it is dangerous to turn off
+ * ENTROPY_OPT_SUPPORTED.  The standard Huffman tables are only good for 8-bit
+ * precision, so jchuff.c normally uses entropy optimization to compute
+ * usable tables for higher precision.  If you don't want to do optimization,
+ * you'll have to supply different default Huffman tables.
+ * The exact same statements apply for progressive JPEG: the default tables
+ * don't work for progressive mode.  (This may get fixed, however.)
+ */
+#define INPUT_SMOOTHING_SUPPORTED   /* Input image smoothing option? */
+
+/* Decoder capability options: */
+
+#define D_ARITH_CODING_SUPPORTED    /* Arithmetic coding back end? */
+#define D_MULTISCAN_FILES_SUPPORTED /* Multiple-scan JPEG files? */
+#define D_PROGRESSIVE_SUPPORTED	    /* Progressive JPEG? (Requires MULTISCAN)*/
+#define IDCT_SCALING_SUPPORTED	    /* Output rescaling via IDCT? */
+#define SAVE_MARKERS_SUPPORTED	    /* jpeg_save_markers() needed? */
+#define BLOCK_SMOOTHING_SUPPORTED   /* Block smoothing? (Progressive only) */
+#undef  UPSAMPLE_SCALING_SUPPORTED  /* Output rescaling at upsample stage? */
+#define UPSAMPLE_MERGING_SUPPORTED  /* Fast path for sloppy upsampling? */
+#define QUANT_1PASS_SUPPORTED	    /* 1-pass color quantization? */
+#define QUANT_2PASS_SUPPORTED	    /* 2-pass color quantization? */
+
+/* more capability options later, no doubt */
+
+
+/*
+ * Ordering of RGB data in scanlines passed to or from the application.
+ * If your application wants to deal with data in the order B,G,R, just
+ * change these macros.  You can also deal with formats such as R,G,B,X
+ * (one extra byte per pixel) by changing RGB_PIXELSIZE.  Note that changing
+ * the offsets will also change the order in which colormap data is organized.
+ * RESTRICTIONS:
+ * 1. The sample applications cjpeg,djpeg do NOT support modified RGB formats.
+ * 2. These macros only affect RGB<=>YCbCr color conversion, so they are not
+ *    useful if you are using JPEG color spaces other than YCbCr or grayscale.
+ * 3. The color quantizer modules will not behave desirably if RGB_PIXELSIZE
+ *    is not 3 (they don't understand about dummy color components!).  So you
+ *    can't use color quantization if you change that value.
+ */
+
+#define RGB_RED		0	/* Offset of Red in an RGB scanline element */
+#define RGB_GREEN	1	/* Offset of Green */
+#define RGB_BLUE	2	/* Offset of Blue */
+#define RGB_PIXELSIZE	3	/* JSAMPLEs per RGB scanline element */
+
+
+/* Definitions for speed-related optimizations. */
+
+
+/* If your compiler supports inline functions, define INLINE
+ * as the inline keyword; otherwise define it as empty.
+ */
+
+#ifndef INLINE
+#ifdef __GNUC__			/* for instance, GNU C knows about inline */
+#define INLINE __inline__
+#endif
+#ifndef INLINE
+#define INLINE			/* default is to define it as empty */
+#endif
+#endif
+
+
+/* On some machines (notably 68000 series) "int" is 32 bits, but multiplying
+ * two 16-bit shorts is faster than multiplying two ints.  Define MULTIPLIER
+ * as short on such a machine.  MULTIPLIER must be at least 16 bits wide.
+ */
+
+#ifndef MULTIPLIER
+#define MULTIPLIER  int		/* type for fastest integer multiply */
+#endif
+
+
+/* FAST_FLOAT should be either float or double, whichever is done faster
+ * by your compiler.  (Note that this type is only used in the floating point
+ * DCT routines, so it only matters if you've defined DCT_FLOAT_SUPPORTED.)
+ * Typically, float is faster in ANSI C compilers, while double is faster in
+ * pre-ANSI compilers (because they insist on converting to double anyway).
+ * The code below therefore chooses float if we have ANSI-style prototypes.
+ */
+
+#ifndef FAST_FLOAT
+#ifdef HAVE_PROTOTYPES
+#define FAST_FLOAT  float
+#else
+#define FAST_FLOAT  double
+#endif
+#endif
+
+#endif /* JPEG_INTERNAL_OPTIONS */
diff -NEaurb neo/renderer/jpeg-8c/jpegint.h neo/renderer/jpeg-8c/jpegint.h
--- neo/renderer/jpeg-8c/jpegint.h	1970-01-01 00:00:00 +0000
+++ neo/renderer/jpeg-8c/jpegint.h	2013-08-11 00:20:45 +0000
@@ -0,0 +1,434 @@
+/*
+ * jpegint.h
+ *
+ * Copyright (C) 1991-1997, Thomas G. Lane.
+ * Modified 1997-2009 by Guido Vollbeding.
+ * This file is part of the Independent JPEG Group's software.
+ * For conditions of distribution and use, see the accompanying README file.
+ *
+ * This file provides common declarations for the various JPEG modules.
+ * These declarations are considered internal to the JPEG library; most
+ * applications using the library shouldn't need to include this file.
+ */
+
+
+/* Declarations for both compression & decompression */
+
+typedef enum  			/* Operating modes for buffer controllers */
+{
+    JBUF_PASS_THRU,		/* Plain stripwise operation */
+    /* Remaining modes require a full-image buffer to have been created */
+    JBUF_SAVE_SOURCE,	/* Run source subobject only, save output */
+    JBUF_CRANK_DEST,	/* Run dest subobject only, using saved data */
+    JBUF_SAVE_AND_PASS	/* Run both subobjects, save output */
+} J_BUF_MODE;
+
+/* Values of global_state field (jdapi.c has some dependencies on ordering!) */
+#define CSTATE_START	100	/* after create_compress */
+#define CSTATE_SCANNING	101	/* start_compress done, write_scanlines OK */
+#define CSTATE_RAW_OK	102	/* start_compress done, write_raw_data OK */
+#define CSTATE_WRCOEFS	103	/* jpeg_write_coefficients done */
+#define DSTATE_START	200	/* after create_decompress */
+#define DSTATE_INHEADER	201	/* reading header markers, no SOS yet */
+#define DSTATE_READY	202	/* found SOS, ready for start_decompress */
+#define DSTATE_PRELOAD	203	/* reading multiscan file in start_decompress*/
+#define DSTATE_PRESCAN	204	/* performing dummy pass for 2-pass quant */
+#define DSTATE_SCANNING	205	/* start_decompress done, read_scanlines OK */
+#define DSTATE_RAW_OK	206	/* start_decompress done, read_raw_data OK */
+#define DSTATE_BUFIMAGE	207	/* expecting jpeg_start_output */
+#define DSTATE_BUFPOST	208	/* looking for SOS/EOI in jpeg_finish_output */
+#define DSTATE_RDCOEFS	209	/* reading file in jpeg_read_coefficients */
+#define DSTATE_STOPPING	210	/* looking for EOI in jpeg_finish_decompress */
+
+
+/* Declarations for compression modules */
+
+/* Master control module */
+struct jpeg_comp_master
+{
+    JMETHOD(void, prepare_for_pass, (j_compress_ptr cinfo));
+    JMETHOD(void, pass_startup, (j_compress_ptr cinfo));
+    JMETHOD(void, finish_pass, (j_compress_ptr cinfo));
+
+    /* State variables made visible to other modules */
+    boolean call_pass_startup;	/* True if pass_startup must be called */
+    boolean is_last_pass;		/* True during last pass */
+};
+
+/* Main buffer control (downsampled-data buffer) */
+struct jpeg_c_main_controller
+{
+    JMETHOD(void, start_pass, (j_compress_ptr cinfo, J_BUF_MODE pass_mode));
+    JMETHOD(void, process_data, (j_compress_ptr cinfo,
+                                 JSAMPARRAY input_buf, JDIMENSION *in_row_ctr,
+                                 JDIMENSION in_rows_avail));
+};
+
+/* Compression preprocessing (downsampling input buffer control) */
+struct jpeg_c_prep_controller
+{
+    JMETHOD(void, start_pass, (j_compress_ptr cinfo, J_BUF_MODE pass_mode));
+    JMETHOD(void, pre_process_data, (j_compress_ptr cinfo,
+                                     JSAMPARRAY input_buf,
+                                     JDIMENSION *in_row_ctr,
+                                     JDIMENSION in_rows_avail,
+                                     JSAMPIMAGE output_buf,
+                                     JDIMENSION *out_row_group_ctr,
+                                     JDIMENSION out_row_groups_avail));
+};
+
+/* Coefficient buffer control */
+struct jpeg_c_coef_controller
+{
+    JMETHOD(void, start_pass, (j_compress_ptr cinfo, J_BUF_MODE pass_mode));
+    JMETHOD(boolean, compress_data, (j_compress_ptr cinfo,
+                                     JSAMPIMAGE input_buf));
+};
+
+/* Colorspace conversion */
+struct jpeg_color_converter
+{
+    JMETHOD(void, start_pass, (j_compress_ptr cinfo));
+    JMETHOD(void, color_convert, (j_compress_ptr cinfo,
+                                  JSAMPARRAY input_buf, JSAMPIMAGE output_buf,
+                                  JDIMENSION output_row, int num_rows));
+};
+
+/* Downsampling */
+struct jpeg_downsampler
+{
+    JMETHOD(void, start_pass, (j_compress_ptr cinfo));
+    JMETHOD(void, downsample, (j_compress_ptr cinfo,
+                               JSAMPIMAGE input_buf, JDIMENSION in_row_index,
+                               JSAMPIMAGE output_buf,
+                               JDIMENSION out_row_group_index));
+
+    boolean need_context_rows;	/* TRUE if need rows above & below */
+};
+
+/* Forward DCT (also controls coefficient quantization) */
+typedef JMETHOD(void, forward_DCT_ptr,
+                (j_compress_ptr cinfo, jpeg_component_info * compptr,
+                 JSAMPARRAY sample_data, JBLOCKROW coef_blocks,
+                 JDIMENSION start_row, JDIMENSION start_col,
+                 JDIMENSION num_blocks));
+
+struct jpeg_forward_dct
+{
+    JMETHOD(void, start_pass, (j_compress_ptr cinfo));
+    /* It is useful to allow each component to have a separate FDCT method. */
+    forward_DCT_ptr forward_DCT[MAX_COMPONENTS];
+};
+
+/* Entropy encoding */
+struct jpeg_entropy_encoder
+{
+    JMETHOD(void, start_pass, (j_compress_ptr cinfo, boolean gather_statistics));
+    JMETHOD(boolean, encode_mcu, (j_compress_ptr cinfo, JBLOCKROW *MCU_data));
+    JMETHOD(void, finish_pass, (j_compress_ptr cinfo));
+};
+
+/* Marker writing */
+struct jpeg_marker_writer
+{
+    JMETHOD(void, write_file_header, (j_compress_ptr cinfo));
+    JMETHOD(void, write_frame_header, (j_compress_ptr cinfo));
+    JMETHOD(void, write_scan_header, (j_compress_ptr cinfo));
+    JMETHOD(void, write_file_trailer, (j_compress_ptr cinfo));
+    JMETHOD(void, write_tables_only, (j_compress_ptr cinfo));
+    /* These routines are exported to allow insertion of extra markers */
+    /* Probably only COM and APPn markers should be written this way */
+    JMETHOD(void, write_marker_header, (j_compress_ptr cinfo, int marker,
+                                        unsigned int datalen));
+    JMETHOD(void, write_marker_byte, (j_compress_ptr cinfo, int val));
+};
+
+
+/* Declarations for decompression modules */
+
+/* Master control module */
+struct jpeg_decomp_master
+{
+    JMETHOD(void, prepare_for_output_pass, (j_decompress_ptr cinfo));
+    JMETHOD(void, finish_output_pass, (j_decompress_ptr cinfo));
+
+    /* State variables made visible to other modules */
+    boolean is_dummy_pass;	/* True during 1st pass for 2-pass quant */
+};
+
+/* Input control module */
+struct jpeg_input_controller
+{
+    JMETHOD(int, consume_input, (j_decompress_ptr cinfo));
+    JMETHOD(void, reset_input_controller, (j_decompress_ptr cinfo));
+    JMETHOD(void, start_input_pass, (j_decompress_ptr cinfo));
+    JMETHOD(void, finish_input_pass, (j_decompress_ptr cinfo));
+
+    /* State variables made visible to other modules */
+    boolean has_multiple_scans;	/* True if file has multiple scans */
+    boolean eoi_reached;		/* True when EOI has been consumed */
+};
+
+/* Main buffer control (downsampled-data buffer) */
+struct jpeg_d_main_controller
+{
+    JMETHOD(void, start_pass, (j_decompress_ptr cinfo, J_BUF_MODE pass_mode));
+    JMETHOD(void, process_data, (j_decompress_ptr cinfo,
+                                 JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
+                                 JDIMENSION out_rows_avail));
+};
+
+/* Coefficient buffer control */
+struct jpeg_d_coef_controller
+{
+    JMETHOD(void, start_input_pass, (j_decompress_ptr cinfo));
+    JMETHOD(int, consume_data, (j_decompress_ptr cinfo));
+    JMETHOD(void, start_output_pass, (j_decompress_ptr cinfo));
+    JMETHOD(int, decompress_data, (j_decompress_ptr cinfo,
+                                   JSAMPIMAGE output_buf));
+    /* Pointer to array of coefficient virtual arrays, or NULL if none */
+    jvirt_barray_ptr *coef_arrays;
+};
+
+/* Decompression postprocessing (color quantization buffer control) */
+struct jpeg_d_post_controller
+{
+    JMETHOD(void, start_pass, (j_decompress_ptr cinfo, J_BUF_MODE pass_mode));
+    JMETHOD(void, post_process_data, (j_decompress_ptr cinfo,
+                                      JSAMPIMAGE input_buf,
+                                      JDIMENSION *in_row_group_ctr,
+                                      JDIMENSION in_row_groups_avail,
+                                      JSAMPARRAY output_buf,
+                                      JDIMENSION *out_row_ctr,
+                                      JDIMENSION out_rows_avail));
+};
+
+/* Marker reading & parsing */
+struct jpeg_marker_reader
+{
+    JMETHOD(void, reset_marker_reader, (j_decompress_ptr cinfo));
+    /* Read markers until SOS or EOI.
+     * Returns same codes as are defined for jpeg_consume_input:
+     * JPEG_SUSPENDED, JPEG_REACHED_SOS, or JPEG_REACHED_EOI.
+     */
+    JMETHOD(int, read_markers, (j_decompress_ptr cinfo));
+    /* Read a restart marker --- exported for use by entropy decoder only */
+    jpeg_marker_parser_method read_restart_marker;
+
+    /* State of marker reader --- nominally internal, but applications
+     * supplying COM or APPn handlers might like to know the state.
+     */
+    boolean saw_SOI;		/* found SOI? */
+    boolean saw_SOF;		/* found SOF? */
+    int next_restart_num;		/* next restart number expected (0-7) */
+    unsigned int discarded_bytes;	/* # of bytes skipped looking for a marker */
+};
+
+/* Entropy decoding */
+struct jpeg_entropy_decoder
+{
+    JMETHOD(void, start_pass, (j_decompress_ptr cinfo));
+    JMETHOD(boolean, decode_mcu, (j_decompress_ptr cinfo,
+                                  JBLOCKROW *MCU_data));
+};
+
+/* Inverse DCT (also performs dequantization) */
+typedef JMETHOD(void, inverse_DCT_method_ptr,
+                (j_decompress_ptr cinfo, jpeg_component_info * compptr,
+                 JCOEFPTR coef_block,
+                 JSAMPARRAY output_buf, JDIMENSION output_col));
+
+struct jpeg_inverse_dct
+{
+    JMETHOD(void, start_pass, (j_decompress_ptr cinfo));
+    /* It is useful to allow each component to have a separate IDCT method. */
+    inverse_DCT_method_ptr inverse_DCT[MAX_COMPONENTS];
+};
+
+/* Upsampling (note that upsampler must also call color converter) */
+struct jpeg_upsampler
+{
+    JMETHOD(void, start_pass, (j_decompress_ptr cinfo));
+    JMETHOD(void, upsample, (j_decompress_ptr cinfo,
+                             JSAMPIMAGE input_buf,
+                             JDIMENSION *in_row_group_ctr,
+                             JDIMENSION in_row_groups_avail,
+                             JSAMPARRAY output_buf,
+                             JDIMENSION *out_row_ctr,
+                             JDIMENSION out_rows_avail));
+
+    boolean need_context_rows;	/* TRUE if need rows above & below */
+};
+
+/* Colorspace conversion */
+struct jpeg_color_deconverter
+{
+    JMETHOD(void, start_pass, (j_decompress_ptr cinfo));
+    JMETHOD(void, color_convert, (j_decompress_ptr cinfo,
+                                  JSAMPIMAGE input_buf, JDIMENSION input_row,
+                                  JSAMPARRAY output_buf, int num_rows));
+};
+
+/* Color quantization or color precision reduction */
+struct jpeg_color_quantizer
+{
+    JMETHOD(void, start_pass, (j_decompress_ptr cinfo, boolean is_pre_scan));
+    JMETHOD(void, color_quantize, (j_decompress_ptr cinfo,
+                                   JSAMPARRAY input_buf, JSAMPARRAY output_buf,
+                                   int num_rows));
+    JMETHOD(void, finish_pass, (j_decompress_ptr cinfo));
+    JMETHOD(void, new_color_map, (j_decompress_ptr cinfo));
+};
+
+
+/* Miscellaneous useful macros */
+
+#undef MAX
+#define MAX(a,b)	((a) > (b) ? (a) : (b))
+#undef MIN
+#define MIN(a,b)	((a) < (b) ? (a) : (b))
+
+
+/* We assume that right shift corresponds to signed division by 2 with
+ * rounding towards minus infinity.  This is correct for typical "arithmetic
+ * shift" instructions that shift in copies of the sign bit.  But some
+ * C compilers implement >> with an unsigned shift.  For these machines you
+ * must define RIGHT_SHIFT_IS_UNSIGNED.
+ * RIGHT_SHIFT provides a proper signed right shift of an INT32 quantity.
+ * It is only applied with constant shift counts.  SHIFT_TEMPS must be
+ * included in the variables of any routine using RIGHT_SHIFT.
+ */
+
+#ifdef RIGHT_SHIFT_IS_UNSIGNED
+#define SHIFT_TEMPS	INT32 shift_temp;
+#define RIGHT_SHIFT(x,shft)  \
+	((shift_temp = (x)) < 0 ? \
+	 (shift_temp >> (shft)) | ((~((INT32) 0)) << (32-(shft))) : \
+	 (shift_temp >> (shft)))
+#else
+#define SHIFT_TEMPS
+#define RIGHT_SHIFT(x,shft)	((x) >> (shft))
+#endif
+
+
+/* Short forms of external names for systems with brain-damaged linkers. */
+
+#ifdef NEED_SHORT_EXTERNAL_NAMES
+#define jinit_compress_master	jICompress
+#define jinit_c_master_control	jICMaster
+#define jinit_c_main_controller	jICMainC
+#define jinit_c_prep_controller	jICPrepC
+#define jinit_c_coef_controller	jICCoefC
+#define jinit_color_converter	jICColor
+#define jinit_downsampler	jIDownsampler
+#define jinit_forward_dct	jIFDCT
+#define jinit_huff_encoder	jIHEncoder
+#define jinit_arith_encoder	jIAEncoder
+#define jinit_marker_writer	jIMWriter
+#define jinit_master_decompress	jIDMaster
+#define jinit_d_main_controller	jIDMainC
+#define jinit_d_coef_controller	jIDCoefC
+#define jinit_d_post_controller	jIDPostC
+#define jinit_input_controller	jIInCtlr
+#define jinit_marker_reader	jIMReader
+#define jinit_huff_decoder	jIHDecoder
+#define jinit_arith_decoder	jIADecoder
+#define jinit_inverse_dct	jIIDCT
+#define jinit_upsampler		jIUpsampler
+#define jinit_color_deconverter	jIDColor
+#define jinit_1pass_quantizer	jI1Quant
+#define jinit_2pass_quantizer	jI2Quant
+#define jinit_merged_upsampler	jIMUpsampler
+#define jinit_memory_mgr	jIMemMgr
+#define jdiv_round_up		jDivRound
+#define jround_up		jRound
+#define jcopy_sample_rows	jCopySamples
+#define jcopy_block_row		jCopyBlocks
+#define jzero_far		jZeroFar
+#define jpeg_zigzag_order	jZIGTable
+#define jpeg_natural_order	jZAGTable
+#define jpeg_natural_order7	jZAGTable7
+#define jpeg_natural_order6	jZAGTable6
+#define jpeg_natural_order5	jZAGTable5
+#define jpeg_natural_order4	jZAGTable4
+#define jpeg_natural_order3	jZAGTable3
+#define jpeg_natural_order2	jZAGTable2
+#define jpeg_aritab		jAriTab
+#endif /* NEED_SHORT_EXTERNAL_NAMES */
+
+
+/* Compression module initialization routines */
+EXTERN(void) jinit_compress_master JPP((j_compress_ptr cinfo));
+EXTERN(void) jinit_c_master_control JPP((j_compress_ptr cinfo,
+                                        boolean transcode_only));
+EXTERN(void) jinit_c_main_controller JPP((j_compress_ptr cinfo,
+        boolean need_full_buffer));
+EXTERN(void) jinit_c_prep_controller JPP((j_compress_ptr cinfo,
+        boolean need_full_buffer));
+EXTERN(void) jinit_c_coef_controller JPP((j_compress_ptr cinfo,
+        boolean need_full_buffer));
+EXTERN(void) jinit_color_converter JPP((j_compress_ptr cinfo));
+EXTERN(void) jinit_downsampler JPP((j_compress_ptr cinfo));
+EXTERN(void) jinit_forward_dct JPP((j_compress_ptr cinfo));
+EXTERN(void) jinit_huff_encoder JPP((j_compress_ptr cinfo));
+EXTERN(void) jinit_arith_encoder JPP((j_compress_ptr cinfo));
+EXTERN(void) jinit_marker_writer JPP((j_compress_ptr cinfo));
+/* Decompression module initialization routines */
+EXTERN(void) jinit_master_decompress JPP((j_decompress_ptr cinfo));
+EXTERN(void) jinit_d_main_controller JPP((j_decompress_ptr cinfo,
+        boolean need_full_buffer));
+EXTERN(void) jinit_d_coef_controller JPP((j_decompress_ptr cinfo,
+        boolean need_full_buffer));
+EXTERN(void) jinit_d_post_controller JPP((j_decompress_ptr cinfo,
+        boolean need_full_buffer));
+EXTERN(void) jinit_input_controller JPP((j_decompress_ptr cinfo));
+EXTERN(void) jinit_marker_reader JPP((j_decompress_ptr cinfo));
+EXTERN(void) jinit_huff_decoder JPP((j_decompress_ptr cinfo));
+EXTERN(void) jinit_arith_decoder JPP((j_decompress_ptr cinfo));
+EXTERN(void) jinit_inverse_dct JPP((j_decompress_ptr cinfo));
+EXTERN(void) jinit_upsampler JPP((j_decompress_ptr cinfo));
+EXTERN(void) jinit_color_deconverter JPP((j_decompress_ptr cinfo));
+EXTERN(void) jinit_1pass_quantizer JPP((j_decompress_ptr cinfo));
+EXTERN(void) jinit_2pass_quantizer JPP((j_decompress_ptr cinfo));
+EXTERN(void) jinit_merged_upsampler JPP((j_decompress_ptr cinfo));
+/* Memory manager initialization */
+EXTERN(void) jinit_memory_mgr JPP((j_common_ptr cinfo));
+
+/* Utility routines in jutils.c */
+EXTERN(long) jdiv_round_up JPP((long a, long b));
+EXTERN(long) jround_up JPP((long a, long b));
+EXTERN(void) jcopy_sample_rows JPP((JSAMPARRAY input_array, int source_row,
+                                    JSAMPARRAY output_array, int dest_row,
+                                    int num_rows, JDIMENSION num_cols));
+EXTERN(void) jcopy_block_row JPP((JBLOCKROW input_row, JBLOCKROW output_row,
+                                  JDIMENSION num_blocks));
+EXTERN(void) jzero_far JPP((void FAR * target, size_t bytestozero));
+/* Constant tables in jutils.c */
+#if 0				/* This table is not actually needed in v6a */
+extern const int jpeg_zigzag_order[]; /* natural coef order to zigzag order */
+#endif
+extern const int jpeg_natural_order[]; /* zigzag coef order to natural order */
+extern const int jpeg_natural_order7[]; /* zz to natural order for 7x7 block */
+extern const int jpeg_natural_order6[]; /* zz to natural order for 6x6 block */
+extern const int jpeg_natural_order5[]; /* zz to natural order for 5x5 block */
+extern const int jpeg_natural_order4[]; /* zz to natural order for 4x4 block */
+extern const int jpeg_natural_order3[]; /* zz to natural order for 3x3 block */
+extern const int jpeg_natural_order2[]; /* zz to natural order for 2x2 block */
+
+/* Arithmetic coding probability estimation tables in jaricom.c */
+extern const INT32 jpeg_aritab[];
+
+/* Suppress undefined-structure complaints if necessary. */
+
+#ifdef INCOMPLETE_TYPES_BROKEN
+#ifndef AM_MEMORY_MANAGER	/* only jmemmgr.c defines these */
+struct jvirt_sarray_control
+{
+    long dummy;
+};
+struct jvirt_barray_control
+{
+    long dummy;
+};
+#endif
+#endif /* INCOMPLETE_TYPES_BROKEN */
diff -NEaurb neo/renderer/jpeg-8c/jpeglib.h neo/renderer/jpeg-8c/jpeglib.h
--- neo/renderer/jpeg-8c/jpeglib.h	1970-01-01 00:00:00 +0000
+++ neo/renderer/jpeg-8c/jpeglib.h	2013-08-13 11:16:49 +0000
@@ -0,0 +1,1243 @@
+/*
+ * jpeglib.h
+ *
+ * Copyright (C) 1991-1998, Thomas G. Lane.
+ * Modified 2002-2010 by Guido Vollbeding.
+ * This file is part of the Independent JPEG Group's software.
+ * For conditions of distribution and use, see the accompanying README file.
+ *
+ * This file defines the application interface for the JPEG library.
+ * Most applications using the library need only include this file,
+ * and perhaps jerror.h if they want to know the exact error codes.
+ */
+
+#ifndef JPEGLIB_H
+#define JPEGLIB_H
+
+/*
+ * First we include the configuration files that record how this
+ * installation of the JPEG library is set up.  jconfig.h can be
+ * generated automatically for many systems.  jmorecfg.h contains
+ * manual configuration options that most people need not worry about.
+ */
+
+#ifndef JCONFIG_INCLUDED	/* in case jinclude.h already did */
+#include "jconfig.h"		/* widely used configuration options */
+#endif
+#include "jmorecfg.h"		/* seldom changed options */
+
+
+#ifdef __cplusplus
+#ifndef DONT_USE_EXTERN_C
+extern "C" {
+#endif
+#endif
+
+    /* Version IDs for the JPEG library.
+     * Might be useful for tests like "#if JPEG_LIB_VERSION >= 80".
+     */
+
+#define JPEG_LIB_VERSION        80	/* Compatibility version 8.0 */
+#define JPEG_LIB_VERSION_MAJOR  8
+#define JPEG_LIB_VERSION_MINOR  3
+
+
+    /* Various constants determining the sizes of things.
+     * All of these are specified by the JPEG standard, so don't change them
+     * if you want to be compatible.
+     */
+
+#define DCTSIZE		    8	/* The basic DCT block is 8x8 samples */
+#define DCTSIZE2	    64	/* DCTSIZE squared; # of elements in a block */
+#define NUM_QUANT_TBLS      4	/* Quantization tables are numbered 0..3 */
+#define NUM_HUFF_TBLS       4	/* Huffman tables are numbered 0..3 */
+#define NUM_ARITH_TBLS      16	/* Arith-coding tables are numbered 0..15 */
+#define MAX_COMPS_IN_SCAN   4	/* JPEG limit on # of components in one scan */
+#define MAX_SAMP_FACTOR     4	/* JPEG limit on sampling factors */
+    /* Unfortunately, some bozo at Adobe saw no reason to be bound by the standard;
+     * the PostScript DCT filter can emit files with many more than 10 blocks/MCU.
+     * If you happen to run across such a file, you can up D_MAX_BLOCKS_IN_MCU
+     * to handle it.  We even let you do this from the jconfig.h file.  However,
+     * we strongly discourage changing C_MAX_BLOCKS_IN_MCU; just because Adobe
+     * sometimes emits noncompliant files doesn't mean you should too.
+     */
+#define C_MAX_BLOCKS_IN_MCU   10 /* compressor's limit on blocks per MCU */
+#ifndef D_MAX_BLOCKS_IN_MCU
+#define D_MAX_BLOCKS_IN_MCU   10 /* decompressor's limit on blocks per MCU */
+#endif
+
+
+    /* Data structures for images (arrays of samples and of DCT coefficients).
+     * On 80x86 machines, the image arrays are too big for near pointers,
+     * but the pointer arrays can fit in near memory.
+     */
+
+    typedef JSAMPLE FAR *JSAMPROW;	/* ptr to one image row of pixel samples. */
+    typedef JSAMPROW *JSAMPARRAY;	/* ptr to some rows (a 2-D sample array) */
+    typedef JSAMPARRAY *JSAMPIMAGE;	/* a 3-D sample array: top index is color */
+
+    typedef JCOEF JBLOCK[DCTSIZE2];	/* one block of coefficients */
+    typedef JBLOCK FAR *JBLOCKROW;	/* pointer to one row of coefficient blocks */
+    typedef JBLOCKROW *JBLOCKARRAY;		/* a 2-D array of coefficient blocks */
+    typedef JBLOCKARRAY *JBLOCKIMAGE;	/* a 3-D array of coefficient blocks */
+
+    typedef JCOEF FAR *JCOEFPTR;	/* useful in a couple of places */
+
+
+    /* Types for JPEG compression parameters and working tables. */
+
+
+    /* DCT coefficient quantization tables. */
+
+    typedef struct
+    {
+        /* This array gives the coefficient quantizers in natural array order
+         * (not the zigzag order in which they are stored in a JPEG DQT marker).
+         * CAUTION: IJG versions prior to v6a kept this array in zigzag order.
+         */
+        UINT16 quantval[DCTSIZE2];	/* quantization step for each coefficient */
+        /* This field is used only during compression.  It's initialized FALSE when
+         * the table is created, and set TRUE when it's been output to the file.
+         * You could suppress output of a table by setting this to TRUE.
+         * (See jpeg_suppress_tables for an example.)
+         */
+        boolean sent_table;		/* TRUE when table has been output */
+    } JQUANT_TBL;
+
+
+    /* Huffman coding tables. */
+
+    typedef struct
+    {
+        /* These two fields directly represent the contents of a JPEG DHT marker */
+        UINT8 bits[17];		/* bits[k] = # of symbols with codes of */
+        /* length k bits; bits[0] is unused */
+        UINT8 huffval[256];		/* The symbols, in order of incr code length */
+        /* This field is used only during compression.  It's initialized FALSE when
+         * the table is created, and set TRUE when it's been output to the file.
+         * You could suppress output of a table by setting this to TRUE.
+         * (See jpeg_suppress_tables for an example.)
+         */
+        boolean sent_table;		/* TRUE when table has been output */
+    } JHUFF_TBL;
+
+
+    /* Basic info about one component (color channel). */
+
+    typedef struct
+    {
+        /* These values are fixed over the whole image. */
+        /* For compression, they must be supplied by parameter setup; */
+        /* for decompression, they are read from the SOF marker. */
+        int component_id;		/* identifier for this component (0..255) */
+        int component_index;		/* its index in SOF or cinfo->comp_info[] */
+        int h_samp_factor;		/* horizontal sampling factor (1..4) */
+        int v_samp_factor;		/* vertical sampling factor (1..4) */
+        int quant_tbl_no;		/* quantization table selector (0..3) */
+        /* These values may vary between scans. */
+        /* For compression, they must be supplied by parameter setup; */
+        /* for decompression, they are read from the SOS marker. */
+        /* The decompressor output side may not use these variables. */
+        int dc_tbl_no;		/* DC entropy table selector (0..3) */
+        int ac_tbl_no;		/* AC entropy table selector (0..3) */
+
+        /* Remaining fields should be treated as private by applications. */
+
+        /* These values are computed during compression or decompression startup: */
+        /* Component's size in DCT blocks.
+         * Any dummy blocks added to complete an MCU are not counted; therefore
+         * these values do not depend on whether a scan is interleaved or not.
+         */
+        JDIMENSION width_in_blocks;
+        JDIMENSION height_in_blocks;
+        /* Size of a DCT block in samples,
+         * reflecting any scaling we choose to apply during the DCT step.
+         * Values from 1 to 16 are supported.
+         * Note that different components may receive different DCT scalings.
+         */
+        int DCT_h_scaled_size;
+        int DCT_v_scaled_size;
+        /* The downsampled dimensions are the component's actual, unpadded number
+         * of samples at the main buffer (preprocessing/compression interface);
+         * DCT scaling is included, so
+         * downsampled_width = ceil(image_width * Hi/Hmax * DCT_h_scaled_size/DCTSIZE)
+         * and similarly for height.
+         */
+        JDIMENSION downsampled_width;	 /* actual width in samples */
+        JDIMENSION downsampled_height; /* actual height in samples */
+        /* This flag is used only for decompression.  In cases where some of the
+         * components will be ignored (eg grayscale output from YCbCr image),
+         * we can skip most computations for the unused components.
+         */
+        boolean component_needed;	/* do we need the value of this component? */
+
+        /* These values are computed before starting a scan of the component. */
+        /* The decompressor output side may not use these variables. */
+        int MCU_width;		/* number of blocks per MCU, horizontally */
+        int MCU_height;		/* number of blocks per MCU, vertically */
+        int MCU_blocks;		/* MCU_width * MCU_height */
+        int MCU_sample_width;	/* MCU width in samples: MCU_width * DCT_h_scaled_size */
+        int last_col_width;		/* # of non-dummy blocks across in last MCU */
+        int last_row_height;		/* # of non-dummy blocks down in last MCU */
+
+        /* Saved quantization table for component; NULL if none yet saved.
+         * See jdinput.c comments about the need for this information.
+         * This field is currently used only for decompression.
+         */
+        JQUANT_TBL * quant_table;
+
+        /* Private per-component storage for DCT or IDCT subsystem. */
+        void * dct_table;
+    } jpeg_component_info;
+
+
+    /* The script for encoding a multiple-scan file is an array of these: */
+
+    typedef struct
+    {
+        int comps_in_scan;		/* number of components encoded in this scan */
+        int component_index[MAX_COMPS_IN_SCAN]; /* their SOF/comp_info[] indexes */
+        int Ss, Se;			/* progressive JPEG spectral selection parms */
+        int Ah, Al;			/* progressive JPEG successive approx. parms */
+    } jpeg_scan_info;
+
+    /* The decompressor can save APPn and COM markers in a list of these: */
+
+    typedef struct jpeg_marker_struct FAR * jpeg_saved_marker_ptr;
+
+    struct jpeg_marker_struct
+    {
+        jpeg_saved_marker_ptr next;	/* next in list, or NULL */
+        UINT8 marker;			/* marker code: JPEG_COM, or JPEG_APP0+n */
+        unsigned int original_length;	/* # bytes of data in the file */
+        unsigned int data_length;	/* # bytes of data saved at data[] */
+        JOCTET FAR * data;		/* the data contained in the marker */
+        /* the marker length word is not counted in data_length or original_length */
+    };
+
+    /* Known color spaces. */
+
+    typedef enum
+    {
+        JCS_UNKNOWN,		/* error/unspecified */
+        JCS_GRAYSCALE,		/* monochrome */
+        JCS_RGB,		/* red/green/blue */
+        JCS_YCbCr,		/* Y/Cb/Cr (also known as YUV) */
+        JCS_CMYK,		/* C/M/Y/K */
+        JCS_YCCK		/* Y/Cb/Cr/K */
+    } J_COLOR_SPACE;
+
+    /* DCT/IDCT algorithm options. */
+
+    typedef enum
+    {
+        JDCT_ISLOW,		/* slow but accurate integer algorithm */
+        JDCT_IFAST,		/* faster, less accurate integer method */
+        JDCT_FLOAT		/* floating-point: accurate, fast on fast HW */
+    } J_DCT_METHOD;
+
+#ifndef JDCT_DEFAULT		/* may be overridden in jconfig.h */
+#define JDCT_DEFAULT  JDCT_ISLOW
+#endif
+#ifndef JDCT_FASTEST		/* may be overridden in jconfig.h */
+#define JDCT_FASTEST  JDCT_IFAST
+#endif
+
+    /* Dithering options for decompression. */
+
+    typedef enum
+    {
+        JDITHER_NONE,		/* no dithering */
+        JDITHER_ORDERED,	/* simple ordered dither */
+        JDITHER_FS		/* Floyd-Steinberg error diffusion dither */
+    } J_DITHER_MODE;
+
+
+    /* Common fields between JPEG compression and decompression master structs. */
+
+#define jpeg_common_fields \
+  struct jpeg_error_mgr * err;	/* Error handler module */\
+  struct jpeg_memory_mgr * mem;	/* Memory manager module */\
+  struct jpeg_progress_mgr * progress; /* Progress monitor, or NULL if none */\
+  void * client_data;		/* Available for use by application */\
+  boolean is_decompressor;	/* So common code can tell which is which */\
+  int global_state		/* For checking call sequence validity */
+
+    /* Routines that are to be used by both halves of the library are declared
+     * to receive a pointer to this structure.  There are no actual instances of
+     * jpeg_common_struct, only of jpeg_compress_struct and jpeg_decompress_struct.
+     */
+    struct jpeg_common_struct
+    {
+        jpeg_common_fields;		/* Fields common to both master struct types */
+        /* Additional fields follow in an actual jpeg_compress_struct or
+         * jpeg_decompress_struct.  All three structs must agree on these
+         * initial fields!  (This would be a lot cleaner in C++.)
+         */
+    };
+
+    typedef struct jpeg_common_struct * j_common_ptr;
+    typedef struct jpeg_compress_struct * j_compress_ptr;
+    typedef struct jpeg_decompress_struct * j_decompress_ptr;
+
+
+    /* Master record for a compression instance */
+
+    struct jpeg_compress_struct
+    {
+        jpeg_common_fields;		/* Fields shared with jpeg_decompress_struct */
+
+        /* Destination for compressed data */
+        struct jpeg_destination_mgr * dest;
+
+        /* Description of source image --- these fields must be filled in by
+         * outer application before starting compression.  in_color_space must
+         * be correct before you can even call jpeg_set_defaults().
+         */
+
+        JDIMENSION image_width;	/* input image width */
+        JDIMENSION image_height;	/* input image height */
+        int input_components;		/* # of color components in input image */
+        J_COLOR_SPACE in_color_space;	/* colorspace of input image */
+
+        double input_gamma;		/* image gamma of input image */
+
+        /* Compression parameters --- these fields must be set before calling
+         * jpeg_start_compress().  We recommend calling jpeg_set_defaults() to
+         * initialize everything to reasonable defaults, then changing anything
+         * the application specifically wants to change.  That way you won't get
+         * burnt when new parameters are added.  Also note that there are several
+         * helper routines to simplify changing parameters.
+         */
+
+        unsigned int scale_num, scale_denom; /* fraction by which to scale image */
+
+        JDIMENSION jpeg_width;	/* scaled JPEG image width */
+        JDIMENSION jpeg_height;	/* scaled JPEG image height */
+        /* Dimensions of actual JPEG image that will be written to file,
+         * derived from input dimensions by scaling factors above.
+         * These fields are computed by jpeg_start_compress().
+         * You can also use jpeg_calc_jpeg_dimensions() to determine these values
+         * in advance of calling jpeg_start_compress().
+         */
+
+        int data_precision;		/* bits of precision in image data */
+
+        int num_components;		/* # of color components in JPEG image */
+        J_COLOR_SPACE jpeg_color_space; /* colorspace of JPEG image */
+
+        jpeg_component_info * comp_info;
+        /* comp_info[i] describes component that appears i'th in SOF */
+
+        JQUANT_TBL * quant_tbl_ptrs[NUM_QUANT_TBLS];
+        int q_scale_factor[NUM_QUANT_TBLS];
+        /* ptrs to coefficient quantization tables, or NULL if not defined,
+         * and corresponding scale factors (percentage, initialized 100).
+         */
+
+        JHUFF_TBL * dc_huff_tbl_ptrs[NUM_HUFF_TBLS];
+        JHUFF_TBL * ac_huff_tbl_ptrs[NUM_HUFF_TBLS];
+        /* ptrs to Huffman coding tables, or NULL if not defined */
+
+        UINT8 arith_dc_L[NUM_ARITH_TBLS]; /* L values for DC arith-coding tables */
+        UINT8 arith_dc_U[NUM_ARITH_TBLS]; /* U values for DC arith-coding tables */
+        UINT8 arith_ac_K[NUM_ARITH_TBLS]; /* Kx values for AC arith-coding tables */
+
+        int num_scans;		/* # of entries in scan_info array */
+        const jpeg_scan_info * scan_info; /* script for multi-scan file, or NULL */
+        /* The default value of scan_info is NULL, which causes a single-scan
+         * sequential JPEG file to be emitted.  To create a multi-scan file,
+         * set num_scans and scan_info to point to an array of scan definitions.
+         */
+
+        boolean raw_data_in;		/* TRUE=caller supplies downsampled data */
+        boolean arith_code;		/* TRUE=arithmetic coding, FALSE=Huffman */
+        boolean optimize_coding;	/* TRUE=optimize entropy encoding parms */
+        boolean CCIR601_sampling;	/* TRUE=first samples are cosited */
+        boolean do_fancy_downsampling; /* TRUE=apply fancy downsampling */
+        int smoothing_factor;		/* 1..100, or 0 for no input smoothing */
+        J_DCT_METHOD dct_method;	/* DCT algorithm selector */
+
+        /* The restart interval can be specified in absolute MCUs by setting
+         * restart_interval, or in MCU rows by setting restart_in_rows
+         * (in which case the correct restart_interval will be figured
+         * for each scan).
+         */
+        unsigned int restart_interval; /* MCUs per restart, or 0 for no restart */
+        int restart_in_rows;		/* if > 0, MCU rows per restart interval */
+
+        /* Parameters controlling emission of special markers. */
+
+        boolean write_JFIF_header;	/* should a JFIF marker be written? */
+        UINT8 JFIF_major_version;	/* What to write for the JFIF version number */
+        UINT8 JFIF_minor_version;
+        /* These three values are not used by the JPEG code, merely copied */
+        /* into the JFIF APP0 marker.  density_unit can be 0 for unknown, */
+        /* 1 for dots/inch, or 2 for dots/cm.  Note that the pixel aspect */
+        /* ratio is defined by X_density/Y_density even when density_unit=0. */
+        UINT8 density_unit;		/* JFIF code for pixel size units */
+        UINT16 X_density;		/* Horizontal pixel density */
+        UINT16 Y_density;		/* Vertical pixel density */
+        boolean write_Adobe_marker;	/* should an Adobe marker be written? */
+
+        /* State variable: index of next scanline to be written to
+         * jpeg_write_scanlines().  Application may use this to control its
+         * processing loop, e.g., "while (next_scanline < image_height)".
+         */
+
+        JDIMENSION next_scanline;	/* 0 .. image_height-1  */
+
+        /* Remaining fields are known throughout compressor, but generally
+         * should not be touched by a surrounding application.
+         */
+
+        /*
+         * These fields are computed during compression startup
+         */
+        boolean progressive_mode;	/* TRUE if scan script uses progressive mode */
+        int max_h_samp_factor;	/* largest h_samp_factor */
+        int max_v_samp_factor;	/* largest v_samp_factor */
+
+        int min_DCT_h_scaled_size;	/* smallest DCT_h_scaled_size of any component */
+        int min_DCT_v_scaled_size;	/* smallest DCT_v_scaled_size of any component */
+
+        JDIMENSION total_iMCU_rows;	/* # of iMCU rows to be input to coef ctlr */
+        /* The coefficient controller receives data in units of MCU rows as defined
+         * for fully interleaved scans (whether the JPEG file is interleaved or not).
+         * There are v_samp_factor * DCTSIZE sample rows of each component in an
+         * "iMCU" (interleaved MCU) row.
+         */
+
+        /*
+         * These fields are valid during any one scan.
+         * They describe the components and MCUs actually appearing in the scan.
+         */
+        int comps_in_scan;		/* # of JPEG components in this scan */
+        jpeg_component_info * cur_comp_info[MAX_COMPS_IN_SCAN];
+        /* *cur_comp_info[i] describes component that appears i'th in SOS */
+
+        JDIMENSION MCUs_per_row;	/* # of MCUs across the image */
+        JDIMENSION MCU_rows_in_scan;	/* # of MCU rows in the image */
+
+        int blocks_in_MCU;		/* # of DCT blocks per MCU */
+        int MCU_membership[C_MAX_BLOCKS_IN_MCU];
+        /* MCU_membership[i] is index in cur_comp_info of component owning */
+        /* i'th block in an MCU */
+
+        int Ss, Se, Ah, Al;		/* progressive JPEG parameters for scan */
+
+        int block_size;		/* the basic DCT block size: 1..16 */
+        const int * natural_order;	/* natural-order position array */
+        int lim_Se;			/* min( Se, DCTSIZE2-1 ) */
+
+        /*
+         * Links to compression subobjects (methods and private variables of modules)
+         */
+        struct jpeg_comp_master * master;
+        struct jpeg_c_main_controller * main;
+        struct jpeg_c_prep_controller * prep;
+        struct jpeg_c_coef_controller * coef;
+        struct jpeg_marker_writer * marker;
+        struct jpeg_color_converter * cconvert;
+        struct jpeg_downsampler * downsample;
+        struct jpeg_forward_dct * fdct;
+        struct jpeg_entropy_encoder * entropy;
+        jpeg_scan_info * script_space; /* workspace for jpeg_simple_progression */
+        int script_space_size;
+    };
+
+
+    /* Master record for a decompression instance */
+
+    struct jpeg_decompress_struct
+    {
+        jpeg_common_fields;		/* Fields shared with jpeg_compress_struct */
+
+        /* Source of compressed data */
+        struct jpeg_source_mgr * src;
+
+        /* Basic description of image --- filled in by jpeg_read_header(). */
+        /* Application may inspect these values to decide how to process image. */
+
+        JDIMENSION image_width;	/* nominal image width (from SOF marker) */
+        JDIMENSION image_height;	/* nominal image height */
+        int num_components;		/* # of color components in JPEG image */
+        J_COLOR_SPACE jpeg_color_space; /* colorspace of JPEG image */
+
+        /* Decompression processing parameters --- these fields must be set before
+         * calling jpeg_start_decompress().  Note that jpeg_read_header() initializes
+         * them to default values.
+         */
+
+        J_COLOR_SPACE out_color_space; /* colorspace for output */
+
+        unsigned int scale_num, scale_denom; /* fraction by which to scale image */
+
+        double output_gamma;		/* image gamma wanted in output */
+
+        boolean buffered_image;	/* TRUE=multiple output passes */
+        boolean raw_data_out;		/* TRUE=downsampled data wanted */
+
+        J_DCT_METHOD dct_method;	/* IDCT algorithm selector */
+        boolean do_fancy_upsampling;	/* TRUE=apply fancy upsampling */
+        boolean do_block_smoothing;	/* TRUE=apply interblock smoothing */
+
+        boolean quantize_colors;	/* TRUE=colormapped output wanted */
+        /* the following are ignored if not quantize_colors: */
+        J_DITHER_MODE dither_mode;	/* type of color dithering to use */
+        boolean two_pass_quantize;	/* TRUE=use two-pass color quantization */
+        int desired_number_of_colors;	/* max # colors to use in created colormap */
+        /* these are significant only in buffered-image mode: */
+        boolean enable_1pass_quant;	/* enable future use of 1-pass quantizer */
+        boolean enable_external_quant;/* enable future use of external colormap */
+        boolean enable_2pass_quant;	/* enable future use of 2-pass quantizer */
+
+        /* Description of actual output image that will be returned to application.
+         * These fields are computed by jpeg_start_decompress().
+         * You can also use jpeg_calc_output_dimensions() to determine these values
+         * in advance of calling jpeg_start_decompress().
+         */
+
+        JDIMENSION output_width;	/* scaled image width */
+        JDIMENSION output_height;	/* scaled image height */
+        int out_color_components;	/* # of color components in out_color_space */
+        int output_components;	/* # of color components returned */
+        /* output_components is 1 (a colormap index) when quantizing colors;
+         * otherwise it equals out_color_components.
+         */
+        int rec_outbuf_height;	/* min recommended height of scanline buffer */
+        /* If the buffer passed to jpeg_read_scanlines() is less than this many rows
+         * high, space and time will be wasted due to unnecessary data copying.
+         * Usually rec_outbuf_height will be 1 or 2, at most 4.
+         */
+
+        /* When quantizing colors, the output colormap is described by these fields.
+         * The application can supply a colormap by setting colormap non-NULL before
+         * calling jpeg_start_decompress; otherwise a colormap is created during
+         * jpeg_start_decompress or jpeg_start_output.
+         * The map has out_color_components rows and actual_number_of_colors columns.
+         */
+        int actual_number_of_colors;	/* number of entries in use */
+        JSAMPARRAY colormap;		/* The color map as a 2-D pixel array */
+
+        /* State variables: these variables indicate the progress of decompression.
+         * The application may examine these but must not modify them.
+         */
+
+        /* Row index of next scanline to be read from jpeg_read_scanlines().
+         * Application may use this to control its processing loop, e.g.,
+         * "while (output_scanline < output_height)".
+         */
+        JDIMENSION output_scanline;	/* 0 .. output_height-1  */
+
+        /* Current input scan number and number of iMCU rows completed in scan.
+         * These indicate the progress of the decompressor input side.
+         */
+        int input_scan_number;	/* Number of SOS markers seen so far */
+        JDIMENSION input_iMCU_row;	/* Number of iMCU rows completed */
+
+        /* The "output scan number" is the notional scan being displayed by the
+         * output side.  The decompressor will not allow output scan/row number
+         * to get ahead of input scan/row, but it can fall arbitrarily far behind.
+         */
+        int output_scan_number;	/* Nominal scan number being displayed */
+        JDIMENSION output_iMCU_row;	/* Number of iMCU rows read */
+
+        /* Current progression status.  coef_bits[c][i] indicates the precision
+         * with which component c's DCT coefficient i (in zigzag order) is known.
+         * It is -1 when no data has yet been received, otherwise it is the point
+         * transform (shift) value for the most recent scan of the coefficient
+         * (thus, 0 at completion of the progression).
+         * This pointer is NULL when reading a non-progressive file.
+         */
+        int (*coef_bits)[DCTSIZE2];	/* -1 or current Al value for each coef */
+
+        /* Internal JPEG parameters --- the application usually need not look at
+         * these fields.  Note that the decompressor output side may not use
+         * any parameters that can change between scans.
+         */
+
+        /* Quantization and Huffman tables are carried forward across input
+         * datastreams when processing abbreviated JPEG datastreams.
+         */
+
+        JQUANT_TBL * quant_tbl_ptrs[NUM_QUANT_TBLS];
+        /* ptrs to coefficient quantization tables, or NULL if not defined */
+
+        JHUFF_TBL * dc_huff_tbl_ptrs[NUM_HUFF_TBLS];
+        JHUFF_TBL * ac_huff_tbl_ptrs[NUM_HUFF_TBLS];
+        /* ptrs to Huffman coding tables, or NULL if not defined */
+
+        /* These parameters are never carried across datastreams, since they
+         * are given in SOF/SOS markers or defined to be reset by SOI.
+         */
+
+        int data_precision;		/* bits of precision in image data */
+
+        jpeg_component_info * comp_info;
+        /* comp_info[i] describes component that appears i'th in SOF */
+
+        boolean is_baseline;		/* TRUE if Baseline SOF0 encountered */
+        boolean progressive_mode;	/* TRUE if SOFn specifies progressive mode */
+        boolean arith_code;		/* TRUE=arithmetic coding, FALSE=Huffman */
+
+        UINT8 arith_dc_L[NUM_ARITH_TBLS]; /* L values for DC arith-coding tables */
+        UINT8 arith_dc_U[NUM_ARITH_TBLS]; /* U values for DC arith-coding tables */
+        UINT8 arith_ac_K[NUM_ARITH_TBLS]; /* Kx values for AC arith-coding tables */
+
+        unsigned int restart_interval; /* MCUs per restart interval, or 0 for no restart */
+
+        /* These fields record data obtained from optional markers recognized by
+         * the JPEG library.
+         */
+        boolean saw_JFIF_marker;	/* TRUE iff a JFIF APP0 marker was found */
+        /* Data copied from JFIF marker; only valid if saw_JFIF_marker is TRUE: */
+        UINT8 JFIF_major_version;	/* JFIF version number */
+        UINT8 JFIF_minor_version;
+        UINT8 density_unit;		/* JFIF code for pixel size units */
+        UINT16 X_density;		/* Horizontal pixel density */
+        UINT16 Y_density;		/* Vertical pixel density */
+        boolean saw_Adobe_marker;	/* TRUE iff an Adobe APP14 marker was found */
+        UINT8 Adobe_transform;	/* Color transform code from Adobe marker */
+
+        boolean CCIR601_sampling;	/* TRUE=first samples are cosited */
+
+        /* Aside from the specific data retained from APPn markers known to the
+         * library, the uninterpreted contents of any or all APPn and COM markers
+         * can be saved in a list for examination by the application.
+         */
+        jpeg_saved_marker_ptr marker_list; /* Head of list of saved markers */
+
+        /* Remaining fields are known throughout decompressor, but generally
+         * should not be touched by a surrounding application.
+         */
+
+        /*
+         * These fields are computed during decompression startup
+         */
+        int max_h_samp_factor;	/* largest h_samp_factor */
+        int max_v_samp_factor;	/* largest v_samp_factor */
+
+        int min_DCT_h_scaled_size;	/* smallest DCT_h_scaled_size of any component */
+        int min_DCT_v_scaled_size;	/* smallest DCT_v_scaled_size of any component */
+
+        JDIMENSION total_iMCU_rows;	/* # of iMCU rows in image */
+        /* The coefficient controller's input and output progress is measured in
+         * units of "iMCU" (interleaved MCU) rows.  These are the same as MCU rows
+         * in fully interleaved JPEG scans, but are used whether the scan is
+         * interleaved or not.  We define an iMCU row as v_samp_factor DCT block
+         * rows of each component.  Therefore, the IDCT output contains
+         * v_samp_factor*DCT_v_scaled_size sample rows of a component per iMCU row.
+         */
+
+        JSAMPLE * sample_range_limit; /* table for fast range-limiting */
+
+        /*
+         * These fields are valid during any one scan.
+         * They describe the components and MCUs actually appearing in the scan.
+         * Note that the decompressor output side must not use these fields.
+         */
+        int comps_in_scan;		/* # of JPEG components in this scan */
+        jpeg_component_info * cur_comp_info[MAX_COMPS_IN_SCAN];
+        /* *cur_comp_info[i] describes component that appears i'th in SOS */
+
+        JDIMENSION MCUs_per_row;	/* # of MCUs across the image */
+        JDIMENSION MCU_rows_in_scan;	/* # of MCU rows in the image */
+
+        int blocks_in_MCU;		/* # of DCT blocks per MCU */
+        int MCU_membership[D_MAX_BLOCKS_IN_MCU];
+        /* MCU_membership[i] is index in cur_comp_info of component owning */
+        /* i'th block in an MCU */
+
+        int Ss, Se, Ah, Al;		/* progressive JPEG parameters for scan */
+
+        /* These fields are derived from Se of first SOS marker.
+         */
+        int block_size;		/* the basic DCT block size: 1..16 */
+        const int * natural_order; /* natural-order position array for entropy decode */
+        int lim_Se;			/* min( Se, DCTSIZE2-1 ) for entropy decode */
+
+        /* This field is shared between entropy decoder and marker parser.
+         * It is either zero or the code of a JPEG marker that has been
+         * read from the data source, but has not yet been processed.
+         */
+        int unread_marker;
+
+        /*
+         * Links to decompression subobjects (methods, private variables of modules)
+         */
+        struct jpeg_decomp_master * master;
+        struct jpeg_d_main_controller * main;
+        struct jpeg_d_coef_controller * coef;
+        struct jpeg_d_post_controller * post;
+        struct jpeg_input_controller * inputctl;
+        struct jpeg_marker_reader * marker;
+        struct jpeg_entropy_decoder * entropy;
+        struct jpeg_inverse_dct * idct;
+        struct jpeg_upsampler * upsample;
+        struct jpeg_color_deconverter * cconvert;
+        struct jpeg_color_quantizer * cquantize;
+    };
+
+
+    /* "Object" declarations for JPEG modules that may be supplied or called
+     * directly by the surrounding application.
+     * As with all objects in the JPEG library, these structs only define the
+     * publicly visible methods and state variables of a module.  Additional
+     * private fields may exist after the public ones.
+     */
+
+
+    /* Error handler object */
+
+    struct jpeg_error_mgr
+    {
+        /* Error exit handler: does not return to caller */
+        JMETHOD(void, error_exit, (j_common_ptr cinfo));
+        /* Conditionally emit a trace or warning message */
+        JMETHOD(void, emit_message, (j_common_ptr cinfo, int msg_level));
+        /* Routine that actually outputs a trace or error message */
+        JMETHOD(void, output_message, (j_common_ptr cinfo));
+        /* Format a message string for the most recent JPEG error or message */
+        JMETHOD(void, format_message, (j_common_ptr cinfo, char * buffer));
+#define JMSG_LENGTH_MAX  200	/* recommended size of format_message buffer */
+        /* Reset error state variables at start of a new image */
+        JMETHOD(void, reset_error_mgr, (j_common_ptr cinfo));
+
+        /* The message ID code and any parameters are saved here.
+         * A message can have one string parameter or up to 8 int parameters.
+         */
+        int msg_code;
+#define JMSG_STR_PARM_MAX  80
+        union
+        {
+            int i[8];
+            char s[JMSG_STR_PARM_MAX];
+        } msg_parm;
+
+        /* Standard state variables for error facility */
+
+        int trace_level;		/* max msg_level that will be displayed */
+
+        /* For recoverable corrupt-data errors, we emit a warning message,
+         * but keep going unless emit_message chooses to abort.  emit_message
+         * should count warnings in num_warnings.  The surrounding application
+         * can check for bad data by seeing if num_warnings is nonzero at the
+         * end of processing.
+         */
+        long num_warnings;		/* number of corrupt-data warnings */
+
+        /* These fields point to the table(s) of error message strings.
+         * An application can change the table pointer to switch to a different
+         * message list (typically, to change the language in which errors are
+         * reported).  Some applications may wish to add additional error codes
+         * that will be handled by the JPEG library error mechanism; the second
+         * table pointer is used for this purpose.
+         *
+         * First table includes all errors generated by JPEG library itself.
+         * Error code 0 is reserved for a "no such error string" message.
+         */
+        const char * const * jpeg_message_table; /* Library errors */
+        int last_jpeg_message;    /* Table contains strings 0..last_jpeg_message */
+        /* Second table can be added by application (see cjpeg/djpeg for example).
+         * It contains strings numbered first_addon_message..last_addon_message.
+         */
+        const char * const * addon_message_table; /* Non-library errors */
+        int first_addon_message;	/* code for first string in addon table */
+        int last_addon_message;	/* code for last string in addon table */
+    };
+
+
+    /* Progress monitor object */
+
+    struct jpeg_progress_mgr
+    {
+        JMETHOD(void, progress_monitor, (j_common_ptr cinfo));
+
+        long pass_counter;		/* work units completed in this pass */
+        long pass_limit;		/* total number of work units in this pass */
+        int completed_passes;		/* passes completed so far */
+        int total_passes;		/* total number of passes expected */
+    };
+
+
+    /* Data destination object for compression */
+
+    struct jpeg_destination_mgr
+    {
+        JOCTET * next_output_byte;	/* => next byte to write in buffer */
+        size_t free_in_buffer;	/* # of byte spaces remaining in buffer */
+
+        JMETHOD(void, init_destination, (j_compress_ptr cinfo));
+        JMETHOD(boolean, empty_output_buffer, (j_compress_ptr cinfo));
+        JMETHOD(void, term_destination, (j_compress_ptr cinfo));
+    };
+
+
+    /* Data source object for decompression */
+
+    struct jpeg_source_mgr
+    {
+        const JOCTET * next_input_byte; /* => next byte to read from buffer */
+        size_t bytes_in_buffer;	/* # of bytes remaining in buffer */
+
+        JMETHOD(void, init_source, (j_decompress_ptr cinfo));
+        JMETHOD(boolean, fill_input_buffer, (j_decompress_ptr cinfo));
+        JMETHOD(void, skip_input_data, (j_decompress_ptr cinfo, long num_bytes));
+        JMETHOD(boolean, resync_to_restart, (j_decompress_ptr cinfo, int desired));
+        JMETHOD(void, term_source, (j_decompress_ptr cinfo));
+    };
+
+
+    /* Memory manager object.
+     * Allocates "small" objects (a few K total), "large" objects (tens of K),
+     * and "really big" objects (virtual arrays with backing store if needed).
+     * The memory manager does not allow individual objects to be freed; rather,
+     * each created object is assigned to a pool, and whole pools can be freed
+     * at once.  This is faster and more convenient than remembering exactly what
+     * to free, especially where malloc()/free() are not too speedy.
+     * NB: alloc routines never return NULL.  They exit to error_exit if not
+     * successful.
+     */
+
+#define JPOOL_PERMANENT	0	/* lasts until master record is destroyed */
+#define JPOOL_IMAGE	1	/* lasts until done with image/datastream */
+#define JPOOL_NUMPOOLS	2
+
+    typedef struct jvirt_sarray_control * jvirt_sarray_ptr;
+    typedef struct jvirt_barray_control * jvirt_barray_ptr;
+
+
+    struct jpeg_memory_mgr
+    {
+        /* Method pointers */
+        JMETHOD(void *, alloc_small, (j_common_ptr cinfo, int pool_id,
+                                      size_t sizeofobject));
+        JMETHOD(void FAR *, alloc_large, (j_common_ptr cinfo, int pool_id,
+                                          size_t sizeofobject));
+        JMETHOD(JSAMPARRAY, alloc_sarray, (j_common_ptr cinfo, int pool_id,
+                                           JDIMENSION samplesperrow,
+                                           JDIMENSION numrows));
+        JMETHOD(JBLOCKARRAY, alloc_barray, (j_common_ptr cinfo, int pool_id,
+                                            JDIMENSION blocksperrow,
+                                            JDIMENSION numrows));
+        JMETHOD(jvirt_sarray_ptr, request_virt_sarray, (j_common_ptr cinfo,
+                int pool_id,
+                boolean pre_zero,
+                JDIMENSION samplesperrow,
+                JDIMENSION numrows,
+                JDIMENSION maxaccess));
+        JMETHOD(jvirt_barray_ptr, request_virt_barray, (j_common_ptr cinfo,
+                int pool_id,
+                boolean pre_zero,
+                JDIMENSION blocksperrow,
+                JDIMENSION numrows,
+                JDIMENSION maxaccess));
+        JMETHOD(void, realize_virt_arrays, (j_common_ptr cinfo));
+        JMETHOD(JSAMPARRAY, access_virt_sarray, (j_common_ptr cinfo,
+                jvirt_sarray_ptr ptr,
+                JDIMENSION start_row,
+                JDIMENSION num_rows,
+                boolean writable));
+        JMETHOD(JBLOCKARRAY, access_virt_barray, (j_common_ptr cinfo,
+                jvirt_barray_ptr ptr,
+                JDIMENSION start_row,
+                JDIMENSION num_rows,
+                boolean writable));
+        JMETHOD(void, free_pool, (j_common_ptr cinfo, int pool_id));
+        JMETHOD(void, self_destruct, (j_common_ptr cinfo));
+
+        /* Limit on memory allocation for this JPEG object.  (Note that this is
+         * merely advisory, not a guaranteed maximum; it only affects the space
+         * used for virtual-array buffers.)  May be changed by outer application
+         * after creating the JPEG object.
+         */
+        long max_memory_to_use;
+
+        /* Maximum allocation request accepted by alloc_large. */
+        long max_alloc_chunk;
+    };
+
+
+    /* Routine signature for application-supplied marker processing methods.
+     * Need not pass marker code since it is stored in cinfo->unread_marker.
+     */
+    typedef JMETHOD(boolean, jpeg_marker_parser_method, (j_decompress_ptr cinfo));
+
+
+    /* Declarations for routines called by application.
+     * The JPP macro hides prototype parameters from compilers that can't cope.
+     * Note JPP requires double parentheses.
+     */
+
+#ifdef HAVE_PROTOTYPES
+#define JPP(arglist)	arglist
+#else
+#define JPP(arglist)	()
+#endif
+
+
+    /* Short forms of external names for systems with brain-damaged linkers.
+     * We shorten external names to be unique in the first six letters, which
+     * is good enough for all known systems.
+     * (If your compiler itself needs names to be unique in less than 15
+     * characters, you are out of luck.  Get a better compiler.)
+     */
+
+#ifdef NEED_SHORT_EXTERNAL_NAMES
+#define jpeg_std_error		jStdError
+#define jpeg_CreateCompress	jCreaCompress
+#define jpeg_CreateDecompress	jCreaDecompress
+#define jpeg_destroy_compress	jDestCompress
+#define jpeg_destroy_decompress	jDestDecompress
+#define jpeg_stdio_dest		jStdDest
+#define jpeg_stdio_src		jStdSrc
+#define jpeg_mem_dest		jMemDest
+#define jpeg_mem_src		jMemSrc
+#define jpeg_set_defaults	jSetDefaults
+#define jpeg_set_colorspace	jSetColorspace
+#define jpeg_default_colorspace	jDefColorspace
+#define jpeg_set_quality	jSetQuality
+#define jpeg_set_linear_quality	jSetLQuality
+#define jpeg_default_qtables	jDefQTables
+#define jpeg_add_quant_table	jAddQuantTable
+#define jpeg_quality_scaling	jQualityScaling
+#define jpeg_simple_progression	jSimProgress
+#define jpeg_suppress_tables	jSuppressTables
+#define jpeg_alloc_quant_table	jAlcQTable
+#define jpeg_alloc_huff_table	jAlcHTable
+#define jpeg_start_compress	jStrtCompress
+#define jpeg_write_scanlines	jWrtScanlines
+#define jpeg_finish_compress	jFinCompress
+#define jpeg_calc_jpeg_dimensions	jCjpegDimensions
+#define jpeg_write_raw_data	jWrtRawData
+#define jpeg_write_marker	jWrtMarker
+#define jpeg_write_m_header	jWrtMHeader
+#define jpeg_write_m_byte	jWrtMByte
+#define jpeg_write_tables	jWrtTables
+#define jpeg_read_header	jReadHeader
+#define jpeg_start_decompress	jStrtDecompress
+#define jpeg_read_scanlines	jReadScanlines
+#define jpeg_finish_decompress	jFinDecompress
+#define jpeg_read_raw_data	jReadRawData
+#define jpeg_has_multiple_scans	jHasMultScn
+#define jpeg_start_output	jStrtOutput
+#define jpeg_finish_output	jFinOutput
+#define jpeg_input_complete	jInComplete
+#define jpeg_new_colormap	jNewCMap
+#define jpeg_consume_input	jConsumeInput
+#define jpeg_core_output_dimensions	jCoreDimensions
+#define jpeg_calc_output_dimensions	jCalcDimensions
+#define jpeg_save_markers	jSaveMarkers
+#define jpeg_set_marker_processor	jSetMarker
+#define jpeg_read_coefficients	jReadCoefs
+#define jpeg_write_coefficients	jWrtCoefs
+#define jpeg_copy_critical_parameters	jCopyCrit
+#define jpeg_abort_compress	jAbrtCompress
+#define jpeg_abort_decompress	jAbrtDecompress
+#define jpeg_abort		jAbort
+#define jpeg_destroy		jDestroy
+#define jpeg_resync_to_restart	jResyncRestart
+#endif /* NEED_SHORT_EXTERNAL_NAMES */
+
+
+    /* Default error-management setup */
+    EXTERN(struct jpeg_error_mgr *) jpeg_std_error
+    JPP((struct jpeg_error_mgr * err));
+
+    /* Initialization of JPEG compression objects.
+     * jpeg_create_compress() and jpeg_create_decompress() are the exported
+     * names that applications should call.  These expand to calls on
+     * jpeg_CreateCompress and jpeg_CreateDecompress with additional information
+     * passed for version mismatch checking.
+     * NB: you must set up the error-manager BEFORE calling jpeg_create_xxx.
+     */
+#define jpeg_create_compress(cinfo) \
+    jpeg_CreateCompress((cinfo), JPEG_LIB_VERSION, \
+			(size_t) sizeof(struct jpeg_compress_struct))
+#define jpeg_create_decompress(cinfo) \
+    jpeg_CreateDecompress((cinfo), JPEG_LIB_VERSION, \
+			  (size_t) sizeof(struct jpeg_decompress_struct))
+    EXTERN(void) jpeg_CreateCompress JPP((j_compress_ptr cinfo,
+                                          int version, size_t structsize));
+    EXTERN(void) jpeg_CreateDecompress JPP((j_decompress_ptr cinfo,
+                                            int version, size_t structsize));
+    /* Destruction of JPEG compression objects */
+    EXTERN(void) jpeg_destroy_compress JPP((j_compress_ptr cinfo));
+    EXTERN(void) jpeg_destroy_decompress JPP((j_decompress_ptr cinfo));
+
+    /* Standard data source and destination managers: stdio streams. */
+    /* Caller is responsible for opening the file before and closing after. */
+    EXTERN(void) jpeg_stdio_dest JPP((j_compress_ptr cinfo, FILE * outfile));
+    EXTERN(void) jpeg_stdio_src JPP((j_decompress_ptr cinfo, FILE * infile));
+
+    /* Data source and destination managers: memory buffers. */
+    EXTERN(void) jpeg_mem_dest JPP((j_compress_ptr cinfo,
+                                    unsigned char ** outbuffer,
+                                    unsigned long * outsize));
+    EXTERN(void) jpeg_mem_src JPP((j_decompress_ptr cinfo,
+                                   unsigned char * inbuffer,
+                                   unsigned long insize));
+
+    /* Default parameter setup for compression */
+    EXTERN(void) jpeg_set_defaults JPP((j_compress_ptr cinfo));
+    /* Compression parameter setup aids */
+    EXTERN(void) jpeg_set_colorspace JPP((j_compress_ptr cinfo,
+                                          J_COLOR_SPACE colorspace));
+    EXTERN(void) jpeg_default_colorspace JPP((j_compress_ptr cinfo));
+    EXTERN(void) jpeg_set_quality JPP((j_compress_ptr cinfo, int quality,
+                                       boolean force_baseline));
+    EXTERN(void) jpeg_set_linear_quality JPP((j_compress_ptr cinfo,
+            int scale_factor,
+            boolean force_baseline));
+    EXTERN(void) jpeg_default_qtables JPP((j_compress_ptr cinfo,
+                                           boolean force_baseline));
+    EXTERN(void) jpeg_add_quant_table JPP((j_compress_ptr cinfo, int which_tbl,
+                                           const unsigned int *basic_table,
+                                           int scale_factor,
+                                           boolean force_baseline));
+    EXTERN(int) jpeg_quality_scaling JPP((int quality));
+    EXTERN(void) jpeg_simple_progression JPP((j_compress_ptr cinfo));
+    EXTERN(void) jpeg_suppress_tables JPP((j_compress_ptr cinfo,
+                                           boolean suppress));
+    EXTERN(JQUANT_TBL *) jpeg_alloc_quant_table JPP((j_common_ptr cinfo));
+    EXTERN(JHUFF_TBL *) jpeg_alloc_huff_table JPP((j_common_ptr cinfo));
+
+    /* Main entry points for compression */
+    EXTERN(void) jpeg_start_compress JPP((j_compress_ptr cinfo,
+                                          boolean write_all_tables));
+    EXTERN(JDIMENSION) jpeg_write_scanlines JPP((j_compress_ptr cinfo,
+            JSAMPARRAY scanlines,
+            JDIMENSION num_lines));
+    EXTERN(void) jpeg_finish_compress JPP((j_compress_ptr cinfo));
+
+    /* Precalculate JPEG dimensions for current compression parameters. */
+    EXTERN(void) jpeg_calc_jpeg_dimensions JPP((j_compress_ptr cinfo));
+
+    /* Replaces jpeg_write_scanlines when writing raw downsampled data. */
+    EXTERN(JDIMENSION) jpeg_write_raw_data JPP((j_compress_ptr cinfo,
+            JSAMPIMAGE data,
+            JDIMENSION num_lines));
+
+    /* Write a special marker.  See libjpeg.txt concerning safe usage. */
+    EXTERN(void) jpeg_write_marker
+    JPP((j_compress_ptr cinfo, int marker,
+         const JOCTET * dataptr, unsigned int datalen));
+    /* Same, but piecemeal. */
+    EXTERN(void) jpeg_write_m_header
+    JPP((j_compress_ptr cinfo, int marker, unsigned int datalen));
+    EXTERN(void) jpeg_write_m_byte
+    JPP((j_compress_ptr cinfo, int val));
+
+    /* Alternate compression function: just write an abbreviated table file */
+    EXTERN(void) jpeg_write_tables JPP((j_compress_ptr cinfo));
+
+    /* Decompression startup: read start of JPEG datastream to see what's there */
+    EXTERN(int) jpeg_read_header JPP((j_decompress_ptr cinfo,
+                                      boolean require_image));
+    /* Return value is one of: */
+#define JPEG_SUSPENDED		0 /* Suspended due to lack of input data */
+#define JPEG_HEADER_OK		1 /* Found valid image datastream */
+#define JPEG_HEADER_TABLES_ONLY	2 /* Found valid table-specs-only datastream */
+    /* If you pass require_image = TRUE (normal case), you need not check for
+     * a TABLES_ONLY return code; an abbreviated file will cause an error exit.
+     * JPEG_SUSPENDED is only possible if you use a data source module that can
+     * give a suspension return (the stdio source module doesn't).
+     */
+
+    /* Main entry points for decompression */
+    EXTERN(boolean) jpeg_start_decompress JPP((j_decompress_ptr cinfo));
+    EXTERN(JDIMENSION) jpeg_read_scanlines JPP((j_decompress_ptr cinfo,
+            JSAMPARRAY scanlines,
+            JDIMENSION max_lines));
+    EXTERN(boolean) jpeg_finish_decompress JPP((j_decompress_ptr cinfo));
+
+    /* Replaces jpeg_read_scanlines when reading raw downsampled data. */
+    EXTERN(JDIMENSION) jpeg_read_raw_data JPP((j_decompress_ptr cinfo,
+            JSAMPIMAGE data,
+            JDIMENSION max_lines));
+
+    /* Additional entry points for buffered-image mode. */
+    EXTERN(boolean) jpeg_has_multiple_scans JPP((j_decompress_ptr cinfo));
+    EXTERN(boolean) jpeg_start_output JPP((j_decompress_ptr cinfo,
+                                           int scan_number));
+    EXTERN(boolean) jpeg_finish_output JPP((j_decompress_ptr cinfo));
+    EXTERN(boolean) jpeg_input_complete JPP((j_decompress_ptr cinfo));
+    EXTERN(void) jpeg_new_colormap JPP((j_decompress_ptr cinfo));
+    EXTERN(int) jpeg_consume_input JPP((j_decompress_ptr cinfo));
+    /* Return value is one of: */
+    /* #define JPEG_SUSPENDED	0    Suspended due to lack of input data */
+#define JPEG_REACHED_SOS	1 /* Reached start of new scan */
+#define JPEG_REACHED_EOI	2 /* Reached end of image */
+#define JPEG_ROW_COMPLETED	3 /* Completed one iMCU row */
+#define JPEG_SCAN_COMPLETED	4 /* Completed last iMCU row of a scan */
+
+    /* Precalculate output dimensions for current decompression parameters. */
+    EXTERN(void) jpeg_core_output_dimensions JPP((j_decompress_ptr cinfo));
+    EXTERN(void) jpeg_calc_output_dimensions JPP((j_decompress_ptr cinfo));
+
+    /* Control saving of COM and APPn markers into marker_list. */
+    EXTERN(void) jpeg_save_markers
+    JPP((j_decompress_ptr cinfo, int marker_code,
+         unsigned int length_limit));
+
+    /* Install a special processing method for COM or APPn markers. */
+    EXTERN(void) jpeg_set_marker_processor
+    JPP((j_decompress_ptr cinfo, int marker_code,
+         jpeg_marker_parser_method routine));
+
+    /* Read or write raw DCT coefficients --- useful for lossless transcoding. */
+    EXTERN(jvirt_barray_ptr *) jpeg_read_coefficients JPP((j_decompress_ptr cinfo));
+    EXTERN(void) jpeg_write_coefficients JPP((j_compress_ptr cinfo,
+            jvirt_barray_ptr * coef_arrays));
+    EXTERN(void) jpeg_copy_critical_parameters JPP((j_decompress_ptr srcinfo,
+            j_compress_ptr dstinfo));
+
+    /* If you choose to abort compression or decompression before completing
+     * jpeg_finish_(de)compress, then you need to clean up to release memory,
+     * temporary files, etc.  You can just call jpeg_destroy_(de)compress
+     * if you're done with the JPEG object, but if you want to clean it up and
+     * reuse it, call this:
+     */
+    EXTERN(void) jpeg_abort_compress JPP((j_compress_ptr cinfo));
+    EXTERN(void) jpeg_abort_decompress JPP((j_decompress_ptr cinfo));
+
+    /* Generic versions of jpeg_abort and jpeg_destroy that work on either
+     * flavor of JPEG object.  These may be more convenient in some places.
+     */
+    EXTERN(void) jpeg_abort JPP((j_common_ptr cinfo));
+    EXTERN(void) jpeg_destroy JPP((j_common_ptr cinfo));
+
+    /* Default restart-marker-resync procedure for use by data source modules */
+    EXTERN(boolean) jpeg_resync_to_restart JPP((j_decompress_ptr cinfo,
+            int desired));
+
+
+    /* These marker codes are exported since applications and data source modules
+     * are likely to want to use them.
+     */
+
+#define JPEG_RST0	0xD0	/* RST0 marker code */
+#define JPEG_EOI	0xD9	/* EOI marker code */
+#define JPEG_APP0	0xE0	/* APP0 marker code */
+#define JPEG_COM	0xFE	/* COM marker code */
+
+
+    /* If we have a brain-damaged compiler that emits warnings (or worse, errors)
+     * for structure definitions that are never filled in, keep it quiet by
+     * supplying dummy definitions for the various substructures.
+     */
+
+#ifdef INCOMPLETE_TYPES_BROKEN
+#ifndef JPEG_INTERNALS		/* will be defined in jpegint.h */
+    struct jvirt_sarray_control
+    {
+        long dummy;
+    };
+    struct jvirt_barray_control
+    {
+        long dummy;
+    };
+    struct jpeg_comp_master
+    {
+        long dummy;
+    };
+    struct jpeg_c_main_controller
+    {
+        long dummy;
+    };
+    struct jpeg_c_prep_controller
+    {
+        long dummy;
+    };
+    struct jpeg_c_coef_controller
+    {
+        long dummy;
+    };
+    struct jpeg_marker_writer
+    {
+        long dummy;
+    };
+    struct jpeg_color_converter
+    {
+        long dummy;
+    };
+    struct jpeg_downsampler
+    {
+        long dummy;
+    };
+    struct jpeg_forward_dct
+    {
+        long dummy;
+    };
+    struct jpeg_entropy_encoder
+    {
+        long dummy;
+    };
+    struct jpeg_decomp_master
+    {
+        long dummy;
+    };
+    struct jpeg_d_main_controller
+    {
+        long dummy;
+    };
+    struct jpeg_d_coef_controller
+    {
+        long dummy;
+    };
+    struct jpeg_d_post_controller
+    {
+        long dummy;
+    };
+    struct jpeg_input_controller
+    {
+        long dummy;
+    };
+    struct jpeg_marker_reader
+    {
+        long dummy;
+    };
+    struct jpeg_entropy_decoder
+    {
+        long dummy;
+    };
+    struct jpeg_inverse_dct
+    {
+        long dummy;
+    };
+    struct jpeg_upsampler
+    {
+        long dummy;
+    };
+    struct jpeg_color_deconverter
+    {
+        long dummy;
+    };
+    struct jpeg_color_quantizer
+    {
+        long dummy;
+    };
+#endif /* JPEG_INTERNALS */
+#endif /* INCOMPLETE_TYPES_BROKEN */
+
+
+    /*
+     * The JPEG library modules define JPEG_INTERNALS before including this file.
+     * The internal structure declarations are read only when that is true.
+     * Applications using the library should not include jpegint.h, but may wish
+     * to include jerror.h.
+     */
+
+#ifdef JPEG_INTERNALS
+#include "jpegint.h"		/* fetch private declarations */
+#include "jerror.h"		/* fetch error codes too */
+#endif
+
+#ifdef __cplusplus
+#ifndef DONT_USE_EXTERN_C
+}
+#endif
+#endif
+
+#endif /* JPEGLIB_H */
diff -NEaurb neo/renderer/jpeg-8c/jquant1.c neo/renderer/jpeg-8c/jquant1.c
--- neo/renderer/jpeg-8c/jquant1.c	1970-01-01 00:00:00 +0000
+++ neo/renderer/jpeg-8c/jquant1.c	2012-11-17 01:20:40 +0000
@@ -0,0 +1,934 @@
+/*
+ * jquant1.c
+ *
+ * Copyright (C) 1991-1996, Thomas G. Lane.
+ * This file is part of the Independent JPEG Group's software.
+ * For conditions of distribution and use, see the accompanying README file.
+ *
+ * This file contains 1-pass color quantization (color mapping) routines.
+ * These routines provide mapping to a fixed color map using equally spaced
+ * color values.  Optional Floyd-Steinberg or ordered dithering is available.
+ */
+
+#define JPEG_INTERNALS
+#include "jinclude.h"
+#include "jpeglib.h"
+
+#ifdef QUANT_1PASS_SUPPORTED
+
+
+/*
+ * The main purpose of 1-pass quantization is to provide a fast, if not very
+ * high quality, colormapped output capability.  A 2-pass quantizer usually
+ * gives better visual quality; however, for quantized grayscale output this
+ * quantizer is perfectly adequate.  Dithering is highly recommended with this
+ * quantizer, though you can turn it off if you really want to.
+ *
+ * In 1-pass quantization the colormap must be chosen in advance of seeing the
+ * image.  We use a map consisting of all combinations of Ncolors[i] color
+ * values for the i'th component.  The Ncolors[] values are chosen so that
+ * their product, the total number of colors, is no more than that requested.
+ * (In most cases, the product will be somewhat less.)
+ *
+ * Since the colormap is orthogonal, the representative value for each color
+ * component can be determined without considering the other components;
+ * then these indexes can be combined into a colormap index by a standard
+ * N-dimensional-array-subscript calculation.  Most of the arithmetic involved
+ * can be precalculated and stored in the lookup table colorindex[].
+ * colorindex[i][j] maps pixel value j in component i to the nearest
+ * representative value (grid plane) for that component; this index is
+ * multiplied by the array stride for component i, so that the
+ * index of the colormap entry closest to a given pixel value is just
+ *    sum( colorindex[component-number][pixel-component-value] )
+ * Aside from being fast, this scheme allows for variable spacing between
+ * representative values with no additional lookup cost.
+ *
+ * If gamma correction has been applied in color conversion, it might be wise
+ * to adjust the color grid spacing so that the representative colors are
+ * equidistant in linear space.  At this writing, gamma correction is not
+ * implemented by jdcolor, so nothing is done here.
+ */
+
+
+/* Declarations for ordered dithering.
+ *
+ * We use a standard 16x16 ordered dither array.  The basic concept of ordered
+ * dithering is described in many references, for instance Dale Schumacher's
+ * chapter II.2 of Graphics Gems II (James Arvo, ed. Academic Press, 1991).
+ * In place of Schumacher's comparisons against a "threshold" value, we add a
+ * "dither" value to the input pixel and then round the result to the nearest
+ * output value.  The dither value is equivalent to (0.5 - threshold) times
+ * the distance between output values.  For ordered dithering, we assume that
+ * the output colors are equally spaced; if not, results will probably be
+ * worse, since the dither may be too much or too little at a given point.
+ *
+ * The normal calculation would be to form pixel value + dither, range-limit
+ * this to 0..MAXJSAMPLE, and then index into the colorindex table as usual.
+ * We can skip the separate range-limiting step by extending the colorindex
+ * table in both directions.
+ */
+
+#define ODITHER_SIZE  16	/* dimension of dither matrix */
+/* NB: if ODITHER_SIZE is not a power of 2, ODITHER_MASK uses will break */
+#define ODITHER_CELLS (ODITHER_SIZE*ODITHER_SIZE)	/* # cells in matrix */
+#define ODITHER_MASK  (ODITHER_SIZE-1) /* mask for wrapping around counters */
+
+typedef int ODITHER_MATRIX[ODITHER_SIZE][ODITHER_SIZE];
+typedef int (*ODITHER_MATRIX_PTR)[ODITHER_SIZE];
+
+static const UINT8 base_dither_matrix[ODITHER_SIZE][ODITHER_SIZE] =
+{
+    /* Bayer's order-4 dither array.  Generated by the code given in
+     * Stephen Hawley's article "Ordered Dithering" in Graphics Gems I.
+     * The values in this array must range from 0 to ODITHER_CELLS-1.
+     */
+    {   0,192, 48,240, 12,204, 60,252,  3,195, 51,243, 15,207, 63,255 },
+    { 128, 64,176,112,140, 76,188,124,131, 67,179,115,143, 79,191,127 },
+    {  32,224, 16,208, 44,236, 28,220, 35,227, 19,211, 47,239, 31,223 },
+    { 160, 96,144, 80,172,108,156, 92,163, 99,147, 83,175,111,159, 95 },
+    {   8,200, 56,248,  4,196, 52,244, 11,203, 59,251,  7,199, 55,247 },
+    { 136, 72,184,120,132, 68,180,116,139, 75,187,123,135, 71,183,119 },
+    {  40,232, 24,216, 36,228, 20,212, 43,235, 27,219, 39,231, 23,215 },
+    { 168,104,152, 88,164,100,148, 84,171,107,155, 91,167,103,151, 87 },
+    {   2,194, 50,242, 14,206, 62,254,  1,193, 49,241, 13,205, 61,253 },
+    { 130, 66,178,114,142, 78,190,126,129, 65,177,113,141, 77,189,125 },
+    {  34,226, 18,210, 46,238, 30,222, 33,225, 17,209, 45,237, 29,221 },
+    { 162, 98,146, 82,174,110,158, 94,161, 97,145, 81,173,109,157, 93 },
+    {  10,202, 58,250,  6,198, 54,246,  9,201, 57,249,  5,197, 53,245 },
+    { 138, 74,186,122,134, 70,182,118,137, 73,185,121,133, 69,181,117 },
+    {  42,234, 26,218, 38,230, 22,214, 41,233, 25,217, 37,229, 21,213 },
+    { 170,106,154, 90,166,102,150, 86,169,105,153, 89,165,101,149, 85 }
+};
+
+
+/* Declarations for Floyd-Steinberg dithering.
+ *
+ * Errors are accumulated into the array fserrors[], at a resolution of
+ * 1/16th of a pixel count.  The error at a given pixel is propagated
+ * to its not-yet-processed neighbors using the standard F-S fractions,
+ *		...	(here)	7/16
+ *		3/16	5/16	1/16
+ * We work left-to-right on even rows, right-to-left on odd rows.
+ *
+ * We can get away with a single array (holding one row's worth of errors)
+ * by using it to store the current row's errors at pixel columns not yet
+ * processed, but the next row's errors at columns already processed.  We
+ * need only a few extra variables to hold the errors immediately around the
+ * current column.  (If we are lucky, those variables are in registers, but
+ * even if not, they're probably cheaper to access than array elements are.)
+ *
+ * The fserrors[] array is indexed [component#][position].
+ * We provide (#columns + 2) entries per component; the extra entry at each
+ * end saves us from special-casing the first and last pixels.
+ *
+ * Note: on a wide image, we might not have enough room in a PC's near data
+ * segment to hold the error array; so it is allocated with alloc_large.
+ */
+
+#if BITS_IN_JSAMPLE == 8
+typedef INT16 FSERROR;		/* 16 bits should be enough */
+typedef int LOCFSERROR;		/* use 'int' for calculation temps */
+#else
+typedef INT32 FSERROR;		/* may need more than 16 bits */
+typedef INT32 LOCFSERROR;	/* be sure calculation temps are big enough */
+#endif
+
+typedef FSERROR FAR *FSERRPTR;	/* pointer to error array (in FAR storage!) */
+
+
+/* Private subobject */
+
+#define MAX_Q_COMPS 4		/* max components I can handle */
+
+typedef struct
+{
+    struct jpeg_color_quantizer pub; /* public fields */
+
+    /* Initially allocated colormap is saved here */
+    JSAMPARRAY sv_colormap;	/* The color map as a 2-D pixel array */
+    int sv_actual;		/* number of entries in use */
+
+    JSAMPARRAY colorindex;	/* Precomputed mapping for speed */
+    /* colorindex[i][j] = index of color closest to pixel value j in component i,
+     * premultiplied as described above.  Since colormap indexes must fit into
+     * JSAMPLEs, the entries of this array will too.
+     */
+    boolean is_padded;		/* is the colorindex padded for odither? */
+
+    int Ncolors[MAX_Q_COMPS];	/* # of values alloced to each component */
+
+    /* Variables for ordered dithering */
+    int row_index;		/* cur row's vertical index in dither matrix */
+    ODITHER_MATRIX_PTR odither[MAX_Q_COMPS]; /* one dither array per component */
+
+    /* Variables for Floyd-Steinberg dithering */
+    FSERRPTR fserrors[MAX_Q_COMPS]; /* accumulated errors */
+    boolean on_odd_row;		/* flag to remember which row we are on */
+} my_cquantizer;
+
+typedef my_cquantizer * my_cquantize_ptr;
+
+
+/*
+ * Policy-making subroutines for create_colormap and create_colorindex.
+ * These routines determine the colormap to be used.  The rest of the module
+ * only assumes that the colormap is orthogonal.
+ *
+ *  * select_ncolors decides how to divvy up the available colors
+ *    among the components.
+ *  * output_value defines the set of representative values for a component.
+ *  * largest_input_value defines the mapping from input values to
+ *    representative values for a component.
+ * Note that the latter two routines may impose different policies for
+ * different components, though this is not currently done.
+ */
+
+
+LOCAL(int)
+select_ncolors (j_decompress_ptr cinfo, int Ncolors[])
+/* Determine allocation of desired colors to components, */
+/* and fill in Ncolors[] array to indicate choice. */
+/* Return value is total number of colors (product of Ncolors[] values). */
+{
+    int nc = cinfo->out_color_components; /* number of color components */
+    int max_colors = cinfo->desired_number_of_colors;
+    int total_colors, iroot, i, j;
+    boolean changed;
+    long temp;
+    static const int RGB_order[3] = { RGB_GREEN, RGB_RED, RGB_BLUE };
+
+    /* We can allocate at least the nc'th root of max_colors per component. */
+    /* Compute floor(nc'th root of max_colors). */
+    iroot = 1;
+    do
+    {
+        iroot++;
+        temp = iroot;		/* set temp = iroot ** nc */
+        for (i = 1; i < nc; i++)
+        {
+            temp *= iroot;
+        }
+    }
+    while (temp <= (long) max_colors);   /* repeat till iroot exceeds root */
+    iroot--;			/* now iroot = floor(root) */
+
+    /* Must have at least 2 color values per component */
+    if (iroot < 2)
+    {
+        ERREXIT1(cinfo, JERR_QUANT_FEW_COLORS, (int) temp);
+    }
+
+    /* Initialize to iroot color values for each component */
+    total_colors = 1;
+    for (i = 0; i < nc; i++)
+    {
+        Ncolors[i] = iroot;
+        total_colors *= iroot;
+    }
+    /* We may be able to increment the count for one or more components without
+     * exceeding max_colors, though we know not all can be incremented.
+     * Sometimes, the first component can be incremented more than once!
+     * (Example: for 16 colors, we start at 2*2*2, go to 3*2*2, then 4*2*2.)
+     * In RGB colorspace, try to increment G first, then R, then B.
+     */
+    do
+    {
+        changed = FALSE;
+        for (i = 0; i < nc; i++)
+        {
+            j = (cinfo->out_color_space == JCS_RGB ? RGB_order[i] : i);
+            /* calculate new total_colors if Ncolors[j] is incremented */
+            temp = total_colors / Ncolors[j];
+            temp *= Ncolors[j]+1;	/* done in long arith to avoid oflo */
+            if (temp > (long) max_colors)
+            {
+                break;    /* won't fit, done with this pass */
+            }
+            Ncolors[j]++;		/* OK, apply the increment */
+            total_colors = (int) temp;
+            changed = TRUE;
+        }
+    }
+    while (changed);
+
+    return total_colors;
+}
+
+
+LOCAL(int)
+output_value (j_decompress_ptr cinfo, int ci, int j, int maxj)
+/* Return j'th output value, where j will range from 0 to maxj */
+/* The output values must fall in 0..MAXJSAMPLE in increasing order */
+{
+    /* We always provide values 0 and MAXJSAMPLE for each component;
+     * any additional values are equally spaced between these limits.
+     * (Forcing the upper and lower values to the limits ensures that
+     * dithering can't produce a color outside the selected gamut.)
+     */
+    return (int) (((INT32) j * MAXJSAMPLE + maxj/2) / maxj);
+}
+
+
+LOCAL(int)
+largest_input_value (j_decompress_ptr cinfo, int ci, int j, int maxj)
+/* Return largest input value that should map to j'th output value */
+/* Must have largest(j=0) >= 0, and largest(j=maxj) >= MAXJSAMPLE */
+{
+    /* Breakpoints are halfway between values returned by output_value */
+    return (int) (((INT32) (2*j + 1) * MAXJSAMPLE + maxj) / (2*maxj));
+}
+
+
+/*
+ * Create the colormap.
+ */
+
+LOCAL(void)
+create_colormap (j_decompress_ptr cinfo)
+{
+    my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
+    JSAMPARRAY colormap;		/* Created colormap */
+    int total_colors;		/* Number of distinct output colors */
+    int i,j,k, nci, blksize, blkdist, ptr, val;
+
+    /* Select number of colors for each component */
+    total_colors = select_ncolors(cinfo, cquantize->Ncolors);
+
+    /* Report selected color counts */
+    if (cinfo->out_color_components == 3)
+        TRACEMS4(cinfo, 1, JTRC_QUANT_3_NCOLORS,
+                 total_colors, cquantize->Ncolors[0],
+                 cquantize->Ncolors[1], cquantize->Ncolors[2]);
+    else
+    {
+        TRACEMS1(cinfo, 1, JTRC_QUANT_NCOLORS, total_colors);
+    }
+
+    /* Allocate and fill in the colormap. */
+    /* The colors are ordered in the map in standard row-major order, */
+    /* i.e. rightmost (highest-indexed) color changes most rapidly. */
+
+    colormap = (*cinfo->mem->alloc_sarray)
+               ((j_common_ptr) cinfo, JPOOL_IMAGE,
+                (JDIMENSION) total_colors, (JDIMENSION) cinfo->out_color_components);
+
+    /* blksize is number of adjacent repeated entries for a component */
+    /* blkdist is distance between groups of identical entries for a component */
+    blkdist = total_colors;
+
+    for (i = 0; i < cinfo->out_color_components; i++)
+    {
+        /* fill in colormap entries for i'th color component */
+        nci = cquantize->Ncolors[i]; /* # of distinct values for this color */
+        blksize = blkdist / nci;
+        for (j = 0; j < nci; j++)
+        {
+            /* Compute j'th output value (out of nci) for component */
+            val = output_value(cinfo, i, j, nci-1);
+            /* Fill in all colormap entries that have this value of this component */
+            for (ptr = j * blksize; ptr < total_colors; ptr += blkdist)
+            {
+                /* fill in blksize entries beginning at ptr */
+                for (k = 0; k < blksize; k++)
+                {
+                    colormap[i][ptr+k] = (JSAMPLE) val;
+                }
+            }
+        }
+        blkdist = blksize;		/* blksize of this color is blkdist of next */
+    }
+
+    /* Save the colormap in private storage,
+     * where it will survive color quantization mode changes.
+     */
+    cquantize->sv_colormap = colormap;
+    cquantize->sv_actual = total_colors;
+}
+
+
+/*
+ * Create the color index table.
+ */
+
+LOCAL(void)
+create_colorindex (j_decompress_ptr cinfo)
+{
+    my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
+    JSAMPROW indexptr;
+    int i,j,k, nci, blksize, val, pad;
+
+    /* For ordered dither, we pad the color index tables by MAXJSAMPLE in
+     * each direction (input index values can be -MAXJSAMPLE .. 2*MAXJSAMPLE).
+     * This is not necessary in the other dithering modes.  However, we
+     * flag whether it was done in case user changes dithering mode.
+     */
+    if (cinfo->dither_mode == JDITHER_ORDERED)
+    {
+        pad = MAXJSAMPLE*2;
+        cquantize->is_padded = TRUE;
+    }
+    else
+    {
+        pad = 0;
+        cquantize->is_padded = FALSE;
+    }
+
+    cquantize->colorindex = (*cinfo->mem->alloc_sarray)
+                            ((j_common_ptr) cinfo, JPOOL_IMAGE,
+                             (JDIMENSION) (MAXJSAMPLE+1 + pad),
+                             (JDIMENSION) cinfo->out_color_components);
+
+    /* blksize is number of adjacent repeated entries for a component */
+    blksize = cquantize->sv_actual;
+
+    for (i = 0; i < cinfo->out_color_components; i++)
+    {
+        /* fill in colorindex entries for i'th color component */
+        nci = cquantize->Ncolors[i]; /* # of distinct values for this color */
+        blksize = blksize / nci;
+
+        /* adjust colorindex pointers to provide padding at negative indexes. */
+        if (pad)
+        {
+            cquantize->colorindex[i] += MAXJSAMPLE;
+        }
+
+        /* in loop, val = index of current output value, */
+        /* and k = largest j that maps to current val */
+        indexptr = cquantize->colorindex[i];
+        val = 0;
+        k = largest_input_value(cinfo, i, 0, nci-1);
+        for (j = 0; j <= MAXJSAMPLE; j++)
+        {
+            while (j > k)		/* advance val if past boundary */
+            {
+                k = largest_input_value(cinfo, i, ++val, nci-1);
+            }
+            /* premultiply so that no multiplication needed in main processing */
+            indexptr[j] = (JSAMPLE) (val * blksize);
+        }
+        /* Pad at both ends if necessary */
+        if (pad)
+            for (j = 1; j <= MAXJSAMPLE; j++)
+            {
+                indexptr[-j] = indexptr[0];
+                indexptr[MAXJSAMPLE+j] = indexptr[MAXJSAMPLE];
+            }
+    }
+}
+
+
+/*
+ * Create an ordered-dither array for a component having ncolors
+ * distinct output values.
+ */
+
+LOCAL(ODITHER_MATRIX_PTR)
+make_odither_array (j_decompress_ptr cinfo, int ncolors)
+{
+    ODITHER_MATRIX_PTR odither;
+    int j,k;
+    INT32 num,den;
+
+    odither = (ODITHER_MATRIX_PTR)
+              (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
+                                          SIZEOF(ODITHER_MATRIX));
+    /* The inter-value distance for this color is MAXJSAMPLE/(ncolors-1).
+     * Hence the dither value for the matrix cell with fill order f
+     * (f=0..N-1) should be (N-1-2*f)/(2*N) * MAXJSAMPLE/(ncolors-1).
+     * On 16-bit-int machine, be careful to avoid overflow.
+     */
+    den = 2 * ODITHER_CELLS * ((INT32) (ncolors - 1));
+    for (j = 0; j < ODITHER_SIZE; j++)
+    {
+        for (k = 0; k < ODITHER_SIZE; k++)
+        {
+            num = ((INT32) (ODITHER_CELLS-1 - 2*((int)base_dither_matrix[j][k])))
+                  * MAXJSAMPLE;
+            /* Ensure round towards zero despite C's lack of consistency
+             * about rounding negative values in integer division...
+             */
+            odither[j][k] = (int) (num<0 ? -((-num)/den) : num/den);
+        }
+    }
+    return odither;
+}
+
+
+/*
+ * Create the ordered-dither tables.
+ * Components having the same number of representative colors may
+ * share a dither table.
+ */
+
+LOCAL(void)
+create_odither_tables (j_decompress_ptr cinfo)
+{
+    my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
+    ODITHER_MATRIX_PTR odither;
+    int i, j, nci;
+
+    for (i = 0; i < cinfo->out_color_components; i++)
+    {
+        nci = cquantize->Ncolors[i]; /* # of distinct values for this color */
+        odither = NULL;		/* search for matching prior component */
+        for (j = 0; j < i; j++)
+        {
+            if (nci == cquantize->Ncolors[j])
+            {
+                odither = cquantize->odither[j];
+                break;
+            }
+        }
+        if (odither == NULL)	/* need a new table? */
+        {
+            odither = make_odither_array(cinfo, nci);
+        }
+        cquantize->odither[i] = odither;
+    }
+}
+
+
+/*
+ * Map some rows of pixels to the output colormapped representation.
+ */
+
+METHODDEF(void)
+color_quantize (j_decompress_ptr cinfo, JSAMPARRAY input_buf,
+                JSAMPARRAY output_buf, int num_rows)
+/* General case, no dithering */
+{
+    my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
+    JSAMPARRAY colorindex = cquantize->colorindex;
+    register int pixcode, ci;
+    register JSAMPROW ptrin, ptrout;
+    int row;
+    JDIMENSION col;
+    JDIMENSION width = cinfo->output_width;
+    register int nc = cinfo->out_color_components;
+
+    for (row = 0; row < num_rows; row++)
+    {
+        ptrin = input_buf[row];
+        ptrout = output_buf[row];
+        for (col = width; col > 0; col--)
+        {
+            pixcode = 0;
+            for (ci = 0; ci < nc; ci++)
+            {
+                pixcode += GETJSAMPLE(colorindex[ci][GETJSAMPLE(*ptrin++)]);
+            }
+            *ptrout++ = (JSAMPLE) pixcode;
+        }
+    }
+}
+
+
+METHODDEF(void)
+color_quantize3 (j_decompress_ptr cinfo, JSAMPARRAY input_buf,
+                 JSAMPARRAY output_buf, int num_rows)
+/* Fast path for out_color_components==3, no dithering */
+{
+    my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
+    register int pixcode;
+    register JSAMPROW ptrin, ptrout;
+    JSAMPROW colorindex0 = cquantize->colorindex[0];
+    JSAMPROW colorindex1 = cquantize->colorindex[1];
+    JSAMPROW colorindex2 = cquantize->colorindex[2];
+    int row;
+    JDIMENSION col;
+    JDIMENSION width = cinfo->output_width;
+
+    for (row = 0; row < num_rows; row++)
+    {
+        ptrin = input_buf[row];
+        ptrout = output_buf[row];
+        for (col = width; col > 0; col--)
+        {
+            pixcode  = GETJSAMPLE(colorindex0[GETJSAMPLE(*ptrin++)]);
+            pixcode += GETJSAMPLE(colorindex1[GETJSAMPLE(*ptrin++)]);
+            pixcode += GETJSAMPLE(colorindex2[GETJSAMPLE(*ptrin++)]);
+            *ptrout++ = (JSAMPLE) pixcode;
+        }
+    }
+}
+
+
+METHODDEF(void)
+quantize_ord_dither (j_decompress_ptr cinfo, JSAMPARRAY input_buf,
+                     JSAMPARRAY output_buf, int num_rows)
+/* General case, with ordered dithering */
+{
+    my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
+    register JSAMPROW input_ptr;
+    register JSAMPROW output_ptr;
+    JSAMPROW colorindex_ci;
+    int * dither;			/* points to active row of dither matrix */
+    int row_index, col_index;	/* current indexes into dither matrix */
+    int nc = cinfo->out_color_components;
+    int ci;
+    int row;
+    JDIMENSION col;
+    JDIMENSION width = cinfo->output_width;
+
+    for (row = 0; row < num_rows; row++)
+    {
+        /* Initialize output values to 0 so can process components separately */
+        jzero_far((void FAR *) output_buf[row],
+                  (size_t) (width * SIZEOF(JSAMPLE)));
+        row_index = cquantize->row_index;
+        for (ci = 0; ci < nc; ci++)
+        {
+            input_ptr = input_buf[row] + ci;
+            output_ptr = output_buf[row];
+            colorindex_ci = cquantize->colorindex[ci];
+            dither = cquantize->odither[ci][row_index];
+            col_index = 0;
+
+            for (col = width; col > 0; col--)
+            {
+                /* Form pixel value + dither, range-limit to 0..MAXJSAMPLE,
+                 * select output value, accumulate into output code for this pixel.
+                 * Range-limiting need not be done explicitly, as we have extended
+                 * the colorindex table to produce the right answers for out-of-range
+                 * inputs.  The maximum dither is +- MAXJSAMPLE; this sets the
+                 * required amount of padding.
+                 */
+                *output_ptr += colorindex_ci[GETJSAMPLE(*input_ptr)+dither[col_index]];
+                input_ptr += nc;
+                output_ptr++;
+                col_index = (col_index + 1) & ODITHER_MASK;
+            }
+        }
+        /* Advance row index for next row */
+        row_index = (row_index + 1) & ODITHER_MASK;
+        cquantize->row_index = row_index;
+    }
+}
+
+
+METHODDEF(void)
+quantize3_ord_dither (j_decompress_ptr cinfo, JSAMPARRAY input_buf,
+                      JSAMPARRAY output_buf, int num_rows)
+/* Fast path for out_color_components==3, with ordered dithering */
+{
+    my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
+    register int pixcode;
+    register JSAMPROW input_ptr;
+    register JSAMPROW output_ptr;
+    JSAMPROW colorindex0 = cquantize->colorindex[0];
+    JSAMPROW colorindex1 = cquantize->colorindex[1];
+    JSAMPROW colorindex2 = cquantize->colorindex[2];
+    int * dither0;		/* points to active row of dither matrix */
+    int * dither1;
+    int * dither2;
+    int row_index, col_index;	/* current indexes into dither matrix */
+    int row;
+    JDIMENSION col;
+    JDIMENSION width = cinfo->output_width;
+
+    for (row = 0; row < num_rows; row++)
+    {
+        row_index = cquantize->row_index;
+        input_ptr = input_buf[row];
+        output_ptr = output_buf[row];
+        dither0 = cquantize->odither[0][row_index];
+        dither1 = cquantize->odither[1][row_index];
+        dither2 = cquantize->odither[2][row_index];
+        col_index = 0;
+
+        for (col = width; col > 0; col--)
+        {
+            pixcode  = GETJSAMPLE(colorindex0[GETJSAMPLE(*input_ptr++) +
+                                              dither0[col_index]]);
+            pixcode += GETJSAMPLE(colorindex1[GETJSAMPLE(*input_ptr++) +
+                                              dither1[col_index]]);
+            pixcode += GETJSAMPLE(colorindex2[GETJSAMPLE(*input_ptr++) +
+                                              dither2[col_index]]);
+            *output_ptr++ = (JSAMPLE) pixcode;
+            col_index = (col_index + 1) & ODITHER_MASK;
+        }
+        row_index = (row_index + 1) & ODITHER_MASK;
+        cquantize->row_index = row_index;
+    }
+}
+
+
+METHODDEF(void)
+quantize_fs_dither (j_decompress_ptr cinfo, JSAMPARRAY input_buf,
+                    JSAMPARRAY output_buf, int num_rows)
+/* General case, with Floyd-Steinberg dithering */
+{
+    my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
+    register LOCFSERROR cur;	/* current error or pixel value */
+    LOCFSERROR belowerr;		/* error for pixel below cur */
+    LOCFSERROR bpreverr;		/* error for below/prev col */
+    LOCFSERROR bnexterr;		/* error for below/next col */
+    LOCFSERROR delta;
+    register FSERRPTR errorptr;	/* => fserrors[] at column before current */
+    register JSAMPROW input_ptr;
+    register JSAMPROW output_ptr;
+    JSAMPROW colorindex_ci;
+    JSAMPROW colormap_ci;
+    int pixcode;
+    int nc = cinfo->out_color_components;
+    int dir;			/* 1 for left-to-right, -1 for right-to-left */
+    int dirnc;			/* dir * nc */
+    int ci;
+    int row;
+    JDIMENSION col;
+    JDIMENSION width = cinfo->output_width;
+    JSAMPLE *range_limit = cinfo->sample_range_limit;
+    SHIFT_TEMPS
+
+    for (row = 0; row < num_rows; row++)
+    {
+        /* Initialize output values to 0 so can process components separately */
+        jzero_far((void FAR *) output_buf[row],
+                  (size_t) (width * SIZEOF(JSAMPLE)));
+        for (ci = 0; ci < nc; ci++)
+        {
+            input_ptr = input_buf[row] + ci;
+            output_ptr = output_buf[row];
+            if (cquantize->on_odd_row)
+            {
+                /* work right to left in this row */
+                input_ptr += (width-1) * nc; /* so point to rightmost pixel */
+                output_ptr += width-1;
+                dir = -1;
+                dirnc = -nc;
+                errorptr = cquantize->fserrors[ci] + (width+1); /* => entry after last column */
+            }
+            else
+            {
+                /* work left to right in this row */
+                dir = 1;
+                dirnc = nc;
+                errorptr = cquantize->fserrors[ci]; /* => entry before first column */
+            }
+            colorindex_ci = cquantize->colorindex[ci];
+            colormap_ci = cquantize->sv_colormap[ci];
+            /* Preset error values: no error propagated to first pixel from left */
+            cur = 0;
+            /* and no error propagated to row below yet */
+            belowerr = bpreverr = 0;
+
+            for (col = width; col > 0; col--)
+            {
+                /* cur holds the error propagated from the previous pixel on the
+                 * current line.  Add the error propagated from the previous line
+                 * to form the complete error correction term for this pixel, and
+                 * round the error term (which is expressed * 16) to an integer.
+                 * RIGHT_SHIFT rounds towards minus infinity, so adding 8 is correct
+                 * for either sign of the error value.
+                 * Note: errorptr points to *previous* column's array entry.
+                 */
+                cur = RIGHT_SHIFT(cur + errorptr[dir] + 8, 4);
+                /* Form pixel value + error, and range-limit to 0..MAXJSAMPLE.
+                 * The maximum error is +- MAXJSAMPLE; this sets the required size
+                 * of the range_limit array.
+                 */
+                cur += GETJSAMPLE(*input_ptr);
+                cur = GETJSAMPLE(range_limit[cur]);
+                /* Select output value, accumulate into output code for this pixel */
+                pixcode = GETJSAMPLE(colorindex_ci[cur]);
+                *output_ptr += (JSAMPLE) pixcode;
+                /* Compute actual representation error at this pixel */
+                /* Note: we can do this even though we don't have the final */
+                /* pixel code, because the colormap is orthogonal. */
+                cur -= GETJSAMPLE(colormap_ci[pixcode]);
+                /* Compute error fractions to be propagated to adjacent pixels.
+                 * Add these into the running sums, and simultaneously shift the
+                 * next-line error sums left by 1 column.
+                 */
+                bnexterr = cur;
+                delta = cur * 2;
+                cur += delta;		/* form error * 3 */
+                errorptr[0] = (FSERROR) (bpreverr + cur);
+                cur += delta;		/* form error * 5 */
+                bpreverr = belowerr + cur;
+                belowerr = bnexterr;
+                cur += delta;		/* form error * 7 */
+                /* At this point cur contains the 7/16 error value to be propagated
+                 * to the next pixel on the current line, and all the errors for the
+                 * next line have been shifted over. We are therefore ready to move on.
+                 */
+                input_ptr += dirnc;	/* advance input ptr to next column */
+                output_ptr += dir;	/* advance output ptr to next column */
+                errorptr += dir;	/* advance errorptr to current column */
+            }
+            /* Post-loop cleanup: we must unload the final error value into the
+             * final fserrors[] entry.  Note we need not unload belowerr because
+             * it is for the dummy column before or after the actual array.
+             */
+            errorptr[0] = (FSERROR) bpreverr; /* unload prev err into array */
+        }
+        cquantize->on_odd_row = (cquantize->on_odd_row ? FALSE : TRUE);
+    }
+}
+
+
+/*
+ * Allocate workspace for Floyd-Steinberg errors.
+ */
+
+LOCAL(void)
+alloc_fs_workspace (j_decompress_ptr cinfo)
+{
+    my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
+    size_t arraysize;
+    int i;
+
+    arraysize = (size_t) ((cinfo->output_width + 2) * SIZEOF(FSERROR));
+    for (i = 0; i < cinfo->out_color_components; i++)
+    {
+        cquantize->fserrors[i] = (FSERRPTR)
+                                 (*cinfo->mem->alloc_large)((j_common_ptr) cinfo, JPOOL_IMAGE, arraysize);
+    }
+}
+
+
+/*
+ * Initialize for one-pass color quantization.
+ */
+
+METHODDEF(void)
+start_pass_1_quant (j_decompress_ptr cinfo, boolean is_pre_scan)
+{
+    my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
+    size_t arraysize;
+    int i;
+
+    /* Install my colormap. */
+    cinfo->colormap = cquantize->sv_colormap;
+    cinfo->actual_number_of_colors = cquantize->sv_actual;
+
+    /* Initialize for desired dithering mode. */
+    switch (cinfo->dither_mode)
+    {
+    case JDITHER_NONE:
+        if (cinfo->out_color_components == 3)
+        {
+            cquantize->pub.color_quantize = color_quantize3;
+        }
+        else
+        {
+            cquantize->pub.color_quantize = color_quantize;
+        }
+        break;
+    case JDITHER_ORDERED:
+        if (cinfo->out_color_components == 3)
+        {
+            cquantize->pub.color_quantize = quantize3_ord_dither;
+        }
+        else
+        {
+            cquantize->pub.color_quantize = quantize_ord_dither;
+        }
+        cquantize->row_index = 0;	/* initialize state for ordered dither */
+        /* If user changed to ordered dither from another mode,
+         * we must recreate the color index table with padding.
+         * This will cost extra space, but probably isn't very likely.
+         */
+        if (! cquantize->is_padded)
+        {
+            create_colorindex(cinfo);
+        }
+        /* Create ordered-dither tables if we didn't already. */
+        if (cquantize->odither[0] == NULL)
+        {
+            create_odither_tables(cinfo);
+        }
+        break;
+    case JDITHER_FS:
+        cquantize->pub.color_quantize = quantize_fs_dither;
+        cquantize->on_odd_row = FALSE; /* initialize state for F-S dither */
+        /* Allocate Floyd-Steinberg workspace if didn't already. */
+        if (cquantize->fserrors[0] == NULL)
+        {
+            alloc_fs_workspace(cinfo);
+        }
+        /* Initialize the propagated errors to zero. */
+        arraysize = (size_t) ((cinfo->output_width + 2) * SIZEOF(FSERROR));
+        for (i = 0; i < cinfo->out_color_components; i++)
+        {
+            jzero_far((void FAR *) cquantize->fserrors[i], arraysize);
+        }
+        break;
+    default:
+        ERREXIT(cinfo, JERR_NOT_COMPILED);
+        break;
+    }
+}
+
+
+/*
+ * Finish up at the end of the pass.
+ */
+
+METHODDEF(void)
+finish_pass_1_quant (j_decompress_ptr cinfo)
+{
+    /* no work in 1-pass case */
+}
+
+
+/*
+ * Switch to a new external colormap between output passes.
+ * Shouldn't get to this module!
+ */
+
+METHODDEF(void)
+new_color_map_1_quant (j_decompress_ptr cinfo)
+{
+    ERREXIT(cinfo, JERR_MODE_CHANGE);
+}
+
+
+/*
+ * Module initialization routine for 1-pass color quantization.
+ */
+
+GLOBAL(void)
+jinit_1pass_quantizer (j_decompress_ptr cinfo)
+{
+    my_cquantize_ptr cquantize;
+
+    cquantize = (my_cquantize_ptr)
+                (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
+                                            SIZEOF(my_cquantizer));
+    cinfo->cquantize = (struct jpeg_color_quantizer *) cquantize;
+    cquantize->pub.start_pass = start_pass_1_quant;
+    cquantize->pub.finish_pass = finish_pass_1_quant;
+    cquantize->pub.new_color_map = new_color_map_1_quant;
+    cquantize->fserrors[0] = NULL; /* Flag FS workspace not allocated */
+    cquantize->odither[0] = NULL;	/* Also flag odither arrays not allocated */
+
+    /* Make sure my internal arrays won't overflow */
+    if (cinfo->out_color_components > MAX_Q_COMPS)
+    {
+        ERREXIT1(cinfo, JERR_QUANT_COMPONENTS, MAX_Q_COMPS);
+    }
+    /* Make sure colormap indexes can be represented by JSAMPLEs */
+    if (cinfo->desired_number_of_colors > (MAXJSAMPLE+1))
+    {
+        ERREXIT1(cinfo, JERR_QUANT_MANY_COLORS, MAXJSAMPLE+1);
+    }
+
+    /* Create the colormap and color index table. */
+    create_colormap(cinfo);
+    create_colorindex(cinfo);
+
+    /* Allocate Floyd-Steinberg workspace now if requested.
+     * We do this now since it is FAR storage and may affect the memory
+     * manager's space calculations.  If the user changes to FS dither
+     * mode in a later pass, we will allocate the space then, and will
+     * possibly overrun the max_memory_to_use setting.
+     */
+    if (cinfo->dither_mode == JDITHER_FS)
+    {
+        alloc_fs_workspace(cinfo);
+    }
+}
+
+#endif /* QUANT_1PASS_SUPPORTED */
diff -NEaurb neo/renderer/jpeg-8c/jquant2.c neo/renderer/jpeg-8c/jquant2.c
--- neo/renderer/jpeg-8c/jquant2.c	1970-01-01 00:00:00 +0000
+++ neo/renderer/jpeg-8c/jquant2.c	2012-11-17 01:20:40 +0000
@@ -0,0 +1,1463 @@
+/*
+ * jquant2.c
+ *
+ * Copyright (C) 1991-1996, Thomas G. Lane.
+ * This file is part of the Independent JPEG Group's software.
+ * For conditions of distribution and use, see the accompanying README file.
+ *
+ * This file contains 2-pass color quantization (color mapping) routines.
+ * These routines provide selection of a custom color map for an image,
+ * followed by mapping of the image to that color map, with optional
+ * Floyd-Steinberg dithering.
+ * It is also possible to use just the second pass to map to an arbitrary
+ * externally-given color map.
+ *
+ * Note: ordered dithering is not supported, since there isn't any fast
+ * way to compute intercolor distances; it's unclear that ordered dither's
+ * fundamental assumptions even hold with an irregularly spaced color map.
+ */
+
+#define JPEG_INTERNALS
+#include "jinclude.h"
+#include "jpeglib.h"
+
+#ifdef QUANT_2PASS_SUPPORTED
+
+
+/*
+ * This module implements the well-known Heckbert paradigm for color
+ * quantization.  Most of the ideas used here can be traced back to
+ * Heckbert's seminal paper
+ *   Heckbert, Paul.  "Color Image Quantization for Frame Buffer Display",
+ *   Proc. SIGGRAPH '82, Computer Graphics v.16 #3 (July 1982), pp 297-304.
+ *
+ * In the first pass over the image, we accumulate a histogram showing the
+ * usage count of each possible color.  To keep the histogram to a reasonable
+ * size, we reduce the precision of the input; typical practice is to retain
+ * 5 or 6 bits per color, so that 8 or 4 different input values are counted
+ * in the same histogram cell.
+ *
+ * Next, the color-selection step begins with a box representing the whole
+ * color space, and repeatedly splits the "largest" remaining box until we
+ * have as many boxes as desired colors.  Then the mean color in each
+ * remaining box becomes one of the possible output colors.
+ *
+ * The second pass over the image maps each input pixel to the closest output
+ * color (optionally after applying a Floyd-Steinberg dithering correction).
+ * This mapping is logically trivial, but making it go fast enough requires
+ * considerable care.
+ *
+ * Heckbert-style quantizers vary a good deal in their policies for choosing
+ * the "largest" box and deciding where to cut it.  The particular policies
+ * used here have proved out well in experimental comparisons, but better ones
+ * may yet be found.
+ *
+ * In earlier versions of the IJG code, this module quantized in YCbCr color
+ * space, processing the raw upsampled data without a color conversion step.
+ * This allowed the color conversion math to be done only once per colormap
+ * entry, not once per pixel.  However, that optimization precluded other
+ * useful optimizations (such as merging color conversion with upsampling)
+ * and it also interfered with desired capabilities such as quantizing to an
+ * externally-supplied colormap.  We have therefore abandoned that approach.
+ * The present code works in the post-conversion color space, typically RGB.
+ *
+ * To improve the visual quality of the results, we actually work in scaled
+ * RGB space, giving G distances more weight than R, and R in turn more than
+ * B.  To do everything in integer math, we must use integer scale factors.
+ * The 2/3/1 scale factors used here correspond loosely to the relative
+ * weights of the colors in the NTSC grayscale equation.
+ * If you want to use this code to quantize a non-RGB color space, you'll
+ * probably need to change these scale factors.
+ */
+
+#define R_SCALE 2		/* scale R distances by this much */
+#define G_SCALE 3		/* scale G distances by this much */
+#define B_SCALE 1		/* and B by this much */
+
+/* Relabel R/G/B as components 0/1/2, respecting the RGB ordering defined
+ * in jmorecfg.h.  As the code stands, it will do the right thing for R,G,B
+ * and B,G,R orders.  If you define some other weird order in jmorecfg.h,
+ * you'll get compile errors until you extend this logic.  In that case
+ * you'll probably want to tweak the histogram sizes too.
+ */
+
+#if RGB_RED == 0
+#define C0_SCALE R_SCALE
+#endif
+#if RGB_BLUE == 0
+#define C0_SCALE B_SCALE
+#endif
+#if RGB_GREEN == 1
+#define C1_SCALE G_SCALE
+#endif
+#if RGB_RED == 2
+#define C2_SCALE R_SCALE
+#endif
+#if RGB_BLUE == 2
+#define C2_SCALE B_SCALE
+#endif
+
+
+/*
+ * First we have the histogram data structure and routines for creating it.
+ *
+ * The number of bits of precision can be adjusted by changing these symbols.
+ * We recommend keeping 6 bits for G and 5 each for R and B.
+ * If you have plenty of memory and cycles, 6 bits all around gives marginally
+ * better results; if you are short of memory, 5 bits all around will save
+ * some space but degrade the results.
+ * To maintain a fully accurate histogram, we'd need to allocate a "long"
+ * (preferably unsigned long) for each cell.  In practice this is overkill;
+ * we can get by with 16 bits per cell.  Few of the cell counts will overflow,
+ * and clamping those that do overflow to the maximum value will give close-
+ * enough results.  This reduces the recommended histogram size from 256Kb
+ * to 128Kb, which is a useful savings on PC-class machines.
+ * (In the second pass the histogram space is re-used for pixel mapping data;
+ * in that capacity, each cell must be able to store zero to the number of
+ * desired colors.  16 bits/cell is plenty for that too.)
+ * Since the JPEG code is intended to run in small memory model on 80x86
+ * machines, we can't just allocate the histogram in one chunk.  Instead
+ * of a true 3-D array, we use a row of pointers to 2-D arrays.  Each
+ * pointer corresponds to a C0 value (typically 2^5 = 32 pointers) and
+ * each 2-D array has 2^6*2^5 = 2048 or 2^6*2^6 = 4096 entries.  Note that
+ * on 80x86 machines, the pointer row is in near memory but the actual
+ * arrays are in far memory (same arrangement as we use for image arrays).
+ */
+
+#define MAXNUMCOLORS  (MAXJSAMPLE+1) /* maximum size of colormap */
+
+/* These will do the right thing for either R,G,B or B,G,R color order,
+ * but you may not like the results for other color orders.
+ */
+#define HIST_C0_BITS  5		/* bits of precision in R/B histogram */
+#define HIST_C1_BITS  6		/* bits of precision in G histogram */
+#define HIST_C2_BITS  5		/* bits of precision in B/R histogram */
+
+/* Number of elements along histogram axes. */
+#define HIST_C0_ELEMS  (1<<HIST_C0_BITS)
+#define HIST_C1_ELEMS  (1<<HIST_C1_BITS)
+#define HIST_C2_ELEMS  (1<<HIST_C2_BITS)
+
+/* These are the amounts to shift an input value to get a histogram index. */
+#define C0_SHIFT  (BITS_IN_JSAMPLE-HIST_C0_BITS)
+#define C1_SHIFT  (BITS_IN_JSAMPLE-HIST_C1_BITS)
+#define C2_SHIFT  (BITS_IN_JSAMPLE-HIST_C2_BITS)
+
+
+typedef UINT16 histcell;	/* histogram cell; prefer an unsigned type */
+
+typedef histcell FAR * histptr;	/* for pointers to histogram cells */
+
+typedef histcell hist1d[HIST_C2_ELEMS]; /* typedefs for the array */
+typedef hist1d FAR * hist2d;	/* type for the 2nd-level pointers */
+typedef hist2d * hist3d;	/* type for top-level pointer */
+
+
+/* Declarations for Floyd-Steinberg dithering.
+ *
+ * Errors are accumulated into the array fserrors[], at a resolution of
+ * 1/16th of a pixel count.  The error at a given pixel is propagated
+ * to its not-yet-processed neighbors using the standard F-S fractions,
+ *		...	(here)	7/16
+ *		3/16	5/16	1/16
+ * We work left-to-right on even rows, right-to-left on odd rows.
+ *
+ * We can get away with a single array (holding one row's worth of errors)
+ * by using it to store the current row's errors at pixel columns not yet
+ * processed, but the next row's errors at columns already processed.  We
+ * need only a few extra variables to hold the errors immediately around the
+ * current column.  (If we are lucky, those variables are in registers, but
+ * even if not, they're probably cheaper to access than array elements are.)
+ *
+ * The fserrors[] array has (#columns + 2) entries; the extra entry at
+ * each end saves us from special-casing the first and last pixels.
+ * Each entry is three values long, one value for each color component.
+ *
+ * Note: on a wide image, we might not have enough room in a PC's near data
+ * segment to hold the error array; so it is allocated with alloc_large.
+ */
+
+#if BITS_IN_JSAMPLE == 8
+typedef INT16 FSERROR;		/* 16 bits should be enough */
+typedef int LOCFSERROR;		/* use 'int' for calculation temps */
+#else
+typedef INT32 FSERROR;		/* may need more than 16 bits */
+typedef INT32 LOCFSERROR;	/* be sure calculation temps are big enough */
+#endif
+
+typedef FSERROR FAR *FSERRPTR;	/* pointer to error array (in FAR storage!) */
+
+
+/* Private subobject */
+
+typedef struct
+{
+    struct jpeg_color_quantizer pub; /* public fields */
+
+    /* Space for the eventually created colormap is stashed here */
+    JSAMPARRAY sv_colormap;	/* colormap allocated at init time */
+    int desired;			/* desired # of colors = size of colormap */
+
+    /* Variables for accumulating image statistics */
+    hist3d histogram;		/* pointer to the histogram */
+
+    boolean needs_zeroed;		/* TRUE if next pass must zero histogram */
+
+    /* Variables for Floyd-Steinberg dithering */
+    FSERRPTR fserrors;		/* accumulated errors */
+    boolean on_odd_row;		/* flag to remember which row we are on */
+    int * error_limiter;		/* table for clamping the applied error */
+} my_cquantizer;
+
+typedef my_cquantizer * my_cquantize_ptr;
+
+
+/*
+ * Prescan some rows of pixels.
+ * In this module the prescan simply updates the histogram, which has been
+ * initialized to zeroes by start_pass.
+ * An output_buf parameter is required by the method signature, but no data
+ * is actually output (in fact the buffer controller is probably passing a
+ * NULL pointer).
+ */
+
+METHODDEF(void)
+prescan_quantize (j_decompress_ptr cinfo, JSAMPARRAY input_buf,
+                  JSAMPARRAY output_buf, int num_rows)
+{
+    my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
+    register JSAMPROW ptr;
+    register histptr histp;
+    register hist3d histogram = cquantize->histogram;
+    int row;
+    JDIMENSION col;
+    JDIMENSION width = cinfo->output_width;
+
+    for (row = 0; row < num_rows; row++)
+    {
+        ptr = input_buf[row];
+        for (col = width; col > 0; col--)
+        {
+            /* get pixel value and index into the histogram */
+            histp = & histogram[GETJSAMPLE(ptr[0]) >> C0_SHIFT]
+                    [GETJSAMPLE(ptr[1]) >> C1_SHIFT]
+                    [GETJSAMPLE(ptr[2]) >> C2_SHIFT];
+            /* increment, check for overflow and undo increment if so. */
+            if (++(*histp) <= 0)
+            {
+                (*histp)--;
+            }
+            ptr += 3;
+        }
+    }
+}
+
+
+/*
+ * Next we have the really interesting routines: selection of a colormap
+ * given the completed histogram.
+ * These routines work with a list of "boxes", each representing a rectangular
+ * subset of the input color space (to histogram precision).
+ */
+
+typedef struct
+{
+    /* The bounds of the box (inclusive); expressed as histogram indexes */
+    int c0min, c0max;
+    int c1min, c1max;
+    int c2min, c2max;
+    /* The volume (actually 2-norm) of the box */
+    INT32 volume;
+    /* The number of nonzero histogram cells within this box */
+    long colorcount;
+} box;
+
+typedef box * boxptr;
+
+
+LOCAL(boxptr)
+find_biggest_color_pop (boxptr boxlist, int numboxes)
+/* Find the splittable box with the largest color population */
+/* Returns NULL if no splittable boxes remain */
+{
+    register boxptr boxp;
+    register int i;
+    register long maxc = 0;
+    boxptr which = NULL;
+
+    for (i = 0, boxp = boxlist; i < numboxes; i++, boxp++)
+    {
+        if (boxp->colorcount > maxc && boxp->volume > 0)
+        {
+            which = boxp;
+            maxc = boxp->colorcount;
+        }
+    }
+    return which;
+}
+
+
+LOCAL(boxptr)
+find_biggest_volume (boxptr boxlist, int numboxes)
+/* Find the splittable box with the largest (scaled) volume */
+/* Returns NULL if no splittable boxes remain */
+{
+    register boxptr boxp;
+    register int i;
+    register INT32 maxv = 0;
+    boxptr which = NULL;
+
+    for (i = 0, boxp = boxlist; i < numboxes; i++, boxp++)
+    {
+        if (boxp->volume > maxv)
+        {
+            which = boxp;
+            maxv = boxp->volume;
+        }
+    }
+    return which;
+}
+
+
+LOCAL(void)
+update_box (j_decompress_ptr cinfo, boxptr boxp)
+/* Shrink the min/max bounds of a box to enclose only nonzero elements, */
+/* and recompute its volume and population */
+{
+    my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
+    hist3d histogram = cquantize->histogram;
+    histptr histp;
+    int c0,c1,c2;
+    int c0min,c0max,c1min,c1max,c2min,c2max;
+    INT32 dist0,dist1,dist2;
+    long ccount;
+
+    c0min = boxp->c0min;
+    c0max = boxp->c0max;
+    c1min = boxp->c1min;
+    c1max = boxp->c1max;
+    c2min = boxp->c2min;
+    c2max = boxp->c2max;
+
+    if (c0max > c0min)
+        for (c0 = c0min; c0 <= c0max; c0++)
+            for (c1 = c1min; c1 <= c1max; c1++)
+            {
+                histp = & histogram[c0][c1][c2min];
+                for (c2 = c2min; c2 <= c2max; c2++)
+                    if (*histp++ != 0)
+                    {
+                        boxp->c0min = c0min = c0;
+                        goto have_c0min;
+                    }
+            }
+have_c0min:
+    if (c0max > c0min)
+        for (c0 = c0max; c0 >= c0min; c0--)
+            for (c1 = c1min; c1 <= c1max; c1++)
+            {
+                histp = & histogram[c0][c1][c2min];
+                for (c2 = c2min; c2 <= c2max; c2++)
+                    if (*histp++ != 0)
+                    {
+                        boxp->c0max = c0max = c0;
+                        goto have_c0max;
+                    }
+            }
+have_c0max:
+    if (c1max > c1min)
+        for (c1 = c1min; c1 <= c1max; c1++)
+            for (c0 = c0min; c0 <= c0max; c0++)
+            {
+                histp = & histogram[c0][c1][c2min];
+                for (c2 = c2min; c2 <= c2max; c2++)
+                    if (*histp++ != 0)
+                    {
+                        boxp->c1min = c1min = c1;
+                        goto have_c1min;
+                    }
+            }
+have_c1min:
+    if (c1max > c1min)
+        for (c1 = c1max; c1 >= c1min; c1--)
+            for (c0 = c0min; c0 <= c0max; c0++)
+            {
+                histp = & histogram[c0][c1][c2min];
+                for (c2 = c2min; c2 <= c2max; c2++)
+                    if (*histp++ != 0)
+                    {
+                        boxp->c1max = c1max = c1;
+                        goto have_c1max;
+                    }
+            }
+have_c1max:
+    if (c2max > c2min)
+        for (c2 = c2min; c2 <= c2max; c2++)
+            for (c0 = c0min; c0 <= c0max; c0++)
+            {
+                histp = & histogram[c0][c1min][c2];
+                for (c1 = c1min; c1 <= c1max; c1++, histp += HIST_C2_ELEMS)
+                    if (*histp != 0)
+                    {
+                        boxp->c2min = c2min = c2;
+                        goto have_c2min;
+                    }
+            }
+have_c2min:
+    if (c2max > c2min)
+        for (c2 = c2max; c2 >= c2min; c2--)
+            for (c0 = c0min; c0 <= c0max; c0++)
+            {
+                histp = & histogram[c0][c1min][c2];
+                for (c1 = c1min; c1 <= c1max; c1++, histp += HIST_C2_ELEMS)
+                    if (*histp != 0)
+                    {
+                        boxp->c2max = c2max = c2;
+                        goto have_c2max;
+                    }
+            }
+have_c2max:
+
+    /* Update box volume.
+     * We use 2-norm rather than real volume here; this biases the method
+     * against making long narrow boxes, and it has the side benefit that
+     * a box is splittable iff norm > 0.
+     * Since the differences are expressed in histogram-cell units,
+     * we have to shift back to JSAMPLE units to get consistent distances;
+     * after which, we scale according to the selected distance scale factors.
+     */
+    dist0 = ((c0max - c0min) << C0_SHIFT) * C0_SCALE;
+    dist1 = ((c1max - c1min) << C1_SHIFT) * C1_SCALE;
+    dist2 = ((c2max - c2min) << C2_SHIFT) * C2_SCALE;
+    boxp->volume = dist0*dist0 + dist1*dist1 + dist2*dist2;
+
+    /* Now scan remaining volume of box and compute population */
+    ccount = 0;
+    for (c0 = c0min; c0 <= c0max; c0++)
+        for (c1 = c1min; c1 <= c1max; c1++)
+        {
+            histp = & histogram[c0][c1][c2min];
+            for (c2 = c2min; c2 <= c2max; c2++, histp++)
+                if (*histp != 0)
+                {
+                    ccount++;
+                }
+        }
+    boxp->colorcount = ccount;
+}
+
+
+LOCAL(int)
+median_cut (j_decompress_ptr cinfo, boxptr boxlist, int numboxes,
+            int desired_colors)
+/* Repeatedly select and split the largest box until we have enough boxes */
+{
+    int n,lb;
+    int c0,c1,c2,cmax;
+    register boxptr b1,b2;
+
+    while (numboxes < desired_colors)
+    {
+        /* Select box to split.
+         * Current algorithm: by population for first half, then by volume.
+         */
+        if (numboxes*2 <= desired_colors)
+        {
+            b1 = find_biggest_color_pop(boxlist, numboxes);
+        }
+        else
+        {
+            b1 = find_biggest_volume(boxlist, numboxes);
+        }
+        if (b1 == NULL)		/* no splittable boxes left! */
+        {
+            break;
+        }
+        b2 = &boxlist[numboxes];	/* where new box will go */
+        /* Copy the color bounds to the new box. */
+        b2->c0max = b1->c0max;
+        b2->c1max = b1->c1max;
+        b2->c2max = b1->c2max;
+        b2->c0min = b1->c0min;
+        b2->c1min = b1->c1min;
+        b2->c2min = b1->c2min;
+        /* Choose which axis to split the box on.
+         * Current algorithm: longest scaled axis.
+         * See notes in update_box about scaling distances.
+         */
+        c0 = ((b1->c0max - b1->c0min) << C0_SHIFT) * C0_SCALE;
+        c1 = ((b1->c1max - b1->c1min) << C1_SHIFT) * C1_SCALE;
+        c2 = ((b1->c2max - b1->c2min) << C2_SHIFT) * C2_SCALE;
+        /* We want to break any ties in favor of green, then red, blue last.
+         * This code does the right thing for R,G,B or B,G,R color orders only.
+         */
+#if RGB_RED == 0
+        cmax = c1;
+        n = 1;
+        if (c0 > cmax)
+        {
+            cmax = c0;
+            n = 0;
+        }
+        if (c2 > cmax)
+        {
+            n = 2;
+        }
+#else
+        cmax = c1;
+        n = 1;
+        if (c2 > cmax)
+        {
+            cmax = c2;
+            n = 2;
+        }
+        if (c0 > cmax)
+        {
+            n = 0;
+        }
+#endif
+        /* Choose split point along selected axis, and update box bounds.
+         * Current algorithm: split at halfway point.
+         * (Since the box has been shrunk to minimum volume,
+         * any split will produce two nonempty subboxes.)
+         * Note that lb value is max for lower box, so must be < old max.
+         */
+        switch (n)
+        {
+        case 0:
+            lb = (b1->c0max + b1->c0min) / 2;
+            b1->c0max = lb;
+            b2->c0min = lb+1;
+            break;
+        case 1:
+            lb = (b1->c1max + b1->c1min) / 2;
+            b1->c1max = lb;
+            b2->c1min = lb+1;
+            break;
+        case 2:
+            lb = (b1->c2max + b1->c2min) / 2;
+            b1->c2max = lb;
+            b2->c2min = lb+1;
+            break;
+        }
+        /* Update stats for boxes */
+        update_box(cinfo, b1);
+        update_box(cinfo, b2);
+        numboxes++;
+    }
+    return numboxes;
+}
+
+
+LOCAL(void)
+compute_color (j_decompress_ptr cinfo, boxptr boxp, int icolor)
+/* Compute representative color for a box, put it in colormap[icolor] */
+{
+    /* Current algorithm: mean weighted by pixels (not colors) */
+    /* Note it is important to get the rounding correct! */
+    my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
+    hist3d histogram = cquantize->histogram;
+    histptr histp;
+    int c0,c1,c2;
+    int c0min,c0max,c1min,c1max,c2min,c2max;
+    long count;
+    long total = 0;
+    long c0total = 0;
+    long c1total = 0;
+    long c2total = 0;
+
+    c0min = boxp->c0min;
+    c0max = boxp->c0max;
+    c1min = boxp->c1min;
+    c1max = boxp->c1max;
+    c2min = boxp->c2min;
+    c2max = boxp->c2max;
+
+    for (c0 = c0min; c0 <= c0max; c0++)
+        for (c1 = c1min; c1 <= c1max; c1++)
+        {
+            histp = & histogram[c0][c1][c2min];
+            for (c2 = c2min; c2 <= c2max; c2++)
+            {
+                if ((count = *histp++) != 0)
+                {
+                    total += count;
+                    c0total += ((c0 << C0_SHIFT) + ((1<<C0_SHIFT)>>1)) * count;
+                    c1total += ((c1 << C1_SHIFT) + ((1<<C1_SHIFT)>>1)) * count;
+                    c2total += ((c2 << C2_SHIFT) + ((1<<C2_SHIFT)>>1)) * count;
+                }
+            }
+        }
+
+    cinfo->colormap[0][icolor] = (JSAMPLE) ((c0total + (total>>1)) / total);
+    cinfo->colormap[1][icolor] = (JSAMPLE) ((c1total + (total>>1)) / total);
+    cinfo->colormap[2][icolor] = (JSAMPLE) ((c2total + (total>>1)) / total);
+}
+
+
+LOCAL(void)
+select_colors (j_decompress_ptr cinfo, int desired_colors)
+/* Master routine for color selection */
+{
+    boxptr boxlist;
+    int numboxes;
+    int i;
+
+    /* Allocate workspace for box list */
+    boxlist = (boxptr) (*cinfo->mem->alloc_small)
+              ((j_common_ptr) cinfo, JPOOL_IMAGE, desired_colors * SIZEOF(box));
+    /* Initialize one box containing whole space */
+    numboxes = 1;
+    boxlist[0].c0min = 0;
+    boxlist[0].c0max = MAXJSAMPLE >> C0_SHIFT;
+    boxlist[0].c1min = 0;
+    boxlist[0].c1max = MAXJSAMPLE >> C1_SHIFT;
+    boxlist[0].c2min = 0;
+    boxlist[0].c2max = MAXJSAMPLE >> C2_SHIFT;
+    /* Shrink it to actually-used volume and set its statistics */
+    update_box(cinfo, & boxlist[0]);
+    /* Perform median-cut to produce final box list */
+    numboxes = median_cut(cinfo, boxlist, numboxes, desired_colors);
+    /* Compute the representative color for each box, fill colormap */
+    for (i = 0; i < numboxes; i++)
+    {
+        compute_color(cinfo, & boxlist[i], i);
+    }
+    cinfo->actual_number_of_colors = numboxes;
+    TRACEMS1(cinfo, 1, JTRC_QUANT_SELECTED, numboxes);
+}
+
+
+/*
+ * These routines are concerned with the time-critical task of mapping input
+ * colors to the nearest color in the selected colormap.
+ *
+ * We re-use the histogram space as an "inverse color map", essentially a
+ * cache for the results of nearest-color searches.  All colors within a
+ * histogram cell will be mapped to the same colormap entry, namely the one
+ * closest to the cell's center.  This may not be quite the closest entry to
+ * the actual input color, but it's almost as good.  A zero in the cache
+ * indicates we haven't found the nearest color for that cell yet; the array
+ * is cleared to zeroes before starting the mapping pass.  When we find the
+ * nearest color for a cell, its colormap index plus one is recorded in the
+ * cache for future use.  The pass2 scanning routines call fill_inverse_cmap
+ * when they need to use an unfilled entry in the cache.
+ *
+ * Our method of efficiently finding nearest colors is based on the "locally
+ * sorted search" idea described by Heckbert and on the incremental distance
+ * calculation described by Spencer W. Thomas in chapter III.1 of Graphics
+ * Gems II (James Arvo, ed.  Academic Press, 1991).  Thomas points out that
+ * the distances from a given colormap entry to each cell of the histogram can
+ * be computed quickly using an incremental method: the differences between
+ * distances to adjacent cells themselves differ by a constant.  This allows a
+ * fairly fast implementation of the "brute force" approach of computing the
+ * distance from every colormap entry to every histogram cell.  Unfortunately,
+ * it needs a work array to hold the best-distance-so-far for each histogram
+ * cell (because the inner loop has to be over cells, not colormap entries).
+ * The work array elements have to be INT32s, so the work array would need
+ * 256Kb at our recommended precision.  This is not feasible in DOS machines.
+ *
+ * To get around these problems, we apply Thomas' method to compute the
+ * nearest colors for only the cells within a small subbox of the histogram.
+ * The work array need be only as big as the subbox, so the memory usage
+ * problem is solved.  Furthermore, we need not fill subboxes that are never
+ * referenced in pass2; many images use only part of the color gamut, so a
+ * fair amount of work is saved.  An additional advantage of this
+ * approach is that we can apply Heckbert's locality criterion to quickly
+ * eliminate colormap entries that are far away from the subbox; typically
+ * three-fourths of the colormap entries are rejected by Heckbert's criterion,
+ * and we need not compute their distances to individual cells in the subbox.
+ * The speed of this approach is heavily influenced by the subbox size: too
+ * small means too much overhead, too big loses because Heckbert's criterion
+ * can't eliminate as many colormap entries.  Empirically the best subbox
+ * size seems to be about 1/512th of the histogram (1/8th in each direction).
+ *
+ * Thomas' article also describes a refined method which is asymptotically
+ * faster than the brute-force method, but it is also far more complex and
+ * cannot efficiently be applied to small subboxes.  It is therefore not
+ * useful for programs intended to be portable to DOS machines.  On machines
+ * with plenty of memory, filling the whole histogram in one shot with Thomas'
+ * refined method might be faster than the present code --- but then again,
+ * it might not be any faster, and it's certainly more complicated.
+ */
+
+
+/* log2(histogram cells in update box) for each axis; this can be adjusted */
+#define BOX_C0_LOG  (HIST_C0_BITS-3)
+#define BOX_C1_LOG  (HIST_C1_BITS-3)
+#define BOX_C2_LOG  (HIST_C2_BITS-3)
+
+#define BOX_C0_ELEMS  (1<<BOX_C0_LOG) /* # of hist cells in update box */
+#define BOX_C1_ELEMS  (1<<BOX_C1_LOG)
+#define BOX_C2_ELEMS  (1<<BOX_C2_LOG)
+
+#define BOX_C0_SHIFT  (C0_SHIFT + BOX_C0_LOG)
+#define BOX_C1_SHIFT  (C1_SHIFT + BOX_C1_LOG)
+#define BOX_C2_SHIFT  (C2_SHIFT + BOX_C2_LOG)
+
+
+/*
+ * The next three routines implement inverse colormap filling.  They could
+ * all be folded into one big routine, but splitting them up this way saves
+ * some stack space (the mindist[] and bestdist[] arrays need not coexist)
+ * and may allow some compilers to produce better code by registerizing more
+ * inner-loop variables.
+ */
+
+LOCAL(int)
+find_nearby_colors (j_decompress_ptr cinfo, int minc0, int minc1, int minc2,
+                    JSAMPLE colorlist[])
+/* Locate the colormap entries close enough to an update box to be candidates
+ * for the nearest entry to some cell(s) in the update box.  The update box
+ * is specified by the center coordinates of its first cell.  The number of
+ * candidate colormap entries is returned, and their colormap indexes are
+ * placed in colorlist[].
+ * This routine uses Heckbert's "locally sorted search" criterion to select
+ * the colors that need further consideration.
+ */
+{
+    int numcolors = cinfo->actual_number_of_colors;
+    int maxc0, maxc1, maxc2;
+    int centerc0, centerc1, centerc2;
+    int i, x, ncolors;
+    INT32 minmaxdist, min_dist, max_dist, tdist;
+    INT32 mindist[MAXNUMCOLORS];	/* min distance to colormap entry i */
+
+    /* Compute true coordinates of update box's upper corner and center.
+     * Actually we compute the coordinates of the center of the upper-corner
+     * histogram cell, which are the upper bounds of the volume we care about.
+     * Note that since ">>" rounds down, the "center" values may be closer to
+     * min than to max; hence comparisons to them must be "<=", not "<".
+     */
+    maxc0 = minc0 + ((1 << BOX_C0_SHIFT) - (1 << C0_SHIFT));
+    centerc0 = (minc0 + maxc0) >> 1;
+    maxc1 = minc1 + ((1 << BOX_C1_SHIFT) - (1 << C1_SHIFT));
+    centerc1 = (minc1 + maxc1) >> 1;
+    maxc2 = minc2 + ((1 << BOX_C2_SHIFT) - (1 << C2_SHIFT));
+    centerc2 = (minc2 + maxc2) >> 1;
+
+    /* For each color in colormap, find:
+     *  1. its minimum squared-distance to any point in the update box
+     *     (zero if color is within update box);
+     *  2. its maximum squared-distance to any point in the update box.
+     * Both of these can be found by considering only the corners of the box.
+     * We save the minimum distance for each color in mindist[];
+     * only the smallest maximum distance is of interest.
+     */
+    minmaxdist = 0x7FFFFFFFL;
+
+    for (i = 0; i < numcolors; i++)
+    {
+        /* We compute the squared-c0-distance term, then add in the other two. */
+        x = GETJSAMPLE(cinfo->colormap[0][i]);
+        if (x < minc0)
+        {
+            tdist = (x - minc0) * C0_SCALE;
+            min_dist = tdist*tdist;
+            tdist = (x - maxc0) * C0_SCALE;
+            max_dist = tdist*tdist;
+        }
+        else if (x > maxc0)
+        {
+            tdist = (x - maxc0) * C0_SCALE;
+            min_dist = tdist*tdist;
+            tdist = (x - minc0) * C0_SCALE;
+            max_dist = tdist*tdist;
+        }
+        else
+        {
+            /* within cell range so no contribution to min_dist */
+            min_dist = 0;
+            if (x <= centerc0)
+            {
+                tdist = (x - maxc0) * C0_SCALE;
+                max_dist = tdist*tdist;
+            }
+            else
+            {
+                tdist = (x - minc0) * C0_SCALE;
+                max_dist = tdist*tdist;
+            }
+        }
+
+        x = GETJSAMPLE(cinfo->colormap[1][i]);
+        if (x < minc1)
+        {
+            tdist = (x - minc1) * C1_SCALE;
+            min_dist += tdist*tdist;
+            tdist = (x - maxc1) * C1_SCALE;
+            max_dist += tdist*tdist;
+        }
+        else if (x > maxc1)
+        {
+            tdist = (x - maxc1) * C1_SCALE;
+            min_dist += tdist*tdist;
+            tdist = (x - minc1) * C1_SCALE;
+            max_dist += tdist*tdist;
+        }
+        else
+        {
+            /* within cell range so no contribution to min_dist */
+            if (x <= centerc1)
+            {
+                tdist = (x - maxc1) * C1_SCALE;
+                max_dist += tdist*tdist;
+            }
+            else
+            {
+                tdist = (x - minc1) * C1_SCALE;
+                max_dist += tdist*tdist;
+            }
+        }
+
+        x = GETJSAMPLE(cinfo->colormap[2][i]);
+        if (x < minc2)
+        {
+            tdist = (x - minc2) * C2_SCALE;
+            min_dist += tdist*tdist;
+            tdist = (x - maxc2) * C2_SCALE;
+            max_dist += tdist*tdist;
+        }
+        else if (x > maxc2)
+        {
+            tdist = (x - maxc2) * C2_SCALE;
+            min_dist += tdist*tdist;
+            tdist = (x - minc2) * C2_SCALE;
+            max_dist += tdist*tdist;
+        }
+        else
+        {
+            /* within cell range so no contribution to min_dist */
+            if (x <= centerc2)
+            {
+                tdist = (x - maxc2) * C2_SCALE;
+                max_dist += tdist*tdist;
+            }
+            else
+            {
+                tdist = (x - minc2) * C2_SCALE;
+                max_dist += tdist*tdist;
+            }
+        }
+
+        mindist[i] = min_dist;	/* save away the results */
+        if (max_dist < minmaxdist)
+        {
+            minmaxdist = max_dist;
+        }
+    }
+
+    /* Now we know that no cell in the update box is more than minmaxdist
+     * away from some colormap entry.  Therefore, only colors that are
+     * within minmaxdist of some part of the box need be considered.
+     */
+    ncolors = 0;
+    for (i = 0; i < numcolors; i++)
+    {
+        if (mindist[i] <= minmaxdist)
+        {
+            colorlist[ncolors++] = (JSAMPLE) i;
+        }
+    }
+    return ncolors;
+}
+
+
+LOCAL(void)
+find_best_colors (j_decompress_ptr cinfo, int minc0, int minc1, int minc2,
+                  int numcolors, JSAMPLE colorlist[], JSAMPLE bestcolor[])
+/* Find the closest colormap entry for each cell in the update box,
+ * given the list of candidate colors prepared by find_nearby_colors.
+ * Return the indexes of the closest entries in the bestcolor[] array.
+ * This routine uses Thomas' incremental distance calculation method to
+ * find the distance from a colormap entry to successive cells in the box.
+ */
+{
+    int ic0, ic1, ic2;
+    int i, icolor;
+    register INT32 * bptr;	/* pointer into bestdist[] array */
+    JSAMPLE * cptr;		/* pointer into bestcolor[] array */
+    INT32 dist0, dist1;		/* initial distance values */
+    register INT32 dist2;		/* current distance in inner loop */
+    INT32 xx0, xx1;		/* distance increments */
+    register INT32 xx2;
+    INT32 inc0, inc1, inc2;	/* initial values for increments */
+    /* This array holds the distance to the nearest-so-far color for each cell */
+    INT32 bestdist[BOX_C0_ELEMS * BOX_C1_ELEMS * BOX_C2_ELEMS];
+
+    /* Initialize best-distance for each cell of the update box */
+    bptr = bestdist;
+    for (i = BOX_C0_ELEMS*BOX_C1_ELEMS*BOX_C2_ELEMS-1; i >= 0; i--)
+    {
+        *bptr++ = 0x7FFFFFFFL;
+    }
+
+    /* For each color selected by find_nearby_colors,
+     * compute its distance to the center of each cell in the box.
+     * If that's less than best-so-far, update best distance and color number.
+     */
+
+    /* Nominal steps between cell centers ("x" in Thomas article) */
+#define STEP_C0  ((1 << C0_SHIFT) * C0_SCALE)
+#define STEP_C1  ((1 << C1_SHIFT) * C1_SCALE)
+#define STEP_C2  ((1 << C2_SHIFT) * C2_SCALE)
+
+    for (i = 0; i < numcolors; i++)
+    {
+        icolor = GETJSAMPLE(colorlist[i]);
+        /* Compute (square of) distance from minc0/c1/c2 to this color */
+        inc0 = (minc0 - GETJSAMPLE(cinfo->colormap[0][icolor])) * C0_SCALE;
+        dist0 = inc0*inc0;
+        inc1 = (minc1 - GETJSAMPLE(cinfo->colormap[1][icolor])) * C1_SCALE;
+        dist0 += inc1*inc1;
+        inc2 = (minc2 - GETJSAMPLE(cinfo->colormap[2][icolor])) * C2_SCALE;
+        dist0 += inc2*inc2;
+        /* Form the initial difference increments */
+        inc0 = inc0 * (2 * STEP_C0) + STEP_C0 * STEP_C0;
+        inc1 = inc1 * (2 * STEP_C1) + STEP_C1 * STEP_C1;
+        inc2 = inc2 * (2 * STEP_C2) + STEP_C2 * STEP_C2;
+        /* Now loop over all cells in box, updating distance per Thomas method */
+        bptr = bestdist;
+        cptr = bestcolor;
+        xx0 = inc0;
+        for (ic0 = BOX_C0_ELEMS-1; ic0 >= 0; ic0--)
+        {
+            dist1 = dist0;
+            xx1 = inc1;
+            for (ic1 = BOX_C1_ELEMS-1; ic1 >= 0; ic1--)
+            {
+                dist2 = dist1;
+                xx2 = inc2;
+                for (ic2 = BOX_C2_ELEMS-1; ic2 >= 0; ic2--)
+                {
+                    if (dist2 < *bptr)
+                    {
+                        *bptr = dist2;
+                        *cptr = (JSAMPLE) icolor;
+                    }
+                    dist2 += xx2;
+                    xx2 += 2 * STEP_C2 * STEP_C2;
+                    bptr++;
+                    cptr++;
+                }
+                dist1 += xx1;
+                xx1 += 2 * STEP_C1 * STEP_C1;
+            }
+            dist0 += xx0;
+            xx0 += 2 * STEP_C0 * STEP_C0;
+        }
+    }
+}
+
+
+LOCAL(void)
+fill_inverse_cmap (j_decompress_ptr cinfo, int c0, int c1, int c2)
+/* Fill the inverse-colormap entries in the update box that contains */
+/* histogram cell c0/c1/c2.  (Only that one cell MUST be filled, but */
+/* we can fill as many others as we wish.) */
+{
+    my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
+    hist3d histogram = cquantize->histogram;
+    int minc0, minc1, minc2;	/* lower left corner of update box */
+    int ic0, ic1, ic2;
+    register JSAMPLE * cptr;	/* pointer into bestcolor[] array */
+    register histptr cachep;	/* pointer into main cache array */
+    /* This array lists the candidate colormap indexes. */
+    JSAMPLE colorlist[MAXNUMCOLORS];
+    int numcolors;		/* number of candidate colors */
+    /* This array holds the actually closest colormap index for each cell. */
+    JSAMPLE bestcolor[BOX_C0_ELEMS * BOX_C1_ELEMS * BOX_C2_ELEMS];
+
+    /* Convert cell coordinates to update box ID */
+    c0 >>= BOX_C0_LOG;
+    c1 >>= BOX_C1_LOG;
+    c2 >>= BOX_C2_LOG;
+
+    /* Compute true coordinates of update box's origin corner.
+     * Actually we compute the coordinates of the center of the corner
+     * histogram cell, which are the lower bounds of the volume we care about.
+     */
+    minc0 = (c0 << BOX_C0_SHIFT) + ((1 << C0_SHIFT) >> 1);
+    minc1 = (c1 << BOX_C1_SHIFT) + ((1 << C1_SHIFT) >> 1);
+    minc2 = (c2 << BOX_C2_SHIFT) + ((1 << C2_SHIFT) >> 1);
+
+    /* Determine which colormap entries are close enough to be candidates
+     * for the nearest entry to some cell in the update box.
+     */
+    numcolors = find_nearby_colors(cinfo, minc0, minc1, minc2, colorlist);
+
+    /* Determine the actually nearest colors. */
+    find_best_colors(cinfo, minc0, minc1, minc2, numcolors, colorlist,
+                     bestcolor);
+
+    /* Save the best color numbers (plus 1) in the main cache array */
+    c0 <<= BOX_C0_LOG;		/* convert ID back to base cell indexes */
+    c1 <<= BOX_C1_LOG;
+    c2 <<= BOX_C2_LOG;
+    cptr = bestcolor;
+    for (ic0 = 0; ic0 < BOX_C0_ELEMS; ic0++)
+    {
+        for (ic1 = 0; ic1 < BOX_C1_ELEMS; ic1++)
+        {
+            cachep = & histogram[c0+ic0][c1+ic1][c2];
+            for (ic2 = 0; ic2 < BOX_C2_ELEMS; ic2++)
+            {
+                *cachep++ = (histcell) (GETJSAMPLE(*cptr++) + 1);
+            }
+        }
+    }
+}
+
+
+/*
+ * Map some rows of pixels to the output colormapped representation.
+ */
+
+METHODDEF(void)
+pass2_no_dither (j_decompress_ptr cinfo,
+                 JSAMPARRAY input_buf, JSAMPARRAY output_buf, int num_rows)
+/* This version performs no dithering */
+{
+    my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
+    hist3d histogram = cquantize->histogram;
+    register JSAMPROW inptr, outptr;
+    register histptr cachep;
+    register int c0, c1, c2;
+    int row;
+    JDIMENSION col;
+    JDIMENSION width = cinfo->output_width;
+
+    for (row = 0; row < num_rows; row++)
+    {
+        inptr = input_buf[row];
+        outptr = output_buf[row];
+        for (col = width; col > 0; col--)
+        {
+            /* get pixel value and index into the cache */
+            c0 = GETJSAMPLE(*inptr++) >> C0_SHIFT;
+            c1 = GETJSAMPLE(*inptr++) >> C1_SHIFT;
+            c2 = GETJSAMPLE(*inptr++) >> C2_SHIFT;
+            cachep = & histogram[c0][c1][c2];
+            /* If we have not seen this color before, find nearest colormap entry */
+            /* and update the cache */
+            if (*cachep == 0)
+            {
+                fill_inverse_cmap(cinfo, c0,c1,c2);
+            }
+            /* Now emit the colormap index for this cell */
+            *outptr++ = (JSAMPLE) (*cachep - 1);
+        }
+    }
+}
+
+
+METHODDEF(void)
+pass2_fs_dither (j_decompress_ptr cinfo,
+                 JSAMPARRAY input_buf, JSAMPARRAY output_buf, int num_rows)
+/* This version performs Floyd-Steinberg dithering */
+{
+    my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
+    hist3d histogram = cquantize->histogram;
+    register LOCFSERROR cur0, cur1, cur2;	/* current error or pixel value */
+    LOCFSERROR belowerr0, belowerr1, belowerr2; /* error for pixel below cur */
+    LOCFSERROR bpreverr0, bpreverr1, bpreverr2; /* error for below/prev col */
+    register FSERRPTR errorptr;	/* => fserrors[] at column before current */
+    JSAMPROW inptr;		/* => current input pixel */
+    JSAMPROW outptr;		/* => current output pixel */
+    histptr cachep;
+    int dir;			/* +1 or -1 depending on direction */
+    int dir3;			/* 3*dir, for advancing inptr & errorptr */
+    int row;
+    JDIMENSION col;
+    JDIMENSION width = cinfo->output_width;
+    JSAMPLE *range_limit = cinfo->sample_range_limit;
+    int *error_limit = cquantize->error_limiter;
+    JSAMPROW colormap0 = cinfo->colormap[0];
+    JSAMPROW colormap1 = cinfo->colormap[1];
+    JSAMPROW colormap2 = cinfo->colormap[2];
+    SHIFT_TEMPS
+
+    for (row = 0; row < num_rows; row++)
+    {
+        inptr = input_buf[row];
+        outptr = output_buf[row];
+        if (cquantize->on_odd_row)
+        {
+            /* work right to left in this row */
+            inptr += (width-1) * 3;	/* so point to rightmost pixel */
+            outptr += width-1;
+            dir = -1;
+            dir3 = -3;
+            errorptr = cquantize->fserrors + (width+1)*3; /* => entry after last column */
+            cquantize->on_odd_row = FALSE; /* flip for next time */
+        }
+        else
+        {
+            /* work left to right in this row */
+            dir = 1;
+            dir3 = 3;
+            errorptr = cquantize->fserrors; /* => entry before first real column */
+            cquantize->on_odd_row = TRUE; /* flip for next time */
+        }
+        /* Preset error values: no error propagated to first pixel from left */
+        cur0 = cur1 = cur2 = 0;
+        /* and no error propagated to row below yet */
+        belowerr0 = belowerr1 = belowerr2 = 0;
+        bpreverr0 = bpreverr1 = bpreverr2 = 0;
+
+        for (col = width; col > 0; col--)
+        {
+            /* curN holds the error propagated from the previous pixel on the
+             * current line.  Add the error propagated from the previous line
+             * to form the complete error correction term for this pixel, and
+             * round the error term (which is expressed * 16) to an integer.
+             * RIGHT_SHIFT rounds towards minus infinity, so adding 8 is correct
+             * for either sign of the error value.
+             * Note: errorptr points to *previous* column's array entry.
+             */
+            cur0 = RIGHT_SHIFT(cur0 + errorptr[dir3+0] + 8, 4);
+            cur1 = RIGHT_SHIFT(cur1 + errorptr[dir3+1] + 8, 4);
+            cur2 = RIGHT_SHIFT(cur2 + errorptr[dir3+2] + 8, 4);
+            /* Limit the error using transfer function set by init_error_limit.
+             * See comments with init_error_limit for rationale.
+             */
+            cur0 = error_limit[cur0];
+            cur1 = error_limit[cur1];
+            cur2 = error_limit[cur2];
+            /* Form pixel value + error, and range-limit to 0..MAXJSAMPLE.
+             * The maximum error is +- MAXJSAMPLE (or less with error limiting);
+             * this sets the required size of the range_limit array.
+             */
+            cur0 += GETJSAMPLE(inptr[0]);
+            cur1 += GETJSAMPLE(inptr[1]);
+            cur2 += GETJSAMPLE(inptr[2]);
+            cur0 = GETJSAMPLE(range_limit[cur0]);
+            cur1 = GETJSAMPLE(range_limit[cur1]);
+            cur2 = GETJSAMPLE(range_limit[cur2]);
+            /* Index into the cache with adjusted pixel value */
+            cachep = & histogram[cur0>>C0_SHIFT][cur1>>C1_SHIFT][cur2>>C2_SHIFT];
+            /* If we have not seen this color before, find nearest colormap */
+            /* entry and update the cache */
+            if (*cachep == 0)
+            {
+                fill_inverse_cmap(cinfo, cur0>>C0_SHIFT,cur1>>C1_SHIFT,cur2>>C2_SHIFT);
+            }
+            /* Now emit the colormap index for this cell */
+            {
+                register int pixcode = *cachep - 1;
+                *outptr = (JSAMPLE) pixcode;
+                /* Compute representation error for this pixel */
+                cur0 -= GETJSAMPLE(colormap0[pixcode]);
+                cur1 -= GETJSAMPLE(colormap1[pixcode]);
+                cur2 -= GETJSAMPLE(colormap2[pixcode]);
+            }
+            /* Compute error fractions to be propagated to adjacent pixels.
+             * Add these into the running sums, and simultaneously shift the
+             * next-line error sums left by 1 column.
+             */
+            {
+                register LOCFSERROR bnexterr, delta;
+
+                bnexterr = cur0;	/* Process component 0 */
+                delta = cur0 * 2;
+                cur0 += delta;		/* form error * 3 */
+                errorptr[0] = (FSERROR) (bpreverr0 + cur0);
+                cur0 += delta;		/* form error * 5 */
+                bpreverr0 = belowerr0 + cur0;
+                belowerr0 = bnexterr;
+                cur0 += delta;		/* form error * 7 */
+                bnexterr = cur1;	/* Process component 1 */
+                delta = cur1 * 2;
+                cur1 += delta;		/* form error * 3 */
+                errorptr[1] = (FSERROR) (bpreverr1 + cur1);
+                cur1 += delta;		/* form error * 5 */
+                bpreverr1 = belowerr1 + cur1;
+                belowerr1 = bnexterr;
+                cur1 += delta;		/* form error * 7 */
+                bnexterr = cur2;	/* Process component 2 */
+                delta = cur2 * 2;
+                cur2 += delta;		/* form error * 3 */
+                errorptr[2] = (FSERROR) (bpreverr2 + cur2);
+                cur2 += delta;		/* form error * 5 */
+                bpreverr2 = belowerr2 + cur2;
+                belowerr2 = bnexterr;
+                cur2 += delta;		/* form error * 7 */
+            }
+            /* At this point curN contains the 7/16 error value to be propagated
+             * to the next pixel on the current line, and all the errors for the
+             * next line have been shifted over.  We are therefore ready to move on.
+             */
+            inptr += dir3;		/* Advance pixel pointers to next column */
+            outptr += dir;
+            errorptr += dir3;		/* advance errorptr to current column */
+        }
+        /* Post-loop cleanup: we must unload the final error values into the
+         * final fserrors[] entry.  Note we need not unload belowerrN because
+         * it is for the dummy column before or after the actual array.
+         */
+        errorptr[0] = (FSERROR) bpreverr0; /* unload prev errs into array */
+        errorptr[1] = (FSERROR) bpreverr1;
+        errorptr[2] = (FSERROR) bpreverr2;
+    }
+}
+
+
+/*
+ * Initialize the error-limiting transfer function (lookup table).
+ * The raw F-S error computation can potentially compute error values of up to
+ * +- MAXJSAMPLE.  But we want the maximum correction applied to a pixel to be
+ * much less, otherwise obviously wrong pixels will be created.  (Typical
+ * effects include weird fringes at color-area boundaries, isolated bright
+ * pixels in a dark area, etc.)  The standard advice for avoiding this problem
+ * is to ensure that the "corners" of the color cube are allocated as output
+ * colors; then repeated errors in the same direction cannot cause cascading
+ * error buildup.  However, that only prevents the error from getting
+ * completely out of hand; Aaron Giles reports that error limiting improves
+ * the results even with corner colors allocated.
+ * A simple clamping of the error values to about +- MAXJSAMPLE/8 works pretty
+ * well, but the smoother transfer function used below is even better.  Thanks
+ * to Aaron Giles for this idea.
+ */
+
+LOCAL(void)
+init_error_limit (j_decompress_ptr cinfo)
+/* Allocate and fill in the error_limiter table */
+{
+    my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
+    int * table;
+    int in, out;
+
+    table = (int *) (*cinfo->mem->alloc_small)
+            ((j_common_ptr) cinfo, JPOOL_IMAGE, (MAXJSAMPLE*2+1) * SIZEOF(int));
+    table += MAXJSAMPLE;		/* so can index -MAXJSAMPLE .. +MAXJSAMPLE */
+    cquantize->error_limiter = table;
+
+#define STEPSIZE ((MAXJSAMPLE+1)/16)
+    /* Map errors 1:1 up to +- MAXJSAMPLE/16 */
+    out = 0;
+    for (in = 0; in < STEPSIZE; in++, out++)
+    {
+        table[in] = out;
+        table[-in] = -out;
+    }
+    /* Map errors 1:2 up to +- 3*MAXJSAMPLE/16 */
+    for (; in < STEPSIZE*3; in++, out += (in&1) ? 0 : 1)
+    {
+        table[in] = out;
+        table[-in] = -out;
+    }
+    /* Clamp the rest to final out value (which is (MAXJSAMPLE+1)/8) */
+    for (; in <= MAXJSAMPLE; in++)
+    {
+        table[in] = out;
+        table[-in] = -out;
+    }
+#undef STEPSIZE
+}
+
+
+/*
+ * Finish up at the end of each pass.
+ */
+
+METHODDEF(void)
+finish_pass1 (j_decompress_ptr cinfo)
+{
+    my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
+
+    /* Select the representative colors and fill in cinfo->colormap */
+    cinfo->colormap = cquantize->sv_colormap;
+    select_colors(cinfo, cquantize->desired);
+    /* Force next pass to zero the color index table */
+    cquantize->needs_zeroed = TRUE;
+}
+
+
+METHODDEF(void)
+finish_pass2 (j_decompress_ptr cinfo)
+{
+    /* no work */
+}
+
+
+/*
+ * Initialize for each processing pass.
+ */
+
+METHODDEF(void)
+start_pass_2_quant (j_decompress_ptr cinfo, boolean is_pre_scan)
+{
+    my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
+    hist3d histogram = cquantize->histogram;
+    int i;
+
+    /* Only F-S dithering or no dithering is supported. */
+    /* If user asks for ordered dither, give him F-S. */
+    if (cinfo->dither_mode != JDITHER_NONE)
+    {
+        cinfo->dither_mode = JDITHER_FS;
+    }
+
+    if (is_pre_scan)
+    {
+        /* Set up method pointers */
+        cquantize->pub.color_quantize = prescan_quantize;
+        cquantize->pub.finish_pass = finish_pass1;
+        cquantize->needs_zeroed = TRUE; /* Always zero histogram */
+    }
+    else
+    {
+        /* Set up method pointers */
+        if (cinfo->dither_mode == JDITHER_FS)
+        {
+            cquantize->pub.color_quantize = pass2_fs_dither;
+        }
+        else
+        {
+            cquantize->pub.color_quantize = pass2_no_dither;
+        }
+        cquantize->pub.finish_pass = finish_pass2;
+
+        /* Make sure color count is acceptable */
+        i = cinfo->actual_number_of_colors;
+        if (i < 1)
+        {
+            ERREXIT1(cinfo, JERR_QUANT_FEW_COLORS, 1);
+        }
+        if (i > MAXNUMCOLORS)
+        {
+            ERREXIT1(cinfo, JERR_QUANT_MANY_COLORS, MAXNUMCOLORS);
+        }
+
+        if (cinfo->dither_mode == JDITHER_FS)
+        {
+            size_t arraysize = (size_t) ((cinfo->output_width + 2) *
+                                         (3 * SIZEOF(FSERROR)));
+            /* Allocate Floyd-Steinberg workspace if we didn't already. */
+            if (cquantize->fserrors == NULL)
+                cquantize->fserrors = (FSERRPTR) (*cinfo->mem->alloc_large)
+                                      ((j_common_ptr) cinfo, JPOOL_IMAGE, arraysize);
+            /* Initialize the propagated errors to zero. */
+            jzero_far((void FAR *) cquantize->fserrors, arraysize);
+            /* Make the error-limit table if we didn't already. */
+            if (cquantize->error_limiter == NULL)
+            {
+                init_error_limit(cinfo);
+            }
+            cquantize->on_odd_row = FALSE;
+        }
+
+    }
+    /* Zero the histogram or inverse color map, if necessary */
+    if (cquantize->needs_zeroed)
+    {
+        for (i = 0; i < HIST_C0_ELEMS; i++)
+        {
+            jzero_far((void FAR *) histogram[i],
+                      HIST_C1_ELEMS*HIST_C2_ELEMS * SIZEOF(histcell));
+        }
+        cquantize->needs_zeroed = FALSE;
+    }
+}
+
+
+/*
+ * Switch to a new external colormap between output passes.
+ */
+
+METHODDEF(void)
+new_color_map_2_quant (j_decompress_ptr cinfo)
+{
+    my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
+
+    /* Reset the inverse color map */
+    cquantize->needs_zeroed = TRUE;
+}
+
+
+/*
+ * Module initialization routine for 2-pass color quantization.
+ */
+
+GLOBAL(void)
+jinit_2pass_quantizer (j_decompress_ptr cinfo)
+{
+    my_cquantize_ptr cquantize;
+    int i;
+
+    cquantize = (my_cquantize_ptr)
+                (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
+                                            SIZEOF(my_cquantizer));
+    cinfo->cquantize = (struct jpeg_color_quantizer *) cquantize;
+    cquantize->pub.start_pass = start_pass_2_quant;
+    cquantize->pub.new_color_map = new_color_map_2_quant;
+    cquantize->fserrors = NULL;	/* flag optional arrays not allocated */
+    cquantize->error_limiter = NULL;
+
+    /* Make sure jdmaster didn't give me a case I can't handle */
+    if (cinfo->out_color_components != 3)
+    {
+        ERREXIT(cinfo, JERR_NOTIMPL);
+    }
+
+    /* Allocate the histogram/inverse colormap storage */
+    cquantize->histogram = (hist3d) (*cinfo->mem->alloc_small)
+                           ((j_common_ptr) cinfo, JPOOL_IMAGE, HIST_C0_ELEMS * SIZEOF(hist2d));
+    for (i = 0; i < HIST_C0_ELEMS; i++)
+    {
+        cquantize->histogram[i] = (hist2d) (*cinfo->mem->alloc_large)
+                                  ((j_common_ptr) cinfo, JPOOL_IMAGE,
+                                   HIST_C1_ELEMS*HIST_C2_ELEMS * SIZEOF(histcell));
+    }
+    cquantize->needs_zeroed = TRUE; /* histogram is garbage now */
+
+    /* Allocate storage for the completed colormap, if required.
+     * We do this now since it is FAR storage and may affect
+     * the memory manager's space calculations.
+     */
+    if (cinfo->enable_2pass_quant)
+    {
+        /* Make sure color count is acceptable */
+        int desired = cinfo->desired_number_of_colors;
+        /* Lower bound on # of colors ... somewhat arbitrary as long as > 0 */
+        if (desired < 8)
+        {
+            ERREXIT1(cinfo, JERR_QUANT_FEW_COLORS, 8);
+        }
+        /* Make sure colormap indexes can be represented by JSAMPLEs */
+        if (desired > MAXNUMCOLORS)
+        {
+            ERREXIT1(cinfo, JERR_QUANT_MANY_COLORS, MAXNUMCOLORS);
+        }
+        cquantize->sv_colormap = (*cinfo->mem->alloc_sarray)
+                                 ((j_common_ptr) cinfo,JPOOL_IMAGE, (JDIMENSION) desired, (JDIMENSION) 3);
+        cquantize->desired = desired;
+    }
+    else
+    {
+        cquantize->sv_colormap = NULL;
+    }
+
+    /* Only F-S dithering or no dithering is supported. */
+    /* If user asks for ordered dither, give him F-S. */
+    if (cinfo->dither_mode != JDITHER_NONE)
+    {
+        cinfo->dither_mode = JDITHER_FS;
+    }
+
+    /* Allocate Floyd-Steinberg workspace if necessary.
+     * This isn't really needed until pass 2, but again it is FAR storage.
+     * Although we will cope with a later change in dither_mode,
+     * we do not promise to honor max_memory_to_use if dither_mode changes.
+     */
+    if (cinfo->dither_mode == JDITHER_FS)
+    {
+        cquantize->fserrors = (FSERRPTR) (*cinfo->mem->alloc_large)
+                              ((j_common_ptr) cinfo, JPOOL_IMAGE,
+                               (size_t) ((cinfo->output_width + 2) * (3 * SIZEOF(FSERROR))));
+        /* Might as well create the error-limiting table too. */
+        init_error_limit(cinfo);
+    }
+}
+
+#endif /* QUANT_2PASS_SUPPORTED */
diff -NEaurb neo/renderer/jpeg-8c/jutils.c neo/renderer/jpeg-8c/jutils.c
--- neo/renderer/jpeg-8c/jutils.c	1970-01-01 00:00:00 +0000
+++ neo/renderer/jpeg-8c/jutils.c	2012-11-17 01:20:41 +0000
@@ -0,0 +1,244 @@
+/*
+ * jutils.c
+ *
+ * Copyright (C) 1991-1996, Thomas G. Lane.
+ * Modified 2009 by Guido Vollbeding.
+ * This file is part of the Independent JPEG Group's software.
+ * For conditions of distribution and use, see the accompanying README file.
+ *
+ * This file contains tables and miscellaneous utility routines needed
+ * for both compression and decompression.
+ * Note we prefix all global names with "j" to minimize conflicts with
+ * a surrounding application.
+ */
+
+#define JPEG_INTERNALS
+#include "jinclude.h"
+#include "jpeglib.h"
+
+
+/*
+ * jpeg_zigzag_order[i] is the zigzag-order position of the i'th element
+ * of a DCT block read in natural order (left to right, top to bottom).
+ */
+
+#if 0				/* This table is not actually needed in v6a */
+
+const int jpeg_zigzag_order[DCTSIZE2] =
+{
+    0,  1,  5,  6, 14, 15, 27, 28,
+    2,  4,  7, 13, 16, 26, 29, 42,
+    3,  8, 12, 17, 25, 30, 41, 43,
+    9, 11, 18, 24, 31, 40, 44, 53,
+    10, 19, 23, 32, 39, 45, 52, 54,
+    20, 22, 33, 38, 46, 51, 55, 60,
+    21, 34, 37, 47, 50, 56, 59, 61,
+    35, 36, 48, 49, 57, 58, 62, 63
+};
+
+#endif
+
+/*
+ * jpeg_natural_order[i] is the natural-order position of the i'th element
+ * of zigzag order.
+ *
+ * When reading corrupted data, the Huffman decoders could attempt
+ * to reference an entry beyond the end of this array (if the decoded
+ * zero run length reaches past the end of the block).  To prevent
+ * wild stores without adding an inner-loop test, we put some extra
+ * "63"s after the real entries.  This will cause the extra coefficient
+ * to be stored in location 63 of the block, not somewhere random.
+ * The worst case would be a run-length of 15, which means we need 16
+ * fake entries.
+ */
+
+const int jpeg_natural_order[DCTSIZE2+16] =
+{
+    0,  1,  8, 16,  9,  2,  3, 10,
+    17, 24, 32, 25, 18, 11,  4,  5,
+    12, 19, 26, 33, 40, 48, 41, 34,
+    27, 20, 13,  6,  7, 14, 21, 28,
+    35, 42, 49, 56, 57, 50, 43, 36,
+    29, 22, 15, 23, 30, 37, 44, 51,
+    58, 59, 52, 45, 38, 31, 39, 46,
+    53, 60, 61, 54, 47, 55, 62, 63,
+    63, 63, 63, 63, 63, 63, 63, 63, /* extra entries for safety in decoder */
+    63, 63, 63, 63, 63, 63, 63, 63
+};
+
+const int jpeg_natural_order7[7*7+16] =
+{
+    0,  1,  8, 16,  9,  2,  3, 10,
+    17, 24, 32, 25, 18, 11,  4,  5,
+    12, 19, 26, 33, 40, 48, 41, 34,
+    27, 20, 13,  6, 14, 21, 28, 35,
+    42, 49, 50, 43, 36, 29, 22, 30,
+    37, 44, 51, 52, 45, 38, 46, 53,
+    54,
+    63, 63, 63, 63, 63, 63, 63, 63, /* extra entries for safety in decoder */
+    63, 63, 63, 63, 63, 63, 63, 63
+};
+
+const int jpeg_natural_order6[6*6+16] =
+{
+    0,  1,  8, 16,  9,  2,  3, 10,
+    17, 24, 32, 25, 18, 11,  4,  5,
+    12, 19, 26, 33, 40, 41, 34, 27,
+    20, 13, 21, 28, 35, 42, 43, 36,
+    29, 37, 44, 45,
+    63, 63, 63, 63, 63, 63, 63, 63, /* extra entries for safety in decoder */
+    63, 63, 63, 63, 63, 63, 63, 63
+};
+
+const int jpeg_natural_order5[5*5+16] =
+{
+    0,  1,  8, 16,  9,  2,  3, 10,
+    17, 24, 32, 25, 18, 11,  4, 12,
+    19, 26, 33, 34, 27, 20, 28, 35,
+    36,
+    63, 63, 63, 63, 63, 63, 63, 63, /* extra entries for safety in decoder */
+    63, 63, 63, 63, 63, 63, 63, 63
+};
+
+const int jpeg_natural_order4[4*4+16] =
+{
+    0,  1,  8, 16,  9,  2,  3, 10,
+    17, 24, 25, 18, 11, 19, 26, 27,
+    63, 63, 63, 63, 63, 63, 63, 63, /* extra entries for safety in decoder */
+    63, 63, 63, 63, 63, 63, 63, 63
+};
+
+const int jpeg_natural_order3[3*3+16] =
+{
+    0,  1,  8, 16,  9,  2, 10, 17,
+    18,
+    63, 63, 63, 63, 63, 63, 63, 63, /* extra entries for safety in decoder */
+    63, 63, 63, 63, 63, 63, 63, 63
+};
+
+const int jpeg_natural_order2[2*2+16] =
+{
+    0,  1,  8,  9,
+    63, 63, 63, 63, 63, 63, 63, 63, /* extra entries for safety in decoder */
+    63, 63, 63, 63, 63, 63, 63, 63
+};
+
+
+/*
+ * Arithmetic utilities
+ */
+
+GLOBAL(long)
+jdiv_round_up (long a, long b)
+/* Compute a/b rounded up to next integer, ie, ceil(a/b) */
+/* Assumes a >= 0, b > 0 */
+{
+    return (a + b - 1L) / b;
+}
+
+
+GLOBAL(long)
+jround_up (long a, long b)
+/* Compute a rounded up to next multiple of b, ie, ceil(a/b)*b */
+/* Assumes a >= 0, b > 0 */
+{
+    a += b - 1L;
+    return a - (a % b);
+}
+
+
+/* On normal machines we can apply MEMCOPY() and MEMZERO() to sample arrays
+ * and coefficient-block arrays.  This won't work on 80x86 because the arrays
+ * are FAR and we're assuming a small-pointer memory model.  However, some
+ * DOS compilers provide far-pointer versions of memcpy() and memset() even
+ * in the small-model libraries.  These will be used if USE_FMEM is defined.
+ * Otherwise, the routines below do it the hard way.  (The performance cost
+ * is not all that great, because these routines aren't very heavily used.)
+ */
+
+#ifndef NEED_FAR_POINTERS	/* normal case, same as regular macros */
+#define FMEMCOPY(dest,src,size)	MEMCOPY(dest,src,size)
+#define FMEMZERO(target,size)	MEMZERO(target,size)
+#else				/* 80x86 case, define if we can */
+#ifdef USE_FMEM
+#define FMEMCOPY(dest,src,size)	_fmemcpy((void FAR *)(dest), (const void FAR *)(src), (size_t)(size))
+#define FMEMZERO(target,size)	_fmemset((void FAR *)(target), 0, (size_t)(size))
+#endif
+#endif
+
+
+GLOBAL(void)
+jcopy_sample_rows (JSAMPARRAY input_array, int source_row,
+                   JSAMPARRAY output_array, int dest_row,
+                   int num_rows, JDIMENSION num_cols)
+/* Copy some rows of samples from one place to another.
+ * num_rows rows are copied from input_array[source_row++]
+ * to output_array[dest_row++]; these areas may overlap for duplication.
+ * The source and destination arrays must be at least as wide as num_cols.
+ */
+{
+    register JSAMPROW inptr, outptr;
+#ifdef FMEMCOPY
+    register size_t count = (size_t) (num_cols * SIZEOF(JSAMPLE));
+#else
+    register JDIMENSION count;
+#endif
+    register int row;
+
+    input_array += source_row;
+    output_array += dest_row;
+
+    for (row = num_rows; row > 0; row--)
+    {
+        inptr = *input_array++;
+        outptr = *output_array++;
+#ifdef FMEMCOPY
+        FMEMCOPY(outptr, inptr, count);
+#else
+        for (count = num_cols; count > 0; count--)
+        {
+            *outptr++ = *inptr++;    /* needn't bother with GETJSAMPLE() here */
+        }
+#endif
+    }
+}
+
+
+GLOBAL(void)
+jcopy_block_row (JBLOCKROW input_row, JBLOCKROW output_row,
+                 JDIMENSION num_blocks)
+/* Copy a row of coefficient blocks from one place to another. */
+{
+#ifdef FMEMCOPY
+    FMEMCOPY(output_row, input_row, num_blocks * (DCTSIZE2 * SIZEOF(JCOEF)));
+#else
+    register JCOEFPTR inptr, outptr;
+    register long count;
+
+    inptr = (JCOEFPTR) input_row;
+    outptr = (JCOEFPTR) output_row;
+    for (count = (long) num_blocks * DCTSIZE2; count > 0; count--)
+    {
+        *outptr++ = *inptr++;
+    }
+#endif
+}
+
+
+GLOBAL(void)
+jzero_far (void FAR * target, size_t bytestozero)
+/* Zero out a chunk of FAR memory. */
+/* This might be sample-array data, block-array data, or alloc_large data. */
+{
+#ifdef FMEMZERO
+    FMEMZERO(target, bytestozero);
+#else
+    register char FAR * ptr = (char FAR *) target;
+    register size_t count;
+
+    for (count = bytestozero; count > 0; count--)
+    {
+        *ptr++ = 0;
+    }
+#endif
+}
diff -NEaurb neo/renderer/jpeg-8c/jversion.h neo/renderer/jpeg-8c/jversion.h
--- neo/renderer/jpeg-8c/jversion.h	1970-01-01 00:00:00 +0000
+++ neo/renderer/jpeg-8c/jversion.h	2012-11-17 01:20:39 +0000
@@ -0,0 +1,14 @@
+/*
+ * jversion.h
+ *
+ * Copyright (C) 1991-2011, Thomas G. Lane, Guido Vollbeding.
+ * This file is part of the Independent JPEG Group's software.
+ * For conditions of distribution and use, see the accompanying README file.
+ *
+ * This file contains software version identification.
+ */
+
+
+#define JVERSION	"8c  16-Jan-2011"
+
+#define JCOPYRIGHT	"Copyright (C) 2011, Thomas G. Lane, Guido Vollbeding"
diff -NEaurb neo/renderer/qgl.h neo/renderer/qgl.h
--- neo/renderer/qgl.h	2013-08-14 01:47:52 +0000
+++ neo/renderer/qgl.h	2013-08-13 02:39:26 +0000
@@ -103,6 +103,9 @@
 extern PFNGLGETBUFFERPARAMETERIVARBPROC qglGetBufferParameterivARB;
 extern PFNGLGETBUFFERPOINTERVARBPROC qglGetBufferPointervARB;
 
+// ARB_MapBufferRange
+extern PFNGLMAPBUFFERRANGEPROC				qglMapBufferRange;
+extern PFNGLFLUSHMAPPEDBUFFERRANGEPROC		qglFlushMappedBufferRange;
 
 // NV_register_combiners
 extern	void (APIENTRY *qglCombinerParameterfvNV)(GLenum pname, const GLfloat *params);
@@ -138,13 +141,9 @@
 extern	PFNGLALPHAFRAGMENTOP3ATIPROC	qglAlphaFragmentOp3ATI;
 extern	PFNGLSETFRAGMENTSHADERCONSTANTATIPROC	qglSetFragmentShaderConstantATI;
 
-// EXT_stencil_two_side
-extern	PFNGLACTIVESTENCILFACEEXTPROC	qglActiveStencilFaceEXT;
-
-
-// ATI_separate_stencil
-extern	PFNGLSTENCILOPSEPARATEATIPROC		qglStencilOpSeparateATI;
-extern	PFNGLSTENCILFUNCSEPARATEATIPROC		qglStencilFuncSeparateATI;
+// GL_ATI_separate_stencil / OpenGL 2.0 separate stencil
+extern PFNGLSTENCILOPSEPARATEATIPROC		qglStencilOpSeparate;
+extern PFNGLSTENCILFUNCSEPARATEATIPROC		qglStencilFuncSeparate;
 
 // ARB_texture_compression
 extern	PFNGLCOMPRESSEDTEXIMAGE2DARBPROC	qglCompressedTexImage2DARB;
diff -NEaurb neo/renderer/tr_deform.cpp neo/renderer/tr_deform.cpp
--- neo/renderer/tr_deform.cpp	2013-08-14 01:47:51 +0000
+++ neo/renderer/tr_deform.cpp	2013-08-13 16:10:44 +0000
@@ -726,20 +726,12 @@
         ac[i].st[1] = 0.5;
     }
 
-#if 1
     static glIndex_t	triIndexes[18*3] =
     {
         0,4,5,  0,5,6, 0,6,7, 0,7,1, 1,7,8, 1,8,9,
         15,4,0, 15,0,3, 3,0,1, 3,1,2, 2,1,9, 2,9,10,
         14,15,3, 14,3,13, 13,3,2, 13,2,12, 12,2,11, 11,2,10
     };
-#else
-    newTri->numIndexes = 12;
-    static glIndex_t triIndexes[4*3] =
-    {
-        0,1,2, 0,2,3, 0,4,5,0,5,6
-    };
-#endif
 
     memcpy(newTri->indexes, triIndexes, sizeof(triIndexes));
 
diff -NEaurb neo/renderer/tr_font.cpp neo/renderer/tr_font.cpp
--- neo/renderer/tr_font.cpp	2013-08-14 01:47:51 +0000
+++ neo/renderer/tr_font.cpp	2013-08-13 00:05:26 +0000
@@ -405,7 +405,7 @@
             outFont->glyphs[i].t			= readFloat();
             outFont->glyphs[i].s2			= readFloat();
             outFont->glyphs[i].t2			= readFloat();
-            int junk /* font.glyphs[i].glyph */		= readInt();
+            readInt();
             //FIXME: the +6, -6 skips the embedded fonts/
             memcpy(outFont->glyphs[i].shaderName, &fdFile[fdOffset + 6], 32 - 6);
             fdOffset += 32;
diff -NEaurb neo/renderer/tr_light.cpp neo/renderer/tr_light.cpp
--- neo/renderer/tr_light.cpp	2013-08-14 01:47:51 +0000
+++ neo/renderer/tr_light.cpp	2013-08-13 16:10:44 +0000
@@ -28,12 +28,10 @@
 
 #include "../idlib/precompiled.h"
 #pragma hdrstop
-
 #include "tr_local.h"
 
 static const float CHECK_BOUNDS_EPSILON = 1.0f;
 
-
 /*
 ===========================================================================================
 
@@ -42,6 +40,10 @@
 ===========================================================================================
 */
 
+semaphore_t drawsurf_mutex;				// thread safe
+semaphore_t ambient_viewcount_mutex;	// thread safe
+semaphore_t make_empty_mutex;			// thread safe allocation scheme;
+
 /*
 ==================
 R_CreateAmbientCache
@@ -55,13 +57,14 @@
     {
         return true;
     }
+
     // we are going to use it for drawing, so make sure we have the tangents and normals
     if (needsLighting && !tri->tangentsCalculated)
     {
         R_DeriveTangents(tri);
     }
-
     vertexCache.Alloc(tri->verts, tri->numVerts * sizeof(tri->verts[0]), &tri->ambientCache);
+
     if (!tri->ambientCache)
     {
         return false;
@@ -91,46 +94,12 @@
     {
         return true;
     }
-
     R_GlobalPointToLocal(ent->modelMatrix, light->globalLightOrigin, localLightOrigin);
 
     int	size = tri->ambientSurface->numVerts * sizeof(lightingCache_t);
     lightingCache_t *cache = (lightingCache_t *)_alloca16(size);
 
-#if 1
-
-    SIMDProcessor->CreateTextureSpaceLightVectors(&cache[0].localLightVector, localLightOrigin,
-            tri->ambientSurface->verts, tri->ambientSurface->numVerts, tri->indexes, tri->numIndexes);
-
-#else
-
-    bool *used = (bool *)_alloca16(tri->ambientSurface->numVerts * sizeof(used[0]));
-    memset(used, 0, tri->ambientSurface->numVerts * sizeof(used[0]));
-
-    // because the interaction may be a very small subset of the full surface,
-    // it makes sense to only deal with the verts used
-    for (int j = 0; j < tri->numIndexes; j++)
-    {
-        int i = tri->indexes[j];
-        if (used[i])
-        {
-            continue;
-        }
-        used[i] = true;
-
-        idVec3 lightDir;
-        const idDrawVert *v;
-
-        v = &tri->ambientSurface->verts[i];
-
-        lightDir = localLightOrigin - v->xyz;
-
-        cache[i].localLightVector[0] = lightDir * v->tangents[0];
-        cache[i].localLightVector[1] = lightDir * v->tangents[1];
-        cache[i].localLightVector[2] = lightDir * v->normal;
-    }
-
-#endif
+    SIMDProcessor->CreateTextureSpaceLightVectors(&cache[0].localLightVector, localLightOrigin, tri->ambientSurface->verts, tri->ambientSurface->numVerts, tri->indexes, tri->numIndexes);
 
     vertexCache.Alloc(cache, size, &tri->lightingCache);
     if (!tri->lightingCache)
@@ -171,32 +140,10 @@
     {
         return;
     }
-
     shadowCache_t *temp = (shadowCache_t *)_alloca16(tri->numVerts * 2 * sizeof(shadowCache_t));
 
-#if 1
-
     SIMDProcessor->CreateVertexProgramShadowCache(&temp->xyz, tri->verts, tri->numVerts);
 
-#else
-
-    int numVerts = tri->numVerts;
-    const idDrawVert *verts = tri->verts;
-    for (int i = 0; i < numVerts; i++)
-    {
-        const float *v = verts[i].xyz.ToFloatPtr();
-        temp[i*2+0].xyz[0] = v[0];
-        temp[i*2+1].xyz[0] = v[0];
-        temp[i*2+0].xyz[1] = v[1];
-        temp[i*2+1].xyz[1] = v[1];
-        temp[i*2+0].xyz[2] = v[2];
-        temp[i*2+1].xyz[2] = v[2];
-        temp[i*2+0].xyz[3] = 1.0f;		// on the model surface
-        temp[i*2+1].xyz[3] = 0.0f;		// will be projected to infinity
-    }
-
-#endif
-
     vertexCache.Alloc(temp, tri->numVerts * 2 * sizeof(shadowCache_t), &tri->shadowCache);
 }
 
@@ -223,7 +170,6 @@
         texCoords[i][1] = verts[i].xyz[1] - localViewOrigin[1];
         texCoords[i][2] = verts[i].xyz[2] - localViewOrigin[2];
     }
-
     surf->dynamicTexCoords = vertexCache.AllocFrameTemp(texCoords, size);
 }
 
@@ -333,53 +279,7 @@
     int	size = tri->numVerts * sizeof(idVec4);
     idVec4 *texCoords = (idVec4 *) _alloca16(size);
 
-#if 1
-
-    SIMDProcessor->CreateSpecularTextureCoords(texCoords, localLightOrigin, localViewOrigin,
-            tri->verts, tri->numVerts, tri->indexes, tri->numIndexes);
-
-#else
-
-    bool *used = (bool *)_alloca16(tri->numVerts * sizeof(used[0]));
-    memset(used, 0, tri->numVerts * sizeof(used[0]));
-
-    // because the interaction may be a very small subset of the full surface,
-    // it makes sense to only deal with the verts used
-    for (int j = 0; j < tri->numIndexes; j++)
-    {
-        int i = tri->indexes[j];
-        if (used[i])
-        {
-            continue;
-        }
-        used[i] = true;
-
-        float ilength;
-
-        const idDrawVert *v = &tri->verts[i];
-
-        idVec3 lightDir = localLightOrigin - v->xyz;
-        idVec3 viewDir = localViewOrigin - v->xyz;
-
-        ilength = idMath::RSqrt(lightDir * lightDir);
-        lightDir[0] *= ilength;
-        lightDir[1] *= ilength;
-        lightDir[2] *= ilength;
-
-        ilength = idMath::RSqrt(viewDir * viewDir);
-        viewDir[0] *= ilength;
-        viewDir[1] *= ilength;
-        viewDir[2] *= ilength;
-
-        lightDir += viewDir;
-
-        texCoords[i][0] = lightDir * v->tangents[0];
-        texCoords[i][1] = lightDir * v->tangents[1];
-        texCoords[i][2] = lightDir * v->normal;
-        texCoords[i][3] = 1;
-    }
-
-#endif
+    SIMDProcessor->CreateSpecularTextureCoords(texCoords, localLightOrigin, localViewOrigin, tri->verts, tri->numVerts, tri->indexes, tri->numIndexes);
 
     surf->dynamicTexCoords = vertexCache.AllocFrameTemp(texCoords, size);
 }
@@ -772,8 +672,10 @@
     }
 
     // actually link it in
+    SEM_WAIT(&linklight_mutex);
     drawSurf->nextOnLight = *link;
     *link = drawSurf;
+    SEM_POST(&linklight_mutex);
 }
 
 /*
@@ -1084,16 +986,6 @@
             }
         }
 
-#if 0
-        // this never happens, because CullLightByPortals() does a more precise job
-        if (vLight->scissorRect.IsEmpty())
-        {
-            // this light doesn't touch anything on screen, so remove it from the list
-            *ptr = vLight->next;
-            continue;
-        }
-#endif
-
         // this one stays on the list
         ptr = &vLight->next;
 
@@ -1484,7 +1376,7 @@
         if (!R_PreciseCullSurface(drawSurf, ndcBounds))
         {
             // did we ever use this to forward an entity color to a gui that didn't set color?
-//			memcpy( tr.guiShaderParms, shaderParms, sizeof( tr.guiShaderParms ) );
+            //			memcpy( tr.guiShaderParms, shaderParms, sizeof( tr.guiShaderParms ) );
             R_RenderGuiSurf(gui, drawSurf);
         }
 
@@ -1612,11 +1504,15 @@
             }
 
             // add the surface for drawing
+            SEM_WAIT(&drawsurf_mutex);
             R_AddDrawSurf(tri, vEntity, &vEntity->entityDef->parms, shader, vEntity->scissorRect);
+            SEM_POST(&drawsurf_mutex);
 
             // ambientViewCount is used to allow light interactions to be rejected
             // if the ambient surface isn't visible at all
+            SEM_WAIT(&ambient_viewcount_mutex);
             tri->ambientViewCount = tr.viewCount;
+            SEM_POST(&ambient_viewcount_mutex);
         }
     }
 
@@ -1653,11 +1549,25 @@
 two or more lights.
 ===================
 */
+#define MAX_INTER 1000
 void R_AddModelSurfaces(void)
 {
+    int					i, j;
+    int					nInteractions = 0;
+    int					nCreateInteractions = 0;
+    int					createInteractionId[MAX_INTER];
     viewEntity_t		*vEntity;
     idInteraction		*inter, *next;
     idRenderModel		*model;
+    idInteraction		*interactions[MAX_INTER];
+    idRenderModel		*createInteractionModel[MAX_INTER];
+    idRenderModel		*modelPtr[MAX_INTER];
+    idScreenRect		shadowScissor[MAX_INTER];
+    bool				phase2[MAX_INTER];
+
+    SEM_INIT(&drawsurf_mutex);			// thread safe
+    SEM_INIT(&ambient_viewcount_mutex); // thread safe
+    SEM_INIT(&face_planes_mutex);		// thread safe
 
     // clear the ambient surface list
     tr.viewDef->numDrawSurfs = 0;
@@ -1667,7 +1577,6 @@
     // any light that intersects the view (for shadows)
     for (vEntity = tr.viewDef->viewEntitys; vEntity; vEntity = vEntity->next)
     {
-
         if (r_useEntityScissors.GetBool())
         {
             // calculate the screen area covered by the entity
@@ -1680,7 +1589,6 @@
                 R_ShowColoredScreenRect(vEntity->scissorRect, vEntity->entityDef->index);
             }
         }
-
         float oldFloatTime;
         int oldTime;
 
@@ -1727,7 +1635,6 @@
                 }
                 continue;
             }
-
             R_AddAmbientDrawsurfs(vEntity);
             tr.pc.c_visibleViewEntities++;
         }
@@ -1750,7 +1657,9 @@
                     {
                         continue;
                     }
-                    inter->AddActiveInteraction();
+                    // fucking hell i forgot this while porting !!!!!!!
+                    interactions[nInteractions++] = inter;
+                    assert(nInteractions <= MAX_INTER);
                 }
             }
         }
@@ -1769,7 +1678,9 @@
                 {
                     continue;
                 }
-                inter->AddActiveInteraction();
+                // fucking hell i forgot this while porting !!!!!!!
+                interactions[nInteractions++] = inter;
+                assert(nInteractions < MAX_INTER);
             }
         }
 
@@ -1778,7 +1689,32 @@
             tr.viewDef->floatTime = oldFloatTime;
             tr.viewDef->renderView.time = oldTime;
         }
-
+    }
+    #pragma omp parallel for default(shared) schedule(dynamic)
+    for (i = 0; i < nInteractions; i++)
+    {
+        phase2[i] = interactions[i]->AddActiveInteraction(true, &shadowScissor[i], &modelPtr[i]);
+    }
+    for (i = 0; i < nInteractions; i++)
+    {
+        if (modelPtr[i])
+        {
+            createInteractionId[nCreateInteractions] = i;
+            createInteractionModel[nCreateInteractions] = modelPtr[i];
+            nCreateInteractions++;
+        }
+    }
+    #pragma omp parallel for shared(interactions,createInteractionId,createInteractionModel) schedule(dynamic)
+    for (j = 0; j < nCreateInteractions; j++)
+    {
+        interactions[createInteractionId[j]]->CreateInteraction(createInteractionModel[j]);
+    }
+    for (j = 0; j < nInteractions; j++)
+    {
+        if (phase2[j])
+        {
+            interactions[j]->AddActiveInteraction(false, &shadowScissor[j], &modelPtr[j]);
+        }
     }
 }
 
@@ -1843,7 +1779,6 @@
             {
                 surfRect.Union(surf->scissorRect);
             }
-
             vLight->scissorRect.Intersect(surfRect);
         }
     }
diff -NEaurb neo/renderer/tr_lightrun.cpp neo/renderer/tr_lightrun.cpp
--- neo/renderer/tr_lightrun.cpp	2013-08-14 01:47:51 +0000
+++ neo/renderer/tr_lightrun.cpp	2013-08-13 00:05:26 +0000
@@ -553,7 +553,6 @@
 {
     idRenderLightLocal	fakeLight;
 
-    memset(&fakeLight, 0, sizeof(fakeLight));
     fakeLight.parms = renderLight;
 
     R_DeriveLightData(&fakeLight);
diff -NEaurb neo/renderer/tr_local.h neo/renderer/tr_local.h
--- neo/renderer/tr_local.h	2013-08-14 01:47:52 +0000
+++ neo/renderer/tr_local.h	2013-08-13 02:57:06 +0000
@@ -1159,6 +1159,12 @@
 ====================================================================
 */
 
+extern semaphore_t drawsurf_mutex;			// thread safe
+extern semaphore_t linklight_mutex;			// thread safe
+extern semaphore_t face_planes_mutex;		// thread safe
+extern semaphore_t make_empty_mutex;		// thread safe
+extern semaphore_t ambient_viewcount_mutex;	// thread safe
+
 void R_RenderView(viewDef_t *parms);
 
 // performs radius cull first, then corner cull
diff -NEaurb neo/renderer/tr_main.cpp neo/renderer/tr_main.cpp
--- neo/renderer/tr_main.cpp	2013-08-14 01:47:51 +0000
+++ neo/renderer/tr_main.cpp	2013-08-13 15:32:11 +0000
@@ -59,8 +59,8 @@
 */
 void idScreenRect::AddPoint(float x, float y)
 {
-    int	ix = idMath::FtoiFast(x);
-    int iy = idMath::FtoiFast(y);
+    int	ix = idMath::Ftoi(x);
+    int iy = idMath::Ftoi(y);
 
     if (ix < x1)
     {
@@ -172,10 +172,10 @@
 {
     idScreenRect screenRect;
 
-    screenRect.x1 = idMath::FtoiFast(0.5f * (1.0f - bounds[1].y) * (tr.viewDef->viewport.x2 - tr.viewDef->viewport.x1));
-    screenRect.x2 = idMath::FtoiFast(0.5f * (1.0f - bounds[0].y) * (tr.viewDef->viewport.x2 - tr.viewDef->viewport.x1));
-    screenRect.y1 = idMath::FtoiFast(0.5f * (1.0f + bounds[0].z) * (tr.viewDef->viewport.y2 - tr.viewDef->viewport.y1));
-    screenRect.y2 = idMath::FtoiFast(0.5f * (1.0f + bounds[1].z) * (tr.viewDef->viewport.y2 - tr.viewDef->viewport.y1));
+    screenRect.x1 = idMath::Ftoi(0.5f * (1.0f - bounds[1].y) * (tr.viewDef->viewport.x2 - tr.viewDef->viewport.x1));
+    screenRect.x2 = idMath::Ftoi(0.5f * (1.0f - bounds[0].y) * (tr.viewDef->viewport.x2 - tr.viewDef->viewport.x1));
+    screenRect.y1 = idMath::Ftoi(0.5f * (1.0f + bounds[0].z) * (tr.viewDef->viewport.y2 - tr.viewDef->viewport.y1));
+    screenRect.y2 = idMath::Ftoi(0.5f * (1.0f + bounds[1].z) * (tr.viewDef->viewport.y2 - tr.viewDef->viewport.y1));
 
     if (r_useDepthBoundsTest.GetInteger())
     {
@@ -408,6 +408,8 @@
     frameMemoryBlock_t	*block;
     void			*buf;
 
+    SEM_WAIT(&common->alloc_mutex);
+
     bytes = (bytes+16)&~15;
     // see if it can be satisfied in the current block
     frame = frameData;
@@ -417,6 +419,7 @@
     {
         buf = block->base + block->used;
         block->used += bytes;
+        SEM_POST(&common->alloc_mutex);
         return buf;
     }
 
@@ -446,11 +449,12 @@
         common->FatalError("R_FrameAlloc of %i exceeded MEMORY_BLOCK_SIZE",
                            bytes);
     }
-
     frame->alloc = block;
 
     block->used = bytes;
 
+    SEM_POST(&common->alloc_mutex);
+
     return block->base;
 }
 
@@ -1204,11 +1208,13 @@
 {
     viewDef_t		*oldView;
 
+    SEM_INIT(&linklight_mutex);		// thread safe
+    SEM_INIT(&make_empty_mutex);	// thread safe
+
     if (parms->renderView.width <= 0 || parms->renderView.height <= 0)
     {
         return;
     }
-
     tr.viewCount++;
 
     // save view in case we are a subview
diff -NEaurb neo/renderer/tr_stencilshadow.cpp neo/renderer/tr_stencilshadow.cpp
--- neo/renderer/tr_stencilshadow.cpp	2013-08-14 01:47:51 +0000
+++ neo/renderer/tr_stencilshadow.cpp	2013-08-13 16:10:44 +0000
@@ -312,9 +312,9 @@
     R_GlobalPointToLocal(ent->modelMatrix, light->globalLightOrigin, lv);
     R_LightProjectionMatrix(lv, lightPlaneLocal, mat);
 
-#if 1
     // make a projected copy of the even verts into the odd spots
     in = &shadowVerts[firstShadowVert];
+
     for (i = firstShadowVert ; i < numShadowVerts ; i+= 2, in += 2)
     {
         float	w, oow;
@@ -327,7 +327,6 @@
             in[1] = in[0];
             continue;
         }
-
         oow = 1.0 / w;
         in[1].x = (in->ToVec3() * mat[0].ToVec3() + mat[0][3]) * oow;
         in[1].y = (in->ToVec3() * mat[1].ToVec3() + mat[1][3]) * oow;
@@ -335,20 +334,6 @@
         in[1].w = 1;
     }
 
-#else
-    // messing with W seems to cause some depth precision problems
-
-    // make a projected copy of the even verts into the odd spots
-    in = &shadowVerts[firstShadowVert];
-    for (i = firstShadowVert ; i < numShadowVerts ; i+= 2, in += 2)
-    {
-        in[0].w = 1;
-        in[1].x = *in * mat[0].ToVec3() + mat[0][3];
-        in[1].y = *in * mat[1].ToVec3() + mat[1][3];
-        in[1].z = *in * mat[2].ToVec3() + mat[2][3];
-        in[1].w = *in * mat[3].ToVec3() + mat[3][3];
-    }
-#endif
 }
 
 
@@ -578,7 +563,7 @@
 other point is on the plane, it will be completely removed.
 ===================
 */
-static bool R_ClipLineToLight(const idVec3 &a, const idVec3 &b, const idPlane frustum[4],
+static bool R_ClipLineToLight(const idVec3 &a, const idVec3 &b, const idPlane frustum[6],
                               idVec3 &p1, idVec3 &p2)
 {
     float	*clip;
diff -NEaurb neo/renderer/tr_trisurf.cpp neo/renderer/tr_trisurf.cpp
--- neo/renderer/tr_trisurf.cpp	2013-08-14 01:47:51 +0000
+++ neo/renderer/tr_trisurf.cpp	2013-08-13 16:10:44 +0000
@@ -929,52 +929,8 @@
     }
     planes = tri->facePlanes;
 
-#if 1
-
     SIMDProcessor->DeriveTriPlanes(planes, tri->verts, tri->numVerts, tri->indexes, tri->numIndexes);
 
-#else
-
-    for (int i = 0; i < tri->numIndexes; i+= 3, planes++)
-    {
-        int		i1, i2, i3;
-        idVec3	d1, d2, normal;
-        idVec3	*v1, *v2, *v3;
-
-        i1 = tri->indexes[i + 0];
-        i2 = tri->indexes[i + 1];
-        i3 = tri->indexes[i + 2];
-
-        v1 = &tri->verts[i1].xyz;
-        v2 = &tri->verts[i2].xyz;
-        v3 = &tri->verts[i3].xyz;
-
-        d1[0] = v2->x - v1->x;
-        d1[1] = v2->y - v1->y;
-        d1[2] = v2->z - v1->z;
-
-        d2[0] = v3->x - v1->x;
-        d2[1] = v3->y - v1->y;
-        d2[2] = v3->z - v1->z;
-
-        normal[0] = d2.y * d1.z - d2.z * d1.y;
-        normal[1] = d2.z * d1.x - d2.x * d1.z;
-        normal[2] = d2.x * d1.y - d2.y * d1.x;
-
-        float sqrLength, invLength;
-
-        sqrLength = normal.x * normal.x + normal.y * normal.y + normal.z * normal.z;
-        invLength = idMath::RSqrt(sqrLength);
-
-        (*planes)[0] = normal[0] * invLength;
-        (*planes)[1] = normal[1] * invLength;
-        (*planes)[2] = normal[2] * invLength;
-
-        planes->FitThroughPoint(*v1);
-    }
-
-#endif
-
     tri->facePlanesCalculated = true;
 }
 
@@ -1760,60 +1716,8 @@
     {
         return;
     }
-
-#if 1
-
     SIMDProcessor->DeriveUnsmoothedTangents(tri->verts, tri->dominantTris, tri->numVerts);
 
-#else
-
-    for (int i = 0 ; i < tri->numVerts ; i++)
-    {
-        idVec3		temp;
-        float		d0[5], d1[5];
-        idDrawVert	*a, *b, *c;
-        dominantTri_t	*dt = &tri->dominantTris[i];
-
-        a = tri->verts + i;
-        b = tri->verts + dt->v2;
-        c = tri->verts + dt->v3;
-
-        d0[0] = b->xyz[0] - a->xyz[0];
-        d0[1] = b->xyz[1] - a->xyz[1];
-        d0[2] = b->xyz[2] - a->xyz[2];
-        d0[3] = b->st[0] - a->st[0];
-        d0[4] = b->st[1] - a->st[1];
-
-        d1[0] = c->xyz[0] - a->xyz[0];
-        d1[1] = c->xyz[1] - a->xyz[1];
-        d1[2] = c->xyz[2] - a->xyz[2];
-        d1[3] = c->st[0] - a->st[0];
-        d1[4] = c->st[1] - a->st[1];
-
-        a->normal[0] = dt->normalizationScale[2] * (d1[1] * d0[2] - d1[2] * d0[1]);
-        a->normal[1] = dt->normalizationScale[2] * (d1[2] * d0[0] - d1[0] * d0[2]);
-        a->normal[2] = dt->normalizationScale[2] * (d1[0] * d0[1] - d1[1] * d0[0]);
-
-        a->tangents[0][0] = dt->normalizationScale[0] * (d0[0] * d1[4] - d0[4] * d1[0]);
-        a->tangents[0][1] = dt->normalizationScale[0] * (d0[1] * d1[4] - d0[4] * d1[1]);
-        a->tangents[0][2] = dt->normalizationScale[0] * (d0[2] * d1[4] - d0[4] * d1[2]);
-
-#ifdef DERIVE_UNSMOOTHED_BITANGENT
-        // derive the bitangent for a completely orthogonal axis,
-        // instead of using the texture T vector
-        a->tangents[1][0] = dt->normalizationScale[1] * (a->normal[2] * a->tangents[0][1] - a->normal[1] * a->tangents[0][2]);
-        a->tangents[1][1] = dt->normalizationScale[1] * (a->normal[0] * a->tangents[0][2] - a->normal[2] * a->tangents[0][0]);
-        a->tangents[1][2] = dt->normalizationScale[1] * (a->normal[1] * a->tangents[0][0] - a->normal[0] * a->tangents[0][1]);
-#else
-        // calculate the bitangent from the texture T vector
-        a->tangents[1][0] = dt->normalizationScale[1] * (d0[3] * d1[0] - d0[0] * d1[3]);
-        a->tangents[1][1] = dt->normalizationScale[1] * (d0[3] * d1[1] - d0[1] * d1[3]);
-        a->tangents[1][2] = dt->normalizationScale[1] * (d0[3] * d1[2] - d0[2] * d1[3]);
-#endif
-    }
-
-#endif
-
     tri->tangentsCalculated = true;
 }
 
@@ -1841,7 +1745,6 @@
     {
         return;
     }
-
     tr.pc.c_tangentIndexes += tri->numIndexes;
 
     if (!tri->facePlanes && allocFacePlanes)
@@ -1850,117 +1753,12 @@
     }
     planes = tri->facePlanes;
 
-#if 1
-
     if (!planes)
     {
         planes = (idPlane *)_alloca16((tri->numIndexes / 3) * sizeof(planes[0]));
     }
-
     SIMDProcessor->DeriveTangents(planes, tri->verts, tri->numVerts, tri->indexes, tri->numIndexes);
 
-#else
-
-    for (i = 0; i < tri->numVerts; i++)
-    {
-        tri->verts[i].normal.Zero();
-        tri->verts[i].tangents[0].Zero();
-        tri->verts[i].tangents[1].Zero();
-    }
-
-    for (i = 0; i < tri->numIndexes; i += 3)
-    {
-        // make face tangents
-        float		d0[5], d1[5];
-        idDrawVert	*a, *b, *c;
-        idVec3		temp, normal, tangents[2];
-
-        a = tri->verts + tri->indexes[i + 0];
-        b = tri->verts + tri->indexes[i + 1];
-        c = tri->verts + tri->indexes[i + 2];
-
-        d0[0] = b->xyz[0] - a->xyz[0];
-        d0[1] = b->xyz[1] - a->xyz[1];
-        d0[2] = b->xyz[2] - a->xyz[2];
-        d0[3] = b->st[0] - a->st[0];
-        d0[4] = b->st[1] - a->st[1];
-
-        d1[0] = c->xyz[0] - a->xyz[0];
-        d1[1] = c->xyz[1] - a->xyz[1];
-        d1[2] = c->xyz[2] - a->xyz[2];
-        d1[3] = c->st[0] - a->st[0];
-        d1[4] = c->st[1] - a->st[1];
-
-        // normal
-        temp[0] = d1[1] * d0[2] - d1[2] * d0[1];
-        temp[1] = d1[2] * d0[0] - d1[0] * d0[2];
-        temp[2] = d1[0] * d0[1] - d1[1] * d0[0];
-        VectorNormalizeFast2(temp, normal);
-
-#ifdef USE_INVA
-        float area = d0[3] * d1[4] - d0[4] * d1[3];
-        float inva = area < 0.0f ? -1 : 1;		// was = 1.0f / area;
-
-        temp[0] = (d0[0] * d1[4] - d0[4] * d1[0]) * inva;
-        temp[1] = (d0[1] * d1[4] - d0[4] * d1[1]) * inva;
-        temp[2] = (d0[2] * d1[4] - d0[4] * d1[2]) * inva;
-        VectorNormalizeFast2(temp, tangents[0]);
-
-        temp[0] = (d0[3] * d1[0] - d0[0] * d1[3]) * inva;
-        temp[1] = (d0[3] * d1[1] - d0[1] * d1[3]) * inva;
-        temp[2] = (d0[3] * d1[2] - d0[2] * d1[3]) * inva;
-        VectorNormalizeFast2(temp, tangents[1]);
-#else
-        temp[0] = (d0[0] * d1[4] - d0[4] * d1[0]);
-        temp[1] = (d0[1] * d1[4] - d0[4] * d1[1]);
-        temp[2] = (d0[2] * d1[4] - d0[4] * d1[2]);
-        VectorNormalizeFast2(temp, tangents[0]);
-
-        temp[0] = (d0[3] * d1[0] - d0[0] * d1[3]);
-        temp[1] = (d0[3] * d1[1] - d0[1] * d1[3]);
-        temp[2] = (d0[3] * d1[2] - d0[2] * d1[3]);
-        VectorNormalizeFast2(temp, tangents[1]);
-#endif
-
-        // sum up the tangents and normals for each vertex on this face
-        for (int j = 0 ; j < 3 ; j++)
-        {
-            vert = &tri->verts[tri->indexes[i+j]];
-            vert->normal += normal;
-            vert->tangents[0] += tangents[0];
-            vert->tangents[1] += tangents[1];
-        }
-
-        if (planes)
-        {
-            planes->Normal() = normal;
-            planes->FitThroughPoint(a->xyz);
-            planes++;
-        }
-    }
-
-#endif
-
-#if 0
-
-    if (tri->silIndexes != NULL)
-    {
-        for (i = 0; i < tri->numVerts; i++)
-        {
-            tri->verts[i].normal.Zero();
-        }
-        for (i = 0; i < tri->numIndexes; i++)
-        {
-            tri->verts[tri->silIndexes[i]].normal += planes[i/3].Normal();
-        }
-        for (i = 0 ; i < tri->numIndexes ; i++)
-        {
-            tri->verts[tri->indexes[i]].normal = tri->verts[tri->silIndexes[i]].normal;
-        }
-    }
-
-#else
-
     int *dupVerts = tri->dupVerts;
     idDrawVert *verts = tri->verts;
 
@@ -1976,55 +1774,12 @@
         verts[dupVerts[i*2+1]].normal = verts[dupVerts[i*2+0]].normal;
     }
 
-#endif
-
-#if 0
-    // sum up both sides of the mirrored verts
-    // so the S vectors exactly mirror, and the T vectors are equal
-    for (i = 0 ; i < tri->numMirroredVerts ; i++)
-    {
-        idDrawVert	*v1, *v2;
-
-        v1 = &tri->verts[ tri->numVerts - tri->numMirroredVerts + i ];
-        v2 = &tri->verts[ tri->mirroredVerts[i] ];
-
-        v1->tangents[0] -= v2->tangents[0];
-        v1->tangents[1] += v2->tangents[1];
-
-        v2->tangents[0] = vec3_origin - v1->tangents[0];
-        v2->tangents[1] = v1->tangents[1];
-    }
-#endif
-
     // project the summed vectors onto the normal plane
     // and normalize.  The tangent vectors will not necessarily
     // be orthogonal to each other, but they will be orthogonal
     // to the surface normal.
-#if 1
-
     SIMDProcessor->NormalizeTangents(tri->verts, tri->numVerts);
 
-#else
-
-    for (i = 0 ; i < tri->numVerts ; i++)
-    {
-        idDrawVert *vert = &tri->verts[i];
-
-        VectorNormalizeFast2(vert->normal, vert->normal);
-
-        // project the tangent vectors
-        for (int j = 0 ; j < 2 ; j++)
-        {
-            float d;
-
-            d = vert->tangents[j] * vert->normal;
-            vert->tangents[j] = vert->tangents[j] - d * vert->normal;
-            VectorNormalizeFast2(vert->tangents[j], vert->tangents[j]);
-        }
-    }
-
-#endif
-
     tri->tangentsCalculated = true;
     tri->facePlanesCalculated = true;
 }
diff -NEaurb neo/renderer/wglext.h neo/renderer/wglext.h
--- neo/renderer/wglext.h	2013-08-14 01:47:52 +0000
+++ neo/renderer/wglext.h	2012-11-29 03:22:14 +0000
@@ -6,34 +6,30 @@
 #endif
 
     /*
-    ** License Applicability. Except to the extent portions of this file are
-    ** made subject to an alternative license as permitted in the SGI Free
-    ** Software License B, Version 1.1 (the "License"), the contents of this
-    ** file are subject only to the provisions of the License. You may not use
-    ** this file except in compliance with the License. You may obtain a copy
-    ** of the License at Silicon Graphics, Inc., attn: Legal Services, 1600
-    ** Amphitheatre Parkway, Mountain View, CA 94043-1351, or at:
+    ** Copyright (c) 2007-2012 The Khronos Group Inc.
     **
-    ** http://oss.sgi.com/projects/FreeB
+    ** Permission is hereby granted, free of charge, to any person obtaining a
+    ** copy of this software and/or associated documentation files (the
+    ** "Materials"), to deal in the Materials without restriction, including
+    ** without limitation the rights to use, copy, modify, merge, publish,
+    ** distribute, sublicense, and/or sell copies of the Materials, and to
+    ** permit persons to whom the Materials are furnished to do so, subject to
+    ** the following conditions:
     **
-    ** Note that, as provided in the License, the Software is distributed on an
-    ** "AS IS" basis, with ALL EXPRESS AND IMPLIED WARRANTIES AND CONDITIONS
-    ** DISCLAIMED, INCLUDING, WITHOUT LIMITATION, ANY IMPLIED WARRANTIES AND
-    ** CONDITIONS OF MERCHANTABILITY, SATISFACTORY QUALITY, FITNESS FOR A
-    ** PARTICULAR PURPOSE, AND NON-INFRINGEMENT.
+    ** The above copyright notice and this permission notice shall be included
+    ** in all copies or substantial portions of the Materials.
     **
-    ** Original Code. The Original Code is: OpenGL Sample Implementation,
-    ** Version 1.2.1, released January 26, 2000, developed by Silicon Graphics,
-    ** Inc. The Original Code is Copyright (c) 1991-2002 Silicon Graphics, Inc.
-    ** Copyright in any portions created by third parties is as indicated
-    ** elsewhere herein. All Rights Reserved.
-    **
-    ** Additional Notice Provisions: This software was created using the
-    ** OpenGL(R) version 1.2.1 Sample Implementation published by SGI, but has
-    ** not been independently verified as being compliant with the OpenGL(R)
-    ** version 1.2.1 Specification.
+    ** THE MATERIALS ARE PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+    ** EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+    ** MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
+    ** IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
+    ** CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
+    ** TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
+    ** MATERIALS OR THE USE OR OTHER DEALINGS IN THE MATERIALS.
     */
 
+    /* Function declaration macros - to move into glplatform.h */
+
 #if defined(_WIN32) && !defined(APIENTRY) && !defined(__CYGWIN__) && !defined(__SCITECH_SNAP__)
 #define WIN32_LEAN_AND_MEAN 1
 #include <windows.h>
@@ -52,9 +48,9 @@
     /*************************************************************/
 
     /* Header file version number */
-    /* wglext.h last updated 2002/03/22 */
-    /* Current version at http://oss.sgi.com/projects/ogl-sample/registry/ */
-#define WGL_WGLEXT_VERSION 4
+    /* wglext.h last updated 2012/01/04 */
+    /* Current version at http://www.opengl.org/registry/ */
+#define WGL_WGLEXT_VERSION 24
 
 #ifndef WGL_ARB_buffer_region
 #define WGL_FRONT_COLOR_BUFFER_BIT_ARB 0x00000001
@@ -175,6 +171,38 @@
 #define WGL_AUX9_ARB                   0x2090
 #endif
 
+#ifndef WGL_ARB_pixel_format_float
+#define WGL_TYPE_RGBA_FLOAT_ARB        0x21A0
+#endif
+
+#ifndef WGL_ARB_framebuffer_sRGB
+#define WGL_FRAMEBUFFER_SRGB_CAPABLE_ARB 0x20A9
+#endif
+
+#ifndef WGL_ARB_create_context
+#define WGL_CONTEXT_DEBUG_BIT_ARB      0x00000001
+#define WGL_CONTEXT_FORWARD_COMPATIBLE_BIT_ARB 0x00000002
+#define WGL_CONTEXT_MAJOR_VERSION_ARB  0x2091
+#define WGL_CONTEXT_MINOR_VERSION_ARB  0x2092
+#define WGL_CONTEXT_LAYER_PLANE_ARB    0x2093
+#define WGL_CONTEXT_FLAGS_ARB          0x2094
+#define ERROR_INVALID_VERSION_ARB      0x2095
+#endif
+
+#ifndef WGL_ARB_create_context_profile
+#define WGL_CONTEXT_PROFILE_MASK_ARB   0x9126
+#define WGL_CONTEXT_CORE_PROFILE_BIT_ARB 0x00000001
+#define WGL_CONTEXT_COMPATIBILITY_PROFILE_BIT_ARB 0x00000002
+#define ERROR_INVALID_PROFILE_ARB      0x2096
+#endif
+
+#ifndef WGL_ARB_create_context_robustness
+#define WGL_CONTEXT_ROBUST_ACCESS_BIT_ARB 0x00000004
+#define WGL_LOSE_CONTEXT_ON_RESET_ARB  0x8252
+#define WGL_CONTEXT_RESET_NOTIFICATION_STRATEGY_ARB 0x8256
+#define WGL_NO_RESET_NOTIFICATION_ARB  0x8261
+#endif
+
 #ifndef WGL_EXT_make_current_read
 #define ERROR_INVALID_PIXEL_TYPE_EXT   0x2043
 #endif
@@ -299,6 +327,10 @@
 #define WGL_TEXTURE_RECTANGLE_NV       0x20A2
 #endif
 
+#ifndef WGL_ATI_pixel_format_float
+#define WGL_TYPE_RGBA_FLOAT_ATI        0x21A0
+#endif
+
 #ifndef WGL_NV_float_buffer
 #define WGL_FLOAT_COMPONENTS_NV        0x20B0
 #define WGL_BIND_TO_TEXTURE_RECTANGLE_FLOAT_R_NV 0x20B1
@@ -311,6 +343,91 @@
 #define WGL_TEXTURE_FLOAT_RGBA_NV      0x20B8
 #endif
 
+#ifndef WGL_3DL_stereo_control
+#define WGL_STEREO_EMITTER_ENABLE_3DL  0x2055
+#define WGL_STEREO_EMITTER_DISABLE_3DL 0x2056
+#define WGL_STEREO_POLARITY_NORMAL_3DL 0x2057
+#define WGL_STEREO_POLARITY_INVERT_3DL 0x2058
+#endif
+
+#ifndef WGL_EXT_pixel_format_packed_float
+#define WGL_TYPE_RGBA_UNSIGNED_FLOAT_EXT 0x20A8
+#endif
+
+#ifndef WGL_EXT_framebuffer_sRGB
+#define WGL_FRAMEBUFFER_SRGB_CAPABLE_EXT 0x20A9
+#endif
+
+#ifndef WGL_NV_present_video
+#define WGL_NUM_VIDEO_SLOTS_NV         0x20F0
+#endif
+
+#ifndef WGL_NV_video_out
+#define WGL_BIND_TO_VIDEO_RGB_NV       0x20C0
+#define WGL_BIND_TO_VIDEO_RGBA_NV      0x20C1
+#define WGL_BIND_TO_VIDEO_RGB_AND_DEPTH_NV 0x20C2
+#define WGL_VIDEO_OUT_COLOR_NV         0x20C3
+#define WGL_VIDEO_OUT_ALPHA_NV         0x20C4
+#define WGL_VIDEO_OUT_DEPTH_NV         0x20C5
+#define WGL_VIDEO_OUT_COLOR_AND_ALPHA_NV 0x20C6
+#define WGL_VIDEO_OUT_COLOR_AND_DEPTH_NV 0x20C7
+#define WGL_VIDEO_OUT_FRAME            0x20C8
+#define WGL_VIDEO_OUT_FIELD_1          0x20C9
+#define WGL_VIDEO_OUT_FIELD_2          0x20CA
+#define WGL_VIDEO_OUT_STACKED_FIELDS_1_2 0x20CB
+#define WGL_VIDEO_OUT_STACKED_FIELDS_2_1 0x20CC
+#endif
+
+#ifndef WGL_NV_swap_group
+#endif
+
+#ifndef WGL_NV_gpu_affinity
+#define WGL_ERROR_INCOMPATIBLE_AFFINITY_MASKS_NV 0x20D0
+#define WGL_ERROR_MISSING_AFFINITY_MASK_NV 0x20D1
+#endif
+
+#ifndef WGL_AMD_gpu_association
+#define WGL_GPU_VENDOR_AMD             0x1F00
+#define WGL_GPU_RENDERER_STRING_AMD    0x1F01
+#define WGL_GPU_OPENGL_VERSION_STRING_AMD 0x1F02
+#define WGL_GPU_FASTEST_TARGET_GPUS_AMD 0x21A2
+#define WGL_GPU_RAM_AMD                0x21A3
+#define WGL_GPU_CLOCK_AMD              0x21A4
+#define WGL_GPU_NUM_PIPES_AMD          0x21A5
+#define WGL_GPU_NUM_SIMD_AMD           0x21A6
+#define WGL_GPU_NUM_RB_AMD             0x21A7
+#define WGL_GPU_NUM_SPI_AMD            0x21A8
+#endif
+
+#ifndef WGL_NV_video_capture
+#define WGL_UNIQUE_ID_NV               0x20CE
+#define WGL_NUM_VIDEO_CAPTURE_SLOTS_NV 0x20CF
+#endif
+
+#ifndef WGL_NV_copy_image
+#endif
+
+#ifndef WGL_NV_multisample_coverage
+#define WGL_COVERAGE_SAMPLES_NV        0x2042
+#define WGL_COLOR_SAMPLES_NV           0x20B9
+#endif
+
+#ifndef WGL_EXT_create_context_es2_profile
+#define WGL_CONTEXT_ES2_PROFILE_BIT_EXT 0x00000004
+#endif
+
+#ifndef WGL_NV_DX_interop
+#define WGL_ACCESS_READ_ONLY_NV        0x00000000
+#define WGL_ACCESS_READ_WRITE_NV       0x00000001
+#define WGL_ACCESS_WRITE_DISCARD_NV    0x00000002
+#endif
+
+#ifndef WGL_NV_DX_interop2
+#endif
+
+#ifndef WGL_EXT_swap_control_tear
+#endif
+
 
     /*************************************************************/
 
@@ -320,14 +437,36 @@
 #ifndef WGL_EXT_pbuffer
     DECLARE_HANDLE(HPBUFFEREXT);
 #endif
+#ifndef WGL_NV_present_video
+    DECLARE_HANDLE(HVIDEOOUTPUTDEVICENV);
+#endif
+#ifndef WGL_NV_video_output
+    DECLARE_HANDLE(HPVIDEODEV);
+#endif
+#ifndef WGL_NV_gpu_affinity
+    DECLARE_HANDLE(HPGPUNV);
+    DECLARE_HANDLE(HGPUNV);
+
+    typedef struct _GPU_DEVICE
+    {
+        DWORD  cb;
+        CHAR   DeviceName[32];
+        CHAR   DeviceString[128];
+        DWORD  Flags;
+        RECT   rcVirtualScreen;
+    } GPU_DEVICE, *PGPU_DEVICE;
+#endif
+#ifndef WGL_NV_video_capture
+    DECLARE_HANDLE(HVIDEOINPUTDEVICENV);
+#endif
 
 #ifndef WGL_ARB_buffer_region
 #define WGL_ARB_buffer_region 1
 #ifdef WGL_WGLEXT_PROTOTYPES
-    extern HANDLE WINAPI wglCreateBufferRegionARB(HDC, int, UINT);
-    extern VOID WINAPI wglDeleteBufferRegionARB(HANDLE);
-    extern BOOL WINAPI wglSaveBufferRegionARB(HANDLE, int, int, int, int);
-    extern BOOL WINAPI wglRestoreBufferRegionARB(HANDLE, int, int, int, int, int, int);
+    extern HANDLE WINAPI wglCreateBufferRegionARB(HDC hDC, int iLayerPlane, UINT uType);
+    extern VOID WINAPI wglDeleteBufferRegionARB(HANDLE hRegion);
+    extern BOOL WINAPI wglSaveBufferRegionARB(HANDLE hRegion, int x, int y, int width, int height);
+    extern BOOL WINAPI wglRestoreBufferRegionARB(HANDLE hRegion, int x, int y, int width, int height, int xSrc, int ySrc);
 #endif /* WGL_WGLEXT_PROTOTYPES */
     typedef HANDLE(WINAPI * PFNWGLCREATEBUFFERREGIONARBPROC)(HDC hDC, int iLayerPlane, UINT uType);
     typedef VOID (WINAPI * PFNWGLDELETEBUFFERREGIONARBPROC)(HANDLE hRegion);
@@ -342,7 +481,7 @@
 #ifndef WGL_ARB_extensions_string
 #define WGL_ARB_extensions_string 1
 #ifdef WGL_WGLEXT_PROTOTYPES
-    extern const char * WINAPI wglGetExtensionsStringARB(HDC);
+    extern const char * WINAPI wglGetExtensionsStringARB(HDC hdc);
 #endif /* WGL_WGLEXT_PROTOTYPES */
     typedef const char * (WINAPI * PFNWGLGETEXTENSIONSSTRINGARBPROC)(HDC hdc);
 #endif
@@ -350,9 +489,9 @@
 #ifndef WGL_ARB_pixel_format
 #define WGL_ARB_pixel_format 1
 #ifdef WGL_WGLEXT_PROTOTYPES
-    extern BOOL WINAPI wglGetPixelFormatAttribivARB(HDC, int, int, UINT, const int *, int *);
-    extern BOOL WINAPI wglGetPixelFormatAttribfvARB(HDC, int, int, UINT, const int *, FLOAT *);
-    extern BOOL WINAPI wglChoosePixelFormatARB(HDC, const int *, const FLOAT *, UINT, int *, UINT *);
+    extern BOOL WINAPI wglGetPixelFormatAttribivARB(HDC hdc, int iPixelFormat, int iLayerPlane, UINT nAttributes, const int *piAttributes, int *piValues);
+    extern BOOL WINAPI wglGetPixelFormatAttribfvARB(HDC hdc, int iPixelFormat, int iLayerPlane, UINT nAttributes, const int *piAttributes, FLOAT *pfValues);
+    extern BOOL WINAPI wglChoosePixelFormatARB(HDC hdc, const int *piAttribIList, const FLOAT *pfAttribFList, UINT nMaxFormats, int *piFormats, UINT *nNumFormats);
 #endif /* WGL_WGLEXT_PROTOTYPES */
     typedef BOOL (WINAPI * PFNWGLGETPIXELFORMATATTRIBIVARBPROC)(HDC hdc, int iPixelFormat, int iLayerPlane, UINT nAttributes, const int *piAttributes, int *piValues);
     typedef BOOL (WINAPI * PFNWGLGETPIXELFORMATATTRIBFVARBPROC)(HDC hdc, int iPixelFormat, int iLayerPlane, UINT nAttributes, const int *piAttributes, FLOAT *pfValues);
@@ -362,7 +501,7 @@
 #ifndef WGL_ARB_make_current_read
 #define WGL_ARB_make_current_read 1
 #ifdef WGL_WGLEXT_PROTOTYPES
-    extern BOOL WINAPI wglMakeContextCurrentARB(HDC, HDC, HGLRC);
+    extern BOOL WINAPI wglMakeContextCurrentARB(HDC hDrawDC, HDC hReadDC, HGLRC hglrc);
     extern HDC WINAPI wglGetCurrentReadDCARB(void);
 #endif /* WGL_WGLEXT_PROTOTYPES */
     typedef BOOL (WINAPI * PFNWGLMAKECONTEXTCURRENTARBPROC)(HDC hDrawDC, HDC hReadDC, HGLRC hglrc);
@@ -372,11 +511,11 @@
 #ifndef WGL_ARB_pbuffer
 #define WGL_ARB_pbuffer 1
 #ifdef WGL_WGLEXT_PROTOTYPES
-    extern HPBUFFERARB WINAPI wglCreatePbufferARB(HDC, int, int, int, const int *);
-    extern HDC WINAPI wglGetPbufferDCARB(HPBUFFERARB);
-    extern int WINAPI wglReleasePbufferDCARB(HPBUFFERARB, HDC);
-    extern BOOL WINAPI wglDestroyPbufferARB(HPBUFFERARB);
-    extern BOOL WINAPI wglQueryPbufferARB(HPBUFFERARB, int, int *);
+    extern HPBUFFERARB WINAPI wglCreatePbufferARB(HDC hDC, int iPixelFormat, int iWidth, int iHeight, const int *piAttribList);
+    extern HDC WINAPI wglGetPbufferDCARB(HPBUFFERARB hPbuffer);
+    extern int WINAPI wglReleasePbufferDCARB(HPBUFFERARB hPbuffer, HDC hDC);
+    extern BOOL WINAPI wglDestroyPbufferARB(HPBUFFERARB hPbuffer);
+    extern BOOL WINAPI wglQueryPbufferARB(HPBUFFERARB hPbuffer, int iAttribute, int *piValue);
 #endif /* WGL_WGLEXT_PROTOTYPES */
     typedef HPBUFFERARB(WINAPI * PFNWGLCREATEPBUFFERARBPROC)(HDC hDC, int iPixelFormat, int iWidth, int iHeight, const int *piAttribList);
     typedef HDC(WINAPI * PFNWGLGETPBUFFERDCARBPROC)(HPBUFFERARB hPbuffer);
@@ -388,22 +527,46 @@
 #ifndef WGL_ARB_render_texture
 #define WGL_ARB_render_texture 1
 #ifdef WGL_WGLEXT_PROTOTYPES
-    extern BOOL WINAPI wglBindTexImageARB(HPBUFFERARB, int);
-    extern BOOL WINAPI wglReleaseTexImageARB(HPBUFFERARB, int);
-    extern BOOL WINAPI wglSetPbufferAttribARB(HPBUFFERARB, const int *);
+    extern BOOL WINAPI wglBindTexImageARB(HPBUFFERARB hPbuffer, int iBuffer);
+    extern BOOL WINAPI wglReleaseTexImageARB(HPBUFFERARB hPbuffer, int iBuffer);
+    extern BOOL WINAPI wglSetPbufferAttribARB(HPBUFFERARB hPbuffer, const int *piAttribList);
 #endif /* WGL_WGLEXT_PROTOTYPES */
     typedef BOOL (WINAPI * PFNWGLBINDTEXIMAGEARBPROC)(HPBUFFERARB hPbuffer, int iBuffer);
     typedef BOOL (WINAPI * PFNWGLRELEASETEXIMAGEARBPROC)(HPBUFFERARB hPbuffer, int iBuffer);
     typedef BOOL (WINAPI * PFNWGLSETPBUFFERATTRIBARBPROC)(HPBUFFERARB hPbuffer, const int *piAttribList);
 #endif
 
+#ifndef WGL_ARB_pixel_format_float
+#define WGL_ARB_pixel_format_float 1
+#endif
+
+#ifndef WGL_ARB_framebuffer_sRGB
+#define WGL_ARB_framebuffer_sRGB 1
+#endif
+
+#ifndef WGL_ARB_create_context
+#define WGL_ARB_create_context 1
+#ifdef WGL_WGLEXT_PROTOTYPES
+    extern HGLRC WINAPI wglCreateContextAttribsARB(HDC hDC, HGLRC hShareContext, const int *attribList);
+#endif /* WGL_WGLEXT_PROTOTYPES */
+    typedef HGLRC(WINAPI * PFNWGLCREATECONTEXTATTRIBSARBPROC)(HDC hDC, HGLRC hShareContext, const int *attribList);
+#endif
+
+#ifndef WGL_ARB_create_context_profile
+#define WGL_ARB_create_context_profile 1
+#endif
+
+#ifndef WGL_ARB_create_context_robustness
+#define WGL_ARB_create_context_robustness 1
+#endif
+
 #ifndef WGL_EXT_display_color_table
 #define WGL_EXT_display_color_table 1
 #ifdef WGL_WGLEXT_PROTOTYPES
-    extern GLboolean WINAPI wglCreateDisplayColorTableEXT(GLushort);
-    extern GLboolean WINAPI wglLoadDisplayColorTableEXT(const GLushort *, GLuint);
-    extern GLboolean WINAPI wglBindDisplayColorTableEXT(GLushort);
-    extern VOID WINAPI wglDestroyDisplayColorTableEXT(GLushort);
+    extern GLboolean WINAPI wglCreateDisplayColorTableEXT(GLushort id);
+    extern GLboolean WINAPI wglLoadDisplayColorTableEXT(const GLushort *table, GLuint length);
+    extern GLboolean WINAPI wglBindDisplayColorTableEXT(GLushort id);
+    extern VOID WINAPI wglDestroyDisplayColorTableEXT(GLushort id);
 #endif /* WGL_WGLEXT_PROTOTYPES */
     typedef GLboolean(WINAPI * PFNWGLCREATEDISPLAYCOLORTABLEEXTPROC)(GLushort id);
     typedef GLboolean(WINAPI * PFNWGLLOADDISPLAYCOLORTABLEEXTPROC)(const GLushort *table, GLuint length);
@@ -422,7 +585,7 @@
 #ifndef WGL_EXT_make_current_read
 #define WGL_EXT_make_current_read 1
 #ifdef WGL_WGLEXT_PROTOTYPES
-    extern BOOL WINAPI wglMakeContextCurrentEXT(HDC, HDC, HGLRC);
+    extern BOOL WINAPI wglMakeContextCurrentEXT(HDC hDrawDC, HDC hReadDC, HGLRC hglrc);
     extern HDC WINAPI wglGetCurrentReadDCEXT(void);
 #endif /* WGL_WGLEXT_PROTOTYPES */
     typedef BOOL (WINAPI * PFNWGLMAKECONTEXTCURRENTEXTPROC)(HDC hDrawDC, HDC hReadDC, HGLRC hglrc);
@@ -432,11 +595,11 @@
 #ifndef WGL_EXT_pbuffer
 #define WGL_EXT_pbuffer 1
 #ifdef WGL_WGLEXT_PROTOTYPES
-    extern HPBUFFEREXT WINAPI wglCreatePbufferEXT(HDC, int, int, int, const int *);
-    extern HDC WINAPI wglGetPbufferDCEXT(HPBUFFEREXT);
-    extern int WINAPI wglReleasePbufferDCEXT(HPBUFFEREXT, HDC);
-    extern BOOL WINAPI wglDestroyPbufferEXT(HPBUFFEREXT);
-    extern BOOL WINAPI wglQueryPbufferEXT(HPBUFFEREXT, int, int *);
+    extern HPBUFFEREXT WINAPI wglCreatePbufferEXT(HDC hDC, int iPixelFormat, int iWidth, int iHeight, const int *piAttribList);
+    extern HDC WINAPI wglGetPbufferDCEXT(HPBUFFEREXT hPbuffer);
+    extern int WINAPI wglReleasePbufferDCEXT(HPBUFFEREXT hPbuffer, HDC hDC);
+    extern BOOL WINAPI wglDestroyPbufferEXT(HPBUFFEREXT hPbuffer);
+    extern BOOL WINAPI wglQueryPbufferEXT(HPBUFFEREXT hPbuffer, int iAttribute, int *piValue);
 #endif /* WGL_WGLEXT_PROTOTYPES */
     typedef HPBUFFEREXT(WINAPI * PFNWGLCREATEPBUFFEREXTPROC)(HDC hDC, int iPixelFormat, int iWidth, int iHeight, const int *piAttribList);
     typedef HDC(WINAPI * PFNWGLGETPBUFFERDCEXTPROC)(HPBUFFEREXT hPbuffer);
@@ -448,9 +611,9 @@
 #ifndef WGL_EXT_pixel_format
 #define WGL_EXT_pixel_format 1
 #ifdef WGL_WGLEXT_PROTOTYPES
-    extern BOOL WINAPI wglGetPixelFormatAttribivEXT(HDC, int, int, UINT, int *, int *);
-    extern BOOL WINAPI wglGetPixelFormatAttribfvEXT(HDC, int, int, UINT, int *, FLOAT *);
-    extern BOOL WINAPI wglChoosePixelFormatEXT(HDC, const int *, const FLOAT *, UINT, int *, UINT *);
+    extern BOOL WINAPI wglGetPixelFormatAttribivEXT(HDC hdc, int iPixelFormat, int iLayerPlane, UINT nAttributes, int *piAttributes, int *piValues);
+    extern BOOL WINAPI wglGetPixelFormatAttribfvEXT(HDC hdc, int iPixelFormat, int iLayerPlane, UINT nAttributes, int *piAttributes, FLOAT *pfValues);
+    extern BOOL WINAPI wglChoosePixelFormatEXT(HDC hdc, const int *piAttribIList, const FLOAT *pfAttribFList, UINT nMaxFormats, int *piFormats, UINT *nNumFormats);
 #endif /* WGL_WGLEXT_PROTOTYPES */
     typedef BOOL (WINAPI * PFNWGLGETPIXELFORMATATTRIBIVEXTPROC)(HDC hdc, int iPixelFormat, int iLayerPlane, UINT nAttributes, int *piAttributes, int *piValues);
     typedef BOOL (WINAPI * PFNWGLGETPIXELFORMATATTRIBFVEXTPROC)(HDC hdc, int iPixelFormat, int iLayerPlane, UINT nAttributes, int *piAttributes, FLOAT *pfValues);
@@ -460,7 +623,7 @@
 #ifndef WGL_EXT_swap_control
 #define WGL_EXT_swap_control 1
 #ifdef WGL_WGLEXT_PROTOTYPES
-    extern BOOL WINAPI wglSwapIntervalEXT(int);
+    extern BOOL WINAPI wglSwapIntervalEXT(int interval);
     extern int WINAPI wglGetSwapIntervalEXT(void);
 #endif /* WGL_WGLEXT_PROTOTYPES */
     typedef BOOL (WINAPI * PFNWGLSWAPINTERVALEXTPROC)(int interval);
@@ -474,8 +637,8 @@
 #ifndef WGL_NV_vertex_array_range
 #define WGL_NV_vertex_array_range 1
 #ifdef WGL_WGLEXT_PROTOTYPES
-    extern void* WINAPI wglAllocateMemoryNV(GLsizei, GLfloat, GLfloat, GLfloat);
-    extern void WINAPI wglFreeMemoryNV(void *);
+    extern void* WINAPI wglAllocateMemoryNV(GLsizei size, GLfloat readfreq, GLfloat writefreq, GLfloat priority);
+    extern void WINAPI wglFreeMemoryNV(void *pointer);
 #endif /* WGL_WGLEXT_PROTOTYPES */
     typedef void* (WINAPI * PFNWGLALLOCATEMEMORYNVPROC)(GLsizei size, GLfloat readfreq, GLfloat writefreq, GLfloat priority);
     typedef void (WINAPI * PFNWGLFREEMEMORYNVPROC)(void *pointer);
@@ -492,12 +655,12 @@
 #ifndef WGL_OML_sync_control
 #define WGL_OML_sync_control 1
 #ifdef WGL_WGLEXT_PROTOTYPES
-    extern BOOL WINAPI wglGetSyncValuesOML(HDC, INT64 *, INT64 *, INT64 *);
-    extern BOOL WINAPI wglGetMscRateOML(HDC, INT32 *, INT32 *);
-    extern INT64 WINAPI wglSwapBuffersMscOML(HDC, INT64, INT64, INT64);
-    extern INT64 WINAPI wglSwapLayerBuffersMscOML(HDC, int, INT64, INT64, INT64);
-    extern BOOL WINAPI wglWaitForMscOML(HDC, INT64, INT64, INT64, INT64 *, INT64 *, INT64 *);
-    extern BOOL WINAPI wglWaitForSbcOML(HDC, INT64, INT64 *, INT64 *, INT64 *);
+    extern BOOL WINAPI wglGetSyncValuesOML(HDC hdc, INT64 *ust, INT64 *msc, INT64 *sbc);
+    extern BOOL WINAPI wglGetMscRateOML(HDC hdc, INT32 *numerator, INT32 *denominator);
+    extern INT64 WINAPI wglSwapBuffersMscOML(HDC hdc, INT64 target_msc, INT64 divisor, INT64 remainder);
+    extern INT64 WINAPI wglSwapLayerBuffersMscOML(HDC hdc, int fuPlanes, INT64 target_msc, INT64 divisor, INT64 remainder);
+    extern BOOL WINAPI wglWaitForMscOML(HDC hdc, INT64 target_msc, INT64 divisor, INT64 remainder, INT64 *ust, INT64 *msc, INT64 *sbc);
+    extern BOOL WINAPI wglWaitForSbcOML(HDC hdc, INT64 target_sbc, INT64 *ust, INT64 *msc, INT64 *sbc);
 #endif /* WGL_WGLEXT_PROTOTYPES */
     typedef BOOL (WINAPI * PFNWGLGETSYNCVALUESOMLPROC)(HDC hdc, INT64 *ust, INT64 *msc, INT64 *sbc);
     typedef BOOL (WINAPI * PFNWGLGETMSCRATEOMLPROC)(HDC hdc, INT32 *numerator, INT32 *denominator);
@@ -510,8 +673,8 @@
 #ifndef WGL_I3D_digital_video_control
 #define WGL_I3D_digital_video_control 1
 #ifdef WGL_WGLEXT_PROTOTYPES
-    extern BOOL WINAPI wglGetDigitalVideoParametersI3D(HDC, int, int *);
-    extern BOOL WINAPI wglSetDigitalVideoParametersI3D(HDC, int, const int *);
+    extern BOOL WINAPI wglGetDigitalVideoParametersI3D(HDC hDC, int iAttribute, int *piValue);
+    extern BOOL WINAPI wglSetDigitalVideoParametersI3D(HDC hDC, int iAttribute, const int *piValue);
 #endif /* WGL_WGLEXT_PROTOTYPES */
     typedef BOOL (WINAPI * PFNWGLGETDIGITALVIDEOPARAMETERSI3DPROC)(HDC hDC, int iAttribute, int *piValue);
     typedef BOOL (WINAPI * PFNWGLSETDIGITALVIDEOPARAMETERSI3DPROC)(HDC hDC, int iAttribute, const int *piValue);
@@ -520,10 +683,10 @@
 #ifndef WGL_I3D_gamma
 #define WGL_I3D_gamma 1
 #ifdef WGL_WGLEXT_PROTOTYPES
-    extern BOOL WINAPI wglGetGammaTableParametersI3D(HDC, int, int *);
-    extern BOOL WINAPI wglSetGammaTableParametersI3D(HDC, int, const int *);
-    extern BOOL WINAPI wglGetGammaTableI3D(HDC, int, USHORT *, USHORT *, USHORT *);
-    extern BOOL WINAPI wglSetGammaTableI3D(HDC, int, const USHORT *, const USHORT *, const USHORT *);
+    extern BOOL WINAPI wglGetGammaTableParametersI3D(HDC hDC, int iAttribute, int *piValue);
+    extern BOOL WINAPI wglSetGammaTableParametersI3D(HDC hDC, int iAttribute, const int *piValue);
+    extern BOOL WINAPI wglGetGammaTableI3D(HDC hDC, int iEntries, USHORT *puRed, USHORT *puGreen, USHORT *puBlue);
+    extern BOOL WINAPI wglSetGammaTableI3D(HDC hDC, int iEntries, const USHORT *puRed, const USHORT *puGreen, const USHORT *puBlue);
 #endif /* WGL_WGLEXT_PROTOTYPES */
     typedef BOOL (WINAPI * PFNWGLGETGAMMATABLEPARAMETERSI3DPROC)(HDC hDC, int iAttribute, int *piValue);
     typedef BOOL (WINAPI * PFNWGLSETGAMMATABLEPARAMETERSI3DPROC)(HDC hDC, int iAttribute, const int *piValue);
@@ -534,18 +697,18 @@
 #ifndef WGL_I3D_genlock
 #define WGL_I3D_genlock 1
 #ifdef WGL_WGLEXT_PROTOTYPES
-    extern BOOL WINAPI wglEnableGenlockI3D(HDC);
-    extern BOOL WINAPI wglDisableGenlockI3D(HDC);
-    extern BOOL WINAPI wglIsEnabledGenlockI3D(HDC, BOOL *);
-    extern BOOL WINAPI wglGenlockSourceI3D(HDC, UINT);
-    extern BOOL WINAPI wglGetGenlockSourceI3D(HDC, UINT *);
-    extern BOOL WINAPI wglGenlockSourceEdgeI3D(HDC, UINT);
-    extern BOOL WINAPI wglGetGenlockSourceEdgeI3D(HDC, UINT *);
-    extern BOOL WINAPI wglGenlockSampleRateI3D(HDC, UINT);
-    extern BOOL WINAPI wglGetGenlockSampleRateI3D(HDC, UINT *);
-    extern BOOL WINAPI wglGenlockSourceDelayI3D(HDC, UINT);
-    extern BOOL WINAPI wglGetGenlockSourceDelayI3D(HDC, UINT *);
-    extern BOOL WINAPI wglQueryGenlockMaxSourceDelayI3D(HDC, UINT *, UINT *);
+    extern BOOL WINAPI wglEnableGenlockI3D(HDC hDC);
+    extern BOOL WINAPI wglDisableGenlockI3D(HDC hDC);
+    extern BOOL WINAPI wglIsEnabledGenlockI3D(HDC hDC, BOOL *pFlag);
+    extern BOOL WINAPI wglGenlockSourceI3D(HDC hDC, UINT uSource);
+    extern BOOL WINAPI wglGetGenlockSourceI3D(HDC hDC, UINT *uSource);
+    extern BOOL WINAPI wglGenlockSourceEdgeI3D(HDC hDC, UINT uEdge);
+    extern BOOL WINAPI wglGetGenlockSourceEdgeI3D(HDC hDC, UINT *uEdge);
+    extern BOOL WINAPI wglGenlockSampleRateI3D(HDC hDC, UINT uRate);
+    extern BOOL WINAPI wglGetGenlockSampleRateI3D(HDC hDC, UINT *uRate);
+    extern BOOL WINAPI wglGenlockSourceDelayI3D(HDC hDC, UINT uDelay);
+    extern BOOL WINAPI wglGetGenlockSourceDelayI3D(HDC hDC, UINT *uDelay);
+    extern BOOL WINAPI wglQueryGenlockMaxSourceDelayI3D(HDC hDC, UINT *uMaxLineDelay, UINT *uMaxPixelDelay);
 #endif /* WGL_WGLEXT_PROTOTYPES */
     typedef BOOL (WINAPI * PFNWGLENABLEGENLOCKI3DPROC)(HDC hDC);
     typedef BOOL (WINAPI * PFNWGLDISABLEGENLOCKI3DPROC)(HDC hDC);
@@ -564,10 +727,10 @@
 #ifndef WGL_I3D_image_buffer
 #define WGL_I3D_image_buffer 1
 #ifdef WGL_WGLEXT_PROTOTYPES
-    extern LPVOID WINAPI wglCreateImageBufferI3D(HDC, DWORD, UINT);
-    extern BOOL WINAPI wglDestroyImageBufferI3D(HDC, LPVOID);
-    extern BOOL WINAPI wglAssociateImageBufferEventsI3D(HDC, const HANDLE *, const LPVOID *, const DWORD *, UINT);
-    extern BOOL WINAPI wglReleaseImageBufferEventsI3D(HDC, const LPVOID *, UINT);
+    extern LPVOID WINAPI wglCreateImageBufferI3D(HDC hDC, DWORD dwSize, UINT uFlags);
+    extern BOOL WINAPI wglDestroyImageBufferI3D(HDC hDC, LPVOID pAddress);
+    extern BOOL WINAPI wglAssociateImageBufferEventsI3D(HDC hDC, const HANDLE *pEvent, const LPVOID *pAddress, const DWORD *pSize, UINT count);
+    extern BOOL WINAPI wglReleaseImageBufferEventsI3D(HDC hDC, const LPVOID *pAddress, UINT count);
 #endif /* WGL_WGLEXT_PROTOTYPES */
     typedef LPVOID (WINAPI * PFNWGLCREATEIMAGEBUFFERI3DPROC)(HDC hDC, DWORD dwSize, UINT uFlags);
     typedef BOOL (WINAPI * PFNWGLDESTROYIMAGEBUFFERI3DPROC)(HDC hDC, LPVOID pAddress);
@@ -580,8 +743,8 @@
 #ifdef WGL_WGLEXT_PROTOTYPES
     extern BOOL WINAPI wglEnableFrameLockI3D(void);
     extern BOOL WINAPI wglDisableFrameLockI3D(void);
-    extern BOOL WINAPI wglIsEnabledFrameLockI3D(BOOL *);
-    extern BOOL WINAPI wglQueryFrameLockMasterI3D(BOOL *);
+    extern BOOL WINAPI wglIsEnabledFrameLockI3D(BOOL *pFlag);
+    extern BOOL WINAPI wglQueryFrameLockMasterI3D(BOOL *pFlag);
 #endif /* WGL_WGLEXT_PROTOTYPES */
     typedef BOOL (WINAPI * PFNWGLENABLEFRAMELOCKI3DPROC)(void);
     typedef BOOL (WINAPI * PFNWGLDISABLEFRAMELOCKI3DPROC)(void);
@@ -592,10 +755,10 @@
 #ifndef WGL_I3D_swap_frame_usage
 #define WGL_I3D_swap_frame_usage 1
 #ifdef WGL_WGLEXT_PROTOTYPES
-    extern BOOL WINAPI wglGetFrameUsageI3D(float *);
+    extern BOOL WINAPI wglGetFrameUsageI3D(float *pUsage);
     extern BOOL WINAPI wglBeginFrameTrackingI3D(void);
     extern BOOL WINAPI wglEndFrameTrackingI3D(void);
-    extern BOOL WINAPI wglQueryFrameTrackingI3D(DWORD *, DWORD *, float *);
+    extern BOOL WINAPI wglQueryFrameTrackingI3D(DWORD *pFrameCount, DWORD *pMissedFrames, float *pLastMissedUsage);
 #endif /* WGL_WGLEXT_PROTOTYPES */
     typedef BOOL (WINAPI * PFNWGLGETFRAMEUSAGEI3DPROC)(float *pUsage);
     typedef BOOL (WINAPI * PFNWGLBEGINFRAMETRACKINGI3DPROC)(void);
@@ -603,10 +766,179 @@
     typedef BOOL (WINAPI * PFNWGLQUERYFRAMETRACKINGI3DPROC)(DWORD *pFrameCount, DWORD *pMissedFrames, float *pLastMissedUsage);
 #endif
 
+#ifndef WGL_ATI_pixel_format_float
+#define WGL_ATI_pixel_format_float 1
+#endif
+
+#ifndef WGL_NV_float_buffer
+#define WGL_NV_float_buffer 1
+#endif
+
+#ifndef WGL_3DL_stereo_control
+#define WGL_3DL_stereo_control 1
+#ifdef WGL_WGLEXT_PROTOTYPES
+    extern BOOL WINAPI wglSetStereoEmitterState3DL(HDC hDC, UINT uState);
+#endif /* WGL_WGLEXT_PROTOTYPES */
+    typedef BOOL (WINAPI * PFNWGLSETSTEREOEMITTERSTATE3DLPROC)(HDC hDC, UINT uState);
+#endif
+
+#ifndef WGL_EXT_pixel_format_packed_float
+#define WGL_EXT_pixel_format_packed_float 1
+#endif
+
+#ifndef WGL_EXT_framebuffer_sRGB
+#define WGL_EXT_framebuffer_sRGB 1
+#endif
+
+#ifndef WGL_NV_present_video
+#define WGL_NV_present_video 1
+#ifdef WGL_WGLEXT_PROTOTYPES
+    extern int WINAPI wglEnumerateVideoDevicesNV(HDC hDC, HVIDEOOUTPUTDEVICENV *phDeviceList);
+    extern BOOL WINAPI wglBindVideoDeviceNV(HDC hDC, unsigned int uVideoSlot, HVIDEOOUTPUTDEVICENV hVideoDevice, const int *piAttribList);
+    extern BOOL WINAPI wglQueryCurrentContextNV(int iAttribute, int *piValue);
+#endif /* WGL_WGLEXT_PROTOTYPES */
+    typedef int (WINAPI * PFNWGLENUMERATEVIDEODEVICESNVPROC)(HDC hDC, HVIDEOOUTPUTDEVICENV *phDeviceList);
+    typedef BOOL (WINAPI * PFNWGLBINDVIDEODEVICENVPROC)(HDC hDC, unsigned int uVideoSlot, HVIDEOOUTPUTDEVICENV hVideoDevice, const int *piAttribList);
+    typedef BOOL (WINAPI * PFNWGLQUERYCURRENTCONTEXTNVPROC)(int iAttribute, int *piValue);
+#endif
+
+#ifndef WGL_NV_video_output
+#define WGL_NV_video_output 1
+#ifdef WGL_WGLEXT_PROTOTYPES
+    extern BOOL WINAPI wglGetVideoDeviceNV(HDC hDC, int numDevices, HPVIDEODEV *hVideoDevice);
+    extern BOOL WINAPI wglReleaseVideoDeviceNV(HPVIDEODEV hVideoDevice);
+    extern BOOL WINAPI wglBindVideoImageNV(HPVIDEODEV hVideoDevice, HPBUFFERARB hPbuffer, int iVideoBuffer);
+    extern BOOL WINAPI wglReleaseVideoImageNV(HPBUFFERARB hPbuffer, int iVideoBuffer);
+    extern BOOL WINAPI wglSendPbufferToVideoNV(HPBUFFERARB hPbuffer, int iBufferType, unsigned long *pulCounterPbuffer, BOOL bBlock);
+    extern BOOL WINAPI wglGetVideoInfoNV(HPVIDEODEV hpVideoDevice, unsigned long *pulCounterOutputPbuffer, unsigned long *pulCounterOutputVideo);
+#endif /* WGL_WGLEXT_PROTOTYPES */
+    typedef BOOL (WINAPI * PFNWGLGETVIDEODEVICENVPROC)(HDC hDC, int numDevices, HPVIDEODEV *hVideoDevice);
+    typedef BOOL (WINAPI * PFNWGLRELEASEVIDEODEVICENVPROC)(HPVIDEODEV hVideoDevice);
+    typedef BOOL (WINAPI * PFNWGLBINDVIDEOIMAGENVPROC)(HPVIDEODEV hVideoDevice, HPBUFFERARB hPbuffer, int iVideoBuffer);
+    typedef BOOL (WINAPI * PFNWGLRELEASEVIDEOIMAGENVPROC)(HPBUFFERARB hPbuffer, int iVideoBuffer);
+    typedef BOOL (WINAPI * PFNWGLSENDPBUFFERTOVIDEONVPROC)(HPBUFFERARB hPbuffer, int iBufferType, unsigned long *pulCounterPbuffer, BOOL bBlock);
+    typedef BOOL (WINAPI * PFNWGLGETVIDEOINFONVPROC)(HPVIDEODEV hpVideoDevice, unsigned long *pulCounterOutputPbuffer, unsigned long *pulCounterOutputVideo);
+#endif
+
+#ifndef WGL_NV_swap_group
+#define WGL_NV_swap_group 1
+#ifdef WGL_WGLEXT_PROTOTYPES
+    extern BOOL WINAPI wglJoinSwapGroupNV(HDC hDC, GLuint group);
+    extern BOOL WINAPI wglBindSwapBarrierNV(GLuint group, GLuint barrier);
+    extern BOOL WINAPI wglQuerySwapGroupNV(HDC hDC, GLuint *group, GLuint *barrier);
+    extern BOOL WINAPI wglQueryMaxSwapGroupsNV(HDC hDC, GLuint *maxGroups, GLuint *maxBarriers);
+    extern BOOL WINAPI wglQueryFrameCountNV(HDC hDC, GLuint *count);
+    extern BOOL WINAPI wglResetFrameCountNV(HDC hDC);
+#endif /* WGL_WGLEXT_PROTOTYPES */
+    typedef BOOL (WINAPI * PFNWGLJOINSWAPGROUPNVPROC)(HDC hDC, GLuint group);
+    typedef BOOL (WINAPI * PFNWGLBINDSWAPBARRIERNVPROC)(GLuint group, GLuint barrier);
+    typedef BOOL (WINAPI * PFNWGLQUERYSWAPGROUPNVPROC)(HDC hDC, GLuint *group, GLuint *barrier);
+    typedef BOOL (WINAPI * PFNWGLQUERYMAXSWAPGROUPSNVPROC)(HDC hDC, GLuint *maxGroups, GLuint *maxBarriers);
+    typedef BOOL (WINAPI * PFNWGLQUERYFRAMECOUNTNVPROC)(HDC hDC, GLuint *count);
+    typedef BOOL (WINAPI * PFNWGLRESETFRAMECOUNTNVPROC)(HDC hDC);
+#endif
+
+#ifndef WGL_NV_gpu_affinity
+#define WGL_NV_gpu_affinity 1
+#ifdef WGL_WGLEXT_PROTOTYPES
+    extern BOOL WINAPI wglEnumGpusNV(UINT iGpuIndex, HGPUNV *phGpu);
+    extern BOOL WINAPI wglEnumGpuDevicesNV(HGPUNV hGpu, UINT iDeviceIndex, PGPU_DEVICE lpGpuDevice);
+    extern HDC WINAPI wglCreateAffinityDCNV(const HGPUNV *phGpuList);
+    extern BOOL WINAPI wglEnumGpusFromAffinityDCNV(HDC hAffinityDC, UINT iGpuIndex, HGPUNV *hGpu);
+    extern BOOL WINAPI wglDeleteDCNV(HDC hdc);
+#endif /* WGL_WGLEXT_PROTOTYPES */
+    typedef BOOL (WINAPI * PFNWGLENUMGPUSNVPROC)(UINT iGpuIndex, HGPUNV *phGpu);
+    typedef BOOL (WINAPI * PFNWGLENUMGPUDEVICESNVPROC)(HGPUNV hGpu, UINT iDeviceIndex, PGPU_DEVICE lpGpuDevice);
+    typedef HDC(WINAPI * PFNWGLCREATEAFFINITYDCNVPROC)(const HGPUNV *phGpuList);
+    typedef BOOL (WINAPI * PFNWGLENUMGPUSFROMAFFINITYDCNVPROC)(HDC hAffinityDC, UINT iGpuIndex, HGPUNV *hGpu);
+    typedef BOOL (WINAPI * PFNWGLDELETEDCNVPROC)(HDC hdc);
+#endif
+
+#ifndef WGL_AMD_gpu_association
+#define WGL_AMD_gpu_association 1
+#ifdef WGL_WGLEXT_PROTOTYPES
+    extern UINT WINAPI wglGetGPUIDsAMD(UINT maxCount, UINT *ids);
+    extern INT WINAPI wglGetGPUInfoAMD(UINT id, int property, GLenum dataType, UINT size, void *data);
+    extern UINT WINAPI wglGetContextGPUIDAMD(HGLRC hglrc);
+    extern HGLRC WINAPI wglCreateAssociatedContextAMD(UINT id);
+    extern HGLRC WINAPI wglCreateAssociatedContextAttribsAMD(UINT id, HGLRC hShareContext, const int *attribList);
+    extern BOOL WINAPI wglDeleteAssociatedContextAMD(HGLRC hglrc);
+    extern BOOL WINAPI wglMakeAssociatedContextCurrentAMD(HGLRC hglrc);
+    extern HGLRC WINAPI wglGetCurrentAssociatedContextAMD(void);
+    extern VOID WINAPI wglBlitContextFramebufferAMD(HGLRC dstCtx, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
+#endif /* WGL_WGLEXT_PROTOTYPES */
+    typedef UINT(WINAPI * PFNWGLGETGPUIDSAMDPROC)(UINT maxCount, UINT *ids);
+    typedef INT (WINAPI * PFNWGLGETGPUINFOAMDPROC)(UINT id, int property, GLenum dataType, UINT size, void *data);
+    typedef UINT(WINAPI * PFNWGLGETCONTEXTGPUIDAMDPROC)(HGLRC hglrc);
+    typedef HGLRC(WINAPI * PFNWGLCREATEASSOCIATEDCONTEXTAMDPROC)(UINT id);
+    typedef HGLRC(WINAPI * PFNWGLCREATEASSOCIATEDCONTEXTATTRIBSAMDPROC)(UINT id, HGLRC hShareContext, const int *attribList);
+    typedef BOOL (WINAPI * PFNWGLDELETEASSOCIATEDCONTEXTAMDPROC)(HGLRC hglrc);
+    typedef BOOL (WINAPI * PFNWGLMAKEASSOCIATEDCONTEXTCURRENTAMDPROC)(HGLRC hglrc);
+    typedef HGLRC(WINAPI * PFNWGLGETCURRENTASSOCIATEDCONTEXTAMDPROC)(void);
+    typedef VOID (WINAPI * PFNWGLBLITCONTEXTFRAMEBUFFERAMDPROC)(HGLRC dstCtx, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
+#endif
+
+#ifndef WGL_NV_video_capture
+#define WGL_NV_video_capture 1
+#ifdef WGL_WGLEXT_PROTOTYPES
+    extern BOOL WINAPI wglBindVideoCaptureDeviceNV(UINT uVideoSlot, HVIDEOINPUTDEVICENV hDevice);
+    extern UINT WINAPI wglEnumerateVideoCaptureDevicesNV(HDC hDc, HVIDEOINPUTDEVICENV *phDeviceList);
+    extern BOOL WINAPI wglLockVideoCaptureDeviceNV(HDC hDc, HVIDEOINPUTDEVICENV hDevice);
+    extern BOOL WINAPI wglQueryVideoCaptureDeviceNV(HDC hDc, HVIDEOINPUTDEVICENV hDevice, int iAttribute, int *piValue);
+    extern BOOL WINAPI wglReleaseVideoCaptureDeviceNV(HDC hDc, HVIDEOINPUTDEVICENV hDevice);
+#endif /* WGL_WGLEXT_PROTOTYPES */
+    typedef BOOL (WINAPI * PFNWGLBINDVIDEOCAPTUREDEVICENVPROC)(UINT uVideoSlot, HVIDEOINPUTDEVICENV hDevice);
+    typedef UINT(WINAPI * PFNWGLENUMERATEVIDEOCAPTUREDEVICESNVPROC)(HDC hDc, HVIDEOINPUTDEVICENV *phDeviceList);
+    typedef BOOL (WINAPI * PFNWGLLOCKVIDEOCAPTUREDEVICENVPROC)(HDC hDc, HVIDEOINPUTDEVICENV hDevice);
+    typedef BOOL (WINAPI * PFNWGLQUERYVIDEOCAPTUREDEVICENVPROC)(HDC hDc, HVIDEOINPUTDEVICENV hDevice, int iAttribute, int *piValue);
+    typedef BOOL (WINAPI * PFNWGLRELEASEVIDEOCAPTUREDEVICENVPROC)(HDC hDc, HVIDEOINPUTDEVICENV hDevice);
+#endif
+
+#ifndef WGL_NV_copy_image
+#define WGL_NV_copy_image 1
+#ifdef WGL_WGLEXT_PROTOTYPES
+    extern BOOL WINAPI wglCopyImageSubDataNV(HGLRC hSrcRC, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, HGLRC hDstRC, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth);
+#endif /* WGL_WGLEXT_PROTOTYPES */
+    typedef BOOL (WINAPI * PFNWGLCOPYIMAGESUBDATANVPROC)(HGLRC hSrcRC, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, HGLRC hDstRC, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth);
+#endif
+
+#ifndef WGL_NV_multisample_coverage
+#define WGL_NV_multisample_coverage 1
+#endif
+
+#ifndef WGL_NV_DX_interop
+#define WGL_NV_DX_interop 1
+#ifdef WGL_WGLEXT_PROTOTYPES
+    extern BOOL WINAPI wglDXSetResourceShareHandleNV(void *dxObject, HANDLE shareHandle);
+    extern HANDLE WINAPI wglDXOpenDeviceNV(void *dxDevice);
+    extern BOOL WINAPI wglDXCloseDeviceNV(HANDLE hDevice);
+    extern HANDLE WINAPI wglDXRegisterObjectNV(HANDLE hDevice, void *dxObject, GLuint name, GLenum type, GLenum access);
+    extern BOOL WINAPI wglDXUnregisterObjectNV(HANDLE hDevice, HANDLE hObject);
+    extern BOOL WINAPI wglDXObjectAccessNV(HANDLE hObject, GLenum access);
+    extern BOOL WINAPI wglDXLockObjectsNV(HANDLE hDevice, GLint count, HANDLE *hObjects);
+    extern BOOL WINAPI wglDXUnlockObjectsNV(HANDLE hDevice, GLint count, HANDLE *hObjects);
+#endif /* WGL_WGLEXT_PROTOTYPES */
+    typedef BOOL (WINAPI * PFNWGLDXSETRESOURCESHAREHANDLENVPROC)(void *dxObject, HANDLE shareHandle);
+    typedef HANDLE(WINAPI * PFNWGLDXOPENDEVICENVPROC)(void *dxDevice);
+    typedef BOOL (WINAPI * PFNWGLDXCLOSEDEVICENVPROC)(HANDLE hDevice);
+    typedef HANDLE(WINAPI * PFNWGLDXREGISTEROBJECTNVPROC)(HANDLE hDevice, void *dxObject, GLuint name, GLenum type, GLenum access);
+    typedef BOOL (WINAPI * PFNWGLDXUNREGISTEROBJECTNVPROC)(HANDLE hDevice, HANDLE hObject);
+    typedef BOOL (WINAPI * PFNWGLDXOBJECTACCESSNVPROC)(HANDLE hObject, GLenum access);
+    typedef BOOL (WINAPI * PFNWGLDXLOCKOBJECTSNVPROC)(HANDLE hDevice, GLint count, HANDLE *hObjects);
+    typedef BOOL (WINAPI * PFNWGLDXUNLOCKOBJECTSNVPROC)(HANDLE hDevice, GLint count, HANDLE *hObjects);
+#endif
+
+#ifndef WGL_NV_DX_interop2
+#define WGL_NV_DX_interop2 1
+#endif
+
+#ifndef WGL_EXT_swap_control_tear
+#define WGL_EXT_swap_control_tear 1
+#endif
+
 
 #ifdef __cplusplus
 }
 #endif
 
 #endif
-
diff -NEaurb neo/sound/OggVorbis/ogg/os_types.h neo/sound/OggVorbis/ogg/os_types.h
--- neo/sound/OggVorbis/ogg/os_types.h	2013-08-14 01:47:52 +0000
+++ neo/sound/OggVorbis/ogg/os_types.h	2013-08-13 16:10:44 +0000
@@ -21,8 +21,6 @@
    different malloc than stdlib */
 
 // using private thread safe memory allocator for DOOM
-#if 1
-
 #include <stddef.h>
 #if !__MACH__ && __MWERKS__
 #include <types.h>
@@ -40,15 +38,6 @@
 #define _ogg_realloc	_decoder_realloc
 #define _ogg_free		_decoder_free
 
-#else
-
-#define _ogg_malloc  malloc
-#define _ogg_calloc  calloc
-#define _ogg_realloc realloc
-#define _ogg_free    free
-
-#endif
-
 #ifdef _WIN32
 
 #  ifndef __GNUC__
diff -NEaurb neo/sound/snd_cache.cpp neo/sound/snd_cache.cpp
--- neo/sound/snd_cache.cpp	2013-08-14 01:47:52 +0000
+++ neo/sound/snd_cache.cpp	2013-08-13 15:32:11 +0000
@@ -301,6 +301,7 @@
         total += sample->objectMemSize;
         f->Printf("%s %s\n", idStr::FormatNumber(sample->objectMemSize).c_str(), sample->name.c_str());
     }
+    delete[] sortIndex;
 
     mi->soundAssetsTotal = total;
 
@@ -329,7 +330,7 @@
     objectMemSize = 0;
     nonCacheData = NULL;
     amplitudeData = NULL;
-    openalBuffer = NULL;
+    openalBuffer = 0;
     hardwareBuffer = false;
     defaultSound = false;
     onDemand = false;
@@ -572,30 +573,6 @@
                 }
                 else
                 {
-                    // Compute amplitude block size
-                    int blockSize = 512 * objectInfo.nSamplesPerSec / 44100 ;
-
-                    // Allocate amplitude data array
-                    amplitudeData = (byte *)soundCacheAllocator.Alloc((objectSize / blockSize + 1) * 2 * sizeof(short));
-
-                    // Creating array of min/max amplitude pairs per blockSize samples
-                    int i;
-                    for (i = 0; i < objectSize; i+=blockSize)
-                    {
-                        short min = 32767;
-                        short max = -32768;
-
-                        int j;
-                        for (j = 0; j < Min(objectSize - i, blockSize); j++)
-                        {
-                            min = ((short *)nonCacheData)[ i + j ] < min ? ((short *)nonCacheData)[ i + j ] : min;
-                            max = ((short *)nonCacheData)[ i + j ] > max ? ((short *)nonCacheData)[ i + j ] : max;
-                        }
-
-                        ((short *)amplitudeData)[(i / blockSize) * 2     ] = min;
-                        ((short *)amplitudeData)[(i / blockSize) * 2 + 1 ] = max;
-                    }
-
                     hardwareBuffer = true;
                 }
             }
@@ -633,7 +610,7 @@
                             else if (destData[i*4] > 32767.0f)
                                 ((short *)destData)[i] = 32767;
                             else
-                                ((short *)destData)[i] = idMath::FtoiFast(destData[i*4]);
+                                ((short *)destData)[i] = idMath::Ftoi(destData[i*4]);
                         }
                     }
                     else if (objectInfo.nSamplesPerSec == 22050)
@@ -645,7 +622,7 @@
                             else if (destData[i*2] > 32767.0f)
                                 ((short *)destData)[i] = 32767;
                             else
-                                ((short *)destData)[i] = idMath::FtoiFast(destData[i*2]);
+                                ((short *)destData)[i] = idMath::Ftoi(destData[i*2]);
                         }
                     }
                     else
@@ -657,57 +634,26 @@
                             else if (destData[i] > 32767.0f)
                                 ((short *)destData)[i] = 32767;
                             else
-                                ((short *)destData)[i] = idMath::FtoiFast(destData[i]);
+                                ((short *)destData)[i] = idMath::Ftoi(destData[i]);
                         }
                     }
-
                     alGetError();
                     alBufferData(openalBuffer, objectInfo.nChannels==1?AL_FORMAT_MONO16:AL_FORMAT_STEREO16, destData, objectSize * sizeof(short), objectInfo.nSamplesPerSec);
+
                     if (alGetError() != AL_NO_ERROR)
+                    {
                         common->Error("idSoundCache: error loading data into OpenAL hardware buffer");
+                    }
                     else
                     {
-                        // Compute amplitude block size
-                        int blockSize = 512 * objectInfo.nSamplesPerSec / 44100 ;
-
-                        // Allocate amplitude data array
-                        amplitudeData = (byte *)soundCacheAllocator.Alloc((objectSize / blockSize + 1) * 2 * sizeof(short));
-
-                        // Creating array of min/max amplitude pairs per blockSize samples
-                        int i;
-                        for (i = 0; i < objectSize; i+=blockSize)
-                        {
-                            short min = 32767;
-                            short max = -32768;
-
-                            int j;
-                            for (j = 0; j < Min(objectSize - i, blockSize); j++)
-                            {
-                                min = ((short *)destData)[ i + j ] < min ? ((short *)destData)[ i + j ] : min;
-                                max = ((short *)destData)[ i + j ] > max ? ((short *)destData)[ i + j ] : max;
-                            }
-
-                            ((short *)amplitudeData)[(i / blockSize) * 2     ] = min;
-                            ((short *)amplitudeData)[(i / blockSize) * 2 + 1 ] = max;
-                        }
-
                         hardwareBuffer = true;
                     }
-
                     soundCacheAllocator.Free((byte *)destData);
                     idSampleDecoder::Free(decoder);
                 }
             }
         }
-
-        // Free memory if sample was loaded into hardware
-        if (hardwareBuffer)
-        {
-            soundCacheAllocator.Free(nonCacheData);
-            nonCacheData = NULL;
-        }
     }
-
     fh.Close();
 }
 
diff -NEaurb neo/sound/snd_system.cpp neo/sound/snd_system.cpp
--- neo/sound/snd_system.cpp	2013-08-14 01:47:52 +0000
+++ neo/sound/snd_system.cpp	2013-08-13 15:32:11 +0000
@@ -173,7 +173,7 @@
     common->Printf("%8d total samples loaded\n", totalSamples);
     common->Printf("%8d kB total system memory used\n", totalMemory >> 10);
 #if ID_OPENAL
-    common->Printf("%8d kB total OpenAL audio memory used\n", (alGetInteger(alGetEnumValue("AL_EAX_RAM_SIZE")) - alGetInteger(alGetEnumValue("AL_EAX_RAM_FREE"))) >> 10);
+//	common->Printf( "%8d kB total OpenAL audio memory used\n", ( alGetInteger( alGetEnumValue( "AL_EAX_RAM_SIZE" ) ) - alGetInteger( alGetEnumValue( "AL_EAX_RAM_FREE" ) ) ) >> 10 );
 #endif
 }
 
@@ -509,7 +509,7 @@
             alDeleteSources(1, &openalSources[i].handle);
 
             // clear entry in source array
-            openalSources[i].handle = NULL;
+            openalSources[i].handle = 0;
             openalSources[i].startTime = 0;
             openalSources[i].chan = NULL;
             openalSources[i].inUse = false;
@@ -629,7 +629,7 @@
     {
         // NOTE: this would overflow 31bits within about 1h20 ( not that important since we get a snd_audio_hw right away pbly )
         //return ( ( Sys_Milliseconds()*441 ) / 10 ) * 4;
-        return idMath::FtoiFast((float)Sys_Milliseconds() * 176.4f);
+        return idMath::Ftoi((float)Sys_Milliseconds() * 176.4f);
     }
 }
 
@@ -712,7 +712,7 @@
     if (useOpenAL)
     {
         // here we do it in samples ( overflows in 27 hours or so )
-        dwCurrentWritePos = idMath::Ftol((float)Sys_Milliseconds() * 44.1f) % (MIXBUFFER_SAMPLES * ROOM_SLICES_IN_BUFFER);
+        dwCurrentWritePos = idMath::Ftoi((float)Sys_Milliseconds() * 44.1f) % (MIXBUFFER_SAMPLES * ROOM_SLICES_IN_BUFFER);
         dwCurrentBlock = dwCurrentWritePos / MIXBUFFER_SAMPLES;
     }
     else
@@ -1441,7 +1441,7 @@
     }
     else
     {
-        return NULL;
+        return 0;
     }
 }
 
@@ -1459,7 +1459,7 @@
         {
             if (openalSources[i].chan)
             {
-                openalSources[i].chan->openalSource = NULL;
+                openalSources[i].chan->openalSource = 0;
             }
 #if ID_OPENAL
             // Reset source EAX ROOM level when freeing stereo source
diff -NEaurb neo/sound/snd_world.cpp neo/sound/snd_world.cpp
--- neo/sound/snd_world.cpp	2013-08-14 01:47:52 +0000
+++ neo/sound/snd_world.cpp	2013-08-13 16:10:44 +0000
@@ -670,7 +670,7 @@
             }
             else
             {
-                outD[j] = idMath::FtoiFast(s);
+                outD[j] = idMath::Ftoi(s);
             }
         }
         // write to file
@@ -873,9 +873,7 @@
         }
 
         // pick a point on the portal to serve as our virtual sound origin
-#if 1
         idVec3	source;
-
         idPlane	pl;
         re.w->GetPlane(pl);
 
@@ -911,64 +909,6 @@
                 }
             }
         }
-#else
-        // clip the ray from the listener to the center of the portal by
-        // all the portal edge planes, then project that point (or the original if not clipped)
-        // onto the portal plane to get the spatialized origin
-
-        idVec3	start = listenerQU;
-        idVec3	mid = re.w->GetCenter();
-        bool	wasClipped = false;
-
-        for (int i = 0 ; i < re.w->GetNumPoints() ; i++)
-        {
-            int j = (i + 1) % re.w->GetNumPoints();
-            idVec3	v1 = (*(re.w))[j].ToVec3() - soundOrigin;
-            idVec3	v2 = (*(re.w))[i].ToVec3() - soundOrigin;
-
-            v1.Normalize();
-            v2.Normalize();
-
-            idVec3	edgeNormal;
-
-            edgeNormal.Cross(v1, v2);
-
-            idVec3	fromVert = start - soundOrigin;
-            float	d1 = edgeNormal * fromVert;
-
-            if (d1 > 0.0f)
-            {
-                fromVert = mid - (*(re.w))[j].ToVec3();
-                float d2 = edgeNormal * fromVert;
-
-                // move it in
-                float	f = d1 / (d1 - d2);
-
-                idVec3	clipped = start * (1.0f - f) + mid * f;
-                start = clipped;
-                wasClipped = true;
-            }
-        }
-
-        idVec3	source;
-        if (wasClipped)
-        {
-            // now project it onto the portal plane
-            idPlane	pl;
-            re.w->GetPlane(pl);
-
-            float	f1 = pl.Distance(start);
-            float	f2 = pl.Distance(soundOrigin);
-
-            float	f = f1 / (f1 - f2);
-            source = start * (1.0f - f) + soundOrigin * f;
-        }
-        else
-        {
-            source = soundOrigin;
-        }
-#endif
-
         idVec3 tlen = source - soundOrigin;
         float tlenLength = tlen.LengthFast();
 
@@ -1026,12 +966,12 @@
     if (fpa[0])
     {
         // exactly 30 fps so the wave file can be used for exact video frames
-        game44kHz = idMath::FtoiFast(gameMsec * ((1000.0f / 60.0f) / 16.0f) * 0.001f * 44100.0f);
+        game44kHz = idMath::Ftoi(gameMsec * ((1000.0f / 60.0f) / 16.0f) * 0.001f * 44100.0f);
     }
     else
     {
         // the normal 16 msec / frame
-        game44kHz = idMath::FtoiFast(gameMsec * 0.001f * 44100.0f);
+        game44kHz = idMath::Ftoi(gameMsec * 0.001f * 44100.0f);
     }
 
     listenerPrivateId = listenerId;
@@ -1983,7 +1923,7 @@
                 // handle streaming sounds (decode on the fly) both single shot AND looping
                 if (chan->triggered)
                 {
-                    alSourcei(chan->openalSource, AL_BUFFER, NULL);
+                    alSourcei(chan->openalSource, AL_BUFFER, 0);
                     alDeleteBuffers(3, &chan->lastopenalStreamingBuffer[0]);
                     chan->lastopenalStreamingBuffer[0] = chan->openalStreamingBuffer[0];
                     chan->lastopenalStreamingBuffer[1] = chan->openalStreamingBuffer[1];
@@ -2018,7 +1958,7 @@
                         else if (alignedInputSamples[i] > 32767.0f)
                             ((short *)alignedInputSamples)[i] = 32767;
                         else
-                            ((short *)alignedInputSamples)[i] = idMath::FtoiFast(alignedInputSamples[i]);
+                            ((short *)alignedInputSamples)[i] = idMath::Ftoi(alignedInputSamples[i]);
                     }
                     alBufferData(buffers[j], chan->leadinSample->objectInfo.nChannels == 1 ? AL_FORMAT_MONO16 : AL_FORMAT_STEREO16, alignedInputSamples, MIXBUFFER_SAMPLES * sample->objectInfo.nChannels * sizeof(short), 44100);
                     chan->openalStreamingOffset += MIXBUFFER_SAMPLES;
diff -NEaurb neo/sys/posix/posix_net.cpp neo/sys/posix/posix_net.cpp
--- neo/sys/posix/posix_net.cpp	2013-08-14 01:47:55 +0000
+++ neo/sys/posix/posix_net.cpp	2013-08-13 11:16:50 +0000
@@ -332,13 +332,13 @@
 
     for (ifp = ifap; ifp; ifp = ifp->ifa_next)
     {
-        if (ifp->ifa_addr->sa_family != AF_INET)
+        if (!ifp->ifa_addr)
             continue;
 
-        if (!(ifp->ifa_flags & IFF_UP))
+        if (ifp->ifa_addr->sa_family != AF_INET)
             continue;
 
-        if (!ifp->ifa_addr)
+        if (!(ifp->ifa_flags & IFF_UP))
             continue;
 
         if (!ifp->ifa_netmask)
diff -NEaurb neo/sys/sys_public.h neo/sys/sys_public.h
--- neo/sys/sys_public.h	2013-08-14 01:47:56 +0000
+++ neo/sys/sys_public.h	2013-08-13 15:36:50 +0000
@@ -37,6 +37,11 @@
 ===============================================================================
 */
 
+#ifdef __GNUC__
+#define id_attribute(x) __attribute__(x)
+#else
+#define id_attribute(x)
+#endif
 
 // Win32
 #if defined(WIN32) || defined(_WIN32)
@@ -46,16 +51,36 @@
 #define	CPUSTRING						"x86"
 #define CPU_EASYARGS					1
 
+#define ALIGN8( x )						__declspec(align(8)) x
 #define ALIGN16( x )					__declspec(align(16)) x
+#define ALIGN32( x )					__declspec(align(32)) x
+#define ALIGN64( x )					__declspec(align(64)) x
+#define ALIGN128( x )					__declspec(align(128)) x
+
 #define PACKED
 
-#define _alloca16( x )					((void *)((((int)_alloca( (x)+15 )) + 15) & ~15))
+#define _aligned( x, a )				(((x) + ((a)-1) ) & ~((a)-1))
+#define _alloca8( x )					((void *)_aligned((int)_alloca(_aligned(x, 8) + 8), 8))
+#define _alloca16( x )					((void *)_aligned((int)_alloca(_aligned(x, 16) + 16), 16))
+#define _alloca32( x )					((void *)_aligned((int)_alloca(_aligned(x, 32) + 32), 32))
+#define _alloca64( x )					((void *)_aligned((int)_alloca(_aligned(x, 64) + 64), 64))
+#define _alloca128( x )					((void *)_aligned((int)_alloca(_aligned(x, 128) + 128), 128))
 
 #define PATHSEPERATOR_STR				"\\"
 #define PATHSEPERATOR_CHAR				'\\'
 
-#define ID_INLINE						__forceinline
-#define ID_STATIC_TEMPLATE				static
+#define ID_INLINE						inline			// will not force it but is safer
+#define ID_FORCE_INLINE					__forceinline	// don't use on functions with alloca !!!!
+
+// lint complains that extern used with definition is a hazard, but it
+// has the benefit (?) of making it illegal to take the address of the function
+#ifdef _lint
+#define ID_INLINE_EXTERN				inline
+#define ID_FORCE_INLINE_EXTERN			__forceinline
+#else
+#define ID_INLINE_EXTERN				extern inline
+#define ID_FORCE_INLINE_EXTERN			extern __forceinline
+#endif
 
 #define assertmem( x, y )				assert( _CrtIsValidPointer( x, y, true ) )
 
@@ -74,17 +99,27 @@
 #define CPU_EASYARGS				1
 #endif
 
-#define ALIGN16( x )					x __attribute__ ((aligned (16)))
+#define ALIGN8( x )						x id_attribute((aligned (8)))
+#define ALIGN16( x )					x id_attribute((aligned (16)))
+#define ALIGN32( x )					x id_attribute((aligned (32)))
+#define ALIGN64( x )					x id_attribute((aligned (64)))
+#define ALIGN128( x )					x id_attribute((aligned (128)))
 
 #ifdef __MWERKS__
 #define PACKED
 #include <alloca.h>
 #else
-#define PACKED							__attribute__((packed))
+#define PACKED							id_attribute((packed))
 #endif
 
 #define _alloca							alloca
-#define _alloca16( x )					((void *)((((int)alloca( (x)+15 )) + 15) & ~15))
+
+#define _aligned( x, a )				(((x) + ((a)-1) ) & ~((a)-1))
+#define _alloca8( x )					((void *)_aligned((int)_alloca(_aligned(x, 8) + 8), 8))
+#define _alloca16( x )					((void *)_aligned((int)_alloca(_aligned(x, 16) + 16), 16))
+#define _alloca32( x )					((void *)_aligned((int)_alloca(_aligned(x, 32) + 32), 32))
+#define _alloca64( x )					((void *)_aligned((int)_alloca(_aligned(x, 64) + 64), 64))
+#define _alloca128( x )					((void *)_aligned((int)_alloca(_aligned(x, 128) + 128), 128))
 
 #define PATHSEPERATOR_STR				"/"
 #define PATHSEPERATOR_CHAR				'/'
@@ -93,7 +128,7 @@
 #define ASSERT							assert
 
 #define ID_INLINE						inline
-#define ID_STATIC_TEMPLATE
+#define ID_FORCE_INLINE					__forceinline	// don't use on functions with alloca !!!!
 
 #define assertmem( x, y )
 
@@ -115,10 +150,21 @@
 #endif
 
 #define _alloca							alloca
-#define _alloca16( x )					((void *)((((int)alloca( (x)+15 )) + 15) & ~15))
 
+#define _aligned( x, a )				(((x) + ((a)-1) ) & ~((a)-1))
+#define _alloca8( x )					((void *)_aligned((int)_alloca(_aligned(x, 8) + 8), 8))
+#define _alloca16( x )					((void *)_aligned((int)_alloca(_aligned(x, 16) + 16), 16))
+#define _alloca32( x )					((void *)_aligned((int)_alloca(_aligned(x, 32) + 32), 32))
+#define _alloca64( x )					((void *)_aligned((int)_alloca(_aligned(x, 64) + 64), 64))
+#define _alloca128( x )					((void *)_aligned((int)_alloca(_aligned(x, 128) + 128), 128))
+
+#define ALIGN8( x )						x
 #define ALIGN16( x )					x
-#define PACKED							__attribute__((packed))
+#define ALIGN32( x )					x
+#define ALIGN64( x )					x
+#define ALIGN128( x )					x
+
+#define PACKED							id_attribute((packed))
 
 #define PATHSEPERATOR_STR				"/"
 #define PATHSEPERATOR_CHAR				'/'
@@ -127,18 +173,12 @@
 #define ASSERT							assert
 
 #define ID_INLINE						inline
-#define ID_STATIC_TEMPLATE
+#define ID_FORCE_INLINE					__forceinline	// don't use on functions with alloca !!!!
 
 #define assertmem( x, y )
 
 #endif
 
-#ifdef __GNUC__
-#define id_attribute(x) __attribute__(x)
-#else
-#define id_attribute(x)
-#endif
-
 typedef enum
 {
     CPUID_NONE							= 0x00000,
diff -NEaurb neo/sys/win32/win_input.cpp neo/sys/win32/win_input.cpp
--- neo/sys/win32/win_input.cpp	2013-08-14 01:47:55 +0000
+++ neo/sys/win32/win_input.cpp	2013-08-13 16:10:44 +0000
@@ -628,16 +628,35 @@
 */
 void IN_ActivateMouse(void)
 {
-    int i;
     HRESULT hr;
+    RECT	mouserect;
 
     if (!win32.in_mouse.GetBool() || win32.mouseGrabbed || !win32.g_pMouse)
     {
         return;
     }
 
+    // constrain mouse movement to the correct window rect
+    GetClientRect(win32.hWnd, &mouserect);
+
+    // sometimes if the mouse wanders to the edge of the rect it can go outside in the time between messages so shrink the rect a little to fix that
+    mouserect.left += 5;
+    mouserect.right -= 5;
+    mouserect.top += 5;
+    mouserect.bottom -= 5;
+
+    // this nasty hack works because of the struct layouts
+    ClientToScreen(win32.hWnd, (POINT *) &mouserect.left);
+    ClientToScreen(win32.hWnd, (POINT *) &mouserect.right);
+
+    ClipCursor(&mouserect);
+
+    // ensure that the cursor stays within the client region (directinput will look after the rest)
+    SetCursorPos(mouserect.left + ((mouserect.right - mouserect.left) >> 1), mouserect.top + ((mouserect.bottom - mouserect.top) >> 1));
+
     win32.mouseGrabbed = true;
-    for (i = 0; i < 10; i++)
+
+    for (int i = 0; i < 10; i++)
     {
         if (::ShowCursor(false) < 0)
         {
@@ -663,7 +682,6 @@
 */
 void IN_DeactivateMouse(void)
 {
-    int i;
 
     if (!win32.g_pMouse || !win32.mouseGrabbed)
     {
@@ -672,13 +690,15 @@
 
     win32.g_pMouse->Unacquire();
 
-    for (i = 0; i < 10; i++)
+    for (int i = 0; i < 10; i++)
     {
         if (::ShowCursor(true) >= 0)
         {
             break;
         }
     }
+    ClipCursor(NULL);
+
     win32.mouseGrabbed = false;
 }
 
@@ -891,8 +911,6 @@
 static int diFetch;
 static byte toggleFetch[2][ 256 ];
 
-
-#if 1
 // I tried doing the full-state get to address a keyboard problem on one system,
 // but it didn't make any difference
 
@@ -948,70 +966,6 @@
     return dwElements;
 }
 
-#else
-
-/*
-====================
-Sys_PollKeyboardInputEvents
-
-Fake events by getting the entire device state
-and checking transitions
-====================
-*/
-int Sys_PollKeyboardInputEvents(void)
-{
-    HRESULT            hr;
-
-    if (win32.g_pKeyboard == NULL)
-    {
-        return 0;
-    }
-
-    hr = win32.g_pKeyboard->GetDeviceState(sizeof(toggleFetch[ diFetch ]), toggleFetch[ diFetch ]);
-    if (hr != DI_OK)
-    {
-        // We got an error or we got DI_BUFFEROVERFLOW.
-        //
-        // Either way, it means that continuous contact with the
-        // device has been lost, either due to an external
-        // interruption, or because the buffer overflowed
-        // and some events were lost.
-        hr = win32.g_pKeyboard->Acquire();
-
-        // nuke the garbage
-        if (!FAILED(hr))
-        {
-            hr = win32.g_pKeyboard->GetDeviceState(sizeof(toggleFetch[ diFetch ]), toggleFetch[ diFetch ]);
-        }
-        // hr may be DIERR_OTHERAPPHASPRIO or other errors.  This
-        // may occur when the app is minimized or in the process of
-        // switching, so just try again later
-    }
-
-    if (FAILED(hr))
-    {
-        return 0;
-    }
-
-    // build faked events
-    int		numChanges = 0;
-
-    for (int i = 0 ; i < 256 ; i++)
-    {
-        if (toggleFetch[0][i] != toggleFetch[1][i])
-        {
-            polled_didod[ numChanges ].dwOfs = i;
-            polled_didod[ numChanges ].dwData = toggleFetch[ diFetch ][i] ? 0x80 : 0;
-            numChanges++;
-        }
-    }
-
-    diFetch ^= 1;
-
-    return numChanges;
-}
-
-#endif
 
 /*
 ====================
diff -NEaurb neo/sys/win32/win_main.cpp neo/sys/win32/win_main.cpp
--- neo/sys/win32/win_main.cpp	2013-08-14 02:43:26 +0000
+++ neo/sys/win32/win_main.cpp	2013-08-13 14:39:39 +0000
@@ -1586,6 +1586,9 @@
     // done before Com/Sys_Init since we need this for error output
     Sys_CreateConsole();
 
+    // initialize the omp threading
+    SEM_INIT(&common->alloc_mutex);
+
     // no abort/retry/fail errors
     SetErrorMode(SEM_FAILCRITICALERRORS);
 
@@ -1778,7 +1781,6 @@
         common->DPrintf("OpenURL: already in an exit sequence, ignoring %s\n", url);
         return;
     }
-
     common->Printf("Open URL: %s\n", url);
 
     if (!ShellExecute(NULL, "open", url, NULL, NULL, SW_RESTORE))
@@ -1786,8 +1788,8 @@
         common->Error("Could not open url: '%s' ", url);
         return;
     }
-
     wnd = GetForegroundWindow();
+
     if (wnd)
     {
         ShowWindow(wnd, SW_MAXIMIZE);
diff -NEaurb neo/sys/win32/win_shared.cpp neo/sys/win32/win_shared.cpp
--- neo/sys/win32/win_shared.cpp	2013-08-14 01:47:55 +0000
+++ neo/sys/win32/win_shared.cpp	2013-08-13 16:10:44 +0000
@@ -107,7 +107,6 @@
     return ret;
 }
 
-
 /*
 ================
 Sys_GetVideoRam
@@ -127,7 +126,6 @@
     {
         return retSize;
     }
-
     CComBSTR bstrNamespace(_T("\\\\.\\root\\CIMV2"));
     CComPtr<IWbemServices> spServices;
 
@@ -152,7 +150,6 @@
     {
         return retSize;
     }
-
     ULONG uNumOfInstances = 0;
     CComPtr<IWbemClassObject> spInstance = NULL;
     hr = spEnumInst->Next(10000, 1, &spInstance, &uNumOfInstances);
@@ -165,6 +162,7 @@
         if (hr == S_OK)
         {
             retSize = varSize.intVal / (1024 * 1024);
+
             if (retSize == 0)
             {
                 retSize = 64;
@@ -188,12 +186,12 @@
     MEMORYSTATUSEX statex;
     unsigned __int64 work;
 
-    memset(&statex, sizeof(statex), 0);
+    memset(&statex, 0, sizeof(statex));
     statex.dwLength = sizeof(statex);
+
     GlobalMemoryStatusEx(&statex);
 
     memset(&stats, 0, sizeof(stats));
-
     stats.memoryLoad = statex.dwMemoryLoad;
 
     work = statex.ullTotalPhys >> 20;
@@ -258,7 +256,6 @@
     static char s_userName[1024];
     unsigned long size = sizeof(s_userName);
 
-
     if (!GetUserName(s_userName, &size))
     {
         strcpy(s_userName, "player");
@@ -268,7 +265,6 @@
     {
         strcpy(s_userName, "player");
     }
-
     return s_userName;
 }
 
@@ -772,7 +768,6 @@
 */
 void Sys_GetCallStack(address_t *callStack, const int callStackSize)
 {
-#if 1 //def _DEBUG
     int i;
     long m_ebp;
 
@@ -784,6 +779,7 @@
     // skip last two functions
     m_ebp = *((long*)m_ebp);
     m_ebp = *((long*)m_ebp);
+
     // list functions
     for (i = 0; i < callStackSize; i++)
     {
@@ -794,9 +790,7 @@
         }
         m_ebp = *((long*)m_ebp);
     }
-#else
-    int i = 0;
-#endif
+
     while (i < callStackSize)
     {
         callStack[i++] = 0;
diff -NEaurb neo/sys/win32/win_snd.cpp neo/sys/win32/win_snd.cpp
--- neo/sys/win32/win_snd.cpp	2013-08-14 01:47:55 +0000
+++ neo/sys/win32/win_snd.cpp	2013-08-13 11:16:50 +0000
@@ -28,14 +28,12 @@
 #include "../../idlib/precompiled.h"
 #pragma hdrstop
 
-// DirectX SDK
-#include <DxErr.h>
-
+// DirectX SDK singular include
+#include "../../openal/include/dxerr.h"
 #include <ks.h>
 #include <ksmedia.h>
 #include "../../sound/snd_local.h"
 #include "win_local.h"
-
 #include "../../openal/idal.cpp"
 
 #define SAFE_DELETE(p)       { if(p) { delete (p);     (p)=NULL; } }
diff -NEaurb neo/sys/win32/win_wndproc.cpp neo/sys/win32/win_wndproc.cpp
--- neo/sys/win32/win_wndproc.cpp	2013-08-14 01:47:55 +0000
+++ neo/sys/win32/win_wndproc.cpp	2013-08-13 11:18:49 +0000
@@ -71,7 +71,6 @@
 
         SystemParametersInfo(SPI_SCREENSAVERRUNNING, 0, &old, 0);
     }
-
     s_alttab_disabled = false;
 }
 
diff -NEaurb neo/tools/compilers/aas/AASFile.cpp neo/tools/compilers/aas/AASFile.cpp
--- neo/tools/compilers/aas/AASFile.cpp	2013-08-14 01:47:56 +0000
+++ neo/tools/compilers/aas/AASFile.cpp	2013-08-13 00:05:26 +0000
@@ -1573,6 +1573,6 @@
     portals.Append(portal);
 
     // first cluster is a dummy
-    memset(&cluster, 0, sizeof(portal));
+    memset(&cluster, 0, sizeof(cluster));
     clusters.Append(cluster);
 }
diff -NEaurb neo/tools/compilers/aas/AASFile.h neo/tools/compilers/aas/AASFile.h
--- neo/tools/compilers/aas/AASFile.h	2013-08-14 01:47:58 +0000
+++ neo/tools/compilers/aas/AASFile.h	2013-08-14 02:52:32 +0000
@@ -93,6 +93,7 @@
 class idReachability
 {
 public:
+    ~idReachability(void) {}
     int							travelType;			// type of travel required to get to the area
     short						toAreaNum;			// number of the reachable area
     short						fromAreaNum;		// number of area the reachability starts
diff -NEaurb neo/tools/compilers/aas/AASReach.cpp neo/tools/compilers/aas/AASReach.cpp
--- neo/tools/compilers/aas/AASReach.cpp	2013-08-14 01:47:56 +0000
+++ neo/tools/compilers/aas/AASReach.cpp	2013-08-13 03:29:23 +0000
@@ -771,7 +771,6 @@
                 }
             }
         }
-    }
     //
     // Walk and Walk Off Ledge
     //
@@ -794,8 +793,6 @@
     //         ---------  FIXME: create TFL_WALK reach??
     //
     // check for a walk or walk off ledge reachability
-    if (floor_foundReach)
-    {
         if (floor_bestDist < 0)
         {
             if (floor_bestDist > -file->settings.maxStepHeight)
diff -NEaurb neo/tools/compilers/aas/BrushBSP.cpp neo/tools/compilers/aas/BrushBSP.cpp
--- neo/tools/compilers/aas/BrushBSP.cpp	2013-08-14 01:47:56 +0000
+++ neo/tools/compilers/aas/BrushBSP.cpp	2013-08-13 11:16:51 +0000
@@ -1614,15 +1614,15 @@
     idBrushBSPPortal *p;
     int s;
 
-    if (node->occupied)
-    {
-        common->Error("FloodThroughPortals_r: node already occupied\n");
-    }
     if (!node)
     {
         common->Error("FloodThroughPortals_r: NULL node\n");
     }
 
+    if (node->occupied)
+    {
+        common->Error("FloodThroughPortals_r: node already occupied\n");
+    }
     node->occupied = depth;
 
     for (p = node->portals; p; p = p->next[s])
diff -NEaurb neo/tools/compilers/dmap/optimize.cpp neo/tools/compilers/dmap/optimize.cpp
--- neo/tools/compilers/dmap/optimize.cpp	2013-08-14 01:47:56 +0000
+++ neo/tools/compilers/dmap/optimize.cpp	2013-08-13 16:10:44 +0000
@@ -972,7 +972,6 @@
 */
 static bool IsTriangleDegenerate(const optVertex_t *v1, const optVertex_t *v2, const optVertex_t *v3)
 {
-#if 1
     idVec3	d1, d2, normal;
 
     d1 = v2->pv - v1->pv;
@@ -983,9 +982,6 @@
         return true;
     }
     return false;
-#else
-    return (bool)!IsTriangleValid(v1, v2, v3);
-#endif
 }
 
 
diff -NEaurb neo/tools/compilers/dmap/ubrush.cpp neo/tools/compilers/dmap/ubrush.cpp
--- neo/tools/compilers/dmap/ubrush.cpp	2013-08-14 01:47:56 +0000
+++ neo/tools/compilers/dmap/ubrush.cpp	2013-08-13 04:59:53 +0000
@@ -643,11 +643,10 @@
     midwinding = w;
 
     // split it for real
-
     for (i = 0; i < 2; i++)
     {
         b[i] = AllocBrush(brush->numsides+1);
-        memcpy(b[i], brush, sizeof(uBrush_t) - sizeof(brush->sides));
+        memcpy(b[i], brush, sizeof(uBrush_t) - sizeof(*brush->sides));
         b[i]->numsides = 0;
         b[i]->next = NULL;
         b[i]->original = brush->original;
diff -NEaurb neo/tools/compilers/roqvq/codec.cpp neo/tools/compilers/roqvq/codec.cpp
--- neo/tools/compilers/roqvq/codec.cpp	2013-08-14 01:47:56 +0000
+++ neo/tools/compilers/roqvq/codec.cpp	2013-08-13 03:29:23 +0000
@@ -1394,23 +1394,16 @@
     Sort(flist, ilist, onf);
     Segment(ilist, flist, onf, GetCurrentRMSE(qStatus));
 
-    temp = dxMean = dyMean = 0;
-    /*
-    for( i=0; i<numQuadCels; i++ ) {
-    	if (qStatus[i].size && qStatus[i].status == FCC) {
-    		dxMean += (qStatus[i].domain >> 8  ) - 128;
-    		dyMean += (qStatus[i].domain & 0xff) - 128;
-    		temp++;
-    	}
-    }
-    if (temp) { dxMean /= temp; dyMean /= temp; }
-    */
+    numredo = temp = dxMean = dyMean = 0;
+
     common->Printf("sparseEncode: dx/dy mean is %d,%d\n", dxMean, dyMean);
 
-    numredo = 0;
     detail = false;
-    if (codebookmade && whichFrame>4) fsize -= 256;
-    temp = 0;
+
+    if (codebookmade && whichFrame > 4)
+    {
+        fsize -= 256;
+    }
     for (i=0; i<numQuadCels; i++)
     {
         if (qStatus[i].size == osize && qStatus[i].mark == false && qStatus[i].snr[MOT] > 0)
@@ -1445,20 +1438,6 @@
             }
             LowestQuad(&qStatus[i], &qStatus[i].status, &qStatus[i].rsnr, wtype);
             theRoQ->MarkQuadx(qStatus[i].xat, qStatus[i].yat, qStatus[i].size, qStatus[i].rsnr, qStatus[i].status);
-            /*
-            if (qStatus[i].status==FCC && qStatus[i].snr[FCC]>qStatus[i].snr[SLD]) {
-            			common->Printf("sparseEncode: something is wrong here\n");
-            			common->Printf("xat:    %d\n", qStatus[i].xat);
-            			common->Printf("yat:    %d\n", qStatus[i].yat);
-            			common->Printf("size    %d\n", qStatus[i].size);
-            			common->Printf("type:   %d\n", qStatus[i].status);
-            			common->Printf("mot:    %04x\n", qStatus[i].domain);
-            			common->Printf("motsnr: %0f\n", qStatus[i].snr[FCC]);
-            			common->Printf("sldsnr: %0f\n", qStatus[i].snr[SLD]);
-            			common->Printf("rmse:   %0f\n", qStatus[i].rsnr);
-            			//common->Error("need to go away now\n");
-            }
-            */
         }
     }
 
@@ -1467,8 +1446,8 @@
         common->Printf("sparseEncode: rmse of quad0 is %f, size is %d (meant to be %d)\n", GetCurrentRMSE(qStatus), GetCurrentQuadOutputSize(qStatus), fsize);
         common->Printf("sparseEncode: %d outside fcc limits\n", temp);
     }
-
     onf = 0;
+
     for (i=0; i<numQuadCels; i++)
     {
         if (qStatus[i].size && qStatus[i].status != DEP)
@@ -1478,7 +1457,6 @@
             onf++;
         }
     }
-
     Sort(flist, ilist, onf);
 
     ong = 0;
@@ -1486,11 +1464,7 @@
 
     while (GetCurrentQuadOutputSize(qStatus) < fsize && ong < onf && flist[ong] > 0 && qStatus[ilist[ong]].mark == false)
     {
-//		badsnr = [self getCurrentRMSE: qStatus];
         osize = AddQuad(qStatus, ilist[ong++]);
-//		if ([self getCurrentRMSE: qStatus] >= badsnr) {
-//		    break;
-//		}
     }
 
     if (GetCurrentQuadOutputSize(qStatus) < fsize)
@@ -1498,7 +1472,6 @@
         ong = 0;
         while (GetCurrentQuadOutputSize(qStatus) < fsize && ong < onf)
         {
-//			badsnr = [self getCurrentRMSE: qStatus];
             i = ilist[ong++];
             if (qStatus[i].mark)
             {
@@ -1519,23 +1492,13 @@
                 }
                 theRoQ->MarkQuadx(qStatus[i].xat, qStatus[i].yat, qStatus[i].size, qStatus[i].rsnr, qStatus[i].status);
             }
-//			if ([self getCurrentRMSE: qStatus] >= badsnr) {
-//			    break;
-//			}
         }
         ong = 0;
         while (GetCurrentQuadOutputSize(qStatus) < fsize && ong < onf && flist[ong] > 0)
         {
-//			badsnr = [self getCurrentRMSE: qStatus];
             i = ilist[ong++];
-//			if (qStatus[i].rsnr <= MIN_SNR) {
-//			    break;
-//			}
             detail = true;
             osize = AddQuad(qStatus, i);
-//			if ([self getCurrentRMSE: qStatus] >= badsnr) {
-//			    break;
-//			}
         }
     }
 
diff -NEaurb neo/tools/compilers/roqvq/roq.h neo/tools/compilers/roqvq/roq.h
--- neo/tools/compilers/roqvq/roq.h	2013-08-14 01:47:58 +0000
+++ neo/tools/compilers/roqvq/roq.h	2013-08-13 04:37:44 +0000
@@ -33,7 +33,7 @@
 #include "quaddefs.h"
 #define JPEG_INTERNALS
 extern "C" {
-#include "../../../renderer/jpeg-6/jpeglib.h"
+#include "../../../renderer/jpeg-8c/jpeglib.h"
 }
 #pragma once
 
diff -NEaurb neo/tools/radiant/ECLASS.CPP neo/tools/radiant/ECLASS.CPP
--- neo/tools/radiant/ECLASS.CPP	2013-08-14 01:47:57 +0000
+++ neo/tools/radiant/ECLASS.CPP	2013-08-13 16:10:44 +0000
@@ -371,41 +371,9 @@
 */
 void Eclass_InsertAlphabetized(eclass_t *e)
 {
-#if 1
     EClass_InsertSortedList(eclass, e);
-#else
-    eclass_t	*s;
-
-    if (!eclass)
-    {
-        eclass = e;
-        return;
-    }
-
-
-    s = eclass;
-    if (stricmp(e->name, s->name) < 0)
-    {
-        e->next = s;
-        eclass = e;
-        return;
-    }
-
-    do
-    {
-        if (!s->next || stricmp(e->name, s->next->name) < 0)
-        {
-            e->next = s->next;
-            s->next = e;
-            return;
-        }
-        s=s->next;
-    }
-    while (1);
-#endif
 }
 
-
 void Eclass_InitForSourceDirectory(const char *path)
 {
     int c = declManager->GetNumDecls(DECL_ENTITYDEF);
diff -NEaurb neo/tools/radiant/EntityDlg.cpp neo/tools/radiant/EntityDlg.cpp
--- neo/tools/radiant/EntityDlg.cpp	2013-08-14 01:47:57 +0000
+++ neo/tools/radiant/EntityDlg.cpp	2013-08-13 16:27:25 +0000
@@ -455,26 +455,33 @@
 void CEntityDlg::OnLbnSelchangeListkeyval()
 {
     int index = listKeyVal.GetCurSel();
+
     if (index != LB_ERR)
     {
         CString str;
+
         listKeyVal.GetText(index, str);
-        int i;
-        for (i = 0; str[i] != '\t' && str[i] != '\0'; i++)
+
+		int i = 0;
+
+		if (str[i] != '\0')
+		{
+			while (str[i] != '\t')
         {
+				i++;
         }
-
         idStr key = str.Left(i);
-        while (str[i] == '\t' && str[i] != '\0')
+
+			while (str[i] == '\t')
         {
             i++;
         }
-
         idStr val = str.Right(str.GetLength() - i);
 
         editKey.SetWindowText(key);
         editVal.SetWindowText(val);
     }
+	}
 }
 
 static int TabOrder[] =
@@ -1321,7 +1328,7 @@
 
     if (currentAnimation)
     {
-        currentAnimationFrame = ((currentAnimationFrame++) % gameEdit->ANIM_GetNumFrames(currentAnimation));
+        currentAnimationFrame = ((currentAnimationFrame + 1) % gameEdit->ANIM_GetNumFrames(currentAnimation));
         editEntity->epairs.SetInt("frame" , currentAnimationFrame);
         slFrameSlider.SetPos(currentAnimationFrame);
         UpdateFromAnimationFrame(false/*don't update key/value display*/);
diff -NEaurb neo/tools/radiant/MainFrm.cpp neo/tools/radiant/MainFrm.cpp
--- neo/tools/radiant/MainFrm.cpp	2013-08-14 01:47:57 +0000
+++ neo/tools/radiant/MainFrm.cpp	2013-08-13 00:05:26 +0000
@@ -2996,8 +2996,7 @@
         common->Printf("String_ToLower(): Warning, input string was %d bytes too large, performing strlwr() inline!\n",strlen(psString)-(iBufferSize-1));
         return strlwr(const_cast<char*>(psString));
     }
-
-    iIndex = ++ iIndex & 7;
+    iIndex = (iIndex + 1) & 7;
 
     strcpy(sString[iIndex],psString);
     strlwr(sString[iIndex]);
diff -NEaurb neo/tools/radiant/PMESH.CPP neo/tools/radiant/PMESH.CPP
--- neo/tools/radiant/PMESH.CPP	2013-08-14 01:47:57 +0000
+++ neo/tools/radiant/PMESH.CPP	2013-08-13 00:05:26 +0000
@@ -2654,10 +2654,7 @@
     // patches use two display lists, one for camera one for xy
     if (*list <= 0)
     {
-        if (*list <= 0)
-        {
             *list = qglGenLists(1);
-        }
 
         if (*list > 0)
         {
diff -NEaurb neo/tools/radiant/SELECT.CPP neo/tools/radiant/SELECT.CPP
--- neo/tools/radiant/SELECT.CPP	2013-08-14 01:47:57 +0000
+++ neo/tools/radiant/SELECT.CPP	2013-08-13 16:10:44 +0000
@@ -813,7 +813,6 @@
 */
 void VectorRotate3(const idVec3 &vIn, const idVec3 &vRotation, idVec3 &out)
 {
-#if 1
     int i, nIndex[3][2];
     idVec3 vWork, va;
 
@@ -839,15 +838,6 @@
         va = vWork;
     }
     out = vWork;
-#else
-    idAngles angles;
-
-    angles.pitch = vRotation[1];
-    angles.yaw = vRotation[2];
-    angles.roll = vRotation[0];
-
-    out = vIn * angles.ToMat3();
-#endif
 }
 
 /*
diff -NEaurb neo/tools/radiant/WIN_QE3.CPP neo/tools/radiant/WIN_QE3.CPP
--- neo/tools/radiant/WIN_QE3.CPP	2013-08-14 01:47:57 +0000
+++ neo/tools/radiant/WIN_QE3.CPP	2013-08-13 16:10:44 +0000
@@ -192,9 +192,8 @@
  */
 int WINAPI QEW_SetupPixelFormat(HDC hDC, bool zbuffer)
 {
-#if 1
-
     int pixelFormat = ChoosePixelFormat(hDC, &win32.pfd);
+
     if (pixelFormat > 0)
     {
         if (SetPixelFormat(hDC, pixelFormat, &win32.pfd) == NULL)
@@ -206,61 +205,7 @@
     {
         Error("ChoosePixelFormat failed.");
     }
-
     return pixelFormat;
-#else
-    static PIXELFORMATDESCRIPTOR	pfd =
-    {
-        sizeof(PIXELFORMATDESCRIPTOR),	// size of this pfd
-        1,						// version number
-        PFD_DRAW_TO_WINDOW |	// support window
-        PFD_SUPPORT_OPENGL |	// support OpenGL
-        PFD_DOUBLEBUFFER,		// double buffered
-        PFD_TYPE_RGBA,			// RGBA type
-        24,						// 24-bit color depth
-        0,
-        0,
-        0,
-        0,
-        0,
-        0,						// color bits ignored
-        0,						// no alpha buffer
-        0,						// shift bit ignored
-        0,						// no accumulation buffer
-        0,
-        0,
-        0,
-        0,						// accum bits ignored
-        32,						// depth bits
-        0,						// no stencil buffer
-        0,						// no auxiliary buffer
-        PFD_MAIN_PLANE,			// main layer
-        0,						// reserved
-        0,
-        0,
-        0						// layer masks ignored
-    };
-    int pixelformat = 0;
-
-    zbuffer = true;
-    if (!zbuffer)
-    {
-        pfd.cDepthBits = 0;
-    }
-
-    if ((pixelformat = ChoosePixelFormat(hDC, &pfd)) == 0)
-    {
-        printf("%d", GetLastError());
-        Error("ChoosePixelFormat failed");
-    }
-
-    if (!SetPixelFormat(hDC, pixelformat, &pfd))
-    {
-        Error("SetPixelFormat failed");
-    }
-
-    return pixelformat;
-#endif
 }
 
 /*
diff -NEaurb neo/tools/radiant/XYWnd.cpp neo/tools/radiant/XYWnd.cpp
--- neo/tools/radiant/XYWnd.cpp	2013-08-14 01:47:57 +0000
+++ neo/tools/radiant/XYWnd.cpp	2013-08-13 16:10:44 +0000
@@ -4682,7 +4682,6 @@
  */
 void CXYWnd::Copy()
 {
-#if 1
     CWaitCursor WaitCursor;
     g_Clipboard.SetLength(0);
     g_PatchClipboard.SetLength(0);
@@ -4724,38 +4723,6 @@
      * strOut.ReleaseBuffer(); AddSlash(strOut); strOut += "RadiantClipboard.$$$";
      * Map_SaveSelected(strOut.GetBuffer(0));
      */
-#else
-    CPtrArray	holdArray;
-    CleanList(&g_brClipboard);
-    CleanCopyEntities();
-    for (brush_t * pBrush = selected_brushes.next; pBrush != NULL && pBrush != &selected_brushes; pBrush = pBrush->next)
-    {
-        if (pBrush->owner == world_entity)
-        {
-            brush_t *pClone = Brush_Clone(pBrush);
-            pClone->owner = NULL;
-            Brush_AddToList(pClone, &g_brClipboard);
-        }
-        else
-        {
-            if (!OnList(pBrush->owner, &holdArray))
-            {
-                entity_t	*e = pBrush->owner;
-                holdArray.Add(reinterpret_cast < void * >(e));
-
-                entity_t	*pEClone = Entity_CopyClone(e);
-                for (brush_t * pEB = e->brushes.onext; pEB != &e->brushes; pEB = pEB->onext)
-                {
-                    brush_t *pClone = Brush_Clone(pEB);
-
-                    // Brush_AddToList (pClone, &g_brClipboard);
-                    Entity_LinkBrush(pEClone, pClone);
-                    Brush_Build(pClone);
-                }
-            }
-        }
-    }
-#endif
 }
 
 /*
@@ -4813,8 +4780,6 @@
  */
 void CXYWnd::Paste()
 {
-#if 1
-
     CWaitCursor WaitCursor;
     bool		bPasted = false;
     UINT		nClipboard = ::RegisterClipboardFormat("RadiantClippings");
@@ -4842,73 +4807,12 @@
 
         int		nLen = g_Clipboard.GetLength();
         char	*pBuffer = new char[nLen + 1];
-        memset(pBuffer, 0, sizeof(pBuffer));
+        memset(pBuffer, 0, sizeof(*pBuffer));
         g_Clipboard.Read(pBuffer, nLen);
         pBuffer[nLen] = '\0';
         Map_ImportBuffer(pBuffer, !(GetAsyncKeyState(VK_SHIFT) & 0x8000));
         delete[] pBuffer;
     }
-
-#if 0
-    if (g_PatchClipboard.GetLength() > 0)
-    {
-        g_PatchClipboard.SeekToBegin();
-
-        int		nLen = g_PatchClipboard.GetLength();
-        char	*pBuffer = new char[nLen + 1];
-        g_PatchClipboard.Read(pBuffer, nLen);
-        pBuffer[nLen] = '\0';
-        Patch_ReadBuffer(pBuffer, true);
-        delete[] pBuffer;
-    }
-#endif
-#else
-    if (g_brClipboard.next != &g_brClipboard || g_enClipboard.next != &g_enClipboard)
-    {
-        Select_Deselect();
-
-        for (brush_t * pBrush = g_brClipboard.next; pBrush != NULL && pBrush != &g_brClipboard; pBrush = pBrush->next)
-        {
-            brush_t *pClone = Brush_Clone(pBrush);
-
-            // pClone->owner = pBrush->owner;
-            if (pClone->owner == NULL)
-            {
-                Entity_LinkBrush(world_entity, pClone);
-            }
-
-            Brush_AddToList(pClone, &selected_brushes);
-            Brush_Build(pClone);
-        }
-
-        for
-        (
-            entity_t * pEntity = g_enClipboard.next;
-            pEntity != NULL && pEntity != &g_enClipboard;
-            pEntity = pEntity->next
-        )
-        {
-            entity_t	*pEClone = Entity_Clone(pEntity);
-            for (brush_t * pEB = pEntity->brushes.onext; pEB != &pEntity->brushes; pEB = pEB->onext)
-            {
-                brush_t *pClone = Brush_Clone(pEB);
-                Brush_AddToList(pClone, &selected_brushes);
-                Entity_LinkBrush(pEClone, pClone);
-                Brush_Build(pClone);
-                if (pClone->owner && pClone->owner != world_entity)
-                {
-                    g_Inspectors->UpdateEntitySel(pClone->owner->eclass);
-                }
-            }
-        }
-
-        Sys_UpdateWindows(W_ALL);
-    }
-    else
-    {
-        common->Printf("Nothing to paste.../n");
-    }
-#endif
 }
 
 /*
diff -NEaurb neo/tools/radiant/autocaulk.cpp neo/tools/radiant/autocaulk.cpp
--- neo/tools/radiant/autocaulk.cpp	2013-08-14 01:47:57 +0000
+++ neo/tools/radiant/autocaulk.cpp	2013-08-13 16:10:44 +0000
@@ -46,11 +46,6 @@
 #undef strnicmp
 #define strnicmp		idStr::Icmpn
 
-#if 1
-
-
-//extern void ClearBounds (idVec3 mins, idVec3 maxs);
-//extern void AddPointToBounds (const idVec3 v, idVec3 mins, idVec3 maxs);
 void ClearBounds(idVec3 &mins, idVec3 &maxs)
 {
     mins[0] = mins[1] = mins[2] = 99999;
@@ -72,7 +67,6 @@
     }
 }
 
-
 static void FloorBounds(idVec3 &mins, idVec3 &maxs)
 {
     for (int i=0 ; i<3 ; i++)
@@ -82,11 +76,11 @@
     }
 }
 
-
 static LPCSTR vtos(idVec3 &v3)
 {
     return va("%.3ff,%.3f,%.3f",v3[0],v3[1],v3[2]);
 }
+
 struct PairBrushFace_t
 {
     face_t*		pFace;
@@ -95,7 +89,7 @@
 idList < PairBrushFace_t > FacesToCaulk;
 void Select_AutoCaulk()
 {
-    /*Sys_Printf*/common->Printf("Caulking...\n");
+    common->Printf("Caulking...\n");
 
     FacesToCaulk.Clear();
 
@@ -143,12 +137,6 @@
                 if (FilterBrush(pScannedBrush))
                     continue;
 
-// idMaterial stuff no longer support this, not sure what else to do.
-//   Searching for other occurences of QER_NOCARVE just shows people REMing the code and ignoring ths issue...
-//
-//				if (pScannedBrush->brush_faces->d_texture->bFromShader && (pScannedBrush->brush_faces->d_texture->TestMaterialFlag(QER_NOCARVE)))
-//					continue;
-
                 // basic-reject first to see if brushes can even possibly touch (coplanar counts as touching)
                 //
                 int i;
@@ -173,9 +161,6 @@
                     if (!pSelectedWinding)
                         continue;	// freed face, probably won't happen here, but who knows with this program?
 
-                    //				SquaredFace_t SelectedSquaredFace;
-                    //				WindingToSquaredFace( &SelectedSquaredFace, pSelectedWinding);
-
                     for (face_t *pScannedFace = pScannedBrush->brush_faces; pScannedFace; pScannedFace = pScannedFace->next)
                     {
                         // don't even try caulking against a system face, because these are often transparent and will leave holes
@@ -193,14 +178,6 @@
                         if (!pScannedWinding)
                             continue;	// freed face, probably won't happen here, but who knows with this program?
 
-                        //					SquaredFace_t ScannedSquaredFace;
-                        //					WindingToSquaredFace( &ScannedSquaredFace, pScannedWinding);
-
-                        /*					if (VectorCompare(ScannedSquaredFace.v3NormalisedRotationVector, SelectedSquaredFace.v3NormalisedRotationVector)
-                        						&&
-                        						VectorCompare(ScannedSquaredFace.v3NormalisedElevationVector, SelectedSquaredFace.v3NormalisedElevationVector)
-                        						)
-                        */
                         {
                             // brush faces are in parallel planes to each other, so check that their normals
                             //	are opposite, by adding them together and testing for zero...
@@ -225,7 +202,6 @@
                                                        DotProduct(pSelectedFace->plane.Normal(),(*pScannedWinding)[i])
                                                       );
                                 }
-                                //OutputDebugString(va("Dist = %g\n",fTotalDist));
 
                                 if (fTotalDist > 0.01)
                                     continue;
@@ -301,13 +277,8 @@
             memset(&tex, 0, sizeof(tex));
             tex.scale[0] = 1;
             tex.scale[1] = 1;
-            //tex.flags = pCaulk->flags;	// field missing in Q4
-            //tex.value = pCaulk->value;	// ditto
-            //tex.contents = pCaulk->contents;	// ditto
             tex.SetName(pCaulk->GetName());
 
-            //Texture_SetTexture (&tex);
-
             for (int iListEntry = 0; iListEntry < FacesToCaulk.Num(); iListEntry++)
             {
                 PairBrushFace_t &PairBrushFace = FacesToCaulk[iListEntry];
@@ -325,17 +296,15 @@
         }
         else
         {
-            /*Sys_Printf*/common->Printf(" Unable to locate caulk texture at: \"%s\"!\n",psCaulkName);
+            common->Printf(" Unable to locate caulk texture at: \"%s\"!\n",psCaulkName);
         }
     }
 
-    /*Sys_Printf*/common->Printf("( %d faces caulked )\n",iFacesCaulked);
+    common->Printf("( %d faces caulked )\n",iFacesCaulked);
 
     if (iSystemBrushesSkipped)
     {
-        /*Sys_Printf*/common->Printf("( %d system-faced brushes skipped )\n",iSystemBrushesSkipped);
+        common->Printf("( %d system-faced brushes skipped )\n",iSystemBrushesSkipped);
     }
-
     Sys_UpdateWindows(W_ALL);
 }
-#endif
\ No newline at end of file
diff -NEaurb neo/tools/radiant/splines.cpp neo/tools/radiant/splines.cpp
--- neo/tools/radiant/splines.cpp	2013-08-14 01:47:57 +0000
+++ neo/tools/radiant/splines.cpp	2013-08-13 00:05:26 +0000
@@ -1801,11 +1801,6 @@
         name = token;
         return true;
     }
-    else if (!key.Icmp("time"))
-    {
-        time = src->ParseInt();
-        return true;
-    }
     else
     {
         src->Error("unknown camera position key: %s", key.c_str());
diff -NEaurb neo/typeinfo.vcxproj neo/typeinfo.vcxproj
--- neo/typeinfo.vcxproj	2011-12-26 04:15:38 +0000
+++ neo/typeinfo.vcxproj	2013-08-13 13:52:04 +0000
@@ -46,30 +46,37 @@
   <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Dedicated Release|Win32'" Label="Configuration">
     <ConfigurationType>Application</ConfigurationType>
     <CharacterSet>MultiByte</CharacterSet>
+    <PlatformToolset>v110</PlatformToolset>
   </PropertyGroup>
   <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Dedicated Debug with inlines|Win32'" Label="Configuration">
     <ConfigurationType>Application</ConfigurationType>
     <CharacterSet>MultiByte</CharacterSet>
+    <PlatformToolset>v110</PlatformToolset>
   </PropertyGroup>
   <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Dedicated Debug|Win32'" Label="Configuration">
     <ConfigurationType>Application</ConfigurationType>
     <CharacterSet>MultiByte</CharacterSet>
+    <PlatformToolset>v110</PlatformToolset>
   </PropertyGroup>
   <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug with inlines and memory log|Win32'" Label="Configuration">
     <ConfigurationType>Application</ConfigurationType>
     <CharacterSet>MultiByte</CharacterSet>
+    <PlatformToolset>v110</PlatformToolset>
   </PropertyGroup>
   <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug with inlines|Win32'" Label="Configuration">
     <ConfigurationType>Application</ConfigurationType>
     <CharacterSet>MultiByte</CharacterSet>
+    <PlatformToolset>v110</PlatformToolset>
   </PropertyGroup>
   <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|Win32'" Label="Configuration">
     <ConfigurationType>Application</ConfigurationType>
     <CharacterSet>MultiByte</CharacterSet>
+    <PlatformToolset>v110</PlatformToolset>
   </PropertyGroup>
   <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'" Label="Configuration">
     <ConfigurationType>Application</ConfigurationType>
     <CharacterSet>MultiByte</CharacterSet>
+    <PlatformToolset>v110</PlatformToolset>
   </PropertyGroup>
   <Import Project="$(VCTargetsPath)\Microsoft.Cpp.props" />
   <ImportGroup Label="ExtensionSettings">
@@ -154,6 +161,27 @@
       <IgnoreSpecificDefaultLibraries>nafxcwd.lib;libcmtd.lib;%(IgnoreSpecificDefaultLibraries)</IgnoreSpecificDefaultLibraries>
     </Link>
   </ItemDefinitionGroup>
+  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release|Win32'">
+    <ClCompile>
+      <WarningLevel>Level3</WarningLevel>
+      <PrecompiledHeader />
+      <EnableParallelCodeGeneration>true</EnableParallelCodeGeneration>
+      <MultiProcessorCompilation>true</MultiProcessorCompilation>
+      <OpenMPSupport>true</OpenMPSupport>
+    </ClCompile>
+  </ItemDefinitionGroup>
+  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Dedicated Release|Win32'">
+    <ClCompile>
+      <MultiProcessorCompilation>true</MultiProcessorCompilation>
+      <EnableParallelCodeGeneration>true</EnableParallelCodeGeneration>
+      <PrecompiledHeader />
+    </ClCompile>
+  </ItemDefinitionGroup>
+  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">
+    <ClCompile>
+      <PreprocessorDefinitions>_ALLOW_KEYWORD_MACROS;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+    </ClCompile>
+  </ItemDefinitionGroup>
   <ItemGroup>
     <ClCompile Include="TypeInfo\main.cpp">
       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug with inlines and memory log|Win32'">Create</PrecompiledHeader>
diff -NEaurb neo/ui/DeviceContext.cpp neo/ui/DeviceContext.cpp
--- neo/ui/DeviceContext.cpp	2013-08-14 01:47:59 +0000
+++ neo/ui/DeviceContext.cpp	2013-08-13 15:32:11 +0000
@@ -863,7 +863,7 @@
     fontInfo_t	*font = useFont;
     useScale = scale * font->glyphScale;
     glyph = &font->glyphs[(const unsigned char)c];
-    return idMath::FtoiFast(glyph->xSkip * useScale);
+    return idMath::Ftoi(glyph->xSkip * useScale);
 }
 
 int idDeviceContext::TextWidth(const char *text, float scale, int limit)
@@ -907,7 +907,7 @@
             }
         }
     }
-    return idMath::FtoiFast(scale * useFont->glyphScale * width);
+    return idMath::Ftoi(scale * useFont->glyphScale * width);
 }
 
 int idDeviceContext::TextHeight(const char *text, float scale, int limit)
@@ -952,21 +952,21 @@
         }
     }
 
-    return idMath::FtoiFast(max * useScale);
+    return idMath::Ftoi(max * useScale);
 }
 
 int idDeviceContext::MaxCharWidth(float scale)
 {
     SetFontByScale(scale);
     float useScale = scale * useFont->glyphScale;
-    return idMath::FtoiFast(activeFont->maxWidth * useScale);
+    return idMath::Ftoi(activeFont->maxWidth * useScale);
 }
 
 int idDeviceContext::MaxCharHeight(float scale)
 {
     SetFontByScale(scale);
     float useScale = scale * useFont->glyphScale;
-    return idMath::FtoiFast(activeFont->maxHeight * useScale);
+    return idMath::Ftoi(activeFont->maxHeight * useScale);
 }
 
 const idMaterial *idDeviceContext::GetScrollBarImage(int index)
@@ -1090,7 +1090,7 @@
             renderSystem->SetColor(color);
             DrawEditCursor(rectDraw.x, lineSkip + rectDraw.y, textScale);
         }
-        return idMath::FtoiFast(rectDraw.w / charSkip);
+        return idMath::Ftoi(rectDraw.w / charSkip);
     }
 
     textPtr = text;
@@ -1230,7 +1230,7 @@
         }
     }
 
-    return idMath::FtoiFast(rectDraw.w / charSkip);
+    return idMath::Ftoi(rectDraw.w / charSkip);
 }
 
 /*
diff -NEaurb neo/ui/EditWindow.cpp neo/ui/EditWindow.cpp
--- neo/ui/EditWindow.cpp	2013-08-14 01:47:59 +0000
+++ neo/ui/EditWindow.cpp	2013-08-13 15:32:11 +0000
@@ -708,7 +708,7 @@
                     break;
                 }
             }
-            int topLine = idMath::FtoiFast(scroller->GetValue());
+            int topLine = idMath::Ftoi(scroller->GetValue());
             if (cursorLine < topLine)
             {
                 scroller->SetValue(cursorLine);
diff -NEaurb neo/ui/GameBustOutWindow.h neo/ui/GameBustOutWindow.h
--- neo/ui/GameBustOutWindow.h	2013-08-14 01:47:59 +0000
+++ neo/ui/GameBustOutWindow.h	2013-08-13 00:05:26 +0000
@@ -99,7 +99,7 @@
 public:
     BOBrick();
     BOBrick(BOEntity *_ent, float _x, float _y, float _width, float _height);
-    ~BOBrick();
+    virtual			~BOBrick();
 
     virtual void	WriteToSaveGame(idFile *savefile);
     virtual void	ReadFromSaveGame(idFile *savefile, idGameBustOutWindow *game);
diff -NEaurb neo/ui/GameSSDWindow.cpp neo/ui/GameSSDWindow.cpp
--- neo/ui/GameSSDWindow.cpp	2013-08-14 01:47:59 +0000
+++ neo/ui/GameSSDWindow.cpp	2013-08-14 02:52:32 +0000
@@ -27,7 +27,6 @@
 */
 #include "../idlib/precompiled.h"
 #pragma hdrstop
-
 #include "../framework/Session_local.h"
 
 #include "DeviceContext.h"
@@ -62,27 +61,22 @@
 
 void SSDCrossHair::WriteToSaveGame(idFile *savefile)
 {
-
     savefile->Write(&currentCrosshair, sizeof(currentCrosshair));
     savefile->Write(&crosshairWidth, sizeof(crosshairWidth));
     savefile->Write(&crosshairHeight, sizeof(crosshairHeight));
-
 }
 
 void SSDCrossHair::ReadFromSaveGame(idFile *savefile)
 {
-
     InitCrosshairs();
 
     savefile->Read(&currentCrosshair, sizeof(currentCrosshair));
     savefile->Read(&crosshairWidth, sizeof(crosshairWidth));
     savefile->Read(&crosshairHeight, sizeof(crosshairHeight));
-
 }
 
 void SSDCrossHair::InitCrosshairs()
 {
-
     crosshairMaterial[CROSSHAIR_STANDARD] = declManager->FindMaterial(CROSSHAIR_STANDARD_MATERIAL);
     crosshairMaterial[CROSSHAIR_SUPER] = declManager->FindMaterial(CROSSHAIR_SUPER_MATERIAL);
 
@@ -90,17 +84,14 @@
     crosshairHeight = 64;
 
     currentCrosshair = CROSSHAIR_STANDARD;
-
 }
 
 void SSDCrossHair::Draw(idDeviceContext *dc, const idVec2& cursor)
 {
-
     float x,y;
     x = cursor.x-(crosshairWidth/2);
     y = cursor.y-(crosshairHeight/2);
     dc->DrawMaterial(x, y, crosshairWidth, crosshairHeight, crosshairMaterial[currentCrosshair], colorWhite, 1.0f, 1.0f);
-
 }
 
 /*
@@ -120,7 +111,6 @@
 
 void SSDEntity::WriteToSaveGame(idFile *savefile)
 {
-
     savefile->Write(&type, sizeof(type));
     game->WriteSaveGameString(materialName, savefile);
     savefile->Write(&position, sizeof(position));
@@ -144,12 +134,10 @@
     savefile->Write(&noPlayerDamage, sizeof(noPlayerDamage));
 
     savefile->Write(&inUse, sizeof(inUse));
-
 }
 
 void SSDEntity::ReadFromSaveGame(idFile *savefile,  idGameSSDWindow* _game)
 {
-
     savefile->Read(&type, sizeof(type));
     game->ReadSaveGameString(materialName, savefile);
     SetMaterial(materialName);
@@ -179,10 +167,8 @@
 
 void SSDEntity::EntityInit()
 {
-
     inUse = false;
 
-
     type = SSD_ENTITY_BASE;
 
     materialName = "";
@@ -193,7 +179,6 @@
     hitRadius = 0.0f;
     rotation = 0.0f;
 
-
     currentTime = 0;
     lastUpdate = 0;
 
@@ -243,7 +228,6 @@
 
 void SSDEntity::Update()
 {
-
     currentTime = game->ssdTime;
 
     //Is this the first update
@@ -252,7 +236,6 @@
         lastUpdate = currentTime;
         return;
     }
-
     elapsed = currentTime - lastUpdate;
 
     EntityUpdate();
@@ -262,15 +245,12 @@
 
 bool SSDEntity::HitTest(const idVec2& pt)
 {
-
     if (noHit)
     {
         return false;
     }
-
     idVec3 screenPos = WorldToScreen(position);
 
-
     //Scale the radius based on the distance from the player
     float scale = 1.0f -((screenPos.z-Z_NEAR)/(Z_FAR-Z_NEAR));
     float scaledRad = scale*hitRadius;
@@ -290,8 +270,6 @@
 
 void SSDEntity::Draw(idDeviceContext *dc)
 {
-
-
     idVec2 persize;
     float x,y;
 
@@ -314,7 +292,6 @@
         idRectangle rect(x, y, VIRTUAL_WIDTH, VIRTUAL_HEIGHT);
         dc->DrawText(text, textScale, 0, foreColor, rect, false);
     }
-
 }
 
 void SSDEntity::DestroyEntity()
@@ -324,7 +301,6 @@
 
 idBounds SSDEntity::WorldToScreen(const idBounds worldBounds)
 {
-
     idVec3 screenMin = WorldToScreen(worldBounds[0]);
     idVec3 screenMax = WorldToScreen(worldBounds[1]);
 
@@ -334,7 +310,6 @@
 
 idVec3 SSDEntity::WorldToScreen(const idVec3& worldPos)
 {
-
     float d = 0.5f*V_WIDTH*idMath::Tan(DEG2RAD(90.0f)/2.0f);
 
     //World To Camera Coordinates
@@ -353,7 +328,6 @@
 
 idVec3 SSDEntity::ScreenToWorld(const idVec3& screenPos)
 {
-
     idVec3 worldPos;
 
     worldPos.x = screenPos.x - 0.5f * V_WIDTH;
@@ -402,7 +376,6 @@
 
 void SSDMover::EntityUpdate()
 {
-
     SSDEntity::EntityUpdate();
 
     //Move forward based on speed (units per second)
@@ -421,7 +394,6 @@
     }
 }
 
-
 /*
 *****************************************************************************
 * SSDAsteroid
@@ -456,7 +428,6 @@
 
 void SSDAsteroid::Init(idGameSSDWindow* _game, const idVec3& startPosition, const idVec2& _size, float _speed, float rotate, int _health)
 {
-
     EntityInit();
     MoverInit(idVec3(0,0, -_speed), rotate);
 
@@ -469,15 +440,12 @@
     SetRadius(Max(size.x, size.y), 0.3f);
     SetRotation(game->random.RandomInt(360));
 
-
     position = startPosition;
-
     health = _health;
 }
 
 void SSDAsteroid::EntityUpdate()
 {
-
     SSDMover::EntityUpdate();
 }
 
@@ -525,7 +493,6 @@
 
 void SSDAsteroid::ReadAsteroids(idFile* savefile, idGameSSDWindow* _game)
 {
-
     int count;
     savefile->Read(&count, sizeof(count));
     for (int i = 0; i < count; i++)
@@ -571,7 +538,6 @@
 
 void SSDAstronaut::Init(idGameSSDWindow* _game, const idVec3& startPosition, float _speed, float rotate, int _health)
 {
-
     EntityInit();
     MoverInit(idVec3(0,0, -_speed), rotate);
 
@@ -606,7 +572,6 @@
 SSDAstronaut* SSDAstronaut::GetSpecificAstronaut(int id)
 {
     return &astronautPool[id];
-
 }
 
 void SSDAstronaut::WriteAstronauts(idFile* savefile)
@@ -632,7 +597,6 @@
 
 void SSDAstronaut::ReadAstronauts(idFile* savefile, idGameSSDWindow* _game)
 {
-
     int count;
     savefile->Read(&count, sizeof(count));
     for (int i = 0; i < count; i++)
@@ -652,10 +616,6 @@
 
 SSDExplosion SSDExplosion::explosionPool[MAX_EXPLOSIONS];
 
-
-//#define EXPLOSION_MATERIAL "game/SSD/fball"
-//#define EXPLOSION_TELEPORT "game/SSD/teleport"
-
 const char* explosionMaterials[] =
 {
     "game/SSD/fball",
@@ -714,7 +674,6 @@
 
 void SSDExplosion::Init(idGameSSDWindow* _game, const idVec3& _position, const idVec2& _size, int _length, int _type, SSDEntity* _buddy, bool _killBuddy, bool _followBuddy)
 {
-
     EntityInit();
 
     SetGame(_game);
@@ -744,7 +703,6 @@
 
 void SSDExplosion::EntityUpdate()
 {
-
     SSDEntity::EntityUpdate();
 
     //Always set my position to my buddies position except change z to be on top
@@ -817,7 +775,6 @@
 
 void SSDExplosion::ReadExplosions(idFile* savefile, idGameSSDWindow* _game)
 {
-
     int count;
     savefile->Read(&count, sizeof(count));
     for (int i = 0; i < count; i++)
@@ -881,7 +838,6 @@
 
 void SSDPoints::Init(idGameSSDWindow* _game, SSDEntity* _ent, int _points, int _length, int _distance, const idVec4& color)
 {
-
     EntityInit();
 
     SetGame(_game);
@@ -926,7 +882,6 @@
 
 void SSDPoints::EntityUpdate()
 {
-
     float t = (float)(currentTime - beginTime)/(float)length;
 
     //Move up from the start position
@@ -983,7 +938,6 @@
 
 void SSDPoints::ReadPoints(idFile* savefile, idGameSSDWindow* _game)
 {
-
     int count;
     savefile->Read(&count, sizeof(count));
     for (int i = 0; i < count; i++)
@@ -1040,7 +994,6 @@
 
 void SSDProjectile::Init(idGameSSDWindow* _game, const idVec3& _beginPosition, const idVec3& _endPosition, float _speed, float _size)
 {
-
     EntityInit();
 
     SetGame(_game);
@@ -1062,7 +1015,6 @@
 
 void SSDProjectile::EntityUpdate()
 {
-
     SSDEntity::EntityUpdate();
 
     //Move forward based on speed (units per second)
@@ -1118,7 +1070,6 @@
 
 void SSDProjectile::ReadProjectiles(idFile* savefile, idGameSSDWindow* _game)
 {
-
     int count;
     savefile->Read(&count, sizeof(count));
     for (int i = 0; i < count; i++)
@@ -1177,15 +1128,11 @@
 
 void SSDPowerup::OnHit(int key)
 {
-
     if (powerupState == POWERUP_STATE_CLOSED)
     {
-
         //Small explosion to indicate it is opened
         SSDExplosion* explosion = SSDExplosion::GetNewExplosion(game, position, size*2.0f, 300, SSDExplosion::EXPLOSION_NORMAL, this, false, true);
         game->entities.Append(explosion);
-
-
         powerupState = POWERUP_STATE_OPEN;
         SetMaterial(powerupMaterials[powerupType][powerupState]);
     }
@@ -1203,7 +1150,6 @@
 
 void SSDPowerup::OnStrikePlayer()
 {
-
     if (powerupState == POWERUP_STATE_OPEN)
     {
         //The powerup was open so activate it
@@ -1261,7 +1207,6 @@
 
 void SSDPowerup::Init(idGameSSDWindow* _game, float _speed, float _rotation)
 {
-
     EntityInit();
     MoverInit(idVec3(0,0, -_speed), _rotation);
 
@@ -1285,18 +1230,11 @@
     {
         powerupType = 0;
     }
-
-    /*OutputDebugString(va("Powerup: %d\n", powerupType));
-    if(powerupType == 0) {
-    	int x = 0;
-    }*/
-
     SetMaterial(powerupMaterials[powerupType][powerupState]);
 }
 
 SSDPowerup* SSDPowerup::GetNewPowerup(idGameSSDWindow* _game, float _speed, float _rotation)
 {
-
     for (int i = 0; i < MAX_POWERUPS; i++)
     {
         if (!powerupPool[i].inUse)
@@ -1337,7 +1275,6 @@
 
 void SSDPowerup::ReadPowerups(idFile* savefile, idGameSSDWindow* _game)
 {
-
     int count;
     savefile->Read(&count, sizeof(count));
     for (int i = 0; i < count; i++)
@@ -1380,15 +1317,12 @@
     idWindow::WriteToSaveGame(savefile);
 
     savefile->Write(&ssdTime, sizeof(ssdTime));
-
     beginLevel.WriteToSaveGame(savefile);
     resetGame.WriteToSaveGame(savefile);
     continueGame.WriteToSaveGame(savefile);
     refreshGuiData.WriteToSaveGame(savefile);
-
     crosshair.WriteToSaveGame(savefile);
     savefile->Write(&screenBounds, sizeof(screenBounds));
-
     savefile->Write(&levelCount, sizeof(levelCount));
     for (int i = 0; i < levelCount; i++)
     {
@@ -1397,13 +1331,12 @@
         savefile->Write(&(astronautData[i]), sizeof(SSDAstronautData_t));
         savefile->Write(&(powerupData[i]), sizeof(SSDPowerupData_t));
     }
-
     savefile->Write(&weaponCount, sizeof(weaponCount));
+
     for (int i = 0; i < weaponCount; i++)
     {
         savefile->Write(&(weaponData[i]), sizeof(SSDWeaponData_t));
     }
-
     savefile->Write(&superBlasterTimeout, sizeof(superBlasterTimeout));
     savefile->Write(&gameStats, sizeof(SSDGameStats_t));
 
@@ -1427,8 +1360,6 @@
 void idGameSSDWindow::ReadFromSaveGame(idFile *savefile)
 {
     idWindow::ReadFromSaveGame(savefile);
-
-
     savefile->Read(&ssdTime, sizeof(ssdTime));
 
     beginLevel.ReadFromSaveGame(savefile);
@@ -1499,7 +1430,6 @@
 
 const char *idGameSSDWindow::HandleEvent(const sysEvent_t *event, bool *updateVisuals)
 {
-
     // need to call this to allow proper focus and capturing on embedded children
     const char *ret = idWindow::HandleEvent(event, updateVisuals);
 
@@ -1507,7 +1437,6 @@
     {
         return ret;
     }
-
     int key = event->evValue;
 
     if (event->evType == SE_KEY)
@@ -1532,7 +1461,6 @@
 
 idWinVar *idGameSSDWindow::GetWinVarByName(const char *_name, bool winLookup, drawWin_t** owner)
 {
-
     idWinVar *retVar = NULL;
 
     if (idStr::Icmp(_name, "beginLevel") == 0)
@@ -1553,20 +1481,16 @@
     {
         retVar = &refreshGuiData;
     }
-
-
     if (retVar)
     {
         return retVar;
     }
-
     return idWindow::GetWinVarByName(_name, winLookup, owner);
 }
 
 
 void idGameSSDWindow::Draw(int time, float x, float y)
 {
-
     //Update the game every frame before drawing
     UpdateGame();
 
@@ -1574,7 +1498,6 @@
 
     if (gameStats.gameRunning)
     {
-
         ZOrderEntities();
 
         //Draw from back to front
@@ -1585,10 +1508,8 @@
 
         //The last thing to draw is the crosshair
         idVec2 cursor;
-        //GetCursor(cursor);
         cursor.x = gui->CursorX();
         cursor.y = gui->CursorY();
-
         crosshair.Draw(dc, cursor);
     }
 }
@@ -1596,7 +1517,6 @@
 
 bool idGameSSDWindow::ParseInternalVar(const char *_name, idParser *src)
 {
-
     if (idStr::Icmp(_name, "beginLevel") == 0)
     {
         beginLevel = src->ParseBool();
@@ -1638,8 +1558,6 @@
             SSDPowerupData_t newPowerup;
             memset(&newPowerup, 0, sizeof(SSDPowerupData_t));
             powerupData.Append(newPowerup);
-
-
         }
         return true;
     }
@@ -1709,13 +1627,11 @@
         ParsePowerupData(level, powerupData);
         return true;
     }
-
     return idWindow::ParseInternalVar(_name, src);
 }
 
 void idGameSSDWindow::ParseLevelData(int level, const idStr& levelDataString)
 {
-
     idParser parser;
     idToken token;
     parser.LoadMemory(levelDataString.c_str(), levelDataString.Length(), "LevelData");
@@ -1727,7 +1643,6 @@
 
 void idGameSSDWindow::ParseAsteroidData(int level, const idStr& asteroidDataString)
 {
-
     idParser parser;
     idToken token;
     parser.LoadMemory(asteroidDataString.c_str(), asteroidDataString.Length(), "AsteroidData");
@@ -1751,7 +1666,6 @@
 
 void idGameSSDWindow::ParsePowerupData(int level, const idStr& powerupDataString)
 {
-
     idParser parser;
     idToken token;
     parser.LoadMemory(powerupDataString.c_str(), powerupDataString.Length(), "PowerupData");
@@ -1769,7 +1683,6 @@
 
 void idGameSSDWindow::ParseWeaponData(int weapon, const idStr& weaponDataString)
 {
-
     idParser parser;
     idToken token;
     parser.LoadMemory(weaponDataString.c_str(), weaponDataString.Length(), "WeaponData");
@@ -1781,7 +1694,6 @@
 
 void idGameSSDWindow::ParseAstronautData(int level, const idStr& astronautDataString)
 {
-
     idParser parser;
     idToken token;
     parser.LoadMemory(astronautDataString.c_str(), astronautDataString.Length(), "AstronautData");
@@ -1804,7 +1716,6 @@
 {
     crosshair.InitCrosshairs();
 
-
     beginLevel = false;
     resetGame = false;
     continueGame = false;
@@ -1828,6 +1739,7 @@
         declManager->FindMaterial(explosionMaterials[i]);
     }
     declManager->FindMaterial(PROJECTILE_MATERIAL);
+
     for (int i = 0; i < POWERUP_MATERIAL_COUNT; i++)
     {
         declManager->FindMaterial(powerupMaterials[i][0]);
@@ -1844,25 +1756,20 @@
 
 void idGameSSDWindow::ResetGameStats()
 {
-
     ResetEntities();
 
     //Reset the gamestats structure
     memset(&gameStats, 0, sizeof(gameStats));
 
     gameStats.health = 100;
-
 }
 
 void idGameSSDWindow::ResetLevelStats()
 {
-
     ResetEntities();
 
     //Reset the level statistics structure
     memset(&gameStats.levelStats, 0, sizeof(gameStats.levelStats));
-
-
 }
 
 void idGameSSDWindow::ResetEntities()
@@ -1877,20 +1784,16 @@
 
 void idGameSSDWindow::StartGame()
 {
-
     gameStats.gameRunning = true;
 }
 
 void idGameSSDWindow::StopGame()
 {
-
     gameStats.gameRunning = false;
 }
 
 void idGameSSDWindow::GameOver()
 {
-
-
     StopGame();
 
     gui->HandleNamedEvent("gameOver");
@@ -1898,7 +1801,6 @@
 
 void idGameSSDWindow::BeginLevel(int level)
 {
-
     ResetLevelStats();
 
     gameStats.currentLevel = level;
@@ -1918,7 +1820,6 @@
 
 void idGameSSDWindow::LevelComplete()
 {
-
     gameStats.prebonusscore = gameStats.score;
 
     // Add the bonuses
@@ -1953,23 +1854,19 @@
 
     gameStats.score += accuracyPoints;
 
-
-
     StopSuperBlaster();
 
     gameStats.nextLevel++;
 
     if (gameStats.nextLevel >= levelCount)
     {
-        //Have they beaten the game
+		// Have they beaten the game
         GameComplete();
     }
     else
     {
 
-        //Make sure we don't go above the levelcount
-        //min(gameStats.nextLevel, levelCount-1);
-
+		// Make sure we don't go above the levelcount
         StopGame();
         gui->HandleNamedEvent("levelComplete");
     }
@@ -1984,7 +1881,6 @@
 
 void idGameSSDWindow::UpdateGame()
 {
-
     //Check to see if and functions where called by the gui
     if (beginLevel == true)
     {
@@ -2020,7 +1916,6 @@
 
         //Find if we are targeting and enemy
         idVec2 cursor;
-        //GetCursor(cursor);
         cursor.x = gui->CursorX();
         cursor.y = gui->CursorY();
         gameStats.levelStats.targetEnt = EntityHitTest(cursor);
@@ -2030,7 +1925,6 @@
         {
             entities[i]->Update();
         }
-
         CheckForHits();
 
         //Delete entities that need to be deleted
@@ -2057,7 +1951,6 @@
 
 void idGameSSDWindow::CheckForHits()
 {
-
     //See if the entity has gotten close enough
     for (int i = 0; i < entities.Num(); i++)
     {
@@ -2077,7 +1970,6 @@
 
                 if (screenBounds.IntersectsBounds(entBounds))
                 {
-
                     ent->OnStrikePlayer();
 
                     //The entity hit the player figure out what is was and act appropriately
@@ -2107,6 +1999,7 @@
     for (int i = entities.Num()-1; i >= 0; i--)
     {
         bool flipped = false;
+
         for (int j = 0;  j<i ; j++)
         {
             if (entities[j]->position.z > entities[j+1]->position.z)
@@ -2117,6 +2010,7 @@
                 flipped = true;
             }
         }
+
         if (!flipped)
         {
             //Jump out because it is sorted
@@ -2127,7 +2021,6 @@
 
 void idGameSSDWindow::SpawnAsteroid()
 {
-
     int currentTime = ssdTime;
 
     if (currentTime < gameStats.levelStats.nextAsteroidSpawnTime)
@@ -2156,26 +2049,20 @@
 
 void idGameSSDWindow::FireWeapon(int key)
 {
-
     idVec2 cursorWorld = GetCursorWorld();
     idVec2 cursor;
-    //GetCursor(cursor);
     cursor.x = gui->CursorX();
     cursor.y = gui->CursorY();
 
     if (key == K_MOUSE1)
     {
-
         gameStats.levelStats.shotCount++;
 
         if (gameStats.levelStats.targetEnt)
         {
             //Aim the projectile from the bottom of the screen directly at the ent
-            //SSDProjectile* newProj = new SSDProjectile(this, idVec3(320,0,0), gameStats.levelStats.targetEnt->position, weaponData[gameStats.currentWeapon].speed, weaponData[gameStats.currentWeapon].size);
             SSDProjectile* newProj = SSDProjectile::GetNewProjectile(this, idVec3(0,-180,0), gameStats.levelStats.targetEnt->position, weaponData[gameStats.currentWeapon].speed, weaponData[gameStats.currentWeapon].size);
             entities.Append(newProj);
-            //newProj = SSDProjectile::GetNewProjectile(this, idVec3(-320,-0,0), gameStats.levelStats.targetEnt->position, weaponData[gameStats.currentWeapon].speed, weaponData[gameStats.currentWeapon].size);
-            //entities.Append(newProj);
 
             //We hit something
             gameStats.levelStats.hitCount++;
@@ -2190,16 +2077,9 @@
             {
                 HitAstronaut(static_cast<SSDAstronaut*>(gameStats.levelStats.targetEnt), key);
             }
-            else if (gameStats.levelStats.targetEnt->type == SSD_ENTITY_ASTRONAUT)
-            {
-
-            }
         }
         else
         {
-            ////Aim the projectile at the cursor position all the way to the far clipping
-            //SSDProjectile* newProj = SSDProjectile::GetNewProjectile(this, idVec3(0,-180,0), idVec3(cursorWorld.x, cursorWorld.y, (Z_FAR-Z_NEAR)/2.0f), weaponData[gameStats.currentWeapon].speed, weaponData[gameStats.currentWeapon].size);
-
             //Aim the projectile so it crosses the cursor 1/4 of screen
             idVec3 vec = idVec3(cursorWorld.x, cursorWorld.y, (Z_FAR-Z_NEAR)/8.0f);
             vec *= 8;
@@ -2208,22 +2088,13 @@
 
         }
 
-
         //Play the blaster sound
         PlaySound("arcade_blaster");
-
-    } /*else if (key == K_MOUSE2) {
-		if(gameStats.levelStats.targetEnt) {
-			if(gameStats.levelStats.targetEnt->type == SSD_ENTITY_ASTRONAUT) {
-				HitAstronaut(static_cast<SSDAstronaut*>(gameStats.levelStats.targetEnt), key);
-			}
 		}
-	}*/
 }
 
 SSDEntity* idGameSSDWindow::EntityHitTest(const idVec2& pt)
 {
-
     for (int i = 0; i < entities.Num(); i++)
     {
         //Since we ZOrder the entities every frame we can stop at the first entity we hit.
@@ -2238,14 +2109,10 @@
 
 void idGameSSDWindow::HitAsteroid(SSDAsteroid* asteroid, int key)
 {
-
-
-
     asteroid->health -= weaponData[gameStats.currentWeapon].damage;
 
     if (asteroid->health <= 0)
     {
-
         //The asteroid has been destroyed
         SSDExplosion* explosion = SSDExplosion::GetNewExplosion(this, asteroid->position, asteroid->size*2, 300, SSDExplosion::EXPLOSION_NORMAL, asteroid);
         entities.Append(explosion);
@@ -2257,10 +2124,6 @@
         asteroid->noHit = true;
 
         gameStats.levelStats.destroyedAsteroids++;
-        //if(gameStats.levelStats.destroyedAsteroids >= levelData[gameStats.currentLevel].needToWin) {
-        //	LevelComplete();
-        //}
-
     }
     else
     {
@@ -2272,7 +2135,6 @@
 
 void idGameSSDWindow::AsteroidStruckPlayer(SSDAsteroid* asteroid)
 {
-
     asteroid->noPlayerDamage = true;
     asteroid->noHit = true;
 
@@ -2285,7 +2147,6 @@
 
 void idGameSSDWindow::AddScore(SSDEntity* ent, int points)
 {
-
     SSDPoints* pointsEnt;
 
     if (points > 0)
@@ -2325,7 +2186,6 @@
 
 void idGameSSDWindow::OnNuke()
 {
-
     gui->HandleNamedEvent("nuke");
 
     //Destory All Asteroids
@@ -2348,17 +2208,10 @@
         }
     }
     PlaySound("arcade_explode");
-
-    //Check to see if a nuke ends the level
-    /*if(gameStats.levelStats.destroyedAsteroids >= levelData[gameStats.currentLevel].needToWin) {
-    	LevelComplete();
-
-    }*/
 }
 
 void idGameSSDWindow::OnRescueAll()
 {
-
     gui->HandleNamedEvent("rescueAll");
 
     //Rescue All Astronauts
@@ -2375,16 +2228,11 @@
 
 void idGameSSDWindow::OnSuperBlaster()
 {
-
     StartSuperBlaster();
 }
 
-
-
 void idGameSSDWindow::RefreshGuiData()
 {
-
-
     gui->SetStateString("nextLevel", va("%i", gameStats.nextLevel+1));
     gui->SetStateString("currentLevel", va("%i", gameStats.currentLevel+1));
 
@@ -2412,9 +2260,6 @@
     }
     gui->SetStateString("save_accuracy", va("%d%%", (int)saveAccuracy));
 
-
-
-
     if (gameStats.levelStats.targetEnt)
     {
         int dist = (gameStats.levelStats.targetEnt->position.z/100.0f);
@@ -2425,13 +2270,11 @@
     {
         gui->SetStateString("target_info", "No Target");
     }
-
     gui->SetStateString("player_health", va("%i", gameStats.health));
     gui->SetStateString("player_score", va("%i", gameStats.score));
     gui->SetStateString("player_prebonusscore", va("%i", gameStats.prebonusscore));
     gui->SetStateString("level_complete", va("%i/%i", gameStats.levelStats.savedAstronauts, levelData[gameStats.currentLevel].needToWin));
 
-
     if (superBlasterTimeout)
     {
         float timeRemaining = (superBlasterTimeout - ssdTime)/1000.0f;
@@ -2441,9 +2284,7 @@
 
 idVec2 idGameSSDWindow::GetCursorWorld()
 {
-
     idVec2 cursor;
-    //GetCursor(cursor);
     cursor.x = gui->CursorX();
     cursor.y = gui->CursorY();
     cursor.x = cursor.x - 0.5f * V_WIDTH;
@@ -2453,7 +2294,6 @@
 
 void idGameSSDWindow::SpawnAstronaut()
 {
-
     int currentTime = ssdTime;
 
     if (currentTime < gameStats.levelStats.nextAstronautSpawnTime)
@@ -2480,15 +2320,12 @@
 
 void idGameSSDWindow::HitAstronaut(SSDAstronaut* astronaut, int key)
 {
-
-
     if (key == K_MOUSE1)
     {
         astronaut->health -= weaponData[gameStats.currentWeapon].damage;
 
         if (astronaut->health <= 0)
         {
-
             gameStats.levelStats.killedAstronauts++;
 
             //The astronaut has been destroyed
@@ -2513,7 +2350,6 @@
 
 void idGameSSDWindow::AstronautStruckPlayer(SSDAstronaut* astronaut)
 {
-
     gameStats.levelStats.savedAstronauts++;
 
     astronaut->noPlayerDamage = true;
@@ -2531,12 +2367,10 @@
     {
         LevelComplete();
     }
-
 }
 
 void idGameSSDWindow::SpawnPowerup()
 {
-
     int currentTime = ssdTime;
 
     if (currentTime < gameStats.levelStats.nextPowerupSpawnTime)
@@ -2544,7 +2378,6 @@
         //Not time yet
         return;
     }
-
     float speed = random.RandomInt(powerupData[gameStats.currentLevel].speedMax - powerupData[gameStats.currentLevel].speedMin) + powerupData[gameStats.currentLevel].speedMin;
     float rotate = (random.RandomFloat() * (powerupData[gameStats.currentLevel].rotateMax - powerupData[gameStats.currentLevel].rotateMin)) + powerupData[gameStats.currentLevel].rotateMin;
 
@@ -2552,23 +2385,20 @@
     entities.Append(powerup);
 
     gameStats.levelStats.nextPowerupSpawnTime = currentTime + random.RandomInt(powerupData[gameStats.currentLevel].spawnMax - powerupData[gameStats.currentLevel].spawnMin) + powerupData[gameStats.currentLevel].spawnMin;
-
 }
 
 void idGameSSDWindow::StartSuperBlaster()
 {
-
     gui->HandleNamedEvent("startSuperBlaster");
     gameStats.currentWeapon = 1;
     superBlasterTimeout = ssdTime + 10000;
-
 }
+
 void idGameSSDWindow::StopSuperBlaster()
 {
     gui->HandleNamedEvent("stopSuperBlaster");
     gameStats.currentWeapon = 0;
     superBlasterTimeout = 0;
-
 }
 
 SSDEntity* idGameSSDWindow::GetSpecificEntity(int type, int id)
@@ -2602,10 +2432,10 @@
 
 void idGameSSDWindow::PlaySound(const char* sound)
 {
-
     session->sw->PlayShaderDirectly(sound, currentSound);
 
     currentSound++;
+
     if (currentSound >= MAX_SOUND_CHANNEL)
     {
         currentSound = 0;
